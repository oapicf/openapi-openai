--  OpenAI API
--  APIs for sampling from and fine_tuning language models
--
--  The version of the OpenAPI document: 2.0.0
--  Contact: blah+oapicf@cliffano.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.4.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with Swagger.Streams;
with Swagger.Servers.Operation;
package body .Skeletons is
   pragma Style_Checks ("-bmrIu");
   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   Mime_1 : aliased constant String := "multipart/form-data";
   Media_List_1 : aliased constant Swagger.Mime_List := (
     1 => Swagger.Mime_Json);   Media_List_2 : aliased constant Swagger.Mime_List := (
     1 => Mime_1'Access);

   package body Skeleton is


      package API_Cancel_Fine_Tune is
         new Swagger.Servers.Operation
            (Handler => Cancel_Fine_Tune,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/fine-tunes/{fine_tune_id}/cancel",
             Mimes   => Media_List_1'Access);

      --  Immediately cancel a fine_tune job.
      procedure Cancel_Fine_Tune
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Fine_Tune_Id : Swagger.UString;
         Result : .Models.FineTune_Type;
      begin
         
         
         Fine_Tune_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Cancel_Fine_Tune
            (Fine_Tune_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Cancel_Fine_Tune;

      package API_Create_Chat_Completion is
         new Swagger.Servers.Operation
            (Handler => Create_Chat_Completion,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/chat/completions",
             Mimes   => Media_List_1'Access);

      --  Creates a model response for the given chat conversation.
      procedure Create_Chat_Completion
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Create_Chat_Completion_Request_Type : CreateChatCompletionRequest_Type;
         Result : .Models.CreateChatCompletionResponse_Type;
      begin
         
         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CreateChatCompletionRequest_Type", Create_Chat_Completion_Request_Type);
         Impl.Create_Chat_Completion
            (Create_Chat_Completion_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Chat_Completion;

      package API_Create_Completion is
         new Swagger.Servers.Operation
            (Handler => Create_Completion,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/completions",
             Mimes   => Media_List_1'Access);

      --  Creates a completion for the provided prompt and parameters.
      procedure Create_Completion
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Create_Completion_Request_Type : CreateCompletionRequest_Type;
         Result : .Models.CreateCompletionResponse_Type;
      begin
         
         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CreateCompletionRequest_Type", Create_Completion_Request_Type);
         Impl.Create_Completion
            (Create_Completion_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Completion;

      package API_Create_Edit is
         new Swagger.Servers.Operation
            (Handler => Create_Edit,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/edits",
             Mimes   => Media_List_1'Access);

      --  Creates a new edit for the provided input, instruction, and parameters.
      procedure Create_Edit
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Create_Edit_Request_Type : CreateEditRequest_Type;
         Result : .Models.CreateEditResponse_Type;
      begin
         
         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CreateEditRequest_Type", Create_Edit_Request_Type);
         Impl.Create_Edit
            (Create_Edit_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Edit;

      package API_Create_Embedding is
         new Swagger.Servers.Operation
            (Handler => Create_Embedding,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/embeddings",
             Mimes   => Media_List_1'Access);

      --  Creates an embedding vector representing the input text.
      procedure Create_Embedding
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Create_Embedding_Request_Type : CreateEmbeddingRequest_Type;
         Result : .Models.CreateEmbeddingResponse_Type;
      begin
         
         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CreateEmbeddingRequest_Type", Create_Embedding_Request_Type);
         Impl.Create_Embedding
            (Create_Embedding_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Embedding;

      package API_Create_File is
         new Swagger.Servers.Operation
            (Handler => Create_File,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/files",
             Mimes   => Media_List_1'Access);

      --  Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.
      procedure Create_File
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         File : Swagger.File_Part_Type;
         Purpose : Swagger.UString;
         Result : .Models.OpenAIFile_Type;
      begin
         
         
         Swagger.Servers.Get_Parameter (Context, "file", File);
         Swagger.Servers.Get_Parameter (Context, "purpose", Purpose);
         Impl.Create_File
            (File,
             Purpose, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_File;

      package API_Create_Fine_Tune is
         new Swagger.Servers.Operation
            (Handler => Create_Fine_Tune,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/fine-tunes",
             Mimes   => Media_List_1'Access);

      --  Creates a job that fine_tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine_tuned models once complete.  [Learn more about Fine_tuning](/docs/guides/fine_tuning)
      procedure Create_Fine_Tune
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Create_Fine_Tune_Request_Type : CreateFineTuneRequest_Type;
         Result : .Models.FineTune_Type;
      begin
         
         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CreateFineTuneRequest_Type", Create_Fine_Tune_Request_Type);
         Impl.Create_Fine_Tune
            (Create_Fine_Tune_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Fine_Tune;

      package API_Create_Image is
         new Swagger.Servers.Operation
            (Handler => Create_Image,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/images/generations",
             Mimes   => Media_List_1'Access);

      --  Creates an image given a prompt.
      procedure Create_Image
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Create_Image_Request_Type : CreateImageRequest_Type;
         Result : .Models.ImagesResponse_Type;
      begin
         
         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CreateImageRequest_Type", Create_Image_Request_Type);
         Impl.Create_Image
            (Create_Image_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Image;

      package API_Create_Image_Edit is
         new Swagger.Servers.Operation
            (Handler => Create_Image_Edit,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/images/edits",
             Mimes   => Media_List_1'Access);

      --  Creates an edited or extended image given an original image and a prompt.
      procedure Create_Image_Edit
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Image : Swagger.File_Part_Type;
         Prompt : Swagger.UString;
         Mask : Swagger.File_Part_Type;
         N : Swagger.Nullable_Integer;
         Size : Swagger.Nullable_UString;
         Response_Format : Swagger.Nullable_UString;
         User : Swagger.Nullable_UString;
         Result : .Models.ImagesResponse_Type;
      begin
         
         
         Swagger.Servers.Get_Parameter (Context, "image", Image);
         Swagger.Servers.Get_Parameter (Context, "mask", Mask);
         Swagger.Servers.Get_Parameter (Context, "prompt", Prompt);
         Swagger.Servers.Get_Parameter (Context, "n", N);
         Swagger.Servers.Get_Parameter (Context, "size", Size);
         Swagger.Servers.Get_Parameter (Context, "response_format", Response_Format);
         Swagger.Servers.Get_Parameter (Context, "user", User);
         Impl.Create_Image_Edit
            (Image,
             Prompt,
             Mask,
             N,
             Size,
             Response_Format,
             User, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Image_Edit;

      package API_Create_Image_Variation is
         new Swagger.Servers.Operation
            (Handler => Create_Image_Variation,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/images/variations",
             Mimes   => Media_List_1'Access);

      --  Creates a variation of a given image.
      procedure Create_Image_Variation
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Image : Swagger.File_Part_Type;
         N : Swagger.Nullable_Integer;
         Size : Swagger.Nullable_UString;
         Response_Format : Swagger.Nullable_UString;
         User : Swagger.Nullable_UString;
         Result : .Models.ImagesResponse_Type;
      begin
         
         
         Swagger.Servers.Get_Parameter (Context, "image", Image);
         Swagger.Servers.Get_Parameter (Context, "n", N);
         Swagger.Servers.Get_Parameter (Context, "size", Size);
         Swagger.Servers.Get_Parameter (Context, "response_format", Response_Format);
         Swagger.Servers.Get_Parameter (Context, "user", User);
         Impl.Create_Image_Variation
            (Image,
             N,
             Size,
             Response_Format,
             User, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Image_Variation;

      package API_Create_Moderation is
         new Swagger.Servers.Operation
            (Handler => Create_Moderation,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/moderations",
             Mimes   => Media_List_1'Access);

      --  Classifies if text violates OpenAI's Content Policy
      procedure Create_Moderation
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Create_Moderation_Request_Type : CreateModerationRequest_Type;
         Result : .Models.CreateModerationResponse_Type;
      begin
         
         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CreateModerationRequest_Type", Create_Moderation_Request_Type);
         Impl.Create_Moderation
            (Create_Moderation_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Moderation;

      package API_Create_Transcription is
         new Swagger.Servers.Operation
            (Handler => Create_Transcription,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/audio/transcriptions",
             Mimes   => Media_List_1'Access);

      --  Transcribes audio into the input language.
      procedure Create_Transcription
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         File : Swagger.File_Part_Type;
         Model : .Models.CreateTranscriptionRequestModel_Type;
         Prompt : Swagger.Nullable_UString;
         Response_Format : Swagger.Nullable_UString;
         Temperature : Swagger.Number;
         Language : Swagger.Nullable_UString;
         Result : .Models.CreateTranscriptionResponse_Type;
      begin
         
         
         Swagger.Servers.Get_Parameter (Context, "file", File);
         Swagger.Servers.Get_Parameter (Context, "model", Model);
         Swagger.Servers.Get_Parameter (Context, "prompt", Prompt);
         Swagger.Servers.Get_Parameter (Context, "response_format", Response_Format);
         Swagger.Servers.Get_Parameter (Context, "temperature", Temperature);
         Swagger.Servers.Get_Parameter (Context, "language", Language);
         Impl.Create_Transcription
            (File,
             Model,
             Prompt,
             Response_Format,
             Temperature,
             Language, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Transcription;

      package API_Create_Translation is
         new Swagger.Servers.Operation
            (Handler => Create_Translation,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/audio/translations",
             Mimes   => Media_List_1'Access);

      --  Translates audio into English.
      procedure Create_Translation
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         File : Swagger.File_Part_Type;
         Model : .Models.CreateTranscriptionRequestModel_Type;
         Prompt : Swagger.Nullable_UString;
         Response_Format : Swagger.Nullable_UString;
         Temperature : Swagger.Number;
         Result : .Models.CreateTranslationResponse_Type;
      begin
         
         
         Swagger.Servers.Get_Parameter (Context, "file", File);
         Swagger.Servers.Get_Parameter (Context, "model", Model);
         Swagger.Servers.Get_Parameter (Context, "prompt", Prompt);
         Swagger.Servers.Get_Parameter (Context, "response_format", Response_Format);
         Swagger.Servers.Get_Parameter (Context, "temperature", Temperature);
         Impl.Create_Translation
            (File,
             Model,
             Prompt,
             Response_Format,
             Temperature, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Translation;

      package API_Delete_File is
         new Swagger.Servers.Operation
            (Handler => Delete_File,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/files/{file_id}",
             Mimes   => Media_List_1'Access);

      --  Delete a file.
      procedure Delete_File
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         File_Id : Swagger.UString;
         Result : .Models.DeleteFileResponse_Type;
      begin
         
         
         File_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Delete_File
            (File_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Delete_File;

      package API_Delete_Model is
         new Swagger.Servers.Operation
            (Handler => Delete_Model,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/models/{model}",
             Mimes   => Media_List_1'Access);

      --  Delete a fine_tuned model. You must have the Owner role in your organization.
      procedure Delete_Model
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Model : Swagger.UString;
         Result : .Models.DeleteModelResponse_Type;
      begin
         
         
         Model := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Delete_Model
            (Model, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Delete_Model;

      package API_Download_File is
         new Swagger.Servers.Operation
            (Handler => Download_File,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/files/{file_id}/content",
             Mimes   => Media_List_1'Access);

      --  Returns the contents of the specified file
      procedure Download_File
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         File_Id : Swagger.UString;
         Result : Swagger.UString;
      begin
         
         
         File_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Download_File
            (File_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;

      end Download_File;

      package API_List_Files is
         new Swagger.Servers.Operation
            (Handler => List_Files,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/files",
             Mimes   => Media_List_1'Access);

      --  Returns a list of files that belong to the user's organization.
      procedure List_Files
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.ListFilesResponse_Type;
      begin
         
         
         Impl.List_Files (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end List_Files;

      package API_List_Fine_Tune_Events is
         new Swagger.Servers.Operation
            (Handler => List_Fine_Tune_Events,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/fine-tunes/{fine_tune_id}/events",
             Mimes   => Media_List_1'Access);

      --  Get fine_grained status updates for a fine_tune job.
      procedure List_Fine_Tune_Events
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Fine_Tune_Id : Swagger.UString;
         Stream : Swagger.Nullable_Boolean;
         Result : .Models.ListFineTuneEventsResponse_Type;
      begin
         
         Stream := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "stream"));

         
         Fine_Tune_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.List_Fine_Tune_Events
            (Fine_Tune_Id,
             Stream, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end List_Fine_Tune_Events;

      package API_List_Fine_Tunes is
         new Swagger.Servers.Operation
            (Handler => List_Fine_Tunes,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/fine-tunes",
             Mimes   => Media_List_1'Access);

      --  List your organization's fine_tuning jobs
      procedure List_Fine_Tunes
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.ListFineTunesResponse_Type;
      begin
         
         
         Impl.List_Fine_Tunes (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end List_Fine_Tunes;

      package API_List_Models is
         new Swagger.Servers.Operation
            (Handler => List_Models,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/models",
             Mimes   => Media_List_1'Access);

      --  Lists the currently available models, and provides basic information about each one such as the owner and availability.
      procedure List_Models
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.ListModelsResponse_Type;
      begin
         
         
         Impl.List_Models (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end List_Models;

      package API_Retrieve_File is
         new Swagger.Servers.Operation
            (Handler => Retrieve_File,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/files/{file_id}",
             Mimes   => Media_List_1'Access);

      --  Returns information about a specific file.
      procedure Retrieve_File
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         File_Id : Swagger.UString;
         Result : .Models.OpenAIFile_Type;
      begin
         
         
         File_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Retrieve_File
            (File_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Retrieve_File;

      package API_Retrieve_Fine_Tune is
         new Swagger.Servers.Operation
            (Handler => Retrieve_Fine_Tune,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/fine-tunes/{fine_tune_id}",
             Mimes   => Media_List_1'Access);

      --  Gets info about the fine_tune job.  [Learn more about Fine_tuning](/docs/guides/fine_tuning)
      procedure Retrieve_Fine_Tune
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Fine_Tune_Id : Swagger.UString;
         Result : .Models.FineTune_Type;
      begin
         
         
         Fine_Tune_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Retrieve_Fine_Tune
            (Fine_Tune_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Retrieve_Fine_Tune;

      package API_Retrieve_Model is
         new Swagger.Servers.Operation
            (Handler => Retrieve_Model,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/models/{model}",
             Mimes   => Media_List_1'Access);

      --  Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
      procedure Retrieve_Model
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Model : Swagger.UString;
         Result : .Models.Model_Type;
      begin
         
         
         Model := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Retrieve_Model
            (Model, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Retrieve_Model;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Cancel_Fine_Tune.Definition);
         Swagger.Servers.Register (Server, API_Create_Chat_Completion.Definition);
         Swagger.Servers.Register (Server, API_Create_Completion.Definition);
         Swagger.Servers.Register (Server, API_Create_Edit.Definition);
         Swagger.Servers.Register (Server, API_Create_Embedding.Definition);
         Swagger.Servers.Register (Server, API_Create_File.Definition);
         Swagger.Servers.Register (Server, API_Create_Fine_Tune.Definition);
         Swagger.Servers.Register (Server, API_Create_Image.Definition);
         Swagger.Servers.Register (Server, API_Create_Image_Edit.Definition);
         Swagger.Servers.Register (Server, API_Create_Image_Variation.Definition);
         Swagger.Servers.Register (Server, API_Create_Moderation.Definition);
         Swagger.Servers.Register (Server, API_Create_Transcription.Definition);
         Swagger.Servers.Register (Server, API_Create_Translation.Definition);
         Swagger.Servers.Register (Server, API_Delete_File.Definition);
         Swagger.Servers.Register (Server, API_Delete_Model.Definition);
         Swagger.Servers.Register (Server, API_Download_File.Definition);
         Swagger.Servers.Register (Server, API_List_Files.Definition);
         Swagger.Servers.Register (Server, API_List_Fine_Tune_Events.Definition);
         Swagger.Servers.Register (Server, API_List_Fine_Tunes.Definition);
         Swagger.Servers.Register (Server, API_List_Models.Definition);
         Swagger.Servers.Register (Server, API_Retrieve_File.Definition);
         Swagger.Servers.Register (Server, API_Retrieve_Fine_Tune.Definition);
         Swagger.Servers.Register (Server, API_Retrieve_Model.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  Immediately cancel a fine_tune job.
      procedure Cancel_Fine_Tune
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Fine_Tune_Id : Swagger.UString;
         Result : .Models.FineTune_Type;
      begin

         
         Fine_Tune_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Cancel_Fine_Tune
            (Fine_Tune_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Cancel_Fine_Tune;

      package API_Cancel_Fine_Tune is
         new Swagger.Servers.Operation
            (Handler => Cancel_Fine_Tune,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/fine-tunes/{fine_tune_id}/cancel",
             Mimes   => Media_List_1'Access);


      --  Creates a model response for the given chat conversation.
      procedure Create_Chat_Completion
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Create_Chat_Completion_Request_Type : CreateChatCompletionRequest_Type;
         Result : .Models.CreateChatCompletionResponse_Type;
      begin

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CreateChatCompletionRequest_Type", Create_Chat_Completion_Request_Type);
         Server.Create_Chat_Completion
            (Create_Chat_Completion_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Chat_Completion;

      package API_Create_Chat_Completion is
         new Swagger.Servers.Operation
            (Handler => Create_Chat_Completion,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/chat/completions",
             Mimes   => Media_List_1'Access);


      --  Creates a completion for the provided prompt and parameters.
      procedure Create_Completion
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Create_Completion_Request_Type : CreateCompletionRequest_Type;
         Result : .Models.CreateCompletionResponse_Type;
      begin

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CreateCompletionRequest_Type", Create_Completion_Request_Type);
         Server.Create_Completion
            (Create_Completion_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Completion;

      package API_Create_Completion is
         new Swagger.Servers.Operation
            (Handler => Create_Completion,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/completions",
             Mimes   => Media_List_1'Access);


      --  Creates a new edit for the provided input, instruction, and parameters.
      procedure Create_Edit
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Create_Edit_Request_Type : CreateEditRequest_Type;
         Result : .Models.CreateEditResponse_Type;
      begin

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CreateEditRequest_Type", Create_Edit_Request_Type);
         Server.Create_Edit
            (Create_Edit_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Edit;

      package API_Create_Edit is
         new Swagger.Servers.Operation
            (Handler => Create_Edit,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/edits",
             Mimes   => Media_List_1'Access);


      --  Creates an embedding vector representing the input text.
      procedure Create_Embedding
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Create_Embedding_Request_Type : CreateEmbeddingRequest_Type;
         Result : .Models.CreateEmbeddingResponse_Type;
      begin

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CreateEmbeddingRequest_Type", Create_Embedding_Request_Type);
         Server.Create_Embedding
            (Create_Embedding_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Embedding;

      package API_Create_Embedding is
         new Swagger.Servers.Operation
            (Handler => Create_Embedding,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/embeddings",
             Mimes   => Media_List_1'Access);


      --  Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.
      procedure Create_File
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         File : Swagger.File_Part_Type;
         Purpose : Swagger.UString;
         Result : .Models.OpenAIFile_Type;
      begin

         
         Swagger.Servers.Get_Parameter (Context, "file", File);
         Swagger.Servers.Get_Parameter (Context, "purpose", Purpose);
         Server.Create_File
            (File,
             Purpose, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_File;

      package API_Create_File is
         new Swagger.Servers.Operation
            (Handler => Create_File,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/files",
             Mimes   => Media_List_1'Access);


      --  Creates a job that fine_tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine_tuned models once complete.  [Learn more about Fine_tuning](/docs/guides/fine_tuning)
      procedure Create_Fine_Tune
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Create_Fine_Tune_Request_Type : CreateFineTuneRequest_Type;
         Result : .Models.FineTune_Type;
      begin

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CreateFineTuneRequest_Type", Create_Fine_Tune_Request_Type);
         Server.Create_Fine_Tune
            (Create_Fine_Tune_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Fine_Tune;

      package API_Create_Fine_Tune is
         new Swagger.Servers.Operation
            (Handler => Create_Fine_Tune,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/fine-tunes",
             Mimes   => Media_List_1'Access);


      --  Creates an image given a prompt.
      procedure Create_Image
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Create_Image_Request_Type : CreateImageRequest_Type;
         Result : .Models.ImagesResponse_Type;
      begin

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CreateImageRequest_Type", Create_Image_Request_Type);
         Server.Create_Image
            (Create_Image_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Image;

      package API_Create_Image is
         new Swagger.Servers.Operation
            (Handler => Create_Image,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/images/generations",
             Mimes   => Media_List_1'Access);


      --  Creates an edited or extended image given an original image and a prompt.
      procedure Create_Image_Edit
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Image : Swagger.File_Part_Type;
         Prompt : Swagger.UString;
         Mask : Swagger.File_Part_Type;
         N : Swagger.Nullable_Integer;
         Size : Swagger.Nullable_UString;
         Response_Format : Swagger.Nullable_UString;
         User : Swagger.Nullable_UString;
         Result : .Models.ImagesResponse_Type;
      begin

         
         Swagger.Servers.Get_Parameter (Context, "image", Image);
         Swagger.Servers.Get_Parameter (Context, "mask", Mask);
         Swagger.Servers.Get_Parameter (Context, "prompt", Prompt);
         Swagger.Servers.Get_Parameter (Context, "n", N);
         Swagger.Servers.Get_Parameter (Context, "size", Size);
         Swagger.Servers.Get_Parameter (Context, "response_format", Response_Format);
         Swagger.Servers.Get_Parameter (Context, "user", User);
         Server.Create_Image_Edit
            (Image,
             Prompt,
             Mask,
             N,
             Size,
             Response_Format,
             User, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Image_Edit;

      package API_Create_Image_Edit is
         new Swagger.Servers.Operation
            (Handler => Create_Image_Edit,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/images/edits",
             Mimes   => Media_List_1'Access);


      --  Creates a variation of a given image.
      procedure Create_Image_Variation
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Image : Swagger.File_Part_Type;
         N : Swagger.Nullable_Integer;
         Size : Swagger.Nullable_UString;
         Response_Format : Swagger.Nullable_UString;
         User : Swagger.Nullable_UString;
         Result : .Models.ImagesResponse_Type;
      begin

         
         Swagger.Servers.Get_Parameter (Context, "image", Image);
         Swagger.Servers.Get_Parameter (Context, "n", N);
         Swagger.Servers.Get_Parameter (Context, "size", Size);
         Swagger.Servers.Get_Parameter (Context, "response_format", Response_Format);
         Swagger.Servers.Get_Parameter (Context, "user", User);
         Server.Create_Image_Variation
            (Image,
             N,
             Size,
             Response_Format,
             User, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Image_Variation;

      package API_Create_Image_Variation is
         new Swagger.Servers.Operation
            (Handler => Create_Image_Variation,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/images/variations",
             Mimes   => Media_List_1'Access);


      --  Classifies if text violates OpenAI's Content Policy
      procedure Create_Moderation
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Create_Moderation_Request_Type : CreateModerationRequest_Type;
         Result : .Models.CreateModerationResponse_Type;
      begin

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CreateModerationRequest_Type", Create_Moderation_Request_Type);
         Server.Create_Moderation
            (Create_Moderation_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Moderation;

      package API_Create_Moderation is
         new Swagger.Servers.Operation
            (Handler => Create_Moderation,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/moderations",
             Mimes   => Media_List_1'Access);


      --  Transcribes audio into the input language.
      procedure Create_Transcription
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         File : Swagger.File_Part_Type;
         Model : .Models.CreateTranscriptionRequestModel_Type;
         Prompt : Swagger.Nullable_UString;
         Response_Format : Swagger.Nullable_UString;
         Temperature : Swagger.Number;
         Language : Swagger.Nullable_UString;
         Result : .Models.CreateTranscriptionResponse_Type;
      begin

         
         Swagger.Servers.Get_Parameter (Context, "file", File);
         Swagger.Servers.Get_Parameter (Context, "model", Model);
         Swagger.Servers.Get_Parameter (Context, "prompt", Prompt);
         Swagger.Servers.Get_Parameter (Context, "response_format", Response_Format);
         Swagger.Servers.Get_Parameter (Context, "temperature", Temperature);
         Swagger.Servers.Get_Parameter (Context, "language", Language);
         Server.Create_Transcription
            (File,
             Model,
             Prompt,
             Response_Format,
             Temperature,
             Language, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Transcription;

      package API_Create_Transcription is
         new Swagger.Servers.Operation
            (Handler => Create_Transcription,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/audio/transcriptions",
             Mimes   => Media_List_1'Access);


      --  Translates audio into English.
      procedure Create_Translation
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         File : Swagger.File_Part_Type;
         Model : .Models.CreateTranscriptionRequestModel_Type;
         Prompt : Swagger.Nullable_UString;
         Response_Format : Swagger.Nullable_UString;
         Temperature : Swagger.Number;
         Result : .Models.CreateTranslationResponse_Type;
      begin

         
         Swagger.Servers.Get_Parameter (Context, "file", File);
         Swagger.Servers.Get_Parameter (Context, "model", Model);
         Swagger.Servers.Get_Parameter (Context, "prompt", Prompt);
         Swagger.Servers.Get_Parameter (Context, "response_format", Response_Format);
         Swagger.Servers.Get_Parameter (Context, "temperature", Temperature);
         Server.Create_Translation
            (File,
             Model,
             Prompt,
             Response_Format,
             Temperature, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Create_Translation;

      package API_Create_Translation is
         new Swagger.Servers.Operation
            (Handler => Create_Translation,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/audio/translations",
             Mimes   => Media_List_1'Access);


      --  Delete a file.
      procedure Delete_File
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         File_Id : Swagger.UString;
         Result : .Models.DeleteFileResponse_Type;
      begin

         
         File_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Delete_File
            (File_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Delete_File;

      package API_Delete_File is
         new Swagger.Servers.Operation
            (Handler => Delete_File,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/files/{file_id}",
             Mimes   => Media_List_1'Access);


      --  Delete a fine_tuned model. You must have the Owner role in your organization.
      procedure Delete_Model
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Model : Swagger.UString;
         Result : .Models.DeleteModelResponse_Type;
      begin

         
         Model := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Delete_Model
            (Model, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Delete_Model;

      package API_Delete_Model is
         new Swagger.Servers.Operation
            (Handler => Delete_Model,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/models/{model}",
             Mimes   => Media_List_1'Access);


      --  Returns the contents of the specified file
      procedure Download_File
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         File_Id : Swagger.UString;
         Result : Swagger.UString;
      begin

         
         File_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Download_File
            (File_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;

      end Download_File;

      package API_Download_File is
         new Swagger.Servers.Operation
            (Handler => Download_File,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/files/{file_id}/content",
             Mimes   => Media_List_1'Access);


      --  Returns a list of files that belong to the user's organization.
      procedure List_Files
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.ListFilesResponse_Type;
      begin

         
         Server.List_Files (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end List_Files;

      package API_List_Files is
         new Swagger.Servers.Operation
            (Handler => List_Files,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/files",
             Mimes   => Media_List_1'Access);


      --  Get fine_grained status updates for a fine_tune job.
      procedure List_Fine_Tune_Events
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Fine_Tune_Id : Swagger.UString;
         Stream : Swagger.Nullable_Boolean;
         Result : .Models.ListFineTuneEventsResponse_Type;
      begin
         Stream := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "stream"));

         
         Fine_Tune_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.List_Fine_Tune_Events
            (Fine_Tune_Id,
             Stream, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end List_Fine_Tune_Events;

      package API_List_Fine_Tune_Events is
         new Swagger.Servers.Operation
            (Handler => List_Fine_Tune_Events,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/fine-tunes/{fine_tune_id}/events",
             Mimes   => Media_List_1'Access);


      --  List your organization's fine_tuning jobs
      procedure List_Fine_Tunes
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.ListFineTunesResponse_Type;
      begin

         
         Server.List_Fine_Tunes (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end List_Fine_Tunes;

      package API_List_Fine_Tunes is
         new Swagger.Servers.Operation
            (Handler => List_Fine_Tunes,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/fine-tunes",
             Mimes   => Media_List_1'Access);


      --  Lists the currently available models, and provides basic information about each one such as the owner and availability.
      procedure List_Models
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.ListModelsResponse_Type;
      begin

         
         Server.List_Models (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end List_Models;

      package API_List_Models is
         new Swagger.Servers.Operation
            (Handler => List_Models,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/models",
             Mimes   => Media_List_1'Access);


      --  Returns information about a specific file.
      procedure Retrieve_File
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         File_Id : Swagger.UString;
         Result : .Models.OpenAIFile_Type;
      begin

         
         File_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Retrieve_File
            (File_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Retrieve_File;

      package API_Retrieve_File is
         new Swagger.Servers.Operation
            (Handler => Retrieve_File,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/files/{file_id}",
             Mimes   => Media_List_1'Access);


      --  Gets info about the fine_tune job.  [Learn more about Fine_tuning](/docs/guides/fine_tuning)
      procedure Retrieve_Fine_Tune
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Fine_Tune_Id : Swagger.UString;
         Result : .Models.FineTune_Type;
      begin

         
         Fine_Tune_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Retrieve_Fine_Tune
            (Fine_Tune_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Retrieve_Fine_Tune;

      package API_Retrieve_Fine_Tune is
         new Swagger.Servers.Operation
            (Handler => Retrieve_Fine_Tune,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/fine-tunes/{fine_tune_id}",
             Mimes   => Media_List_1'Access);


      --  Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
      procedure Retrieve_Model
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Model : Swagger.UString;
         Result : .Models.Model_Type;
      begin

         
         Model := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Retrieve_Model
            (Model, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Retrieve_Model;

      package API_Retrieve_Model is
         new Swagger.Servers.Operation
            (Handler => Retrieve_Model,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/models/{model}",
             Mimes   => Media_List_1'Access);


      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Cancel_Fine_Tune.Definition);
         Swagger.Servers.Register (Server, API_Create_Chat_Completion.Definition);
         Swagger.Servers.Register (Server, API_Create_Completion.Definition);
         Swagger.Servers.Register (Server, API_Create_Edit.Definition);
         Swagger.Servers.Register (Server, API_Create_Embedding.Definition);
         Swagger.Servers.Register (Server, API_Create_File.Definition);
         Swagger.Servers.Register (Server, API_Create_Fine_Tune.Definition);
         Swagger.Servers.Register (Server, API_Create_Image.Definition);
         Swagger.Servers.Register (Server, API_Create_Image_Edit.Definition);
         Swagger.Servers.Register (Server, API_Create_Image_Variation.Definition);
         Swagger.Servers.Register (Server, API_Create_Moderation.Definition);
         Swagger.Servers.Register (Server, API_Create_Transcription.Definition);
         Swagger.Servers.Register (Server, API_Create_Translation.Definition);
         Swagger.Servers.Register (Server, API_Delete_File.Definition);
         Swagger.Servers.Register (Server, API_Delete_Model.Definition);
         Swagger.Servers.Register (Server, API_Download_File.Definition);
         Swagger.Servers.Register (Server, API_List_Files.Definition);
         Swagger.Servers.Register (Server, API_List_Fine_Tune_Events.Definition);
         Swagger.Servers.Register (Server, API_List_Fine_Tunes.Definition);
         Swagger.Servers.Register (Server, API_List_Models.Definition);
         Swagger.Servers.Register (Server, API_Retrieve_File.Definition);
         Swagger.Servers.Register (Server, API_Retrieve_Fine_Tune.Definition);
         Swagger.Servers.Register (Server, API_Retrieve_Model.Definition);
      end Register;

      protected body Server is
         --  Immediately cancel a fine_tune job.
         procedure Cancel_Fine_Tune
            (Fine_Tune_Id : in Swagger.UString;
             Result : out .Models.FineTune_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Cancel_Fine_Tune
               (Fine_Tune_Id,
                Result,
                Context);
         end Cancel_Fine_Tune;

         --  Creates a model response for the given chat conversation.
         procedure Create_Chat_Completion
            (Create_Chat_Completion_Request_Type : in CreateChatCompletionRequest_Type;
             Result : out .Models.CreateChatCompletionResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Chat_Completion
               (Create_Chat_Completion_Request_Type,
                Result,
                Context);
         end Create_Chat_Completion;

         --  Creates a completion for the provided prompt and parameters.
         procedure Create_Completion
            (Create_Completion_Request_Type : in CreateCompletionRequest_Type;
             Result : out .Models.CreateCompletionResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Completion
               (Create_Completion_Request_Type,
                Result,
                Context);
         end Create_Completion;

         --  Creates a new edit for the provided input, instruction, and parameters.
         procedure Create_Edit
            (Create_Edit_Request_Type : in CreateEditRequest_Type;
             Result : out .Models.CreateEditResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Edit
               (Create_Edit_Request_Type,
                Result,
                Context);
         end Create_Edit;

         --  Creates an embedding vector representing the input text.
         procedure Create_Embedding
            (Create_Embedding_Request_Type : in CreateEmbeddingRequest_Type;
             Result : out .Models.CreateEmbeddingResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Embedding
               (Create_Embedding_Request_Type,
                Result,
                Context);
         end Create_Embedding;

         --  Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.
         procedure Create_File
            (File : in Swagger.File_Part_Type;
             Purpose : in Swagger.UString;
             Result : out .Models.OpenAIFile_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_File
               (File,
                Purpose,
                Result,
                Context);
         end Create_File;

         --  Creates a job that fine_tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine_tuned models once complete.  [Learn more about Fine_tuning](/docs/guides/fine_tuning)
         procedure Create_Fine_Tune
            (Create_Fine_Tune_Request_Type : in CreateFineTuneRequest_Type;
             Result : out .Models.FineTune_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Fine_Tune
               (Create_Fine_Tune_Request_Type,
                Result,
                Context);
         end Create_Fine_Tune;

         --  Creates an image given a prompt.
         procedure Create_Image
            (Create_Image_Request_Type : in CreateImageRequest_Type;
             Result : out .Models.ImagesResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Image
               (Create_Image_Request_Type,
                Result,
                Context);
         end Create_Image;

         --  Creates an edited or extended image given an original image and a prompt.
         procedure Create_Image_Edit
            (Image : in Swagger.File_Part_Type;
             Prompt : in Swagger.UString;
             Mask : in Swagger.File_Part_Type;
             N : in Swagger.Nullable_Integer;
             Size : in Swagger.Nullable_UString;
             Response_Format : in Swagger.Nullable_UString;
             User : in Swagger.Nullable_UString;
             Result : out .Models.ImagesResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Image_Edit
               (Image,
                Prompt,
                Mask,
                N,
                Size,
                Response_Format,
                User,
                Result,
                Context);
         end Create_Image_Edit;

         --  Creates a variation of a given image.
         procedure Create_Image_Variation
            (Image : in Swagger.File_Part_Type;
             N : in Swagger.Nullable_Integer;
             Size : in Swagger.Nullable_UString;
             Response_Format : in Swagger.Nullable_UString;
             User : in Swagger.Nullable_UString;
             Result : out .Models.ImagesResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Image_Variation
               (Image,
                N,
                Size,
                Response_Format,
                User,
                Result,
                Context);
         end Create_Image_Variation;

         --  Classifies if text violates OpenAI's Content Policy
         procedure Create_Moderation
            (Create_Moderation_Request_Type : in CreateModerationRequest_Type;
             Result : out .Models.CreateModerationResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Moderation
               (Create_Moderation_Request_Type,
                Result,
                Context);
         end Create_Moderation;

         --  Transcribes audio into the input language.
         procedure Create_Transcription
            (File : in Swagger.File_Part_Type;
             Model : in .Models.CreateTranscriptionRequestModel_Type;
             Prompt : in Swagger.Nullable_UString;
             Response_Format : in Swagger.Nullable_UString;
             Temperature : in Swagger.Number;
             Language : in Swagger.Nullable_UString;
             Result : out .Models.CreateTranscriptionResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Transcription
               (File,
                Model,
                Prompt,
                Response_Format,
                Temperature,
                Language,
                Result,
                Context);
         end Create_Transcription;

         --  Translates audio into English.
         procedure Create_Translation
            (File : in Swagger.File_Part_Type;
             Model : in .Models.CreateTranscriptionRequestModel_Type;
             Prompt : in Swagger.Nullable_UString;
             Response_Format : in Swagger.Nullable_UString;
             Temperature : in Swagger.Number;
             Result : out .Models.CreateTranslationResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Translation
               (File,
                Model,
                Prompt,
                Response_Format,
                Temperature,
                Result,
                Context);
         end Create_Translation;

         --  Delete a file.
         procedure Delete_File
            (File_Id : in Swagger.UString;
             Result : out .Models.DeleteFileResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delete_File
               (File_Id,
                Result,
                Context);
         end Delete_File;

         --  Delete a fine_tuned model. You must have the Owner role in your organization.
         procedure Delete_Model
            (Model : in Swagger.UString;
             Result : out .Models.DeleteModelResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delete_Model
               (Model,
                Result,
                Context);
         end Delete_Model;

         --  Returns the contents of the specified file
         procedure Download_File
            (File_Id : in Swagger.UString;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Download_File
               (File_Id,
                Result,
                Context);
         end Download_File;

         --  Returns a list of files that belong to the user's organization.
         procedure List_Files (Result : out .Models.ListFilesResponse_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.List_Files (Result, Context);
         end List_Files;

         --  Get fine_grained status updates for a fine_tune job.
         procedure List_Fine_Tune_Events
            (Fine_Tune_Id : in Swagger.UString;
             Stream : in Swagger.Nullable_Boolean;
             Result : out .Models.ListFineTuneEventsResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.List_Fine_Tune_Events
               (Fine_Tune_Id,
                Stream,
                Result,
                Context);
         end List_Fine_Tune_Events;

         --  List your organization's fine_tuning jobs
         procedure List_Fine_Tunes (Result : out .Models.ListFineTunesResponse_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.List_Fine_Tunes (Result, Context);
         end List_Fine_Tunes;

         --  Lists the currently available models, and provides basic information about each one such as the owner and availability.
         procedure List_Models (Result : out .Models.ListModelsResponse_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.List_Models (Result, Context);
         end List_Models;

         --  Returns information about a specific file.
         procedure Retrieve_File
            (File_Id : in Swagger.UString;
             Result : out .Models.OpenAIFile_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Retrieve_File
               (File_Id,
                Result,
                Context);
         end Retrieve_File;

         --  Gets info about the fine_tune job.  [Learn more about Fine_tuning](/docs/guides/fine_tuning)
         procedure Retrieve_Fine_Tune
            (Fine_Tune_Id : in Swagger.UString;
             Result : out .Models.FineTune_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Retrieve_Fine_Tune
               (Fine_Tune_Id,
                Result,
                Context);
         end Retrieve_Fine_Tune;

         --  Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
         procedure Retrieve_Model
            (Model : in Swagger.UString;
             Result : out .Models.Model_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Retrieve_Model
               (Model,
                Result,
                Context);
         end Retrieve_Model;

      end Server;

   end Shared_Instance;

end .Skeletons;
