/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AssistantFileObject;
import org.openapitools.client.model.AssistantObject;
import org.openapitools.client.model.CreateAssistantFileRequest;
import org.openapitools.client.model.CreateAssistantRequest;
import org.openapitools.client.model.CreateMessageRequest;
import org.openapitools.client.model.CreateRunRequest;
import org.openapitools.client.model.CreateThreadAndRunRequest;
import org.openapitools.client.model.CreateThreadRequest;
import org.openapitools.client.model.DeleteAssistantFileResponse;
import org.openapitools.client.model.DeleteAssistantResponse;
import org.openapitools.client.model.DeleteThreadResponse;
import org.openapitools.client.model.ListAssistantFilesResponse;
import org.openapitools.client.model.ListAssistantsResponse;
import org.openapitools.client.model.ListMessageFilesResponse;
import org.openapitools.client.model.ListMessagesResponse;
import org.openapitools.client.model.ListRunStepsResponse;
import org.openapitools.client.model.ListRunsResponse;
import org.openapitools.client.model.MessageFileObject;
import org.openapitools.client.model.MessageObject;
import org.openapitools.client.model.ModifyAssistantRequest;
import org.openapitools.client.model.ModifyMessageRequest;
import org.openapitools.client.model.ModifyRunRequest;
import org.openapitools.client.model.ModifyThreadRequest;
import org.openapitools.client.model.RunObject;
import org.openapitools.client.model.RunStepObject;
import org.openapitools.client.model.SubmitToolOutputsRunRequest;
import org.openapitools.client.model.ThreadObject;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AssistantsApi {
  String basePath = "https://api.openai.com/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Cancels a run that is &#x60;in_progress&#x60;.
  * 
   * @param threadId The ID of the thread to which this run belongs.
   * @param runId The ID of the run to cancel.
   * @return RunObject
  */
  public RunObject cancelRun (String threadId, String runId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling cancelRun",
        new ApiException(400, "Missing the required parameter 'threadId' when calling cancelRun"));
    }
    // verify the required parameter 'runId' is set
    if (runId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runId' when calling cancelRun",
        new ApiException(400, "Missing the required parameter 'runId' when calling cancelRun"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/runs/{run_id}/cancel".replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "run_id" + "\\}", apiInvoker.escapeString(runId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RunObject) ApiInvoker.deserialize(localVarResponse, "", RunObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Cancels a run that is &#x60;in_progress&#x60;.
   * 
   * @param threadId The ID of the thread to which this run belongs.   * @param runId The ID of the run to cancel.
  */
  public void cancelRun (String threadId, String runId, final Response.Listener<RunObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling cancelRun",
        new ApiException(400, "Missing the required parameter 'threadId' when calling cancelRun"));
    }
    // verify the required parameter 'runId' is set
    if (runId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runId' when calling cancelRun",
        new ApiException(400, "Missing the required parameter 'runId' when calling cancelRun"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/runs/{run_id}/cancel".replaceAll("\\{format\\}","json").replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "run_id" + "\\}", apiInvoker.escapeString(runId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RunObject) ApiInvoker.deserialize(localVarResponse,  "", RunObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create an assistant with a model and instructions.
  * 
   * @param createAssistantRequest 
   * @return AssistantObject
  */
  public AssistantObject createAssistant (CreateAssistantRequest createAssistantRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createAssistantRequest;
    // verify the required parameter 'createAssistantRequest' is set
    if (createAssistantRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createAssistantRequest' when calling createAssistant",
        new ApiException(400, "Missing the required parameter 'createAssistantRequest' when calling createAssistant"));
    }

    // create path and map variables
    String path = "/assistants";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AssistantObject) ApiInvoker.deserialize(localVarResponse, "", AssistantObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create an assistant with a model and instructions.
   * 
   * @param createAssistantRequest 
  */
  public void createAssistant (CreateAssistantRequest createAssistantRequest, final Response.Listener<AssistantObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createAssistantRequest;

    // verify the required parameter 'createAssistantRequest' is set
    if (createAssistantRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createAssistantRequest' when calling createAssistant",
        new ApiException(400, "Missing the required parameter 'createAssistantRequest' when calling createAssistant"));
    }

    // create path and map variables
    String path = "/assistants".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AssistantObject) ApiInvoker.deserialize(localVarResponse,  "", AssistantObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
  * 
   * @param assistantId The ID of the assistant for which to create a File. 
   * @param createAssistantFileRequest 
   * @return AssistantFileObject
  */
  public AssistantFileObject createAssistantFile (String assistantId, CreateAssistantFileRequest createAssistantFileRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createAssistantFileRequest;
    // verify the required parameter 'assistantId' is set
    if (assistantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assistantId' when calling createAssistantFile",
        new ApiException(400, "Missing the required parameter 'assistantId' when calling createAssistantFile"));
    }
    // verify the required parameter 'createAssistantFileRequest' is set
    if (createAssistantFileRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createAssistantFileRequest' when calling createAssistantFile",
        new ApiException(400, "Missing the required parameter 'createAssistantFileRequest' when calling createAssistantFile"));
    }

    // create path and map variables
    String path = "/assistants/{assistant_id}/files".replaceAll("\\{" + "assistant_id" + "\\}", apiInvoker.escapeString(assistantId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AssistantFileObject) ApiInvoker.deserialize(localVarResponse, "", AssistantFileObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
   * 
   * @param assistantId The ID of the assistant for which to create a File.    * @param createAssistantFileRequest 
  */
  public void createAssistantFile (String assistantId, CreateAssistantFileRequest createAssistantFileRequest, final Response.Listener<AssistantFileObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createAssistantFileRequest;

    // verify the required parameter 'assistantId' is set
    if (assistantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assistantId' when calling createAssistantFile",
        new ApiException(400, "Missing the required parameter 'assistantId' when calling createAssistantFile"));
    }
    // verify the required parameter 'createAssistantFileRequest' is set
    if (createAssistantFileRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createAssistantFileRequest' when calling createAssistantFile",
        new ApiException(400, "Missing the required parameter 'createAssistantFileRequest' when calling createAssistantFile"));
    }

    // create path and map variables
    String path = "/assistants/{assistant_id}/files".replaceAll("\\{format\\}","json").replaceAll("\\{" + "assistant_id" + "\\}", apiInvoker.escapeString(assistantId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AssistantFileObject) ApiInvoker.deserialize(localVarResponse,  "", AssistantFileObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a message.
  * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) to create a message for.
   * @param createMessageRequest 
   * @return MessageObject
  */
  public MessageObject createMessage (String threadId, CreateMessageRequest createMessageRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createMessageRequest;
    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling createMessage",
        new ApiException(400, "Missing the required parameter 'threadId' when calling createMessage"));
    }
    // verify the required parameter 'createMessageRequest' is set
    if (createMessageRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createMessageRequest' when calling createMessage",
        new ApiException(400, "Missing the required parameter 'createMessageRequest' when calling createMessage"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/messages".replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MessageObject) ApiInvoker.deserialize(localVarResponse, "", MessageObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a message.
   * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) to create a message for.   * @param createMessageRequest 
  */
  public void createMessage (String threadId, CreateMessageRequest createMessageRequest, final Response.Listener<MessageObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createMessageRequest;

    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling createMessage",
        new ApiException(400, "Missing the required parameter 'threadId' when calling createMessage"));
    }
    // verify the required parameter 'createMessageRequest' is set
    if (createMessageRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createMessageRequest' when calling createMessage",
        new ApiException(400, "Missing the required parameter 'createMessageRequest' when calling createMessage"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/messages".replaceAll("\\{format\\}","json").replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MessageObject) ApiInvoker.deserialize(localVarResponse,  "", MessageObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a run.
  * 
   * @param threadId The ID of the thread to run.
   * @param createRunRequest 
   * @return RunObject
  */
  public RunObject createRun (String threadId, CreateRunRequest createRunRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createRunRequest;
    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling createRun",
        new ApiException(400, "Missing the required parameter 'threadId' when calling createRun"));
    }
    // verify the required parameter 'createRunRequest' is set
    if (createRunRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createRunRequest' when calling createRun",
        new ApiException(400, "Missing the required parameter 'createRunRequest' when calling createRun"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/runs".replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RunObject) ApiInvoker.deserialize(localVarResponse, "", RunObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a run.
   * 
   * @param threadId The ID of the thread to run.   * @param createRunRequest 
  */
  public void createRun (String threadId, CreateRunRequest createRunRequest, final Response.Listener<RunObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createRunRequest;

    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling createRun",
        new ApiException(400, "Missing the required parameter 'threadId' when calling createRun"));
    }
    // verify the required parameter 'createRunRequest' is set
    if (createRunRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createRunRequest' when calling createRun",
        new ApiException(400, "Missing the required parameter 'createRunRequest' when calling createRun"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/runs".replaceAll("\\{format\\}","json").replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RunObject) ApiInvoker.deserialize(localVarResponse,  "", RunObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a thread.
  * 
   * @param createThreadRequest 
   * @return ThreadObject
  */
  public ThreadObject createThread (CreateThreadRequest createThreadRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createThreadRequest;

    // create path and map variables
    String path = "/threads";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ThreadObject) ApiInvoker.deserialize(localVarResponse, "", ThreadObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a thread.
   * 
   * @param createThreadRequest 
  */
  public void createThread (CreateThreadRequest createThreadRequest, final Response.Listener<ThreadObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createThreadRequest;


    // create path and map variables
    String path = "/threads".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ThreadObject) ApiInvoker.deserialize(localVarResponse,  "", ThreadObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a thread and run it in one request.
  * 
   * @param createThreadAndRunRequest 
   * @return RunObject
  */
  public RunObject createThreadAndRun (CreateThreadAndRunRequest createThreadAndRunRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createThreadAndRunRequest;
    // verify the required parameter 'createThreadAndRunRequest' is set
    if (createThreadAndRunRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createThreadAndRunRequest' when calling createThreadAndRun",
        new ApiException(400, "Missing the required parameter 'createThreadAndRunRequest' when calling createThreadAndRun"));
    }

    // create path and map variables
    String path = "/threads/runs";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RunObject) ApiInvoker.deserialize(localVarResponse, "", RunObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a thread and run it in one request.
   * 
   * @param createThreadAndRunRequest 
  */
  public void createThreadAndRun (CreateThreadAndRunRequest createThreadAndRunRequest, final Response.Listener<RunObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createThreadAndRunRequest;

    // verify the required parameter 'createThreadAndRunRequest' is set
    if (createThreadAndRunRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createThreadAndRunRequest' when calling createThreadAndRun",
        new ApiException(400, "Missing the required parameter 'createThreadAndRunRequest' when calling createThreadAndRun"));
    }

    // create path and map variables
    String path = "/threads/runs".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RunObject) ApiInvoker.deserialize(localVarResponse,  "", RunObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete an assistant.
  * 
   * @param assistantId The ID of the assistant to delete.
   * @return DeleteAssistantResponse
  */
  public DeleteAssistantResponse deleteAssistant (String assistantId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'assistantId' is set
    if (assistantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assistantId' when calling deleteAssistant",
        new ApiException(400, "Missing the required parameter 'assistantId' when calling deleteAssistant"));
    }

    // create path and map variables
    String path = "/assistants/{assistant_id}".replaceAll("\\{" + "assistant_id" + "\\}", apiInvoker.escapeString(assistantId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DeleteAssistantResponse) ApiInvoker.deserialize(localVarResponse, "", DeleteAssistantResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete an assistant.
   * 
   * @param assistantId The ID of the assistant to delete.
  */
  public void deleteAssistant (String assistantId, final Response.Listener<DeleteAssistantResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'assistantId' is set
    if (assistantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assistantId' when calling deleteAssistant",
        new ApiException(400, "Missing the required parameter 'assistantId' when calling deleteAssistant"));
    }

    // create path and map variables
    String path = "/assistants/{assistant_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "assistant_id" + "\\}", apiInvoker.escapeString(assistantId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DeleteAssistantResponse) ApiInvoker.deserialize(localVarResponse,  "", DeleteAssistantResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete an assistant file.
  * 
   * @param assistantId The ID of the assistant that the file belongs to.
   * @param fileId The ID of the file to delete.
   * @return DeleteAssistantFileResponse
  */
  public DeleteAssistantFileResponse deleteAssistantFile (String assistantId, String fileId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'assistantId' is set
    if (assistantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assistantId' when calling deleteAssistantFile",
        new ApiException(400, "Missing the required parameter 'assistantId' when calling deleteAssistantFile"));
    }
    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fileId' when calling deleteAssistantFile",
        new ApiException(400, "Missing the required parameter 'fileId' when calling deleteAssistantFile"));
    }

    // create path and map variables
    String path = "/assistants/{assistant_id}/files/{file_id}".replaceAll("\\{" + "assistant_id" + "\\}", apiInvoker.escapeString(assistantId.toString())).replaceAll("\\{" + "file_id" + "\\}", apiInvoker.escapeString(fileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DeleteAssistantFileResponse) ApiInvoker.deserialize(localVarResponse, "", DeleteAssistantFileResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete an assistant file.
   * 
   * @param assistantId The ID of the assistant that the file belongs to.   * @param fileId The ID of the file to delete.
  */
  public void deleteAssistantFile (String assistantId, String fileId, final Response.Listener<DeleteAssistantFileResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'assistantId' is set
    if (assistantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assistantId' when calling deleteAssistantFile",
        new ApiException(400, "Missing the required parameter 'assistantId' when calling deleteAssistantFile"));
    }
    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fileId' when calling deleteAssistantFile",
        new ApiException(400, "Missing the required parameter 'fileId' when calling deleteAssistantFile"));
    }

    // create path and map variables
    String path = "/assistants/{assistant_id}/files/{file_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "assistant_id" + "\\}", apiInvoker.escapeString(assistantId.toString())).replaceAll("\\{" + "file_id" + "\\}", apiInvoker.escapeString(fileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DeleteAssistantFileResponse) ApiInvoker.deserialize(localVarResponse,  "", DeleteAssistantFileResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete a thread.
  * 
   * @param threadId The ID of the thread to delete.
   * @return DeleteThreadResponse
  */
  public DeleteThreadResponse deleteThread (String threadId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling deleteThread",
        new ApiException(400, "Missing the required parameter 'threadId' when calling deleteThread"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}".replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DeleteThreadResponse) ApiInvoker.deserialize(localVarResponse, "", DeleteThreadResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete a thread.
   * 
   * @param threadId The ID of the thread to delete.
  */
  public void deleteThread (String threadId, final Response.Listener<DeleteThreadResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling deleteThread",
        new ApiException(400, "Missing the required parameter 'threadId' when calling deleteThread"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DeleteThreadResponse) ApiInvoker.deserialize(localVarResponse,  "", DeleteThreadResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieves an assistant.
  * 
   * @param assistantId The ID of the assistant to retrieve.
   * @return AssistantObject
  */
  public AssistantObject getAssistant (String assistantId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'assistantId' is set
    if (assistantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assistantId' when calling getAssistant",
        new ApiException(400, "Missing the required parameter 'assistantId' when calling getAssistant"));
    }

    // create path and map variables
    String path = "/assistants/{assistant_id}".replaceAll("\\{" + "assistant_id" + "\\}", apiInvoker.escapeString(assistantId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AssistantObject) ApiInvoker.deserialize(localVarResponse, "", AssistantObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieves an assistant.
   * 
   * @param assistantId The ID of the assistant to retrieve.
  */
  public void getAssistant (String assistantId, final Response.Listener<AssistantObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'assistantId' is set
    if (assistantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assistantId' when calling getAssistant",
        new ApiException(400, "Missing the required parameter 'assistantId' when calling getAssistant"));
    }

    // create path and map variables
    String path = "/assistants/{assistant_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "assistant_id" + "\\}", apiInvoker.escapeString(assistantId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AssistantObject) ApiInvoker.deserialize(localVarResponse,  "", AssistantObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieves an AssistantFile.
  * 
   * @param assistantId The ID of the assistant who the file belongs to.
   * @param fileId The ID of the file we&#39;re getting.
   * @return AssistantFileObject
  */
  public AssistantFileObject getAssistantFile (String assistantId, String fileId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'assistantId' is set
    if (assistantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assistantId' when calling getAssistantFile",
        new ApiException(400, "Missing the required parameter 'assistantId' when calling getAssistantFile"));
    }
    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fileId' when calling getAssistantFile",
        new ApiException(400, "Missing the required parameter 'fileId' when calling getAssistantFile"));
    }

    // create path and map variables
    String path = "/assistants/{assistant_id}/files/{file_id}".replaceAll("\\{" + "assistant_id" + "\\}", apiInvoker.escapeString(assistantId.toString())).replaceAll("\\{" + "file_id" + "\\}", apiInvoker.escapeString(fileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AssistantFileObject) ApiInvoker.deserialize(localVarResponse, "", AssistantFileObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieves an AssistantFile.
   * 
   * @param assistantId The ID of the assistant who the file belongs to.   * @param fileId The ID of the file we&#39;re getting.
  */
  public void getAssistantFile (String assistantId, String fileId, final Response.Listener<AssistantFileObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'assistantId' is set
    if (assistantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assistantId' when calling getAssistantFile",
        new ApiException(400, "Missing the required parameter 'assistantId' when calling getAssistantFile"));
    }
    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fileId' when calling getAssistantFile",
        new ApiException(400, "Missing the required parameter 'fileId' when calling getAssistantFile"));
    }

    // create path and map variables
    String path = "/assistants/{assistant_id}/files/{file_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "assistant_id" + "\\}", apiInvoker.escapeString(assistantId.toString())).replaceAll("\\{" + "file_id" + "\\}", apiInvoker.escapeString(fileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AssistantFileObject) ApiInvoker.deserialize(localVarResponse,  "", AssistantFileObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve a message.
  * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
   * @param messageId The ID of the message to retrieve.
   * @return MessageObject
  */
  public MessageObject getMessage (String threadId, String messageId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling getMessage",
        new ApiException(400, "Missing the required parameter 'threadId' when calling getMessage"));
    }
    // verify the required parameter 'messageId' is set
    if (messageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageId' when calling getMessage",
        new ApiException(400, "Missing the required parameter 'messageId' when calling getMessage"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/messages/{message_id}".replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "message_id" + "\\}", apiInvoker.escapeString(messageId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MessageObject) ApiInvoker.deserialize(localVarResponse, "", MessageObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve a message.
   * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this message belongs.   * @param messageId The ID of the message to retrieve.
  */
  public void getMessage (String threadId, String messageId, final Response.Listener<MessageObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling getMessage",
        new ApiException(400, "Missing the required parameter 'threadId' when calling getMessage"));
    }
    // verify the required parameter 'messageId' is set
    if (messageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageId' when calling getMessage",
        new ApiException(400, "Missing the required parameter 'messageId' when calling getMessage"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/messages/{message_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "message_id" + "\\}", apiInvoker.escapeString(messageId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MessageObject) ApiInvoker.deserialize(localVarResponse,  "", MessageObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieves a message file.
  * 
   * @param threadId The ID of the thread to which the message and File belong.
   * @param messageId The ID of the message the file belongs to.
   * @param fileId The ID of the file being retrieved.
   * @return MessageFileObject
  */
  public MessageFileObject getMessageFile (String threadId, String messageId, String fileId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling getMessageFile",
        new ApiException(400, "Missing the required parameter 'threadId' when calling getMessageFile"));
    }
    // verify the required parameter 'messageId' is set
    if (messageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageId' when calling getMessageFile",
        new ApiException(400, "Missing the required parameter 'messageId' when calling getMessageFile"));
    }
    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fileId' when calling getMessageFile",
        new ApiException(400, "Missing the required parameter 'fileId' when calling getMessageFile"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/messages/{message_id}/files/{file_id}".replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "message_id" + "\\}", apiInvoker.escapeString(messageId.toString())).replaceAll("\\{" + "file_id" + "\\}", apiInvoker.escapeString(fileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MessageFileObject) ApiInvoker.deserialize(localVarResponse, "", MessageFileObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieves a message file.
   * 
   * @param threadId The ID of the thread to which the message and File belong.   * @param messageId The ID of the message the file belongs to.   * @param fileId The ID of the file being retrieved.
  */
  public void getMessageFile (String threadId, String messageId, String fileId, final Response.Listener<MessageFileObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling getMessageFile",
        new ApiException(400, "Missing the required parameter 'threadId' when calling getMessageFile"));
    }
    // verify the required parameter 'messageId' is set
    if (messageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageId' when calling getMessageFile",
        new ApiException(400, "Missing the required parameter 'messageId' when calling getMessageFile"));
    }
    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fileId' when calling getMessageFile",
        new ApiException(400, "Missing the required parameter 'fileId' when calling getMessageFile"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/messages/{message_id}/files/{file_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "message_id" + "\\}", apiInvoker.escapeString(messageId.toString())).replaceAll("\\{" + "file_id" + "\\}", apiInvoker.escapeString(fileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MessageFileObject) ApiInvoker.deserialize(localVarResponse,  "", MessageFileObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieves a run.
  * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
   * @param runId The ID of the run to retrieve.
   * @return RunObject
  */
  public RunObject getRun (String threadId, String runId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling getRun",
        new ApiException(400, "Missing the required parameter 'threadId' when calling getRun"));
    }
    // verify the required parameter 'runId' is set
    if (runId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runId' when calling getRun",
        new ApiException(400, "Missing the required parameter 'runId' when calling getRun"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/runs/{run_id}".replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "run_id" + "\\}", apiInvoker.escapeString(runId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RunObject) ApiInvoker.deserialize(localVarResponse, "", RunObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieves a run.
   * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.   * @param runId The ID of the run to retrieve.
  */
  public void getRun (String threadId, String runId, final Response.Listener<RunObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling getRun",
        new ApiException(400, "Missing the required parameter 'threadId' when calling getRun"));
    }
    // verify the required parameter 'runId' is set
    if (runId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runId' when calling getRun",
        new ApiException(400, "Missing the required parameter 'runId' when calling getRun"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/runs/{run_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "run_id" + "\\}", apiInvoker.escapeString(runId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RunObject) ApiInvoker.deserialize(localVarResponse,  "", RunObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieves a run step.
  * 
   * @param threadId The ID of the thread to which the run and run step belongs.
   * @param runId The ID of the run to which the run step belongs.
   * @param stepId The ID of the run step to retrieve.
   * @return RunStepObject
  */
  public RunStepObject getRunStep (String threadId, String runId, String stepId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling getRunStep",
        new ApiException(400, "Missing the required parameter 'threadId' when calling getRunStep"));
    }
    // verify the required parameter 'runId' is set
    if (runId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runId' when calling getRunStep",
        new ApiException(400, "Missing the required parameter 'runId' when calling getRunStep"));
    }
    // verify the required parameter 'stepId' is set
    if (stepId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stepId' when calling getRunStep",
        new ApiException(400, "Missing the required parameter 'stepId' when calling getRunStep"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/runs/{run_id}/steps/{step_id}".replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "run_id" + "\\}", apiInvoker.escapeString(runId.toString())).replaceAll("\\{" + "step_id" + "\\}", apiInvoker.escapeString(stepId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RunStepObject) ApiInvoker.deserialize(localVarResponse, "", RunStepObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieves a run step.
   * 
   * @param threadId The ID of the thread to which the run and run step belongs.   * @param runId The ID of the run to which the run step belongs.   * @param stepId The ID of the run step to retrieve.
  */
  public void getRunStep (String threadId, String runId, String stepId, final Response.Listener<RunStepObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling getRunStep",
        new ApiException(400, "Missing the required parameter 'threadId' when calling getRunStep"));
    }
    // verify the required parameter 'runId' is set
    if (runId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runId' when calling getRunStep",
        new ApiException(400, "Missing the required parameter 'runId' when calling getRunStep"));
    }
    // verify the required parameter 'stepId' is set
    if (stepId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stepId' when calling getRunStep",
        new ApiException(400, "Missing the required parameter 'stepId' when calling getRunStep"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/runs/{run_id}/steps/{step_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "run_id" + "\\}", apiInvoker.escapeString(runId.toString())).replaceAll("\\{" + "step_id" + "\\}", apiInvoker.escapeString(stepId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RunStepObject) ApiInvoker.deserialize(localVarResponse,  "", RunStepObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieves a thread.
  * 
   * @param threadId The ID of the thread to retrieve.
   * @return ThreadObject
  */
  public ThreadObject getThread (String threadId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling getThread",
        new ApiException(400, "Missing the required parameter 'threadId' when calling getThread"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}".replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ThreadObject) ApiInvoker.deserialize(localVarResponse, "", ThreadObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieves a thread.
   * 
   * @param threadId The ID of the thread to retrieve.
  */
  public void getThread (String threadId, final Response.Listener<ThreadObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling getThread",
        new ApiException(400, "Missing the required parameter 'threadId' when calling getThread"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ThreadObject) ApiInvoker.deserialize(localVarResponse,  "", ThreadObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns a list of assistant files.
  * 
   * @param assistantId The ID of the assistant the file belongs to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
   * @return ListAssistantFilesResponse
  */
  public ListAssistantFilesResponse listAssistantFiles (String assistantId, Integer limit, String order, String after, String before) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'assistantId' is set
    if (assistantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assistantId' when calling listAssistantFiles",
        new ApiException(400, "Missing the required parameter 'assistantId' when calling listAssistantFiles"));
    }

    // create path and map variables
    String path = "/assistants/{assistant_id}/files".replaceAll("\\{" + "assistant_id" + "\\}", apiInvoker.escapeString(assistantId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ListAssistantFilesResponse) ApiInvoker.deserialize(localVarResponse, "", ListAssistantFilesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns a list of assistant files.
   * 
   * @param assistantId The ID of the assistant the file belongs to.   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.    * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.    * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.    * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
  */
  public void listAssistantFiles (String assistantId, Integer limit, String order, String after, String before, final Response.Listener<ListAssistantFilesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'assistantId' is set
    if (assistantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assistantId' when calling listAssistantFiles",
        new ApiException(400, "Missing the required parameter 'assistantId' when calling listAssistantFiles"));
    }

    // create path and map variables
    String path = "/assistants/{assistant_id}/files".replaceAll("\\{format\\}","json").replaceAll("\\{" + "assistant_id" + "\\}", apiInvoker.escapeString(assistantId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ListAssistantFilesResponse) ApiInvoker.deserialize(localVarResponse,  "", ListAssistantFilesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns a list of assistants.
  * 
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
   * @return ListAssistantsResponse
  */
  public ListAssistantsResponse listAssistants (Integer limit, String order, String after, String before) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/assistants";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ListAssistantsResponse) ApiInvoker.deserialize(localVarResponse, "", ListAssistantsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns a list of assistants.
   * 
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.    * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.    * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.    * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
  */
  public void listAssistants (Integer limit, String order, String after, String before, final Response.Listener<ListAssistantsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/assistants".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ListAssistantsResponse) ApiInvoker.deserialize(localVarResponse,  "", ListAssistantsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns a list of message files.
  * 
   * @param threadId The ID of the thread that the message and files belong to.
   * @param messageId The ID of the message that the files belongs to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
   * @return ListMessageFilesResponse
  */
  public ListMessageFilesResponse listMessageFiles (String threadId, String messageId, Integer limit, String order, String after, String before) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling listMessageFiles",
        new ApiException(400, "Missing the required parameter 'threadId' when calling listMessageFiles"));
    }
    // verify the required parameter 'messageId' is set
    if (messageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageId' when calling listMessageFiles",
        new ApiException(400, "Missing the required parameter 'messageId' when calling listMessageFiles"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/messages/{message_id}/files".replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "message_id" + "\\}", apiInvoker.escapeString(messageId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ListMessageFilesResponse) ApiInvoker.deserialize(localVarResponse, "", ListMessageFilesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns a list of message files.
   * 
   * @param threadId The ID of the thread that the message and files belong to.   * @param messageId The ID of the message that the files belongs to.   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.    * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.    * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.    * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
  */
  public void listMessageFiles (String threadId, String messageId, Integer limit, String order, String after, String before, final Response.Listener<ListMessageFilesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling listMessageFiles",
        new ApiException(400, "Missing the required parameter 'threadId' when calling listMessageFiles"));
    }
    // verify the required parameter 'messageId' is set
    if (messageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageId' when calling listMessageFiles",
        new ApiException(400, "Missing the required parameter 'messageId' when calling listMessageFiles"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/messages/{message_id}/files".replaceAll("\\{format\\}","json").replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "message_id" + "\\}", apiInvoker.escapeString(messageId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ListMessageFilesResponse) ApiInvoker.deserialize(localVarResponse,  "", ListMessageFilesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns a list of messages for a given thread.
  * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) the messages belong to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
   * @param runId Filter messages by the run ID that generated them. 
   * @return ListMessagesResponse
  */
  public ListMessagesResponse listMessages (String threadId, Integer limit, String order, String after, String before, String runId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling listMessages",
        new ApiException(400, "Missing the required parameter 'threadId' when calling listMessages"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/messages".replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "run_id", runId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ListMessagesResponse) ApiInvoker.deserialize(localVarResponse, "", ListMessagesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns a list of messages for a given thread.
   * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) the messages belong to.   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.    * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.    * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.    * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.    * @param runId Filter messages by the run ID that generated them. 
  */
  public void listMessages (String threadId, Integer limit, String order, String after, String before, String runId, final Response.Listener<ListMessagesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling listMessages",
        new ApiException(400, "Missing the required parameter 'threadId' when calling listMessages"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/messages".replaceAll("\\{format\\}","json").replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "run_id", runId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ListMessagesResponse) ApiInvoker.deserialize(localVarResponse,  "", ListMessagesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns a list of run steps belonging to a run.
  * 
   * @param threadId The ID of the thread the run and run steps belong to.
   * @param runId The ID of the run the run steps belong to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
   * @return ListRunStepsResponse
  */
  public ListRunStepsResponse listRunSteps (String threadId, String runId, Integer limit, String order, String after, String before) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling listRunSteps",
        new ApiException(400, "Missing the required parameter 'threadId' when calling listRunSteps"));
    }
    // verify the required parameter 'runId' is set
    if (runId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runId' when calling listRunSteps",
        new ApiException(400, "Missing the required parameter 'runId' when calling listRunSteps"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/runs/{run_id}/steps".replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "run_id" + "\\}", apiInvoker.escapeString(runId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ListRunStepsResponse) ApiInvoker.deserialize(localVarResponse, "", ListRunStepsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns a list of run steps belonging to a run.
   * 
   * @param threadId The ID of the thread the run and run steps belong to.   * @param runId The ID of the run the run steps belong to.   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.    * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.    * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.    * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
  */
  public void listRunSteps (String threadId, String runId, Integer limit, String order, String after, String before, final Response.Listener<ListRunStepsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling listRunSteps",
        new ApiException(400, "Missing the required parameter 'threadId' when calling listRunSteps"));
    }
    // verify the required parameter 'runId' is set
    if (runId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runId' when calling listRunSteps",
        new ApiException(400, "Missing the required parameter 'runId' when calling listRunSteps"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/runs/{run_id}/steps".replaceAll("\\{format\\}","json").replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "run_id" + "\\}", apiInvoker.escapeString(runId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ListRunStepsResponse) ApiInvoker.deserialize(localVarResponse,  "", ListRunStepsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns a list of runs belonging to a thread.
  * 
   * @param threadId The ID of the thread the run belongs to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
   * @return ListRunsResponse
  */
  public ListRunsResponse listRuns (String threadId, Integer limit, String order, String after, String before) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling listRuns",
        new ApiException(400, "Missing the required parameter 'threadId' when calling listRuns"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/runs".replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ListRunsResponse) ApiInvoker.deserialize(localVarResponse, "", ListRunsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns a list of runs belonging to a thread.
   * 
   * @param threadId The ID of the thread the run belongs to.   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.    * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.    * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.    * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
  */
  public void listRuns (String threadId, Integer limit, String order, String after, String before, final Response.Listener<ListRunsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling listRuns",
        new ApiException(400, "Missing the required parameter 'threadId' when calling listRuns"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/runs".replaceAll("\\{format\\}","json").replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "before", before));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ListRunsResponse) ApiInvoker.deserialize(localVarResponse,  "", ListRunsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Modifies an assistant.
  * 
   * @param assistantId The ID of the assistant to modify.
   * @param modifyAssistantRequest 
   * @return AssistantObject
  */
  public AssistantObject modifyAssistant (String assistantId, ModifyAssistantRequest modifyAssistantRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = modifyAssistantRequest;
    // verify the required parameter 'assistantId' is set
    if (assistantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assistantId' when calling modifyAssistant",
        new ApiException(400, "Missing the required parameter 'assistantId' when calling modifyAssistant"));
    }
    // verify the required parameter 'modifyAssistantRequest' is set
    if (modifyAssistantRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modifyAssistantRequest' when calling modifyAssistant",
        new ApiException(400, "Missing the required parameter 'modifyAssistantRequest' when calling modifyAssistant"));
    }

    // create path and map variables
    String path = "/assistants/{assistant_id}".replaceAll("\\{" + "assistant_id" + "\\}", apiInvoker.escapeString(assistantId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AssistantObject) ApiInvoker.deserialize(localVarResponse, "", AssistantObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Modifies an assistant.
   * 
   * @param assistantId The ID of the assistant to modify.   * @param modifyAssistantRequest 
  */
  public void modifyAssistant (String assistantId, ModifyAssistantRequest modifyAssistantRequest, final Response.Listener<AssistantObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = modifyAssistantRequest;

    // verify the required parameter 'assistantId' is set
    if (assistantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assistantId' when calling modifyAssistant",
        new ApiException(400, "Missing the required parameter 'assistantId' when calling modifyAssistant"));
    }
    // verify the required parameter 'modifyAssistantRequest' is set
    if (modifyAssistantRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modifyAssistantRequest' when calling modifyAssistant",
        new ApiException(400, "Missing the required parameter 'modifyAssistantRequest' when calling modifyAssistant"));
    }

    // create path and map variables
    String path = "/assistants/{assistant_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "assistant_id" + "\\}", apiInvoker.escapeString(assistantId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AssistantObject) ApiInvoker.deserialize(localVarResponse,  "", AssistantObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Modifies a message.
  * 
   * @param threadId The ID of the thread to which this message belongs.
   * @param messageId The ID of the message to modify.
   * @param modifyMessageRequest 
   * @return MessageObject
  */
  public MessageObject modifyMessage (String threadId, String messageId, ModifyMessageRequest modifyMessageRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = modifyMessageRequest;
    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling modifyMessage",
        new ApiException(400, "Missing the required parameter 'threadId' when calling modifyMessage"));
    }
    // verify the required parameter 'messageId' is set
    if (messageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageId' when calling modifyMessage",
        new ApiException(400, "Missing the required parameter 'messageId' when calling modifyMessage"));
    }
    // verify the required parameter 'modifyMessageRequest' is set
    if (modifyMessageRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modifyMessageRequest' when calling modifyMessage",
        new ApiException(400, "Missing the required parameter 'modifyMessageRequest' when calling modifyMessage"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/messages/{message_id}".replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "message_id" + "\\}", apiInvoker.escapeString(messageId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MessageObject) ApiInvoker.deserialize(localVarResponse, "", MessageObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Modifies a message.
   * 
   * @param threadId The ID of the thread to which this message belongs.   * @param messageId The ID of the message to modify.   * @param modifyMessageRequest 
  */
  public void modifyMessage (String threadId, String messageId, ModifyMessageRequest modifyMessageRequest, final Response.Listener<MessageObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = modifyMessageRequest;

    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling modifyMessage",
        new ApiException(400, "Missing the required parameter 'threadId' when calling modifyMessage"));
    }
    // verify the required parameter 'messageId' is set
    if (messageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageId' when calling modifyMessage",
        new ApiException(400, "Missing the required parameter 'messageId' when calling modifyMessage"));
    }
    // verify the required parameter 'modifyMessageRequest' is set
    if (modifyMessageRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modifyMessageRequest' when calling modifyMessage",
        new ApiException(400, "Missing the required parameter 'modifyMessageRequest' when calling modifyMessage"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/messages/{message_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "message_id" + "\\}", apiInvoker.escapeString(messageId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MessageObject) ApiInvoker.deserialize(localVarResponse,  "", MessageObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Modifies a run.
  * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
   * @param runId The ID of the run to modify.
   * @param modifyRunRequest 
   * @return RunObject
  */
  public RunObject modifyRun (String threadId, String runId, ModifyRunRequest modifyRunRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = modifyRunRequest;
    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling modifyRun",
        new ApiException(400, "Missing the required parameter 'threadId' when calling modifyRun"));
    }
    // verify the required parameter 'runId' is set
    if (runId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runId' when calling modifyRun",
        new ApiException(400, "Missing the required parameter 'runId' when calling modifyRun"));
    }
    // verify the required parameter 'modifyRunRequest' is set
    if (modifyRunRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modifyRunRequest' when calling modifyRun",
        new ApiException(400, "Missing the required parameter 'modifyRunRequest' when calling modifyRun"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/runs/{run_id}".replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "run_id" + "\\}", apiInvoker.escapeString(runId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RunObject) ApiInvoker.deserialize(localVarResponse, "", RunObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Modifies a run.
   * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.   * @param runId The ID of the run to modify.   * @param modifyRunRequest 
  */
  public void modifyRun (String threadId, String runId, ModifyRunRequest modifyRunRequest, final Response.Listener<RunObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = modifyRunRequest;

    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling modifyRun",
        new ApiException(400, "Missing the required parameter 'threadId' when calling modifyRun"));
    }
    // verify the required parameter 'runId' is set
    if (runId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runId' when calling modifyRun",
        new ApiException(400, "Missing the required parameter 'runId' when calling modifyRun"));
    }
    // verify the required parameter 'modifyRunRequest' is set
    if (modifyRunRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modifyRunRequest' when calling modifyRun",
        new ApiException(400, "Missing the required parameter 'modifyRunRequest' when calling modifyRun"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/runs/{run_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "run_id" + "\\}", apiInvoker.escapeString(runId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RunObject) ApiInvoker.deserialize(localVarResponse,  "", RunObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Modifies a thread.
  * 
   * @param threadId The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.
   * @param modifyThreadRequest 
   * @return ThreadObject
  */
  public ThreadObject modifyThread (String threadId, ModifyThreadRequest modifyThreadRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = modifyThreadRequest;
    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling modifyThread",
        new ApiException(400, "Missing the required parameter 'threadId' when calling modifyThread"));
    }
    // verify the required parameter 'modifyThreadRequest' is set
    if (modifyThreadRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modifyThreadRequest' when calling modifyThread",
        new ApiException(400, "Missing the required parameter 'modifyThreadRequest' when calling modifyThread"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}".replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ThreadObject) ApiInvoker.deserialize(localVarResponse, "", ThreadObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Modifies a thread.
   * 
   * @param threadId The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.   * @param modifyThreadRequest 
  */
  public void modifyThread (String threadId, ModifyThreadRequest modifyThreadRequest, final Response.Listener<ThreadObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = modifyThreadRequest;

    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling modifyThread",
        new ApiException(400, "Missing the required parameter 'threadId' when calling modifyThread"));
    }
    // verify the required parameter 'modifyThreadRequest' is set
    if (modifyThreadRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modifyThreadRequest' when calling modifyThread",
        new ApiException(400, "Missing the required parameter 'modifyThreadRequest' when calling modifyThread"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ThreadObject) ApiInvoker.deserialize(localVarResponse,  "", ThreadObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
  * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
   * @param runId The ID of the run that requires the tool output submission.
   * @param submitToolOutputsRunRequest 
   * @return RunObject
  */
  public RunObject submitToolOuputsToRun (String threadId, String runId, SubmitToolOutputsRunRequest submitToolOutputsRunRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = submitToolOutputsRunRequest;
    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling submitToolOuputsToRun",
        new ApiException(400, "Missing the required parameter 'threadId' when calling submitToolOuputsToRun"));
    }
    // verify the required parameter 'runId' is set
    if (runId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runId' when calling submitToolOuputsToRun",
        new ApiException(400, "Missing the required parameter 'runId' when calling submitToolOuputsToRun"));
    }
    // verify the required parameter 'submitToolOutputsRunRequest' is set
    if (submitToolOutputsRunRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'submitToolOutputsRunRequest' when calling submitToolOuputsToRun",
        new ApiException(400, "Missing the required parameter 'submitToolOutputsRunRequest' when calling submitToolOuputsToRun"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs".replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "run_id" + "\\}", apiInvoker.escapeString(runId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RunObject) ApiInvoker.deserialize(localVarResponse, "", RunObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
   * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this run belongs.   * @param runId The ID of the run that requires the tool output submission.   * @param submitToolOutputsRunRequest 
  */
  public void submitToolOuputsToRun (String threadId, String runId, SubmitToolOutputsRunRequest submitToolOutputsRunRequest, final Response.Listener<RunObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = submitToolOutputsRunRequest;

    // verify the required parameter 'threadId' is set
    if (threadId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threadId' when calling submitToolOuputsToRun",
        new ApiException(400, "Missing the required parameter 'threadId' when calling submitToolOuputsToRun"));
    }
    // verify the required parameter 'runId' is set
    if (runId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runId' when calling submitToolOuputsToRun",
        new ApiException(400, "Missing the required parameter 'runId' when calling submitToolOuputsToRun"));
    }
    // verify the required parameter 'submitToolOutputsRunRequest' is set
    if (submitToolOutputsRunRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'submitToolOutputsRunRequest' when calling submitToolOuputsToRun",
        new ApiException(400, "Missing the required parameter 'submitToolOutputsRunRequest' when calling submitToolOuputsToRun"));
    }

    // create path and map variables
    String path = "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs".replaceAll("\\{format\\}","json").replaceAll("\\{" + "thread_id" + "\\}", apiInvoker.escapeString(threadId.toString())).replaceAll("\\{" + "run_id" + "\\}", apiInvoker.escapeString(runId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RunObject) ApiInvoker.deserialize(localVarResponse,  "", RunObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
