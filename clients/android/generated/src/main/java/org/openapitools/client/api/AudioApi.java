/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.math.BigDecimal;
import org.openapitools.client.model.CreateSpeechRequest;
import org.openapitools.client.model.CreateTranscription200Response;
import org.openapitools.client.model.CreateTranscriptionRequestModel;
import org.openapitools.client.model.CreateTranslation200Response;
import java.io.File;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AudioApi {
  String basePath = "https://api.openai.com/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Generates audio from the input text.
  * 
   * @param createSpeechRequest 
   * @return File
  */
  public File createSpeech (CreateSpeechRequest createSpeechRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createSpeechRequest;
    // verify the required parameter 'createSpeechRequest' is set
    if (createSpeechRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createSpeechRequest' when calling createSpeech",
        new ApiException(400, "Missing the required parameter 'createSpeechRequest' when calling createSpeech"));
    }

    // create path and map variables
    String path = "/audio/speech";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (File) ApiInvoker.deserialize(localVarResponse, "", File.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Generates audio from the input text.
   * 
   * @param createSpeechRequest 
  */
  public void createSpeech (CreateSpeechRequest createSpeechRequest, final Response.Listener<File> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createSpeechRequest;

    // verify the required parameter 'createSpeechRequest' is set
    if (createSpeechRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createSpeechRequest' when calling createSpeech",
        new ApiException(400, "Missing the required parameter 'createSpeechRequest' when calling createSpeech"));
    }

    // create path and map variables
    String path = "/audio/speech".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((File) ApiInvoker.deserialize(localVarResponse,  "", File.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Transcribes audio into the input language.
  * 
   * @param file The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
   * @param model 
   * @param language The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
   * @param prompt An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
   * @param responseFormat The format of the transcript output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;. 
   * @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
   * @param timestampGranularities The timestamp granularities to populate for this transcription. &#x60;response_format&#x60; must be set &#x60;verbose_json&#x60; to use timestamp granularities. Either or both of these options are supported: &#x60;word&#x60;, or &#x60;segment&#x60;. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency. 
   * @return CreateTranscription200Response
  */
  public CreateTranscription200Response createTranscription (File file, CreateTranscriptionRequestModel model, String language, String prompt, String responseFormat, BigDecimal temperature, List<String> timestampGranularities) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling createTranscription",
        new ApiException(400, "Missing the required parameter 'file' when calling createTranscription"));
    }
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling createTranscription",
        new ApiException(400, "Missing the required parameter 'model' when calling createTranscription"));
    }

    // create path and map variables
    String path = "/audio/transcriptions";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      if (model != null) {
        localVarBuilder.addTextBody("model", ApiInvoker.parameterToString(model), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (language != null) {
        localVarBuilder.addTextBody("language", ApiInvoker.parameterToString(language), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (prompt != null) {
        localVarBuilder.addTextBody("prompt", ApiInvoker.parameterToString(prompt), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (responseFormat != null) {
        localVarBuilder.addTextBody("response_format", ApiInvoker.parameterToString(responseFormat), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (temperature != null) {
        localVarBuilder.addTextBody("temperature", ApiInvoker.parameterToString(temperature), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (timestampGranularities != null) {
        localVarBuilder.addTextBody("timestamp_granularities[]", ApiInvoker.parameterToString(timestampGranularities), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("model", ApiInvoker.parameterToString(model));
      formParams.put("language", ApiInvoker.parameterToString(language));
      formParams.put("prompt", ApiInvoker.parameterToString(prompt));
      formParams.put("response_format", ApiInvoker.parameterToString(responseFormat));
      formParams.put("temperature", ApiInvoker.parameterToString(temperature));
      formParams.put("timestamp_granularities[]", ApiInvoker.parameterToString(timestampGranularities));
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateTranscription200Response) ApiInvoker.deserialize(localVarResponse, "", CreateTranscription200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Transcribes audio into the input language.
   * 
   * @param file The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.    * @param model    * @param language The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.    * @param prompt An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.    * @param responseFormat The format of the transcript output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;.    * @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.    * @param timestampGranularities The timestamp granularities to populate for this transcription. &#x60;response_format&#x60; must be set &#x60;verbose_json&#x60; to use timestamp granularities. Either or both of these options are supported: &#x60;word&#x60;, or &#x60;segment&#x60;. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency. 
  */
  public void createTranscription (File file, CreateTranscriptionRequestModel model, String language, String prompt, String responseFormat, BigDecimal temperature, List<String> timestampGranularities, final Response.Listener<CreateTranscription200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling createTranscription",
        new ApiException(400, "Missing the required parameter 'file' when calling createTranscription"));
    }
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling createTranscription",
        new ApiException(400, "Missing the required parameter 'model' when calling createTranscription"));
    }

    // create path and map variables
    String path = "/audio/transcriptions".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      
      if (model != null) {
        localVarBuilder.addTextBody("model", ApiInvoker.parameterToString(model), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (language != null) {
        localVarBuilder.addTextBody("language", ApiInvoker.parameterToString(language), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (prompt != null) {
        localVarBuilder.addTextBody("prompt", ApiInvoker.parameterToString(prompt), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (responseFormat != null) {
        localVarBuilder.addTextBody("response_format", ApiInvoker.parameterToString(responseFormat), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (temperature != null) {
        localVarBuilder.addTextBody("temperature", ApiInvoker.parameterToString(temperature), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (timestampGranularities != null) {
        localVarBuilder.addTextBody("timestamp_granularities[]", ApiInvoker.parameterToString(timestampGranularities), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
formParams.put("model", ApiInvoker.parameterToString(model));
formParams.put("language", ApiInvoker.parameterToString(language));
formParams.put("prompt", ApiInvoker.parameterToString(prompt));
formParams.put("response_format", ApiInvoker.parameterToString(responseFormat));
formParams.put("temperature", ApiInvoker.parameterToString(temperature));
formParams.put("timestamp_granularities[]", ApiInvoker.parameterToString(timestampGranularities));
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateTranscription200Response) ApiInvoker.deserialize(localVarResponse,  "", CreateTranscription200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Translates audio into English.
  * 
   * @param file The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
   * @param model 
   * @param prompt An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. 
   * @param responseFormat The format of the transcript output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;. 
   * @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
   * @return CreateTranslation200Response
  */
  public CreateTranslation200Response createTranslation (File file, CreateTranscriptionRequestModel model, String prompt, String responseFormat, BigDecimal temperature) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling createTranslation",
        new ApiException(400, "Missing the required parameter 'file' when calling createTranslation"));
    }
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling createTranslation",
        new ApiException(400, "Missing the required parameter 'model' when calling createTranslation"));
    }

    // create path and map variables
    String path = "/audio/translations";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      if (model != null) {
        localVarBuilder.addTextBody("model", ApiInvoker.parameterToString(model), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (prompt != null) {
        localVarBuilder.addTextBody("prompt", ApiInvoker.parameterToString(prompt), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (responseFormat != null) {
        localVarBuilder.addTextBody("response_format", ApiInvoker.parameterToString(responseFormat), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (temperature != null) {
        localVarBuilder.addTextBody("temperature", ApiInvoker.parameterToString(temperature), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("model", ApiInvoker.parameterToString(model));
      formParams.put("prompt", ApiInvoker.parameterToString(prompt));
      formParams.put("response_format", ApiInvoker.parameterToString(responseFormat));
      formParams.put("temperature", ApiInvoker.parameterToString(temperature));
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateTranslation200Response) ApiInvoker.deserialize(localVarResponse, "", CreateTranslation200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Translates audio into English.
   * 
   * @param file The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.    * @param model    * @param prompt An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.    * @param responseFormat The format of the transcript output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;.    * @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
  */
  public void createTranslation (File file, CreateTranscriptionRequestModel model, String prompt, String responseFormat, BigDecimal temperature, final Response.Listener<CreateTranslation200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling createTranslation",
        new ApiException(400, "Missing the required parameter 'file' when calling createTranslation"));
    }
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling createTranslation",
        new ApiException(400, "Missing the required parameter 'model' when calling createTranslation"));
    }

    // create path and map variables
    String path = "/audio/translations".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      
      if (model != null) {
        localVarBuilder.addTextBody("model", ApiInvoker.parameterToString(model), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (prompt != null) {
        localVarBuilder.addTextBody("prompt", ApiInvoker.parameterToString(prompt), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (responseFormat != null) {
        localVarBuilder.addTextBody("response_format", ApiInvoker.parameterToString(responseFormat), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (temperature != null) {
        localVarBuilder.addTextBody("temperature", ApiInvoker.parameterToString(temperature), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
formParams.put("model", ApiInvoker.parameterToString(model));
formParams.put("prompt", ApiInvoker.parameterToString(prompt));
formParams.put("response_format", ApiInvoker.parameterToString(responseFormat));
formParams.put("temperature", ApiInvoker.parameterToString(temperature));
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateTranslation200Response) ApiInvoker.deserialize(localVarResponse,  "", CreateTranslation200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
