/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CreateFineTuningJobRequest;
import org.openapitools.client.model.FineTuningJob;
import org.openapitools.client.model.ListFineTuningJobCheckpointsResponse;
import org.openapitools.client.model.ListFineTuningJobEventsResponse;
import org.openapitools.client.model.ListPaginatedFineTuningJobsResponse;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class FineTuningApi {
  String basePath = "https://api.openai.com/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Immediately cancel a fine-tune job. 
  * 
   * @param fineTuningJobId The ID of the fine-tuning job to cancel. 
   * @return FineTuningJob
  */
  public FineTuningJob cancelFineTuningJob (String fineTuningJobId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'fineTuningJobId' is set
    if (fineTuningJobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fineTuningJobId' when calling cancelFineTuningJob",
        new ApiException(400, "Missing the required parameter 'fineTuningJobId' when calling cancelFineTuningJob"));
    }

    // create path and map variables
    String path = "/fine_tuning/jobs/{fine_tuning_job_id}/cancel".replaceAll("\\{" + "fine_tuning_job_id" + "\\}", apiInvoker.escapeString(fineTuningJobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (FineTuningJob) ApiInvoker.deserialize(localVarResponse, "", FineTuningJob.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Immediately cancel a fine-tune job. 
   * 
   * @param fineTuningJobId The ID of the fine-tuning job to cancel. 
  */
  public void cancelFineTuningJob (String fineTuningJobId, final Response.Listener<FineTuningJob> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'fineTuningJobId' is set
    if (fineTuningJobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fineTuningJobId' when calling cancelFineTuningJob",
        new ApiException(400, "Missing the required parameter 'fineTuningJobId' when calling cancelFineTuningJob"));
    }

    // create path and map variables
    String path = "/fine_tuning/jobs/{fine_tuning_job_id}/cancel".replaceAll("\\{format\\}","json").replaceAll("\\{" + "fine_tuning_job_id" + "\\}", apiInvoker.escapeString(fineTuningJobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((FineTuningJob) ApiInvoker.deserialize(localVarResponse,  "", FineTuningJob.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
  * 
   * @param createFineTuningJobRequest 
   * @return FineTuningJob
  */
  public FineTuningJob createFineTuningJob (CreateFineTuningJobRequest createFineTuningJobRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createFineTuningJobRequest;
    // verify the required parameter 'createFineTuningJobRequest' is set
    if (createFineTuningJobRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createFineTuningJobRequest' when calling createFineTuningJob",
        new ApiException(400, "Missing the required parameter 'createFineTuningJobRequest' when calling createFineTuningJob"));
    }

    // create path and map variables
    String path = "/fine_tuning/jobs";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (FineTuningJob) ApiInvoker.deserialize(localVarResponse, "", FineTuningJob.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
   * 
   * @param createFineTuningJobRequest 
  */
  public void createFineTuningJob (CreateFineTuningJobRequest createFineTuningJobRequest, final Response.Listener<FineTuningJob> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createFineTuningJobRequest;

    // verify the required parameter 'createFineTuningJobRequest' is set
    if (createFineTuningJobRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createFineTuningJobRequest' when calling createFineTuningJob",
        new ApiException(400, "Missing the required parameter 'createFineTuningJobRequest' when calling createFineTuningJob"));
    }

    // create path and map variables
    String path = "/fine_tuning/jobs".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((FineTuningJob) ApiInvoker.deserialize(localVarResponse,  "", FineTuningJob.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get status updates for a fine-tuning job. 
  * 
   * @param fineTuningJobId The ID of the fine-tuning job to get events for. 
   * @param after Identifier for the last event from the previous pagination request.
   * @param limit Number of events to retrieve.
   * @return ListFineTuningJobEventsResponse
  */
  public ListFineTuningJobEventsResponse listFineTuningEvents (String fineTuningJobId, String after, Integer limit) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'fineTuningJobId' is set
    if (fineTuningJobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fineTuningJobId' when calling listFineTuningEvents",
        new ApiException(400, "Missing the required parameter 'fineTuningJobId' when calling listFineTuningEvents"));
    }

    // create path and map variables
    String path = "/fine_tuning/jobs/{fine_tuning_job_id}/events".replaceAll("\\{" + "fine_tuning_job_id" + "\\}", apiInvoker.escapeString(fineTuningJobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ListFineTuningJobEventsResponse) ApiInvoker.deserialize(localVarResponse, "", ListFineTuningJobEventsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get status updates for a fine-tuning job. 
   * 
   * @param fineTuningJobId The ID of the fine-tuning job to get events for.    * @param after Identifier for the last event from the previous pagination request.   * @param limit Number of events to retrieve.
  */
  public void listFineTuningEvents (String fineTuningJobId, String after, Integer limit, final Response.Listener<ListFineTuningJobEventsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'fineTuningJobId' is set
    if (fineTuningJobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fineTuningJobId' when calling listFineTuningEvents",
        new ApiException(400, "Missing the required parameter 'fineTuningJobId' when calling listFineTuningEvents"));
    }

    // create path and map variables
    String path = "/fine_tuning/jobs/{fine_tuning_job_id}/events".replaceAll("\\{format\\}","json").replaceAll("\\{" + "fine_tuning_job_id" + "\\}", apiInvoker.escapeString(fineTuningJobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ListFineTuningJobEventsResponse) ApiInvoker.deserialize(localVarResponse,  "", ListFineTuningJobEventsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List checkpoints for a fine-tuning job. 
  * 
   * @param fineTuningJobId The ID of the fine-tuning job to get checkpoints for. 
   * @param after Identifier for the last checkpoint ID from the previous pagination request.
   * @param limit Number of checkpoints to retrieve.
   * @return ListFineTuningJobCheckpointsResponse
  */
  public ListFineTuningJobCheckpointsResponse listFineTuningJobCheckpoints (String fineTuningJobId, String after, Integer limit) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'fineTuningJobId' is set
    if (fineTuningJobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fineTuningJobId' when calling listFineTuningJobCheckpoints",
        new ApiException(400, "Missing the required parameter 'fineTuningJobId' when calling listFineTuningJobCheckpoints"));
    }

    // create path and map variables
    String path = "/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints".replaceAll("\\{" + "fine_tuning_job_id" + "\\}", apiInvoker.escapeString(fineTuningJobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ListFineTuningJobCheckpointsResponse) ApiInvoker.deserialize(localVarResponse, "", ListFineTuningJobCheckpointsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List checkpoints for a fine-tuning job. 
   * 
   * @param fineTuningJobId The ID of the fine-tuning job to get checkpoints for.    * @param after Identifier for the last checkpoint ID from the previous pagination request.   * @param limit Number of checkpoints to retrieve.
  */
  public void listFineTuningJobCheckpoints (String fineTuningJobId, String after, Integer limit, final Response.Listener<ListFineTuningJobCheckpointsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'fineTuningJobId' is set
    if (fineTuningJobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fineTuningJobId' when calling listFineTuningJobCheckpoints",
        new ApiException(400, "Missing the required parameter 'fineTuningJobId' when calling listFineTuningJobCheckpoints"));
    }

    // create path and map variables
    String path = "/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints".replaceAll("\\{format\\}","json").replaceAll("\\{" + "fine_tuning_job_id" + "\\}", apiInvoker.escapeString(fineTuningJobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ListFineTuningJobCheckpointsResponse) ApiInvoker.deserialize(localVarResponse,  "", ListFineTuningJobCheckpointsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List your organization&#39;s fine-tuning jobs 
  * 
   * @param after Identifier for the last job from the previous pagination request.
   * @param limit Number of fine-tuning jobs to retrieve.
   * @return ListPaginatedFineTuningJobsResponse
  */
  public ListPaginatedFineTuningJobsResponse listPaginatedFineTuningJobs (String after, Integer limit) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/fine_tuning/jobs";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ListPaginatedFineTuningJobsResponse) ApiInvoker.deserialize(localVarResponse, "", ListPaginatedFineTuningJobsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List your organization&#39;s fine-tuning jobs 
   * 
   * @param after Identifier for the last job from the previous pagination request.   * @param limit Number of fine-tuning jobs to retrieve.
  */
  public void listPaginatedFineTuningJobs (String after, Integer limit, final Response.Listener<ListPaginatedFineTuningJobsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/fine_tuning/jobs".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "after", after));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ListPaginatedFineTuningJobsResponse) ApiInvoker.deserialize(localVarResponse,  "", ListPaginatedFineTuningJobsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
  * 
   * @param fineTuningJobId The ID of the fine-tuning job. 
   * @return FineTuningJob
  */
  public FineTuningJob retrieveFineTuningJob (String fineTuningJobId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'fineTuningJobId' is set
    if (fineTuningJobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fineTuningJobId' when calling retrieveFineTuningJob",
        new ApiException(400, "Missing the required parameter 'fineTuningJobId' when calling retrieveFineTuningJob"));
    }

    // create path and map variables
    String path = "/fine_tuning/jobs/{fine_tuning_job_id}".replaceAll("\\{" + "fine_tuning_job_id" + "\\}", apiInvoker.escapeString(fineTuningJobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (FineTuningJob) ApiInvoker.deserialize(localVarResponse, "", FineTuningJob.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
   * 
   * @param fineTuningJobId The ID of the fine-tuning job. 
  */
  public void retrieveFineTuningJob (String fineTuningJobId, final Response.Listener<FineTuningJob> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'fineTuningJobId' is set
    if (fineTuningJobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fineTuningJobId' when calling retrieveFineTuningJob",
        new ApiException(400, "Missing the required parameter 'fineTuningJobId' when calling retrieveFineTuningJob"));
    }

    // create path and map variables
    String path = "/fine_tuning/jobs/{fine_tuning_job_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "fine_tuning_job_id" + "\\}", apiInvoker.escapeString(fineTuningJobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((FineTuningJob) ApiInvoker.deserialize(localVarResponse,  "", FineTuningJob.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
