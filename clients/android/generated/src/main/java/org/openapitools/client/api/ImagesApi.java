/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CreateImageEditRequestModel;
import org.openapitools.client.model.CreateImageRequest;
import java.io.File;
import org.openapitools.client.model.ImagesResponse;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ImagesApi {
  String basePath = "https://api.openai.com/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Creates an image given a prompt.
  * 
   * @param createImageRequest 
   * @return ImagesResponse
  */
  public ImagesResponse createImage (CreateImageRequest createImageRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createImageRequest;
    // verify the required parameter 'createImageRequest' is set
    if (createImageRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createImageRequest' when calling createImage",
        new ApiException(400, "Missing the required parameter 'createImageRequest' when calling createImage"));
    }

    // create path and map variables
    String path = "/images/generations";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ImagesResponse) ApiInvoker.deserialize(localVarResponse, "", ImagesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates an image given a prompt.
   * 
   * @param createImageRequest 
  */
  public void createImage (CreateImageRequest createImageRequest, final Response.Listener<ImagesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createImageRequest;

    // verify the required parameter 'createImageRequest' is set
    if (createImageRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createImageRequest' when calling createImage",
        new ApiException(400, "Missing the required parameter 'createImageRequest' when calling createImage"));
    }

    // create path and map variables
    String path = "/images/generations".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ImagesResponse) ApiInvoker.deserialize(localVarResponse,  "", ImagesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates an edited or extended image given an original image and a prompt.
  * 
   * @param image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
   * @param prompt A text description of the desired image(s). The maximum length is 1000 characters.
   * @param mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.
   * @param model 
   * @param n The number of images to generate. Must be between 1 and 10.
   * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
   * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated.
   * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
   * @return ImagesResponse
  */
  public ImagesResponse createImageEdit (File image, String prompt, File mask, CreateImageEditRequestModel model, Integer n, String size, String responseFormat, String user) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'image' is set
    if (image == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'image' when calling createImageEdit",
        new ApiException(400, "Missing the required parameter 'image' when calling createImageEdit"));
    }
    // verify the required parameter 'prompt' is set
    if (prompt == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'prompt' when calling createImageEdit",
        new ApiException(400, "Missing the required parameter 'prompt' when calling createImageEdit"));
    }

    // create path and map variables
    String path = "/images/edits";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (image != null) {
        localVarBuilder.addBinaryBody("image", image);
      }
      if (prompt != null) {
        localVarBuilder.addTextBody("prompt", ApiInvoker.parameterToString(prompt), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (mask != null) {
        localVarBuilder.addBinaryBody("mask", mask);
      }
      if (model != null) {
        localVarBuilder.addTextBody("model", ApiInvoker.parameterToString(model), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (n != null) {
        localVarBuilder.addTextBody("n", ApiInvoker.parameterToString(n), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (size != null) {
        localVarBuilder.addTextBody("size", ApiInvoker.parameterToString(size), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (responseFormat != null) {
        localVarBuilder.addTextBody("response_format", ApiInvoker.parameterToString(responseFormat), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (user != null) {
        localVarBuilder.addTextBody("user", ApiInvoker.parameterToString(user), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("prompt", ApiInvoker.parameterToString(prompt));
      formParams.put("model", ApiInvoker.parameterToString(model));
      formParams.put("n", ApiInvoker.parameterToString(n));
      formParams.put("size", ApiInvoker.parameterToString(size));
      formParams.put("response_format", ApiInvoker.parameterToString(responseFormat));
      formParams.put("user", ApiInvoker.parameterToString(user));
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ImagesResponse) ApiInvoker.deserialize(localVarResponse, "", ImagesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates an edited or extended image given an original image and a prompt.
   * 
   * @param image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.   * @param prompt A text description of the desired image(s). The maximum length is 1000 characters.   * @param mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.   * @param model    * @param n The number of images to generate. Must be between 1 and 10.   * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.   * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated.   * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
  */
  public void createImageEdit (File image, String prompt, File mask, CreateImageEditRequestModel model, Integer n, String size, String responseFormat, String user, final Response.Listener<ImagesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'image' is set
    if (image == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'image' when calling createImageEdit",
        new ApiException(400, "Missing the required parameter 'image' when calling createImageEdit"));
    }
    // verify the required parameter 'prompt' is set
    if (prompt == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'prompt' when calling createImageEdit",
        new ApiException(400, "Missing the required parameter 'prompt' when calling createImageEdit"));
    }

    // create path and map variables
    String path = "/images/edits".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (image != null) {
        localVarBuilder.addBinaryBody("image", image);
      }
      
      if (prompt != null) {
        localVarBuilder.addTextBody("prompt", ApiInvoker.parameterToString(prompt), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (mask != null) {
        localVarBuilder.addBinaryBody("mask", mask);
      }
      
      if (model != null) {
        localVarBuilder.addTextBody("model", ApiInvoker.parameterToString(model), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (n != null) {
        localVarBuilder.addTextBody("n", ApiInvoker.parameterToString(n), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (size != null) {
        localVarBuilder.addTextBody("size", ApiInvoker.parameterToString(size), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (responseFormat != null) {
        localVarBuilder.addTextBody("response_format", ApiInvoker.parameterToString(responseFormat), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (user != null) {
        localVarBuilder.addTextBody("user", ApiInvoker.parameterToString(user), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
formParams.put("prompt", ApiInvoker.parameterToString(prompt));

formParams.put("model", ApiInvoker.parameterToString(model));
formParams.put("n", ApiInvoker.parameterToString(n));
formParams.put("size", ApiInvoker.parameterToString(size));
formParams.put("response_format", ApiInvoker.parameterToString(responseFormat));
formParams.put("user", ApiInvoker.parameterToString(user));
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ImagesResponse) ApiInvoker.deserialize(localVarResponse,  "", ImagesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates a variation of a given image.
  * 
   * @param image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
   * @param model 
   * @param n The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported.
   * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated.
   * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
   * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
   * @return ImagesResponse
  */
  public ImagesResponse createImageVariation (File image, CreateImageEditRequestModel model, Integer n, String responseFormat, String size, String user) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'image' is set
    if (image == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'image' when calling createImageVariation",
        new ApiException(400, "Missing the required parameter 'image' when calling createImageVariation"));
    }

    // create path and map variables
    String path = "/images/variations";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (image != null) {
        localVarBuilder.addBinaryBody("image", image);
      }
      if (model != null) {
        localVarBuilder.addTextBody("model", ApiInvoker.parameterToString(model), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (n != null) {
        localVarBuilder.addTextBody("n", ApiInvoker.parameterToString(n), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (responseFormat != null) {
        localVarBuilder.addTextBody("response_format", ApiInvoker.parameterToString(responseFormat), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (size != null) {
        localVarBuilder.addTextBody("size", ApiInvoker.parameterToString(size), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (user != null) {
        localVarBuilder.addTextBody("user", ApiInvoker.parameterToString(user), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("model", ApiInvoker.parameterToString(model));
      formParams.put("n", ApiInvoker.parameterToString(n));
      formParams.put("response_format", ApiInvoker.parameterToString(responseFormat));
      formParams.put("size", ApiInvoker.parameterToString(size));
      formParams.put("user", ApiInvoker.parameterToString(user));
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ImagesResponse) ApiInvoker.deserialize(localVarResponse, "", ImagesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a variation of a given image.
   * 
   * @param image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.   * @param model    * @param n The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported.   * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated.   * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.   * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
  */
  public void createImageVariation (File image, CreateImageEditRequestModel model, Integer n, String responseFormat, String size, String user, final Response.Listener<ImagesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'image' is set
    if (image == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'image' when calling createImageVariation",
        new ApiException(400, "Missing the required parameter 'image' when calling createImageVariation"));
    }

    // create path and map variables
    String path = "/images/variations".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (image != null) {
        localVarBuilder.addBinaryBody("image", image);
      }
      
      if (model != null) {
        localVarBuilder.addTextBody("model", ApiInvoker.parameterToString(model), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (n != null) {
        localVarBuilder.addTextBody("n", ApiInvoker.parameterToString(n), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (responseFormat != null) {
        localVarBuilder.addTextBody("response_format", ApiInvoker.parameterToString(responseFormat), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (size != null) {
        localVarBuilder.addTextBody("size", ApiInvoker.parameterToString(size), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (user != null) {
        localVarBuilder.addTextBody("user", ApiInvoker.parameterToString(user), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
formParams.put("model", ApiInvoker.parameterToString(model));
formParams.put("n", ApiInvoker.parameterToString(n));
formParams.put("response_format", ApiInvoker.parameterToString(responseFormat));
formParams.put("size", ApiInvoker.parameterToString(size));
formParams.put("user", ApiInvoker.parameterToString(user));
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ImagesResponse) ApiInvoker.deserialize(localVarResponse,  "", ImagesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
