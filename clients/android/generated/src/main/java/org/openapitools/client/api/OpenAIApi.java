/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.math.BigDecimal;
import org.openapitools.client.model.CreateChatCompletionRequest;
import org.openapitools.client.model.CreateChatCompletionResponse;
import org.openapitools.client.model.CreateCompletionRequest;
import org.openapitools.client.model.CreateCompletionResponse;
import org.openapitools.client.model.CreateEditRequest;
import org.openapitools.client.model.CreateEditResponse;
import org.openapitools.client.model.CreateEmbeddingRequest;
import org.openapitools.client.model.CreateEmbeddingResponse;
import org.openapitools.client.model.CreateFineTuneRequest;
import org.openapitools.client.model.CreateImageRequest;
import org.openapitools.client.model.CreateModerationRequest;
import org.openapitools.client.model.CreateModerationResponse;
import org.openapitools.client.model.CreateTranscriptionRequestModel;
import org.openapitools.client.model.CreateTranscriptionResponse;
import org.openapitools.client.model.CreateTranslationResponse;
import org.openapitools.client.model.DeleteFileResponse;
import org.openapitools.client.model.DeleteModelResponse;
import java.io.File;
import org.openapitools.client.model.FineTune;
import org.openapitools.client.model.ImagesResponse;
import org.openapitools.client.model.ListFilesResponse;
import org.openapitools.client.model.ListFineTuneEventsResponse;
import org.openapitools.client.model.ListFineTunesResponse;
import org.openapitools.client.model.ListModelsResponse;
import org.openapitools.client.model.Model;
import org.openapitools.client.model.OpenAIFile;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class OpenAIApi {
  String basePath = "https://api.openai.com/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Immediately cancel a fine-tune job. 
  * 
   * @param fineTuneId The ID of the fine-tune job to cancel 
   * @return FineTune
  */
  public FineTune cancelFineTune (String fineTuneId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'fineTuneId' is set
    if (fineTuneId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fineTuneId' when calling cancelFineTune",
        new ApiException(400, "Missing the required parameter 'fineTuneId' when calling cancelFineTune"));
    }

    // create path and map variables
    String path = "/fine-tunes/{fine_tune_id}/cancel".replaceAll("\\{" + "fine_tune_id" + "\\}", apiInvoker.escapeString(fineTuneId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (FineTune) ApiInvoker.deserialize(localVarResponse, "", FineTune.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Immediately cancel a fine-tune job. 
   * 
   * @param fineTuneId The ID of the fine-tune job to cancel 
  */
  public void cancelFineTune (String fineTuneId, final Response.Listener<FineTune> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'fineTuneId' is set
    if (fineTuneId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fineTuneId' when calling cancelFineTune",
        new ApiException(400, "Missing the required parameter 'fineTuneId' when calling cancelFineTune"));
    }

    // create path and map variables
    String path = "/fine-tunes/{fine_tune_id}/cancel".replaceAll("\\{format\\}","json").replaceAll("\\{" + "fine_tune_id" + "\\}", apiInvoker.escapeString(fineTuneId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((FineTune) ApiInvoker.deserialize(localVarResponse,  "", FineTune.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates a model response for the given chat conversation.
  * 
   * @param createChatCompletionRequest 
   * @return CreateChatCompletionResponse
  */
  public CreateChatCompletionResponse createChatCompletion (CreateChatCompletionRequest createChatCompletionRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createChatCompletionRequest;
    // verify the required parameter 'createChatCompletionRequest' is set
    if (createChatCompletionRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createChatCompletionRequest' when calling createChatCompletion",
        new ApiException(400, "Missing the required parameter 'createChatCompletionRequest' when calling createChatCompletion"));
    }

    // create path and map variables
    String path = "/chat/completions";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateChatCompletionResponse) ApiInvoker.deserialize(localVarResponse, "", CreateChatCompletionResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a model response for the given chat conversation.
   * 
   * @param createChatCompletionRequest 
  */
  public void createChatCompletion (CreateChatCompletionRequest createChatCompletionRequest, final Response.Listener<CreateChatCompletionResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createChatCompletionRequest;

    // verify the required parameter 'createChatCompletionRequest' is set
    if (createChatCompletionRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createChatCompletionRequest' when calling createChatCompletion",
        new ApiException(400, "Missing the required parameter 'createChatCompletionRequest' when calling createChatCompletion"));
    }

    // create path and map variables
    String path = "/chat/completions".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateChatCompletionResponse) ApiInvoker.deserialize(localVarResponse,  "", CreateChatCompletionResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates a completion for the provided prompt and parameters.
  * 
   * @param createCompletionRequest 
   * @return CreateCompletionResponse
  */
  public CreateCompletionResponse createCompletion (CreateCompletionRequest createCompletionRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createCompletionRequest;
    // verify the required parameter 'createCompletionRequest' is set
    if (createCompletionRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createCompletionRequest' when calling createCompletion",
        new ApiException(400, "Missing the required parameter 'createCompletionRequest' when calling createCompletion"));
    }

    // create path and map variables
    String path = "/completions";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateCompletionResponse) ApiInvoker.deserialize(localVarResponse, "", CreateCompletionResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a completion for the provided prompt and parameters.
   * 
   * @param createCompletionRequest 
  */
  public void createCompletion (CreateCompletionRequest createCompletionRequest, final Response.Listener<CreateCompletionResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createCompletionRequest;

    // verify the required parameter 'createCompletionRequest' is set
    if (createCompletionRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createCompletionRequest' when calling createCompletion",
        new ApiException(400, "Missing the required parameter 'createCompletionRequest' when calling createCompletion"));
    }

    // create path and map variables
    String path = "/completions".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateCompletionResponse) ApiInvoker.deserialize(localVarResponse,  "", CreateCompletionResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates a new edit for the provided input, instruction, and parameters.
  * 
   * @param createEditRequest 
   * @return CreateEditResponse
  */
  public CreateEditResponse createEdit (CreateEditRequest createEditRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createEditRequest;
    // verify the required parameter 'createEditRequest' is set
    if (createEditRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createEditRequest' when calling createEdit",
        new ApiException(400, "Missing the required parameter 'createEditRequest' when calling createEdit"));
    }

    // create path and map variables
    String path = "/edits";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateEditResponse) ApiInvoker.deserialize(localVarResponse, "", CreateEditResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a new edit for the provided input, instruction, and parameters.
   * 
   * @param createEditRequest 
  */
  public void createEdit (CreateEditRequest createEditRequest, final Response.Listener<CreateEditResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createEditRequest;

    // verify the required parameter 'createEditRequest' is set
    if (createEditRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createEditRequest' when calling createEdit",
        new ApiException(400, "Missing the required parameter 'createEditRequest' when calling createEdit"));
    }

    // create path and map variables
    String path = "/edits".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateEditResponse) ApiInvoker.deserialize(localVarResponse,  "", CreateEditResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates an embedding vector representing the input text.
  * 
   * @param createEmbeddingRequest 
   * @return CreateEmbeddingResponse
  */
  public CreateEmbeddingResponse createEmbedding (CreateEmbeddingRequest createEmbeddingRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createEmbeddingRequest;
    // verify the required parameter 'createEmbeddingRequest' is set
    if (createEmbeddingRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createEmbeddingRequest' when calling createEmbedding",
        new ApiException(400, "Missing the required parameter 'createEmbeddingRequest' when calling createEmbedding"));
    }

    // create path and map variables
    String path = "/embeddings";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateEmbeddingResponse) ApiInvoker.deserialize(localVarResponse, "", CreateEmbeddingResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates an embedding vector representing the input text.
   * 
   * @param createEmbeddingRequest 
  */
  public void createEmbedding (CreateEmbeddingRequest createEmbeddingRequest, final Response.Listener<CreateEmbeddingResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createEmbeddingRequest;

    // verify the required parameter 'createEmbeddingRequest' is set
    if (createEmbeddingRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createEmbeddingRequest' when calling createEmbedding",
        new ApiException(400, "Missing the required parameter 'createEmbeddingRequest' when calling createEmbedding"));
    }

    // create path and map variables
    String path = "/embeddings".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateEmbeddingResponse) ApiInvoker.deserialize(localVarResponse,  "", CreateEmbeddingResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. 
  * 
   * @param file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\&quot;fine-tune\\\&quot;, each line is a JSON record with \\\&quot;prompt\\\&quot; and \\\&quot;completion\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data). 
   * @param purpose The intended purpose of the uploaded documents.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. 
   * @return OpenAIFile
  */
  public OpenAIFile createFile (File file, String purpose) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling createFile",
        new ApiException(400, "Missing the required parameter 'file' when calling createFile"));
    }
    // verify the required parameter 'purpose' is set
    if (purpose == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'purpose' when calling createFile",
        new ApiException(400, "Missing the required parameter 'purpose' when calling createFile"));
    }

    // create path and map variables
    String path = "/files";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      if (purpose != null) {
        localVarBuilder.addTextBody("purpose", ApiInvoker.parameterToString(purpose), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("purpose", ApiInvoker.parameterToString(purpose));
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OpenAIFile) ApiInvoker.deserialize(localVarResponse, "", OpenAIFile.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. 
   * 
   * @param file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\&quot;fine-tune\\\&quot;, each line is a JSON record with \\\&quot;prompt\\\&quot; and \\\&quot;completion\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).    * @param purpose The intended purpose of the uploaded documents.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. 
  */
  public void createFile (File file, String purpose, final Response.Listener<OpenAIFile> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling createFile",
        new ApiException(400, "Missing the required parameter 'file' when calling createFile"));
    }
    // verify the required parameter 'purpose' is set
    if (purpose == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'purpose' when calling createFile",
        new ApiException(400, "Missing the required parameter 'purpose' when calling createFile"));
    }

    // create path and map variables
    String path = "/files".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      
      if (purpose != null) {
        localVarBuilder.addTextBody("purpose", ApiInvoker.parameterToString(purpose), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
formParams.put("purpose", ApiInvoker.parameterToString(purpose));
    }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OpenAIFile) ApiInvoker.deserialize(localVarResponse,  "", OpenAIFile.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
  * 
   * @param createFineTuneRequest 
   * @return FineTune
  */
  public FineTune createFineTune (CreateFineTuneRequest createFineTuneRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createFineTuneRequest;
    // verify the required parameter 'createFineTuneRequest' is set
    if (createFineTuneRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createFineTuneRequest' when calling createFineTune",
        new ApiException(400, "Missing the required parameter 'createFineTuneRequest' when calling createFineTune"));
    }

    // create path and map variables
    String path = "/fine-tunes";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (FineTune) ApiInvoker.deserialize(localVarResponse, "", FineTune.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
   * 
   * @param createFineTuneRequest 
  */
  public void createFineTune (CreateFineTuneRequest createFineTuneRequest, final Response.Listener<FineTune> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createFineTuneRequest;

    // verify the required parameter 'createFineTuneRequest' is set
    if (createFineTuneRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createFineTuneRequest' when calling createFineTune",
        new ApiException(400, "Missing the required parameter 'createFineTuneRequest' when calling createFineTune"));
    }

    // create path and map variables
    String path = "/fine-tunes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((FineTune) ApiInvoker.deserialize(localVarResponse,  "", FineTune.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates an image given a prompt.
  * 
   * @param createImageRequest 
   * @return ImagesResponse
  */
  public ImagesResponse createImage (CreateImageRequest createImageRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createImageRequest;
    // verify the required parameter 'createImageRequest' is set
    if (createImageRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createImageRequest' when calling createImage",
        new ApiException(400, "Missing the required parameter 'createImageRequest' when calling createImage"));
    }

    // create path and map variables
    String path = "/images/generations";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ImagesResponse) ApiInvoker.deserialize(localVarResponse, "", ImagesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates an image given a prompt.
   * 
   * @param createImageRequest 
  */
  public void createImage (CreateImageRequest createImageRequest, final Response.Listener<ImagesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createImageRequest;

    // verify the required parameter 'createImageRequest' is set
    if (createImageRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createImageRequest' when calling createImage",
        new ApiException(400, "Missing the required parameter 'createImageRequest' when calling createImage"));
    }

    // create path and map variables
    String path = "/images/generations".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ImagesResponse) ApiInvoker.deserialize(localVarResponse,  "", ImagesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates an edited or extended image given an original image and a prompt.
  * 
   * @param image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
   * @param prompt A text description of the desired image(s). The maximum length is 1000 characters.
   * @param mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.
   * @param n The number of images to generate. Must be between 1 and 10.
   * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
   * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.
   * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
   * @return ImagesResponse
  */
  public ImagesResponse createImageEdit (File image, String prompt, File mask, Integer n, String size, String responseFormat, String user) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'image' is set
    if (image == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'image' when calling createImageEdit",
        new ApiException(400, "Missing the required parameter 'image' when calling createImageEdit"));
    }
    // verify the required parameter 'prompt' is set
    if (prompt == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'prompt' when calling createImageEdit",
        new ApiException(400, "Missing the required parameter 'prompt' when calling createImageEdit"));
    }

    // create path and map variables
    String path = "/images/edits";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (image != null) {
        localVarBuilder.addBinaryBody("image", image);
      }
      if (mask != null) {
        localVarBuilder.addBinaryBody("mask", mask);
      }
      if (prompt != null) {
        localVarBuilder.addTextBody("prompt", ApiInvoker.parameterToString(prompt), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (n != null) {
        localVarBuilder.addTextBody("n", ApiInvoker.parameterToString(n), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (size != null) {
        localVarBuilder.addTextBody("size", ApiInvoker.parameterToString(size), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (responseFormat != null) {
        localVarBuilder.addTextBody("response_format", ApiInvoker.parameterToString(responseFormat), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (user != null) {
        localVarBuilder.addTextBody("user", ApiInvoker.parameterToString(user), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("prompt", ApiInvoker.parameterToString(prompt));
      formParams.put("n", ApiInvoker.parameterToString(n));
      formParams.put("size", ApiInvoker.parameterToString(size));
      formParams.put("response_format", ApiInvoker.parameterToString(responseFormat));
      formParams.put("user", ApiInvoker.parameterToString(user));
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ImagesResponse) ApiInvoker.deserialize(localVarResponse, "", ImagesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates an edited or extended image given an original image and a prompt.
   * 
   * @param image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.   * @param prompt A text description of the desired image(s). The maximum length is 1000 characters.   * @param mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.   * @param n The number of images to generate. Must be between 1 and 10.   * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.   * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.   * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
  */
  public void createImageEdit (File image, String prompt, File mask, Integer n, String size, String responseFormat, String user, final Response.Listener<ImagesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'image' is set
    if (image == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'image' when calling createImageEdit",
        new ApiException(400, "Missing the required parameter 'image' when calling createImageEdit"));
    }
    // verify the required parameter 'prompt' is set
    if (prompt == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'prompt' when calling createImageEdit",
        new ApiException(400, "Missing the required parameter 'prompt' when calling createImageEdit"));
    }

    // create path and map variables
    String path = "/images/edits".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (image != null) {
        localVarBuilder.addBinaryBody("image", image);
      }
      
      if (mask != null) {
        localVarBuilder.addBinaryBody("mask", mask);
      }
      
      if (prompt != null) {
        localVarBuilder.addTextBody("prompt", ApiInvoker.parameterToString(prompt), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (n != null) {
        localVarBuilder.addTextBody("n", ApiInvoker.parameterToString(n), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (size != null) {
        localVarBuilder.addTextBody("size", ApiInvoker.parameterToString(size), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (responseFormat != null) {
        localVarBuilder.addTextBody("response_format", ApiInvoker.parameterToString(responseFormat), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (user != null) {
        localVarBuilder.addTextBody("user", ApiInvoker.parameterToString(user), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      

formParams.put("prompt", ApiInvoker.parameterToString(prompt));
formParams.put("n", ApiInvoker.parameterToString(n));
formParams.put("size", ApiInvoker.parameterToString(size));
formParams.put("response_format", ApiInvoker.parameterToString(responseFormat));
formParams.put("user", ApiInvoker.parameterToString(user));
    }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ImagesResponse) ApiInvoker.deserialize(localVarResponse,  "", ImagesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates a variation of a given image.
  * 
   * @param image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
   * @param n The number of images to generate. Must be between 1 and 10.
   * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
   * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.
   * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
   * @return ImagesResponse
  */
  public ImagesResponse createImageVariation (File image, Integer n, String size, String responseFormat, String user) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'image' is set
    if (image == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'image' when calling createImageVariation",
        new ApiException(400, "Missing the required parameter 'image' when calling createImageVariation"));
    }

    // create path and map variables
    String path = "/images/variations";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (image != null) {
        localVarBuilder.addBinaryBody("image", image);
      }
      if (n != null) {
        localVarBuilder.addTextBody("n", ApiInvoker.parameterToString(n), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (size != null) {
        localVarBuilder.addTextBody("size", ApiInvoker.parameterToString(size), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (responseFormat != null) {
        localVarBuilder.addTextBody("response_format", ApiInvoker.parameterToString(responseFormat), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (user != null) {
        localVarBuilder.addTextBody("user", ApiInvoker.parameterToString(user), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("n", ApiInvoker.parameterToString(n));
      formParams.put("size", ApiInvoker.parameterToString(size));
      formParams.put("response_format", ApiInvoker.parameterToString(responseFormat));
      formParams.put("user", ApiInvoker.parameterToString(user));
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ImagesResponse) ApiInvoker.deserialize(localVarResponse, "", ImagesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a variation of a given image.
   * 
   * @param image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.   * @param n The number of images to generate. Must be between 1 and 10.   * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.   * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.   * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
  */
  public void createImageVariation (File image, Integer n, String size, String responseFormat, String user, final Response.Listener<ImagesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'image' is set
    if (image == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'image' when calling createImageVariation",
        new ApiException(400, "Missing the required parameter 'image' when calling createImageVariation"));
    }

    // create path and map variables
    String path = "/images/variations".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (image != null) {
        localVarBuilder.addBinaryBody("image", image);
      }
      
      if (n != null) {
        localVarBuilder.addTextBody("n", ApiInvoker.parameterToString(n), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (size != null) {
        localVarBuilder.addTextBody("size", ApiInvoker.parameterToString(size), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (responseFormat != null) {
        localVarBuilder.addTextBody("response_format", ApiInvoker.parameterToString(responseFormat), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (user != null) {
        localVarBuilder.addTextBody("user", ApiInvoker.parameterToString(user), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
formParams.put("n", ApiInvoker.parameterToString(n));
formParams.put("size", ApiInvoker.parameterToString(size));
formParams.put("response_format", ApiInvoker.parameterToString(responseFormat));
formParams.put("user", ApiInvoker.parameterToString(user));
    }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ImagesResponse) ApiInvoker.deserialize(localVarResponse,  "", ImagesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Classifies if text violates OpenAI&#39;s Content Policy
  * 
   * @param createModerationRequest 
   * @return CreateModerationResponse
  */
  public CreateModerationResponse createModeration (CreateModerationRequest createModerationRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createModerationRequest;
    // verify the required parameter 'createModerationRequest' is set
    if (createModerationRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createModerationRequest' when calling createModeration",
        new ApiException(400, "Missing the required parameter 'createModerationRequest' when calling createModeration"));
    }

    // create path and map variables
    String path = "/moderations";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateModerationResponse) ApiInvoker.deserialize(localVarResponse, "", CreateModerationResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Classifies if text violates OpenAI&#39;s Content Policy
   * 
   * @param createModerationRequest 
  */
  public void createModeration (CreateModerationRequest createModerationRequest, final Response.Listener<CreateModerationResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createModerationRequest;

    // verify the required parameter 'createModerationRequest' is set
    if (createModerationRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createModerationRequest' when calling createModeration",
        new ApiException(400, "Missing the required parameter 'createModerationRequest' when calling createModeration"));
    }

    // create path and map variables
    String path = "/moderations".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateModerationResponse) ApiInvoker.deserialize(localVarResponse,  "", CreateModerationResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Transcribes audio into the input language.
  * 
   * @param file The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
   * @param model 
   * @param prompt An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
   * @param responseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
   * @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
   * @param language The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
   * @return CreateTranscriptionResponse
  */
  public CreateTranscriptionResponse createTranscription (File file, CreateTranscriptionRequestModel model, String prompt, String responseFormat, BigDecimal temperature, String language) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling createTranscription",
        new ApiException(400, "Missing the required parameter 'file' when calling createTranscription"));
    }
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling createTranscription",
        new ApiException(400, "Missing the required parameter 'model' when calling createTranscription"));
    }

    // create path and map variables
    String path = "/audio/transcriptions";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      if (model != null) {
        localVarBuilder.addTextBody("model", ApiInvoker.parameterToString(model), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (prompt != null) {
        localVarBuilder.addTextBody("prompt", ApiInvoker.parameterToString(prompt), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (responseFormat != null) {
        localVarBuilder.addTextBody("response_format", ApiInvoker.parameterToString(responseFormat), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (temperature != null) {
        localVarBuilder.addTextBody("temperature", ApiInvoker.parameterToString(temperature), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (language != null) {
        localVarBuilder.addTextBody("language", ApiInvoker.parameterToString(language), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("model", ApiInvoker.parameterToString(model));
      formParams.put("prompt", ApiInvoker.parameterToString(prompt));
      formParams.put("response_format", ApiInvoker.parameterToString(responseFormat));
      formParams.put("temperature", ApiInvoker.parameterToString(temperature));
      formParams.put("language", ApiInvoker.parameterToString(language));
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateTranscriptionResponse) ApiInvoker.deserialize(localVarResponse, "", CreateTranscriptionResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Transcribes audio into the input language.
   * 
   * @param file The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.    * @param model    * @param prompt An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.    * @param responseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.    * @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.    * @param language The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
  */
  public void createTranscription (File file, CreateTranscriptionRequestModel model, String prompt, String responseFormat, BigDecimal temperature, String language, final Response.Listener<CreateTranscriptionResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling createTranscription",
        new ApiException(400, "Missing the required parameter 'file' when calling createTranscription"));
    }
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling createTranscription",
        new ApiException(400, "Missing the required parameter 'model' when calling createTranscription"));
    }

    // create path and map variables
    String path = "/audio/transcriptions".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      
      if (model != null) {
        localVarBuilder.addTextBody("model", ApiInvoker.parameterToString(model), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (prompt != null) {
        localVarBuilder.addTextBody("prompt", ApiInvoker.parameterToString(prompt), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (responseFormat != null) {
        localVarBuilder.addTextBody("response_format", ApiInvoker.parameterToString(responseFormat), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (temperature != null) {
        localVarBuilder.addTextBody("temperature", ApiInvoker.parameterToString(temperature), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (language != null) {
        localVarBuilder.addTextBody("language", ApiInvoker.parameterToString(language), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
formParams.put("model", ApiInvoker.parameterToString(model));
formParams.put("prompt", ApiInvoker.parameterToString(prompt));
formParams.put("response_format", ApiInvoker.parameterToString(responseFormat));
formParams.put("temperature", ApiInvoker.parameterToString(temperature));
formParams.put("language", ApiInvoker.parameterToString(language));
    }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateTranscriptionResponse) ApiInvoker.deserialize(localVarResponse,  "", CreateTranscriptionResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Translates audio into English.
  * 
   * @param file The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
   * @param model 
   * @param prompt An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. 
   * @param responseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
   * @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
   * @return CreateTranslationResponse
  */
  public CreateTranslationResponse createTranslation (File file, CreateTranscriptionRequestModel model, String prompt, String responseFormat, BigDecimal temperature) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling createTranslation",
        new ApiException(400, "Missing the required parameter 'file' when calling createTranslation"));
    }
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling createTranslation",
        new ApiException(400, "Missing the required parameter 'model' when calling createTranslation"));
    }

    // create path and map variables
    String path = "/audio/translations";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      if (model != null) {
        localVarBuilder.addTextBody("model", ApiInvoker.parameterToString(model), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (prompt != null) {
        localVarBuilder.addTextBody("prompt", ApiInvoker.parameterToString(prompt), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (responseFormat != null) {
        localVarBuilder.addTextBody("response_format", ApiInvoker.parameterToString(responseFormat), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (temperature != null) {
        localVarBuilder.addTextBody("temperature", ApiInvoker.parameterToString(temperature), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("model", ApiInvoker.parameterToString(model));
      formParams.put("prompt", ApiInvoker.parameterToString(prompt));
      formParams.put("response_format", ApiInvoker.parameterToString(responseFormat));
      formParams.put("temperature", ApiInvoker.parameterToString(temperature));
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateTranslationResponse) ApiInvoker.deserialize(localVarResponse, "", CreateTranslationResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Translates audio into English.
   * 
   * @param file The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.    * @param model    * @param prompt An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.    * @param responseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.    * @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
  */
  public void createTranslation (File file, CreateTranscriptionRequestModel model, String prompt, String responseFormat, BigDecimal temperature, final Response.Listener<CreateTranslationResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling createTranslation",
        new ApiException(400, "Missing the required parameter 'file' when calling createTranslation"));
    }
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling createTranslation",
        new ApiException(400, "Missing the required parameter 'model' when calling createTranslation"));
    }

    // create path and map variables
    String path = "/audio/translations".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      
      if (model != null) {
        localVarBuilder.addTextBody("model", ApiInvoker.parameterToString(model), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (prompt != null) {
        localVarBuilder.addTextBody("prompt", ApiInvoker.parameterToString(prompt), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (responseFormat != null) {
        localVarBuilder.addTextBody("response_format", ApiInvoker.parameterToString(responseFormat), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (temperature != null) {
        localVarBuilder.addTextBody("temperature", ApiInvoker.parameterToString(temperature), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
formParams.put("model", ApiInvoker.parameterToString(model));
formParams.put("prompt", ApiInvoker.parameterToString(prompt));
formParams.put("response_format", ApiInvoker.parameterToString(responseFormat));
formParams.put("temperature", ApiInvoker.parameterToString(temperature));
    }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateTranslationResponse) ApiInvoker.deserialize(localVarResponse,  "", CreateTranslationResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete a file.
  * 
   * @param fileId The ID of the file to use for this request
   * @return DeleteFileResponse
  */
  public DeleteFileResponse deleteFile (String fileId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fileId' when calling deleteFile",
        new ApiException(400, "Missing the required parameter 'fileId' when calling deleteFile"));
    }

    // create path and map variables
    String path = "/files/{file_id}".replaceAll("\\{" + "file_id" + "\\}", apiInvoker.escapeString(fileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DeleteFileResponse) ApiInvoker.deserialize(localVarResponse, "", DeleteFileResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete a file.
   * 
   * @param fileId The ID of the file to use for this request
  */
  public void deleteFile (String fileId, final Response.Listener<DeleteFileResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fileId' when calling deleteFile",
        new ApiException(400, "Missing the required parameter 'fileId' when calling deleteFile"));
    }

    // create path and map variables
    String path = "/files/{file_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "file_id" + "\\}", apiInvoker.escapeString(fileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DeleteFileResponse) ApiInvoker.deserialize(localVarResponse,  "", DeleteFileResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete a fine-tuned model. You must have the Owner role in your organization.
  * 
   * @param model The model to delete
   * @return DeleteModelResponse
  */
  public DeleteModelResponse deleteModel (String model) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling deleteModel",
        new ApiException(400, "Missing the required parameter 'model' when calling deleteModel"));
    }

    // create path and map variables
    String path = "/models/{model}".replaceAll("\\{" + "model" + "\\}", apiInvoker.escapeString(model.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DeleteModelResponse) ApiInvoker.deserialize(localVarResponse, "", DeleteModelResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete a fine-tuned model. You must have the Owner role in your organization.
   * 
   * @param model The model to delete
  */
  public void deleteModel (String model, final Response.Listener<DeleteModelResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling deleteModel",
        new ApiException(400, "Missing the required parameter 'model' when calling deleteModel"));
    }

    // create path and map variables
    String path = "/models/{model}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "model" + "\\}", apiInvoker.escapeString(model.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DeleteModelResponse) ApiInvoker.deserialize(localVarResponse,  "", DeleteModelResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns the contents of the specified file
  * 
   * @param fileId The ID of the file to use for this request
   * @return String
  */
  public String downloadFile (String fileId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fileId' when calling downloadFile",
        new ApiException(400, "Missing the required parameter 'fileId' when calling downloadFile"));
    }

    // create path and map variables
    String path = "/files/{file_id}/content".replaceAll("\\{" + "file_id" + "\\}", apiInvoker.escapeString(fileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns the contents of the specified file
   * 
   * @param fileId The ID of the file to use for this request
  */
  public void downloadFile (String fileId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fileId' when calling downloadFile",
        new ApiException(400, "Missing the required parameter 'fileId' when calling downloadFile"));
    }

    // create path and map variables
    String path = "/files/{file_id}/content".replaceAll("\\{format\\}","json").replaceAll("\\{" + "file_id" + "\\}", apiInvoker.escapeString(fileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns a list of files that belong to the user&#39;s organization.
  * 
   * @return ListFilesResponse
  */
  public ListFilesResponse listFiles () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/files";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ListFilesResponse) ApiInvoker.deserialize(localVarResponse, "", ListFilesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns a list of files that belong to the user&#39;s organization.
   * 

  */
  public void listFiles (final Response.Listener<ListFilesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/files".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ListFilesResponse) ApiInvoker.deserialize(localVarResponse,  "", ListFilesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get fine-grained status updates for a fine-tune job. 
  * 
   * @param fineTuneId The ID of the fine-tune job to get events for. 
   * @param stream Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned. 
   * @return ListFineTuneEventsResponse
  */
  public ListFineTuneEventsResponse listFineTuneEvents (String fineTuneId, Boolean stream) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'fineTuneId' is set
    if (fineTuneId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fineTuneId' when calling listFineTuneEvents",
        new ApiException(400, "Missing the required parameter 'fineTuneId' when calling listFineTuneEvents"));
    }

    // create path and map variables
    String path = "/fine-tunes/{fine_tune_id}/events".replaceAll("\\{" + "fine_tune_id" + "\\}", apiInvoker.escapeString(fineTuneId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stream", stream));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ListFineTuneEventsResponse) ApiInvoker.deserialize(localVarResponse, "", ListFineTuneEventsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get fine-grained status updates for a fine-tune job. 
   * 
   * @param fineTuneId The ID of the fine-tune job to get events for.    * @param stream Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned. 
  */
  public void listFineTuneEvents (String fineTuneId, Boolean stream, final Response.Listener<ListFineTuneEventsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'fineTuneId' is set
    if (fineTuneId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fineTuneId' when calling listFineTuneEvents",
        new ApiException(400, "Missing the required parameter 'fineTuneId' when calling listFineTuneEvents"));
    }

    // create path and map variables
    String path = "/fine-tunes/{fine_tune_id}/events".replaceAll("\\{format\\}","json").replaceAll("\\{" + "fine_tune_id" + "\\}", apiInvoker.escapeString(fineTuneId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "stream", stream));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ListFineTuneEventsResponse) ApiInvoker.deserialize(localVarResponse,  "", ListFineTuneEventsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List your organization&#39;s fine-tuning jobs 
  * 
   * @return ListFineTunesResponse
  */
  public ListFineTunesResponse listFineTunes () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/fine-tunes";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ListFineTunesResponse) ApiInvoker.deserialize(localVarResponse, "", ListFineTunesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List your organization&#39;s fine-tuning jobs 
   * 

  */
  public void listFineTunes (final Response.Listener<ListFineTunesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/fine-tunes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ListFineTunesResponse) ApiInvoker.deserialize(localVarResponse,  "", ListFineTunesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Lists the currently available models, and provides basic information about each one such as the owner and availability.
  * 
   * @return ListModelsResponse
  */
  public ListModelsResponse listModels () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/models";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ListModelsResponse) ApiInvoker.deserialize(localVarResponse, "", ListModelsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Lists the currently available models, and provides basic information about each one such as the owner and availability.
   * 

  */
  public void listModels (final Response.Listener<ListModelsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/models".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ListModelsResponse) ApiInvoker.deserialize(localVarResponse,  "", ListModelsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns information about a specific file.
  * 
   * @param fileId The ID of the file to use for this request
   * @return OpenAIFile
  */
  public OpenAIFile retrieveFile (String fileId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fileId' when calling retrieveFile",
        new ApiException(400, "Missing the required parameter 'fileId' when calling retrieveFile"));
    }

    // create path and map variables
    String path = "/files/{file_id}".replaceAll("\\{" + "file_id" + "\\}", apiInvoker.escapeString(fileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OpenAIFile) ApiInvoker.deserialize(localVarResponse, "", OpenAIFile.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns information about a specific file.
   * 
   * @param fileId The ID of the file to use for this request
  */
  public void retrieveFile (String fileId, final Response.Listener<OpenAIFile> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fileId' when calling retrieveFile",
        new ApiException(400, "Missing the required parameter 'fileId' when calling retrieveFile"));
    }

    // create path and map variables
    String path = "/files/{file_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "file_id" + "\\}", apiInvoker.escapeString(fileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OpenAIFile) ApiInvoker.deserialize(localVarResponse,  "", OpenAIFile.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
  * 
   * @param fineTuneId The ID of the fine-tune job 
   * @return FineTune
  */
  public FineTune retrieveFineTune (String fineTuneId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'fineTuneId' is set
    if (fineTuneId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fineTuneId' when calling retrieveFineTune",
        new ApiException(400, "Missing the required parameter 'fineTuneId' when calling retrieveFineTune"));
    }

    // create path and map variables
    String path = "/fine-tunes/{fine_tune_id}".replaceAll("\\{" + "fine_tune_id" + "\\}", apiInvoker.escapeString(fineTuneId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (FineTune) ApiInvoker.deserialize(localVarResponse, "", FineTune.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
   * 
   * @param fineTuneId The ID of the fine-tune job 
  */
  public void retrieveFineTune (String fineTuneId, final Response.Listener<FineTune> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'fineTuneId' is set
    if (fineTuneId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fineTuneId' when calling retrieveFineTune",
        new ApiException(400, "Missing the required parameter 'fineTuneId' when calling retrieveFineTune"));
    }

    // create path and map variables
    String path = "/fine-tunes/{fine_tune_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "fine_tune_id" + "\\}", apiInvoker.escapeString(fineTuneId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((FineTune) ApiInvoker.deserialize(localVarResponse,  "", FineTune.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
  * 
   * @param model The ID of the model to use for this request
   * @return Model
  */
  public Model retrieveModel (String model) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling retrieveModel",
        new ApiException(400, "Missing the required parameter 'model' when calling retrieveModel"));
    }

    // create path and map variables
    String path = "/models/{model}".replaceAll("\\{" + "model" + "\\}", apiInvoker.escapeString(model.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Model) ApiInvoker.deserialize(localVarResponse, "", Model.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
   * 
   * @param model The ID of the model to use for this request
  */
  public void retrieveModel (String model, final Response.Listener<Model> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling retrieveModel",
        new ApiException(400, "Missing the required parameter 'model' when calling retrieveModel"));
    }

    // create path and map variables
    String path = "/models/{model}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "model" + "\\}", apiInvoker.escapeString(model.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Model) ApiInvoker.deserialize(localVarResponse,  "", Model.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
