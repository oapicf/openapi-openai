/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.*;
import org.openapitools.client.model.CreateFineTuningJobRequestHyperparameters;
import org.openapitools.client.model.CreateFineTuningJobRequestIntegrationsInner;
import org.openapitools.client.model.CreateFineTuningJobRequestModel;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class CreateFineTuningJobRequest {
  
  @SerializedName("model")
  private CreateFineTuningJobRequestModel model = null;
  @SerializedName("training_file")
  private String trainingFile = null;
  @SerializedName("hyperparameters")
  private CreateFineTuningJobRequestHyperparameters hyperparameters = null;
  @SerializedName("suffix")
  private String suffix = null;
  @SerializedName("validation_file")
  private String validationFile = null;
  @SerializedName("integrations")
  private List<CreateFineTuningJobRequestIntegrationsInner> integrations = null;
  @SerializedName("seed")
  private Integer seed = null;

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public CreateFineTuningJobRequestModel getModel() {
    return model;
  }
  public void setModel(CreateFineTuningJobRequestModel model) {
    this.model = model;
  }

  /**
   * The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
   **/
  @ApiModelProperty(required = true, value = "The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. ")
  public String getTrainingFile() {
    return trainingFile;
  }
  public void setTrainingFile(String trainingFile) {
    this.trainingFile = trainingFile;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public CreateFineTuningJobRequestHyperparameters getHyperparameters() {
    return hyperparameters;
  }
  public void setHyperparameters(CreateFineTuningJobRequestHyperparameters hyperparameters) {
    this.hyperparameters = hyperparameters;
  }

  /**
   * A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`. 
   **/
  @ApiModelProperty(value = "A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`. ")
  public String getSuffix() {
    return suffix;
  }
  public void setSuffix(String suffix) {
    this.suffix = suffix;
  }

  /**
   * The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
   **/
  @ApiModelProperty(value = "The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. ")
  public String getValidationFile() {
    return validationFile;
  }
  public void setValidationFile(String validationFile) {
    this.validationFile = validationFile;
  }

  /**
   * A list of integrations to enable for your fine-tuning job.
   **/
  @ApiModelProperty(value = "A list of integrations to enable for your fine-tuning job.")
  public List<CreateFineTuningJobRequestIntegrationsInner> getIntegrations() {
    return integrations;
  }
  public void setIntegrations(List<CreateFineTuningJobRequestIntegrationsInner> integrations) {
    this.integrations = integrations;
  }

  /**
   * The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases. If a seed is not specified, one will be generated for you. 
   * minimum: 0
   * maximum: 2147483647
   **/
  @ApiModelProperty(value = "The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases. If a seed is not specified, one will be generated for you. ")
  public Integer getSeed() {
    return seed;
  }
  public void setSeed(Integer seed) {
    this.seed = seed;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFineTuningJobRequest createFineTuningJobRequest = (CreateFineTuningJobRequest) o;
    return (this.model == null ? createFineTuningJobRequest.model == null : this.model.equals(createFineTuningJobRequest.model)) &&
        (this.trainingFile == null ? createFineTuningJobRequest.trainingFile == null : this.trainingFile.equals(createFineTuningJobRequest.trainingFile)) &&
        (this.hyperparameters == null ? createFineTuningJobRequest.hyperparameters == null : this.hyperparameters.equals(createFineTuningJobRequest.hyperparameters)) &&
        (this.suffix == null ? createFineTuningJobRequest.suffix == null : this.suffix.equals(createFineTuningJobRequest.suffix)) &&
        (this.validationFile == null ? createFineTuningJobRequest.validationFile == null : this.validationFile.equals(createFineTuningJobRequest.validationFile)) &&
        (this.integrations == null ? createFineTuningJobRequest.integrations == null : this.integrations.equals(createFineTuningJobRequest.integrations)) &&
        (this.seed == null ? createFineTuningJobRequest.seed == null : this.seed.equals(createFineTuningJobRequest.seed));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.model == null ? 0: this.model.hashCode());
    result = 31 * result + (this.trainingFile == null ? 0: this.trainingFile.hashCode());
    result = 31 * result + (this.hyperparameters == null ? 0: this.hyperparameters.hashCode());
    result = 31 * result + (this.suffix == null ? 0: this.suffix.hashCode());
    result = 31 * result + (this.validationFile == null ? 0: this.validationFile.hashCode());
    result = 31 * result + (this.integrations == null ? 0: this.integrations.hashCode());
    result = 31 * result + (this.seed == null ? 0: this.seed.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFineTuningJobRequest {\n");
    
    sb.append("  model: ").append(model).append("\n");
    sb.append("  trainingFile: ").append(trainingFile).append("\n");
    sb.append("  hyperparameters: ").append(hyperparameters).append("\n");
    sb.append("  suffix: ").append(suffix).append("\n");
    sb.append("  validationFile: ").append(validationFile).append("\n");
    sb.append("  integrations: ").append(integrations).append("\n");
    sb.append("  seed: ").append(seed).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
