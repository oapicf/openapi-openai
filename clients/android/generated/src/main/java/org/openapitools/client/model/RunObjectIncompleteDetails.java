/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Details on why the run is incomplete. Will be &#x60;null&#x60; if the run is not incomplete.
 **/
@ApiModel(description = "Details on why the run is incomplete. Will be `null` if the run is not incomplete.")
public class RunObjectIncompleteDetails {
  
  public enum ReasonEnum {
     max_completion_tokens,  max_prompt_tokens, 
  };
  @SerializedName("reason")
  private ReasonEnum reason = null;

  /**
   * The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
   **/
  @ApiModelProperty(value = "The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.")
  public ReasonEnum getReason() {
    return reason;
  }
  public void setReason(ReasonEnum reason) {
    this.reason = reason;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunObjectIncompleteDetails runObjectIncompleteDetails = (RunObjectIncompleteDetails) o;
    return (this.reason == null ? runObjectIncompleteDetails.reason == null : this.reason.equals(runObjectIncompleteDetails.reason));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.reason == null ? 0: this.reason.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunObjectIncompleteDetails {\n");
    
    sb.append("  reason: ").append(reason).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
