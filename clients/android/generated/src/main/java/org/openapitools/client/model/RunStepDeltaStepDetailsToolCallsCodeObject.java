/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Details of the Code Interpreter tool call the run step was involved in.
 **/
@ApiModel(description = "Details of the Code Interpreter tool call the run step was involved in.")
public class RunStepDeltaStepDetailsToolCallsCodeObject {
  
  @SerializedName("index")
  private Integer index = null;
  @SerializedName("id")
  private String id = null;
  public enum TypeEnum {
     code_interpreter, 
  };
  @SerializedName("type")
  private TypeEnum type = null;
  @SerializedName("code_interpreter")
  private RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter codeInterpreter = null;

  /**
   * The index of the tool call in the tool calls array.
   **/
  @ApiModelProperty(required = true, value = "The index of the tool call in the tool calls array.")
  public Integer getIndex() {
    return index;
  }
  public void setIndex(Integer index) {
    this.index = index;
  }

  /**
   * The ID of the tool call.
   **/
  @ApiModelProperty(value = "The ID of the tool call.")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }

  /**
   * The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
   **/
  @ApiModelProperty(required = true, value = "The type of tool call. This is always going to be `code_interpreter` for this type of tool call.")
  public TypeEnum getType() {
    return type;
  }
  public void setType(TypeEnum type) {
    this.type = type;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter getCodeInterpreter() {
    return codeInterpreter;
  }
  public void setCodeInterpreter(RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter codeInterpreter) {
    this.codeInterpreter = codeInterpreter;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunStepDeltaStepDetailsToolCallsCodeObject runStepDeltaStepDetailsToolCallsCodeObject = (RunStepDeltaStepDetailsToolCallsCodeObject) o;
    return (this.index == null ? runStepDeltaStepDetailsToolCallsCodeObject.index == null : this.index.equals(runStepDeltaStepDetailsToolCallsCodeObject.index)) &&
        (this.id == null ? runStepDeltaStepDetailsToolCallsCodeObject.id == null : this.id.equals(runStepDeltaStepDetailsToolCallsCodeObject.id)) &&
        (this.type == null ? runStepDeltaStepDetailsToolCallsCodeObject.type == null : this.type.equals(runStepDeltaStepDetailsToolCallsCodeObject.type)) &&
        (this.codeInterpreter == null ? runStepDeltaStepDetailsToolCallsCodeObject.codeInterpreter == null : this.codeInterpreter.equals(runStepDeltaStepDetailsToolCallsCodeObject.codeInterpreter));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.index == null ? 0: this.index.hashCode());
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    result = 31 * result + (this.codeInterpreter == null ? 0: this.codeInterpreter.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunStepDeltaStepDetailsToolCallsCodeObject {\n");
    
    sb.append("  index: ").append(index).append("\n");
    sb.append("  id: ").append(id).append("\n");
    sb.append("  type: ").append(type).append("\n");
    sb.append("  codeInterpreter: ").append(codeInterpreter).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
