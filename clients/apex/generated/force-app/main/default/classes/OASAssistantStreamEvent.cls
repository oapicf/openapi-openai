/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Represents an event emitted when streaming a Run.\n\nEach event in a server-sent events stream has an &#x60;event&#x60; and &#x60;data&#x60; property:\n\n&#x60;&#x60;&#x60;\nevent: thread.created\ndata: {&quot;id&quot;: &quot;thread_123&quot;, &quot;object&quot;: &quot;thread&quot;, ...}\n&#x60;&#x60;&#x60;\n\nWe emit events whenever a new object is created, transitions to a new state, or is being\nstreamed in parts (deltas). For example, we emit &#x60;thread.run.created&#x60; when a new run\nis created, &#x60;thread.run.completed&#x60; when a run completes, and so on. When an Assistant chooses\nto create a message during a run, we emit a &#x60;thread.message.created event&#x60;, a\n&#x60;thread.message.in_progress&#x60; event, many &#x60;thread.message.delta&#x60; events, and finally a\n&#x60;thread.message.completed&#x60; event.\n\nWe may add additional events over time, so we recommend handling unknown events gracefully\nin your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to\nintegrate the Assistants API with streaming.\n
 */
public class OASAssistantStreamEvent implements OASThreadStreamEvent, OASRunStreamEvent, OASRunStepStreamEvent, OASMessageStreamEvent, OASErrorEvent, OASDoneEvent {
    /**
     * Gets or Sets event
     */
    public enum EventEnum {
        DONE
    }

    /**
     * Get event
     * @return event
     */
    public EventEnum event { get; set; }

    /**
     * Gets or Sets data
     */
    public enum DataEnum {
        _DONE_
    }

    /**
     * Get data
     * @return data
     */
    public DataEnum data { get; set; }

    public static OASAssistantStreamEvent getExample() {
        OASAssistantStreamEvent assistantStreamEvent = new OASAssistantStreamEvent();
          assistantStreamEvent.event = EventEnum.DONE;
          assistantStreamEvent.data = DataEnum._DONE_;
        return assistantStreamEvent;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASAssistantStreamEvent) {           
            OASAssistantStreamEvent assistantStreamEvent = (OASAssistantStreamEvent) obj;
            return this.event == assistantStreamEvent.event
                && this.data == assistantStreamEvent.data;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (event == null ? 0 : System.hashCode(event));
        hashCode = (17 * hashCode) + (data == null ? 0 : System.hashCode(data));
        return hashCode;
    }
}

