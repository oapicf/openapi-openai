/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASAssistantsApi {
    OASClient client;

    public OASAssistantsApi(OASClient client) {
        this.client = client;
    }

    public OASAssistantsApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Cancels a run that is &#x60;in_progress&#x60;.
     * 
     * @param threadId The ID of the thread to which this run belongs. (required)
     * @param runId The ID of the run to cancel. (required)
     * @return OASRunObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASRunObject cancelRun(Map<String, Object> params) {
        client.assertNotNull(params.get('threadId'), 'threadId');
        client.assertNotNull(params.get('runId'), 'runId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASRunObject) client.invoke(
            'POST', '/threads/{thread_id}/runs/{run_id}/cancel', '',
            query, form,
            new Map<String, Object>{
                'thread_id' => (String) params.get('threadId'),
                'run_id' => (String) params.get('runId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKeyAuth' },
            OASRunObject.class
        );
    }
    /**
     * Create an assistant with a model and instructions.
     * 
     * @param oaSCreateAssistantRequest  (required)
     * @return OASAssistantObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASAssistantObject createAssistant(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSCreateAssistantRequest'), 'oaSCreateAssistantRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASAssistantObject) client.invoke(
            'POST', '/assistants',
            (OASCreateAssistantRequest) params.get('oaSCreateAssistantRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKeyAuth' },
            OASAssistantObject.class
        );
    }
    /**
     * Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
     * 
     * @param assistantId The ID of the assistant for which to create a File.\n (required)
     * @param oaSCreateAssistantFileRequest  (required)
     * @return OASAssistantFileObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASAssistantFileObject createAssistantFile(Map<String, Object> params) {
        client.assertNotNull(params.get('assistantId'), 'assistantId');
        client.assertNotNull(params.get('oaSCreateAssistantFileRequest'), 'oaSCreateAssistantFileRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASAssistantFileObject) client.invoke(
            'POST', '/assistants/{assistant_id}/files',
            (OASCreateAssistantFileRequest) params.get('oaSCreateAssistantFileRequest'),
            query, form,
            new Map<String, Object>{
                'assistant_id' => (String) params.get('assistantId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKeyAuth' },
            OASAssistantFileObject.class
        );
    }
    /**
     * Create a message.
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to create a message for. (required)
     * @param oaSCreateMessageRequest  (required)
     * @return OASMessageObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASMessageObject createMessage(Map<String, Object> params) {
        client.assertNotNull(params.get('threadId'), 'threadId');
        client.assertNotNull(params.get('oaSCreateMessageRequest'), 'oaSCreateMessageRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASMessageObject) client.invoke(
            'POST', '/threads/{thread_id}/messages',
            (OASCreateMessageRequest) params.get('oaSCreateMessageRequest'),
            query, form,
            new Map<String, Object>{
                'thread_id' => (String) params.get('threadId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKeyAuth' },
            OASMessageObject.class
        );
    }
    /**
     * Create a run.
     * 
     * @param threadId The ID of the thread to run. (required)
     * @param oaSCreateRunRequest  (required)
     * @return OASRunObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASRunObject createRun(Map<String, Object> params) {
        client.assertNotNull(params.get('threadId'), 'threadId');
        client.assertNotNull(params.get('oaSCreateRunRequest'), 'oaSCreateRunRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASRunObject) client.invoke(
            'POST', '/threads/{thread_id}/runs',
            (OASCreateRunRequest) params.get('oaSCreateRunRequest'),
            query, form,
            new Map<String, Object>{
                'thread_id' => (String) params.get('threadId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKeyAuth' },
            OASRunObject.class
        );
    }
    /**
     * Create a thread.
     * 
     * @param oaSCreateThreadRequest  (optional)
     * @return OASThreadObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASThreadObject createThread(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASThreadObject) client.invoke(
            'POST', '/threads',
            (OASCreateThreadRequest) params.get('oaSCreateThreadRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKeyAuth' },
            OASThreadObject.class
        );
    }
    /**
     * Create a thread and run it in one request.
     * 
     * @param oaSCreateThreadAndRunRequest  (required)
     * @return OASRunObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASRunObject createThreadAndRun(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSCreateThreadAndRunRequest'), 'oaSCreateThreadAndRunRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASRunObject) client.invoke(
            'POST', '/threads/runs',
            (OASCreateThreadAndRunRequest) params.get('oaSCreateThreadAndRunRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKeyAuth' },
            OASRunObject.class
        );
    }
    /**
     * Delete an assistant.
     * 
     * @param assistantId The ID of the assistant to delete. (required)
     * @return OASDeleteAssistantResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASDeleteAssistantResponse deleteAssistant(Map<String, Object> params) {
        client.assertNotNull(params.get('assistantId'), 'assistantId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASDeleteAssistantResponse) client.invoke(
            'DELETE', '/assistants/{assistant_id}', '',
            query, form,
            new Map<String, Object>{
                'assistant_id' => (String) params.get('assistantId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKeyAuth' },
            OASDeleteAssistantResponse.class
        );
    }
    /**
     * Delete an assistant file.
     * 
     * @param assistantId The ID of the assistant that the file belongs to. (required)
     * @param fileId The ID of the file to delete. (required)
     * @return OASDeleteAssistantFileResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASDeleteAssistantFileResponse deleteAssistantFile(Map<String, Object> params) {
        client.assertNotNull(params.get('assistantId'), 'assistantId');
        client.assertNotNull(params.get('fileId'), 'fileId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASDeleteAssistantFileResponse) client.invoke(
            'DELETE', '/assistants/{assistant_id}/files/{file_id}', '',
            query, form,
            new Map<String, Object>{
                'assistant_id' => (String) params.get('assistantId'),
                'file_id' => (String) params.get('fileId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKeyAuth' },
            OASDeleteAssistantFileResponse.class
        );
    }
    /**
     * Delete a thread.
     * 
     * @param threadId The ID of the thread to delete. (required)
     * @return OASDeleteThreadResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASDeleteThreadResponse deleteThread(Map<String, Object> params) {
        client.assertNotNull(params.get('threadId'), 'threadId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASDeleteThreadResponse) client.invoke(
            'DELETE', '/threads/{thread_id}', '',
            query, form,
            new Map<String, Object>{
                'thread_id' => (String) params.get('threadId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKeyAuth' },
            OASDeleteThreadResponse.class
        );
    }
    /**
     * Retrieves an assistant.
     * 
     * @param assistantId The ID of the assistant to retrieve. (required)
     * @return OASAssistantObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASAssistantObject getAssistant(Map<String, Object> params) {
        client.assertNotNull(params.get('assistantId'), 'assistantId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASAssistantObject) client.invoke(
            'GET', '/assistants/{assistant_id}', '',
            query, form,
            new Map<String, Object>{
                'assistant_id' => (String) params.get('assistantId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKeyAuth' },
            OASAssistantObject.class
        );
    }
    /**
     * Retrieves an AssistantFile.
     * 
     * @param assistantId The ID of the assistant who the file belongs to. (required)
     * @param fileId The ID of the file we\&#39;re getting. (required)
     * @return OASAssistantFileObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASAssistantFileObject getAssistantFile(Map<String, Object> params) {
        client.assertNotNull(params.get('assistantId'), 'assistantId');
        client.assertNotNull(params.get('fileId'), 'fileId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASAssistantFileObject) client.invoke(
            'GET', '/assistants/{assistant_id}/files/{file_id}', '',
            query, form,
            new Map<String, Object>{
                'assistant_id' => (String) params.get('assistantId'),
                'file_id' => (String) params.get('fileId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKeyAuth' },
            OASAssistantFileObject.class
        );
    }
    /**
     * Retrieve a message.
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this message belongs. (required)
     * @param messageId The ID of the message to retrieve. (required)
     * @return OASMessageObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASMessageObject getMessage(Map<String, Object> params) {
        client.assertNotNull(params.get('threadId'), 'threadId');
        client.assertNotNull(params.get('messageId'), 'messageId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASMessageObject) client.invoke(
            'GET', '/threads/{thread_id}/messages/{message_id}', '',
            query, form,
            new Map<String, Object>{
                'thread_id' => (String) params.get('threadId'),
                'message_id' => (String) params.get('messageId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKeyAuth' },
            OASMessageObject.class
        );
    }
    /**
     * Retrieves a message file.
     * 
     * @param threadId The ID of the thread to which the message and File belong. (required)
     * @param messageId The ID of the message the file belongs to. (required)
     * @param fileId The ID of the file being retrieved. (required)
     * @return OASMessageFileObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASMessageFileObject getMessageFile(Map<String, Object> params) {
        client.assertNotNull(params.get('threadId'), 'threadId');
        client.assertNotNull(params.get('messageId'), 'messageId');
        client.assertNotNull(params.get('fileId'), 'fileId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASMessageFileObject) client.invoke(
            'GET', '/threads/{thread_id}/messages/{message_id}/files/{file_id}', '',
            query, form,
            new Map<String, Object>{
                'thread_id' => (String) params.get('threadId'),
                'message_id' => (String) params.get('messageId'),
                'file_id' => (String) params.get('fileId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKeyAuth' },
            OASMessageFileObject.class
        );
    }
    /**
     * Retrieves a run.
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run. (required)
     * @param runId The ID of the run to retrieve. (required)
     * @return OASRunObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASRunObject getRun(Map<String, Object> params) {
        client.assertNotNull(params.get('threadId'), 'threadId');
        client.assertNotNull(params.get('runId'), 'runId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASRunObject) client.invoke(
            'GET', '/threads/{thread_id}/runs/{run_id}', '',
            query, form,
            new Map<String, Object>{
                'thread_id' => (String) params.get('threadId'),
                'run_id' => (String) params.get('runId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKeyAuth' },
            OASRunObject.class
        );
    }
    /**
     * Retrieves a run step.
     * 
     * @param threadId The ID of the thread to which the run and run step belongs. (required)
     * @param runId The ID of the run to which the run step belongs. (required)
     * @param stepId The ID of the run step to retrieve. (required)
     * @return OASRunStepObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASRunStepObject getRunStep(Map<String, Object> params) {
        client.assertNotNull(params.get('threadId'), 'threadId');
        client.assertNotNull(params.get('runId'), 'runId');
        client.assertNotNull(params.get('stepId'), 'stepId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASRunStepObject) client.invoke(
            'GET', '/threads/{thread_id}/runs/{run_id}/steps/{step_id}', '',
            query, form,
            new Map<String, Object>{
                'thread_id' => (String) params.get('threadId'),
                'run_id' => (String) params.get('runId'),
                'step_id' => (String) params.get('stepId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKeyAuth' },
            OASRunStepObject.class
        );
    }
    /**
     * Retrieves a thread.
     * 
     * @param threadId The ID of the thread to retrieve. (required)
     * @return OASThreadObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASThreadObject getThread(Map<String, Object> params) {
        client.assertNotNull(params.get('threadId'), 'threadId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASThreadObject) client.invoke(
            'GET', '/threads/{thread_id}', '',
            query, form,
            new Map<String, Object>{
                'thread_id' => (String) params.get('threadId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKeyAuth' },
            OASThreadObject.class
        );
    }
    /**
     * Returns a list of assistant files.
     * 
     * @param assistantId The ID of the assistant the file belongs to. (required)
     * @param r_limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.\n (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.\n (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.\n (optional)
     * @return OASListAssistantFilesResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASListAssistantFilesResponse listAssistantFiles(Map<String, Object> params) {
        client.assertNotNull(params.get('assistantId'), 'assistantId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));
        query.addAll(client.makeParam('order', (String) params.get('order')));
        query.addAll(client.makeParam('after', (String) params.get('after')));
        query.addAll(client.makeParam('before', (String) params.get('before')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASListAssistantFilesResponse) client.invoke(
            'GET', '/assistants/{assistant_id}/files', '',
            query, form,
            new Map<String, Object>{
                'assistant_id' => (String) params.get('assistantId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKeyAuth' },
            OASListAssistantFilesResponse.class
        );
    }
    /**
     * Returns a list of assistants.
     * 
     * @param r_limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.\n (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.\n (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.\n (optional)
     * @return OASListAssistantsResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASListAssistantsResponse listAssistants(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));
        query.addAll(client.makeParam('order', (String) params.get('order')));
        query.addAll(client.makeParam('after', (String) params.get('after')));
        query.addAll(client.makeParam('before', (String) params.get('before')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASListAssistantsResponse) client.invoke(
            'GET', '/assistants', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKeyAuth' },
            OASListAssistantsResponse.class
        );
    }
    /**
     * Returns a list of message files.
     * 
     * @param threadId The ID of the thread that the message and files belong to. (required)
     * @param messageId The ID of the message that the files belongs to. (required)
     * @param r_limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.\n (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.\n (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.\n (optional)
     * @return OASListMessageFilesResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASListMessageFilesResponse listMessageFiles(Map<String, Object> params) {
        client.assertNotNull(params.get('threadId'), 'threadId');
        client.assertNotNull(params.get('messageId'), 'messageId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));
        query.addAll(client.makeParam('order', (String) params.get('order')));
        query.addAll(client.makeParam('after', (String) params.get('after')));
        query.addAll(client.makeParam('before', (String) params.get('before')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASListMessageFilesResponse) client.invoke(
            'GET', '/threads/{thread_id}/messages/{message_id}/files', '',
            query, form,
            new Map<String, Object>{
                'thread_id' => (String) params.get('threadId'),
                'message_id' => (String) params.get('messageId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKeyAuth' },
            OASListMessageFilesResponse.class
        );
    }
    /**
     * Returns a list of messages for a given thread.
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) the messages belong to. (required)
     * @param r_limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.\n (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.\n (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.\n (optional)
     * @param runId Filter messages by the run ID that generated them.\n (optional)
     * @return OASListMessagesResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASListMessagesResponse listMessages(Map<String, Object> params) {
        client.assertNotNull(params.get('threadId'), 'threadId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));
        query.addAll(client.makeParam('order', (String) params.get('order')));
        query.addAll(client.makeParam('after', (String) params.get('after')));
        query.addAll(client.makeParam('before', (String) params.get('before')));
        query.addAll(client.makeParam('run_id', (String) params.get('runId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASListMessagesResponse) client.invoke(
            'GET', '/threads/{thread_id}/messages', '',
            query, form,
            new Map<String, Object>{
                'thread_id' => (String) params.get('threadId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKeyAuth' },
            OASListMessagesResponse.class
        );
    }
    /**
     * Returns a list of run steps belonging to a run.
     * 
     * @param threadId The ID of the thread the run and run steps belong to. (required)
     * @param runId The ID of the run the run steps belong to. (required)
     * @param r_limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.\n (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.\n (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.\n (optional)
     * @return OASListRunStepsResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASListRunStepsResponse listRunSteps(Map<String, Object> params) {
        client.assertNotNull(params.get('threadId'), 'threadId');
        client.assertNotNull(params.get('runId'), 'runId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));
        query.addAll(client.makeParam('order', (String) params.get('order')));
        query.addAll(client.makeParam('after', (String) params.get('after')));
        query.addAll(client.makeParam('before', (String) params.get('before')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASListRunStepsResponse) client.invoke(
            'GET', '/threads/{thread_id}/runs/{run_id}/steps', '',
            query, form,
            new Map<String, Object>{
                'thread_id' => (String) params.get('threadId'),
                'run_id' => (String) params.get('runId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKeyAuth' },
            OASListRunStepsResponse.class
        );
    }
    /**
     * Returns a list of runs belonging to a thread.
     * 
     * @param threadId The ID of the thread the run belongs to. (required)
     * @param r_limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.\n (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.\n (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.\n (optional)
     * @return OASListRunsResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASListRunsResponse listRuns(Map<String, Object> params) {
        client.assertNotNull(params.get('threadId'), 'threadId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));
        query.addAll(client.makeParam('order', (String) params.get('order')));
        query.addAll(client.makeParam('after', (String) params.get('after')));
        query.addAll(client.makeParam('before', (String) params.get('before')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASListRunsResponse) client.invoke(
            'GET', '/threads/{thread_id}/runs', '',
            query, form,
            new Map<String, Object>{
                'thread_id' => (String) params.get('threadId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKeyAuth' },
            OASListRunsResponse.class
        );
    }
    /**
     * Modifies an assistant.
     * 
     * @param assistantId The ID of the assistant to modify. (required)
     * @param oaSModifyAssistantRequest  (required)
     * @return OASAssistantObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASAssistantObject modifyAssistant(Map<String, Object> params) {
        client.assertNotNull(params.get('assistantId'), 'assistantId');
        client.assertNotNull(params.get('oaSModifyAssistantRequest'), 'oaSModifyAssistantRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASAssistantObject) client.invoke(
            'POST', '/assistants/{assistant_id}',
            (OASModifyAssistantRequest) params.get('oaSModifyAssistantRequest'),
            query, form,
            new Map<String, Object>{
                'assistant_id' => (String) params.get('assistantId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKeyAuth' },
            OASAssistantObject.class
        );
    }
    /**
     * Modifies a message.
     * 
     * @param threadId The ID of the thread to which this message belongs. (required)
     * @param messageId The ID of the message to modify. (required)
     * @param oaSModifyMessageRequest  (required)
     * @return OASMessageObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASMessageObject modifyMessage(Map<String, Object> params) {
        client.assertNotNull(params.get('threadId'), 'threadId');
        client.assertNotNull(params.get('messageId'), 'messageId');
        client.assertNotNull(params.get('oaSModifyMessageRequest'), 'oaSModifyMessageRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASMessageObject) client.invoke(
            'POST', '/threads/{thread_id}/messages/{message_id}',
            (OASModifyMessageRequest) params.get('oaSModifyMessageRequest'),
            query, form,
            new Map<String, Object>{
                'thread_id' => (String) params.get('threadId'),
                'message_id' => (String) params.get('messageId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKeyAuth' },
            OASMessageObject.class
        );
    }
    /**
     * Modifies a run.
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run. (required)
     * @param runId The ID of the run to modify. (required)
     * @param oaSModifyRunRequest  (required)
     * @return OASRunObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASRunObject modifyRun(Map<String, Object> params) {
        client.assertNotNull(params.get('threadId'), 'threadId');
        client.assertNotNull(params.get('runId'), 'runId');
        client.assertNotNull(params.get('oaSModifyRunRequest'), 'oaSModifyRunRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASRunObject) client.invoke(
            'POST', '/threads/{thread_id}/runs/{run_id}',
            (OASModifyRunRequest) params.get('oaSModifyRunRequest'),
            query, form,
            new Map<String, Object>{
                'thread_id' => (String) params.get('threadId'),
                'run_id' => (String) params.get('runId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKeyAuth' },
            OASRunObject.class
        );
    }
    /**
     * Modifies a thread.
     * 
     * @param threadId The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified. (required)
     * @param oaSModifyThreadRequest  (required)
     * @return OASThreadObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASThreadObject modifyThread(Map<String, Object> params) {
        client.assertNotNull(params.get('threadId'), 'threadId');
        client.assertNotNull(params.get('oaSModifyThreadRequest'), 'oaSModifyThreadRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASThreadObject) client.invoke(
            'POST', '/threads/{thread_id}',
            (OASModifyThreadRequest) params.get('oaSModifyThreadRequest'),
            query, form,
            new Map<String, Object>{
                'thread_id' => (String) params.get('threadId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKeyAuth' },
            OASThreadObject.class
        );
    }
    /**
     * When a run has the &#x60;status: &quot;requires_action&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they\&#39;re all completed. All outputs must be submitted in a single request.\n
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this run belongs. (required)
     * @param runId The ID of the run that requires the tool output submission. (required)
     * @param oaSSubmitToolOutputsRunRequest  (required)
     * @return OASRunObject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASRunObject submitToolOuputsToRun(Map<String, Object> params) {
        client.assertNotNull(params.get('threadId'), 'threadId');
        client.assertNotNull(params.get('runId'), 'runId');
        client.assertNotNull(params.get('oaSSubmitToolOutputsRunRequest'), 'oaSSubmitToolOutputsRunRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASRunObject) client.invoke(
            'POST', '/threads/{thread_id}/runs/{run_id}/submit_tool_outputs',
            (OASSubmitToolOutputsRunRequest) params.get('oaSSubmitToolOutputsRunRequest'),
            query, form,
            new Map<String, Object>{
                'thread_id' => (String) params.get('threadId'),
                'run_id' => (String) params.get('runId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKeyAuth' },
            OASRunObject.class
        );
    }
}
