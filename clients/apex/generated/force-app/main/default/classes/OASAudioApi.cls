/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASAudioApi {
    OASClient client;

    public OASAudioApi(OASClient client) {
        this.client = client;
    }

    public OASAudioApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Generates audio from the input text.
     * 
     * @param oaSCreateSpeechRequest  (required)
     * @return Blob
     * @throws OAS.ApiException if fails to make API call
     */
    public Blob createSpeech(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSCreateSpeechRequest'), 'oaSCreateSpeechRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (Blob) client.invoke(
            'POST', '/audio/speech',
            (OASCreateSpeechRequest) params.get('oaSCreateSpeechRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/octet-stream' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKeyAuth' },
            Blob.class
        );
    }
    /**
     * Transcribes audio into the input language.
     * 
     * @param file The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n (required)
     * @param model  (required)
     * @param language The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.\n (optional)
     * @param prompt An optional text to guide the model\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.\n (optional)
     * @param responseFormat The format of the transcript output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;.\n (optional, default to json)
     * @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n (optional, default to 0)
     * @param timestampGranularities The timestamp granularities to populate for this transcription. &#x60;response_format&#x60; must be set &#x60;verbose_json&#x60; to use timestamp granularities. Either or both of these options are supported: &#x60;word&#x60;, or &#x60;segment&#x60;. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.\n (optional)
     * @return OASCreateTranscription200Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASCreateTranscription200Response createTranscription(Map<String, Object> params) {
        client.assertNotNull(params.get('file'), 'file');
        client.assertNotNull(params.get('model'), 'model');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('file', (Blob) params.get('file')));
        form.addAll(client.makeParam('model', (OASCreateTranscriptionRequestModel) params.get('model')));
        form.addAll(client.makeParam('language', (String) params.get('language')));
        form.addAll(client.makeParam('prompt', (String) params.get('prompt')));
        form.addAll(client.makeParam('response_format', (String) params.get('responseFormat')));
        form.addAll(client.makeParam('temperature', (Double) params.get('temperature')));
        form.addAll(client.makeParam('timestamp_granularities[]', (List<String>) params.get('timestampGranularities'), 'csv'));

        return (OASCreateTranscription200Response) client.invoke(
            'POST', '/audio/transcriptions', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'multipart/form-data' },
            new List<String> { 'ApiKeyAuth' },
            OASCreateTranscription200Response.class
        );
    }
    /**
     * Translates audio into English.
     * 
     * @param file The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n (required)
     * @param model  (required)
     * @param prompt An optional text to guide the model\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.\n (optional)
     * @param responseFormat The format of the transcript output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;.\n (optional, default to 'json')
     * @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n (optional, default to 0)
     * @return OASCreateTranslation200Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASCreateTranslation200Response createTranslation(Map<String, Object> params) {
        client.assertNotNull(params.get('file'), 'file');
        client.assertNotNull(params.get('model'), 'model');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('file', (Blob) params.get('file')));
        form.addAll(client.makeParam('model', (OASCreateTranscriptionRequestModel) params.get('model')));
        form.addAll(client.makeParam('prompt', (String) params.get('prompt')));
        form.addAll(client.makeParam('response_format', (String) params.get('responseFormat')));
        form.addAll(client.makeParam('temperature', (Double) params.get('temperature')));

        return (OASCreateTranslation200Response) client.invoke(
            'POST', '/audio/translations', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'multipart/form-data' },
            new List<String> { 'ApiKeyAuth' },
            OASCreateTranslation200Response.class
        );
    }
}
