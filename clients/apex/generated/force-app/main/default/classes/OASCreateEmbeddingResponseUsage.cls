/*
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASCreateEmbeddingResponseUsage
 */
public class OASCreateEmbeddingResponseUsage implements OAS.MappedProperties {
    /**
     * Get promptTokens
     * @return promptTokens
     */
    public Integer promptTokens { get; set; }

    /**
     * Get totalTokens
     * @return totalTokens
     */
    public Integer totalTokens { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'prompt_tokens' => 'promptTokens',
        'total_tokens' => 'totalTokens'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'prompt_tokens' => 'promptTokens',
        'total_tokens' => 'totalTokens'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASCreateEmbeddingResponseUsage getExample() {
        OASCreateEmbeddingResponseUsage createEmbeddingResponseUsage = new OASCreateEmbeddingResponseUsage();
          createEmbeddingResponseUsage.promptTokens = 0;
          createEmbeddingResponseUsage.totalTokens = 0;
        return createEmbeddingResponseUsage;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASCreateEmbeddingResponseUsage) {           
            OASCreateEmbeddingResponseUsage createEmbeddingResponseUsage = (OASCreateEmbeddingResponseUsage) obj;
            return this.promptTokens == createEmbeddingResponseUsage.promptTokens
                && this.totalTokens == createEmbeddingResponseUsage.totalTokens;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (promptTokens == null ? 0 : System.hashCode(promptTokens));
        hashCode = (17 * hashCode) + (totalTokens == null ? 0 : System.hashCode(totalTokens));
        return hashCode;
    }
}

