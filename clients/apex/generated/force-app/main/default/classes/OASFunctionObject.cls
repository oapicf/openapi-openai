/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASFunctionObject
 */
public class OASFunctionObject {
    /**
     * A description of what the function does, used by the model to choose when and how to call the function.
     * @return description
     */
    public String description { get; set; }

    /**
     * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
     * @return name
     */
    public String name { get; set; }

    /**
     * The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.
     * @return parameters
     */
    public Map<String, oas_any_type_not_mapped> parameters { get; set; }

    public OASFunctionObject() {
        parameters = new Map<String, oas_any_type_not_mapped>();
    }

    public static OASFunctionObject getExample() {
        OASFunctionObject functionObject = new OASFunctionObject();
          functionObject.description = '';
          functionObject.name = '';
          functionObject.parameters = new Map<String, oas_any_type_not_mapped>{'key'=>oas_any_type_not_mapped.getExample()};
        return functionObject;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASFunctionObject) {           
            OASFunctionObject functionObject = (OASFunctionObject) obj;
            return this.description == functionObject.description
                && this.name == functionObject.name
                && this.parameters == functionObject.parameters;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (description == null ? 0 : System.hashCode(description));
        hashCode = (17 * hashCode) + (name == null ? 0 : System.hashCode(name));
        hashCode = (17 * hashCode) + (parameters == null ? 0 : System.hashCode(parameters));
        return hashCode;
    }
}

