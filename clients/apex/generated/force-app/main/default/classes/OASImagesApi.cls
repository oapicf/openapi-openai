/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASImagesApi {
    OASClient client;

    public OASImagesApi(OASClient client) {
        this.client = client;
    }

    public OASImagesApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Creates an image given a prompt.
     * 
     * @param oaSCreateImageRequest  (required)
     * @return OASImagesResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASImagesResponse createImage(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSCreateImageRequest'), 'oaSCreateImageRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASImagesResponse) client.invoke(
            'POST', '/images/generations',
            (OASCreateImageRequest) params.get('oaSCreateImageRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKeyAuth' },
            OASImagesResponse.class
        );
    }
    /**
     * Creates an edited or extended image given an original image and a prompt.
     * 
     * @param image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask. (required)
     * @param prompt A text description of the desired image(s). The maximum length is 1000 characters. (required)
     * @param mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;. (optional)
     * @param model  (optional)
     * @param n The number of images to generate. Must be between 1 and 10. (optional, default to 1)
     * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to 1024x1024)
     * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated. (optional, default to url)
     * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n (optional)
     * @return OASImagesResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASImagesResponse createImageEdit(Map<String, Object> params) {
        client.assertNotNull(params.get('image'), 'image');
        client.assertNotNull(params.get('prompt'), 'prompt');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('image', (Blob) params.get('image')));
        form.addAll(client.makeParam('prompt', (String) params.get('prompt')));
        form.addAll(client.makeParam('mask', (Blob) params.get('mask')));
        form.addAll(client.makeParam('model', (OASCreateImageEditRequestModel) params.get('model')));
        form.addAll(client.makeParam('n', (Integer) params.get('n')));
        form.addAll(client.makeParam('size', (String) params.get('size')));
        form.addAll(client.makeParam('response_format', (String) params.get('responseFormat')));
        form.addAll(client.makeParam('user', (String) params.get('user')));

        return (OASImagesResponse) client.invoke(
            'POST', '/images/edits', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'multipart/form-data' },
            new List<String> { 'ApiKeyAuth' },
            OASImagesResponse.class
        );
    }
    /**
     * Creates a variation of a given image.
     * 
     * @param image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square. (required)
     * @param model  (optional)
     * @param n The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported. (optional, default to 1)
     * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated. (optional, default to url)
     * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to 1024x1024)
     * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n (optional)
     * @return OASImagesResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASImagesResponse createImageVariation(Map<String, Object> params) {
        client.assertNotNull(params.get('image'), 'image');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('image', (Blob) params.get('image')));
        form.addAll(client.makeParam('model', (OASCreateImageEditRequestModel) params.get('model')));
        form.addAll(client.makeParam('n', (Integer) params.get('n')));
        form.addAll(client.makeParam('response_format', (String) params.get('responseFormat')));
        form.addAll(client.makeParam('size', (String) params.get('size')));
        form.addAll(client.makeParam('user', (String) params.get('user')));

        return (OASImagesResponse) client.invoke(
            'POST', '/images/variations', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'multipart/form-data' },
            new List<String> { 'ApiKeyAuth' },
            OASImagesResponse.class
        );
    }
}
