/*
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASOpenAIApi {
    OASClient client;

    public OASOpenAIApi(OASClient client) {
        this.client = client;
    }

    public OASOpenAIApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Immediately cancel a fine-tune job.\n
     * 
     * @param fineTuneId The ID of the fine-tune job to cancel\n (required)
     * @return OASFineTune
     * @throws OAS.ApiException if fails to make API call
     */
    public OASFineTune cancelFineTune(Map<String, Object> params) {
        client.assertNotNull(params.get('fineTuneId'), 'fineTuneId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASFineTune) client.invoke(
            'POST', '/fine-tunes/{fine_tune_id}/cancel', '',
            query, form,
            new Map<String, Object>{
                'fine_tune_id' => (String) params.get('fineTuneId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASFineTune.class
        );
    }
    /**
     * Creates a model response for the given chat conversation.
     * 
     * @param oaSCreateChatCompletionRequest  (required)
     * @return OASCreateChatCompletionResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASCreateChatCompletionResponse createChatCompletion(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSCreateChatCompletionRequest'), 'oaSCreateChatCompletionRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASCreateChatCompletionResponse) client.invoke(
            'POST', '/chat/completions',
            (OASCreateChatCompletionRequest) params.get('oaSCreateChatCompletionRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASCreateChatCompletionResponse.class
        );
    }
    /**
     * Creates a completion for the provided prompt and parameters.
     * 
     * @param oaSCreateCompletionRequest  (required)
     * @return OASCreateCompletionResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASCreateCompletionResponse createCompletion(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSCreateCompletionRequest'), 'oaSCreateCompletionRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASCreateCompletionResponse) client.invoke(
            'POST', '/completions',
            (OASCreateCompletionRequest) params.get('oaSCreateCompletionRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASCreateCompletionResponse.class
        );
    }
    /**
     * Creates a new edit for the provided input, instruction, and parameters.
     * 
     * @param oaSCreateEditRequest  (required)
     * @return OASCreateEditResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASCreateEditResponse createEdit(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSCreateEditRequest'), 'oaSCreateEditRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASCreateEditResponse) client.invoke(
            'POST', '/edits',
            (OASCreateEditRequest) params.get('oaSCreateEditRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASCreateEditResponse.class
        );
    }
    /**
     * Creates an embedding vector representing the input text.
     * 
     * @param oaSCreateEmbeddingRequest  (required)
     * @return OASCreateEmbeddingResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASCreateEmbeddingResponse createEmbedding(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSCreateEmbeddingRequest'), 'oaSCreateEmbeddingRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASCreateEmbeddingResponse) client.invoke(
            'POST', '/embeddings',
            (OASCreateEmbeddingRequest) params.get('oaSCreateEmbeddingRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASCreateEmbeddingResponse.class
        );
    }
    /**
     * Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n
     * 
     * @param file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.\n\nIf the &#x60;purpose&#x60; is set to &quot;fine-tune&quot;, each line is a JSON record with &quot;prompt&quot; and &quot;completion&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n (required)
     * @param purpose The intended purpose of the uploaded documents.\n\nUse &quot;fine-tune&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n (required)
     * @return OASOpenAIFile
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOpenAIFile createFile(Map<String, Object> params) {
        client.assertNotNull(params.get('file'), 'file');
        client.assertNotNull(params.get('purpose'), 'purpose');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('file', (Blob) params.get('file')));
        form.addAll(client.makeParam('purpose', (String) params.get('purpose')));

        return (OASOpenAIFile) client.invoke(
            'POST', '/files', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'multipart/form-data' },
            new List<String>(),
            OASOpenAIFile.class
        );
    }
    /**
     * Creates a job that fine-tunes a specified model from a given dataset.\n\nResponse includes details of the enqueued job including job status and the name of the fine-tuned models once complete.\n\n[Learn more about Fine-tuning](/docs/guides/fine-tuning)\n
     * 
     * @param oaSCreateFineTuneRequest  (required)
     * @return OASFineTune
     * @throws OAS.ApiException if fails to make API call
     */
    public OASFineTune createFineTune(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSCreateFineTuneRequest'), 'oaSCreateFineTuneRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASFineTune) client.invoke(
            'POST', '/fine-tunes',
            (OASCreateFineTuneRequest) params.get('oaSCreateFineTuneRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASFineTune.class
        );
    }
    /**
     * Creates an image given a prompt.
     * 
     * @param oaSCreateImageRequest  (required)
     * @return OASImagesResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASImagesResponse createImage(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSCreateImageRequest'), 'oaSCreateImageRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASImagesResponse) client.invoke(
            'POST', '/images/generations',
            (OASCreateImageRequest) params.get('oaSCreateImageRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASImagesResponse.class
        );
    }
    /**
     * Creates an edited or extended image given an original image and a prompt.
     * 
     * @param image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask. (required)
     * @param prompt A text description of the desired image(s). The maximum length is 1000 characters. (required)
     * @param mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;. (optional)
     * @param n The number of images to generate. Must be between 1 and 10. (optional, default to 1)
     * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to 1024x1024)
     * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. (optional, default to url)
     * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n (optional)
     * @return OASImagesResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASImagesResponse createImageEdit(Map<String, Object> params) {
        client.assertNotNull(params.get('image'), 'image');
        client.assertNotNull(params.get('prompt'), 'prompt');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('image', (Blob) params.get('image')));
        form.addAll(client.makeParam('mask', (Blob) params.get('mask')));
        form.addAll(client.makeParam('prompt', (String) params.get('prompt')));
        form.addAll(client.makeParam('n', (Integer) params.get('n')));
        form.addAll(client.makeParam('size', (String) params.get('size')));
        form.addAll(client.makeParam('response_format', (String) params.get('responseFormat')));
        form.addAll(client.makeParam('user', (String) params.get('user')));

        return (OASImagesResponse) client.invoke(
            'POST', '/images/edits', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'multipart/form-data' },
            new List<String>(),
            OASImagesResponse.class
        );
    }
    /**
     * Creates a variation of a given image.
     * 
     * @param image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square. (required)
     * @param n The number of images to generate. Must be between 1 and 10. (optional, default to 1)
     * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to 1024x1024)
     * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. (optional, default to url)
     * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n (optional)
     * @return OASImagesResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASImagesResponse createImageVariation(Map<String, Object> params) {
        client.assertNotNull(params.get('image'), 'image');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('image', (Blob) params.get('image')));
        form.addAll(client.makeParam('n', (Integer) params.get('n')));
        form.addAll(client.makeParam('size', (String) params.get('size')));
        form.addAll(client.makeParam('response_format', (String) params.get('responseFormat')));
        form.addAll(client.makeParam('user', (String) params.get('user')));

        return (OASImagesResponse) client.invoke(
            'POST', '/images/variations', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'multipart/form-data' },
            new List<String>(),
            OASImagesResponse.class
        );
    }
    /**
     * Classifies if text violates OpenAI\&#39;s Content Policy
     * 
     * @param oaSCreateModerationRequest  (required)
     * @return OASCreateModerationResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASCreateModerationResponse createModeration(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSCreateModerationRequest'), 'oaSCreateModerationRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASCreateModerationResponse) client.invoke(
            'POST', '/moderations',
            (OASCreateModerationRequest) params.get('oaSCreateModerationRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASCreateModerationResponse.class
        );
    }
    /**
     * Transcribes audio into the input language.
     * 
     * @param file The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.\n (required)
     * @param model  (required)
     * @param prompt An optional text to guide the model\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.\n (optional)
     * @param responseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.\n (optional, default to 'json')
     * @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n (optional, default to 0)
     * @param language The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.\n (optional)
     * @return OASCreateTranscriptionResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASCreateTranscriptionResponse createTranscription(Map<String, Object> params) {
        client.assertNotNull(params.get('file'), 'file');
        client.assertNotNull(params.get('model'), 'model');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('file', (Blob) params.get('file')));
        form.addAll(client.makeParam('model', (OASCreateTranscriptionRequestModel) params.get('model')));
        form.addAll(client.makeParam('prompt', (String) params.get('prompt')));
        form.addAll(client.makeParam('response_format', (String) params.get('responseFormat')));
        form.addAll(client.makeParam('temperature', (Double) params.get('temperature')));
        form.addAll(client.makeParam('language', (String) params.get('language')));

        return (OASCreateTranscriptionResponse) client.invoke(
            'POST', '/audio/transcriptions', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'multipart/form-data' },
            new List<String>(),
            OASCreateTranscriptionResponse.class
        );
    }
    /**
     * Translates audio into English.
     * 
     * @param file The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.\n (required)
     * @param model  (required)
     * @param prompt An optional text to guide the model\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.\n (optional)
     * @param responseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.\n (optional, default to 'json')
     * @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n (optional, default to 0)
     * @return OASCreateTranslationResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASCreateTranslationResponse createTranslation(Map<String, Object> params) {
        client.assertNotNull(params.get('file'), 'file');
        client.assertNotNull(params.get('model'), 'model');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('file', (Blob) params.get('file')));
        form.addAll(client.makeParam('model', (OASCreateTranscriptionRequestModel) params.get('model')));
        form.addAll(client.makeParam('prompt', (String) params.get('prompt')));
        form.addAll(client.makeParam('response_format', (String) params.get('responseFormat')));
        form.addAll(client.makeParam('temperature', (Double) params.get('temperature')));

        return (OASCreateTranslationResponse) client.invoke(
            'POST', '/audio/translations', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'multipart/form-data' },
            new List<String>(),
            OASCreateTranslationResponse.class
        );
    }
    /**
     * Delete a file.
     * 
     * @param fileId The ID of the file to use for this request (required)
     * @return OASDeleteFileResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASDeleteFileResponse deleteFile(Map<String, Object> params) {
        client.assertNotNull(params.get('fileId'), 'fileId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASDeleteFileResponse) client.invoke(
            'DELETE', '/files/{file_id}', '',
            query, form,
            new Map<String, Object>{
                'file_id' => (String) params.get('fileId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASDeleteFileResponse.class
        );
    }
    /**
     * Delete a fine-tuned model. You must have the Owner role in your organization.
     * 
     * @param model The model to delete (required)
     * @return OASDeleteModelResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASDeleteModelResponse deleteModel(Map<String, Object> params) {
        client.assertNotNull(params.get('model'), 'model');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASDeleteModelResponse) client.invoke(
            'DELETE', '/models/{model}', '',
            query, form,
            new Map<String, Object>{
                'model' => (String) params.get('model')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASDeleteModelResponse.class
        );
    }
    /**
     * Returns the contents of the specified file
     * 
     * @param fileId The ID of the file to use for this request (required)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String downloadFile(Map<String, Object> params) {
        client.assertNotNull(params.get('fileId'), 'fileId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (String) client.invoke(
            'GET', '/files/{file_id}/content', '',
            query, form,
            new Map<String, Object>{
                'file_id' => (String) params.get('fileId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            String.class
        );
    }
    /**
     * Returns a list of files that belong to the user\&#39;s organization.
     * 
     * @return OASListFilesResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASListFilesResponse listFiles() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASListFilesResponse) client.invoke(
            'GET', '/files', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASListFilesResponse.class
        );
    }
    /**
     * Get fine-grained status updates for a fine-tune job.\n
     * 
     * @param fineTuneId The ID of the fine-tune job to get events for.\n (required)
     * @param stream Whether to stream events for the fine-tune job. If set to true,\nevents will be sent as data-only\n[server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\nas they become available. The stream will terminate with a\n&#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled,\nor failed).\n\nIf set to false, only events generated so far will be returned.\n (optional, default to false)
     * @return OASListFineTuneEventsResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASListFineTuneEventsResponse listFineTuneEvents(Map<String, Object> params) {
        client.assertNotNull(params.get('fineTuneId'), 'fineTuneId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('stream', (Boolean) params.get('stream')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASListFineTuneEventsResponse) client.invoke(
            'GET', '/fine-tunes/{fine_tune_id}/events', '',
            query, form,
            new Map<String, Object>{
                'fine_tune_id' => (String) params.get('fineTuneId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASListFineTuneEventsResponse.class
        );
    }
    /**
     * List your organization\&#39;s fine-tuning jobs\n
     * 
     * @return OASListFineTunesResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASListFineTunesResponse listFineTunes() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASListFineTunesResponse) client.invoke(
            'GET', '/fine-tunes', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASListFineTunesResponse.class
        );
    }
    /**
     * Lists the currently available models, and provides basic information about each one such as the owner and availability.
     * 
     * @return OASListModelsResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASListModelsResponse listModels() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASListModelsResponse) client.invoke(
            'GET', '/models', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASListModelsResponse.class
        );
    }
    /**
     * Returns information about a specific file.
     * 
     * @param fileId The ID of the file to use for this request (required)
     * @return OASOpenAIFile
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOpenAIFile retrieveFile(Map<String, Object> params) {
        client.assertNotNull(params.get('fileId'), 'fileId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOpenAIFile) client.invoke(
            'GET', '/files/{file_id}', '',
            query, form,
            new Map<String, Object>{
                'file_id' => (String) params.get('fileId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASOpenAIFile.class
        );
    }
    /**
     * Gets info about the fine-tune job.\n\n[Learn more about Fine-tuning](/docs/guides/fine-tuning)\n
     * 
     * @param fineTuneId The ID of the fine-tune job\n (required)
     * @return OASFineTune
     * @throws OAS.ApiException if fails to make API call
     */
    public OASFineTune retrieveFineTune(Map<String, Object> params) {
        client.assertNotNull(params.get('fineTuneId'), 'fineTuneId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASFineTune) client.invoke(
            'GET', '/fine-tunes/{fine_tune_id}', '',
            query, form,
            new Map<String, Object>{
                'fine_tune_id' => (String) params.get('fineTuneId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASFineTune.class
        );
    }
    /**
     * Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
     * 
     * @param model The ID of the model to use for this request (required)
     * @return OASModel
     * @throws OAS.ApiException if fails to make API call
     */
    public OASModel retrieveModel(Map<String, Object> params) {
        client.assertNotNull(params.get('model'), 'model');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASModel) client.invoke(
            'GET', '/models/{model}', '',
            query, form,
            new Map<String, Object>{
                'model' => (String) params.get('model')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASModel.class
        );
    }
}
