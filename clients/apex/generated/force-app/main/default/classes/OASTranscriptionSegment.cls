/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASTranscriptionSegment
 */
public class OASTranscriptionSegment implements OAS.MappedProperties {
    /**
     * Unique identifier of the segment.
     * @return id
     */
    public Integer id { get; set; }

    /**
     * Seek offset of the segment.
     * @return seek
     */
    public Integer seek { get; set; }

    /**
     * Start time of the segment in seconds.
     * @return start
     */
    public Double start { get; set; }

    /**
     * End time of the segment in seconds.
     * @return r_end
     */
    public Double r_end { get; set; }

    /**
     * Text content of the segment.
     * @return text
     */
    public String text { get; set; }

    /**
     * Array of token IDs for the text content.
     * @return tokens
     */
    public List<Integer> tokens { get; set; }

    /**
     * Temperature parameter used for generating the segment.
     * @return temperature
     */
    public Double temperature { get; set; }

    /**
     * Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
     * @return avgLogprob
     */
    public Double avgLogprob { get; set; }

    /**
     * Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
     * @return compressionRatio
     */
    public Double compressionRatio { get; set; }

    /**
     * Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
     * @return noSpeechProb
     */
    public Double noSpeechProb { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'end' => 'r_end',
        'avg_logprob' => 'avgLogprob',
        'compression_ratio' => 'compressionRatio',
        'no_speech_prob' => 'noSpeechProb'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'end' => 'r_end',
        'avg_logprob' => 'avgLogprob',
        'compression_ratio' => 'compressionRatio',
        'no_speech_prob' => 'noSpeechProb'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'end' => 'r_end',
        'avg_logprob' => 'avgLogprob',
        'compression_ratio' => 'compressionRatio',
        'no_speech_prob' => 'noSpeechProb'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'end' => 'r_end',
        'avg_logprob' => 'avgLogprob',
        'compression_ratio' => 'compressionRatio',
        'no_speech_prob' => 'noSpeechProb'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASTranscriptionSegment() {
        tokens = new List<Integer>();
    }

    public static OASTranscriptionSegment getExample() {
        OASTranscriptionSegment transcriptionSegment = new OASTranscriptionSegment();
          transcriptionSegment.id = 0;
          transcriptionSegment.seek = 0;
          transcriptionSegment.start = 1.3579;
          transcriptionSegment.r_end = 1.3579;
          transcriptionSegment.text = '';
          transcriptionSegment.tokens = new List<Integer>{0};
          transcriptionSegment.temperature = 1.3579;
          transcriptionSegment.avgLogprob = 1.3579;
          transcriptionSegment.compressionRatio = 1.3579;
          transcriptionSegment.noSpeechProb = 1.3579;
        return transcriptionSegment;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASTranscriptionSegment) {           
            OASTranscriptionSegment transcriptionSegment = (OASTranscriptionSegment) obj;
            return this.id == transcriptionSegment.id
                && this.seek == transcriptionSegment.seek
                && this.start == transcriptionSegment.start
                && this.r_end == transcriptionSegment.r_end
                && this.text == transcriptionSegment.text
                && this.tokens == transcriptionSegment.tokens
                && this.temperature == transcriptionSegment.temperature
                && this.avgLogprob == transcriptionSegment.avgLogprob
                && this.compressionRatio == transcriptionSegment.compressionRatio
                && this.noSpeechProb == transcriptionSegment.noSpeechProb;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (seek == null ? 0 : System.hashCode(seek));
        hashCode = (17 * hashCode) + (start == null ? 0 : System.hashCode(start));
        hashCode = (17 * hashCode) + (r_end == null ? 0 : System.hashCode(r_end));
        hashCode = (17 * hashCode) + (text == null ? 0 : System.hashCode(text));
        hashCode = (17 * hashCode) + (tokens == null ? 0 : System.hashCode(tokens));
        hashCode = (17 * hashCode) + (temperature == null ? 0 : System.hashCode(temperature));
        hashCode = (17 * hashCode) + (avgLogprob == null ? 0 : System.hashCode(avgLogprob));
        hashCode = (17 * hashCode) + (compressionRatio == null ? 0 : System.hashCode(compressionRatio));
        hashCode = (17 * hashCode) + (noSpeechProb == null ? 0 : System.hashCode(noSpeechProb));
        return hashCode;
    }
}

