/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AssistantsApiController : ControllerBase
    { 
        /// <summary>
        /// Cancels a run that is &#x60;in_progress&#x60;.
        /// </summary>
        /// <param name="threadId">The ID of the thread to which this run belongs.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/threads/{thread_id}/runs/{run_id}/cancel")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("CancelRun")]
        [SwaggerResponse(statusCode: 200, type: typeof(RunObject), description: "OK")]
        public virtual IActionResult CancelRun([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "run_id")][Required]string runId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RunObject));
            string exampleJson = null;
            exampleJson = "{\n  \"cancelled_at\" : 5,\n  \"instructions\" : \"instructions\",\n  \"metadata\" : \"{}\",\n  \"assistant_id\" : \"assistant_id\",\n  \"required_action\" : {\n    \"submit_tool_outputs\" : {\n      \"tool_calls\" : [ {\n        \"function\" : {\n          \"name\" : \"name\",\n          \"arguments\" : \"arguments\"\n        },\n        \"id\" : \"id\",\n        \"type\" : \"function\"\n      }, {\n        \"function\" : {\n          \"name\" : \"name\",\n          \"arguments\" : \"arguments\"\n        },\n        \"id\" : \"id\",\n        \"type\" : \"function\"\n      } ]\n    },\n    \"type\" : \"submit_tool_outputs\"\n  },\n  \"usage\" : {\n    \"completion_tokens\" : 7,\n    \"prompt_tokens\" : 9,\n    \"total_tokens\" : 3\n  },\n  \"created_at\" : 0,\n  \"tools\" : [ {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  } ],\n  \"max_completion_tokens\" : 256,\n  \"thread_id\" : \"thread_id\",\n  \"expires_at\" : 6,\n  \"response_format\" : \"none\",\n  \"file_ids\" : [ \"file_ids\", \"file_ids\" ],\n  \"temperature\" : 2.027123023002322,\n  \"tool_choice\" : \"none\",\n  \"model\" : \"model\",\n  \"id\" : \"id\",\n  \"last_error\" : {\n    \"code\" : \"server_error\",\n    \"message\" : \"message\"\n  },\n  \"incomplete_details\" : {\n    \"reason\" : \"max_completion_tokens\"\n  },\n  \"truncation_strategy\" : {\n    \"last_messages\" : 1,\n    \"type\" : \"auto\"\n  },\n  \"completed_at\" : 2,\n  \"started_at\" : 1,\n  \"failed_at\" : 5,\n  \"max_prompt_tokens\" : 256,\n  \"object\" : \"thread.run\",\n  \"status\" : \"queued\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RunObject>(exampleJson)
            : default(RunObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create an assistant with a model and instructions.
        /// </summary>
        /// <param name="createAssistantRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/assistants")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateAssistant")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssistantObject), description: "OK")]
        public virtual IActionResult CreateAssistant([FromBody]CreateAssistantRequest createAssistantRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AssistantObject));
            string exampleJson = null;
            exampleJson = "{\n  \"instructions\" : \"instructions\",\n  \"metadata\" : \"{}\",\n  \"name\" : \"name\",\n  \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ],\n  \"created_at\" : 0,\n  \"description\" : \"description\",\n  \"model\" : \"model\",\n  \"id\" : \"id\",\n  \"tools\" : [ {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  } ],\n  \"object\" : \"assistant\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AssistantObject>(exampleJson)
            : default(AssistantObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
        /// </summary>
        /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
        /// <param name="createAssistantFileRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/assistants/{assistant_id}/files")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateAssistantFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssistantFileObject), description: "OK")]
        public virtual IActionResult CreateAssistantFile([FromRoute (Name = "assistant_id")][Required]string assistantId, [FromBody]CreateAssistantFileRequest createAssistantFileRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AssistantFileObject));
            string exampleJson = null;
            exampleJson = "{\n  \"assistant_id\" : \"assistant_id\",\n  \"created_at\" : 0,\n  \"id\" : \"id\",\n  \"object\" : \"assistant.file\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AssistantFileObject>(exampleJson)
            : default(AssistantFileObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a message.
        /// </summary>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
        /// <param name="createMessageRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/threads/{thread_id}/messages")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateMessage")]
        [SwaggerResponse(statusCode: 200, type: typeof(MessageObject), description: "OK")]
        public virtual IActionResult CreateMessage([FromRoute (Name = "thread_id")][Required]string threadId, [FromBody]CreateMessageRequest createMessageRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MessageObject));
            string exampleJson = null;
            exampleJson = "{\n  \"metadata\" : \"{}\",\n  \"role\" : \"user\",\n  \"assistant_id\" : \"assistant_id\",\n  \"run_id\" : \"run_id\",\n  \"created_at\" : 0,\n  \"content\" : [ {\n    \"image_file\" : {\n      \"file_id\" : \"file_id\"\n    },\n    \"type\" : \"image_file\"\n  }, {\n    \"image_file\" : {\n      \"file_id\" : \"file_id\"\n    },\n    \"type\" : \"image_file\"\n  } ],\n  \"completed_at\" : 6,\n  \"thread_id\" : \"thread_id\",\n  \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ],\n  \"id\" : \"id\",\n  \"incomplete_at\" : 1,\n  \"incomplete_details\" : {\n    \"reason\" : \"content_filter\"\n  },\n  \"object\" : \"thread.message\",\n  \"status\" : \"in_progress\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MessageObject>(exampleJson)
            : default(MessageObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a run.
        /// </summary>
        /// <param name="threadId">The ID of the thread to run.</param>
        /// <param name="createRunRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/threads/{thread_id}/runs")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateRun")]
        [SwaggerResponse(statusCode: 200, type: typeof(RunObject), description: "OK")]
        public virtual IActionResult CreateRun([FromRoute (Name = "thread_id")][Required]string threadId, [FromBody]CreateRunRequest createRunRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RunObject));
            string exampleJson = null;
            exampleJson = "{\n  \"cancelled_at\" : 5,\n  \"instructions\" : \"instructions\",\n  \"metadata\" : \"{}\",\n  \"assistant_id\" : \"assistant_id\",\n  \"required_action\" : {\n    \"submit_tool_outputs\" : {\n      \"tool_calls\" : [ {\n        \"function\" : {\n          \"name\" : \"name\",\n          \"arguments\" : \"arguments\"\n        },\n        \"id\" : \"id\",\n        \"type\" : \"function\"\n      }, {\n        \"function\" : {\n          \"name\" : \"name\",\n          \"arguments\" : \"arguments\"\n        },\n        \"id\" : \"id\",\n        \"type\" : \"function\"\n      } ]\n    },\n    \"type\" : \"submit_tool_outputs\"\n  },\n  \"usage\" : {\n    \"completion_tokens\" : 7,\n    \"prompt_tokens\" : 9,\n    \"total_tokens\" : 3\n  },\n  \"created_at\" : 0,\n  \"tools\" : [ {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  } ],\n  \"max_completion_tokens\" : 256,\n  \"thread_id\" : \"thread_id\",\n  \"expires_at\" : 6,\n  \"response_format\" : \"none\",\n  \"file_ids\" : [ \"file_ids\", \"file_ids\" ],\n  \"temperature\" : 2.027123023002322,\n  \"tool_choice\" : \"none\",\n  \"model\" : \"model\",\n  \"id\" : \"id\",\n  \"last_error\" : {\n    \"code\" : \"server_error\",\n    \"message\" : \"message\"\n  },\n  \"incomplete_details\" : {\n    \"reason\" : \"max_completion_tokens\"\n  },\n  \"truncation_strategy\" : {\n    \"last_messages\" : 1,\n    \"type\" : \"auto\"\n  },\n  \"completed_at\" : 2,\n  \"started_at\" : 1,\n  \"failed_at\" : 5,\n  \"max_prompt_tokens\" : 256,\n  \"object\" : \"thread.run\",\n  \"status\" : \"queued\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RunObject>(exampleJson)
            : default(RunObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a thread.
        /// </summary>
        /// <param name="createThreadRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/threads")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateThread")]
        [SwaggerResponse(statusCode: 200, type: typeof(ThreadObject), description: "OK")]
        public virtual IActionResult CreateThread([FromBody]CreateThreadRequest createThreadRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ThreadObject));
            string exampleJson = null;
            exampleJson = "{\n  \"metadata\" : \"{}\",\n  \"created_at\" : 0,\n  \"id\" : \"id\",\n  \"object\" : \"thread\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ThreadObject>(exampleJson)
            : default(ThreadObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a thread and run it in one request.
        /// </summary>
        /// <param name="createThreadAndRunRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/threads/runs")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateThreadAndRun")]
        [SwaggerResponse(statusCode: 200, type: typeof(RunObject), description: "OK")]
        public virtual IActionResult CreateThreadAndRun([FromBody]CreateThreadAndRunRequest createThreadAndRunRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RunObject));
            string exampleJson = null;
            exampleJson = "{\n  \"cancelled_at\" : 5,\n  \"instructions\" : \"instructions\",\n  \"metadata\" : \"{}\",\n  \"assistant_id\" : \"assistant_id\",\n  \"required_action\" : {\n    \"submit_tool_outputs\" : {\n      \"tool_calls\" : [ {\n        \"function\" : {\n          \"name\" : \"name\",\n          \"arguments\" : \"arguments\"\n        },\n        \"id\" : \"id\",\n        \"type\" : \"function\"\n      }, {\n        \"function\" : {\n          \"name\" : \"name\",\n          \"arguments\" : \"arguments\"\n        },\n        \"id\" : \"id\",\n        \"type\" : \"function\"\n      } ]\n    },\n    \"type\" : \"submit_tool_outputs\"\n  },\n  \"usage\" : {\n    \"completion_tokens\" : 7,\n    \"prompt_tokens\" : 9,\n    \"total_tokens\" : 3\n  },\n  \"created_at\" : 0,\n  \"tools\" : [ {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  } ],\n  \"max_completion_tokens\" : 256,\n  \"thread_id\" : \"thread_id\",\n  \"expires_at\" : 6,\n  \"response_format\" : \"none\",\n  \"file_ids\" : [ \"file_ids\", \"file_ids\" ],\n  \"temperature\" : 2.027123023002322,\n  \"tool_choice\" : \"none\",\n  \"model\" : \"model\",\n  \"id\" : \"id\",\n  \"last_error\" : {\n    \"code\" : \"server_error\",\n    \"message\" : \"message\"\n  },\n  \"incomplete_details\" : {\n    \"reason\" : \"max_completion_tokens\"\n  },\n  \"truncation_strategy\" : {\n    \"last_messages\" : 1,\n    \"type\" : \"auto\"\n  },\n  \"completed_at\" : 2,\n  \"started_at\" : 1,\n  \"failed_at\" : 5,\n  \"max_prompt_tokens\" : 256,\n  \"object\" : \"thread.run\",\n  \"status\" : \"queued\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RunObject>(exampleJson)
            : default(RunObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete an assistant.
        /// </summary>
        /// <param name="assistantId">The ID of the assistant to delete.</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/v1/assistants/{assistant_id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("DeleteAssistant")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeleteAssistantResponse), description: "OK")]
        public virtual IActionResult DeleteAssistant([FromRoute (Name = "assistant_id")][Required]string assistantId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeleteAssistantResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"deleted\" : true,\n  \"id\" : \"id\",\n  \"object\" : \"assistant.deleted\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeleteAssistantResponse>(exampleJson)
            : default(DeleteAssistantResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete an assistant file.
        /// </summary>
        /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
        /// <param name="fileId">The ID of the file to delete.</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/v1/assistants/{assistant_id}/files/{file_id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("DeleteAssistantFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeleteAssistantFileResponse), description: "OK")]
        public virtual IActionResult DeleteAssistantFile([FromRoute (Name = "assistant_id")][Required]string assistantId, [FromRoute (Name = "file_id")][Required]string fileId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeleteAssistantFileResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"deleted\" : true,\n  \"id\" : \"id\",\n  \"object\" : \"assistant.file.deleted\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeleteAssistantFileResponse>(exampleJson)
            : default(DeleteAssistantFileResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete a thread.
        /// </summary>
        /// <param name="threadId">The ID of the thread to delete.</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/v1/threads/{thread_id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("DeleteThread")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeleteThreadResponse), description: "OK")]
        public virtual IActionResult DeleteThread([FromRoute (Name = "thread_id")][Required]string threadId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeleteThreadResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"deleted\" : true,\n  \"id\" : \"id\",\n  \"object\" : \"thread.deleted\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeleteThreadResponse>(exampleJson)
            : default(DeleteThreadResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves an assistant.
        /// </summary>
        /// <param name="assistantId">The ID of the assistant to retrieve.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/assistants/{assistant_id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("GetAssistant")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssistantObject), description: "OK")]
        public virtual IActionResult GetAssistant([FromRoute (Name = "assistant_id")][Required]string assistantId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AssistantObject));
            string exampleJson = null;
            exampleJson = "{\n  \"instructions\" : \"instructions\",\n  \"metadata\" : \"{}\",\n  \"name\" : \"name\",\n  \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ],\n  \"created_at\" : 0,\n  \"description\" : \"description\",\n  \"model\" : \"model\",\n  \"id\" : \"id\",\n  \"tools\" : [ {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  } ],\n  \"object\" : \"assistant\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AssistantObject>(exampleJson)
            : default(AssistantObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves an AssistantFile.
        /// </summary>
        /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
        /// <param name="fileId">The ID of the file we&#39;re getting.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/assistants/{assistant_id}/files/{file_id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("GetAssistantFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssistantFileObject), description: "OK")]
        public virtual IActionResult GetAssistantFile([FromRoute (Name = "assistant_id")][Required]string assistantId, [FromRoute (Name = "file_id")][Required]string fileId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AssistantFileObject));
            string exampleJson = null;
            exampleJson = "{\n  \"assistant_id\" : \"assistant_id\",\n  \"created_at\" : 0,\n  \"id\" : \"id\",\n  \"object\" : \"assistant.file\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AssistantFileObject>(exampleJson)
            : default(AssistantFileObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve a message.
        /// </summary>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to retrieve.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/threads/{thread_id}/messages/{message_id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("GetMessage")]
        [SwaggerResponse(statusCode: 200, type: typeof(MessageObject), description: "OK")]
        public virtual IActionResult GetMessage([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "message_id")][Required]string messageId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MessageObject));
            string exampleJson = null;
            exampleJson = "{\n  \"metadata\" : \"{}\",\n  \"role\" : \"user\",\n  \"assistant_id\" : \"assistant_id\",\n  \"run_id\" : \"run_id\",\n  \"created_at\" : 0,\n  \"content\" : [ {\n    \"image_file\" : {\n      \"file_id\" : \"file_id\"\n    },\n    \"type\" : \"image_file\"\n  }, {\n    \"image_file\" : {\n      \"file_id\" : \"file_id\"\n    },\n    \"type\" : \"image_file\"\n  } ],\n  \"completed_at\" : 6,\n  \"thread_id\" : \"thread_id\",\n  \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ],\n  \"id\" : \"id\",\n  \"incomplete_at\" : 1,\n  \"incomplete_details\" : {\n    \"reason\" : \"content_filter\"\n  },\n  \"object\" : \"thread.message\",\n  \"status\" : \"in_progress\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MessageObject>(exampleJson)
            : default(MessageObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves a message file.
        /// </summary>
        /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
        /// <param name="messageId">The ID of the message the file belongs to.</param>
        /// <param name="fileId">The ID of the file being retrieved.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/threads/{thread_id}/messages/{message_id}/files/{file_id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("GetMessageFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(MessageFileObject), description: "OK")]
        public virtual IActionResult GetMessageFile([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "message_id")][Required]string messageId, [FromRoute (Name = "file_id")][Required]string fileId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MessageFileObject));
            string exampleJson = null;
            exampleJson = "{\n  \"created_at\" : 0,\n  \"message_id\" : \"message_id\",\n  \"id\" : \"id\",\n  \"object\" : \"thread.message.file\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MessageFileObject>(exampleJson)
            : default(MessageFileObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves a run.
        /// </summary>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/threads/{thread_id}/runs/{run_id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("GetRun")]
        [SwaggerResponse(statusCode: 200, type: typeof(RunObject), description: "OK")]
        public virtual IActionResult GetRun([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "run_id")][Required]string runId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RunObject));
            string exampleJson = null;
            exampleJson = "{\n  \"cancelled_at\" : 5,\n  \"instructions\" : \"instructions\",\n  \"metadata\" : \"{}\",\n  \"assistant_id\" : \"assistant_id\",\n  \"required_action\" : {\n    \"submit_tool_outputs\" : {\n      \"tool_calls\" : [ {\n        \"function\" : {\n          \"name\" : \"name\",\n          \"arguments\" : \"arguments\"\n        },\n        \"id\" : \"id\",\n        \"type\" : \"function\"\n      }, {\n        \"function\" : {\n          \"name\" : \"name\",\n          \"arguments\" : \"arguments\"\n        },\n        \"id\" : \"id\",\n        \"type\" : \"function\"\n      } ]\n    },\n    \"type\" : \"submit_tool_outputs\"\n  },\n  \"usage\" : {\n    \"completion_tokens\" : 7,\n    \"prompt_tokens\" : 9,\n    \"total_tokens\" : 3\n  },\n  \"created_at\" : 0,\n  \"tools\" : [ {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  } ],\n  \"max_completion_tokens\" : 256,\n  \"thread_id\" : \"thread_id\",\n  \"expires_at\" : 6,\n  \"response_format\" : \"none\",\n  \"file_ids\" : [ \"file_ids\", \"file_ids\" ],\n  \"temperature\" : 2.027123023002322,\n  \"tool_choice\" : \"none\",\n  \"model\" : \"model\",\n  \"id\" : \"id\",\n  \"last_error\" : {\n    \"code\" : \"server_error\",\n    \"message\" : \"message\"\n  },\n  \"incomplete_details\" : {\n    \"reason\" : \"max_completion_tokens\"\n  },\n  \"truncation_strategy\" : {\n    \"last_messages\" : 1,\n    \"type\" : \"auto\"\n  },\n  \"completed_at\" : 2,\n  \"started_at\" : 1,\n  \"failed_at\" : 5,\n  \"max_prompt_tokens\" : 256,\n  \"object\" : \"thread.run\",\n  \"status\" : \"queued\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RunObject>(exampleJson)
            : default(RunObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves a run step.
        /// </summary>
        /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
        /// <param name="runId">The ID of the run to which the run step belongs.</param>
        /// <param name="stepId">The ID of the run step to retrieve.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/threads/{thread_id}/runs/{run_id}/steps/{step_id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("GetRunStep")]
        [SwaggerResponse(statusCode: 200, type: typeof(RunStepObject), description: "OK")]
        public virtual IActionResult GetRunStep([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "run_id")][Required]string runId, [FromRoute (Name = "step_id")][Required]string stepId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RunStepObject));
            string exampleJson = null;
            exampleJson = "{\n  \"cancelled_at\" : 1,\n  \"metadata\" : \"{}\",\n  \"assistant_id\" : \"assistant_id\",\n  \"run_id\" : \"run_id\",\n  \"usage\" : {\n    \"completion_tokens\" : 2,\n    \"prompt_tokens\" : 7,\n    \"total_tokens\" : 9\n  },\n  \"created_at\" : 0,\n  \"expired_at\" : 6,\n  \"type\" : \"message_creation\",\n  \"step_details\" : {\n    \"message_creation\" : {\n      \"message_id\" : \"message_id\"\n    },\n    \"type\" : \"message_creation\"\n  },\n  \"completed_at\" : 5,\n  \"thread_id\" : \"thread_id\",\n  \"id\" : \"id\",\n  \"last_error\" : {\n    \"code\" : \"server_error\",\n    \"message\" : \"message\"\n  },\n  \"failed_at\" : 5,\n  \"object\" : \"thread.run.step\",\n  \"status\" : \"in_progress\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RunStepObject>(exampleJson)
            : default(RunStepObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves a thread.
        /// </summary>
        /// <param name="threadId">The ID of the thread to retrieve.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/threads/{thread_id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("GetThread")]
        [SwaggerResponse(statusCode: 200, type: typeof(ThreadObject), description: "OK")]
        public virtual IActionResult GetThread([FromRoute (Name = "thread_id")][Required]string threadId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ThreadObject));
            string exampleJson = null;
            exampleJson = "{\n  \"metadata\" : \"{}\",\n  \"created_at\" : 0,\n  \"id\" : \"id\",\n  \"object\" : \"thread\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ThreadObject>(exampleJson)
            : default(ThreadObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns a list of assistant files.
        /// </summary>
        /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/assistants/{assistant_id}/files")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ListAssistantFiles")]
        [SwaggerResponse(statusCode: 200, type: typeof(ListAssistantFilesResponse), description: "OK")]
        public virtual IActionResult ListAssistantFiles([FromRoute (Name = "assistant_id")][Required]string assistantId, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "order")]string order, [FromQuery (Name = "after")]string after, [FromQuery (Name = "before")]string before)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ListAssistantFilesResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"first_id\" : \"file-abc123\",\n  \"data\" : [ {\n    \"assistant_id\" : \"assistant_id\",\n    \"created_at\" : 0,\n    \"id\" : \"id\",\n    \"object\" : \"assistant.file\"\n  }, {\n    \"assistant_id\" : \"assistant_id\",\n    \"created_at\" : 0,\n    \"id\" : \"id\",\n    \"object\" : \"assistant.file\"\n  } ],\n  \"last_id\" : \"file-abc456\",\n  \"has_more\" : false,\n  \"object\" : \"list\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ListAssistantFilesResponse>(exampleJson)
            : default(ListAssistantFilesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns a list of assistants.
        /// </summary>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/assistants")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ListAssistants")]
        [SwaggerResponse(statusCode: 200, type: typeof(ListAssistantsResponse), description: "OK")]
        public virtual IActionResult ListAssistants([FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "order")]string order, [FromQuery (Name = "after")]string after, [FromQuery (Name = "before")]string before)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ListAssistantsResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"first_id\" : \"asst_abc123\",\n  \"data\" : [ {\n    \"instructions\" : \"instructions\",\n    \"metadata\" : \"{}\",\n    \"name\" : \"name\",\n    \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ],\n    \"created_at\" : 0,\n    \"description\" : \"description\",\n    \"model\" : \"model\",\n    \"id\" : \"id\",\n    \"tools\" : [ {\n      \"type\" : \"code_interpreter\"\n    }, {\n      \"type\" : \"code_interpreter\"\n    }, {\n      \"type\" : \"code_interpreter\"\n    }, {\n      \"type\" : \"code_interpreter\"\n    }, {\n      \"type\" : \"code_interpreter\"\n    } ],\n    \"object\" : \"assistant\"\n  }, {\n    \"instructions\" : \"instructions\",\n    \"metadata\" : \"{}\",\n    \"name\" : \"name\",\n    \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ],\n    \"created_at\" : 0,\n    \"description\" : \"description\",\n    \"model\" : \"model\",\n    \"id\" : \"id\",\n    \"tools\" : [ {\n      \"type\" : \"code_interpreter\"\n    }, {\n      \"type\" : \"code_interpreter\"\n    }, {\n      \"type\" : \"code_interpreter\"\n    }, {\n      \"type\" : \"code_interpreter\"\n    }, {\n      \"type\" : \"code_interpreter\"\n    } ],\n    \"object\" : \"assistant\"\n  } ],\n  \"last_id\" : \"asst_abc456\",\n  \"has_more\" : false,\n  \"object\" : \"list\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ListAssistantsResponse>(exampleJson)
            : default(ListAssistantsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns a list of message files.
        /// </summary>
        /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
        /// <param name="messageId">The ID of the message that the files belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/threads/{thread_id}/messages/{message_id}/files")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ListMessageFiles")]
        [SwaggerResponse(statusCode: 200, type: typeof(ListMessageFilesResponse), description: "OK")]
        public virtual IActionResult ListMessageFiles([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "message_id")][Required]string messageId, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "order")]string order, [FromQuery (Name = "after")]string after, [FromQuery (Name = "before")]string before)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ListMessageFilesResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"first_id\" : \"file-abc123\",\n  \"data\" : [ {\n    \"created_at\" : 0,\n    \"message_id\" : \"message_id\",\n    \"id\" : \"id\",\n    \"object\" : \"thread.message.file\"\n  }, {\n    \"created_at\" : 0,\n    \"message_id\" : \"message_id\",\n    \"id\" : \"id\",\n    \"object\" : \"thread.message.file\"\n  } ],\n  \"last_id\" : \"file-abc456\",\n  \"has_more\" : false,\n  \"object\" : \"list\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ListMessageFilesResponse>(exampleJson)
            : default(ListMessageFilesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns a list of messages for a given thread.
        /// </summary>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </param>
        /// <param name="runId">Filter messages by the run ID that generated them. </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/threads/{thread_id}/messages")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ListMessages")]
        [SwaggerResponse(statusCode: 200, type: typeof(ListMessagesResponse), description: "OK")]
        public virtual IActionResult ListMessages([FromRoute (Name = "thread_id")][Required]string threadId, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "order")]string order, [FromQuery (Name = "after")]string after, [FromQuery (Name = "before")]string before, [FromQuery (Name = "run_id")]string runId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ListMessagesResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"first_id\" : \"msg_abc123\",\n  \"data\" : [ {\n    \"metadata\" : \"{}\",\n    \"role\" : \"user\",\n    \"assistant_id\" : \"assistant_id\",\n    \"run_id\" : \"run_id\",\n    \"created_at\" : 0,\n    \"content\" : [ {\n      \"image_file\" : {\n        \"file_id\" : \"file_id\"\n      },\n      \"type\" : \"image_file\"\n    }, {\n      \"image_file\" : {\n        \"file_id\" : \"file_id\"\n      },\n      \"type\" : \"image_file\"\n    } ],\n    \"completed_at\" : 6,\n    \"thread_id\" : \"thread_id\",\n    \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ],\n    \"id\" : \"id\",\n    \"incomplete_at\" : 1,\n    \"incomplete_details\" : {\n      \"reason\" : \"content_filter\"\n    },\n    \"object\" : \"thread.message\",\n    \"status\" : \"in_progress\"\n  }, {\n    \"metadata\" : \"{}\",\n    \"role\" : \"user\",\n    \"assistant_id\" : \"assistant_id\",\n    \"run_id\" : \"run_id\",\n    \"created_at\" : 0,\n    \"content\" : [ {\n      \"image_file\" : {\n        \"file_id\" : \"file_id\"\n      },\n      \"type\" : \"image_file\"\n    }, {\n      \"image_file\" : {\n        \"file_id\" : \"file_id\"\n      },\n      \"type\" : \"image_file\"\n    } ],\n    \"completed_at\" : 6,\n    \"thread_id\" : \"thread_id\",\n    \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ],\n    \"id\" : \"id\",\n    \"incomplete_at\" : 1,\n    \"incomplete_details\" : {\n      \"reason\" : \"content_filter\"\n    },\n    \"object\" : \"thread.message\",\n    \"status\" : \"in_progress\"\n  } ],\n  \"last_id\" : \"msg_abc123\",\n  \"has_more\" : false,\n  \"object\" : \"list\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ListMessagesResponse>(exampleJson)
            : default(ListMessagesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns a list of run steps belonging to a run.
        /// </summary>
        /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
        /// <param name="runId">The ID of the run the run steps belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/threads/{thread_id}/runs/{run_id}/steps")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ListRunSteps")]
        [SwaggerResponse(statusCode: 200, type: typeof(ListRunStepsResponse), description: "OK")]
        public virtual IActionResult ListRunSteps([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "run_id")][Required]string runId, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "order")]string order, [FromQuery (Name = "after")]string after, [FromQuery (Name = "before")]string before)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ListRunStepsResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"first_id\" : \"step_abc123\",\n  \"data\" : [ {\n    \"cancelled_at\" : 1,\n    \"metadata\" : \"{}\",\n    \"assistant_id\" : \"assistant_id\",\n    \"run_id\" : \"run_id\",\n    \"usage\" : {\n      \"completion_tokens\" : 2,\n      \"prompt_tokens\" : 7,\n      \"total_tokens\" : 9\n    },\n    \"created_at\" : 0,\n    \"expired_at\" : 6,\n    \"type\" : \"message_creation\",\n    \"step_details\" : {\n      \"message_creation\" : {\n        \"message_id\" : \"message_id\"\n      },\n      \"type\" : \"message_creation\"\n    },\n    \"completed_at\" : 5,\n    \"thread_id\" : \"thread_id\",\n    \"id\" : \"id\",\n    \"last_error\" : {\n      \"code\" : \"server_error\",\n      \"message\" : \"message\"\n    },\n    \"failed_at\" : 5,\n    \"object\" : \"thread.run.step\",\n    \"status\" : \"in_progress\"\n  }, {\n    \"cancelled_at\" : 1,\n    \"metadata\" : \"{}\",\n    \"assistant_id\" : \"assistant_id\",\n    \"run_id\" : \"run_id\",\n    \"usage\" : {\n      \"completion_tokens\" : 2,\n      \"prompt_tokens\" : 7,\n      \"total_tokens\" : 9\n    },\n    \"created_at\" : 0,\n    \"expired_at\" : 6,\n    \"type\" : \"message_creation\",\n    \"step_details\" : {\n      \"message_creation\" : {\n        \"message_id\" : \"message_id\"\n      },\n      \"type\" : \"message_creation\"\n    },\n    \"completed_at\" : 5,\n    \"thread_id\" : \"thread_id\",\n    \"id\" : \"id\",\n    \"last_error\" : {\n      \"code\" : \"server_error\",\n      \"message\" : \"message\"\n    },\n    \"failed_at\" : 5,\n    \"object\" : \"thread.run.step\",\n    \"status\" : \"in_progress\"\n  } ],\n  \"last_id\" : \"step_abc456\",\n  \"has_more\" : false,\n  \"object\" : \"list\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ListRunStepsResponse>(exampleJson)
            : default(ListRunStepsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns a list of runs belonging to a thread.
        /// </summary>
        /// <param name="threadId">The ID of the thread the run belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/threads/{thread_id}/runs")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ListRuns")]
        [SwaggerResponse(statusCode: 200, type: typeof(ListRunsResponse), description: "OK")]
        public virtual IActionResult ListRuns([FromRoute (Name = "thread_id")][Required]string threadId, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "order")]string order, [FromQuery (Name = "after")]string after, [FromQuery (Name = "before")]string before)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ListRunsResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"first_id\" : \"run_abc123\",\n  \"data\" : [ {\n    \"cancelled_at\" : 5,\n    \"instructions\" : \"instructions\",\n    \"metadata\" : \"{}\",\n    \"assistant_id\" : \"assistant_id\",\n    \"required_action\" : {\n      \"submit_tool_outputs\" : {\n        \"tool_calls\" : [ {\n          \"function\" : {\n            \"name\" : \"name\",\n            \"arguments\" : \"arguments\"\n          },\n          \"id\" : \"id\",\n          \"type\" : \"function\"\n        }, {\n          \"function\" : {\n            \"name\" : \"name\",\n            \"arguments\" : \"arguments\"\n          },\n          \"id\" : \"id\",\n          \"type\" : \"function\"\n        } ]\n      },\n      \"type\" : \"submit_tool_outputs\"\n    },\n    \"usage\" : {\n      \"completion_tokens\" : 7,\n      \"prompt_tokens\" : 9,\n      \"total_tokens\" : 3\n    },\n    \"created_at\" : 0,\n    \"tools\" : [ {\n      \"type\" : \"code_interpreter\"\n    }, {\n      \"type\" : \"code_interpreter\"\n    }, {\n      \"type\" : \"code_interpreter\"\n    }, {\n      \"type\" : \"code_interpreter\"\n    }, {\n      \"type\" : \"code_interpreter\"\n    } ],\n    \"max_completion_tokens\" : 256,\n    \"thread_id\" : \"thread_id\",\n    \"expires_at\" : 6,\n    \"response_format\" : \"none\",\n    \"file_ids\" : [ \"file_ids\", \"file_ids\" ],\n    \"temperature\" : 2.027123023002322,\n    \"tool_choice\" : \"none\",\n    \"model\" : \"model\",\n    \"id\" : \"id\",\n    \"last_error\" : {\n      \"code\" : \"server_error\",\n      \"message\" : \"message\"\n    },\n    \"incomplete_details\" : {\n      \"reason\" : \"max_completion_tokens\"\n    },\n    \"truncation_strategy\" : {\n      \"last_messages\" : 1,\n      \"type\" : \"auto\"\n    },\n    \"completed_at\" : 2,\n    \"started_at\" : 1,\n    \"failed_at\" : 5,\n    \"max_prompt_tokens\" : 256,\n    \"object\" : \"thread.run\",\n    \"status\" : \"queued\"\n  }, {\n    \"cancelled_at\" : 5,\n    \"instructions\" : \"instructions\",\n    \"metadata\" : \"{}\",\n    \"assistant_id\" : \"assistant_id\",\n    \"required_action\" : {\n      \"submit_tool_outputs\" : {\n        \"tool_calls\" : [ {\n          \"function\" : {\n            \"name\" : \"name\",\n            \"arguments\" : \"arguments\"\n          },\n          \"id\" : \"id\",\n          \"type\" : \"function\"\n        }, {\n          \"function\" : {\n            \"name\" : \"name\",\n            \"arguments\" : \"arguments\"\n          },\n          \"id\" : \"id\",\n          \"type\" : \"function\"\n        } ]\n      },\n      \"type\" : \"submit_tool_outputs\"\n    },\n    \"usage\" : {\n      \"completion_tokens\" : 7,\n      \"prompt_tokens\" : 9,\n      \"total_tokens\" : 3\n    },\n    \"created_at\" : 0,\n    \"tools\" : [ {\n      \"type\" : \"code_interpreter\"\n    }, {\n      \"type\" : \"code_interpreter\"\n    }, {\n      \"type\" : \"code_interpreter\"\n    }, {\n      \"type\" : \"code_interpreter\"\n    }, {\n      \"type\" : \"code_interpreter\"\n    } ],\n    \"max_completion_tokens\" : 256,\n    \"thread_id\" : \"thread_id\",\n    \"expires_at\" : 6,\n    \"response_format\" : \"none\",\n    \"file_ids\" : [ \"file_ids\", \"file_ids\" ],\n    \"temperature\" : 2.027123023002322,\n    \"tool_choice\" : \"none\",\n    \"model\" : \"model\",\n    \"id\" : \"id\",\n    \"last_error\" : {\n      \"code\" : \"server_error\",\n      \"message\" : \"message\"\n    },\n    \"incomplete_details\" : {\n      \"reason\" : \"max_completion_tokens\"\n    },\n    \"truncation_strategy\" : {\n      \"last_messages\" : 1,\n      \"type\" : \"auto\"\n    },\n    \"completed_at\" : 2,\n    \"started_at\" : 1,\n    \"failed_at\" : 5,\n    \"max_prompt_tokens\" : 256,\n    \"object\" : \"thread.run\",\n    \"status\" : \"queued\"\n  } ],\n  \"last_id\" : \"run_abc456\",\n  \"has_more\" : false,\n  \"object\" : \"list\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ListRunsResponse>(exampleJson)
            : default(ListRunsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modifies an assistant.
        /// </summary>
        /// <param name="assistantId">The ID of the assistant to modify.</param>
        /// <param name="modifyAssistantRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/assistants/{assistant_id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ModifyAssistant")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssistantObject), description: "OK")]
        public virtual IActionResult ModifyAssistant([FromRoute (Name = "assistant_id")][Required]string assistantId, [FromBody]ModifyAssistantRequest modifyAssistantRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AssistantObject));
            string exampleJson = null;
            exampleJson = "{\n  \"instructions\" : \"instructions\",\n  \"metadata\" : \"{}\",\n  \"name\" : \"name\",\n  \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ],\n  \"created_at\" : 0,\n  \"description\" : \"description\",\n  \"model\" : \"model\",\n  \"id\" : \"id\",\n  \"tools\" : [ {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  } ],\n  \"object\" : \"assistant\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AssistantObject>(exampleJson)
            : default(AssistantObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modifies a message.
        /// </summary>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to modify.</param>
        /// <param name="modifyMessageRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/threads/{thread_id}/messages/{message_id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ModifyMessage")]
        [SwaggerResponse(statusCode: 200, type: typeof(MessageObject), description: "OK")]
        public virtual IActionResult ModifyMessage([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "message_id")][Required]string messageId, [FromBody]ModifyMessageRequest modifyMessageRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MessageObject));
            string exampleJson = null;
            exampleJson = "{\n  \"metadata\" : \"{}\",\n  \"role\" : \"user\",\n  \"assistant_id\" : \"assistant_id\",\n  \"run_id\" : \"run_id\",\n  \"created_at\" : 0,\n  \"content\" : [ {\n    \"image_file\" : {\n      \"file_id\" : \"file_id\"\n    },\n    \"type\" : \"image_file\"\n  }, {\n    \"image_file\" : {\n      \"file_id\" : \"file_id\"\n    },\n    \"type\" : \"image_file\"\n  } ],\n  \"completed_at\" : 6,\n  \"thread_id\" : \"thread_id\",\n  \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ],\n  \"id\" : \"id\",\n  \"incomplete_at\" : 1,\n  \"incomplete_details\" : {\n    \"reason\" : \"content_filter\"\n  },\n  \"object\" : \"thread.message\",\n  \"status\" : \"in_progress\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MessageObject>(exampleJson)
            : default(MessageObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modifies a run.
        /// </summary>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to modify.</param>
        /// <param name="modifyRunRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/threads/{thread_id}/runs/{run_id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ModifyRun")]
        [SwaggerResponse(statusCode: 200, type: typeof(RunObject), description: "OK")]
        public virtual IActionResult ModifyRun([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "run_id")][Required]string runId, [FromBody]ModifyRunRequest modifyRunRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RunObject));
            string exampleJson = null;
            exampleJson = "{\n  \"cancelled_at\" : 5,\n  \"instructions\" : \"instructions\",\n  \"metadata\" : \"{}\",\n  \"assistant_id\" : \"assistant_id\",\n  \"required_action\" : {\n    \"submit_tool_outputs\" : {\n      \"tool_calls\" : [ {\n        \"function\" : {\n          \"name\" : \"name\",\n          \"arguments\" : \"arguments\"\n        },\n        \"id\" : \"id\",\n        \"type\" : \"function\"\n      }, {\n        \"function\" : {\n          \"name\" : \"name\",\n          \"arguments\" : \"arguments\"\n        },\n        \"id\" : \"id\",\n        \"type\" : \"function\"\n      } ]\n    },\n    \"type\" : \"submit_tool_outputs\"\n  },\n  \"usage\" : {\n    \"completion_tokens\" : 7,\n    \"prompt_tokens\" : 9,\n    \"total_tokens\" : 3\n  },\n  \"created_at\" : 0,\n  \"tools\" : [ {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  } ],\n  \"max_completion_tokens\" : 256,\n  \"thread_id\" : \"thread_id\",\n  \"expires_at\" : 6,\n  \"response_format\" : \"none\",\n  \"file_ids\" : [ \"file_ids\", \"file_ids\" ],\n  \"temperature\" : 2.027123023002322,\n  \"tool_choice\" : \"none\",\n  \"model\" : \"model\",\n  \"id\" : \"id\",\n  \"last_error\" : {\n    \"code\" : \"server_error\",\n    \"message\" : \"message\"\n  },\n  \"incomplete_details\" : {\n    \"reason\" : \"max_completion_tokens\"\n  },\n  \"truncation_strategy\" : {\n    \"last_messages\" : 1,\n    \"type\" : \"auto\"\n  },\n  \"completed_at\" : 2,\n  \"started_at\" : 1,\n  \"failed_at\" : 5,\n  \"max_prompt_tokens\" : 256,\n  \"object\" : \"thread.run\",\n  \"status\" : \"queued\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RunObject>(exampleJson)
            : default(RunObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modifies a thread.
        /// </summary>
        /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
        /// <param name="modifyThreadRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/threads/{thread_id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ModifyThread")]
        [SwaggerResponse(statusCode: 200, type: typeof(ThreadObject), description: "OK")]
        public virtual IActionResult ModifyThread([FromRoute (Name = "thread_id")][Required]string threadId, [FromBody]ModifyThreadRequest modifyThreadRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ThreadObject));
            string exampleJson = null;
            exampleJson = "{\n  \"metadata\" : \"{}\",\n  \"created_at\" : 0,\n  \"id\" : \"id\",\n  \"object\" : \"thread\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ThreadObject>(exampleJson)
            : default(ThreadObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
        /// </summary>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
        /// <param name="runId">The ID of the run that requires the tool output submission.</param>
        /// <param name="submitToolOutputsRunRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/threads/{thread_id}/runs/{run_id}/submit_tool_outputs")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SubmitToolOuputsToRun")]
        [SwaggerResponse(statusCode: 200, type: typeof(RunObject), description: "OK")]
        public virtual IActionResult SubmitToolOuputsToRun([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "run_id")][Required]string runId, [FromBody]SubmitToolOutputsRunRequest submitToolOutputsRunRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RunObject));
            string exampleJson = null;
            exampleJson = "{\n  \"cancelled_at\" : 5,\n  \"instructions\" : \"instructions\",\n  \"metadata\" : \"{}\",\n  \"assistant_id\" : \"assistant_id\",\n  \"required_action\" : {\n    \"submit_tool_outputs\" : {\n      \"tool_calls\" : [ {\n        \"function\" : {\n          \"name\" : \"name\",\n          \"arguments\" : \"arguments\"\n        },\n        \"id\" : \"id\",\n        \"type\" : \"function\"\n      }, {\n        \"function\" : {\n          \"name\" : \"name\",\n          \"arguments\" : \"arguments\"\n        },\n        \"id\" : \"id\",\n        \"type\" : \"function\"\n      } ]\n    },\n    \"type\" : \"submit_tool_outputs\"\n  },\n  \"usage\" : {\n    \"completion_tokens\" : 7,\n    \"prompt_tokens\" : 9,\n    \"total_tokens\" : 3\n  },\n  \"created_at\" : 0,\n  \"tools\" : [ {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  }, {\n    \"type\" : \"code_interpreter\"\n  } ],\n  \"max_completion_tokens\" : 256,\n  \"thread_id\" : \"thread_id\",\n  \"expires_at\" : 6,\n  \"response_format\" : \"none\",\n  \"file_ids\" : [ \"file_ids\", \"file_ids\" ],\n  \"temperature\" : 2.027123023002322,\n  \"tool_choice\" : \"none\",\n  \"model\" : \"model\",\n  \"id\" : \"id\",\n  \"last_error\" : {\n    \"code\" : \"server_error\",\n    \"message\" : \"message\"\n  },\n  \"incomplete_details\" : {\n    \"reason\" : \"max_completion_tokens\"\n  },\n  \"truncation_strategy\" : {\n    \"last_messages\" : 1,\n    \"type\" : \"auto\"\n  },\n  \"completed_at\" : 2,\n  \"started_at\" : 1,\n  \"failed_at\" : 5,\n  \"max_prompt_tokens\" : 256,\n  \"object\" : \"thread.run\",\n  \"status\" : \"queued\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RunObject>(exampleJson)
            : default(RunObject);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
