/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AudioApiController : ControllerBase
    { 
        /// <summary>
        /// Generates audio from the input text.
        /// </summary>
        /// <param name="createSpeechRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/audio/speech")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateSpeech")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "OK")]
        public virtual IActionResult CreateSpeech([FromBody]CreateSpeechRequest createSpeechRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Transcribes audio into the input language.
        /// </summary>
        /// <param name="file">The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. </param>
        /// <param name="model"></param>
        /// <param name="language">The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. </param>
        /// <param name="prompt">An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. </param>
        /// <param name="responseFormat">The format of the transcript output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;. </param>
        /// <param name="temperature">The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. </param>
        /// <param name="timestampGranularities">The timestamp granularities to populate for this transcription. &#x60;response_format&#x60; must be set &#x60;verbose_json&#x60; to use timestamp granularities. Either or both of these options are supported: &#x60;word&#x60;, or &#x60;segment&#x60;. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency. </param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/audio/transcriptions")]
        [Authorize]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("CreateTranscription")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreateTranscription200Response), description: "OK")]
        public virtual IActionResult CreateTranscription([Required()]IFormFile file, [FromForm][Required()]CreateTranscriptionRequestModel model, [FromForm (Name = "language")]string language, [FromForm (Name = "prompt")]string prompt, [FromForm (Name = "response_format")]string responseFormat, [FromForm (Name = "temperature")]decimal? temperature, [FromForm (Name = "timestamp_granularities[]")]List<string> timestampGranularities)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreateTranscription200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"text\" : \"text\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateTranscription200Response>(exampleJson)
            : default(CreateTranscription200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Translates audio into English.
        /// </summary>
        /// <param name="file">The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. </param>
        /// <param name="model"></param>
        /// <param name="prompt">An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. </param>
        /// <param name="responseFormat">The format of the transcript output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;. </param>
        /// <param name="temperature">The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. </param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/audio/translations")]
        [Authorize]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("CreateTranslation")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreateTranslation200Response), description: "OK")]
        public virtual IActionResult CreateTranslation([Required()]IFormFile file, [FromForm][Required()]CreateTranscriptionRequestModel model, [FromForm (Name = "prompt")]string prompt, [FromForm (Name = "response_format")]string responseFormat, [FromForm (Name = "temperature")]decimal? temperature)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreateTranslation200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"text\" : \"text\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateTranslation200Response>(exampleJson)
            : default(CreateTranslation200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
