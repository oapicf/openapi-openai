/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class FilesApiController : ControllerBase
    { 
        /// <summary>
        /// Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports &#x60;.jsonl&#x60; files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. 
        /// </summary>
        /// <param name="file">The File object (not file name) to be uploaded. </param>
        /// <param name="purpose">The intended purpose of the uploaded file.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tuning) and \\\&quot;assistants\\\&quot; for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning. </param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/files")]
        [Authorize]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("CreateFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(OpenAIFile), description: "OK")]
        public virtual IActionResult CreateFile([Required()]IFormFile file, [FromForm (Name = "purpose")][Required()]string purpose)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OpenAIFile));
            string exampleJson = null;
            exampleJson = "{\n  \"filename\" : \"filename\",\n  \"purpose\" : \"fine-tune\",\n  \"bytes\" : 0,\n  \"created_at\" : 6,\n  \"id\" : \"id\",\n  \"status_details\" : \"status_details\",\n  \"object\" : \"file\",\n  \"status\" : \"uploaded\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OpenAIFile>(exampleJson)
            : default(OpenAIFile);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete a file.
        /// </summary>
        /// <param name="fileId">The ID of the file to use for this request.</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/v1/files/{file_id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("DeleteFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeleteFileResponse), description: "OK")]
        public virtual IActionResult DeleteFile([FromRoute (Name = "file_id")][Required]string fileId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeleteFileResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"deleted\" : true,\n  \"id\" : \"id\",\n  \"object\" : \"file\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeleteFileResponse>(exampleJson)
            : default(DeleteFileResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns the contents of the specified file.
        /// </summary>
        /// <param name="fileId">The ID of the file to use for this request.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/files/{file_id}/content")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("DownloadFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "OK")]
        public virtual IActionResult DownloadFile([FromRoute (Name = "file_id")][Required]string fileId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns a list of files that belong to the user&#39;s organization.
        /// </summary>
        /// <param name="purpose">Only return files with the given purpose.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/files")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ListFiles")]
        [SwaggerResponse(statusCode: 200, type: typeof(ListFilesResponse), description: "OK")]
        public virtual IActionResult ListFiles([FromQuery (Name = "purpose")]string purpose)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ListFilesResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"fine-tune\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"status_details\",\n    \"object\" : \"file\",\n    \"status\" : \"uploaded\"\n  }, {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"fine-tune\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"status_details\",\n    \"object\" : \"file\",\n    \"status\" : \"uploaded\"\n  } ],\n  \"object\" : \"list\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ListFilesResponse>(exampleJson)
            : default(ListFilesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns information about a specific file.
        /// </summary>
        /// <param name="fileId">The ID of the file to use for this request.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/files/{file_id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("RetrieveFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(OpenAIFile), description: "OK")]
        public virtual IActionResult RetrieveFile([FromRoute (Name = "file_id")][Required]string fileId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OpenAIFile));
            string exampleJson = null;
            exampleJson = "{\n  \"filename\" : \"filename\",\n  \"purpose\" : \"fine-tune\",\n  \"bytes\" : 0,\n  \"created_at\" : 6,\n  \"id\" : \"id\",\n  \"status_details\" : \"status_details\",\n  \"object\" : \"file\",\n  \"status\" : \"uploaded\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OpenAIFile>(exampleJson)
            : default(OpenAIFile);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
