/*
 * OpenAI API
 *
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class OpenAIApiController : ControllerBase
    { 
        /// <summary>
        /// Immediately cancel a fine-tune job. 
        /// </summary>
        /// <param name="fineTuneId">The ID of the fine-tune job to cancel </param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/fine-tunes/{fine_tune_id}/cancel")]
        [ValidateModelState]
        [SwaggerOperation("CancelFineTune")]
        [SwaggerResponse(statusCode: 200, type: typeof(FineTune), description: "OK")]
        public virtual IActionResult CancelFineTune([FromRoute (Name = "fine_tune_id")][Required]string fineTuneId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(FineTune));
            string exampleJson = null;
            exampleJson = "{\n  \"result_files\" : [ {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  }, {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  } ],\n  \"hyperparams\" : \"{}\",\n  \"fine_tuned_model\" : \"fine_tuned_model\",\n  \"created_at\" : 0,\n  \"training_files\" : [ {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  }, {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  } ],\n  \"updated_at\" : 6,\n  \"organization_id\" : \"organization_id\",\n  \"model\" : \"model\",\n  \"id\" : \"id\",\n  \"events\" : [ {\n    \"level\" : \"level\",\n    \"created_at\" : 1,\n    \"message\" : \"message\",\n    \"object\" : \"object\"\n  }, {\n    \"level\" : \"level\",\n    \"created_at\" : 1,\n    \"message\" : \"message\",\n    \"object\" : \"object\"\n  } ],\n  \"object\" : \"object\",\n  \"status\" : \"status\",\n  \"validation_files\" : [ {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  }, {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FineTune>(exampleJson)
            : default(FineTune);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a model response for the given chat conversation.
        /// </summary>
        /// <param name="createChatCompletionRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/chat/completions")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateChatCompletion")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreateChatCompletionResponse), description: "OK")]
        public virtual IActionResult CreateChatCompletion([FromBody]CreateChatCompletionRequest createChatCompletionRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreateChatCompletionResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"created\" : 0,\n  \"usage\" : {\n    \"completion_tokens\" : 5,\n    \"prompt_tokens\" : 1,\n    \"total_tokens\" : 5\n  },\n  \"model\" : \"model\",\n  \"id\" : \"id\",\n  \"choices\" : [ {\n    \"finish_reason\" : \"stop\",\n    \"index\" : 6,\n    \"message\" : {\n      \"role\" : \"system\",\n      \"function_call\" : {\n        \"name\" : \"name\",\n        \"arguments\" : \"arguments\"\n      },\n      \"content\" : \"content\"\n    }\n  }, {\n    \"finish_reason\" : \"stop\",\n    \"index\" : 6,\n    \"message\" : {\n      \"role\" : \"system\",\n      \"function_call\" : {\n        \"name\" : \"name\",\n        \"arguments\" : \"arguments\"\n      },\n      \"content\" : \"content\"\n    }\n  } ],\n  \"object\" : \"object\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateChatCompletionResponse>(exampleJson)
            : default(CreateChatCompletionResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a completion for the provided prompt and parameters.
        /// </summary>
        /// <param name="createCompletionRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/completions")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateCompletion")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreateCompletionResponse), description: "OK")]
        public virtual IActionResult CreateCompletion([FromBody]CreateCompletionRequest createCompletionRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreateCompletionResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"created\" : 0,\n  \"usage\" : {\n    \"completion_tokens\" : 5,\n    \"prompt_tokens\" : 1,\n    \"total_tokens\" : 5\n  },\n  \"model\" : \"model\",\n  \"id\" : \"id\",\n  \"choices\" : [ {\n    \"finish_reason\" : \"stop\",\n    \"index\" : 6,\n    \"text\" : \"text\",\n    \"logprobs\" : {\n      \"top_logprobs\" : [ \"{}\", \"{}\" ],\n      \"token_logprobs\" : [ 1.4658129805029452, 1.4658129805029452 ],\n      \"tokens\" : [ \"tokens\", \"tokens\" ],\n      \"text_offset\" : [ 5, 5 ]\n    }\n  }, {\n    \"finish_reason\" : \"stop\",\n    \"index\" : 6,\n    \"text\" : \"text\",\n    \"logprobs\" : {\n      \"top_logprobs\" : [ \"{}\", \"{}\" ],\n      \"token_logprobs\" : [ 1.4658129805029452, 1.4658129805029452 ],\n      \"tokens\" : [ \"tokens\", \"tokens\" ],\n      \"text_offset\" : [ 5, 5 ]\n    }\n  } ],\n  \"object\" : \"object\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateCompletionResponse>(exampleJson)
            : default(CreateCompletionResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a new edit for the provided input, instruction, and parameters.
        /// </summary>
        /// <param name="createEditRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/edits")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateEdit")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreateEditResponse), description: "OK")]
        public virtual IActionResult CreateEdit([FromBody]CreateEditRequest createEditRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreateEditResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"created\" : 0,\n  \"usage\" : {\n    \"completion_tokens\" : 5,\n    \"prompt_tokens\" : 1,\n    \"total_tokens\" : 5\n  },\n  \"choices\" : [ {\n    \"finish_reason\" : \"stop\",\n    \"index\" : 6,\n    \"text\" : \"text\",\n    \"logprobs\" : {\n      \"top_logprobs\" : [ \"{}\", \"{}\" ],\n      \"token_logprobs\" : [ 1.4658129805029452, 1.4658129805029452 ],\n      \"tokens\" : [ \"tokens\", \"tokens\" ],\n      \"text_offset\" : [ 5, 5 ]\n    }\n  }, {\n    \"finish_reason\" : \"stop\",\n    \"index\" : 6,\n    \"text\" : \"text\",\n    \"logprobs\" : {\n      \"top_logprobs\" : [ \"{}\", \"{}\" ],\n      \"token_logprobs\" : [ 1.4658129805029452, 1.4658129805029452 ],\n      \"tokens\" : [ \"tokens\", \"tokens\" ],\n      \"text_offset\" : [ 5, 5 ]\n    }\n  } ],\n  \"object\" : \"object\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateEditResponse>(exampleJson)
            : default(CreateEditResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates an embedding vector representing the input text.
        /// </summary>
        /// <param name="createEmbeddingRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/embeddings")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateEmbedding")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreateEmbeddingResponse), description: "OK")]
        public virtual IActionResult CreateEmbedding([FromBody]CreateEmbeddingRequest createEmbeddingRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreateEmbeddingResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"index\" : 0,\n    \"embedding\" : [ 6.027456183070403, 6.027456183070403 ],\n    \"object\" : \"object\"\n  }, {\n    \"index\" : 0,\n    \"embedding\" : [ 6.027456183070403, 6.027456183070403 ],\n    \"object\" : \"object\"\n  } ],\n  \"usage\" : {\n    \"prompt_tokens\" : 1,\n    \"total_tokens\" : 5\n  },\n  \"model\" : \"model\",\n  \"object\" : \"object\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateEmbeddingResponse>(exampleJson)
            : default(CreateEmbeddingResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. 
        /// </summary>
        /// <param name="file">Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\&quot;fine-tune\\\&quot;, each line is a JSON record with \\\&quot;prompt\\\&quot; and \\\&quot;completion\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data). </param>
        /// <param name="purpose">The intended purpose of the uploaded documents.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. </param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/files")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("CreateFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(OpenAIFile), description: "OK")]
        public virtual IActionResult CreateFile([Required()]IFormFile file, [FromForm (Name = "purpose")][Required()]string purpose)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OpenAIFile));
            string exampleJson = null;
            exampleJson = "{\n  \"filename\" : \"filename\",\n  \"purpose\" : \"purpose\",\n  \"bytes\" : 0,\n  \"created_at\" : 6,\n  \"id\" : \"id\",\n  \"status_details\" : \"{}\",\n  \"object\" : \"object\",\n  \"status\" : \"status\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OpenAIFile>(exampleJson)
            : default(OpenAIFile);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
        /// </summary>
        /// <param name="createFineTuneRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/fine-tunes")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateFineTune")]
        [SwaggerResponse(statusCode: 200, type: typeof(FineTune), description: "OK")]
        public virtual IActionResult CreateFineTune([FromBody]CreateFineTuneRequest createFineTuneRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(FineTune));
            string exampleJson = null;
            exampleJson = "{\n  \"result_files\" : [ {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  }, {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  } ],\n  \"hyperparams\" : \"{}\",\n  \"fine_tuned_model\" : \"fine_tuned_model\",\n  \"created_at\" : 0,\n  \"training_files\" : [ {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  }, {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  } ],\n  \"updated_at\" : 6,\n  \"organization_id\" : \"organization_id\",\n  \"model\" : \"model\",\n  \"id\" : \"id\",\n  \"events\" : [ {\n    \"level\" : \"level\",\n    \"created_at\" : 1,\n    \"message\" : \"message\",\n    \"object\" : \"object\"\n  }, {\n    \"level\" : \"level\",\n    \"created_at\" : 1,\n    \"message\" : \"message\",\n    \"object\" : \"object\"\n  } ],\n  \"object\" : \"object\",\n  \"status\" : \"status\",\n  \"validation_files\" : [ {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  }, {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FineTune>(exampleJson)
            : default(FineTune);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates an image given a prompt.
        /// </summary>
        /// <param name="createImageRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/images/generations")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(ImagesResponse), description: "OK")]
        public virtual IActionResult CreateImage([FromBody]CreateImageRequest createImageRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ImagesResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"b64_json\" : \"b64_json\",\n    \"url\" : \"url\"\n  }, {\n    \"b64_json\" : \"b64_json\",\n    \"url\" : \"url\"\n  } ],\n  \"created\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ImagesResponse>(exampleJson)
            : default(ImagesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates an edited or extended image given an original image and a prompt.
        /// </summary>
        /// <param name="image">The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.</param>
        /// <param name="prompt">A text description of the desired image(s). The maximum length is 1000 characters.</param>
        /// <param name="mask">An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.</param>
        /// <param name="n">The number of images to generate. Must be between 1 and 10.</param>
        /// <param name="size">The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.</param>
        /// <param name="responseFormat">The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.</param>
        /// <param name="user">A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). </param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/images/edits")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("CreateImageEdit")]
        [SwaggerResponse(statusCode: 200, type: typeof(ImagesResponse), description: "OK")]
        public virtual IActionResult CreateImageEdit([Required()]IFormFile image, [FromForm (Name = "prompt")][Required()]string prompt, IFormFile mask, [FromForm (Name = "n")][Range(1, 10)]int? n, [FromForm (Name = "size")]string size, [FromForm (Name = "response_format")]string responseFormat, [FromForm (Name = "user")]string user)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ImagesResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"b64_json\" : \"b64_json\",\n    \"url\" : \"url\"\n  }, {\n    \"b64_json\" : \"b64_json\",\n    \"url\" : \"url\"\n  } ],\n  \"created\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ImagesResponse>(exampleJson)
            : default(ImagesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a variation of a given image.
        /// </summary>
        /// <param name="image">The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.</param>
        /// <param name="n">The number of images to generate. Must be between 1 and 10.</param>
        /// <param name="size">The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.</param>
        /// <param name="responseFormat">The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.</param>
        /// <param name="user">A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). </param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/images/variations")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("CreateImageVariation")]
        [SwaggerResponse(statusCode: 200, type: typeof(ImagesResponse), description: "OK")]
        public virtual IActionResult CreateImageVariation([Required()]IFormFile image, [FromForm (Name = "n")][Range(1, 10)]int? n, [FromForm (Name = "size")]string size, [FromForm (Name = "response_format")]string responseFormat, [FromForm (Name = "user")]string user)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ImagesResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"b64_json\" : \"b64_json\",\n    \"url\" : \"url\"\n  }, {\n    \"b64_json\" : \"b64_json\",\n    \"url\" : \"url\"\n  } ],\n  \"created\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ImagesResponse>(exampleJson)
            : default(ImagesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Classifies if text violates OpenAI&#39;s Content Policy
        /// </summary>
        /// <param name="createModerationRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/moderations")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateModeration")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreateModerationResponse), description: "OK")]
        public virtual IActionResult CreateModeration([FromBody]CreateModerationRequest createModerationRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreateModerationResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"model\" : \"model\",\n  \"id\" : \"id\",\n  \"results\" : [ {\n    \"category_scores\" : {\n      \"hate/threatening\" : 6.027456183070403,\n      \"sexual/minors\" : 5.637376656633329,\n      \"hate\" : 0.8008281904610115,\n      \"self-harm\" : 1.4658129805029452,\n      \"sexual\" : 5.962133916683182,\n      \"violence/graphic\" : 7.061401241503109,\n      \"violence\" : 2.3021358869347655\n    },\n    \"flagged\" : true,\n    \"categories\" : {\n      \"hate/threatening\" : true,\n      \"sexual/minors\" : true,\n      \"hate\" : true,\n      \"self-harm\" : true,\n      \"sexual\" : true,\n      \"violence/graphic\" : true,\n      \"violence\" : true\n    }\n  }, {\n    \"category_scores\" : {\n      \"hate/threatening\" : 6.027456183070403,\n      \"sexual/minors\" : 5.637376656633329,\n      \"hate\" : 0.8008281904610115,\n      \"self-harm\" : 1.4658129805029452,\n      \"sexual\" : 5.962133916683182,\n      \"violence/graphic\" : 7.061401241503109,\n      \"violence\" : 2.3021358869347655\n    },\n    \"flagged\" : true,\n    \"categories\" : {\n      \"hate/threatening\" : true,\n      \"sexual/minors\" : true,\n      \"hate\" : true,\n      \"self-harm\" : true,\n      \"sexual\" : true,\n      \"violence/graphic\" : true,\n      \"violence\" : true\n    }\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateModerationResponse>(exampleJson)
            : default(CreateModerationResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Transcribes audio into the input language.
        /// </summary>
        /// <param name="file">The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. </param>
        /// <param name="model"></param>
        /// <param name="prompt">An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. </param>
        /// <param name="responseFormat">The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. </param>
        /// <param name="temperature">The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. </param>
        /// <param name="language">The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. </param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/audio/transcriptions")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("CreateTranscription")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreateTranscriptionResponse), description: "OK")]
        public virtual IActionResult CreateTranscription([Required()]IFormFile file, [FromForm][Required()]CreateTranscriptionRequestModel model, [FromForm (Name = "prompt")]string prompt, [FromForm (Name = "response_format")]string responseFormat, [FromForm (Name = "temperature")]decimal? temperature, [FromForm (Name = "language")]string language)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreateTranscriptionResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"text\" : \"text\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateTranscriptionResponse>(exampleJson)
            : default(CreateTranscriptionResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Translates audio into English.
        /// </summary>
        /// <param name="file">The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. </param>
        /// <param name="model"></param>
        /// <param name="prompt">An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. </param>
        /// <param name="responseFormat">The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. </param>
        /// <param name="temperature">The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. </param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/audio/translations")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("CreateTranslation")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreateTranslationResponse), description: "OK")]
        public virtual IActionResult CreateTranslation([Required()]IFormFile file, [FromForm][Required()]CreateTranscriptionRequestModel model, [FromForm (Name = "prompt")]string prompt, [FromForm (Name = "response_format")]string responseFormat, [FromForm (Name = "temperature")]decimal? temperature)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreateTranslationResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"text\" : \"text\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateTranslationResponse>(exampleJson)
            : default(CreateTranslationResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete a file.
        /// </summary>
        /// <param name="fileId">The ID of the file to use for this request</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/v1/files/{file_id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeleteFileResponse), description: "OK")]
        public virtual IActionResult DeleteFile([FromRoute (Name = "file_id")][Required]string fileId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeleteFileResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"deleted\" : true,\n  \"id\" : \"id\",\n  \"object\" : \"object\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeleteFileResponse>(exampleJson)
            : default(DeleteFileResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete a fine-tuned model. You must have the Owner role in your organization.
        /// </summary>
        /// <param name="model">The model to delete</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/v1/models/{model}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteModel")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeleteModelResponse), description: "OK")]
        public virtual IActionResult DeleteModel([FromRoute (Name = "model")][Required]string model)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeleteModelResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"deleted\" : true,\n  \"id\" : \"id\",\n  \"object\" : \"object\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeleteModelResponse>(exampleJson)
            : default(DeleteModelResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns the contents of the specified file
        /// </summary>
        /// <param name="fileId">The ID of the file to use for this request</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/files/{file_id}/content")]
        [ValidateModelState]
        [SwaggerOperation("DownloadFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "OK")]
        public virtual IActionResult DownloadFile([FromRoute (Name = "file_id")][Required]string fileId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns a list of files that belong to the user&#39;s organization.
        /// </summary>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/files")]
        [ValidateModelState]
        [SwaggerOperation("ListFiles")]
        [SwaggerResponse(statusCode: 200, type: typeof(ListFilesResponse), description: "OK")]
        public virtual IActionResult ListFiles()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ListFilesResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  }, {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  } ],\n  \"object\" : \"object\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ListFilesResponse>(exampleJson)
            : default(ListFilesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get fine-grained status updates for a fine-tune job. 
        /// </summary>
        /// <param name="fineTuneId">The ID of the fine-tune job to get events for. </param>
        /// <param name="stream">Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned. </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/fine-tunes/{fine_tune_id}/events")]
        [ValidateModelState]
        [SwaggerOperation("ListFineTuneEvents")]
        [SwaggerResponse(statusCode: 200, type: typeof(ListFineTuneEventsResponse), description: "OK")]
        public virtual IActionResult ListFineTuneEvents([FromRoute (Name = "fine_tune_id")][Required]string fineTuneId, [FromQuery (Name = "stream")]bool? stream)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ListFineTuneEventsResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"level\" : \"level\",\n    \"created_at\" : 1,\n    \"message\" : \"message\",\n    \"object\" : \"object\"\n  }, {\n    \"level\" : \"level\",\n    \"created_at\" : 1,\n    \"message\" : \"message\",\n    \"object\" : \"object\"\n  } ],\n  \"object\" : \"object\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ListFineTuneEventsResponse>(exampleJson)
            : default(ListFineTuneEventsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List your organization&#39;s fine-tuning jobs 
        /// </summary>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/fine-tunes")]
        [ValidateModelState]
        [SwaggerOperation("ListFineTunes")]
        [SwaggerResponse(statusCode: 200, type: typeof(ListFineTunesResponse), description: "OK")]
        public virtual IActionResult ListFineTunes()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ListFineTunesResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"result_files\" : [ {\n      \"filename\" : \"filename\",\n      \"purpose\" : \"purpose\",\n      \"bytes\" : 0,\n      \"created_at\" : 6,\n      \"id\" : \"id\",\n      \"status_details\" : \"{}\",\n      \"object\" : \"object\",\n      \"status\" : \"status\"\n    }, {\n      \"filename\" : \"filename\",\n      \"purpose\" : \"purpose\",\n      \"bytes\" : 0,\n      \"created_at\" : 6,\n      \"id\" : \"id\",\n      \"status_details\" : \"{}\",\n      \"object\" : \"object\",\n      \"status\" : \"status\"\n    } ],\n    \"hyperparams\" : \"{}\",\n    \"fine_tuned_model\" : \"fine_tuned_model\",\n    \"created_at\" : 0,\n    \"training_files\" : [ {\n      \"filename\" : \"filename\",\n      \"purpose\" : \"purpose\",\n      \"bytes\" : 0,\n      \"created_at\" : 6,\n      \"id\" : \"id\",\n      \"status_details\" : \"{}\",\n      \"object\" : \"object\",\n      \"status\" : \"status\"\n    }, {\n      \"filename\" : \"filename\",\n      \"purpose\" : \"purpose\",\n      \"bytes\" : 0,\n      \"created_at\" : 6,\n      \"id\" : \"id\",\n      \"status_details\" : \"{}\",\n      \"object\" : \"object\",\n      \"status\" : \"status\"\n    } ],\n    \"updated_at\" : 6,\n    \"organization_id\" : \"organization_id\",\n    \"model\" : \"model\",\n    \"id\" : \"id\",\n    \"events\" : [ {\n      \"level\" : \"level\",\n      \"created_at\" : 1,\n      \"message\" : \"message\",\n      \"object\" : \"object\"\n    }, {\n      \"level\" : \"level\",\n      \"created_at\" : 1,\n      \"message\" : \"message\",\n      \"object\" : \"object\"\n    } ],\n    \"object\" : \"object\",\n    \"status\" : \"status\",\n    \"validation_files\" : [ {\n      \"filename\" : \"filename\",\n      \"purpose\" : \"purpose\",\n      \"bytes\" : 0,\n      \"created_at\" : 6,\n      \"id\" : \"id\",\n      \"status_details\" : \"{}\",\n      \"object\" : \"object\",\n      \"status\" : \"status\"\n    }, {\n      \"filename\" : \"filename\",\n      \"purpose\" : \"purpose\",\n      \"bytes\" : 0,\n      \"created_at\" : 6,\n      \"id\" : \"id\",\n      \"status_details\" : \"{}\",\n      \"object\" : \"object\",\n      \"status\" : \"status\"\n    } ]\n  }, {\n    \"result_files\" : [ {\n      \"filename\" : \"filename\",\n      \"purpose\" : \"purpose\",\n      \"bytes\" : 0,\n      \"created_at\" : 6,\n      \"id\" : \"id\",\n      \"status_details\" : \"{}\",\n      \"object\" : \"object\",\n      \"status\" : \"status\"\n    }, {\n      \"filename\" : \"filename\",\n      \"purpose\" : \"purpose\",\n      \"bytes\" : 0,\n      \"created_at\" : 6,\n      \"id\" : \"id\",\n      \"status_details\" : \"{}\",\n      \"object\" : \"object\",\n      \"status\" : \"status\"\n    } ],\n    \"hyperparams\" : \"{}\",\n    \"fine_tuned_model\" : \"fine_tuned_model\",\n    \"created_at\" : 0,\n    \"training_files\" : [ {\n      \"filename\" : \"filename\",\n      \"purpose\" : \"purpose\",\n      \"bytes\" : 0,\n      \"created_at\" : 6,\n      \"id\" : \"id\",\n      \"status_details\" : \"{}\",\n      \"object\" : \"object\",\n      \"status\" : \"status\"\n    }, {\n      \"filename\" : \"filename\",\n      \"purpose\" : \"purpose\",\n      \"bytes\" : 0,\n      \"created_at\" : 6,\n      \"id\" : \"id\",\n      \"status_details\" : \"{}\",\n      \"object\" : \"object\",\n      \"status\" : \"status\"\n    } ],\n    \"updated_at\" : 6,\n    \"organization_id\" : \"organization_id\",\n    \"model\" : \"model\",\n    \"id\" : \"id\",\n    \"events\" : [ {\n      \"level\" : \"level\",\n      \"created_at\" : 1,\n      \"message\" : \"message\",\n      \"object\" : \"object\"\n    }, {\n      \"level\" : \"level\",\n      \"created_at\" : 1,\n      \"message\" : \"message\",\n      \"object\" : \"object\"\n    } ],\n    \"object\" : \"object\",\n    \"status\" : \"status\",\n    \"validation_files\" : [ {\n      \"filename\" : \"filename\",\n      \"purpose\" : \"purpose\",\n      \"bytes\" : 0,\n      \"created_at\" : 6,\n      \"id\" : \"id\",\n      \"status_details\" : \"{}\",\n      \"object\" : \"object\",\n      \"status\" : \"status\"\n    }, {\n      \"filename\" : \"filename\",\n      \"purpose\" : \"purpose\",\n      \"bytes\" : 0,\n      \"created_at\" : 6,\n      \"id\" : \"id\",\n      \"status_details\" : \"{}\",\n      \"object\" : \"object\",\n      \"status\" : \"status\"\n    } ]\n  } ],\n  \"object\" : \"object\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ListFineTunesResponse>(exampleJson)
            : default(ListFineTunesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Lists the currently available models, and provides basic information about each one such as the owner and availability.
        /// </summary>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/models")]
        [ValidateModelState]
        [SwaggerOperation("ListModels")]
        [SwaggerResponse(statusCode: 200, type: typeof(ListModelsResponse), description: "OK")]
        public virtual IActionResult ListModels()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ListModelsResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"created\" : 0,\n    \"owned_by\" : \"owned_by\",\n    \"id\" : \"id\",\n    \"object\" : \"object\"\n  }, {\n    \"created\" : 0,\n    \"owned_by\" : \"owned_by\",\n    \"id\" : \"id\",\n    \"object\" : \"object\"\n  } ],\n  \"object\" : \"object\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ListModelsResponse>(exampleJson)
            : default(ListModelsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns information about a specific file.
        /// </summary>
        /// <param name="fileId">The ID of the file to use for this request</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/files/{file_id}")]
        [ValidateModelState]
        [SwaggerOperation("RetrieveFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(OpenAIFile), description: "OK")]
        public virtual IActionResult RetrieveFile([FromRoute (Name = "file_id")][Required]string fileId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OpenAIFile));
            string exampleJson = null;
            exampleJson = "{\n  \"filename\" : \"filename\",\n  \"purpose\" : \"purpose\",\n  \"bytes\" : 0,\n  \"created_at\" : 6,\n  \"id\" : \"id\",\n  \"status_details\" : \"{}\",\n  \"object\" : \"object\",\n  \"status\" : \"status\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OpenAIFile>(exampleJson)
            : default(OpenAIFile);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
        /// </summary>
        /// <param name="fineTuneId">The ID of the fine-tune job </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/fine-tunes/{fine_tune_id}")]
        [ValidateModelState]
        [SwaggerOperation("RetrieveFineTune")]
        [SwaggerResponse(statusCode: 200, type: typeof(FineTune), description: "OK")]
        public virtual IActionResult RetrieveFineTune([FromRoute (Name = "fine_tune_id")][Required]string fineTuneId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(FineTune));
            string exampleJson = null;
            exampleJson = "{\n  \"result_files\" : [ {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  }, {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  } ],\n  \"hyperparams\" : \"{}\",\n  \"fine_tuned_model\" : \"fine_tuned_model\",\n  \"created_at\" : 0,\n  \"training_files\" : [ {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  }, {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  } ],\n  \"updated_at\" : 6,\n  \"organization_id\" : \"organization_id\",\n  \"model\" : \"model\",\n  \"id\" : \"id\",\n  \"events\" : [ {\n    \"level\" : \"level\",\n    \"created_at\" : 1,\n    \"message\" : \"message\",\n    \"object\" : \"object\"\n  }, {\n    \"level\" : \"level\",\n    \"created_at\" : 1,\n    \"message\" : \"message\",\n    \"object\" : \"object\"\n  } ],\n  \"object\" : \"object\",\n  \"status\" : \"status\",\n  \"validation_files\" : [ {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  }, {\n    \"filename\" : \"filename\",\n    \"purpose\" : \"purpose\",\n    \"bytes\" : 0,\n    \"created_at\" : 6,\n    \"id\" : \"id\",\n    \"status_details\" : \"{}\",\n    \"object\" : \"object\",\n    \"status\" : \"status\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FineTune>(exampleJson)
            : default(FineTune);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
        /// </summary>
        /// <param name="model">The ID of the model to use for this request</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/models/{model}")]
        [ValidateModelState]
        [SwaggerOperation("RetrieveModel")]
        [SwaggerResponse(statusCode: 200, type: typeof(Model), description: "OK")]
        public virtual IActionResult RetrieveModel([FromRoute (Name = "model")][Required]string model)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Model));
            string exampleJson = null;
            exampleJson = "{\n  \"created\" : 0,\n  \"owned_by\" : \"owned_by\",\n  \"id\" : \"id\",\n  \"object\" : \"object\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Model>(exampleJson)
            : default(Model);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
