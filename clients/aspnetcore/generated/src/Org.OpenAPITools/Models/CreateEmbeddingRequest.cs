/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateEmbeddingRequest : IEquatable<CreateEmbeddingRequest>
    {
        /// <summary>
        /// Gets or Sets Input
        /// </summary>
        [Required]
        [DataMember(Name="input", EmitDefaultValue=false)]
        public CreateEmbeddingRequestInput Input { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [Required]
        [DataMember(Name="model", EmitDefaultValue=false)]
        public CreateEmbeddingRequestModel Model { get; set; }


        /// <summary>
        /// The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
        /// </summary>
        /// <value>The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).</value>
        [TypeConverter(typeof(CustomEnumConverter<EncodingFormatEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum EncodingFormatEnum
        {
            
            /// <summary>
            /// Enum FloatEnum for float
            /// </summary>
            [EnumMember(Value = "float")]
            FloatEnum = 1,
            
            /// <summary>
            /// Enum Base64Enum for base64
            /// </summary>
            [EnumMember(Value = "base64")]
            Base64Enum = 2
        }

        /// <summary>
        /// The format to return the embeddings in. Can be either &#x60;float&#x60; or [&#x60;base64&#x60;](https://pypi.org/project/pybase64/).
        /// </summary>
        /// <value>The format to return the embeddings in. Can be either &#x60;float&#x60; or [&#x60;base64&#x60;](https://pypi.org/project/pybase64/).</value>
        /* <example>float</example> */
        [DataMember(Name="encoding_format", EmitDefaultValue=true)]
        public EncodingFormatEnum EncodingFormat { get; set; } = EncodingFormatEnum.FloatEnum;

        /// <summary>
        /// The number of dimensions the resulting output embeddings should have. Only supported in &#x60;text-embedding-3&#x60; and later models. 
        /// </summary>
        /// <value>The number of dimensions the resulting output embeddings should have. Only supported in &#x60;text-embedding-3&#x60; and later models. </value>
        [DataMember(Name="dimensions", EmitDefaultValue=true)]
        public int Dimensions { get; set; }

        /// <summary>
        /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
        /// </summary>
        /// <value>A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). </value>
        /* <example>user-1234</example> */
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateEmbeddingRequest {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  EncodingFormat: ").Append(EncodingFormat).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateEmbeddingRequest)obj);
        }

        /// <summary>
        /// Returns true if CreateEmbeddingRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateEmbeddingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateEmbeddingRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Input == other.Input ||
                    Input != null &&
                    Input.Equals(other.Input)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    EncodingFormat == other.EncodingFormat ||
                    
                    EncodingFormat.Equals(other.EncodingFormat)
                ) && 
                (
                    Dimensions == other.Dimensions ||
                    
                    Dimensions.Equals(other.Dimensions)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Input != null)
                    hashCode = hashCode * 59 + Input.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    
                    hashCode = hashCode * 59 + EncodingFormat.GetHashCode();
                    
                    hashCode = hashCode * 59 + Dimensions.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateEmbeddingRequest left, CreateEmbeddingRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateEmbeddingRequest left, CreateEmbeddingRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
