/*
 * OpenAI API
 *
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateModerationResponseResultsInnerCategories : IEquatable<CreateModerationResponseResultsInnerCategories>
    {
        /// <summary>
        /// Gets or Sets Hate
        /// </summary>
        [Required]
        [DataMember(Name="hate", EmitDefaultValue=true)]
        public bool Hate { get; set; }

        /// <summary>
        /// Gets or Sets HateThreatening
        /// </summary>
        [Required]
        [DataMember(Name="hate/threatening", EmitDefaultValue=true)]
        public bool HateThreatening { get; set; }

        /// <summary>
        /// Gets or Sets SelfHarm
        /// </summary>
        [Required]
        [DataMember(Name="self-harm", EmitDefaultValue=true)]
        public bool SelfHarm { get; set; }

        /// <summary>
        /// Gets or Sets Sexual
        /// </summary>
        [Required]
        [DataMember(Name="sexual", EmitDefaultValue=true)]
        public bool Sexual { get; set; }

        /// <summary>
        /// Gets or Sets SexualMinors
        /// </summary>
        [Required]
        [DataMember(Name="sexual/minors", EmitDefaultValue=true)]
        public bool SexualMinors { get; set; }

        /// <summary>
        /// Gets or Sets Violence
        /// </summary>
        [Required]
        [DataMember(Name="violence", EmitDefaultValue=true)]
        public bool Violence { get; set; }

        /// <summary>
        /// Gets or Sets ViolenceGraphic
        /// </summary>
        [Required]
        [DataMember(Name="violence/graphic", EmitDefaultValue=true)]
        public bool ViolenceGraphic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateModerationResponseResultsInnerCategories {\n");
            sb.Append("  Hate: ").Append(Hate).Append("\n");
            sb.Append("  HateThreatening: ").Append(HateThreatening).Append("\n");
            sb.Append("  SelfHarm: ").Append(SelfHarm).Append("\n");
            sb.Append("  Sexual: ").Append(Sexual).Append("\n");
            sb.Append("  SexualMinors: ").Append(SexualMinors).Append("\n");
            sb.Append("  Violence: ").Append(Violence).Append("\n");
            sb.Append("  ViolenceGraphic: ").Append(ViolenceGraphic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateModerationResponseResultsInnerCategories)obj);
        }

        /// <summary>
        /// Returns true if CreateModerationResponseResultsInnerCategories instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateModerationResponseResultsInnerCategories to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateModerationResponseResultsInnerCategories other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Hate == other.Hate ||
                    
                    Hate.Equals(other.Hate)
                ) && 
                (
                    HateThreatening == other.HateThreatening ||
                    
                    HateThreatening.Equals(other.HateThreatening)
                ) && 
                (
                    SelfHarm == other.SelfHarm ||
                    
                    SelfHarm.Equals(other.SelfHarm)
                ) && 
                (
                    Sexual == other.Sexual ||
                    
                    Sexual.Equals(other.Sexual)
                ) && 
                (
                    SexualMinors == other.SexualMinors ||
                    
                    SexualMinors.Equals(other.SexualMinors)
                ) && 
                (
                    Violence == other.Violence ||
                    
                    Violence.Equals(other.Violence)
                ) && 
                (
                    ViolenceGraphic == other.ViolenceGraphic ||
                    
                    ViolenceGraphic.Equals(other.ViolenceGraphic)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Hate.GetHashCode();
                    
                    hashCode = hashCode * 59 + HateThreatening.GetHashCode();
                    
                    hashCode = hashCode * 59 + SelfHarm.GetHashCode();
                    
                    hashCode = hashCode * 59 + Sexual.GetHashCode();
                    
                    hashCode = hashCode * 59 + SexualMinors.GetHashCode();
                    
                    hashCode = hashCode * 59 + Violence.GetHashCode();
                    
                    hashCode = hashCode * 59 + ViolenceGraphic.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateModerationResponseResultsInnerCategories left, CreateModerationResponseResultsInnerCategories right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateModerationResponseResultsInnerCategories left, CreateModerationResponseResultsInnerCategories right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
