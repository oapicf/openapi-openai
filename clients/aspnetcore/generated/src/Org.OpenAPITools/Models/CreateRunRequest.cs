/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateRunRequest : IEquatable<CreateRunRequest>
    {
        /// <summary>
        /// The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
        /// </summary>
        /// <value>The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.</value>
        [Required]
        [DataMember(Name="assistant_id", EmitDefaultValue=false)]
        public string AssistantId { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model", EmitDefaultValue=true)]
        public CreateRunRequestModel Model { get; set; }

        /// <summary>
        /// Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
        /// </summary>
        /// <value>Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.</value>
        [DataMember(Name="instructions", EmitDefaultValue=true)]
        public string Instructions { get; set; }

        /// <summary>
        /// Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
        /// </summary>
        /// <value>Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.</value>
        [DataMember(Name="additional_instructions", EmitDefaultValue=true)]
        public string AdditionalInstructions { get; set; }

        /// <summary>
        /// Adds additional messages to the thread before creating the run.
        /// </summary>
        /// <value>Adds additional messages to the thread before creating the run.</value>
        [DataMember(Name="additional_messages", EmitDefaultValue=true)]
        public List<CreateMessageRequest> AdditionalMessages { get; set; }

        /// <summary>
        /// Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
        /// </summary>
        /// <value>Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.</value>
        [DataMember(Name="tools", EmitDefaultValue=true)]
        public List<AssistantObjectToolsInner> Tools { get; set; }

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </value>
        [DataMember(Name="metadata", EmitDefaultValue=true)]
        public Object Metadata { get; set; }

        /// <summary>
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. 
        /// </summary>
        /// <value>What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. </value>
        /// <example>1</example>
        [Range(0, 2)]
        [DataMember(Name="temperature", EmitDefaultValue=true)]
        public decimal? Temperature { get; set; } = 1M;

        /// <summary>
        /// If &#x60;true&#x60;, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a &#x60;data: [DONE]&#x60; message. 
        /// </summary>
        /// <value>If &#x60;true&#x60;, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a &#x60;data: [DONE]&#x60; message. </value>
        [DataMember(Name="stream", EmitDefaultValue=true)]
        public bool? Stream { get; set; }

        /// <summary>
        /// The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status &#x60;complete&#x60;. See &#x60;incomplete_details&#x60; for more info. 
        /// </summary>
        /// <value>The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status &#x60;complete&#x60;. See &#x60;incomplete_details&#x60; for more info. </value>
        [DataMember(Name="max_prompt_tokens", EmitDefaultValue=true)]
        public int? MaxPromptTokens { get; set; }

        /// <summary>
        /// The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status &#x60;complete&#x60;. See &#x60;incomplete_details&#x60; for more info. 
        /// </summary>
        /// <value>The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status &#x60;complete&#x60;. See &#x60;incomplete_details&#x60; for more info. </value>
        [DataMember(Name="max_completion_tokens", EmitDefaultValue=true)]
        public int? MaxCompletionTokens { get; set; }

        /// <summary>
        /// Gets or Sets TruncationStrategy
        /// </summary>
        [DataMember(Name="truncation_strategy", EmitDefaultValue=false)]
        public TruncationObject TruncationStrategy { get; set; }

        /// <summary>
        /// Gets or Sets ToolChoice
        /// </summary>
        [DataMember(Name="tool_choice", EmitDefaultValue=false)]
        public AssistantsApiToolChoiceOption ToolChoice { get; set; }

        /// <summary>
        /// Gets or Sets ResponseFormat
        /// </summary>
        [DataMember(Name="response_format", EmitDefaultValue=false)]
        public AssistantsApiResponseFormatOption ResponseFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateRunRequest {\n");
            sb.Append("  AssistantId: ").Append(AssistantId).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("  AdditionalInstructions: ").Append(AdditionalInstructions).Append("\n");
            sb.Append("  AdditionalMessages: ").Append(AdditionalMessages).Append("\n");
            sb.Append("  Tools: ").Append(Tools).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  Stream: ").Append(Stream).Append("\n");
            sb.Append("  MaxPromptTokens: ").Append(MaxPromptTokens).Append("\n");
            sb.Append("  MaxCompletionTokens: ").Append(MaxCompletionTokens).Append("\n");
            sb.Append("  TruncationStrategy: ").Append(TruncationStrategy).Append("\n");
            sb.Append("  ToolChoice: ").Append(ToolChoice).Append("\n");
            sb.Append("  ResponseFormat: ").Append(ResponseFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateRunRequest)obj);
        }

        /// <summary>
        /// Returns true if CreateRunRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateRunRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateRunRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AssistantId == other.AssistantId ||
                    AssistantId != null &&
                    AssistantId.Equals(other.AssistantId)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    Instructions == other.Instructions ||
                    Instructions != null &&
                    Instructions.Equals(other.Instructions)
                ) && 
                (
                    AdditionalInstructions == other.AdditionalInstructions ||
                    AdditionalInstructions != null &&
                    AdditionalInstructions.Equals(other.AdditionalInstructions)
                ) && 
                (
                    AdditionalMessages == other.AdditionalMessages ||
                    AdditionalMessages != null &&
                    other.AdditionalMessages != null &&
                    AdditionalMessages.SequenceEqual(other.AdditionalMessages)
                ) && 
                (
                    Tools == other.Tools ||
                    Tools != null &&
                    other.Tools != null &&
                    Tools.SequenceEqual(other.Tools)
                ) && 
                (
                    Metadata == other.Metadata ||
                    Metadata != null &&
                    Metadata.Equals(other.Metadata)
                ) && 
                (
                    Temperature == other.Temperature ||
                    Temperature != null &&
                    Temperature.Equals(other.Temperature)
                ) && 
                (
                    Stream == other.Stream ||
                    Stream != null &&
                    Stream.Equals(other.Stream)
                ) && 
                (
                    MaxPromptTokens == other.MaxPromptTokens ||
                    MaxPromptTokens != null &&
                    MaxPromptTokens.Equals(other.MaxPromptTokens)
                ) && 
                (
                    MaxCompletionTokens == other.MaxCompletionTokens ||
                    MaxCompletionTokens != null &&
                    MaxCompletionTokens.Equals(other.MaxCompletionTokens)
                ) && 
                (
                    TruncationStrategy == other.TruncationStrategy ||
                    TruncationStrategy != null &&
                    TruncationStrategy.Equals(other.TruncationStrategy)
                ) && 
                (
                    ToolChoice == other.ToolChoice ||
                    ToolChoice != null &&
                    ToolChoice.Equals(other.ToolChoice)
                ) && 
                (
                    ResponseFormat == other.ResponseFormat ||
                    ResponseFormat != null &&
                    ResponseFormat.Equals(other.ResponseFormat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AssistantId != null)
                    hashCode = hashCode * 59 + AssistantId.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (Instructions != null)
                    hashCode = hashCode * 59 + Instructions.GetHashCode();
                    if (AdditionalInstructions != null)
                    hashCode = hashCode * 59 + AdditionalInstructions.GetHashCode();
                    if (AdditionalMessages != null)
                    hashCode = hashCode * 59 + AdditionalMessages.GetHashCode();
                    if (Tools != null)
                    hashCode = hashCode * 59 + Tools.GetHashCode();
                    if (Metadata != null)
                    hashCode = hashCode * 59 + Metadata.GetHashCode();
                    if (Temperature != null)
                    hashCode = hashCode * 59 + Temperature.GetHashCode();
                    if (Stream != null)
                    hashCode = hashCode * 59 + Stream.GetHashCode();
                    if (MaxPromptTokens != null)
                    hashCode = hashCode * 59 + MaxPromptTokens.GetHashCode();
                    if (MaxCompletionTokens != null)
                    hashCode = hashCode * 59 + MaxCompletionTokens.GetHashCode();
                    if (TruncationStrategy != null)
                    hashCode = hashCode * 59 + TruncationStrategy.GetHashCode();
                    if (ToolChoice != null)
                    hashCode = hashCode * 59 + ToolChoice.GetHashCode();
                    if (ResponseFormat != null)
                    hashCode = hashCode * 59 + ResponseFormat.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateRunRequest left, CreateRunRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateRunRequest left, CreateRunRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
