/*
 * OpenAI API
 *
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FineTune : IEquatable<FineTune>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets VarObject
        /// </summary>
        [Required]
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string VarObject { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [Required]
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [Required]
        [DataMember(Name="updated_at", EmitDefaultValue=true)]
        public int UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [Required]
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets FineTunedModel
        /// </summary>
        [Required]
        [DataMember(Name="fine_tuned_model", EmitDefaultValue=true)]
        public string FineTunedModel { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [Required]
        [DataMember(Name="organization_id", EmitDefaultValue=false)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Hyperparams
        /// </summary>
        [Required]
        [DataMember(Name="hyperparams", EmitDefaultValue=false)]
        public Object Hyperparams { get; set; }

        /// <summary>
        /// Gets or Sets TrainingFiles
        /// </summary>
        [Required]
        [DataMember(Name="training_files", EmitDefaultValue=false)]
        public List<OpenAIFile> TrainingFiles { get; set; }

        /// <summary>
        /// Gets or Sets ValidationFiles
        /// </summary>
        [Required]
        [DataMember(Name="validation_files", EmitDefaultValue=false)]
        public List<OpenAIFile> ValidationFiles { get; set; }

        /// <summary>
        /// Gets or Sets ResultFiles
        /// </summary>
        [Required]
        [DataMember(Name="result_files", EmitDefaultValue=false)]
        public List<OpenAIFile> ResultFiles { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<FineTuneEvent> Events { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FineTune {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VarObject: ").Append(VarObject).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  FineTunedModel: ").Append(FineTunedModel).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Hyperparams: ").Append(Hyperparams).Append("\n");
            sb.Append("  TrainingFiles: ").Append(TrainingFiles).Append("\n");
            sb.Append("  ValidationFiles: ").Append(ValidationFiles).Append("\n");
            sb.Append("  ResultFiles: ").Append(ResultFiles).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FineTune)obj);
        }

        /// <summary>
        /// Returns true if FineTune instances are equal
        /// </summary>
        /// <param name="other">Instance of FineTune to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FineTune other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    VarObject == other.VarObject ||
                    VarObject != null &&
                    VarObject.Equals(other.VarObject)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    FineTunedModel == other.FineTunedModel ||
                    FineTunedModel != null &&
                    FineTunedModel.Equals(other.FineTunedModel)
                ) && 
                (
                    OrganizationId == other.OrganizationId ||
                    OrganizationId != null &&
                    OrganizationId.Equals(other.OrganizationId)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Hyperparams == other.Hyperparams ||
                    Hyperparams != null &&
                    Hyperparams.Equals(other.Hyperparams)
                ) && 
                (
                    TrainingFiles == other.TrainingFiles ||
                    TrainingFiles != null &&
                    other.TrainingFiles != null &&
                    TrainingFiles.SequenceEqual(other.TrainingFiles)
                ) && 
                (
                    ValidationFiles == other.ValidationFiles ||
                    ValidationFiles != null &&
                    other.ValidationFiles != null &&
                    ValidationFiles.SequenceEqual(other.ValidationFiles)
                ) && 
                (
                    ResultFiles == other.ResultFiles ||
                    ResultFiles != null &&
                    other.ResultFiles != null &&
                    ResultFiles.SequenceEqual(other.ResultFiles)
                ) && 
                (
                    Events == other.Events ||
                    Events != null &&
                    other.Events != null &&
                    Events.SequenceEqual(other.Events)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (VarObject != null)
                    hashCode = hashCode * 59 + VarObject.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (FineTunedModel != null)
                    hashCode = hashCode * 59 + FineTunedModel.GetHashCode();
                    if (OrganizationId != null)
                    hashCode = hashCode * 59 + OrganizationId.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Hyperparams != null)
                    hashCode = hashCode * 59 + Hyperparams.GetHashCode();
                    if (TrainingFiles != null)
                    hashCode = hashCode * 59 + TrainingFiles.GetHashCode();
                    if (ValidationFiles != null)
                    hashCode = hashCode * 59 + ValidationFiles.GetHashCode();
                    if (ResultFiles != null)
                    hashCode = hashCode * 59 + ResultFiles.GetHashCode();
                    if (Events != null)
                    hashCode = hashCode * 59 + Events.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FineTune left, FineTune right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FineTune left, FineTune right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
