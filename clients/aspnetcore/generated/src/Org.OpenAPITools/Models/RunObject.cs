/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Represents an execution run on a [thread](/docs/api-reference/threads).
    /// </summary>
    [DataContract]
    public partial class RunObject : IEquatable<RunObject>
    {
        /// <summary>
        /// The identifier, which can be referenced in API endpoints.
        /// </summary>
        /// <value>The identifier, which can be referenced in API endpoints.</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// The object type, which is always `thread.run`.
        /// </summary>
        /// <value>The object type, which is always `thread.run`.</value>
        [TypeConverter(typeof(CustomEnumConverter<ObjectEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ObjectEnum
        {
            
            /// <summary>
            /// Enum ThreadRunEnum for thread.run
            /// </summary>
            [EnumMember(Value = "thread.run")]
            ThreadRunEnum = 1
        }

        /// <summary>
        /// The object type, which is always &#x60;thread.run&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;thread.run&#x60;.</value>
        [Required]
        [DataMember(Name="object", EmitDefaultValue=true)]
        public ObjectEnum Object { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run was created.</value>
        [Required]
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
        /// </summary>
        /// <value>The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.</value>
        [Required]
        [DataMember(Name="thread_id", EmitDefaultValue=false)]
        public string ThreadId { get; set; }

        /// <summary>
        /// The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
        /// </summary>
        /// <value>The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.</value>
        [Required]
        [DataMember(Name="assistant_id", EmitDefaultValue=false)]
        public string AssistantId { get; set; }


        /// <summary>
        /// The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
        /// </summary>
        /// <value>The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum QueuedEnum for queued
            /// </summary>
            [EnumMember(Value = "queued")]
            QueuedEnum = 1,
            
            /// <summary>
            /// Enum InProgressEnum for in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgressEnum = 2,
            
            /// <summary>
            /// Enum RequiresActionEnum for requires_action
            /// </summary>
            [EnumMember(Value = "requires_action")]
            RequiresActionEnum = 3,
            
            /// <summary>
            /// Enum CancellingEnum for cancelling
            /// </summary>
            [EnumMember(Value = "cancelling")]
            CancellingEnum = 4,
            
            /// <summary>
            /// Enum CancelledEnum for cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            CancelledEnum = 5,
            
            /// <summary>
            /// Enum FailedEnum for failed
            /// </summary>
            [EnumMember(Value = "failed")]
            FailedEnum = 6,
            
            /// <summary>
            /// Enum CompletedEnum for completed
            /// </summary>
            [EnumMember(Value = "completed")]
            CompletedEnum = 7,
            
            /// <summary>
            /// Enum ExpiredEnum for expired
            /// </summary>
            [EnumMember(Value = "expired")]
            ExpiredEnum = 8
        }

        /// <summary>
        /// The status of the run, which can be either &#x60;queued&#x60;, &#x60;in_progress&#x60;, &#x60;requires_action&#x60;, &#x60;cancelling&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.
        /// </summary>
        /// <value>The status of the run, which can be either &#x60;queued&#x60;, &#x60;in_progress&#x60;, &#x60;requires_action&#x60;, &#x60;cancelling&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.</value>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Gets or Sets RequiredAction
        /// </summary>
        [Required]
        [DataMember(Name="required_action", EmitDefaultValue=true)]
        public RunObjectRequiredAction RequiredAction { get; set; }

        /// <summary>
        /// Gets or Sets LastError
        /// </summary>
        [Required]
        [DataMember(Name="last_error", EmitDefaultValue=true)]
        public RunObjectLastError LastError { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run will expire.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run will expire.</value>
        [Required]
        [DataMember(Name="expires_at", EmitDefaultValue=true)]
        public int? ExpiresAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run was started.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run was started.</value>
        [Required]
        [DataMember(Name="started_at", EmitDefaultValue=true)]
        public int? StartedAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run was cancelled.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run was cancelled.</value>
        [Required]
        [DataMember(Name="cancelled_at", EmitDefaultValue=true)]
        public int? CancelledAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run failed.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run failed.</value>
        [Required]
        [DataMember(Name="failed_at", EmitDefaultValue=true)]
        public int? FailedAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run was completed.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run was completed.</value>
        [Required]
        [DataMember(Name="completed_at", EmitDefaultValue=true)]
        public int? CompletedAt { get; set; }

        /// <summary>
        /// Gets or Sets IncompleteDetails
        /// </summary>
        [Required]
        [DataMember(Name="incomplete_details", EmitDefaultValue=true)]
        public RunObjectIncompleteDetails IncompleteDetails { get; set; }

        /// <summary>
        /// The model that the [assistant](/docs/api-reference/assistants) used for this run.
        /// </summary>
        /// <value>The model that the [assistant](/docs/api-reference/assistants) used for this run.</value>
        [Required]
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }

        /// <summary>
        /// The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
        /// </summary>
        /// <value>The instructions that the [assistant](/docs/api-reference/assistants) used for this run.</value>
        [Required]
        [DataMember(Name="instructions", EmitDefaultValue=false)]
        public string Instructions { get; set; }

        /// <summary>
        /// The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
        /// </summary>
        /// <value>The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.</value>
        [Required]
        [DataMember(Name="tools", EmitDefaultValue=false)]
        public List<AssistantObjectToolsInner> Tools { get; set; }

        /// <summary>
        /// The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
        /// </summary>
        /// <value>The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.</value>
        [Required]
        [DataMember(Name="file_ids", EmitDefaultValue=false)]
        public List<string> FileIds { get; set; }

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </value>
        [Required]
        [DataMember(Name="metadata", EmitDefaultValue=true)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [Required]
        [DataMember(Name="usage", EmitDefaultValue=true)]
        public RunCompletionUsage Usage { get; set; }

        /// <summary>
        /// The sampling temperature used for this run. If not set, defaults to 1.
        /// </summary>
        /// <value>The sampling temperature used for this run. If not set, defaults to 1.</value>
        [DataMember(Name="temperature", EmitDefaultValue=true)]
        public decimal? Temperature { get; set; }

        /// <summary>
        /// The maximum number of prompt tokens specified to have been used over the course of the run. 
        /// </summary>
        /// <value>The maximum number of prompt tokens specified to have been used over the course of the run. </value>
        [Required]
        [DataMember(Name="max_prompt_tokens", EmitDefaultValue=true)]
        public int? MaxPromptTokens { get; set; }

        /// <summary>
        /// The maximum number of completion tokens specified to have been used over the course of the run. 
        /// </summary>
        /// <value>The maximum number of completion tokens specified to have been used over the course of the run. </value>
        [Required]
        [DataMember(Name="max_completion_tokens", EmitDefaultValue=true)]
        public int? MaxCompletionTokens { get; set; }

        /// <summary>
        /// Gets or Sets TruncationStrategy
        /// </summary>
        [Required]
        [DataMember(Name="truncation_strategy", EmitDefaultValue=false)]
        public TruncationObject TruncationStrategy { get; set; }

        /// <summary>
        /// Gets or Sets ToolChoice
        /// </summary>
        [Required]
        [DataMember(Name="tool_choice", EmitDefaultValue=false)]
        public AssistantsApiToolChoiceOption ToolChoice { get; set; }

        /// <summary>
        /// Gets or Sets ResponseFormat
        /// </summary>
        [Required]
        [DataMember(Name="response_format", EmitDefaultValue=false)]
        public AssistantsApiResponseFormatOption ResponseFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RunObject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("  AssistantId: ").Append(AssistantId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  RequiredAction: ").Append(RequiredAction).Append("\n");
            sb.Append("  LastError: ").Append(LastError).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  CancelledAt: ").Append(CancelledAt).Append("\n");
            sb.Append("  FailedAt: ").Append(FailedAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  IncompleteDetails: ").Append(IncompleteDetails).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("  Tools: ").Append(Tools).Append("\n");
            sb.Append("  FileIds: ").Append(FileIds).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  MaxPromptTokens: ").Append(MaxPromptTokens).Append("\n");
            sb.Append("  MaxCompletionTokens: ").Append(MaxCompletionTokens).Append("\n");
            sb.Append("  TruncationStrategy: ").Append(TruncationStrategy).Append("\n");
            sb.Append("  ToolChoice: ").Append(ToolChoice).Append("\n");
            sb.Append("  ResponseFormat: ").Append(ResponseFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RunObject)obj);
        }

        /// <summary>
        /// Returns true if RunObject instances are equal
        /// </summary>
        /// <param name="other">Instance of RunObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RunObject other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Object == other.Object ||
                    
                    Object.Equals(other.Object)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    ThreadId == other.ThreadId ||
                    ThreadId != null &&
                    ThreadId.Equals(other.ThreadId)
                ) && 
                (
                    AssistantId == other.AssistantId ||
                    AssistantId != null &&
                    AssistantId.Equals(other.AssistantId)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    RequiredAction == other.RequiredAction ||
                    RequiredAction != null &&
                    RequiredAction.Equals(other.RequiredAction)
                ) && 
                (
                    LastError == other.LastError ||
                    LastError != null &&
                    LastError.Equals(other.LastError)
                ) && 
                (
                    ExpiresAt == other.ExpiresAt ||
                    ExpiresAt != null &&
                    ExpiresAt.Equals(other.ExpiresAt)
                ) && 
                (
                    StartedAt == other.StartedAt ||
                    StartedAt != null &&
                    StartedAt.Equals(other.StartedAt)
                ) && 
                (
                    CancelledAt == other.CancelledAt ||
                    CancelledAt != null &&
                    CancelledAt.Equals(other.CancelledAt)
                ) && 
                (
                    FailedAt == other.FailedAt ||
                    FailedAt != null &&
                    FailedAt.Equals(other.FailedAt)
                ) && 
                (
                    CompletedAt == other.CompletedAt ||
                    CompletedAt != null &&
                    CompletedAt.Equals(other.CompletedAt)
                ) && 
                (
                    IncompleteDetails == other.IncompleteDetails ||
                    IncompleteDetails != null &&
                    IncompleteDetails.Equals(other.IncompleteDetails)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    Instructions == other.Instructions ||
                    Instructions != null &&
                    Instructions.Equals(other.Instructions)
                ) && 
                (
                    Tools == other.Tools ||
                    Tools != null &&
                    other.Tools != null &&
                    Tools.SequenceEqual(other.Tools)
                ) && 
                (
                    FileIds == other.FileIds ||
                    FileIds != null &&
                    other.FileIds != null &&
                    FileIds.SequenceEqual(other.FileIds)
                ) && 
                (
                    Metadata == other.Metadata ||
                    Metadata != null &&
                    Metadata.Equals(other.Metadata)
                ) && 
                (
                    Usage == other.Usage ||
                    Usage != null &&
                    Usage.Equals(other.Usage)
                ) && 
                (
                    Temperature == other.Temperature ||
                    Temperature != null &&
                    Temperature.Equals(other.Temperature)
                ) && 
                (
                    MaxPromptTokens == other.MaxPromptTokens ||
                    MaxPromptTokens != null &&
                    MaxPromptTokens.Equals(other.MaxPromptTokens)
                ) && 
                (
                    MaxCompletionTokens == other.MaxCompletionTokens ||
                    MaxCompletionTokens != null &&
                    MaxCompletionTokens.Equals(other.MaxCompletionTokens)
                ) && 
                (
                    TruncationStrategy == other.TruncationStrategy ||
                    TruncationStrategy != null &&
                    TruncationStrategy.Equals(other.TruncationStrategy)
                ) && 
                (
                    ToolChoice == other.ToolChoice ||
                    ToolChoice != null &&
                    ToolChoice.Equals(other.ToolChoice)
                ) && 
                (
                    ResponseFormat == other.ResponseFormat ||
                    ResponseFormat != null &&
                    ResponseFormat.Equals(other.ResponseFormat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + Object.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (ThreadId != null)
                    hashCode = hashCode * 59 + ThreadId.GetHashCode();
                    if (AssistantId != null)
                    hashCode = hashCode * 59 + AssistantId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (RequiredAction != null)
                    hashCode = hashCode * 59 + RequiredAction.GetHashCode();
                    if (LastError != null)
                    hashCode = hashCode * 59 + LastError.GetHashCode();
                    if (ExpiresAt != null)
                    hashCode = hashCode * 59 + ExpiresAt.GetHashCode();
                    if (StartedAt != null)
                    hashCode = hashCode * 59 + StartedAt.GetHashCode();
                    if (CancelledAt != null)
                    hashCode = hashCode * 59 + CancelledAt.GetHashCode();
                    if (FailedAt != null)
                    hashCode = hashCode * 59 + FailedAt.GetHashCode();
                    if (CompletedAt != null)
                    hashCode = hashCode * 59 + CompletedAt.GetHashCode();
                    if (IncompleteDetails != null)
                    hashCode = hashCode * 59 + IncompleteDetails.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (Instructions != null)
                    hashCode = hashCode * 59 + Instructions.GetHashCode();
                    if (Tools != null)
                    hashCode = hashCode * 59 + Tools.GetHashCode();
                    if (FileIds != null)
                    hashCode = hashCode * 59 + FileIds.GetHashCode();
                    if (Metadata != null)
                    hashCode = hashCode * 59 + Metadata.GetHashCode();
                    if (Usage != null)
                    hashCode = hashCode * 59 + Usage.GetHashCode();
                    if (Temperature != null)
                    hashCode = hashCode * 59 + Temperature.GetHashCode();
                    if (MaxPromptTokens != null)
                    hashCode = hashCode * 59 + MaxPromptTokens.GetHashCode();
                    if (MaxCompletionTokens != null)
                    hashCode = hashCode * 59 + MaxCompletionTokens.GetHashCode();
                    if (TruncationStrategy != null)
                    hashCode = hashCode * 59 + TruncationStrategy.GetHashCode();
                    if (ToolChoice != null)
                    hashCode = hashCode * 59 + ToolChoice.GetHashCode();
                    if (ResponseFormat != null)
                    hashCode = hashCode * 59 + ResponseFormat.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RunObject left, RunObject right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RunObject left, RunObject right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
