{
  "namespace": "model",
  "type": "record",
  "doc": "",
  "name": "CreateChatCompletionRequest",
  "fields": [
    {
      "name": "messages",
      "type": {
        "type": "array",
        "items": "model.ChatCompletionRequestMessage"
      },
      "doc": "A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models)."
    },
    {
      "name": "model",
      "type": "model.CreateChatCompletionRequestModel",
      "doc": ""
    },
    {
      "name": "frequency_penalty",
      "type": ["null", "double"],
      "doc": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) ",
      "default": null
    },
    {
      "name": "logit_bias",
      "type": ["null", {
        "type": "map",
        "items": "int"
      }],
      "doc": "Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. ",
      "default": null
    },
    {
      "name": "logprobs",
      "type": ["null", "boolean"],
      "doc": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.",
      "default": null
    },
    {
      "name": "top_logprobs",
      "type": ["null", "int"],
      "doc": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.",
      "default": null
    },
    {
      "name": "max_tokens",
      "type": ["null", "int"],
      "doc": "The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.  The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. ",
      "default": null
    },
    {
      "name": "n",
      "type": ["null", "int"],
      "doc": "How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.",
      "default": null
    },
    {
      "name": "presence_penalty",
      "type": ["null", "double"],
      "doc": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) ",
      "default": null
    },
    {
      "name": "response_format",
      "type": ["null", "model.CreateChatCompletionRequestResponseFormat"],
      "doc": "",
      "default": null
    },
    {
      "name": "seed",
      "type": ["null", "int"],
      "doc": "This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend. ",
      "default": null
    },
    {
      "name": "stop",
      "type": ["null", "model.CreateChatCompletionRequestStop"],
      "doc": "",
      "default": null
    },
    {
      "name": "stream",
      "type": ["null", "boolean"],
      "doc": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). ",
      "default": null
    },
    {
      "name": "temperature",
      "type": ["null", "double"],
      "doc": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. ",
      "default": null
    },
    {
      "name": "top_p",
      "type": ["null", "double"],
      "doc": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. ",
      "default": null
    },
    {
      "name": "tools",
      "type": ["null", {
        "type": "array",
        "items": "model.ChatCompletionTool"
      }],
      "doc": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported. ",
      "default": null
    },
    {
      "name": "tool_choice",
      "type": ["null", "model.ChatCompletionToolChoiceOption"],
      "doc": "",
      "default": null
    },
    {
      "name": "user",
      "type": ["null", "string"],
      "doc": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). ",
      "default": null
    },
    {
      "name": "function_call",
      "type": ["null", "model.CreateChatCompletionRequestFunctionCall"],
      "doc": "",
      "default": null
    },
    {
      "name": "functions",
      "type": ["null", {
        "type": "array",
        "items": "model.ChatCompletionFunctions"
      }],
      "doc": "Deprecated in favor of `tools`.  A list of functions the model may generate JSON inputs for. ",
      "default": null
    }
  ]

}
