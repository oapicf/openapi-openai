/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AssistantsApi.h
 *
 * 
 */

#ifndef AssistantsApi_H_
#define AssistantsApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "AssistantFileObject.h"
#include "AssistantObject.h"
#include "CreateAssistantFileRequest.h"
#include "CreateAssistantRequest.h"
#include "CreateMessageRequest.h"
#include "CreateRunRequest.h"
#include "CreateThreadAndRunRequest.h"
#include "CreateThreadRequest.h"
#include "DeleteAssistantFileResponse.h"
#include "DeleteAssistantResponse.h"
#include "DeleteThreadResponse.h"
#include "ListAssistantFilesResponse.h"
#include "ListAssistantsResponse.h"
#include "ListMessageFilesResponse.h"
#include "ListMessagesResponse.h"
#include "ListRunStepsResponse.h"
#include "ListRunsResponse.h"
#include "MessageFileObject.h"
#include "MessageObject.h"
#include "ModifyAssistantRequest.h"
#include "ModifyMessageRequest.h"
#include "ModifyRunRequest.h"
#include "ModifyThreadRequest.h"
#include "RunObject.h"
#include "RunStepObject.h"
#include "SubmitToolOutputsRunRequest.h"
#include "ThreadObject.h"
#include <string>

namespace org::openapitools::server::api
{

class  AssistantsApi : public ApiBase {
public:
    explicit AssistantsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~AssistantsApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void cancel_run_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_assistant_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_assistant_file_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_message_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_run_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_thread_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_thread_and_run_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_assistant_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_assistant_file_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_thread_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_assistant_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_assistant_file_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_message_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_message_file_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_run_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_run_step_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_thread_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void list_assistant_files_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void list_assistants_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void list_message_files_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void list_messages_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void list_run_steps_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void list_runs_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void modify_assistant_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void modify_message_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void modify_run_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void modify_thread_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void submit_tool_ouputs_to_run_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void assistants_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Cancels a run that is &#x60;in_progress&#x60;.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread to which this run belongs.</param>
    /// <param name="runId">The ID of the run to cancel.</param>
    virtual void cancel_run(const std::string &threadId, const std::string &runId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Create an assistant with a model and instructions.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createAssistantRequest"></param>
    virtual void create_assistant(const org::openapitools::server::model::CreateAssistantRequest &createAssistantRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
    /// <param name="createAssistantFileRequest"></param>
    virtual void create_assistant_file(const std::string &assistantId, const org::openapitools::server::model::CreateAssistantFileRequest &createAssistantFileRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Create a message.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
    /// <param name="createMessageRequest"></param>
    virtual void create_message(const std::string &threadId, const org::openapitools::server::model::CreateMessageRequest &createMessageRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Create a run.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread to run.</param>
    /// <param name="createRunRequest"></param>
    virtual void create_run(const std::string &threadId, const org::openapitools::server::model::CreateRunRequest &createRunRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Create a thread.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createThreadRequest"> (optional)</param>
    virtual void create_thread(const org::openapitools::server::model::CreateThreadRequest &createThreadRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Create a thread and run it in one request.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createThreadAndRunRequest"></param>
    virtual void create_thread_and_run(const org::openapitools::server::model::CreateThreadAndRunRequest &createThreadAndRunRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Delete an assistant.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="assistantId">The ID of the assistant to delete.</param>
    virtual void delete_assistant(const std::string &assistantId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Delete an assistant file.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
    /// <param name="fileId">The ID of the file to delete.</param>
    virtual void delete_assistant_file(const std::string &assistantId, const std::string &fileId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Delete a thread.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread to delete.</param>
    virtual void delete_thread(const std::string &threadId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Retrieves an assistant.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="assistantId">The ID of the assistant to retrieve.</param>
    virtual void get_assistant(const std::string &assistantId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Retrieves an AssistantFile.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
    /// <param name="fileId">The ID of the file we&#39;re getting.</param>
    virtual void get_assistant_file(const std::string &assistantId, const std::string &fileId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Retrieve a message.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
    /// <param name="messageId">The ID of the message to retrieve.</param>
    virtual void get_message(const std::string &threadId, const std::string &messageId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Retrieves a message file.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
    /// <param name="messageId">The ID of the message the file belongs to.</param>
    /// <param name="fileId">The ID of the file being retrieved.</param>
    virtual void get_message_file(const std::string &threadId, const std::string &messageId, const std::string &fileId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Retrieves a run.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
    /// <param name="runId">The ID of the run to retrieve.</param>
    virtual void get_run(const std::string &threadId, const std::string &runId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Retrieves a run step.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
    /// <param name="runId">The ID of the run to which the run step belongs.</param>
    /// <param name="stepId">The ID of the run step to retrieve.</param>
    virtual void get_run_step(const std::string &threadId, const std::string &runId, const std::string &stepId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Retrieves a thread.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread to retrieve.</param>
    virtual void get_thread(const std::string &threadId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Returns a list of assistant files.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
    /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
    /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to &quot;desc&quot;)</param>
    /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional, default to &quot;&quot;)</param>
    /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional, default to &quot;&quot;)</param>
    virtual void list_assistant_files(const std::string &assistantId, const std::optional<int32_t> &limit, const std::optional<std::string> &order, const std::optional<std::string> &after, const std::optional<std::string> &before, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Returns a list of assistants.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
    /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to &quot;desc&quot;)</param>
    /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional, default to &quot;&quot;)</param>
    /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional, default to &quot;&quot;)</param>
    virtual void list_assistants(const std::optional<int32_t> &limit, const std::optional<std::string> &order, const std::optional<std::string> &after, const std::optional<std::string> &before, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Returns a list of message files.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
    /// <param name="messageId">The ID of the message that the files belongs to.</param>
    /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
    /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to &quot;desc&quot;)</param>
    /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional, default to &quot;&quot;)</param>
    /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional, default to &quot;&quot;)</param>
    virtual void list_message_files(const std::string &threadId, const std::string &messageId, const std::optional<int32_t> &limit, const std::optional<std::string> &order, const std::optional<std::string> &after, const std::optional<std::string> &before, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Returns a list of messages for a given thread.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
    /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
    /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to &quot;desc&quot;)</param>
    /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional, default to &quot;&quot;)</param>
    /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional, default to &quot;&quot;)</param>
    /// <param name="runId">Filter messages by the run ID that generated them.  (optional, default to &quot;&quot;)</param>
    virtual void list_messages(const std::string &threadId, const std::optional<int32_t> &limit, const std::optional<std::string> &order, const std::optional<std::string> &after, const std::optional<std::string> &before, const std::optional<std::string> &runId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Returns a list of run steps belonging to a run.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
    /// <param name="runId">The ID of the run the run steps belong to.</param>
    /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
    /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to &quot;desc&quot;)</param>
    /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional, default to &quot;&quot;)</param>
    /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional, default to &quot;&quot;)</param>
    virtual void list_run_steps(const std::string &threadId, const std::string &runId, const std::optional<int32_t> &limit, const std::optional<std::string> &order, const std::optional<std::string> &after, const std::optional<std::string> &before, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Returns a list of runs belonging to a thread.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread the run belongs to.</param>
    /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
    /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to &quot;desc&quot;)</param>
    /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional, default to &quot;&quot;)</param>
    /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional, default to &quot;&quot;)</param>
    virtual void list_runs(const std::string &threadId, const std::optional<int32_t> &limit, const std::optional<std::string> &order, const std::optional<std::string> &after, const std::optional<std::string> &before, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Modifies an assistant.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="assistantId">The ID of the assistant to modify.</param>
    /// <param name="modifyAssistantRequest"></param>
    virtual void modify_assistant(const std::string &assistantId, const org::openapitools::server::model::ModifyAssistantRequest &modifyAssistantRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Modifies a message.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread to which this message belongs.</param>
    /// <param name="messageId">The ID of the message to modify.</param>
    /// <param name="modifyMessageRequest"></param>
    virtual void modify_message(const std::string &threadId, const std::string &messageId, const org::openapitools::server::model::ModifyMessageRequest &modifyMessageRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Modifies a run.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
    /// <param name="runId">The ID of the run to modify.</param>
    /// <param name="modifyRunRequest"></param>
    virtual void modify_run(const std::string &threadId, const std::string &runId, const org::openapitools::server::model::ModifyRunRequest &modifyRunRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Modifies a thread.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
    /// <param name="modifyThreadRequest"></param>
    virtual void modify_thread(const std::string &threadId, const org::openapitools::server::model::ModifyThreadRequest &modifyThreadRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
    /// <param name="runId">The ID of the run that requires the tool output submission.</param>
    /// <param name="submitToolOutputsRunRequest"></param>
    virtual void submit_tool_ouputs_to_run(const std::string &threadId, const std::string &runId, const org::openapitools::server::model::SubmitToolOutputsRunRequest &submitToolOutputsRunRequest, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* AssistantsApi_H_ */

