/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * FineTuningApi.h
 *
 * 
 */

#ifndef FineTuningApi_H_
#define FineTuningApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "CreateFineTuningJobRequest.h"
#include "FineTuningJob.h"
#include "ListFineTuningJobCheckpointsResponse.h"
#include "ListFineTuningJobEventsResponse.h"
#include "ListPaginatedFineTuningJobsResponse.h"
#include <string>

namespace org::openapitools::server::api
{

class  FineTuningApi : public ApiBase {
public:
    explicit FineTuningApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~FineTuningApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void cancel_fine_tuning_job_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_fine_tuning_job_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void list_fine_tuning_events_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void list_fine_tuning_job_checkpoints_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void list_paginated_fine_tuning_jobs_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void retrieve_fine_tuning_job_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void fine_tuning_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Immediately cancel a fine-tune job. 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fineTuningJobId">The ID of the fine-tuning job to cancel. </param>
    virtual void cancel_fine_tuning_job(const std::string &fineTuningJobId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createFineTuningJobRequest"></param>
    virtual void create_fine_tuning_job(const org::openapitools::server::model::CreateFineTuningJobRequest &createFineTuningJobRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get status updates for a fine-tuning job. 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fineTuningJobId">The ID of the fine-tuning job to get events for. </param>
    /// <param name="after">Identifier for the last event from the previous pagination request. (optional, default to &quot;&quot;)</param>
    /// <param name="limit">Number of events to retrieve. (optional, default to 20)</param>
    virtual void list_fine_tuning_events(const std::string &fineTuningJobId, const std::optional<std::string> &after, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List checkpoints for a fine-tuning job. 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fineTuningJobId">The ID of the fine-tuning job to get checkpoints for. </param>
    /// <param name="after">Identifier for the last checkpoint ID from the previous pagination request. (optional, default to &quot;&quot;)</param>
    /// <param name="limit">Number of checkpoints to retrieve. (optional, default to 10)</param>
    virtual void list_fine_tuning_job_checkpoints(const std::string &fineTuningJobId, const std::optional<std::string> &after, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List your organization&#39;s fine-tuning jobs 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="after">Identifier for the last job from the previous pagination request. (optional, default to &quot;&quot;)</param>
    /// <param name="limit">Number of fine-tuning jobs to retrieve. (optional, default to 20)</param>
    virtual void list_paginated_fine_tuning_jobs(const std::optional<std::string> &after, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fineTuningJobId">The ID of the fine-tuning job. </param>
    virtual void retrieve_fine_tuning_job(const std::string &fineTuningJobId, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* FineTuningApi_H_ */

