/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ModelsApi.h
 *
 * 
 */

#ifndef ModelsApi_H_
#define ModelsApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "DeleteModelResponse.h"
#include "ListModelsResponse.h"
#include "Model.h"
#include <string>

namespace org::openapitools::server::api
{

class  ModelsApi : public ApiBase {
public:
    explicit ModelsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~ModelsApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void delete_model_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void list_models_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void retrieve_model_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void models_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="model">The model to delete</param>
    virtual void delete_model(const std::string &model, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Lists the currently available models, and provides basic information about each one such as the owner and availability.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void list_models(Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="model">The ID of the model to use for this request</param>
    virtual void retrieve_model(const std::string &model, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* ModelsApi_H_ */

