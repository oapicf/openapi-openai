/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OpenAIApi.h
 *
 * 
 */

#ifndef OpenAIApi_H_
#define OpenAIApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "CreateChatCompletionRequest.h"
#include "CreateChatCompletionResponse.h"
#include "CreateCompletionRequest.h"
#include "CreateCompletionResponse.h"
#include "CreateEditRequest.h"
#include "CreateEditResponse.h"
#include "CreateEmbeddingRequest.h"
#include "CreateEmbeddingResponse.h"
#include "CreateFineTuneRequest.h"
#include "CreateImageRequest.h"
#include "CreateModerationRequest.h"
#include "CreateModerationResponse.h"
#include "CreateTranscriptionRequest_model.h"
#include "CreateTranscriptionResponse.h"
#include "CreateTranslationResponse.h"
#include "DeleteFileResponse.h"
#include "DeleteModelResponse.h"
#include "FineTune.h"
#include "ImagesResponse.h"
#include "ListFilesResponse.h"
#include "ListFineTuneEventsResponse.h"
#include "ListFineTunesResponse.h"
#include "ListModelsResponse.h"
#include "Model.h"
#include "OpenAIFile.h"
#include <string>

namespace org::openapitools::server::api
{

class  OpenAIApi : public ApiBase {
public:
    explicit OpenAIApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~OpenAIApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void cancel_fine_tune_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_chat_completion_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_completion_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_edit_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_embedding_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_file_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_fine_tune_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_image_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_image_edit_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_image_variation_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_moderation_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_transcription_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_translation_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_file_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_model_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void download_file_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void list_files_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void list_fine_tune_events_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void list_fine_tunes_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void list_models_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void retrieve_file_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void retrieve_fine_tune_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void retrieve_model_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void open_ai_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Immediately cancel a fine-tune job. 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fineTuneId">The ID of the fine-tune job to cancel </param>
    virtual void cancel_fine_tune(const std::string &fineTuneId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Creates a model response for the given chat conversation.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createChatCompletionRequest"></param>
    virtual void create_chat_completion(const org::openapitools::server::model::CreateChatCompletionRequest &createChatCompletionRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Creates a completion for the provided prompt and parameters.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createCompletionRequest"></param>
    virtual void create_completion(const org::openapitools::server::model::CreateCompletionRequest &createCompletionRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Creates a new edit for the provided input, instruction, and parameters.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createEditRequest"></param>
    virtual void create_edit(const org::openapitools::server::model::CreateEditRequest &createEditRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Creates an embedding vector representing the input text.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createEmbeddingRequest"></param>
    virtual void create_embedding(const org::openapitools::server::model::CreateEmbeddingRequest &createEmbeddingRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void create_file(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createFineTuneRequest"></param>
    virtual void create_fine_tune(const org::openapitools::server::model::CreateFineTuneRequest &createFineTuneRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Creates an image given a prompt.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createImageRequest"></param>
    virtual void create_image(const org::openapitools::server::model::CreateImageRequest &createImageRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Creates an edited or extended image given an original image and a prompt.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void create_image_edit(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Creates a variation of a given image.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void create_image_variation(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Classifies if text violates OpenAI&#39;s Content Policy
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createModerationRequest"></param>
    virtual void create_moderation(const org::openapitools::server::model::CreateModerationRequest &createModerationRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Transcribes audio into the input language.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void create_transcription(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Translates audio into English.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void create_translation(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Delete a file.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fileId">The ID of the file to use for this request</param>
    virtual void delete_file(const std::string &fileId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Delete a fine-tuned model. You must have the Owner role in your organization.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="model">The model to delete</param>
    virtual void delete_model(const std::string &model, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Returns the contents of the specified file
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fileId">The ID of the file to use for this request</param>
    virtual void download_file(const std::string &fileId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Returns a list of files that belong to the user&#39;s organization.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void list_files(Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get fine-grained status updates for a fine-tune job. 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fineTuneId">The ID of the fine-tune job to get events for. </param>
    /// <param name="stream">Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.  (optional, default to false)</param>
    virtual void list_fine_tune_events(const std::string &fineTuneId, const std::optional<bool> &stream, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List your organization&#39;s fine-tuning jobs 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void list_fine_tunes(Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Lists the currently available models, and provides basic information about each one such as the owner and availability.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void list_models(Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Returns information about a specific file.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fileId">The ID of the file to use for this request</param>
    virtual void retrieve_file(const std::string &fileId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fineTuneId">The ID of the fine-tune job </param>
    virtual void retrieve_fine_tune(const std::string &fineTuneId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="model">The ID of the model to use for this request</param>
    virtual void retrieve_model(const std::string &model, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* OpenAIApi_H_ */

