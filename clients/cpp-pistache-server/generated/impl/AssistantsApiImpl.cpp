/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "AssistantsApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

AssistantsApiImpl::AssistantsApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : AssistantsApi(rtr)
{
}

void AssistantsApiImpl::cancel_run(const std::string &threadId, const std::string &runId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::create_assistant(const CreateAssistantRequest &createAssistantRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::create_assistant_file(const std::string &assistantId, const CreateAssistantFileRequest &createAssistantFileRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::create_message(const std::string &threadId, const CreateMessageRequest &createMessageRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::create_run(const std::string &threadId, const CreateRunRequest &createRunRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::create_thread(const CreateThreadRequest &createThreadRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::create_thread_and_run(const CreateThreadAndRunRequest &createThreadAndRunRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::delete_assistant(const std::string &assistantId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::delete_assistant_file(const std::string &assistantId, const std::string &fileId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::delete_thread(const std::string &threadId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::get_assistant(const std::string &assistantId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::get_assistant_file(const std::string &assistantId, const std::string &fileId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::get_message(const std::string &threadId, const std::string &messageId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::get_message_file(const std::string &threadId, const std::string &messageId, const std::string &fileId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::get_run(const std::string &threadId, const std::string &runId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::get_run_step(const std::string &threadId, const std::string &runId, const std::string &stepId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::get_thread(const std::string &threadId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::list_assistant_files(const std::string &assistantId, const std::optional<int32_t> &limit, const std::optional<std::string> &order, const std::optional<std::string> &after, const std::optional<std::string> &before, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::list_assistants(const std::optional<int32_t> &limit, const std::optional<std::string> &order, const std::optional<std::string> &after, const std::optional<std::string> &before, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::list_message_files(const std::string &threadId, const std::string &messageId, const std::optional<int32_t> &limit, const std::optional<std::string> &order, const std::optional<std::string> &after, const std::optional<std::string> &before, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::list_messages(const std::string &threadId, const std::optional<int32_t> &limit, const std::optional<std::string> &order, const std::optional<std::string> &after, const std::optional<std::string> &before, const std::optional<std::string> &runId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::list_run_steps(const std::string &threadId, const std::string &runId, const std::optional<int32_t> &limit, const std::optional<std::string> &order, const std::optional<std::string> &after, const std::optional<std::string> &before, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::list_runs(const std::string &threadId, const std::optional<int32_t> &limit, const std::optional<std::string> &order, const std::optional<std::string> &after, const std::optional<std::string> &before, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::modify_assistant(const std::string &assistantId, const ModifyAssistantRequest &modifyAssistantRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::modify_message(const std::string &threadId, const std::string &messageId, const ModifyMessageRequest &modifyMessageRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::modify_run(const std::string &threadId, const std::string &runId, const ModifyRunRequest &modifyRunRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::modify_thread(const std::string &threadId, const ModifyThreadRequest &modifyThreadRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void AssistantsApiImpl::submit_tool_ouputs_to_run(const std::string &threadId, const std::string &runId, const SubmitToolOutputsRunRequest &submitToolOutputsRunRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}
}
}
}

