/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

/*
* AssistantsApiImpl.h
*
* 
*/

#ifndef ASSISTANTS_API_IMPL_H_
#define ASSISTANTS_API_IMPL_H_


#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <memory>
#include <optional>

#include <AssistantsApi.h>


#include "AssistantFileObject.h"
#include "AssistantObject.h"
#include "CreateAssistantFileRequest.h"
#include "CreateAssistantRequest.h"
#include "CreateMessageRequest.h"
#include "CreateRunRequest.h"
#include "CreateThreadAndRunRequest.h"
#include "CreateThreadRequest.h"
#include "DeleteAssistantFileResponse.h"
#include "DeleteAssistantResponse.h"
#include "DeleteThreadResponse.h"
#include "ListAssistantFilesResponse.h"
#include "ListAssistantsResponse.h"
#include "ListMessageFilesResponse.h"
#include "ListMessagesResponse.h"
#include "ListRunStepsResponse.h"
#include "ListRunsResponse.h"
#include "MessageFileObject.h"
#include "MessageObject.h"
#include "ModifyAssistantRequest.h"
#include "ModifyMessageRequest.h"
#include "ModifyRunRequest.h"
#include "ModifyThreadRequest.h"
#include "RunObject.h"
#include "RunStepObject.h"
#include "SubmitToolOutputsRunRequest.h"
#include "ThreadObject.h"
#include <string>

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::model;

class  AssistantsApiImpl : public org::openapitools::server::api::AssistantsApi {
public:
    explicit AssistantsApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~AssistantsApiImpl() override = default;

    void cancel_run(const std::string &threadId, const std::string &runId, Pistache::Http::ResponseWriter &response);
    void create_assistant(const CreateAssistantRequest &createAssistantRequest, Pistache::Http::ResponseWriter &response);
    void create_assistant_file(const std::string &assistantId, const CreateAssistantFileRequest &createAssistantFileRequest, Pistache::Http::ResponseWriter &response);
    void create_message(const std::string &threadId, const CreateMessageRequest &createMessageRequest, Pistache::Http::ResponseWriter &response);
    void create_run(const std::string &threadId, const CreateRunRequest &createRunRequest, Pistache::Http::ResponseWriter &response);
    void create_thread(const CreateThreadRequest &createThreadRequest, Pistache::Http::ResponseWriter &response);
    void create_thread_and_run(const CreateThreadAndRunRequest &createThreadAndRunRequest, Pistache::Http::ResponseWriter &response);
    void delete_assistant(const std::string &assistantId, Pistache::Http::ResponseWriter &response);
    void delete_assistant_file(const std::string &assistantId, const std::string &fileId, Pistache::Http::ResponseWriter &response);
    void delete_thread(const std::string &threadId, Pistache::Http::ResponseWriter &response);
    void get_assistant(const std::string &assistantId, Pistache::Http::ResponseWriter &response);
    void get_assistant_file(const std::string &assistantId, const std::string &fileId, Pistache::Http::ResponseWriter &response);
    void get_message(const std::string &threadId, const std::string &messageId, Pistache::Http::ResponseWriter &response);
    void get_message_file(const std::string &threadId, const std::string &messageId, const std::string &fileId, Pistache::Http::ResponseWriter &response);
    void get_run(const std::string &threadId, const std::string &runId, Pistache::Http::ResponseWriter &response);
    void get_run_step(const std::string &threadId, const std::string &runId, const std::string &stepId, Pistache::Http::ResponseWriter &response);
    void get_thread(const std::string &threadId, Pistache::Http::ResponseWriter &response);
    void list_assistant_files(const std::string &assistantId, const std::optional<int32_t> &limit, const std::optional<std::string> &order, const std::optional<std::string> &after, const std::optional<std::string> &before, Pistache::Http::ResponseWriter &response);
    void list_assistants(const std::optional<int32_t> &limit, const std::optional<std::string> &order, const std::optional<std::string> &after, const std::optional<std::string> &before, Pistache::Http::ResponseWriter &response);
    void list_message_files(const std::string &threadId, const std::string &messageId, const std::optional<int32_t> &limit, const std::optional<std::string> &order, const std::optional<std::string> &after, const std::optional<std::string> &before, Pistache::Http::ResponseWriter &response);
    void list_messages(const std::string &threadId, const std::optional<int32_t> &limit, const std::optional<std::string> &order, const std::optional<std::string> &after, const std::optional<std::string> &before, const std::optional<std::string> &runId, Pistache::Http::ResponseWriter &response);
    void list_run_steps(const std::string &threadId, const std::string &runId, const std::optional<int32_t> &limit, const std::optional<std::string> &order, const std::optional<std::string> &after, const std::optional<std::string> &before, Pistache::Http::ResponseWriter &response);
    void list_runs(const std::string &threadId, const std::optional<int32_t> &limit, const std::optional<std::string> &order, const std::optional<std::string> &after, const std::optional<std::string> &before, Pistache::Http::ResponseWriter &response);
    void modify_assistant(const std::string &assistantId, const ModifyAssistantRequest &modifyAssistantRequest, Pistache::Http::ResponseWriter &response);
    void modify_message(const std::string &threadId, const std::string &messageId, const ModifyMessageRequest &modifyMessageRequest, Pistache::Http::ResponseWriter &response);
    void modify_run(const std::string &threadId, const std::string &runId, const ModifyRunRequest &modifyRunRequest, Pistache::Http::ResponseWriter &response);
    void modify_thread(const std::string &threadId, const ModifyThreadRequest &modifyThreadRequest, Pistache::Http::ResponseWriter &response);
    void submit_tool_ouputs_to_run(const std::string &threadId, const std::string &runId, const SubmitToolOutputsRunRequest &submitToolOutputsRunRequest, Pistache::Http::ResponseWriter &response);

};

} // namespace org::openapitools::server::api



#endif
