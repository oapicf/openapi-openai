/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "FineTuningApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

FineTuningApiImpl::FineTuningApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : FineTuningApi(rtr)
{
}

void FineTuningApiImpl::cancel_fine_tuning_job(const std::string &fineTuningJobId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void FineTuningApiImpl::create_fine_tuning_job(const CreateFineTuningJobRequest &createFineTuningJobRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void FineTuningApiImpl::list_fine_tuning_events(const std::string &fineTuningJobId, const std::optional<std::string> &after, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void FineTuningApiImpl::list_fine_tuning_job_checkpoints(const std::string &fineTuningJobId, const std::optional<std::string> &after, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void FineTuningApiImpl::list_paginated_fine_tuning_jobs(const std::optional<std::string> &after, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void FineTuningApiImpl::retrieve_fine_tuning_job(const std::string &fineTuningJobId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}
}
}
}

