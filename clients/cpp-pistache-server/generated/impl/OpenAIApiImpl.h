/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

/*
* OpenAIApiImpl.h
*
* 
*/

#ifndef OPEN_AI_API_IMPL_H_
#define OPEN_AI_API_IMPL_H_


#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <memory>
#include <optional>

#include <OpenAIApi.h>


#include "CreateChatCompletionRequest.h"
#include "CreateChatCompletionResponse.h"
#include "CreateCompletionRequest.h"
#include "CreateCompletionResponse.h"
#include "CreateEditRequest.h"
#include "CreateEditResponse.h"
#include "CreateEmbeddingRequest.h"
#include "CreateEmbeddingResponse.h"
#include "CreateFineTuneRequest.h"
#include "CreateImageRequest.h"
#include "CreateModerationRequest.h"
#include "CreateModerationResponse.h"
#include "CreateTranscriptionRequest_model.h"
#include "CreateTranscriptionResponse.h"
#include "CreateTranslationResponse.h"
#include "DeleteFileResponse.h"
#include "DeleteModelResponse.h"
#include "FineTune.h"
#include "ImagesResponse.h"
#include "ListFilesResponse.h"
#include "ListFineTuneEventsResponse.h"
#include "ListFineTunesResponse.h"
#include "ListModelsResponse.h"
#include "Model.h"
#include "OpenAIFile.h"
#include <string>

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::model;

class  OpenAIApiImpl : public org::openapitools::server::api::OpenAIApi {
public:
    explicit OpenAIApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~OpenAIApiImpl() override = default;

    void cancel_fine_tune(const std::string &fineTuneId, Pistache::Http::ResponseWriter &response);
    void create_chat_completion(const CreateChatCompletionRequest &createChatCompletionRequest, Pistache::Http::ResponseWriter &response);
    void create_completion(const CreateCompletionRequest &createCompletionRequest, Pistache::Http::ResponseWriter &response);
    void create_edit(const CreateEditRequest &createEditRequest, Pistache::Http::ResponseWriter &response);
    void create_embedding(const CreateEmbeddingRequest &createEmbeddingRequest, Pistache::Http::ResponseWriter &response);
    void create_file(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response);
    void create_fine_tune(const CreateFineTuneRequest &createFineTuneRequest, Pistache::Http::ResponseWriter &response);
    void create_image(const CreateImageRequest &createImageRequest, Pistache::Http::ResponseWriter &response);
    void create_image_edit(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response);
    void create_image_variation(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response);
    void create_moderation(const CreateModerationRequest &createModerationRequest, Pistache::Http::ResponseWriter &response);
    void create_transcription(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response);
    void create_translation(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response);
    void delete_file(const std::string &fileId, Pistache::Http::ResponseWriter &response);
    void delete_model(const std::string &model, Pistache::Http::ResponseWriter &response);
    void download_file(const std::string &fileId, Pistache::Http::ResponseWriter &response);
    void list_files(Pistache::Http::ResponseWriter &response);
    void list_fine_tune_events(const std::string &fineTuneId, const std::optional<bool> &stream, Pistache::Http::ResponseWriter &response);
    void list_fine_tunes(Pistache::Http::ResponseWriter &response);
    void list_models(Pistache::Http::ResponseWriter &response);
    void retrieve_file(const std::string &fileId, Pistache::Http::ResponseWriter &response);
    void retrieve_fine_tune(const std::string &fineTuneId, Pistache::Http::ResponseWriter &response);
    void retrieve_model(const std::string &model, Pistache::Http::ResponseWriter &response);

};

} // namespace org::openapitools::server::api



#endif
