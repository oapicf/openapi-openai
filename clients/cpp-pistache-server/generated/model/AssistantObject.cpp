/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AssistantObject.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AssistantObject::AssistantObject()
{
    m_Id = "";
    m_object = "";
    m_Created_at = 0;
    m_Name = "";
    m_Description = "";
    m_Model = "";
    m_Instructions = "";
    
}

void AssistantObject::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AssistantObject::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AssistantObject::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AssistantObject" : pathPrefix;

                     
    
    /* Name */ {
        const std::string& value = m_Name;
        const std::string currentValuePath = _pathPrefix + ".name";
                
        
        if (value.length() > 256)
        {
            success = false;
            msg << currentValuePath << ": must be at most 256 characters long;";
        }

    }
         
    
    /* Description */ {
        const std::string& value = m_Description;
        const std::string currentValuePath = _pathPrefix + ".description";
                
        
        if (value.length() > 512)
        {
            success = false;
            msg << currentValuePath << ": must be at most 512 characters long;";
        }

    }
             
    
    /* Instructions */ {
        const std::string& value = m_Instructions;
        const std::string currentValuePath = _pathPrefix + ".instructions";
                
        
        if (value.length() > 256000)
        {
            success = false;
            msg << currentValuePath << ": must be at most 256000 characters long;";
        }

    }
         
    
    /* Tools */ {
        const std::vector<org::openapitools::server::model::AssistantObject_tools_inner>& value = m_Tools;
        const std::string currentValuePath = _pathPrefix + ".tools";
                
        
        if (value.size() > 128)
        {
            success = false;
            msg << currentValuePath << ": must have at most 128 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::AssistantObject_tools_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".tools") && success;
 
                i++;
            }
        }

    }
         
    
    /* File_ids */ {
        const std::vector<std::string>& value = m_File_ids;
        const std::string currentValuePath = _pathPrefix + ".fileIds";
                
        
        if (value.size() > 20)
        {
            success = false;
            msg << currentValuePath << ": must have at most 20 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
        
    return success;
}

bool AssistantObject::operator==(const AssistantObject& rhs) const
{
    return
    
    
    (getId() == rhs.getId())
     &&
    
    (getObject() == rhs.getObject())
     &&
    
    (getCreatedAt() == rhs.getCreatedAt())
     &&
    
    (getName() == rhs.getName())
     &&
    
    (getDescription() == rhs.getDescription())
     &&
    
    (getModel() == rhs.getModel())
     &&
    
    (getInstructions() == rhs.getInstructions())
     &&
    
    (getTools() == rhs.getTools())
     &&
    
    (getFileIds() == rhs.getFileIds())
     &&
    
    (getMetadata() == rhs.getMetadata())
    
    
    ;
}

bool AssistantObject::operator!=(const AssistantObject& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AssistantObject& o)
{
    j = nlohmann::json::object();
    j["id"] = o.m_Id;
    j["object"] = o.m_object;
    j["created_at"] = o.m_Created_at;
    j["name"] = o.m_Name;
    j["description"] = o.m_Description;
    j["model"] = o.m_Model;
    j["instructions"] = o.m_Instructions;
    j["tools"] = o.m_Tools;
    j["file_ids"] = o.m_File_ids;
    j["metadata"] = o.m_Metadata;
    
}

void from_json(const nlohmann::json& j, AssistantObject& o)
{
    j.at("id").get_to(o.m_Id);
    j.at("object").get_to(o.m_object);
    j.at("created_at").get_to(o.m_Created_at);
    j.at("name").get_to(o.m_Name);
    j.at("description").get_to(o.m_Description);
    j.at("model").get_to(o.m_Model);
    j.at("instructions").get_to(o.m_Instructions);
    j.at("tools").get_to(o.m_Tools);
    j.at("file_ids").get_to(o.m_File_ids);
    j.at("metadata").get_to(o.m_Metadata);
    
}

std::string AssistantObject::getId() const
{
    return m_Id;
}
void AssistantObject::setId(std::string const& value)
{
    m_Id = value;
}
std::string AssistantObject::getObject() const
{
    return m_object;
}
void AssistantObject::setObject(std::string const& value)
{
    m_object = value;
}
int32_t AssistantObject::getCreatedAt() const
{
    return m_Created_at;
}
void AssistantObject::setCreatedAt(int32_t const value)
{
    m_Created_at = value;
}
std::string AssistantObject::getName() const
{
    return m_Name;
}
void AssistantObject::setName(std::string const& value)
{
    m_Name = value;
}
std::string AssistantObject::getDescription() const
{
    return m_Description;
}
void AssistantObject::setDescription(std::string const& value)
{
    m_Description = value;
}
std::string AssistantObject::getModel() const
{
    return m_Model;
}
void AssistantObject::setModel(std::string const& value)
{
    m_Model = value;
}
std::string AssistantObject::getInstructions() const
{
    return m_Instructions;
}
void AssistantObject::setInstructions(std::string const& value)
{
    m_Instructions = value;
}
std::vector<org::openapitools::server::model::AssistantObject_tools_inner> AssistantObject::getTools() const
{
    return m_Tools;
}
void AssistantObject::setTools(std::vector<org::openapitools::server::model::AssistantObject_tools_inner> const& value)
{
    m_Tools = value;
}
std::vector<std::string> AssistantObject::getFileIds() const
{
    return m_File_ids;
}
void AssistantObject::setFileIds(std::vector<std::string> const& value)
{
    m_File_ids = value;
}
org::openapitools::server::model::Object AssistantObject::getMetadata() const
{
    return m_Metadata;
}
void AssistantObject::setMetadata(org::openapitools::server::model::Object const& value)
{
    m_Metadata = value;
}


} // namespace org::openapitools::server::model

