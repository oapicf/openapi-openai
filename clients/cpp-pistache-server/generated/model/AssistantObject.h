/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AssistantObject.h
 *
 * Represents an &#x60;assistant&#x60; that can call the model and use tools.
 */

#ifndef AssistantObject_H_
#define AssistantObject_H_


#include <nlohmann/json.hpp>
#include "AssistantObject_tools_inner.h"
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Represents an &#x60;assistant&#x60; that can call the model and use tools.
/// </summary>
class  AssistantObject
{
public:
    AssistantObject();
    virtual ~AssistantObject() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const AssistantObject& rhs) const;
    bool operator!=(const AssistantObject& rhs) const;

    /////////////////////////////////////////////
    /// AssistantObject members

    /// <summary>
    /// The identifier, which can be referenced in API endpoints.
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    /// <summary>
    /// The object type, which is always &#x60;assistant&#x60;.
    /// </summary>
    std::string getObject() const;
    void setObject(std::string const& value);
    /// <summary>
    /// The Unix timestamp (in seconds) for when the assistant was created.
    /// </summary>
    int32_t getCreatedAt() const;
    void setCreatedAt(int32_t const value);
    /// <summary>
    /// The name of the assistant. The maximum length is 256 characters. 
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    /// <summary>
    /// The description of the assistant. The maximum length is 512 characters. 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string const& value);
    /// <summary>
    /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
    /// </summary>
    std::string getModel() const;
    void setModel(std::string const& value);
    /// <summary>
    /// The system instructions that the assistant uses. The maximum length is 256,000 characters. 
    /// </summary>
    std::string getInstructions() const;
    void setInstructions(std::string const& value);
    /// <summary>
    /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types &#x60;code_interpreter&#x60;, &#x60;retrieval&#x60;, or &#x60;function&#x60;. 
    /// </summary>
    std::vector<org::openapitools::server::model::AssistantObject_tools_inner> getTools() const;
    void setTools(std::vector<org::openapitools::server::model::AssistantObject_tools_inner> const& value);
    /// <summary>
    /// A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. 
    /// </summary>
    std::vector<std::string> getFileIds() const;
    void setFileIds(std::vector<std::string> const& value);
    /// <summary>
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    /// </summary>
    nlohmann::json getMetadata() const;
    void setMetadata(nlohmann::json const& value);

    friend  void to_json(nlohmann::json& j, const AssistantObject& o);
    friend  void from_json(const nlohmann::json& j, AssistantObject& o);
protected:
    std::string m_Id;

    std::string m_object;

    int32_t m_Created_at;

    std::string m_Name;

    std::string m_Description;

    std::string m_Model;

    std::string m_Instructions;

    std::vector<org::openapitools::server::model::AssistantObject_tools_inner> m_Tools;

    std::vector<std::string> m_File_ids;

    nlohmann::json m_Metadata;

    
};

} // namespace org::openapitools::server::model

#endif /* AssistantObject_H_ */
