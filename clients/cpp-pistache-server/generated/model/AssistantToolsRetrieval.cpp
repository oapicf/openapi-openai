/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AssistantToolsRetrieval.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AssistantToolsRetrieval::AssistantToolsRetrieval()
{
    m_Type = "";
    
}

void AssistantToolsRetrieval::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AssistantToolsRetrieval::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AssistantToolsRetrieval::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AssistantToolsRetrieval" : pathPrefix;

        
    return success;
}

bool AssistantToolsRetrieval::operator==(const AssistantToolsRetrieval& rhs) const
{
    return
    
    
    (getType() == rhs.getType())
    
    
    ;
}

bool AssistantToolsRetrieval::operator!=(const AssistantToolsRetrieval& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AssistantToolsRetrieval& o)
{
    j = nlohmann::json::object();
    j["type"] = o.m_Type;
    
}

void from_json(const nlohmann::json& j, AssistantToolsRetrieval& o)
{
    j.at("type").get_to(o.m_Type);
    
}

std::string AssistantToolsRetrieval::getType() const
{
    return m_Type;
}
void AssistantToolsRetrieval::setType(std::string const& value)
{
    m_Type = value;
}


} // namespace org::openapitools::server::model

