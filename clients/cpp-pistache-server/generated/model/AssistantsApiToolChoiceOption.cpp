/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AssistantsApiToolChoiceOption.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AssistantsApiToolChoiceOption::AssistantsApiToolChoiceOption()
{
    m_Type = "";
    m_FunctionIsSet = false;
    
}

void AssistantsApiToolChoiceOption::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AssistantsApiToolChoiceOption::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AssistantsApiToolChoiceOption::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AssistantsApiToolChoiceOption" : pathPrefix;

            
    return success;
}

bool AssistantsApiToolChoiceOption::operator==(const AssistantsApiToolChoiceOption& rhs) const
{
    return
    
    
    (getType() == rhs.getType())
     &&
    
    
    ((!functionIsSet() && !rhs.functionIsSet()) || (functionIsSet() && rhs.functionIsSet() && getFunction() == rhs.getFunction()))
    
    ;
}

bool AssistantsApiToolChoiceOption::operator!=(const AssistantsApiToolChoiceOption& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AssistantsApiToolChoiceOption& o)
{
    j = nlohmann::json::object();
    j["type"] = o.m_Type;
    if(o.functionIsSet())
        j["function"] = o.m_Function;
    
}

void from_json(const nlohmann::json& j, AssistantsApiToolChoiceOption& o)
{
    j.at("type").get_to(o.m_Type);
    if(j.find("function") != j.end())
    {
        j.at("function").get_to(o.m_Function);
        o.m_FunctionIsSet = true;
    } 
    
}

std::string AssistantsApiToolChoiceOption::getType() const
{
    return m_Type;
}
void AssistantsApiToolChoiceOption::setType(std::string const& value)
{
    m_Type = value;
}
org::openapitools::server::model::ChatCompletionNamedToolChoice_function AssistantsApiToolChoiceOption::getFunction() const
{
    return m_Function;
}
void AssistantsApiToolChoiceOption::setFunction(org::openapitools::server::model::ChatCompletionNamedToolChoice_function const& value)
{
    m_Function = value;
    m_FunctionIsSet = true;
}
bool AssistantsApiToolChoiceOption::functionIsSet() const
{
    return m_FunctionIsSet;
}
void AssistantsApiToolChoiceOption::unsetFunction()
{
    m_FunctionIsSet = false;
}


} // namespace org::openapitools::server::model

