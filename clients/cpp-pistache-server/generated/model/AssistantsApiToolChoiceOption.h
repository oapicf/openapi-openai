/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AssistantsApiToolChoiceOption.h
 *
 * Controls which (if any) tool is called by the model. &#x60;none&#x60; means the model will not call any tools and instead generates a message. &#x60;auto&#x60; is the default value and means the model can pick between generating a message or calling a tool. Specifying a particular tool like &#x60;{\&quot;type\&quot;: \&quot;TOOL_TYPE\&quot;}&#x60; or &#x60;{\&quot;type\&quot;: \&quot;function\&quot;, \&quot;function\&quot;: {\&quot;name\&quot;: \&quot;my_function\&quot;}}&#x60; forces the model to call that tool. 
 */

#ifndef AssistantsApiToolChoiceOption_H_
#define AssistantsApiToolChoiceOption_H_


#include "ChatCompletionNamedToolChoice_function.h"
#include <string>
#include "AssistantsApiNamedToolChoice.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Controls which (if any) tool is called by the model. &#x60;none&#x60; means the model will not call any tools and instead generates a message. &#x60;auto&#x60; is the default value and means the model can pick between generating a message or calling a tool. Specifying a particular tool like &#x60;{\&quot;type\&quot;: \&quot;TOOL_TYPE\&quot;}&#x60; or &#x60;{\&quot;type\&quot;: \&quot;function\&quot;, \&quot;function\&quot;: {\&quot;name\&quot;: \&quot;my_function\&quot;}}&#x60; forces the model to call that tool. 
/// </summary>
class  AssistantsApiToolChoiceOption
{
public:
    AssistantsApiToolChoiceOption();
    virtual ~AssistantsApiToolChoiceOption() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const AssistantsApiToolChoiceOption& rhs) const;
    bool operator!=(const AssistantsApiToolChoiceOption& rhs) const;

    /////////////////////////////////////////////
    /// AssistantsApiToolChoiceOption members

    /// <summary>
    /// The type of the tool. If type is &#x60;function&#x60;, the function name must be set
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ChatCompletionNamedToolChoice_function getFunction() const;
    void setFunction(org::openapitools::server::model::ChatCompletionNamedToolChoice_function const& value);
    bool functionIsSet() const;
    void unsetFunction();

    friend  void to_json(nlohmann::json& j, const AssistantsApiToolChoiceOption& o);
    friend  void from_json(const nlohmann::json& j, AssistantsApiToolChoiceOption& o);
protected:
    std::string m_Type;

    org::openapitools::server::model::ChatCompletionNamedToolChoice_function m_Function;
    bool m_FunctionIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* AssistantsApiToolChoiceOption_H_ */
