/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ChatCompletionMessageToolCallChunk_function.h
 *
 * 
 */

#ifndef ChatCompletionMessageToolCallChunk_function_H_
#define ChatCompletionMessageToolCallChunk_function_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  ChatCompletionMessageToolCallChunk_function
{
public:
    ChatCompletionMessageToolCallChunk_function();
    virtual ~ChatCompletionMessageToolCallChunk_function() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ChatCompletionMessageToolCallChunk_function& rhs) const;
    bool operator!=(const ChatCompletionMessageToolCallChunk_function& rhs) const;

    /////////////////////////////////////////////
    /// ChatCompletionMessageToolCallChunk_function members

    /// <summary>
    /// The name of the function to call.
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
    /// </summary>
    std::string getArguments() const;
    void setArguments(std::string const& value);
    bool argumentsIsSet() const;
    void unsetArguments();

    friend  void to_json(nlohmann::json& j, const ChatCompletionMessageToolCallChunk_function& o);
    friend  void from_json(const nlohmann::json& j, ChatCompletionMessageToolCallChunk_function& o);
protected:
    std::string m_Name;
    bool m_NameIsSet;
    std::string m_Arguments;
    bool m_ArgumentsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ChatCompletionMessageToolCallChunk_function_H_ */
