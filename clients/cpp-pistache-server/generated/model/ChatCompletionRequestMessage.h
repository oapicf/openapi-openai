/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ChatCompletionRequestMessage.h
 *
 * 
 */

#ifndef ChatCompletionRequestMessage_H_
#define ChatCompletionRequestMessage_H_


#include "ChatCompletionRequestMessage_function_call.h"
#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  ChatCompletionRequestMessage
{
public:
    ChatCompletionRequestMessage();
    virtual ~ChatCompletionRequestMessage() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ChatCompletionRequestMessage& rhs) const;
    bool operator!=(const ChatCompletionRequestMessage& rhs) const;

    /////////////////////////////////////////////
    /// ChatCompletionRequestMessage members

    /// <summary>
    /// The role of the messages author. One of &#x60;system&#x60;, &#x60;user&#x60;, &#x60;assistant&#x60;, or &#x60;function&#x60;.
    /// </summary>
    std::string getRole() const;
    void setRole(std::string const& value);
    /// <summary>
    /// The contents of the message. &#x60;content&#x60; is required for all messages except assistant messages with function calls.
    /// </summary>
    std::string getContent() const;
    void setContent(std::string const& value);
    bool contentIsSet() const;
    void unsetContent();
    /// <summary>
    /// The name of the author of this message. &#x60;name&#x60; is required if role is &#x60;function&#x60;, and it should be the name of the function whose response is in the &#x60;content&#x60;. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ChatCompletionRequestMessage_function_call getFunctionCall() const;
    void setFunctionCall(org::openapitools::server::model::ChatCompletionRequestMessage_function_call const& value);
    bool functionCallIsSet() const;
    void unsetFunction_call();

    friend  void to_json(nlohmann::json& j, const ChatCompletionRequestMessage& o);
    friend  void from_json(const nlohmann::json& j, ChatCompletionRequestMessage& o);
protected:
    std::string m_Role;

    std::string m_Content;
    bool m_ContentIsSet;
    std::string m_Name;
    bool m_NameIsSet;
    org::openapitools::server::model::ChatCompletionRequestMessage_function_call m_Function_call;
    bool m_Function_callIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ChatCompletionRequestMessage_H_ */
