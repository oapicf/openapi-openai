/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ChatCompletionRequestMessageContentPartImage_image_url.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ChatCompletionRequestMessageContentPartImage_image_url::ChatCompletionRequestMessageContentPartImage_image_url()
{
    m_Url = "";
    m_Detail = "auto";
    m_DetailIsSet = false;
    
}

void ChatCompletionRequestMessageContentPartImage_image_url::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ChatCompletionRequestMessageContentPartImage_image_url::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ChatCompletionRequestMessageContentPartImage_image_url::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ChatCompletionRequestMessageContentPartImage_image_url" : pathPrefix;

            
    return success;
}

bool ChatCompletionRequestMessageContentPartImage_image_url::operator==(const ChatCompletionRequestMessageContentPartImage_image_url& rhs) const
{
    return
    
    
    (getUrl() == rhs.getUrl())
     &&
    
    
    ((!detailIsSet() && !rhs.detailIsSet()) || (detailIsSet() && rhs.detailIsSet() && getDetail() == rhs.getDetail()))
    
    ;
}

bool ChatCompletionRequestMessageContentPartImage_image_url::operator!=(const ChatCompletionRequestMessageContentPartImage_image_url& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ChatCompletionRequestMessageContentPartImage_image_url& o)
{
    j = nlohmann::json::object();
    j["url"] = o.m_Url;
    if(o.detailIsSet())
        j["detail"] = o.m_Detail;
    
}

void from_json(const nlohmann::json& j, ChatCompletionRequestMessageContentPartImage_image_url& o)
{
    j.at("url").get_to(o.m_Url);
    if(j.find("detail") != j.end())
    {
        j.at("detail").get_to(o.m_Detail);
        o.m_DetailIsSet = true;
    } 
    
}

std::string ChatCompletionRequestMessageContentPartImage_image_url::getUrl() const
{
    return m_Url;
}
void ChatCompletionRequestMessageContentPartImage_image_url::setUrl(std::string const& value)
{
    m_Url = value;
}
std::string ChatCompletionRequestMessageContentPartImage_image_url::getDetail() const
{
    return m_Detail;
}
void ChatCompletionRequestMessageContentPartImage_image_url::setDetail(std::string const& value)
{
    m_Detail = value;
    m_DetailIsSet = true;
}
bool ChatCompletionRequestMessageContentPartImage_image_url::detailIsSet() const
{
    return m_DetailIsSet;
}
void ChatCompletionRequestMessageContentPartImage_image_url::unsetDetail()
{
    m_DetailIsSet = false;
}


} // namespace org::openapitools::server::model

