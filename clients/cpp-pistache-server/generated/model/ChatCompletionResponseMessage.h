/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ChatCompletionResponseMessage.h
 *
 * A chat completion message generated by the model.
 */

#ifndef ChatCompletionResponseMessage_H_
#define ChatCompletionResponseMessage_H_


#include "ChatCompletionRequestAssistantMessage_function_call.h"
#include <string>
#include "ChatCompletionMessageToolCall.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// A chat completion message generated by the model.
/// </summary>
class  ChatCompletionResponseMessage
{
public:
    ChatCompletionResponseMessage();
    virtual ~ChatCompletionResponseMessage() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ChatCompletionResponseMessage& rhs) const;
    bool operator!=(const ChatCompletionResponseMessage& rhs) const;

    /////////////////////////////////////////////
    /// ChatCompletionResponseMessage members

    /// <summary>
    /// The contents of the message.
    /// </summary>
    std::string getContent() const;
    void setContent(std::string const& value);
    /// <summary>
    /// The tool calls generated by the model, such as function calls.
    /// </summary>
    std::vector<org::openapitools::server::model::ChatCompletionMessageToolCall> getToolCalls() const;
    void setToolCalls(std::vector<org::openapitools::server::model::ChatCompletionMessageToolCall> const& value);
    bool toolCallsIsSet() const;
    void unsetTool_calls();
    /// <summary>
    /// The role of the author of this message.
    /// </summary>
    std::string getRole() const;
    void setRole(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ChatCompletionRequestAssistantMessage_function_call getFunctionCall() const;
    void setFunctionCall(org::openapitools::server::model::ChatCompletionRequestAssistantMessage_function_call const& value);
    bool functionCallIsSet() const;
    void unsetFunction_call();

    friend  void to_json(nlohmann::json& j, const ChatCompletionResponseMessage& o);
    friend  void from_json(const nlohmann::json& j, ChatCompletionResponseMessage& o);
protected:
    std::string m_Content;

    std::vector<org::openapitools::server::model::ChatCompletionMessageToolCall> m_Tool_calls;
    bool m_Tool_callsIsSet;
    std::string m_Role;

    org::openapitools::server::model::ChatCompletionRequestAssistantMessage_function_call m_Function_call;
    bool m_Function_callIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ChatCompletionResponseMessage_H_ */
