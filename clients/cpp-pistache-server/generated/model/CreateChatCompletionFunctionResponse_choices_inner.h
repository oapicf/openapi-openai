/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CreateChatCompletionFunctionResponse_choices_inner.h
 *
 * 
 */

#ifndef CreateChatCompletionFunctionResponse_choices_inner_H_
#define CreateChatCompletionFunctionResponse_choices_inner_H_


#include "ChatCompletionResponseMessage.h"
#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  CreateChatCompletionFunctionResponse_choices_inner
{
public:
    CreateChatCompletionFunctionResponse_choices_inner();
    virtual ~CreateChatCompletionFunctionResponse_choices_inner() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CreateChatCompletionFunctionResponse_choices_inner& rhs) const;
    bool operator!=(const CreateChatCompletionFunctionResponse_choices_inner& rhs) const;

    /////////////////////////////////////////////
    /// CreateChatCompletionFunctionResponse_choices_inner members

    /// <summary>
    /// The reason the model stopped generating tokens. This will be &#x60;stop&#x60; if the model hit a natural stop point or a provided stop sequence, &#x60;length&#x60; if the maximum number of tokens specified in the request was reached, &#x60;content_filter&#x60; if content was omitted due to a flag from our content filters, or &#x60;function_call&#x60; if the model called a function. 
    /// </summary>
    std::string getFinishReason() const;
    void setFinishReason(std::string const& value);
    /// <summary>
    /// The index of the choice in the list of choices.
    /// </summary>
    int32_t getIndex() const;
    void setIndex(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ChatCompletionResponseMessage getMessage() const;
    void setMessage(org::openapitools::server::model::ChatCompletionResponseMessage const& value);

    friend  void to_json(nlohmann::json& j, const CreateChatCompletionFunctionResponse_choices_inner& o);
    friend  void from_json(const nlohmann::json& j, CreateChatCompletionFunctionResponse_choices_inner& o);
protected:
    std::string m_Finish_reason;

    int32_t m_Index;

    org::openapitools::server::model::ChatCompletionResponseMessage m_Message;

    
};

} // namespace org::openapitools::server::model

#endif /* CreateChatCompletionFunctionResponse_choices_inner_H_ */
