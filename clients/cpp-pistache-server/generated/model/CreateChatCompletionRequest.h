/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CreateChatCompletionRequest.h
 *
 * 
 */

#ifndef CreateChatCompletionRequest_H_
#define CreateChatCompletionRequest_H_


#include "CreateChatCompletionRequest_model.h"
#include "ChatCompletionRequestMessage.h"
#include "CreateChatCompletionRequest_function_call.h"
#include "CreateChatCompletionRequest_stop.h"
#include <string>
#include "ChatCompletionFunctions.h"
#include "Object.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  CreateChatCompletionRequest
{
public:
    CreateChatCompletionRequest();
    virtual ~CreateChatCompletionRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CreateChatCompletionRequest& rhs) const;
    bool operator!=(const CreateChatCompletionRequest& rhs) const;

    /////////////////////////////////////////////
    /// CreateChatCompletionRequest members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CreateChatCompletionRequest_model getModel() const;
    void setModel(org::openapitools::server::model::CreateChatCompletionRequest_model const& value);
    /// <summary>
    /// A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).
    /// </summary>
    std::vector<org::openapitools::server::model::ChatCompletionRequestMessage> getMessages() const;
    void setMessages(std::vector<org::openapitools::server::model::ChatCompletionRequestMessage> const& value);
    /// <summary>
    /// A list of functions the model may generate JSON inputs for.
    /// </summary>
    std::vector<org::openapitools::server::model::ChatCompletionFunctions> getFunctions() const;
    void setFunctions(std::vector<org::openapitools::server::model::ChatCompletionFunctions> const& value);
    bool functionsIsSet() const;
    void unsetFunctions();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CreateChatCompletionRequest_function_call getFunctionCall() const;
    void setFunctionCall(org::openapitools::server::model::CreateChatCompletionRequest_function_call const& value);
    bool functionCallIsSet() const;
    void unsetFunction_call();
    /// <summary>
    /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both. 
    /// </summary>
    double getTemperature() const;
    void setTemperature(double const value);
    bool temperatureIsSet() const;
    void unsetTemperature();
    /// <summary>
    /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. 
    /// </summary>
    double getTopP() const;
    void setTopP(double const value);
    bool topPIsSet() const;
    void unsetTop_p();
    /// <summary>
    /// How many chat completion choices to generate for each input message.
    /// </summary>
    int32_t getN() const;
    void setN(int32_t const value);
    bool NIsSet() const;
    void unsetn();
    /// <summary>
    /// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a &#x60;data: [DONE]&#x60; message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb). 
    /// </summary>
    bool isStream() const;
    void setStream(bool const value);
    bool streamIsSet() const;
    void unsetStream();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CreateChatCompletionRequest_stop getStop() const;
    void setStop(org::openapitools::server::model::CreateChatCompletionRequest_stop const& value);
    bool stopIsSet() const;
    void unsetStop();
    /// <summary>
    /// The maximum number of [tokens](/tokenizer) to generate in the chat completion.  The total length of input tokens and generated tokens is limited by the model&#39;s context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens. 
    /// </summary>
    int32_t getMaxTokens() const;
    void setMaxTokens(int32_t const value);
    bool maxTokensIsSet() const;
    void unsetMax_tokens();
    /// <summary>
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 
    /// </summary>
    double getPresencePenalty() const;
    void setPresencePenalty(double const value);
    bool presencePenaltyIsSet() const;
    void unsetPresence_penalty();
    /// <summary>
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 
    /// </summary>
    double getFrequencyPenalty() const;
    void setFrequencyPenalty(double const value);
    bool frequencyPenaltyIsSet() const;
    void unsetFrequency_penalty();
    /// <summary>
    /// Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. 
    /// </summary>
    org::openapitools::server::model::Object getLogitBias() const;
    void setLogitBias(org::openapitools::server::model::Object const& value);
    bool logitBiasIsSet() const;
    void unsetLogit_bias();
    /// <summary>
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    /// </summary>
    std::string getUser() const;
    void setUser(std::string const& value);
    bool userIsSet() const;
    void unsetUser();

    friend  void to_json(nlohmann::json& j, const CreateChatCompletionRequest& o);
    friend  void from_json(const nlohmann::json& j, CreateChatCompletionRequest& o);
protected:
    org::openapitools::server::model::CreateChatCompletionRequest_model m_Model;

    std::vector<org::openapitools::server::model::ChatCompletionRequestMessage> m_Messages;

    std::vector<org::openapitools::server::model::ChatCompletionFunctions> m_Functions;
    bool m_FunctionsIsSet;
    org::openapitools::server::model::CreateChatCompletionRequest_function_call m_Function_call;
    bool m_Function_callIsSet;
    double m_Temperature;
    bool m_TemperatureIsSet;
    double m_Top_p;
    bool m_Top_pIsSet;
    int32_t m_n;
    bool m_nIsSet;
    bool m_Stream;
    bool m_StreamIsSet;
    org::openapitools::server::model::CreateChatCompletionRequest_stop m_Stop;
    bool m_StopIsSet;
    int32_t m_Max_tokens;
    bool m_Max_tokensIsSet;
    double m_Presence_penalty;
    bool m_Presence_penaltyIsSet;
    double m_Frequency_penalty;
    bool m_Frequency_penaltyIsSet;
    org::openapitools::server::model::Object m_Logit_bias;
    bool m_Logit_biasIsSet;
    std::string m_User;
    bool m_UserIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* CreateChatCompletionRequest_H_ */
