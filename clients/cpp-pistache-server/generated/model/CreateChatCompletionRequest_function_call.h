/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CreateChatCompletionRequest_function_call.h
 *
 * Controls how the model responds to function calls. \&quot;none\&quot; means the model does not call a function, and responds to the end-user. \&quot;auto\&quot; means the model can pick between an end-user or calling a function.  Specifying a particular function via &#x60;{\&quot;name\&quot;:\\ \&quot;my_function\&quot;}&#x60; forces the model to call that function. \&quot;none\&quot; is the default when no functions are present. \&quot;auto\&quot; is the default if functions are present.
 */

#ifndef CreateChatCompletionRequest_function_call_H_
#define CreateChatCompletionRequest_function_call_H_


#include <string>
#include "CreateChatCompletionRequest_function_call_oneOf.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Controls how the model responds to function calls. \&quot;none\&quot; means the model does not call a function, and responds to the end-user. \&quot;auto\&quot; means the model can pick between an end-user or calling a function.  Specifying a particular function via &#x60;{\&quot;name\&quot;:\\ \&quot;my_function\&quot;}&#x60; forces the model to call that function. \&quot;none\&quot; is the default when no functions are present. \&quot;auto\&quot; is the default if functions are present.
/// </summary>
class  CreateChatCompletionRequest_function_call
{
public:
    CreateChatCompletionRequest_function_call();
    virtual ~CreateChatCompletionRequest_function_call() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CreateChatCompletionRequest_function_call& rhs) const;
    bool operator!=(const CreateChatCompletionRequest_function_call& rhs) const;

    /////////////////////////////////////////////
    /// CreateChatCompletionRequest_function_call members

    /// <summary>
    /// The name of the function to call.
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);

    friend  void to_json(nlohmann::json& j, const CreateChatCompletionRequest_function_call& o);
    friend  void from_json(const nlohmann::json& j, CreateChatCompletionRequest_function_call& o);
protected:
    std::string m_Name;

    
};

} // namespace org::openapitools::server::model

#endif /* CreateChatCompletionRequest_function_call_H_ */
