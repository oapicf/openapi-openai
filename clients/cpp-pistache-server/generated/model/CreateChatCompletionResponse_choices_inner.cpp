/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateChatCompletionResponse_choices_inner.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateChatCompletionResponse_choices_inner::CreateChatCompletionResponse_choices_inner()
{
    m_Finish_reason = "";
    m_Index = 0;
    
}

void CreateChatCompletionResponse_choices_inner::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateChatCompletionResponse_choices_inner::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateChatCompletionResponse_choices_inner::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateChatCompletionResponse_choices_inner" : pathPrefix;

                
    if (!m_Message.validate(msg, _pathPrefix + ".message")) {
        msg << _pathPrefix << ": Message is invalid;";
        success = false;
    }    
    if (!m_Logprobs.validate(msg, _pathPrefix + ".logprobs")) {
        msg << _pathPrefix << ": Logprobs is invalid;";
        success = false;
    }
    return success;
}

bool CreateChatCompletionResponse_choices_inner::operator==(const CreateChatCompletionResponse_choices_inner& rhs) const
{
    return
    
    
    (getFinishReason() == rhs.getFinishReason())
     &&
    
    (getIndex() == rhs.getIndex())
     &&
    
    (getMessage() == rhs.getMessage())
     &&
    
    (getLogprobs() == rhs.getLogprobs())
    
    
    ;
}

bool CreateChatCompletionResponse_choices_inner::operator!=(const CreateChatCompletionResponse_choices_inner& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateChatCompletionResponse_choices_inner& o)
{
    j = nlohmann::json::object();
    j["finish_reason"] = o.m_Finish_reason;
    j["index"] = o.m_Index;
    j["message"] = o.m_Message;
    j["logprobs"] = o.m_Logprobs;
    
}

void from_json(const nlohmann::json& j, CreateChatCompletionResponse_choices_inner& o)
{
    j.at("finish_reason").get_to(o.m_Finish_reason);
    j.at("index").get_to(o.m_Index);
    j.at("message").get_to(o.m_Message);
    j.at("logprobs").get_to(o.m_Logprobs);
    
}

std::string CreateChatCompletionResponse_choices_inner::getFinishReason() const
{
    return m_Finish_reason;
}
void CreateChatCompletionResponse_choices_inner::setFinishReason(std::string const& value)
{
    m_Finish_reason = value;
}
int32_t CreateChatCompletionResponse_choices_inner::getIndex() const
{
    return m_Index;
}
void CreateChatCompletionResponse_choices_inner::setIndex(int32_t const value)
{
    m_Index = value;
}
org::openapitools::server::model::ChatCompletionResponseMessage CreateChatCompletionResponse_choices_inner::getMessage() const
{
    return m_Message;
}
void CreateChatCompletionResponse_choices_inner::setMessage(org::openapitools::server::model::ChatCompletionResponseMessage const& value)
{
    m_Message = value;
}
org::openapitools::server::model::CreateChatCompletionResponse_choices_inner_logprobs CreateChatCompletionResponse_choices_inner::getLogprobs() const
{
    return m_Logprobs;
}
void CreateChatCompletionResponse_choices_inner::setLogprobs(org::openapitools::server::model::CreateChatCompletionResponse_choices_inner_logprobs const& value)
{
    m_Logprobs = value;
}


} // namespace org::openapitools::server::model

