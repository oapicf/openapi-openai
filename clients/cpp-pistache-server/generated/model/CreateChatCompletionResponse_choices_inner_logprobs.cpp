/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateChatCompletionResponse_choices_inner_logprobs.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateChatCompletionResponse_choices_inner_logprobs::CreateChatCompletionResponse_choices_inner_logprobs()
{
    
}

void CreateChatCompletionResponse_choices_inner_logprobs::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateChatCompletionResponse_choices_inner_logprobs::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateChatCompletionResponse_choices_inner_logprobs::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateChatCompletionResponse_choices_inner_logprobs" : pathPrefix;

         
    
    /* Content */ {
        const std::vector<org::openapitools::server::model::ChatCompletionTokenLogprob>& value = m_Content;
        const std::string currentValuePath = _pathPrefix + ".content";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ChatCompletionTokenLogprob& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".content") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool CreateChatCompletionResponse_choices_inner_logprobs::operator==(const CreateChatCompletionResponse_choices_inner_logprobs& rhs) const
{
    return
    
    
    (getContent() == rhs.getContent())
    
    
    ;
}

bool CreateChatCompletionResponse_choices_inner_logprobs::operator!=(const CreateChatCompletionResponse_choices_inner_logprobs& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateChatCompletionResponse_choices_inner_logprobs& o)
{
    j = nlohmann::json::object();
    j["content"] = o.m_Content;
    
}

void from_json(const nlohmann::json& j, CreateChatCompletionResponse_choices_inner_logprobs& o)
{
    j.at("content").get_to(o.m_Content);
    
}

std::vector<org::openapitools::server::model::ChatCompletionTokenLogprob> CreateChatCompletionResponse_choices_inner_logprobs::getContent() const
{
    return m_Content;
}
void CreateChatCompletionResponse_choices_inner_logprobs::setContent(std::vector<org::openapitools::server::model::ChatCompletionTokenLogprob> const& value)
{
    m_Content = value;
}


} // namespace org::openapitools::server::model

