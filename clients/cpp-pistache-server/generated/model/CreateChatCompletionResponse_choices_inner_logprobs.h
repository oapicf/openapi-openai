/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CreateChatCompletionResponse_choices_inner_logprobs.h
 *
 * Log probability information for the choice.
 */

#ifndef CreateChatCompletionResponse_choices_inner_logprobs_H_
#define CreateChatCompletionResponse_choices_inner_logprobs_H_


#include "ChatCompletionTokenLogprob.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Log probability information for the choice.
/// </summary>
class  CreateChatCompletionResponse_choices_inner_logprobs
{
public:
    CreateChatCompletionResponse_choices_inner_logprobs();
    virtual ~CreateChatCompletionResponse_choices_inner_logprobs() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CreateChatCompletionResponse_choices_inner_logprobs& rhs) const;
    bool operator!=(const CreateChatCompletionResponse_choices_inner_logprobs& rhs) const;

    /////////////////////////////////////////////
    /// CreateChatCompletionResponse_choices_inner_logprobs members

    /// <summary>
    /// A list of message content tokens with log probability information.
    /// </summary>
    std::vector<org::openapitools::server::model::ChatCompletionTokenLogprob> getContent() const;
    void setContent(std::vector<org::openapitools::server::model::ChatCompletionTokenLogprob> const& value);

    friend  void to_json(nlohmann::json& j, const CreateChatCompletionResponse_choices_inner_logprobs& o);
    friend  void from_json(const nlohmann::json& j, CreateChatCompletionResponse_choices_inner_logprobs& o);
protected:
    std::vector<org::openapitools::server::model::ChatCompletionTokenLogprob> m_Content;

    
};

} // namespace org::openapitools::server::model

#endif /* CreateChatCompletionResponse_choices_inner_logprobs_H_ */
