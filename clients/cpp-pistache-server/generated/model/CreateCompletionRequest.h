/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CreateCompletionRequest.h
 *
 * 
 */

#ifndef CreateCompletionRequest_H_
#define CreateCompletionRequest_H_


#include "CreateCompletionRequest_model.h"
#include <string>
#include "CreateCompletionRequest_prompt.h"
#include "CreateCompletionRequest_stop.h"
#include <map>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  CreateCompletionRequest
{
public:
    CreateCompletionRequest();
    virtual ~CreateCompletionRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CreateCompletionRequest& rhs) const;
    bool operator!=(const CreateCompletionRequest& rhs) const;

    /////////////////////////////////////////////
    /// CreateCompletionRequest members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CreateCompletionRequest_model getModel() const;
    void setModel(org::openapitools::server::model::CreateCompletionRequest_model const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CreateCompletionRequest_prompt getPrompt() const;
    void setPrompt(org::openapitools::server::model::CreateCompletionRequest_prompt const& value);
    /// <summary>
    /// Generates &#x60;best_of&#x60; completions server-side and returns the \&quot;best\&quot; (the one with the highest log probability per token). Results cannot be streamed.  When used with &#x60;n&#x60;, &#x60;best_of&#x60; controls the number of candidate completions and &#x60;n&#x60; specifies how many to return â€“ &#x60;best_of&#x60; must be greater than &#x60;n&#x60;.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for &#x60;max_tokens&#x60; and &#x60;stop&#x60;. 
    /// </summary>
    int32_t getBestOf() const;
    void setBestOf(int32_t const value);
    bool bestOfIsSet() const;
    void unsetBest_of();
    /// <summary>
    /// Echo back the prompt in addition to the completion 
    /// </summary>
    bool isEcho() const;
    void setEcho(bool const value);
    bool echoIsSet() const;
    void unsetEcho();
    /// <summary>
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
    /// </summary>
    double getFrequencyPenalty() const;
    void setFrequencyPenalty(double const value);
    bool frequencyPenaltyIsSet() const;
    void unsetFrequency_penalty();
    /// <summary>
    /// Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view&#x3D;bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass &#x60;{\&quot;50256\&quot;: -100}&#x60; to prevent the &lt;|endoftext|&gt; token from being generated. 
    /// </summary>
    std::map<std::string, int32_t> getLogitBias() const;
    void setLogitBias(std::map<std::string, int32_t> const value);
    bool logitBiasIsSet() const;
    void unsetLogit_bias();
    /// <summary>
    /// Include the log probabilities on the &#x60;logprobs&#x60; most likely output tokens, as well the chosen tokens. For example, if &#x60;logprobs&#x60; is 5, the API will return a list of the 5 most likely tokens. The API will always return the &#x60;logprob&#x60; of the sampled token, so there may be up to &#x60;logprobs+1&#x60; elements in the response.  The maximum value for &#x60;logprobs&#x60; is 5. 
    /// </summary>
    int32_t getLogprobs() const;
    void setLogprobs(int32_t const value);
    bool logprobsIsSet() const;
    void unsetLogprobs();
    /// <summary>
    /// The maximum number of [tokens](/tokenizer) that can be generated in the completion.  The token count of your prompt plus &#x60;max_tokens&#x60; cannot exceed the model&#39;s context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. 
    /// </summary>
    int32_t getMaxTokens() const;
    void setMaxTokens(int32_t const value);
    bool maxTokensIsSet() const;
    void unsetMax_tokens();
    /// <summary>
    /// How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for &#x60;max_tokens&#x60; and &#x60;stop&#x60;. 
    /// </summary>
    int32_t getN() const;
    void setN(int32_t const value);
    bool NIsSet() const;
    void unsetn();
    /// <summary>
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
    /// </summary>
    double getPresencePenalty() const;
    void setPresencePenalty(double const value);
    bool presencePenaltyIsSet() const;
    void unsetPresence_penalty();
    /// <summary>
    /// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same &#x60;seed&#x60; and parameters should return the same result.  Determinism is not guaranteed, and you should refer to the &#x60;system_fingerprint&#x60; response parameter to monitor changes in the backend. 
    /// </summary>
    int32_t getSeed() const;
    void setSeed(int32_t const value);
    bool seedIsSet() const;
    void unsetSeed();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CreateCompletionRequest_stop getStop() const;
    void setStop(org::openapitools::server::model::CreateCompletionRequest_stop const& value);
    bool stopIsSet() const;
    void unsetStop();
    /// <summary>
    /// Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a &#x60;data: [DONE]&#x60; message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). 
    /// </summary>
    bool isStream() const;
    void setStream(bool const value);
    bool streamIsSet() const;
    void unsetStream();
    /// <summary>
    /// The suffix that comes after a completion of inserted text.  This parameter is only supported for &#x60;gpt-3.5-turbo-instruct&#x60;. 
    /// </summary>
    std::string getSuffix() const;
    void setSuffix(std::string const& value);
    bool suffixIsSet() const;
    void unsetSuffix();
    /// <summary>
    /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both. 
    /// </summary>
    double getTemperature() const;
    void setTemperature(double const value);
    bool temperatureIsSet() const;
    void unsetTemperature();
    /// <summary>
    /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. 
    /// </summary>
    double getTopP() const;
    void setTopP(double const value);
    bool topPIsSet() const;
    void unsetTop_p();
    /// <summary>
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    /// </summary>
    std::string getUser() const;
    void setUser(std::string const& value);
    bool userIsSet() const;
    void unsetUser();

    friend  void to_json(nlohmann::json& j, const CreateCompletionRequest& o);
    friend  void from_json(const nlohmann::json& j, CreateCompletionRequest& o);
protected:
    org::openapitools::server::model::CreateCompletionRequest_model m_Model;

    org::openapitools::server::model::CreateCompletionRequest_prompt m_Prompt;

    int32_t m_Best_of;
    bool m_Best_ofIsSet;
    bool m_Echo;
    bool m_EchoIsSet;
    double m_Frequency_penalty;
    bool m_Frequency_penaltyIsSet;
    std::map<std::string, int32_t> m_Logit_bias;
    bool m_Logit_biasIsSet;
    int32_t m_Logprobs;
    bool m_LogprobsIsSet;
    int32_t m_Max_tokens;
    bool m_Max_tokensIsSet;
    int32_t m_n;
    bool m_nIsSet;
    double m_Presence_penalty;
    bool m_Presence_penaltyIsSet;
    int32_t m_Seed;
    bool m_SeedIsSet;
    org::openapitools::server::model::CreateCompletionRequest_stop m_Stop;
    bool m_StopIsSet;
    bool m_Stream;
    bool m_StreamIsSet;
    std::string m_Suffix;
    bool m_SuffixIsSet;
    double m_Temperature;
    bool m_TemperatureIsSet;
    double m_Top_p;
    bool m_Top_pIsSet;
    std::string m_User;
    bool m_UserIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* CreateCompletionRequest_H_ */
