/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateCompletionResponse_choices_inner_logprobs.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateCompletionResponse_choices_inner_logprobs::CreateCompletionResponse_choices_inner_logprobs()
{
    m_TokensIsSet = false;
    m_Token_logprobsIsSet = false;
    m_Top_logprobsIsSet = false;
    m_Text_offsetIsSet = false;
    
}

void CreateCompletionResponse_choices_inner_logprobs::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateCompletionResponse_choices_inner_logprobs::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateCompletionResponse_choices_inner_logprobs::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateCompletionResponse_choices_inner_logprobs" : pathPrefix;

         
    if (tokensIsSet())
    {
        const std::vector<std::string>& value = m_Tokens;
        const std::string currentValuePath = _pathPrefix + ".tokens";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (tokenLogprobsIsSet())
    {
        const std::vector<double>& value = m_Token_logprobs;
        const std::string currentValuePath = _pathPrefix + ".tokenLogprobs";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const double& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (topLogprobsIsSet())
    {
        const std::vector<org::openapitools::server::model::Object>& value = m_Top_logprobs;
        const std::string currentValuePath = _pathPrefix + ".topLogprobs";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::Object& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (textOffsetIsSet())
    {
        const std::vector<int32_t>& value = m_Text_offset;
        const std::string currentValuePath = _pathPrefix + ".textOffset";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int32_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool CreateCompletionResponse_choices_inner_logprobs::operator==(const CreateCompletionResponse_choices_inner_logprobs& rhs) const
{
    return
    
    
    
    ((!tokensIsSet() && !rhs.tokensIsSet()) || (tokensIsSet() && rhs.tokensIsSet() && getTokens() == rhs.getTokens())) &&
    
    
    ((!tokenLogprobsIsSet() && !rhs.tokenLogprobsIsSet()) || (tokenLogprobsIsSet() && rhs.tokenLogprobsIsSet() && getTokenLogprobs() == rhs.getTokenLogprobs())) &&
    
    
    ((!topLogprobsIsSet() && !rhs.topLogprobsIsSet()) || (topLogprobsIsSet() && rhs.topLogprobsIsSet() && getTopLogprobs() == rhs.getTopLogprobs())) &&
    
    
    ((!textOffsetIsSet() && !rhs.textOffsetIsSet()) || (textOffsetIsSet() && rhs.textOffsetIsSet() && getTextOffset() == rhs.getTextOffset()))
    
    ;
}

bool CreateCompletionResponse_choices_inner_logprobs::operator!=(const CreateCompletionResponse_choices_inner_logprobs& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateCompletionResponse_choices_inner_logprobs& o)
{
    j = nlohmann::json::object();
    if(o.tokensIsSet() || !o.m_Tokens.empty())
        j["tokens"] = o.m_Tokens;
    if(o.tokenLogprobsIsSet() || !o.m_Token_logprobs.empty())
        j["token_logprobs"] = o.m_Token_logprobs;
    if(o.topLogprobsIsSet() || !o.m_Top_logprobs.empty())
        j["top_logprobs"] = o.m_Top_logprobs;
    if(o.textOffsetIsSet() || !o.m_Text_offset.empty())
        j["text_offset"] = o.m_Text_offset;
    
}

void from_json(const nlohmann::json& j, CreateCompletionResponse_choices_inner_logprobs& o)
{
    if(j.find("tokens") != j.end())
    {
        j.at("tokens").get_to(o.m_Tokens);
        o.m_TokensIsSet = true;
    } 
    if(j.find("token_logprobs") != j.end())
    {
        j.at("token_logprobs").get_to(o.m_Token_logprobs);
        o.m_Token_logprobsIsSet = true;
    } 
    if(j.find("top_logprobs") != j.end())
    {
        j.at("top_logprobs").get_to(o.m_Top_logprobs);
        o.m_Top_logprobsIsSet = true;
    } 
    if(j.find("text_offset") != j.end())
    {
        j.at("text_offset").get_to(o.m_Text_offset);
        o.m_Text_offsetIsSet = true;
    } 
    
}

std::vector<std::string> CreateCompletionResponse_choices_inner_logprobs::getTokens() const
{
    return m_Tokens;
}
void CreateCompletionResponse_choices_inner_logprobs::setTokens(std::vector<std::string> const& value)
{
    m_Tokens = value;
    m_TokensIsSet = true;
}
bool CreateCompletionResponse_choices_inner_logprobs::tokensIsSet() const
{
    return m_TokensIsSet;
}
void CreateCompletionResponse_choices_inner_logprobs::unsetTokens()
{
    m_TokensIsSet = false;
}
std::vector<double> CreateCompletionResponse_choices_inner_logprobs::getTokenLogprobs() const
{
    return m_Token_logprobs;
}
void CreateCompletionResponse_choices_inner_logprobs::setTokenLogprobs(std::vector<double> const value)
{
    m_Token_logprobs = value;
    m_Token_logprobsIsSet = true;
}
bool CreateCompletionResponse_choices_inner_logprobs::tokenLogprobsIsSet() const
{
    return m_Token_logprobsIsSet;
}
void CreateCompletionResponse_choices_inner_logprobs::unsetToken_logprobs()
{
    m_Token_logprobsIsSet = false;
}
std::vector<org::openapitools::server::model::Object> CreateCompletionResponse_choices_inner_logprobs::getTopLogprobs() const
{
    return m_Top_logprobs;
}
void CreateCompletionResponse_choices_inner_logprobs::setTopLogprobs(std::vector<org::openapitools::server::model::Object> const& value)
{
    m_Top_logprobs = value;
    m_Top_logprobsIsSet = true;
}
bool CreateCompletionResponse_choices_inner_logprobs::topLogprobsIsSet() const
{
    return m_Top_logprobsIsSet;
}
void CreateCompletionResponse_choices_inner_logprobs::unsetTop_logprobs()
{
    m_Top_logprobsIsSet = false;
}
std::vector<int32_t> CreateCompletionResponse_choices_inner_logprobs::getTextOffset() const
{
    return m_Text_offset;
}
void CreateCompletionResponse_choices_inner_logprobs::setTextOffset(std::vector<int32_t> const value)
{
    m_Text_offset = value;
    m_Text_offsetIsSet = true;
}
bool CreateCompletionResponse_choices_inner_logprobs::textOffsetIsSet() const
{
    return m_Text_offsetIsSet;
}
void CreateCompletionResponse_choices_inner_logprobs::unsetText_offset()
{
    m_Text_offsetIsSet = false;
}


} // namespace org::openapitools::server::model

