/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateEditRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateEditRequest::CreateEditRequest()
{
    m_Input = "";
    m_InputIsSet = false;
    m_Instruction = "";
    m_n = 1;
    m_nIsSet = false;
    m_Temperature = 1;
    m_TemperatureIsSet = false;
    m_Top_p = 1;
    m_Top_pIsSet = false;
    
}

void CreateEditRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateEditRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateEditRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateEditRequest" : pathPrefix;

        
    if (!m_Model.validate()) {
        msg << _pathPrefix << ": Model is invalid;";
        success = false;
    }             
    if (NIsSet())
    {
        const int32_t& value = m_n;
        const std::string currentValuePath = _pathPrefix + ".N";
                
        
        if (value < 1)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 1;";
        }
        if (value > 20)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 20;";
        }

    }
         
    if (temperatureIsSet())
    {
        const double& value = m_Temperature;
        const std::string currentValuePath = _pathPrefix + ".temperature";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }
        if (value > 2)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 2;";
        }

    }
         
    if (topPIsSet())
    {
        const double& value = m_Top_p;
        const std::string currentValuePath = _pathPrefix + ".topP";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }
        if (value > 1)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 1;";
        }

    }
    
    return success;
}

bool CreateEditRequest::operator==(const CreateEditRequest& rhs) const
{
    return
    
    
    (getModel() == rhs.getModel())
     &&
    
    
    ((!inputIsSet() && !rhs.inputIsSet()) || (inputIsSet() && rhs.inputIsSet() && getInput() == rhs.getInput())) &&
    
    (getInstruction() == rhs.getInstruction())
     &&
    
    
    ((!NIsSet() && !rhs.NIsSet()) || (NIsSet() && rhs.NIsSet() && getN() == rhs.getN())) &&
    
    
    ((!temperatureIsSet() && !rhs.temperatureIsSet()) || (temperatureIsSet() && rhs.temperatureIsSet() && getTemperature() == rhs.getTemperature())) &&
    
    
    ((!topPIsSet() && !rhs.topPIsSet()) || (topPIsSet() && rhs.topPIsSet() && getTopP() == rhs.getTopP()))
    
    ;
}

bool CreateEditRequest::operator!=(const CreateEditRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateEditRequest& o)
{
    j = nlohmann::json::object();
    j["model"] = o.m_Model;
    if(o.inputIsSet())
        j["input"] = o.m_Input;
    j["instruction"] = o.m_Instruction;
    if(o.NIsSet())
        j["n"] = o.m_n;
    if(o.temperatureIsSet())
        j["temperature"] = o.m_Temperature;
    if(o.topPIsSet())
        j["top_p"] = o.m_Top_p;
    
}

void from_json(const nlohmann::json& j, CreateEditRequest& o)
{
    j.at("model").get_to(o.m_Model);
    if(j.find("input") != j.end())
    {
        j.at("input").get_to(o.m_Input);
        o.m_InputIsSet = true;
    } 
    j.at("instruction").get_to(o.m_Instruction);
    if(j.find("n") != j.end())
    {
        j.at("n").get_to(o.m_n);
        o.m_nIsSet = true;
    } 
    if(j.find("temperature") != j.end())
    {
        j.at("temperature").get_to(o.m_Temperature);
        o.m_TemperatureIsSet = true;
    } 
    if(j.find("top_p") != j.end())
    {
        j.at("top_p").get_to(o.m_Top_p);
        o.m_Top_pIsSet = true;
    } 
    
}

org::openapitools::server::model::CreateEditRequest_model CreateEditRequest::getModel() const
{
    return m_Model;
}
void CreateEditRequest::setModel(org::openapitools::server::model::CreateEditRequest_model const& value)
{
    m_Model = value;
}
std::string CreateEditRequest::getInput() const
{
    return m_Input;
}
void CreateEditRequest::setInput(std::string const& value)
{
    m_Input = value;
    m_InputIsSet = true;
}
bool CreateEditRequest::inputIsSet() const
{
    return m_InputIsSet;
}
void CreateEditRequest::unsetInput()
{
    m_InputIsSet = false;
}
std::string CreateEditRequest::getInstruction() const
{
    return m_Instruction;
}
void CreateEditRequest::setInstruction(std::string const& value)
{
    m_Instruction = value;
}
int32_t CreateEditRequest::getN() const
{
    return m_n;
}
void CreateEditRequest::setN(int32_t const value)
{
    m_n = value;
    m_nIsSet = true;
}
bool CreateEditRequest::NIsSet() const
{
    return m_nIsSet;
}
void CreateEditRequest::unsetn()
{
    m_nIsSet = false;
}
double CreateEditRequest::getTemperature() const
{
    return m_Temperature;
}
void CreateEditRequest::setTemperature(double const value)
{
    m_Temperature = value;
    m_TemperatureIsSet = true;
}
bool CreateEditRequest::temperatureIsSet() const
{
    return m_TemperatureIsSet;
}
void CreateEditRequest::unsetTemperature()
{
    m_TemperatureIsSet = false;
}
double CreateEditRequest::getTopP() const
{
    return m_Top_p;
}
void CreateEditRequest::setTopP(double const value)
{
    m_Top_p = value;
    m_Top_pIsSet = true;
}
bool CreateEditRequest::topPIsSet() const
{
    return m_Top_pIsSet;
}
void CreateEditRequest::unsetTop_p()
{
    m_Top_pIsSet = false;
}


} // namespace org::openapitools::server::model

