/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CreateEmbeddingRequest.h
 *
 * 
 */

#ifndef CreateEmbeddingRequest_H_
#define CreateEmbeddingRequest_H_


#include "CreateEmbeddingRequest_input.h"
#include <string>
#include "CreateEmbeddingRequest_model.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  CreateEmbeddingRequest
{
public:
    CreateEmbeddingRequest();
    virtual ~CreateEmbeddingRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CreateEmbeddingRequest& rhs) const;
    bool operator!=(const CreateEmbeddingRequest& rhs) const;

    /////////////////////////////////////////////
    /// CreateEmbeddingRequest members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CreateEmbeddingRequest_input getInput() const;
    void setInput(org::openapitools::server::model::CreateEmbeddingRequest_input const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CreateEmbeddingRequest_model getModel() const;
    void setModel(org::openapitools::server::model::CreateEmbeddingRequest_model const& value);
    /// <summary>
    /// The format to return the embeddings in. Can be either &#x60;float&#x60; or [&#x60;base64&#x60;](https://pypi.org/project/pybase64/).
    /// </summary>
    std::string getEncodingFormat() const;
    void setEncodingFormat(std::string const& value);
    bool encodingFormatIsSet() const;
    void unsetEncoding_format();
    /// <summary>
    /// The number of dimensions the resulting output embeddings should have. Only supported in &#x60;text-embedding-3&#x60; and later models. 
    /// </summary>
    int32_t getDimensions() const;
    void setDimensions(int32_t const value);
    bool dimensionsIsSet() const;
    void unsetDimensions();
    /// <summary>
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    /// </summary>
    std::string getUser() const;
    void setUser(std::string const& value);
    bool userIsSet() const;
    void unsetUser();

    friend  void to_json(nlohmann::json& j, const CreateEmbeddingRequest& o);
    friend  void from_json(const nlohmann::json& j, CreateEmbeddingRequest& o);
protected:
    org::openapitools::server::model::CreateEmbeddingRequest_input m_Input;

    org::openapitools::server::model::CreateEmbeddingRequest_model m_Model;

    std::string m_Encoding_format;
    bool m_Encoding_formatIsSet;
    int32_t m_Dimensions;
    bool m_DimensionsIsSet;
    std::string m_User;
    bool m_UserIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* CreateEmbeddingRequest_H_ */
