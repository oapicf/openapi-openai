/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateEmbeddingResponse_data_inner.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateEmbeddingResponse_data_inner::CreateEmbeddingResponse_data_inner()
{
    m_Index = 0;
    m_object = "";
    
}

void CreateEmbeddingResponse_data_inner::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateEmbeddingResponse_data_inner::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateEmbeddingResponse_data_inner::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateEmbeddingResponse_data_inner" : pathPrefix;

                 
    
    /* Embedding */ {
        const std::vector<double>& value = m_Embedding;
        const std::string currentValuePath = _pathPrefix + ".embedding";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const double& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool CreateEmbeddingResponse_data_inner::operator==(const CreateEmbeddingResponse_data_inner& rhs) const
{
    return
    
    
    (getIndex() == rhs.getIndex())
     &&
    
    (getObject() == rhs.getObject())
     &&
    
    (getEmbedding() == rhs.getEmbedding())
    
    
    ;
}

bool CreateEmbeddingResponse_data_inner::operator!=(const CreateEmbeddingResponse_data_inner& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateEmbeddingResponse_data_inner& o)
{
    j = nlohmann::json::object();
    j["index"] = o.m_Index;
    j["object"] = o.m_object;
    j["embedding"] = o.m_Embedding;
    
}

void from_json(const nlohmann::json& j, CreateEmbeddingResponse_data_inner& o)
{
    j.at("index").get_to(o.m_Index);
    j.at("object").get_to(o.m_object);
    j.at("embedding").get_to(o.m_Embedding);
    
}

int32_t CreateEmbeddingResponse_data_inner::getIndex() const
{
    return m_Index;
}
void CreateEmbeddingResponse_data_inner::setIndex(int32_t const value)
{
    m_Index = value;
}
std::string CreateEmbeddingResponse_data_inner::getObject() const
{
    return m_object;
}
void CreateEmbeddingResponse_data_inner::setObject(std::string const& value)
{
    m_object = value;
}
std::vector<double> CreateEmbeddingResponse_data_inner::getEmbedding() const
{
    return m_Embedding;
}
void CreateEmbeddingResponse_data_inner::setEmbedding(std::vector<double> const value)
{
    m_Embedding = value;
}


} // namespace org::openapitools::server::model

