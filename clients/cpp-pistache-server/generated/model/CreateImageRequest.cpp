/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateImageRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateImageRequest::CreateImageRequest()
{
    m_Prompt = "";
    m_ModelIsSet = false;
    m_n = 1;
    m_nIsSet = false;
    m_Quality = "standard";
    m_QualityIsSet = false;
    m_Response_format = "url";
    m_Response_formatIsSet = false;
    m_Size = "1024x1024";
    m_SizeIsSet = false;
    m_Style = "vivid";
    m_StyleIsSet = false;
    m_User = "";
    m_UserIsSet = false;
    
}

void CreateImageRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateImageRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateImageRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateImageRequest" : pathPrefix;

                 
    if (NIsSet())
    {
        const int32_t& value = m_n;
        const std::string currentValuePath = _pathPrefix + ".N";
                
        
        if (value < 1)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 1;";
        }
        if (value > 10)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 10;";
        }

    }
                        
    return success;
}

bool CreateImageRequest::operator==(const CreateImageRequest& rhs) const
{
    return
    
    
    (getPrompt() == rhs.getPrompt())
     &&
    
    
    ((!modelIsSet() && !rhs.modelIsSet()) || (modelIsSet() && rhs.modelIsSet() && getModel() == rhs.getModel())) &&
    
    
    ((!NIsSet() && !rhs.NIsSet()) || (NIsSet() && rhs.NIsSet() && getN() == rhs.getN())) &&
    
    
    ((!qualityIsSet() && !rhs.qualityIsSet()) || (qualityIsSet() && rhs.qualityIsSet() && getQuality() == rhs.getQuality())) &&
    
    
    ((!responseFormatIsSet() && !rhs.responseFormatIsSet()) || (responseFormatIsSet() && rhs.responseFormatIsSet() && getResponseFormat() == rhs.getResponseFormat())) &&
    
    
    ((!sizeIsSet() && !rhs.sizeIsSet()) || (sizeIsSet() && rhs.sizeIsSet() && getSize() == rhs.getSize())) &&
    
    
    ((!styleIsSet() && !rhs.styleIsSet()) || (styleIsSet() && rhs.styleIsSet() && getStyle() == rhs.getStyle())) &&
    
    
    ((!userIsSet() && !rhs.userIsSet()) || (userIsSet() && rhs.userIsSet() && getUser() == rhs.getUser()))
    
    ;
}

bool CreateImageRequest::operator!=(const CreateImageRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateImageRequest& o)
{
    j = nlohmann::json::object();
    j["prompt"] = o.m_Prompt;
    if(o.modelIsSet())
        j["model"] = o.m_Model;
    if(o.NIsSet())
        j["n"] = o.m_n;
    if(o.qualityIsSet())
        j["quality"] = o.m_Quality;
    if(o.responseFormatIsSet())
        j["response_format"] = o.m_Response_format;
    if(o.sizeIsSet())
        j["size"] = o.m_Size;
    if(o.styleIsSet())
        j["style"] = o.m_Style;
    if(o.userIsSet())
        j["user"] = o.m_User;
    
}

void from_json(const nlohmann::json& j, CreateImageRequest& o)
{
    j.at("prompt").get_to(o.m_Prompt);
    if(j.find("model") != j.end())
    {
        j.at("model").get_to(o.m_Model);
        o.m_ModelIsSet = true;
    } 
    if(j.find("n") != j.end())
    {
        j.at("n").get_to(o.m_n);
        o.m_nIsSet = true;
    } 
    if(j.find("quality") != j.end())
    {
        j.at("quality").get_to(o.m_Quality);
        o.m_QualityIsSet = true;
    } 
    if(j.find("response_format") != j.end())
    {
        j.at("response_format").get_to(o.m_Response_format);
        o.m_Response_formatIsSet = true;
    } 
    if(j.find("size") != j.end())
    {
        j.at("size").get_to(o.m_Size);
        o.m_SizeIsSet = true;
    } 
    if(j.find("style") != j.end())
    {
        j.at("style").get_to(o.m_Style);
        o.m_StyleIsSet = true;
    } 
    if(j.find("user") != j.end())
    {
        j.at("user").get_to(o.m_User);
        o.m_UserIsSet = true;
    } 
    
}

std::string CreateImageRequest::getPrompt() const
{
    return m_Prompt;
}
void CreateImageRequest::setPrompt(std::string const& value)
{
    m_Prompt = value;
}
org::openapitools::server::model::CreateImageRequest_model CreateImageRequest::getModel() const
{
    return m_Model;
}
void CreateImageRequest::setModel(org::openapitools::server::model::CreateImageRequest_model const& value)
{
    m_Model = value;
    m_ModelIsSet = true;
}
bool CreateImageRequest::modelIsSet() const
{
    return m_ModelIsSet;
}
void CreateImageRequest::unsetModel()
{
    m_ModelIsSet = false;
}
int32_t CreateImageRequest::getN() const
{
    return m_n;
}
void CreateImageRequest::setN(int32_t const value)
{
    m_n = value;
    m_nIsSet = true;
}
bool CreateImageRequest::NIsSet() const
{
    return m_nIsSet;
}
void CreateImageRequest::unsetn()
{
    m_nIsSet = false;
}
std::string CreateImageRequest::getQuality() const
{
    return m_Quality;
}
void CreateImageRequest::setQuality(std::string const& value)
{
    m_Quality = value;
    m_QualityIsSet = true;
}
bool CreateImageRequest::qualityIsSet() const
{
    return m_QualityIsSet;
}
void CreateImageRequest::unsetQuality()
{
    m_QualityIsSet = false;
}
std::string CreateImageRequest::getResponseFormat() const
{
    return m_Response_format;
}
void CreateImageRequest::setResponseFormat(std::string const& value)
{
    m_Response_format = value;
    m_Response_formatIsSet = true;
}
bool CreateImageRequest::responseFormatIsSet() const
{
    return m_Response_formatIsSet;
}
void CreateImageRequest::unsetResponse_format()
{
    m_Response_formatIsSet = false;
}
std::string CreateImageRequest::getSize() const
{
    return m_Size;
}
void CreateImageRequest::setSize(std::string const& value)
{
    m_Size = value;
    m_SizeIsSet = true;
}
bool CreateImageRequest::sizeIsSet() const
{
    return m_SizeIsSet;
}
void CreateImageRequest::unsetSize()
{
    m_SizeIsSet = false;
}
std::string CreateImageRequest::getStyle() const
{
    return m_Style;
}
void CreateImageRequest::setStyle(std::string const& value)
{
    m_Style = value;
    m_StyleIsSet = true;
}
bool CreateImageRequest::styleIsSet() const
{
    return m_StyleIsSet;
}
void CreateImageRequest::unsetStyle()
{
    m_StyleIsSet = false;
}
std::string CreateImageRequest::getUser() const
{
    return m_User;
}
void CreateImageRequest::setUser(std::string const& value)
{
    m_User = value;
    m_UserIsSet = true;
}
bool CreateImageRequest::userIsSet() const
{
    return m_UserIsSet;
}
void CreateImageRequest::unsetUser()
{
    m_UserIsSet = false;
}


} // namespace org::openapitools::server::model

