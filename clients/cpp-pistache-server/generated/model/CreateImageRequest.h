/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CreateImageRequest.h
 *
 * 
 */

#ifndef CreateImageRequest_H_
#define CreateImageRequest_H_


#include <string>
#include "CreateImageRequest_model.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  CreateImageRequest
{
public:
    CreateImageRequest();
    virtual ~CreateImageRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CreateImageRequest& rhs) const;
    bool operator!=(const CreateImageRequest& rhs) const;

    /////////////////////////////////////////////
    /// CreateImageRequest members

    /// <summary>
    /// A text description of the desired image(s). The maximum length is 1000 characters for &#x60;dall-e-2&#x60; and 4000 characters for &#x60;dall-e-3&#x60;.
    /// </summary>
    std::string getPrompt() const;
    void setPrompt(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CreateImageRequest_model getModel() const;
    void setModel(org::openapitools::server::model::CreateImageRequest_model const& value);
    bool modelIsSet() const;
    void unsetModel();
    /// <summary>
    /// The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported.
    /// </summary>
    int32_t getN() const;
    void setN(int32_t const value);
    bool NIsSet() const;
    void unsetn();
    /// <summary>
    /// The quality of the image that will be generated. &#x60;hd&#x60; creates images with finer details and greater consistency across the image. This param is only supported for &#x60;dall-e-3&#x60;.
    /// </summary>
    std::string getQuality() const;
    void setQuality(std::string const& value);
    bool qualityIsSet() const;
    void unsetQuality();
    /// <summary>
    /// The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated.
    /// </summary>
    std::string getResponseFormat() const;
    void setResponseFormat(std::string const& value);
    bool responseFormatIsSet() const;
    void unsetResponse_format();
    /// <summary>
    /// The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60; for &#x60;dall-e-2&#x60;. Must be one of &#x60;1024x1024&#x60;, &#x60;1792x1024&#x60;, or &#x60;1024x1792&#x60; for &#x60;dall-e-3&#x60; models.
    /// </summary>
    std::string getSize() const;
    void setSize(std::string const& value);
    bool sizeIsSet() const;
    void unsetSize();
    /// <summary>
    /// The style of the generated images. Must be one of &#x60;vivid&#x60; or &#x60;natural&#x60;. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for &#x60;dall-e-3&#x60;.
    /// </summary>
    std::string getStyle() const;
    void setStyle(std::string const& value);
    bool styleIsSet() const;
    void unsetStyle();
    /// <summary>
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    /// </summary>
    std::string getUser() const;
    void setUser(std::string const& value);
    bool userIsSet() const;
    void unsetUser();

    friend  void to_json(nlohmann::json& j, const CreateImageRequest& o);
    friend  void from_json(const nlohmann::json& j, CreateImageRequest& o);
protected:
    std::string m_Prompt;

    org::openapitools::server::model::CreateImageRequest_model m_Model;
    bool m_ModelIsSet;
    int32_t m_n;
    bool m_nIsSet;
    std::string m_Quality;
    bool m_QualityIsSet;
    std::string m_Response_format;
    bool m_Response_formatIsSet;
    std::string m_Size;
    bool m_SizeIsSet;
    std::string m_Style;
    bool m_StyleIsSet;
    std::string m_User;
    bool m_UserIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* CreateImageRequest_H_ */
