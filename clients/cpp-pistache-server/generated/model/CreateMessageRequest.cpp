/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateMessageRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateMessageRequest::CreateMessageRequest()
{
    m_Role = "";
    m_Content = "";
    m_File_idsIsSet = false;
    m_MetadataIsSet = false;
    
}

void CreateMessageRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateMessageRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateMessageRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateMessageRequest" : pathPrefix;

             
    
    /* Content */ {
        const std::string& value = m_Content;
        const std::string currentValuePath = _pathPrefix + ".content";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 256000)
        {
            success = false;
            msg << currentValuePath << ": must be at most 256000 characters long;";
        }

    }
         
    if (fileIdsIsSet())
    {
        const std::vector<std::string>& value = m_File_ids;
        const std::string currentValuePath = _pathPrefix + ".fileIds";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        if (value.size() > 10)
        {
            success = false;
            msg << currentValuePath << ": must have at most 10 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
        
    return success;
}

bool CreateMessageRequest::operator==(const CreateMessageRequest& rhs) const
{
    return
    
    
    (getRole() == rhs.getRole())
     &&
    
    (getContent() == rhs.getContent())
     &&
    
    
    ((!fileIdsIsSet() && !rhs.fileIdsIsSet()) || (fileIdsIsSet() && rhs.fileIdsIsSet() && getFileIds() == rhs.getFileIds())) &&
    
    
    ((!metadataIsSet() && !rhs.metadataIsSet()) || (metadataIsSet() && rhs.metadataIsSet() && getMetadata() == rhs.getMetadata()))
    
    ;
}

bool CreateMessageRequest::operator!=(const CreateMessageRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateMessageRequest& o)
{
    j = nlohmann::json::object();
    j["role"] = o.m_Role;
    j["content"] = o.m_Content;
    if(o.fileIdsIsSet() || !o.m_File_ids.empty())
        j["file_ids"] = o.m_File_ids;
    if(o.metadataIsSet())
        j["metadata"] = o.m_Metadata;
    
}

void from_json(const nlohmann::json& j, CreateMessageRequest& o)
{
    j.at("role").get_to(o.m_Role);
    j.at("content").get_to(o.m_Content);
    if(j.find("file_ids") != j.end())
    {
        j.at("file_ids").get_to(o.m_File_ids);
        o.m_File_idsIsSet = true;
    } 
    if(j.find("metadata") != j.end())
    {
        j.at("metadata").get_to(o.m_Metadata);
        o.m_MetadataIsSet = true;
    } 
    
}

std::string CreateMessageRequest::getRole() const
{
    return m_Role;
}
void CreateMessageRequest::setRole(std::string const& value)
{
    m_Role = value;
}
std::string CreateMessageRequest::getContent() const
{
    return m_Content;
}
void CreateMessageRequest::setContent(std::string const& value)
{
    m_Content = value;
}
std::vector<std::string> CreateMessageRequest::getFileIds() const
{
    return m_File_ids;
}
void CreateMessageRequest::setFileIds(std::vector<std::string> const& value)
{
    m_File_ids = value;
    m_File_idsIsSet = true;
}
bool CreateMessageRequest::fileIdsIsSet() const
{
    return m_File_idsIsSet;
}
void CreateMessageRequest::unsetFile_ids()
{
    m_File_idsIsSet = false;
}
org::openapitools::server::model::Object CreateMessageRequest::getMetadata() const
{
    return m_Metadata;
}
void CreateMessageRequest::setMetadata(org::openapitools::server::model::Object const& value)
{
    m_Metadata = value;
    m_MetadataIsSet = true;
}
bool CreateMessageRequest::metadataIsSet() const
{
    return m_MetadataIsSet;
}
void CreateMessageRequest::unsetMetadata()
{
    m_MetadataIsSet = false;
}


} // namespace org::openapitools::server::model

