/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CreateMessageRequest.h
 *
 * 
 */

#ifndef CreateMessageRequest_H_
#define CreateMessageRequest_H_


#include <nlohmann/json.hpp>
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  CreateMessageRequest
{
public:
    CreateMessageRequest();
    virtual ~CreateMessageRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CreateMessageRequest& rhs) const;
    bool operator!=(const CreateMessageRequest& rhs) const;

    /////////////////////////////////////////////
    /// CreateMessageRequest members

    /// <summary>
    /// The role of the entity that is creating the message. Allowed values include: - &#x60;user&#x60;: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages. - &#x60;assistant&#x60;: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation. 
    /// </summary>
    std::string getRole() const;
    void setRole(std::string const& value);
    /// <summary>
    /// The content of the message.
    /// </summary>
    std::string getContent() const;
    void setContent(std::string const& value);
    /// <summary>
    /// A list of [File](/docs/api-reference/files) IDs that the message should use. There can be a maximum of 10 files attached to a message. Useful for tools like &#x60;retrieval&#x60; and &#x60;code_interpreter&#x60; that can access and use files.
    /// </summary>
    std::vector<std::string> getFileIds() const;
    void setFileIds(std::vector<std::string> const& value);
    bool fileIdsIsSet() const;
    void unsetFile_ids();
    /// <summary>
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    /// </summary>
    nlohmann::json getMetadata() const;
    void setMetadata(nlohmann::json const& value);
    bool metadataIsSet() const;
    void unsetMetadata();

    friend  void to_json(nlohmann::json& j, const CreateMessageRequest& o);
    friend  void from_json(const nlohmann::json& j, CreateMessageRequest& o);
protected:
    std::string m_Role;

    std::string m_Content;

    std::vector<std::string> m_File_ids;
    bool m_File_idsIsSet;
    nlohmann::json m_Metadata;
    bool m_MetadataIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* CreateMessageRequest_H_ */
