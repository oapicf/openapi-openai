/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateModerationResponse.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateModerationResponse::CreateModerationResponse()
{
    m_Id = "";
    m_Model = "";
    
}

void CreateModerationResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateModerationResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateModerationResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateModerationResponse" : pathPrefix;

                 
    
    /* Results */ {
        const std::vector<org::openapitools::server::model::CreateModerationResponse_results_inner>& value = m_Results;
        const std::string currentValuePath = _pathPrefix + ".results";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::CreateModerationResponse_results_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".results") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool CreateModerationResponse::operator==(const CreateModerationResponse& rhs) const
{
    return
    
    
    (getId() == rhs.getId())
     &&
    
    (getModel() == rhs.getModel())
     &&
    
    (getResults() == rhs.getResults())
    
    
    ;
}

bool CreateModerationResponse::operator!=(const CreateModerationResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateModerationResponse& o)
{
    j = nlohmann::json::object();
    j["id"] = o.m_Id;
    j["model"] = o.m_Model;
    j["results"] = o.m_Results;
    
}

void from_json(const nlohmann::json& j, CreateModerationResponse& o)
{
    j.at("id").get_to(o.m_Id);
    j.at("model").get_to(o.m_Model);
    j.at("results").get_to(o.m_Results);
    
}

std::string CreateModerationResponse::getId() const
{
    return m_Id;
}
void CreateModerationResponse::setId(std::string const& value)
{
    m_Id = value;
}
std::string CreateModerationResponse::getModel() const
{
    return m_Model;
}
void CreateModerationResponse::setModel(std::string const& value)
{
    m_Model = value;
}
std::vector<org::openapitools::server::model::CreateModerationResponse_results_inner> CreateModerationResponse::getResults() const
{
    return m_Results;
}
void CreateModerationResponse::setResults(std::vector<org::openapitools::server::model::CreateModerationResponse_results_inner> const& value)
{
    m_Results = value;
}


} // namespace org::openapitools::server::model

