/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateSpeechRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateSpeechRequest::CreateSpeechRequest()
{
    m_Input = "";
    m_Voice = "";
    m_Response_format = "mp3";
    m_Response_formatIsSet = false;
    m_Speed = 1.0;
    m_SpeedIsSet = false;
    
}

void CreateSpeechRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateSpeechRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateSpeechRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateSpeechRequest" : pathPrefix;

        
    if (!m_Model.validate()) {
        msg << _pathPrefix << ": Model is invalid;";
        success = false;
    }     
    
    /* Input */ {
        const std::string& value = m_Input;
        const std::string currentValuePath = _pathPrefix + ".input";
                
        
        if (value.length() > 4096)
        {
            success = false;
            msg << currentValuePath << ": must be at most 4096 characters long;";
        }

    }
                 
    if (speedIsSet())
    {
        const double& value = m_Speed;
        const std::string currentValuePath = _pathPrefix + ".speed";
                
        
        if (value < 0.25)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0.25;";
        }
        if (value > 4.0)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 4.0;";
        }

    }
    
    return success;
}

bool CreateSpeechRequest::operator==(const CreateSpeechRequest& rhs) const
{
    return
    
    
    (getModel() == rhs.getModel())
     &&
    
    (getInput() == rhs.getInput())
     &&
    
    (getVoice() == rhs.getVoice())
     &&
    
    
    ((!responseFormatIsSet() && !rhs.responseFormatIsSet()) || (responseFormatIsSet() && rhs.responseFormatIsSet() && getResponseFormat() == rhs.getResponseFormat())) &&
    
    
    ((!speedIsSet() && !rhs.speedIsSet()) || (speedIsSet() && rhs.speedIsSet() && getSpeed() == rhs.getSpeed()))
    
    ;
}

bool CreateSpeechRequest::operator!=(const CreateSpeechRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateSpeechRequest& o)
{
    j = nlohmann::json::object();
    j["model"] = o.m_Model;
    j["input"] = o.m_Input;
    j["voice"] = o.m_Voice;
    if(o.responseFormatIsSet())
        j["response_format"] = o.m_Response_format;
    if(o.speedIsSet())
        j["speed"] = o.m_Speed;
    
}

void from_json(const nlohmann::json& j, CreateSpeechRequest& o)
{
    j.at("model").get_to(o.m_Model);
    j.at("input").get_to(o.m_Input);
    j.at("voice").get_to(o.m_Voice);
    if(j.find("response_format") != j.end())
    {
        j.at("response_format").get_to(o.m_Response_format);
        o.m_Response_formatIsSet = true;
    } 
    if(j.find("speed") != j.end())
    {
        j.at("speed").get_to(o.m_Speed);
        o.m_SpeedIsSet = true;
    } 
    
}

org::openapitools::server::model::CreateSpeechRequest_model CreateSpeechRequest::getModel() const
{
    return m_Model;
}
void CreateSpeechRequest::setModel(org::openapitools::server::model::CreateSpeechRequest_model const& value)
{
    m_Model = value;
}
std::string CreateSpeechRequest::getInput() const
{
    return m_Input;
}
void CreateSpeechRequest::setInput(std::string const& value)
{
    m_Input = value;
}
std::string CreateSpeechRequest::getVoice() const
{
    return m_Voice;
}
void CreateSpeechRequest::setVoice(std::string const& value)
{
    m_Voice = value;
}
std::string CreateSpeechRequest::getResponseFormat() const
{
    return m_Response_format;
}
void CreateSpeechRequest::setResponseFormat(std::string const& value)
{
    m_Response_format = value;
    m_Response_formatIsSet = true;
}
bool CreateSpeechRequest::responseFormatIsSet() const
{
    return m_Response_formatIsSet;
}
void CreateSpeechRequest::unsetResponse_format()
{
    m_Response_formatIsSet = false;
}
double CreateSpeechRequest::getSpeed() const
{
    return m_Speed;
}
void CreateSpeechRequest::setSpeed(double const value)
{
    m_Speed = value;
    m_SpeedIsSet = true;
}
bool CreateSpeechRequest::speedIsSet() const
{
    return m_SpeedIsSet;
}
void CreateSpeechRequest::unsetSpeed()
{
    m_SpeedIsSet = false;
}


} // namespace org::openapitools::server::model

