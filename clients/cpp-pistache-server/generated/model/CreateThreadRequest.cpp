/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateThreadRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateThreadRequest::CreateThreadRequest()
{
    m_MessagesIsSet = false;
    m_MetadataIsSet = false;
    
}

void CreateThreadRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateThreadRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateThreadRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateThreadRequest" : pathPrefix;

         
    if (messagesIsSet())
    {
        const std::vector<org::openapitools::server::model::CreateMessageRequest>& value = m_Messages;
        const std::string currentValuePath = _pathPrefix + ".messages";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::CreateMessageRequest& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".messages") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool CreateThreadRequest::operator==(const CreateThreadRequest& rhs) const
{
    return
    
    
    
    ((!messagesIsSet() && !rhs.messagesIsSet()) || (messagesIsSet() && rhs.messagesIsSet() && getMessages() == rhs.getMessages())) &&
    
    
    ((!metadataIsSet() && !rhs.metadataIsSet()) || (metadataIsSet() && rhs.metadataIsSet() && getMetadata() == rhs.getMetadata()))
    
    ;
}

bool CreateThreadRequest::operator!=(const CreateThreadRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateThreadRequest& o)
{
    j = nlohmann::json::object();
    if(o.messagesIsSet() || !o.m_Messages.empty())
        j["messages"] = o.m_Messages;
    if(o.metadataIsSet())
        j["metadata"] = o.m_Metadata;
    
}

void from_json(const nlohmann::json& j, CreateThreadRequest& o)
{
    if(j.find("messages") != j.end())
    {
        j.at("messages").get_to(o.m_Messages);
        o.m_MessagesIsSet = true;
    } 
    if(j.find("metadata") != j.end())
    {
        j.at("metadata").get_to(o.m_Metadata);
        o.m_MetadataIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::CreateMessageRequest> CreateThreadRequest::getMessages() const
{
    return m_Messages;
}
void CreateThreadRequest::setMessages(std::vector<org::openapitools::server::model::CreateMessageRequest> const& value)
{
    m_Messages = value;
    m_MessagesIsSet = true;
}
bool CreateThreadRequest::messagesIsSet() const
{
    return m_MessagesIsSet;
}
void CreateThreadRequest::unsetMessages()
{
    m_MessagesIsSet = false;
}
nlohmann::json CreateThreadRequest::getMetadata() const
{
    return m_Metadata;
}
void CreateThreadRequest::setMetadata(nlohmann::json const& value)
{
    m_Metadata = value;
    m_MetadataIsSet = true;
}
bool CreateThreadRequest::metadataIsSet() const
{
    return m_MetadataIsSet;
}
void CreateThreadRequest::unsetMetadata()
{
    m_MetadataIsSet = false;
}


} // namespace org::openapitools::server::model

