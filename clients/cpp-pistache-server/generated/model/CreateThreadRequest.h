/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CreateThreadRequest.h
 *
 * 
 */

#ifndef CreateThreadRequest_H_
#define CreateThreadRequest_H_


#include <nlohmann/json.hpp>
#include "CreateMessageRequest.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  CreateThreadRequest
{
public:
    CreateThreadRequest();
    virtual ~CreateThreadRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CreateThreadRequest& rhs) const;
    bool operator!=(const CreateThreadRequest& rhs) const;

    /////////////////////////////////////////////
    /// CreateThreadRequest members

    /// <summary>
    /// A list of [messages](/docs/api-reference/messages) to start the thread with.
    /// </summary>
    std::vector<org::openapitools::server::model::CreateMessageRequest> getMessages() const;
    void setMessages(std::vector<org::openapitools::server::model::CreateMessageRequest> const& value);
    bool messagesIsSet() const;
    void unsetMessages();
    /// <summary>
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    /// </summary>
    nlohmann::json getMetadata() const;
    void setMetadata(nlohmann::json const& value);
    bool metadataIsSet() const;
    void unsetMetadata();

    friend  void to_json(nlohmann::json& j, const CreateThreadRequest& o);
    friend  void from_json(const nlohmann::json& j, CreateThreadRequest& o);
protected:
    std::vector<org::openapitools::server::model::CreateMessageRequest> m_Messages;
    bool m_MessagesIsSet;
    nlohmann::json m_Metadata;
    bool m_MetadataIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* CreateThreadRequest_H_ */
