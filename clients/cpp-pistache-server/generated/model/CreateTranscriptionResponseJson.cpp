/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateTranscriptionResponseJson.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateTranscriptionResponseJson::CreateTranscriptionResponseJson()
{
    m_Text = "";
    
}

void CreateTranscriptionResponseJson::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateTranscriptionResponseJson::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateTranscriptionResponseJson::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateTranscriptionResponseJson" : pathPrefix;

        
    return success;
}

bool CreateTranscriptionResponseJson::operator==(const CreateTranscriptionResponseJson& rhs) const
{
    return
    
    
    (getText() == rhs.getText())
    
    
    ;
}

bool CreateTranscriptionResponseJson::operator!=(const CreateTranscriptionResponseJson& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateTranscriptionResponseJson& o)
{
    j = nlohmann::json::object();
    j["text"] = o.m_Text;
    
}

void from_json(const nlohmann::json& j, CreateTranscriptionResponseJson& o)
{
    j.at("text").get_to(o.m_Text);
    
}

std::string CreateTranscriptionResponseJson::getText() const
{
    return m_Text;
}
void CreateTranscriptionResponseJson::setText(std::string const& value)
{
    m_Text = value;
}


} // namespace org::openapitools::server::model

