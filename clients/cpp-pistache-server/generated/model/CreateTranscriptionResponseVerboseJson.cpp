/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateTranscriptionResponseVerboseJson.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateTranscriptionResponseVerboseJson::CreateTranscriptionResponseVerboseJson()
{
    m_Language = "";
    m_Duration = "";
    m_Text = "";
    m_WordsIsSet = false;
    m_SegmentsIsSet = false;
    
}

void CreateTranscriptionResponseVerboseJson::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateTranscriptionResponseVerboseJson::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateTranscriptionResponseVerboseJson::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateTranscriptionResponseVerboseJson" : pathPrefix;

                     
    if (wordsIsSet())
    {
        const std::vector<org::openapitools::server::model::TranscriptionWord>& value = m_Words;
        const std::string currentValuePath = _pathPrefix + ".words";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::TranscriptionWord& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".words") && success;
 
                i++;
            }
        }

    }
         
    if (segmentsIsSet())
    {
        const std::vector<org::openapitools::server::model::TranscriptionSegment>& value = m_Segments;
        const std::string currentValuePath = _pathPrefix + ".segments";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::TranscriptionSegment& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".segments") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool CreateTranscriptionResponseVerboseJson::operator==(const CreateTranscriptionResponseVerboseJson& rhs) const
{
    return
    
    
    (getLanguage() == rhs.getLanguage())
     &&
    
    (getDuration() == rhs.getDuration())
     &&
    
    (getText() == rhs.getText())
     &&
    
    
    ((!wordsIsSet() && !rhs.wordsIsSet()) || (wordsIsSet() && rhs.wordsIsSet() && getWords() == rhs.getWords())) &&
    
    
    ((!segmentsIsSet() && !rhs.segmentsIsSet()) || (segmentsIsSet() && rhs.segmentsIsSet() && getSegments() == rhs.getSegments()))
    
    ;
}

bool CreateTranscriptionResponseVerboseJson::operator!=(const CreateTranscriptionResponseVerboseJson& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateTranscriptionResponseVerboseJson& o)
{
    j = nlohmann::json::object();
    j["language"] = o.m_Language;
    j["duration"] = o.m_Duration;
    j["text"] = o.m_Text;
    if(o.wordsIsSet() || !o.m_Words.empty())
        j["words"] = o.m_Words;
    if(o.segmentsIsSet() || !o.m_Segments.empty())
        j["segments"] = o.m_Segments;
    
}

void from_json(const nlohmann::json& j, CreateTranscriptionResponseVerboseJson& o)
{
    j.at("language").get_to(o.m_Language);
    j.at("duration").get_to(o.m_Duration);
    j.at("text").get_to(o.m_Text);
    if(j.find("words") != j.end())
    {
        j.at("words").get_to(o.m_Words);
        o.m_WordsIsSet = true;
    } 
    if(j.find("segments") != j.end())
    {
        j.at("segments").get_to(o.m_Segments);
        o.m_SegmentsIsSet = true;
    } 
    
}

std::string CreateTranscriptionResponseVerboseJson::getLanguage() const
{
    return m_Language;
}
void CreateTranscriptionResponseVerboseJson::setLanguage(std::string const& value)
{
    m_Language = value;
}
std::string CreateTranscriptionResponseVerboseJson::getDuration() const
{
    return m_Duration;
}
void CreateTranscriptionResponseVerboseJson::setDuration(std::string const& value)
{
    m_Duration = value;
}
std::string CreateTranscriptionResponseVerboseJson::getText() const
{
    return m_Text;
}
void CreateTranscriptionResponseVerboseJson::setText(std::string const& value)
{
    m_Text = value;
}
std::vector<org::openapitools::server::model::TranscriptionWord> CreateTranscriptionResponseVerboseJson::getWords() const
{
    return m_Words;
}
void CreateTranscriptionResponseVerboseJson::setWords(std::vector<org::openapitools::server::model::TranscriptionWord> const& value)
{
    m_Words = value;
    m_WordsIsSet = true;
}
bool CreateTranscriptionResponseVerboseJson::wordsIsSet() const
{
    return m_WordsIsSet;
}
void CreateTranscriptionResponseVerboseJson::unsetWords()
{
    m_WordsIsSet = false;
}
std::vector<org::openapitools::server::model::TranscriptionSegment> CreateTranscriptionResponseVerboseJson::getSegments() const
{
    return m_Segments;
}
void CreateTranscriptionResponseVerboseJson::setSegments(std::vector<org::openapitools::server::model::TranscriptionSegment> const& value)
{
    m_Segments = value;
    m_SegmentsIsSet = true;
}
bool CreateTranscriptionResponseVerboseJson::segmentsIsSet() const
{
    return m_SegmentsIsSet;
}
void CreateTranscriptionResponseVerboseJson::unsetSegments()
{
    m_SegmentsIsSet = false;
}


} // namespace org::openapitools::server::model

