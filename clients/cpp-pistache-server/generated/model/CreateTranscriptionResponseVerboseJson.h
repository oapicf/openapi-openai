/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CreateTranscriptionResponseVerboseJson.h
 *
 * Represents a verbose json transcription response returned by model, based on the provided input.
 */

#ifndef CreateTranscriptionResponseVerboseJson_H_
#define CreateTranscriptionResponseVerboseJson_H_


#include "TranscriptionWord.h"
#include <string>
#include "TranscriptionSegment.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Represents a verbose json transcription response returned by model, based on the provided input.
/// </summary>
class  CreateTranscriptionResponseVerboseJson
{
public:
    CreateTranscriptionResponseVerboseJson();
    virtual ~CreateTranscriptionResponseVerboseJson() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CreateTranscriptionResponseVerboseJson& rhs) const;
    bool operator!=(const CreateTranscriptionResponseVerboseJson& rhs) const;

    /////////////////////////////////////////////
    /// CreateTranscriptionResponseVerboseJson members

    /// <summary>
    /// The language of the input audio.
    /// </summary>
    std::string getLanguage() const;
    void setLanguage(std::string const& value);
    /// <summary>
    /// The duration of the input audio.
    /// </summary>
    std::string getDuration() const;
    void setDuration(std::string const& value);
    /// <summary>
    /// The transcribed text.
    /// </summary>
    std::string getText() const;
    void setText(std::string const& value);
    /// <summary>
    /// Extracted words and their corresponding timestamps.
    /// </summary>
    std::vector<org::openapitools::server::model::TranscriptionWord> getWords() const;
    void setWords(std::vector<org::openapitools::server::model::TranscriptionWord> const& value);
    bool wordsIsSet() const;
    void unsetWords();
    /// <summary>
    /// Segments of the transcribed text and their corresponding details.
    /// </summary>
    std::vector<org::openapitools::server::model::TranscriptionSegment> getSegments() const;
    void setSegments(std::vector<org::openapitools::server::model::TranscriptionSegment> const& value);
    bool segmentsIsSet() const;
    void unsetSegments();

    friend  void to_json(nlohmann::json& j, const CreateTranscriptionResponseVerboseJson& o);
    friend  void from_json(const nlohmann::json& j, CreateTranscriptionResponseVerboseJson& o);
protected:
    std::string m_Language;

    std::string m_Duration;

    std::string m_Text;

    std::vector<org::openapitools::server::model::TranscriptionWord> m_Words;
    bool m_WordsIsSet;
    std::vector<org::openapitools::server::model::TranscriptionSegment> m_Segments;
    bool m_SegmentsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* CreateTranscriptionResponseVerboseJson_H_ */
