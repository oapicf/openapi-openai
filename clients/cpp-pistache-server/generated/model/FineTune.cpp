/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "FineTune.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

FineTune::FineTune()
{
    m_Id = "";
    m_object = "";
    m_Created_at = 0;
    m_Updated_at = 0;
    m_Model = "";
    m_Fine_tuned_model = "";
    m_Organization_id = "";
    m_Status = "";
    m_EventsIsSet = false;
    
}

void FineTune::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool FineTune::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool FineTune::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "FineTune" : pathPrefix;

                                             
    
    /* Training_files */ {
        const std::vector<org::openapitools::server::model::OpenAIFile>& value = m_Training_files;
        const std::string currentValuePath = _pathPrefix + ".trainingFiles";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OpenAIFile& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".trainingFiles") && success;
 
                i++;
            }
        }

    }
         
    
    /* Validation_files */ {
        const std::vector<org::openapitools::server::model::OpenAIFile>& value = m_Validation_files;
        const std::string currentValuePath = _pathPrefix + ".validationFiles";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OpenAIFile& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".validationFiles") && success;
 
                i++;
            }
        }

    }
         
    
    /* Result_files */ {
        const std::vector<org::openapitools::server::model::OpenAIFile>& value = m_Result_files;
        const std::string currentValuePath = _pathPrefix + ".resultFiles";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::OpenAIFile& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".resultFiles") && success;
 
                i++;
            }
        }

    }
         
    if (eventsIsSet())
    {
        const std::vector<org::openapitools::server::model::FineTuneEvent>& value = m_Events;
        const std::string currentValuePath = _pathPrefix + ".events";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::FineTuneEvent& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".events") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool FineTune::operator==(const FineTune& rhs) const
{
    return
    
    
    (getId() == rhs.getId())
     &&
    
    (getObject() == rhs.getObject())
     &&
    
    (getCreatedAt() == rhs.getCreatedAt())
     &&
    
    (getUpdatedAt() == rhs.getUpdatedAt())
     &&
    
    (getModel() == rhs.getModel())
     &&
    
    (getFineTunedModel() == rhs.getFineTunedModel())
     &&
    
    (getOrganizationId() == rhs.getOrganizationId())
     &&
    
    (getStatus() == rhs.getStatus())
     &&
    
    (getHyperparams() == rhs.getHyperparams())
     &&
    
    (getTrainingFiles() == rhs.getTrainingFiles())
     &&
    
    (getValidationFiles() == rhs.getValidationFiles())
     &&
    
    (getResultFiles() == rhs.getResultFiles())
     &&
    
    
    ((!eventsIsSet() && !rhs.eventsIsSet()) || (eventsIsSet() && rhs.eventsIsSet() && getEvents() == rhs.getEvents()))
    
    ;
}

bool FineTune::operator!=(const FineTune& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const FineTune& o)
{
    j = nlohmann::json::object();
    j["id"] = o.m_Id;
    j["object"] = o.m_object;
    j["created_at"] = o.m_Created_at;
    j["updated_at"] = o.m_Updated_at;
    j["model"] = o.m_Model;
    j["fine_tuned_model"] = o.m_Fine_tuned_model;
    j["organization_id"] = o.m_Organization_id;
    j["status"] = o.m_Status;
    j["hyperparams"] = o.m_Hyperparams;
    j["training_files"] = o.m_Training_files;
    j["validation_files"] = o.m_Validation_files;
    j["result_files"] = o.m_Result_files;
    if(o.eventsIsSet() || !o.m_Events.empty())
        j["events"] = o.m_Events;
    
}

void from_json(const nlohmann::json& j, FineTune& o)
{
    j.at("id").get_to(o.m_Id);
    j.at("object").get_to(o.m_object);
    j.at("created_at").get_to(o.m_Created_at);
    j.at("updated_at").get_to(o.m_Updated_at);
    j.at("model").get_to(o.m_Model);
    j.at("fine_tuned_model").get_to(o.m_Fine_tuned_model);
    j.at("organization_id").get_to(o.m_Organization_id);
    j.at("status").get_to(o.m_Status);
    j.at("hyperparams").get_to(o.m_Hyperparams);
    j.at("training_files").get_to(o.m_Training_files);
    j.at("validation_files").get_to(o.m_Validation_files);
    j.at("result_files").get_to(o.m_Result_files);
    if(j.find("events") != j.end())
    {
        j.at("events").get_to(o.m_Events);
        o.m_EventsIsSet = true;
    } 
    
}

std::string FineTune::getId() const
{
    return m_Id;
}
void FineTune::setId(std::string const& value)
{
    m_Id = value;
}
std::string FineTune::getObject() const
{
    return m_object;
}
void FineTune::setObject(std::string const& value)
{
    m_object = value;
}
int32_t FineTune::getCreatedAt() const
{
    return m_Created_at;
}
void FineTune::setCreatedAt(int32_t const value)
{
    m_Created_at = value;
}
int32_t FineTune::getUpdatedAt() const
{
    return m_Updated_at;
}
void FineTune::setUpdatedAt(int32_t const value)
{
    m_Updated_at = value;
}
std::string FineTune::getModel() const
{
    return m_Model;
}
void FineTune::setModel(std::string const& value)
{
    m_Model = value;
}
std::string FineTune::getFineTunedModel() const
{
    return m_Fine_tuned_model;
}
void FineTune::setFineTunedModel(std::string const& value)
{
    m_Fine_tuned_model = value;
}
std::string FineTune::getOrganizationId() const
{
    return m_Organization_id;
}
void FineTune::setOrganizationId(std::string const& value)
{
    m_Organization_id = value;
}
std::string FineTune::getStatus() const
{
    return m_Status;
}
void FineTune::setStatus(std::string const& value)
{
    m_Status = value;
}
org::openapitools::server::model::Object FineTune::getHyperparams() const
{
    return m_Hyperparams;
}
void FineTune::setHyperparams(org::openapitools::server::model::Object const& value)
{
    m_Hyperparams = value;
}
std::vector<org::openapitools::server::model::OpenAIFile> FineTune::getTrainingFiles() const
{
    return m_Training_files;
}
void FineTune::setTrainingFiles(std::vector<org::openapitools::server::model::OpenAIFile> const& value)
{
    m_Training_files = value;
}
std::vector<org::openapitools::server::model::OpenAIFile> FineTune::getValidationFiles() const
{
    return m_Validation_files;
}
void FineTune::setValidationFiles(std::vector<org::openapitools::server::model::OpenAIFile> const& value)
{
    m_Validation_files = value;
}
std::vector<org::openapitools::server::model::OpenAIFile> FineTune::getResultFiles() const
{
    return m_Result_files;
}
void FineTune::setResultFiles(std::vector<org::openapitools::server::model::OpenAIFile> const& value)
{
    m_Result_files = value;
}
std::vector<org::openapitools::server::model::FineTuneEvent> FineTune::getEvents() const
{
    return m_Events;
}
void FineTune::setEvents(std::vector<org::openapitools::server::model::FineTuneEvent> const& value)
{
    m_Events = value;
    m_EventsIsSet = true;
}
bool FineTune::eventsIsSet() const
{
    return m_EventsIsSet;
}
void FineTune::unsetEvents()
{
    m_EventsIsSet = false;
}


} // namespace org::openapitools::server::model

