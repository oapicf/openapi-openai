/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * FineTuningJob.h
 *
 * The &#x60;fine_tuning.job&#x60; object represents a fine-tuning job that has been created through the API. 
 */

#ifndef FineTuningJob_H_
#define FineTuningJob_H_


#include "FineTuningJob_hyperparameters.h"
#include "FineTuningJob_error.h"
#include "FineTuningJob_integrations_inner.h"
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// The &#x60;fine_tuning.job&#x60; object represents a fine-tuning job that has been created through the API. 
/// </summary>
class  FineTuningJob
{
public:
    FineTuningJob();
    virtual ~FineTuningJob() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const FineTuningJob& rhs) const;
    bool operator!=(const FineTuningJob& rhs) const;

    /////////////////////////////////////////////
    /// FineTuningJob members

    /// <summary>
    /// The object identifier, which can be referenced in the API endpoints.
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    /// <summary>
    /// The Unix timestamp (in seconds) for when the fine-tuning job was created.
    /// </summary>
    int32_t getCreatedAt() const;
    void setCreatedAt(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FineTuningJob_error getError() const;
    void setError(org::openapitools::server::model::FineTuningJob_error const& value);
    /// <summary>
    /// The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
    /// </summary>
    std::string getFineTunedModel() const;
    void setFineTunedModel(std::string const& value);
    /// <summary>
    /// The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
    /// </summary>
    int32_t getFinishedAt() const;
    void setFinishedAt(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::FineTuningJob_hyperparameters getHyperparameters() const;
    void setHyperparameters(org::openapitools::server::model::FineTuningJob_hyperparameters const& value);
    /// <summary>
    /// The base model that is being fine-tuned.
    /// </summary>
    std::string getModel() const;
    void setModel(std::string const& value);
    /// <summary>
    /// The object type, which is always \&quot;fine_tuning.job\&quot;.
    /// </summary>
    std::string getObject() const;
    void setObject(std::string const& value);
    /// <summary>
    /// The organization that owns the fine-tuning job.
    /// </summary>
    std::string getOrganizationId() const;
    void setOrganizationId(std::string const& value);
    /// <summary>
    /// The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
    /// </summary>
    std::vector<std::string> getResultFiles() const;
    void setResultFiles(std::vector<std::string> const& value);
    /// <summary>
    /// The current status of the fine-tuning job, which can be either &#x60;validating_files&#x60;, &#x60;queued&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string const& value);
    /// <summary>
    /// The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
    /// </summary>
    int32_t getTrainedTokens() const;
    void setTrainedTokens(int32_t const value);
    /// <summary>
    /// The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
    /// </summary>
    std::string getTrainingFile() const;
    void setTrainingFile(std::string const& value);
    /// <summary>
    /// The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
    /// </summary>
    std::string getValidationFile() const;
    void setValidationFile(std::string const& value);
    /// <summary>
    /// A list of integrations to enable for this fine-tuning job.
    /// </summary>
    std::vector<org::openapitools::server::model::FineTuningJob_integrations_inner> getIntegrations() const;
    void setIntegrations(std::vector<org::openapitools::server::model::FineTuningJob_integrations_inner> const& value);
    bool integrationsIsSet() const;
    void unsetIntegrations();
    /// <summary>
    /// The seed used for the fine-tuning job.
    /// </summary>
    int32_t getSeed() const;
    void setSeed(int32_t const value);

    friend  void to_json(nlohmann::json& j, const FineTuningJob& o);
    friend  void from_json(const nlohmann::json& j, FineTuningJob& o);
protected:
    std::string m_Id;

    int32_t m_Created_at;

    org::openapitools::server::model::FineTuningJob_error m_Error;

    std::string m_Fine_tuned_model;

    int32_t m_Finished_at;

    org::openapitools::server::model::FineTuningJob_hyperparameters m_Hyperparameters;

    std::string m_Model;

    std::string m_object;

    std::string m_Organization_id;

    std::vector<std::string> m_Result_files;

    std::string m_Status;

    int32_t m_Trained_tokens;

    std::string m_Training_file;

    std::string m_Validation_file;

    std::vector<org::openapitools::server::model::FineTuningJob_integrations_inner> m_Integrations;
    bool m_IntegrationsIsSet;
    int32_t m_Seed;

    
};

} // namespace org::openapitools::server::model

#endif /* FineTuningJob_H_ */
