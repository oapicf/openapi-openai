/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * FineTuningJobCheckpoint_metrics.h
 *
 * Metrics at the step number during the fine-tuning job.
 */

#ifndef FineTuningJobCheckpoint_metrics_H_
#define FineTuningJobCheckpoint_metrics_H_


#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Metrics at the step number during the fine-tuning job.
/// </summary>
class  FineTuningJobCheckpoint_metrics
{
public:
    FineTuningJobCheckpoint_metrics();
    virtual ~FineTuningJobCheckpoint_metrics() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const FineTuningJobCheckpoint_metrics& rhs) const;
    bool operator!=(const FineTuningJobCheckpoint_metrics& rhs) const;

    /////////////////////////////////////////////
    /// FineTuningJobCheckpoint_metrics members

    /// <summary>
    /// 
    /// </summary>
    double getStep() const;
    void setStep(double const value);
    bool stepIsSet() const;
    void unsetStep();
    /// <summary>
    /// 
    /// </summary>
    double getTrainLoss() const;
    void setTrainLoss(double const value);
    bool trainLossIsSet() const;
    void unsetTrain_loss();
    /// <summary>
    /// 
    /// </summary>
    double getTrainMeanTokenAccuracy() const;
    void setTrainMeanTokenAccuracy(double const value);
    bool trainMeanTokenAccuracyIsSet() const;
    void unsetTrain_mean_token_accuracy();
    /// <summary>
    /// 
    /// </summary>
    double getValidLoss() const;
    void setValidLoss(double const value);
    bool validLossIsSet() const;
    void unsetValid_loss();
    /// <summary>
    /// 
    /// </summary>
    double getValidMeanTokenAccuracy() const;
    void setValidMeanTokenAccuracy(double const value);
    bool validMeanTokenAccuracyIsSet() const;
    void unsetValid_mean_token_accuracy();
    /// <summary>
    /// 
    /// </summary>
    double getFullValidLoss() const;
    void setFullValidLoss(double const value);
    bool fullValidLossIsSet() const;
    void unsetFull_valid_loss();
    /// <summary>
    /// 
    /// </summary>
    double getFullValidMeanTokenAccuracy() const;
    void setFullValidMeanTokenAccuracy(double const value);
    bool fullValidMeanTokenAccuracyIsSet() const;
    void unsetFull_valid_mean_token_accuracy();

    friend  void to_json(nlohmann::json& j, const FineTuningJobCheckpoint_metrics& o);
    friend  void from_json(const nlohmann::json& j, FineTuningJobCheckpoint_metrics& o);
protected:
    double m_Step;
    bool m_StepIsSet;
    double m_Train_loss;
    bool m_Train_lossIsSet;
    double m_Train_mean_token_accuracy;
    bool m_Train_mean_token_accuracyIsSet;
    double m_Valid_loss;
    bool m_Valid_lossIsSet;
    double m_Valid_mean_token_accuracy;
    bool m_Valid_mean_token_accuracyIsSet;
    double m_Full_valid_loss;
    bool m_Full_valid_lossIsSet;
    double m_Full_valid_mean_token_accuracy;
    bool m_Full_valid_mean_token_accuracyIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* FineTuningJobCheckpoint_metrics_H_ */
