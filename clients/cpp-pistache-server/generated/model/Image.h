/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Image.h
 *
 * Represents the url or the content of an image generated by the OpenAI API.
 */

#ifndef Image_H_
#define Image_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Represents the url or the content of an image generated by the OpenAI API.
/// </summary>
class  Image
{
public:
    Image();
    virtual ~Image() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Image& rhs) const;
    bool operator!=(const Image& rhs) const;

    /////////////////////////////////////////////
    /// Image members

    /// <summary>
    /// The base64-encoded JSON of the generated image, if &#x60;response_format&#x60; is &#x60;b64_json&#x60;.
    /// </summary>
    std::string getB64Json() const;
    void setB64Json(std::string const& value);
    bool b64JsonIsSet() const;
    void unsetB64_json();
    /// <summary>
    /// The URL of the generated image, if &#x60;response_format&#x60; is &#x60;url&#x60; (default).
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string const& value);
    bool urlIsSet() const;
    void unsetUrl();
    /// <summary>
    /// The prompt that was used to generate the image, if there was any revision to the prompt.
    /// </summary>
    std::string getRevisedPrompt() const;
    void setRevisedPrompt(std::string const& value);
    bool revisedPromptIsSet() const;
    void unsetRevised_prompt();

    friend  void to_json(nlohmann::json& j, const Image& o);
    friend  void from_json(const nlohmann::json& j, Image& o);
protected:
    std::string m_B64_json;
    bool m_B64_jsonIsSet;
    std::string m_Url;
    bool m_UrlIsSet;
    std::string m_Revised_prompt;
    bool m_Revised_promptIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* Image_H_ */
