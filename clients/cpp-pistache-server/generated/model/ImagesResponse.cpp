/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ImagesResponse.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ImagesResponse::ImagesResponse()
{
    m_Created = 0;
    
}

void ImagesResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ImagesResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ImagesResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ImagesResponse" : pathPrefix;

             
    
    /* Data */ {
        const std::vector<org::openapitools::server::model::ImagesResponse_data_inner>& value = m_Data;
        const std::string currentValuePath = _pathPrefix + ".data";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ImagesResponse_data_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".data") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool ImagesResponse::operator==(const ImagesResponse& rhs) const
{
    return
    
    
    (getCreated() == rhs.getCreated())
     &&
    
    (getData() == rhs.getData())
    
    
    ;
}

bool ImagesResponse::operator!=(const ImagesResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ImagesResponse& o)
{
    j = nlohmann::json::object();
    j["created"] = o.m_Created;
    j["data"] = o.m_Data;
    
}

void from_json(const nlohmann::json& j, ImagesResponse& o)
{
    j.at("created").get_to(o.m_Created);
    j.at("data").get_to(o.m_Data);
    
}

int32_t ImagesResponse::getCreated() const
{
    return m_Created;
}
void ImagesResponse::setCreated(int32_t const value)
{
    m_Created = value;
}
std::vector<org::openapitools::server::model::ImagesResponse_data_inner> ImagesResponse::getData() const
{
    return m_Data;
}
void ImagesResponse::setData(std::vector<org::openapitools::server::model::ImagesResponse_data_inner> const& value)
{
    m_Data = value;
}


} // namespace org::openapitools::server::model

