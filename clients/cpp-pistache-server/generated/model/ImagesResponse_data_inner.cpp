/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ImagesResponse_data_inner.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ImagesResponse_data_inner::ImagesResponse_data_inner()
{
    m_Url = "";
    m_UrlIsSet = false;
    m_B64_json = "";
    m_B64_jsonIsSet = false;
    
}

void ImagesResponse_data_inner::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ImagesResponse_data_inner::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ImagesResponse_data_inner::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ImagesResponse_data_inner" : pathPrefix;

            
    return success;
}

bool ImagesResponse_data_inner::operator==(const ImagesResponse_data_inner& rhs) const
{
    return
    
    
    
    ((!urlIsSet() && !rhs.urlIsSet()) || (urlIsSet() && rhs.urlIsSet() && getUrl() == rhs.getUrl())) &&
    
    
    ((!b64JsonIsSet() && !rhs.b64JsonIsSet()) || (b64JsonIsSet() && rhs.b64JsonIsSet() && getB64Json() == rhs.getB64Json()))
    
    ;
}

bool ImagesResponse_data_inner::operator!=(const ImagesResponse_data_inner& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ImagesResponse_data_inner& o)
{
    j = nlohmann::json::object();
    if(o.urlIsSet())
        j["url"] = o.m_Url;
    if(o.b64JsonIsSet())
        j["b64_json"] = o.m_B64_json;
    
}

void from_json(const nlohmann::json& j, ImagesResponse_data_inner& o)
{
    if(j.find("url") != j.end())
    {
        j.at("url").get_to(o.m_Url);
        o.m_UrlIsSet = true;
    } 
    if(j.find("b64_json") != j.end())
    {
        j.at("b64_json").get_to(o.m_B64_json);
        o.m_B64_jsonIsSet = true;
    } 
    
}

std::string ImagesResponse_data_inner::getUrl() const
{
    return m_Url;
}
void ImagesResponse_data_inner::setUrl(std::string const& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool ImagesResponse_data_inner::urlIsSet() const
{
    return m_UrlIsSet;
}
void ImagesResponse_data_inner::unsetUrl()
{
    m_UrlIsSet = false;
}
std::string ImagesResponse_data_inner::getB64Json() const
{
    return m_B64_json;
}
void ImagesResponse_data_inner::setB64Json(std::string const& value)
{
    m_B64_json = value;
    m_B64_jsonIsSet = true;
}
bool ImagesResponse_data_inner::b64JsonIsSet() const
{
    return m_B64_jsonIsSet;
}
void ImagesResponse_data_inner::unsetB64_json()
{
    m_B64_jsonIsSet = false;
}


} // namespace org::openapitools::server::model

