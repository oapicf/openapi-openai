/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "MessageDeltaContentTextObject_text.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

MessageDeltaContentTextObject_text::MessageDeltaContentTextObject_text()
{
    m_Value = "";
    m_ValueIsSet = false;
    m_AnnotationsIsSet = false;
    
}

void MessageDeltaContentTextObject_text::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool MessageDeltaContentTextObject_text::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool MessageDeltaContentTextObject_text::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "MessageDeltaContentTextObject_text" : pathPrefix;

             
    if (annotationsIsSet())
    {
        const std::vector<org::openapitools::server::model::MessageDeltaContentTextObject_text_annotations_inner>& value = m_Annotations;
        const std::string currentValuePath = _pathPrefix + ".annotations";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::MessageDeltaContentTextObject_text_annotations_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".annotations") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool MessageDeltaContentTextObject_text::operator==(const MessageDeltaContentTextObject_text& rhs) const
{
    return
    
    
    
    ((!valueIsSet() && !rhs.valueIsSet()) || (valueIsSet() && rhs.valueIsSet() && getValue() == rhs.getValue())) &&
    
    
    ((!annotationsIsSet() && !rhs.annotationsIsSet()) || (annotationsIsSet() && rhs.annotationsIsSet() && getAnnotations() == rhs.getAnnotations()))
    
    ;
}

bool MessageDeltaContentTextObject_text::operator!=(const MessageDeltaContentTextObject_text& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const MessageDeltaContentTextObject_text& o)
{
    j = nlohmann::json::object();
    if(o.valueIsSet())
        j["value"] = o.m_Value;
    if(o.annotationsIsSet() || !o.m_Annotations.empty())
        j["annotations"] = o.m_Annotations;
    
}

void from_json(const nlohmann::json& j, MessageDeltaContentTextObject_text& o)
{
    if(j.find("value") != j.end())
    {
        j.at("value").get_to(o.m_Value);
        o.m_ValueIsSet = true;
    } 
    if(j.find("annotations") != j.end())
    {
        j.at("annotations").get_to(o.m_Annotations);
        o.m_AnnotationsIsSet = true;
    } 
    
}

std::string MessageDeltaContentTextObject_text::getValue() const
{
    return m_Value;
}
void MessageDeltaContentTextObject_text::setValue(std::string const& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}
bool MessageDeltaContentTextObject_text::valueIsSet() const
{
    return m_ValueIsSet;
}
void MessageDeltaContentTextObject_text::unsetValue()
{
    m_ValueIsSet = false;
}
std::vector<org::openapitools::server::model::MessageDeltaContentTextObject_text_annotations_inner> MessageDeltaContentTextObject_text::getAnnotations() const
{
    return m_Annotations;
}
void MessageDeltaContentTextObject_text::setAnnotations(std::vector<org::openapitools::server::model::MessageDeltaContentTextObject_text_annotations_inner> const& value)
{
    m_Annotations = value;
    m_AnnotationsIsSet = true;
}
bool MessageDeltaContentTextObject_text::annotationsIsSet() const
{
    return m_AnnotationsIsSet;
}
void MessageDeltaContentTextObject_text::unsetAnnotations()
{
    m_AnnotationsIsSet = false;
}


} // namespace org::openapitools::server::model

