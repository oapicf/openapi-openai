/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "MessageObject.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

MessageObject::MessageObject()
{
    m_Id = "";
    m_object = "";
    m_Created_at = 0;
    m_Thread_id = "";
    m_Status = "";
    m_Completed_at = 0;
    m_Incomplete_at = 0;
    m_Role = "";
    m_Assistant_id = "";
    m_Run_id = "";
    
}

void MessageObject::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool MessageObject::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool MessageObject::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "MessageObject" : pathPrefix;

                            
    if (!m_Incomplete_details.validate(msg, _pathPrefix + ".incompleteDetails")) {
        msg << _pathPrefix << ": Incomplete_details is invalid;";
        success = false;
    }                 
    
    /* Content */ {
        const std::vector<org::openapitools::server::model::MessageObject_content_inner>& value = m_Content;
        const std::string currentValuePath = _pathPrefix + ".content";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::MessageObject_content_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".content") && success;
 
                i++;
            }
        }

    }
                 
    
    /* File_ids */ {
        const std::vector<std::string>& value = m_File_ids;
        const std::string currentValuePath = _pathPrefix + ".fileIds";
                
        
        if (value.size() > 10)
        {
            success = false;
            msg << currentValuePath << ": must have at most 10 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
        
    return success;
}

bool MessageObject::operator==(const MessageObject& rhs) const
{
    return
    
    
    (getId() == rhs.getId())
     &&
    
    (getObject() == rhs.getObject())
     &&
    
    (getCreatedAt() == rhs.getCreatedAt())
     &&
    
    (getThreadId() == rhs.getThreadId())
     &&
    
    (getStatus() == rhs.getStatus())
     &&
    
    (getIncompleteDetails() == rhs.getIncompleteDetails())
     &&
    
    (getCompletedAt() == rhs.getCompletedAt())
     &&
    
    (getIncompleteAt() == rhs.getIncompleteAt())
     &&
    
    (getRole() == rhs.getRole())
     &&
    
    (getContent() == rhs.getContent())
     &&
    
    (getAssistantId() == rhs.getAssistantId())
     &&
    
    (getRunId() == rhs.getRunId())
     &&
    
    (getFileIds() == rhs.getFileIds())
     &&
    
    (getMetadata() == rhs.getMetadata())
    
    
    ;
}

bool MessageObject::operator!=(const MessageObject& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const MessageObject& o)
{
    j = nlohmann::json::object();
    j["id"] = o.m_Id;
    j["object"] = o.m_object;
    j["created_at"] = o.m_Created_at;
    j["thread_id"] = o.m_Thread_id;
    j["status"] = o.m_Status;
    j["incomplete_details"] = o.m_Incomplete_details;
    j["completed_at"] = o.m_Completed_at;
    j["incomplete_at"] = o.m_Incomplete_at;
    j["role"] = o.m_Role;
    j["content"] = o.m_Content;
    j["assistant_id"] = o.m_Assistant_id;
    j["run_id"] = o.m_Run_id;
    j["file_ids"] = o.m_File_ids;
    j["metadata"] = o.m_Metadata;
    
}

void from_json(const nlohmann::json& j, MessageObject& o)
{
    j.at("id").get_to(o.m_Id);
    j.at("object").get_to(o.m_object);
    j.at("created_at").get_to(o.m_Created_at);
    j.at("thread_id").get_to(o.m_Thread_id);
    j.at("status").get_to(o.m_Status);
    j.at("incomplete_details").get_to(o.m_Incomplete_details);
    j.at("completed_at").get_to(o.m_Completed_at);
    j.at("incomplete_at").get_to(o.m_Incomplete_at);
    j.at("role").get_to(o.m_Role);
    j.at("content").get_to(o.m_Content);
    j.at("assistant_id").get_to(o.m_Assistant_id);
    j.at("run_id").get_to(o.m_Run_id);
    j.at("file_ids").get_to(o.m_File_ids);
    j.at("metadata").get_to(o.m_Metadata);
    
}

std::string MessageObject::getId() const
{
    return m_Id;
}
void MessageObject::setId(std::string const& value)
{
    m_Id = value;
}
std::string MessageObject::getObject() const
{
    return m_object;
}
void MessageObject::setObject(std::string const& value)
{
    m_object = value;
}
int32_t MessageObject::getCreatedAt() const
{
    return m_Created_at;
}
void MessageObject::setCreatedAt(int32_t const value)
{
    m_Created_at = value;
}
std::string MessageObject::getThreadId() const
{
    return m_Thread_id;
}
void MessageObject::setThreadId(std::string const& value)
{
    m_Thread_id = value;
}
std::string MessageObject::getStatus() const
{
    return m_Status;
}
void MessageObject::setStatus(std::string const& value)
{
    m_Status = value;
}
org::openapitools::server::model::MessageObject_incomplete_details MessageObject::getIncompleteDetails() const
{
    return m_Incomplete_details;
}
void MessageObject::setIncompleteDetails(org::openapitools::server::model::MessageObject_incomplete_details const& value)
{
    m_Incomplete_details = value;
}
int32_t MessageObject::getCompletedAt() const
{
    return m_Completed_at;
}
void MessageObject::setCompletedAt(int32_t const value)
{
    m_Completed_at = value;
}
int32_t MessageObject::getIncompleteAt() const
{
    return m_Incomplete_at;
}
void MessageObject::setIncompleteAt(int32_t const value)
{
    m_Incomplete_at = value;
}
std::string MessageObject::getRole() const
{
    return m_Role;
}
void MessageObject::setRole(std::string const& value)
{
    m_Role = value;
}
std::vector<org::openapitools::server::model::MessageObject_content_inner> MessageObject::getContent() const
{
    return m_Content;
}
void MessageObject::setContent(std::vector<org::openapitools::server::model::MessageObject_content_inner> const& value)
{
    m_Content = value;
}
std::string MessageObject::getAssistantId() const
{
    return m_Assistant_id;
}
void MessageObject::setAssistantId(std::string const& value)
{
    m_Assistant_id = value;
}
std::string MessageObject::getRunId() const
{
    return m_Run_id;
}
void MessageObject::setRunId(std::string const& value)
{
    m_Run_id = value;
}
std::vector<std::string> MessageObject::getFileIds() const
{
    return m_File_ids;
}
void MessageObject::setFileIds(std::vector<std::string> const& value)
{
    m_File_ids = value;
}
nlohmann::json MessageObject::getMetadata() const
{
    return m_Metadata;
}
void MessageObject::setMetadata(nlohmann::json const& value)
{
    m_Metadata = value;
}


} // namespace org::openapitools::server::model

