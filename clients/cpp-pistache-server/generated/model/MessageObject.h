/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * MessageObject.h
 *
 * Represents a message within a [thread](/docs/api-reference/threads).
 */

#ifndef MessageObject_H_
#define MessageObject_H_


#include "MessageObject_content_inner.h"
#include "MessageObject_incomplete_details.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Represents a message within a [thread](/docs/api-reference/threads).
/// </summary>
class  MessageObject
{
public:
    MessageObject();
    virtual ~MessageObject() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const MessageObject& rhs) const;
    bool operator!=(const MessageObject& rhs) const;

    /////////////////////////////////////////////
    /// MessageObject members

    /// <summary>
    /// The identifier, which can be referenced in API endpoints.
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    /// <summary>
    /// The object type, which is always &#x60;thread.message&#x60;.
    /// </summary>
    std::string getObject() const;
    void setObject(std::string const& value);
    /// <summary>
    /// The Unix timestamp (in seconds) for when the message was created.
    /// </summary>
    int32_t getCreatedAt() const;
    void setCreatedAt(int32_t const value);
    /// <summary>
    /// The [thread](/docs/api-reference/threads) ID that this message belongs to.
    /// </summary>
    std::string getThreadId() const;
    void setThreadId(std::string const& value);
    /// <summary>
    /// The status of the message, which can be either &#x60;in_progress&#x60;, &#x60;incomplete&#x60;, or &#x60;completed&#x60;.
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::MessageObject_incomplete_details getIncompleteDetails() const;
    void setIncompleteDetails(org::openapitools::server::model::MessageObject_incomplete_details const& value);
    /// <summary>
    /// The Unix timestamp (in seconds) for when the message was completed.
    /// </summary>
    int32_t getCompletedAt() const;
    void setCompletedAt(int32_t const value);
    /// <summary>
    /// The Unix timestamp (in seconds) for when the message was marked as incomplete.
    /// </summary>
    int32_t getIncompleteAt() const;
    void setIncompleteAt(int32_t const value);
    /// <summary>
    /// The entity that produced the message. One of &#x60;user&#x60; or &#x60;assistant&#x60;.
    /// </summary>
    std::string getRole() const;
    void setRole(std::string const& value);
    /// <summary>
    /// The content of the message in array of text and/or images.
    /// </summary>
    std::vector<org::openapitools::server::model::MessageObject_content_inner> getContent() const;
    void setContent(std::vector<org::openapitools::server::model::MessageObject_content_inner> const& value);
    /// <summary>
    /// If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
    /// </summary>
    std::string getAssistantId() const;
    void setAssistantId(std::string const& value);
    /// <summary>
    /// The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is &#x60;null&#x60; when messages are created manually using the create message or create thread endpoints.
    /// </summary>
    std::string getRunId() const;
    void setRunId(std::string const& value);
    /// <summary>
    /// A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
    /// </summary>
    std::vector<std::string> getFileIds() const;
    void setFileIds(std::vector<std::string> const& value);
    /// <summary>
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    /// </summary>
    nlohmann::json getMetadata() const;
    void setMetadata(nlohmann::json const& value);

    friend  void to_json(nlohmann::json& j, const MessageObject& o);
    friend  void from_json(const nlohmann::json& j, MessageObject& o);
protected:
    std::string m_Id;

    std::string m_object;

    int32_t m_Created_at;

    std::string m_Thread_id;

    std::string m_Status;

    org::openapitools::server::model::MessageObject_incomplete_details m_Incomplete_details;

    int32_t m_Completed_at;

    int32_t m_Incomplete_at;

    std::string m_Role;

    std::vector<org::openapitools::server::model::MessageObject_content_inner> m_Content;

    std::string m_Assistant_id;

    std::string m_Run_id;

    std::vector<std::string> m_File_ids;

    nlohmann::json m_Metadata;

    
};

} // namespace org::openapitools::server::model

#endif /* MessageObject_H_ */
