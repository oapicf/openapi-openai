/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "MessageObject_incomplete_details.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

MessageObject_incomplete_details::MessageObject_incomplete_details()
{
    m_Reason = "";
    
}

void MessageObject_incomplete_details::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool MessageObject_incomplete_details::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool MessageObject_incomplete_details::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "MessageObject_incomplete_details" : pathPrefix;

        
    return success;
}

bool MessageObject_incomplete_details::operator==(const MessageObject_incomplete_details& rhs) const
{
    return
    
    
    (getReason() == rhs.getReason())
    
    
    ;
}

bool MessageObject_incomplete_details::operator!=(const MessageObject_incomplete_details& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const MessageObject_incomplete_details& o)
{
    j = nlohmann::json::object();
    j["reason"] = o.m_Reason;
    
}

void from_json(const nlohmann::json& j, MessageObject_incomplete_details& o)
{
    j.at("reason").get_to(o.m_Reason);
    
}

std::string MessageObject_incomplete_details::getReason() const
{
    return m_Reason;
}
void MessageObject_incomplete_details::setReason(std::string const& value)
{
    m_Reason = value;
}


} // namespace org::openapitools::server::model

