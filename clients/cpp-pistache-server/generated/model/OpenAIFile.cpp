/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OpenAIFile.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OpenAIFile::OpenAIFile()
{
    m_Id = "";
    m_Bytes = 0;
    m_Created_at = 0;
    m_Filename = "";
    m_object = "";
    m_Purpose = "";
    m_Status = "";
    m_Status_details = "";
    m_Status_detailsIsSet = false;
    
}

void OpenAIFile::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OpenAIFile::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OpenAIFile::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OpenAIFile" : pathPrefix;

                                    
    return success;
}

bool OpenAIFile::operator==(const OpenAIFile& rhs) const
{
    return
    
    
    (getId() == rhs.getId())
     &&
    
    (getBytes() == rhs.getBytes())
     &&
    
    (getCreatedAt() == rhs.getCreatedAt())
     &&
    
    (getFilename() == rhs.getFilename())
     &&
    
    (getObject() == rhs.getObject())
     &&
    
    (getPurpose() == rhs.getPurpose())
     &&
    
    (getStatus() == rhs.getStatus())
     &&
    
    
    ((!statusDetailsIsSet() && !rhs.statusDetailsIsSet()) || (statusDetailsIsSet() && rhs.statusDetailsIsSet() && getStatusDetails() == rhs.getStatusDetails()))
    
    ;
}

bool OpenAIFile::operator!=(const OpenAIFile& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OpenAIFile& o)
{
    j = nlohmann::json::object();
    j["id"] = o.m_Id;
    j["bytes"] = o.m_Bytes;
    j["created_at"] = o.m_Created_at;
    j["filename"] = o.m_Filename;
    j["object"] = o.m_object;
    j["purpose"] = o.m_Purpose;
    j["status"] = o.m_Status;
    if(o.statusDetailsIsSet())
        j["status_details"] = o.m_Status_details;
    
}

void from_json(const nlohmann::json& j, OpenAIFile& o)
{
    j.at("id").get_to(o.m_Id);
    j.at("bytes").get_to(o.m_Bytes);
    j.at("created_at").get_to(o.m_Created_at);
    j.at("filename").get_to(o.m_Filename);
    j.at("object").get_to(o.m_object);
    j.at("purpose").get_to(o.m_Purpose);
    j.at("status").get_to(o.m_Status);
    if(j.find("status_details") != j.end())
    {
        j.at("status_details").get_to(o.m_Status_details);
        o.m_Status_detailsIsSet = true;
    } 
    
}

std::string OpenAIFile::getId() const
{
    return m_Id;
}
void OpenAIFile::setId(std::string const& value)
{
    m_Id = value;
}
int32_t OpenAIFile::getBytes() const
{
    return m_Bytes;
}
void OpenAIFile::setBytes(int32_t const value)
{
    m_Bytes = value;
}
int32_t OpenAIFile::getCreatedAt() const
{
    return m_Created_at;
}
void OpenAIFile::setCreatedAt(int32_t const value)
{
    m_Created_at = value;
}
std::string OpenAIFile::getFilename() const
{
    return m_Filename;
}
void OpenAIFile::setFilename(std::string const& value)
{
    m_Filename = value;
}
std::string OpenAIFile::getObject() const
{
    return m_object;
}
void OpenAIFile::setObject(std::string const& value)
{
    m_object = value;
}
std::string OpenAIFile::getPurpose() const
{
    return m_Purpose;
}
void OpenAIFile::setPurpose(std::string const& value)
{
    m_Purpose = value;
}
std::string OpenAIFile::getStatus() const
{
    return m_Status;
}
void OpenAIFile::setStatus(std::string const& value)
{
    m_Status = value;
}
std::string OpenAIFile::getStatusDetails() const
{
    return m_Status_details;
}
void OpenAIFile::setStatusDetails(std::string const& value)
{
    m_Status_details = value;
    m_Status_detailsIsSet = true;
}
bool OpenAIFile::statusDetailsIsSet() const
{
    return m_Status_detailsIsSet;
}
void OpenAIFile::unsetStatus_details()
{
    m_Status_detailsIsSet = false;
}


} // namespace org::openapitools::server::model

