/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OpenAIFile.h
 *
 * 
 */

#ifndef OpenAIFile_H_
#define OpenAIFile_H_


#include <string>
#include "Object.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  OpenAIFile
{
public:
    OpenAIFile();
    virtual ~OpenAIFile() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const OpenAIFile& rhs) const;
    bool operator!=(const OpenAIFile& rhs) const;

    /////////////////////////////////////////////
    /// OpenAIFile members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getObject() const;
    void setObject(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getBytes() const;
    void setBytes(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getCreatedAt() const;
    void setCreatedAt(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    std::string getFilename() const;
    void setFilename(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getPurpose() const;
    void setPurpose(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Object getStatusDetails() const;
    void setStatusDetails(org::openapitools::server::model::Object const& value);
    bool statusDetailsIsSet() const;
    void unsetStatus_details();

    friend  void to_json(nlohmann::json& j, const OpenAIFile& o);
    friend  void from_json(const nlohmann::json& j, OpenAIFile& o);
protected:
    std::string m_Id;

    std::string m_object;

    int32_t m_Bytes;

    int32_t m_Created_at;

    std::string m_Filename;

    std::string m_Purpose;

    std::string m_Status;
    bool m_StatusIsSet;
    org::openapitools::server::model::Object m_Status_details;
    bool m_Status_detailsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* OpenAIFile_H_ */
