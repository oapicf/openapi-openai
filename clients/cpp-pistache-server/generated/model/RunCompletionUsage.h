/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * RunCompletionUsage.h
 *
 * Usage statistics related to the run. This value will be &#x60;null&#x60; if the run is not in a terminal state (i.e. &#x60;in_progress&#x60;, &#x60;queued&#x60;, etc.).
 */

#ifndef RunCompletionUsage_H_
#define RunCompletionUsage_H_


#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Usage statistics related to the run. This value will be &#x60;null&#x60; if the run is not in a terminal state (i.e. &#x60;in_progress&#x60;, &#x60;queued&#x60;, etc.).
/// </summary>
class  RunCompletionUsage
{
public:
    RunCompletionUsage();
    virtual ~RunCompletionUsage() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const RunCompletionUsage& rhs) const;
    bool operator!=(const RunCompletionUsage& rhs) const;

    /////////////////////////////////////////////
    /// RunCompletionUsage members

    /// <summary>
    /// Number of completion tokens used over the course of the run.
    /// </summary>
    int32_t getCompletionTokens() const;
    void setCompletionTokens(int32_t const value);
    /// <summary>
    /// Number of prompt tokens used over the course of the run.
    /// </summary>
    int32_t getPromptTokens() const;
    void setPromptTokens(int32_t const value);
    /// <summary>
    /// Total number of tokens used (prompt + completion).
    /// </summary>
    int32_t getTotalTokens() const;
    void setTotalTokens(int32_t const value);

    friend  void to_json(nlohmann::json& j, const RunCompletionUsage& o);
    friend  void from_json(const nlohmann::json& j, RunCompletionUsage& o);
protected:
    int32_t m_Completion_tokens;

    int32_t m_Prompt_tokens;

    int32_t m_Total_tokens;

    
};

} // namespace org::openapitools::server::model

#endif /* RunCompletionUsage_H_ */
