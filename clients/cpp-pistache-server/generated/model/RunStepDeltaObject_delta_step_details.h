/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * RunStepDeltaObject_delta_step_details.h
 *
 * The details of the run step.
 */

#ifndef RunStepDeltaObject_delta_step_details_H_
#define RunStepDeltaObject_delta_step_details_H_


#include "RunStepDeltaStepDetailsToolCallsObject_tool_calls_inner.h"
#include <string>
#include "RunStepDeltaStepDetailsToolCallsObject.h"
#include "RunStepDeltaStepDetailsMessageCreationObject_message_creation.h"
#include <vector>
#include "RunStepDeltaStepDetailsMessageCreationObject.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// The details of the run step.
/// </summary>
class  RunStepDeltaObject_delta_step_details
{
public:
    RunStepDeltaObject_delta_step_details();
    virtual ~RunStepDeltaObject_delta_step_details() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const RunStepDeltaObject_delta_step_details& rhs) const;
    bool operator!=(const RunStepDeltaObject_delta_step_details& rhs) const;

    /////////////////////////////////////////////
    /// RunStepDeltaObject_delta_step_details members

    /// <summary>
    /// Always &#x60;message_creation&#x60;.
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::RunStepDeltaStepDetailsMessageCreationObject_message_creation getMessageCreation() const;
    void setMessageCreation(org::openapitools::server::model::RunStepDeltaStepDetailsMessageCreationObject_message_creation const& value);
    bool messageCreationIsSet() const;
    void unsetMessage_creation();
    /// <summary>
    /// An array of tool calls the run step was involved in. These can be associated with one of three types of tools: &#x60;code_interpreter&#x60;, &#x60;retrieval&#x60;, or &#x60;function&#x60;. 
    /// </summary>
    std::vector<org::openapitools::server::model::RunStepDeltaStepDetailsToolCallsObject_tool_calls_inner> getToolCalls() const;
    void setToolCalls(std::vector<org::openapitools::server::model::RunStepDeltaStepDetailsToolCallsObject_tool_calls_inner> const& value);
    bool toolCallsIsSet() const;
    void unsetTool_calls();

    friend  void to_json(nlohmann::json& j, const RunStepDeltaObject_delta_step_details& o);
    friend  void from_json(const nlohmann::json& j, RunStepDeltaObject_delta_step_details& o);
protected:
    std::string m_Type;

    org::openapitools::server::model::RunStepDeltaStepDetailsMessageCreationObject_message_creation m_Message_creation;
    bool m_Message_creationIsSet;
    std::vector<org::openapitools::server::model::RunStepDeltaStepDetailsToolCallsObject_tool_calls_inner> m_Tool_calls;
    bool m_Tool_callsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* RunStepDeltaObject_delta_step_details_H_ */
