/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RunStepDeltaStepDetailsMessageCreationObject_message_creation.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

RunStepDeltaStepDetailsMessageCreationObject_message_creation::RunStepDeltaStepDetailsMessageCreationObject_message_creation()
{
    m_Message_id = "";
    m_Message_idIsSet = false;
    
}

void RunStepDeltaStepDetailsMessageCreationObject_message_creation::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool RunStepDeltaStepDetailsMessageCreationObject_message_creation::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RunStepDeltaStepDetailsMessageCreationObject_message_creation::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RunStepDeltaStepDetailsMessageCreationObject_message_creation" : pathPrefix;

        
    return success;
}

bool RunStepDeltaStepDetailsMessageCreationObject_message_creation::operator==(const RunStepDeltaStepDetailsMessageCreationObject_message_creation& rhs) const
{
    return
    
    
    
    ((!messageIdIsSet() && !rhs.messageIdIsSet()) || (messageIdIsSet() && rhs.messageIdIsSet() && getMessageId() == rhs.getMessageId()))
    
    ;
}

bool RunStepDeltaStepDetailsMessageCreationObject_message_creation::operator!=(const RunStepDeltaStepDetailsMessageCreationObject_message_creation& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RunStepDeltaStepDetailsMessageCreationObject_message_creation& o)
{
    j = nlohmann::json::object();
    if(o.messageIdIsSet())
        j["message_id"] = o.m_Message_id;
    
}

void from_json(const nlohmann::json& j, RunStepDeltaStepDetailsMessageCreationObject_message_creation& o)
{
    if(j.find("message_id") != j.end())
    {
        j.at("message_id").get_to(o.m_Message_id);
        o.m_Message_idIsSet = true;
    } 
    
}

std::string RunStepDeltaStepDetailsMessageCreationObject_message_creation::getMessageId() const
{
    return m_Message_id;
}
void RunStepDeltaStepDetailsMessageCreationObject_message_creation::setMessageId(std::string const& value)
{
    m_Message_id = value;
    m_Message_idIsSet = true;
}
bool RunStepDeltaStepDetailsMessageCreationObject_message_creation::messageIdIsSet() const
{
    return m_Message_idIsSet;
}
void RunStepDeltaStepDetailsMessageCreationObject_message_creation::unsetMessage_id()
{
    m_Message_idIsSet = false;
}


} // namespace org::openapitools::server::model

