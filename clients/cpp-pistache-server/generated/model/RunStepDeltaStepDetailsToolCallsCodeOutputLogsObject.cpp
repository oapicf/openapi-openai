/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject::RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject()
{
    m_Index = 0;
    m_Type = "";
    m_Logs = "";
    m_LogsIsSet = false;
    
}

void RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject" : pathPrefix;

                
    return success;
}

bool RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject::operator==(const RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject& rhs) const
{
    return
    
    
    (getIndex() == rhs.getIndex())
     &&
    
    (getType() == rhs.getType())
     &&
    
    
    ((!logsIsSet() && !rhs.logsIsSet()) || (logsIsSet() && rhs.logsIsSet() && getLogs() == rhs.getLogs()))
    
    ;
}

bool RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject::operator!=(const RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject& o)
{
    j = nlohmann::json::object();
    j["index"] = o.m_Index;
    j["type"] = o.m_Type;
    if(o.logsIsSet())
        j["logs"] = o.m_Logs;
    
}

void from_json(const nlohmann::json& j, RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject& o)
{
    j.at("index").get_to(o.m_Index);
    j.at("type").get_to(o.m_Type);
    if(j.find("logs") != j.end())
    {
        j.at("logs").get_to(o.m_Logs);
        o.m_LogsIsSet = true;
    } 
    
}

int32_t RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject::getIndex() const
{
    return m_Index;
}
void RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject::setIndex(int32_t const value)
{
    m_Index = value;
}
std::string RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject::getType() const
{
    return m_Type;
}
void RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject::setType(std::string const& value)
{
    m_Type = value;
}
std::string RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject::getLogs() const
{
    return m_Logs;
}
void RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject::setLogs(std::string const& value)
{
    m_Logs = value;
    m_LogsIsSet = true;
}
bool RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject::logsIsSet() const
{
    return m_LogsIsSet;
}
void RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject::unsetLogs()
{
    m_LogsIsSet = false;
}


} // namespace org::openapitools::server::model

