/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RunStepDeltaStepDetailsToolCallsObject.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

RunStepDeltaStepDetailsToolCallsObject::RunStepDeltaStepDetailsToolCallsObject()
{
    m_Type = "";
    m_Tool_callsIsSet = false;
    
}

void RunStepDeltaStepDetailsToolCallsObject::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool RunStepDeltaStepDetailsToolCallsObject::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RunStepDeltaStepDetailsToolCallsObject::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RunStepDeltaStepDetailsToolCallsObject" : pathPrefix;

             
    if (toolCallsIsSet())
    {
        const std::vector<org::openapitools::server::model::RunStepDeltaStepDetailsToolCallsObject_tool_calls_inner>& value = m_Tool_calls;
        const std::string currentValuePath = _pathPrefix + ".toolCalls";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::RunStepDeltaStepDetailsToolCallsObject_tool_calls_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".toolCalls") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool RunStepDeltaStepDetailsToolCallsObject::operator==(const RunStepDeltaStepDetailsToolCallsObject& rhs) const
{
    return
    
    
    (getType() == rhs.getType())
     &&
    
    
    ((!toolCallsIsSet() && !rhs.toolCallsIsSet()) || (toolCallsIsSet() && rhs.toolCallsIsSet() && getToolCalls() == rhs.getToolCalls()))
    
    ;
}

bool RunStepDeltaStepDetailsToolCallsObject::operator!=(const RunStepDeltaStepDetailsToolCallsObject& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RunStepDeltaStepDetailsToolCallsObject& o)
{
    j = nlohmann::json::object();
    j["type"] = o.m_Type;
    if(o.toolCallsIsSet() || !o.m_Tool_calls.empty())
        j["tool_calls"] = o.m_Tool_calls;
    
}

void from_json(const nlohmann::json& j, RunStepDeltaStepDetailsToolCallsObject& o)
{
    j.at("type").get_to(o.m_Type);
    if(j.find("tool_calls") != j.end())
    {
        j.at("tool_calls").get_to(o.m_Tool_calls);
        o.m_Tool_callsIsSet = true;
    } 
    
}

std::string RunStepDeltaStepDetailsToolCallsObject::getType() const
{
    return m_Type;
}
void RunStepDeltaStepDetailsToolCallsObject::setType(std::string const& value)
{
    m_Type = value;
}
std::vector<org::openapitools::server::model::RunStepDeltaStepDetailsToolCallsObject_tool_calls_inner> RunStepDeltaStepDetailsToolCallsObject::getToolCalls() const
{
    return m_Tool_calls;
}
void RunStepDeltaStepDetailsToolCallsObject::setToolCalls(std::vector<org::openapitools::server::model::RunStepDeltaStepDetailsToolCallsObject_tool_calls_inner> const& value)
{
    m_Tool_calls = value;
    m_Tool_callsIsSet = true;
}
bool RunStepDeltaStepDetailsToolCallsObject::toolCallsIsSet() const
{
    return m_Tool_callsIsSet;
}
void RunStepDeltaStepDetailsToolCallsObject::unsetTool_calls()
{
    m_Tool_callsIsSet = false;
}


} // namespace org::openapitools::server::model

