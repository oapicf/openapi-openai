/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RunStepDetailsToolCallsFunctionObject.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

RunStepDetailsToolCallsFunctionObject::RunStepDetailsToolCallsFunctionObject()
{
    m_Id = "";
    m_Type = "";
    
}

void RunStepDetailsToolCallsFunctionObject::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool RunStepDetailsToolCallsFunctionObject::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RunStepDetailsToolCallsFunctionObject::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RunStepDetailsToolCallsFunctionObject" : pathPrefix;

                
    if (!m_Function.validate()) {
        msg << _pathPrefix << ": Function is invalid;";
        success = false;
    }
    return success;
}

bool RunStepDetailsToolCallsFunctionObject::operator==(const RunStepDetailsToolCallsFunctionObject& rhs) const
{
    return
    
    
    (getId() == rhs.getId())
     &&
    
    (getType() == rhs.getType())
     &&
    
    (getFunction() == rhs.getFunction())
    
    
    ;
}

bool RunStepDetailsToolCallsFunctionObject::operator!=(const RunStepDetailsToolCallsFunctionObject& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RunStepDetailsToolCallsFunctionObject& o)
{
    j = nlohmann::json::object();
    j["id"] = o.m_Id;
    j["type"] = o.m_Type;
    j["function"] = o.m_Function;
    
}

void from_json(const nlohmann::json& j, RunStepDetailsToolCallsFunctionObject& o)
{
    j.at("id").get_to(o.m_Id);
    j.at("type").get_to(o.m_Type);
    j.at("function").get_to(o.m_Function);
    
}

std::string RunStepDetailsToolCallsFunctionObject::getId() const
{
    return m_Id;
}
void RunStepDetailsToolCallsFunctionObject::setId(std::string const& value)
{
    m_Id = value;
}
std::string RunStepDetailsToolCallsFunctionObject::getType() const
{
    return m_Type;
}
void RunStepDetailsToolCallsFunctionObject::setType(std::string const& value)
{
    m_Type = value;
}
org::openapitools::server::model::RunStepDetailsToolCallsFunctionObject_function RunStepDetailsToolCallsFunctionObject::getFunction() const
{
    return m_Function;
}
void RunStepDetailsToolCallsFunctionObject::setFunction(org::openapitools::server::model::RunStepDetailsToolCallsFunctionObject_function const& value)
{
    m_Function = value;
}


} // namespace org::openapitools::server::model

