/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RunToolCallObject_function.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

RunToolCallObject_function::RunToolCallObject_function()
{
    m_Name = "";
    m_Arguments = "";
    
}

void RunToolCallObject_function::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool RunToolCallObject_function::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RunToolCallObject_function::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RunToolCallObject_function" : pathPrefix;

            
    return success;
}

bool RunToolCallObject_function::operator==(const RunToolCallObject_function& rhs) const
{
    return
    
    
    (getName() == rhs.getName())
     &&
    
    (getArguments() == rhs.getArguments())
    
    
    ;
}

bool RunToolCallObject_function::operator!=(const RunToolCallObject_function& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RunToolCallObject_function& o)
{
    j = nlohmann::json::object();
    j["name"] = o.m_Name;
    j["arguments"] = o.m_Arguments;
    
}

void from_json(const nlohmann::json& j, RunToolCallObject_function& o)
{
    j.at("name").get_to(o.m_Name);
    j.at("arguments").get_to(o.m_Arguments);
    
}

std::string RunToolCallObject_function::getName() const
{
    return m_Name;
}
void RunToolCallObject_function::setName(std::string const& value)
{
    m_Name = value;
}
std::string RunToolCallObject_function::getArguments() const
{
    return m_Arguments;
}
void RunToolCallObject_function::setArguments(std::string const& value)
{
    m_Arguments = value;
}


} // namespace org::openapitools::server::model

