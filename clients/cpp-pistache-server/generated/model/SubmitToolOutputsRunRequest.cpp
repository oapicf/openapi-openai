/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SubmitToolOutputsRunRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SubmitToolOutputsRunRequest::SubmitToolOutputsRunRequest()
{
    m_Stream = false;
    m_StreamIsSet = false;
    
}

void SubmitToolOutputsRunRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SubmitToolOutputsRunRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SubmitToolOutputsRunRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SubmitToolOutputsRunRequest" : pathPrefix;

         
    
    /* Tool_outputs */ {
        const std::vector<org::openapitools::server::model::SubmitToolOutputsRunRequest_tool_outputs_inner>& value = m_Tool_outputs;
        const std::string currentValuePath = _pathPrefix + ".toolOutputs";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::SubmitToolOutputsRunRequest_tool_outputs_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".toolOutputs") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool SubmitToolOutputsRunRequest::operator==(const SubmitToolOutputsRunRequest& rhs) const
{
    return
    
    
    (getToolOutputs() == rhs.getToolOutputs())
     &&
    
    
    ((!streamIsSet() && !rhs.streamIsSet()) || (streamIsSet() && rhs.streamIsSet() && isStream() == rhs.isStream()))
    
    ;
}

bool SubmitToolOutputsRunRequest::operator!=(const SubmitToolOutputsRunRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SubmitToolOutputsRunRequest& o)
{
    j = nlohmann::json::object();
    j["tool_outputs"] = o.m_Tool_outputs;
    if(o.streamIsSet())
        j["stream"] = o.m_Stream;
    
}

void from_json(const nlohmann::json& j, SubmitToolOutputsRunRequest& o)
{
    j.at("tool_outputs").get_to(o.m_Tool_outputs);
    if(j.find("stream") != j.end())
    {
        j.at("stream").get_to(o.m_Stream);
        o.m_StreamIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::SubmitToolOutputsRunRequest_tool_outputs_inner> SubmitToolOutputsRunRequest::getToolOutputs() const
{
    return m_Tool_outputs;
}
void SubmitToolOutputsRunRequest::setToolOutputs(std::vector<org::openapitools::server::model::SubmitToolOutputsRunRequest_tool_outputs_inner> const& value)
{
    m_Tool_outputs = value;
}
bool SubmitToolOutputsRunRequest::isStream() const
{
    return m_Stream;
}
void SubmitToolOutputsRunRequest::setStream(bool const value)
{
    m_Stream = value;
    m_StreamIsSet = true;
}
bool SubmitToolOutputsRunRequest::streamIsSet() const
{
    return m_StreamIsSet;
}
void SubmitToolOutputsRunRequest::unsetStream()
{
    m_StreamIsSet = false;
}


} // namespace org::openapitools::server::model

