/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ThreadObject.h
 *
 * Represents a thread that contains [messages](/docs/api-reference/messages).
 */

#ifndef ThreadObject_H_
#define ThreadObject_H_


#include <nlohmann/json.hpp>
#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Represents a thread that contains [messages](/docs/api-reference/messages).
/// </summary>
class  ThreadObject
{
public:
    ThreadObject();
    virtual ~ThreadObject() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ThreadObject& rhs) const;
    bool operator!=(const ThreadObject& rhs) const;

    /////////////////////////////////////////////
    /// ThreadObject members

    /// <summary>
    /// The identifier, which can be referenced in API endpoints.
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    /// <summary>
    /// The object type, which is always &#x60;thread&#x60;.
    /// </summary>
    std::string getObject() const;
    void setObject(std::string const& value);
    /// <summary>
    /// The Unix timestamp (in seconds) for when the thread was created.
    /// </summary>
    int32_t getCreatedAt() const;
    void setCreatedAt(int32_t const value);
    /// <summary>
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    /// </summary>
    nlohmann::json getMetadata() const;
    void setMetadata(nlohmann::json const& value);

    friend  void to_json(nlohmann::json& j, const ThreadObject& o);
    friend  void from_json(const nlohmann::json& j, ThreadObject& o);
protected:
    std::string m_Id;

    std::string m_object;

    int32_t m_Created_at;

    nlohmann::json m_Metadata;

    
};

} // namespace org::openapitools::server::model

#endif /* ThreadObject_H_ */
