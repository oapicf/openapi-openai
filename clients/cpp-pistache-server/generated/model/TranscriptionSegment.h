/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * TranscriptionSegment.h
 *
 * 
 */

#ifndef TranscriptionSegment_H_
#define TranscriptionSegment_H_


#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  TranscriptionSegment
{
public:
    TranscriptionSegment();
    virtual ~TranscriptionSegment() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const TranscriptionSegment& rhs) const;
    bool operator!=(const TranscriptionSegment& rhs) const;

    /////////////////////////////////////////////
    /// TranscriptionSegment members

    /// <summary>
    /// Unique identifier of the segment.
    /// </summary>
    int32_t getId() const;
    void setId(int32_t const value);
    /// <summary>
    /// Seek offset of the segment.
    /// </summary>
    int32_t getSeek() const;
    void setSeek(int32_t const value);
    /// <summary>
    /// Start time of the segment in seconds.
    /// </summary>
    float getStart() const;
    void setStart(float const value);
    /// <summary>
    /// End time of the segment in seconds.
    /// </summary>
    float getEnd() const;
    void setEnd(float const value);
    /// <summary>
    /// Text content of the segment.
    /// </summary>
    std::string getText() const;
    void setText(std::string const& value);
    /// <summary>
    /// Array of token IDs for the text content.
    /// </summary>
    std::vector<int32_t> getTokens() const;
    void setTokens(std::vector<int32_t> const value);
    /// <summary>
    /// Temperature parameter used for generating the segment.
    /// </summary>
    float getTemperature() const;
    void setTemperature(float const value);
    /// <summary>
    /// Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
    /// </summary>
    float getAvgLogprob() const;
    void setAvgLogprob(float const value);
    /// <summary>
    /// Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
    /// </summary>
    float getCompressionRatio() const;
    void setCompressionRatio(float const value);
    /// <summary>
    /// Probability of no speech in the segment. If the value is higher than 1.0 and the &#x60;avg_logprob&#x60; is below -1, consider this segment silent.
    /// </summary>
    float getNoSpeechProb() const;
    void setNoSpeechProb(float const value);

    friend  void to_json(nlohmann::json& j, const TranscriptionSegment& o);
    friend  void from_json(const nlohmann::json& j, TranscriptionSegment& o);
protected:
    int32_t m_Id;

    int32_t m_Seek;

    float m_Start;

    float m_End;

    std::string m_Text;

    std::vector<int32_t> m_Tokens;

    float m_Temperature;

    float m_Avg_logprob;

    float m_Compression_ratio;

    float m_No_speech_prob;

    
};

} // namespace org::openapitools::server::model

#endif /* TranscriptionSegment_H_ */
