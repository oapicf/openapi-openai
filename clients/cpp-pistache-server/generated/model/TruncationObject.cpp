/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TruncationObject.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

TruncationObject::TruncationObject()
{
    m_Type = "";
    m_TypeIsSet = false;
    m_Last_messages = 0;
    m_Last_messagesIsSet = false;
    
}

void TruncationObject::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TruncationObject::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TruncationObject::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TruncationObject" : pathPrefix;

             
    if (lastMessagesIsSet())
    {
        const int32_t& value = m_Last_messages;
        const std::string currentValuePath = _pathPrefix + ".lastMessages";
                
        
        if (value < 1)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 1;";
        }

    }
    
    return success;
}

bool TruncationObject::operator==(const TruncationObject& rhs) const
{
    return
    
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!lastMessagesIsSet() && !rhs.lastMessagesIsSet()) || (lastMessagesIsSet() && rhs.lastMessagesIsSet() && getLastMessages() == rhs.getLastMessages()))
    
    ;
}

bool TruncationObject::operator!=(const TruncationObject& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TruncationObject& o)
{
    j = nlohmann::json::object();
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.lastMessagesIsSet())
        j["last_messages"] = o.m_Last_messages;
    
}

void from_json(const nlohmann::json& j, TruncationObject& o)
{
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("last_messages") != j.end())
    {
        j.at("last_messages").get_to(o.m_Last_messages);
        o.m_Last_messagesIsSet = true;
    } 
    
}

std::string TruncationObject::getType() const
{
    return m_Type;
}
void TruncationObject::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool TruncationObject::typeIsSet() const
{
    return m_TypeIsSet;
}
void TruncationObject::unsetType()
{
    m_TypeIsSet = false;
}
int32_t TruncationObject::getLastMessages() const
{
    return m_Last_messages;
}
void TruncationObject::setLastMessages(int32_t const value)
{
    m_Last_messages = value;
    m_Last_messagesIsSet = true;
}
bool TruncationObject::lastMessagesIsSet() const
{
    return m_Last_messagesIsSet;
}
void TruncationObject::unsetLast_messages()
{
    m_Last_messagesIsSet = false;
}


} // namespace org::openapitools::server::model

