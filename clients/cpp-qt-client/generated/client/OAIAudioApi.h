/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAudioApi_H
#define OAI_OAIAudioApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateSpeechRequest.h"
#include "OAICreateTranscriptionRequest_model.h"
#include "OAICreateTranscription_200_response.h"
#include "OAICreateTranslation_200_response.h"
#include "OAIHttpFileElement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAudioApi : public QObject {
    Q_OBJECT

public:
    OAIAudioApi(const int timeOut = 0);
    ~OAIAudioApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_speech_request OAICreateSpeechRequest [required]
    */
    void createSpeech(const OAICreateSpeechRequest &oai_create_speech_request);

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  model OAICreateTranscriptionRequest_model [required]
    * @param[in]  language QString [optional]
    * @param[in]  prompt QString [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  temperature double [optional]
    * @param[in]  timestamp_granularities QList<QString> [optional]
    */
    void createTranscription(const OAIHttpFileElement &file, const OAICreateTranscriptionRequest_model &model, const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &prompt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &temperature = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QList<QString>> &timestamp_granularities = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  model OAICreateTranscriptionRequest_model [required]
    * @param[in]  prompt QString [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  temperature double [optional]
    */
    void createTranslation(const OAIHttpFileElement &file, const OAICreateTranscriptionRequest_model &model, const ::OpenAPI::OptionalParam<QString> &prompt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &temperature = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSpeechCallback(OAIHttpRequestWorker *worker);
    void createTranscriptionCallback(OAIHttpRequestWorker *worker);
    void createTranslationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSpeechSignal(OAIHttpFileElement summary);
    void createTranscriptionSignal(OAICreateTranscription_200_response summary);
    void createTranslationSignal(OAICreateTranslation_200_response summary);

    void createSpeechSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void createTranscriptionSignalFull(OAIHttpRequestWorker *worker, OAICreateTranscription_200_response summary);
    void createTranslationSignalFull(OAIHttpRequestWorker *worker, OAICreateTranslation_200_response summary);

    Q_DECL_DEPRECATED_X("Use createSpeechSignalError() instead")
    void createSpeechSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSpeechSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTranscriptionSignalError() instead")
    void createTranscriptionSignalE(OAICreateTranscription_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranscriptionSignalError(OAICreateTranscription_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTranslationSignalError() instead")
    void createTranslationSignalE(OAICreateTranslation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranslationSignalError(OAICreateTranslation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSpeechSignalErrorFull() instead")
    void createSpeechSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSpeechSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTranscriptionSignalErrorFull() instead")
    void createTranscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTranslationSignalErrorFull() instead")
    void createTranslationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranslationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
