/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEditRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEditRequest::OAICreateEditRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEditRequest::OAICreateEditRequest() {
    this->initializeModel();
}

OAICreateEditRequest::~OAICreateEditRequest() {}

void OAICreateEditRequest::initializeModel() {

    m_model_isSet = false;
    m_model_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_instruction_isSet = false;
    m_instruction_isValid = false;

    m_n_isSet = false;
    m_n_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_top_p_isSet = false;
    m_top_p_isValid = false;
}

void OAICreateEditRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEditRequest::fromJsonObject(QJsonObject json) {

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_instruction_isValid = ::OpenAPI::fromJsonValue(m_instruction, json[QString("instruction")]);
    m_instruction_isSet = !json[QString("instruction")].isNull() && m_instruction_isValid;

    m_n_isValid = ::OpenAPI::fromJsonValue(m_n, json[QString("n")]);
    m_n_isSet = !json[QString("n")].isNull() && m_n_isValid;

    m_temperature_isValid = ::OpenAPI::fromJsonValue(m_temperature, json[QString("temperature")]);
    m_temperature_isSet = !json[QString("temperature")].isNull() && m_temperature_isValid;

    m_top_p_isValid = ::OpenAPI::fromJsonValue(m_top_p, json[QString("top_p")]);
    m_top_p_isSet = !json[QString("top_p")].isNull() && m_top_p_isValid;
}

QString OAICreateEditRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEditRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_model.isSet()) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_instruction_isSet) {
        obj.insert(QString("instruction"), ::OpenAPI::toJsonValue(m_instruction));
    }
    if (m_n_isSet) {
        obj.insert(QString("n"), ::OpenAPI::toJsonValue(m_n));
    }
    if (m_temperature_isSet) {
        obj.insert(QString("temperature"), ::OpenAPI::toJsonValue(m_temperature));
    }
    if (m_top_p_isSet) {
        obj.insert(QString("top_p"), ::OpenAPI::toJsonValue(m_top_p));
    }
    return obj;
}

OAICreateEditRequest_model OAICreateEditRequest::getModel() const {
    return m_model;
}
void OAICreateEditRequest::setModel(const OAICreateEditRequest_model &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAICreateEditRequest::is_model_Set() const{
    return m_model_isSet;
}

bool OAICreateEditRequest::is_model_Valid() const{
    return m_model_isValid;
}

QString OAICreateEditRequest::getInput() const {
    return m_input;
}
void OAICreateEditRequest::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAICreateEditRequest::is_input_Set() const{
    return m_input_isSet;
}

bool OAICreateEditRequest::is_input_Valid() const{
    return m_input_isValid;
}

QString OAICreateEditRequest::getInstruction() const {
    return m_instruction;
}
void OAICreateEditRequest::setInstruction(const QString &instruction) {
    m_instruction = instruction;
    m_instruction_isSet = true;
}

bool OAICreateEditRequest::is_instruction_Set() const{
    return m_instruction_isSet;
}

bool OAICreateEditRequest::is_instruction_Valid() const{
    return m_instruction_isValid;
}

qint32 OAICreateEditRequest::getN() const {
    return m_n;
}
void OAICreateEditRequest::setN(const qint32 &n) {
    m_n = n;
    m_n_isSet = true;
}

bool OAICreateEditRequest::is_n_Set() const{
    return m_n_isSet;
}

bool OAICreateEditRequest::is_n_Valid() const{
    return m_n_isValid;
}

double OAICreateEditRequest::getTemperature() const {
    return m_temperature;
}
void OAICreateEditRequest::setTemperature(const double &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OAICreateEditRequest::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAICreateEditRequest::is_temperature_Valid() const{
    return m_temperature_isValid;
}

double OAICreateEditRequest::getTopP() const {
    return m_top_p;
}
void OAICreateEditRequest::setTopP(const double &top_p) {
    m_top_p = top_p;
    m_top_p_isSet = true;
}

bool OAICreateEditRequest::is_top_p_Set() const{
    return m_top_p_isSet;
}

bool OAICreateEditRequest::is_top_p_Valid() const{
    return m_top_p_isValid;
}

bool OAICreateEditRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instruction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_n_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_p_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEditRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_model_isValid && m_instruction_isValid && true;
}

} // namespace OpenAPI
