/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEditResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEditResponse::OAICreateEditResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEditResponse::OAICreateEditResponse() {
    this->initializeModel();
}

OAICreateEditResponse::~OAICreateEditResponse() {}

void OAICreateEditResponse::initializeModel() {

    m_object_isSet = false;
    m_object_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_choices_isSet = false;
    m_choices_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAICreateEditResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEditResponse::fromJsonObject(QJsonObject json) {

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_choices_isValid = ::OpenAPI::fromJsonValue(m_choices, json[QString("choices")]);
    m_choices_isSet = !json[QString("choices")].isNull() && m_choices_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAICreateEditResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEditResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_choices.size() > 0) {
        obj.insert(QString("choices"), ::OpenAPI::toJsonValue(m_choices));
    }
    if (m_usage.isSet()) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

QString OAICreateEditResponse::getObject() const {
    return m_object;
}
void OAICreateEditResponse::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAICreateEditResponse::is_object_Set() const{
    return m_object_isSet;
}

bool OAICreateEditResponse::is_object_Valid() const{
    return m_object_isValid;
}

qint32 OAICreateEditResponse::getCreated() const {
    return m_created;
}
void OAICreateEditResponse::setCreated(const qint32 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAICreateEditResponse::is_created_Set() const{
    return m_created_isSet;
}

bool OAICreateEditResponse::is_created_Valid() const{
    return m_created_isValid;
}

QList<OAICreateEditResponse_choices_inner> OAICreateEditResponse::getChoices() const {
    return m_choices;
}
void OAICreateEditResponse::setChoices(const QList<OAICreateEditResponse_choices_inner> &choices) {
    m_choices = choices;
    m_choices_isSet = true;
}

bool OAICreateEditResponse::is_choices_Set() const{
    return m_choices_isSet;
}

bool OAICreateEditResponse::is_choices_Valid() const{
    return m_choices_isValid;
}

OAICreateCompletionResponse_usage OAICreateEditResponse::getUsage() const {
    return m_usage;
}
void OAICreateEditResponse::setUsage(const OAICreateCompletionResponse_usage &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAICreateEditResponse::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAICreateEditResponse::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAICreateEditResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_choices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEditResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_isValid && m_created_isValid && m_choices_isValid && m_usage_isValid && true;
}

} // namespace OpenAPI
