/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEmbeddingResponse_usage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEmbeddingResponse_usage::OAICreateEmbeddingResponse_usage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEmbeddingResponse_usage::OAICreateEmbeddingResponse_usage() {
    this->initializeModel();
}

OAICreateEmbeddingResponse_usage::~OAICreateEmbeddingResponse_usage() {}

void OAICreateEmbeddingResponse_usage::initializeModel() {

    m_prompt_tokens_isSet = false;
    m_prompt_tokens_isValid = false;

    m_total_tokens_isSet = false;
    m_total_tokens_isValid = false;
}

void OAICreateEmbeddingResponse_usage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEmbeddingResponse_usage::fromJsonObject(QJsonObject json) {

    m_prompt_tokens_isValid = ::OpenAPI::fromJsonValue(m_prompt_tokens, json[QString("prompt_tokens")]);
    m_prompt_tokens_isSet = !json[QString("prompt_tokens")].isNull() && m_prompt_tokens_isValid;

    m_total_tokens_isValid = ::OpenAPI::fromJsonValue(m_total_tokens, json[QString("total_tokens")]);
    m_total_tokens_isSet = !json[QString("total_tokens")].isNull() && m_total_tokens_isValid;
}

QString OAICreateEmbeddingResponse_usage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEmbeddingResponse_usage::asJsonObject() const {
    QJsonObject obj;
    if (m_prompt_tokens_isSet) {
        obj.insert(QString("prompt_tokens"), ::OpenAPI::toJsonValue(m_prompt_tokens));
    }
    if (m_total_tokens_isSet) {
        obj.insert(QString("total_tokens"), ::OpenAPI::toJsonValue(m_total_tokens));
    }
    return obj;
}

qint32 OAICreateEmbeddingResponse_usage::getPromptTokens() const {
    return m_prompt_tokens;
}
void OAICreateEmbeddingResponse_usage::setPromptTokens(const qint32 &prompt_tokens) {
    m_prompt_tokens = prompt_tokens;
    m_prompt_tokens_isSet = true;
}

bool OAICreateEmbeddingResponse_usage::is_prompt_tokens_Set() const{
    return m_prompt_tokens_isSet;
}

bool OAICreateEmbeddingResponse_usage::is_prompt_tokens_Valid() const{
    return m_prompt_tokens_isValid;
}

qint32 OAICreateEmbeddingResponse_usage::getTotalTokens() const {
    return m_total_tokens;
}
void OAICreateEmbeddingResponse_usage::setTotalTokens(const qint32 &total_tokens) {
    m_total_tokens = total_tokens;
    m_total_tokens_isSet = true;
}

bool OAICreateEmbeddingResponse_usage::is_total_tokens_Set() const{
    return m_total_tokens_isSet;
}

bool OAICreateEmbeddingResponse_usage::is_total_tokens_Valid() const{
    return m_total_tokens_isValid;
}

bool OAICreateEmbeddingResponse_usage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prompt_tokens_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tokens_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEmbeddingResponse_usage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_prompt_tokens_isValid && m_total_tokens_isValid && true;
}

} // namespace OpenAPI
