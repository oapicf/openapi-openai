/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateFineTuneRequest.h
 *
 * 
 */

#ifndef OAICreateFineTuneRequest_H
#define OAICreateFineTuneRequest_H

#include <QJsonObject>

#include "OAICreateFineTuneRequest_model.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateFineTuneRequest : public OAIObject {
public:
    OAICreateFineTuneRequest();
    OAICreateFineTuneRequest(QString json);
    ~OAICreateFineTuneRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTrainingFile() const;
    void setTrainingFile(const QString &training_file);
    bool is_training_file_Set() const;
    bool is_training_file_Valid() const;

    QString getValidationFile() const;
    void setValidationFile(const QString &validation_file);
    bool is_validation_file_Set() const;
    bool is_validation_file_Valid() const;

    OAICreateFineTuneRequest_model getModel() const;
    void setModel(const OAICreateFineTuneRequest_model &model);
    bool is_model_Set() const;
    bool is_model_Valid() const;

    qint32 getNEpochs() const;
    void setNEpochs(const qint32 &n_epochs);
    bool is_n_epochs_Set() const;
    bool is_n_epochs_Valid() const;

    qint32 getBatchSize() const;
    void setBatchSize(const qint32 &batch_size);
    bool is_batch_size_Set() const;
    bool is_batch_size_Valid() const;

    double getLearningRateMultiplier() const;
    void setLearningRateMultiplier(const double &learning_rate_multiplier);
    bool is_learning_rate_multiplier_Set() const;
    bool is_learning_rate_multiplier_Valid() const;

    double getPromptLossWeight() const;
    void setPromptLossWeight(const double &prompt_loss_weight);
    bool is_prompt_loss_weight_Set() const;
    bool is_prompt_loss_weight_Valid() const;

    bool isComputeClassificationMetrics() const;
    void setComputeClassificationMetrics(const bool &compute_classification_metrics);
    bool is_compute_classification_metrics_Set() const;
    bool is_compute_classification_metrics_Valid() const;

    qint32 getClassificationNClasses() const;
    void setClassificationNClasses(const qint32 &classification_n_classes);
    bool is_classification_n_classes_Set() const;
    bool is_classification_n_classes_Valid() const;

    QString getClassificationPositiveClass() const;
    void setClassificationPositiveClass(const QString &classification_positive_class);
    bool is_classification_positive_class_Set() const;
    bool is_classification_positive_class_Valid() const;

    QList<double> getClassificationBetas() const;
    void setClassificationBetas(const QList<double> &classification_betas);
    bool is_classification_betas_Set() const;
    bool is_classification_betas_Valid() const;

    QString getSuffix() const;
    void setSuffix(const QString &suffix);
    bool is_suffix_Set() const;
    bool is_suffix_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_training_file;
    bool m_training_file_isSet;
    bool m_training_file_isValid;

    QString m_validation_file;
    bool m_validation_file_isSet;
    bool m_validation_file_isValid;

    OAICreateFineTuneRequest_model m_model;
    bool m_model_isSet;
    bool m_model_isValid;

    qint32 m_n_epochs;
    bool m_n_epochs_isSet;
    bool m_n_epochs_isValid;

    qint32 m_batch_size;
    bool m_batch_size_isSet;
    bool m_batch_size_isValid;

    double m_learning_rate_multiplier;
    bool m_learning_rate_multiplier_isSet;
    bool m_learning_rate_multiplier_isValid;

    double m_prompt_loss_weight;
    bool m_prompt_loss_weight_isSet;
    bool m_prompt_loss_weight_isValid;

    bool m_compute_classification_metrics;
    bool m_compute_classification_metrics_isSet;
    bool m_compute_classification_metrics_isValid;

    qint32 m_classification_n_classes;
    bool m_classification_n_classes_isSet;
    bool m_classification_n_classes_isValid;

    QString m_classification_positive_class;
    bool m_classification_positive_class_isSet;
    bool m_classification_positive_class_isValid;

    QList<double> m_classification_betas;
    bool m_classification_betas_isSet;
    bool m_classification_betas_isValid;

    QString m_suffix;
    bool m_suffix_isSet;
    bool m_suffix_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateFineTuneRequest)

#endif // OAICreateFineTuneRequest_H
