/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateThreadAndRunRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateThreadAndRunRequest::OAICreateThreadAndRunRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateThreadAndRunRequest::OAICreateThreadAndRunRequest() {
    this->initializeModel();
}

OAICreateThreadAndRunRequest::~OAICreateThreadAndRunRequest() {}

void OAICreateThreadAndRunRequest::initializeModel() {

    m_assistant_id_isSet = false;
    m_assistant_id_isValid = false;

    m_thread_isSet = false;
    m_thread_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_tools_isSet = false;
    m_tools_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_stream_isSet = false;
    m_stream_isValid = false;

    m_max_prompt_tokens_isSet = false;
    m_max_prompt_tokens_isValid = false;

    m_max_completion_tokens_isSet = false;
    m_max_completion_tokens_isValid = false;

    m_truncation_strategy_isSet = false;
    m_truncation_strategy_isValid = false;

    m_tool_choice_isSet = false;
    m_tool_choice_isValid = false;

    m_response_format_isSet = false;
    m_response_format_isValid = false;
}

void OAICreateThreadAndRunRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateThreadAndRunRequest::fromJsonObject(QJsonObject json) {

    m_assistant_id_isValid = ::OpenAPI::fromJsonValue(m_assistant_id, json[QString("assistant_id")]);
    m_assistant_id_isSet = !json[QString("assistant_id")].isNull() && m_assistant_id_isValid;

    m_thread_isValid = ::OpenAPI::fromJsonValue(m_thread, json[QString("thread")]);
    m_thread_isSet = !json[QString("thread")].isNull() && m_thread_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(m_instructions, json[QString("instructions")]);
    m_instructions_isSet = !json[QString("instructions")].isNull() && m_instructions_isValid;

    m_tools_isValid = ::OpenAPI::fromJsonValue(m_tools, json[QString("tools")]);
    m_tools_isSet = !json[QString("tools")].isNull() && m_tools_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_temperature_isValid = ::OpenAPI::fromJsonValue(m_temperature, json[QString("temperature")]);
    m_temperature_isSet = !json[QString("temperature")].isNull() && m_temperature_isValid;

    m_stream_isValid = ::OpenAPI::fromJsonValue(m_stream, json[QString("stream")]);
    m_stream_isSet = !json[QString("stream")].isNull() && m_stream_isValid;

    m_max_prompt_tokens_isValid = ::OpenAPI::fromJsonValue(m_max_prompt_tokens, json[QString("max_prompt_tokens")]);
    m_max_prompt_tokens_isSet = !json[QString("max_prompt_tokens")].isNull() && m_max_prompt_tokens_isValid;

    m_max_completion_tokens_isValid = ::OpenAPI::fromJsonValue(m_max_completion_tokens, json[QString("max_completion_tokens")]);
    m_max_completion_tokens_isSet = !json[QString("max_completion_tokens")].isNull() && m_max_completion_tokens_isValid;

    m_truncation_strategy_isValid = ::OpenAPI::fromJsonValue(m_truncation_strategy, json[QString("truncation_strategy")]);
    m_truncation_strategy_isSet = !json[QString("truncation_strategy")].isNull() && m_truncation_strategy_isValid;

    m_tool_choice_isValid = ::OpenAPI::fromJsonValue(m_tool_choice, json[QString("tool_choice")]);
    m_tool_choice_isSet = !json[QString("tool_choice")].isNull() && m_tool_choice_isValid;

    m_response_format_isValid = ::OpenAPI::fromJsonValue(m_response_format, json[QString("response_format")]);
    m_response_format_isSet = !json[QString("response_format")].isNull() && m_response_format_isValid;
}

QString OAICreateThreadAndRunRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateThreadAndRunRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_assistant_id_isSet) {
        obj.insert(QString("assistant_id"), ::OpenAPI::toJsonValue(m_assistant_id));
    }
    if (m_thread.isSet()) {
        obj.insert(QString("thread"), ::OpenAPI::toJsonValue(m_thread));
    }
    if (m_model.isSet()) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_instructions_isSet) {
        obj.insert(QString("instructions"), ::OpenAPI::toJsonValue(m_instructions));
    }
    if (m_tools.size() > 0) {
        obj.insert(QString("tools"), ::OpenAPI::toJsonValue(m_tools));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_temperature_isSet) {
        obj.insert(QString("temperature"), ::OpenAPI::toJsonValue(m_temperature));
    }
    if (m_stream_isSet) {
        obj.insert(QString("stream"), ::OpenAPI::toJsonValue(m_stream));
    }
    if (m_max_prompt_tokens_isSet) {
        obj.insert(QString("max_prompt_tokens"), ::OpenAPI::toJsonValue(m_max_prompt_tokens));
    }
    if (m_max_completion_tokens_isSet) {
        obj.insert(QString("max_completion_tokens"), ::OpenAPI::toJsonValue(m_max_completion_tokens));
    }
    if (m_truncation_strategy.isSet()) {
        obj.insert(QString("truncation_strategy"), ::OpenAPI::toJsonValue(m_truncation_strategy));
    }
    if (m_tool_choice.isSet()) {
        obj.insert(QString("tool_choice"), ::OpenAPI::toJsonValue(m_tool_choice));
    }
    if (m_response_format.isSet()) {
        obj.insert(QString("response_format"), ::OpenAPI::toJsonValue(m_response_format));
    }
    return obj;
}

QString OAICreateThreadAndRunRequest::getAssistantId() const {
    return m_assistant_id;
}
void OAICreateThreadAndRunRequest::setAssistantId(const QString &assistant_id) {
    m_assistant_id = assistant_id;
    m_assistant_id_isSet = true;
}

bool OAICreateThreadAndRunRequest::is_assistant_id_Set() const{
    return m_assistant_id_isSet;
}

bool OAICreateThreadAndRunRequest::is_assistant_id_Valid() const{
    return m_assistant_id_isValid;
}

OAICreateThreadRequest OAICreateThreadAndRunRequest::getThread() const {
    return m_thread;
}
void OAICreateThreadAndRunRequest::setThread(const OAICreateThreadRequest &thread) {
    m_thread = thread;
    m_thread_isSet = true;
}

bool OAICreateThreadAndRunRequest::is_thread_Set() const{
    return m_thread_isSet;
}

bool OAICreateThreadAndRunRequest::is_thread_Valid() const{
    return m_thread_isValid;
}

OAICreateRunRequest_model OAICreateThreadAndRunRequest::getModel() const {
    return m_model;
}
void OAICreateThreadAndRunRequest::setModel(const OAICreateRunRequest_model &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAICreateThreadAndRunRequest::is_model_Set() const{
    return m_model_isSet;
}

bool OAICreateThreadAndRunRequest::is_model_Valid() const{
    return m_model_isValid;
}

QString OAICreateThreadAndRunRequest::getInstructions() const {
    return m_instructions;
}
void OAICreateThreadAndRunRequest::setInstructions(const QString &instructions) {
    m_instructions = instructions;
    m_instructions_isSet = true;
}

bool OAICreateThreadAndRunRequest::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAICreateThreadAndRunRequest::is_instructions_Valid() const{
    return m_instructions_isValid;
}

QList<OAICreateThreadAndRunRequest_tools_inner> OAICreateThreadAndRunRequest::getTools() const {
    return m_tools;
}
void OAICreateThreadAndRunRequest::setTools(const QList<OAICreateThreadAndRunRequest_tools_inner> &tools) {
    m_tools = tools;
    m_tools_isSet = true;
}

bool OAICreateThreadAndRunRequest::is_tools_Set() const{
    return m_tools_isSet;
}

bool OAICreateThreadAndRunRequest::is_tools_Valid() const{
    return m_tools_isValid;
}

OAIObject OAICreateThreadAndRunRequest::getMetadata() const {
    return m_metadata;
}
void OAICreateThreadAndRunRequest::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICreateThreadAndRunRequest::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICreateThreadAndRunRequest::is_metadata_Valid() const{
    return m_metadata_isValid;
}

double OAICreateThreadAndRunRequest::getTemperature() const {
    return m_temperature;
}
void OAICreateThreadAndRunRequest::setTemperature(const double &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OAICreateThreadAndRunRequest::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAICreateThreadAndRunRequest::is_temperature_Valid() const{
    return m_temperature_isValid;
}

bool OAICreateThreadAndRunRequest::isStream() const {
    return m_stream;
}
void OAICreateThreadAndRunRequest::setStream(const bool &stream) {
    m_stream = stream;
    m_stream_isSet = true;
}

bool OAICreateThreadAndRunRequest::is_stream_Set() const{
    return m_stream_isSet;
}

bool OAICreateThreadAndRunRequest::is_stream_Valid() const{
    return m_stream_isValid;
}

qint32 OAICreateThreadAndRunRequest::getMaxPromptTokens() const {
    return m_max_prompt_tokens;
}
void OAICreateThreadAndRunRequest::setMaxPromptTokens(const qint32 &max_prompt_tokens) {
    m_max_prompt_tokens = max_prompt_tokens;
    m_max_prompt_tokens_isSet = true;
}

bool OAICreateThreadAndRunRequest::is_max_prompt_tokens_Set() const{
    return m_max_prompt_tokens_isSet;
}

bool OAICreateThreadAndRunRequest::is_max_prompt_tokens_Valid() const{
    return m_max_prompt_tokens_isValid;
}

qint32 OAICreateThreadAndRunRequest::getMaxCompletionTokens() const {
    return m_max_completion_tokens;
}
void OAICreateThreadAndRunRequest::setMaxCompletionTokens(const qint32 &max_completion_tokens) {
    m_max_completion_tokens = max_completion_tokens;
    m_max_completion_tokens_isSet = true;
}

bool OAICreateThreadAndRunRequest::is_max_completion_tokens_Set() const{
    return m_max_completion_tokens_isSet;
}

bool OAICreateThreadAndRunRequest::is_max_completion_tokens_Valid() const{
    return m_max_completion_tokens_isValid;
}

OAITruncationObject OAICreateThreadAndRunRequest::getTruncationStrategy() const {
    return m_truncation_strategy;
}
void OAICreateThreadAndRunRequest::setTruncationStrategy(const OAITruncationObject &truncation_strategy) {
    m_truncation_strategy = truncation_strategy;
    m_truncation_strategy_isSet = true;
}

bool OAICreateThreadAndRunRequest::is_truncation_strategy_Set() const{
    return m_truncation_strategy_isSet;
}

bool OAICreateThreadAndRunRequest::is_truncation_strategy_Valid() const{
    return m_truncation_strategy_isValid;
}

OAIAssistantsApiToolChoiceOption OAICreateThreadAndRunRequest::getToolChoice() const {
    return m_tool_choice;
}
void OAICreateThreadAndRunRequest::setToolChoice(const OAIAssistantsApiToolChoiceOption &tool_choice) {
    m_tool_choice = tool_choice;
    m_tool_choice_isSet = true;
}

bool OAICreateThreadAndRunRequest::is_tool_choice_Set() const{
    return m_tool_choice_isSet;
}

bool OAICreateThreadAndRunRequest::is_tool_choice_Valid() const{
    return m_tool_choice_isValid;
}

OAIAssistantsApiResponseFormatOption OAICreateThreadAndRunRequest::getResponseFormat() const {
    return m_response_format;
}
void OAICreateThreadAndRunRequest::setResponseFormat(const OAIAssistantsApiResponseFormatOption &response_format) {
    m_response_format = response_format;
    m_response_format_isSet = true;
}

bool OAICreateThreadAndRunRequest::is_response_format_Set() const{
    return m_response_format_isSet;
}

bool OAICreateThreadAndRunRequest::is_response_format_Valid() const{
    return m_response_format_isValid;
}

bool OAICreateThreadAndRunRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assistant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thread.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_prompt_tokens_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_completion_tokens_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncation_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tool_choice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateThreadAndRunRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assistant_id_isValid && true;
}

} // namespace OpenAPI
