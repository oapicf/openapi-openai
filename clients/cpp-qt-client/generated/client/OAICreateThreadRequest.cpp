/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateThreadRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateThreadRequest::OAICreateThreadRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateThreadRequest::OAICreateThreadRequest() {
    this->initializeModel();
}

OAICreateThreadRequest::~OAICreateThreadRequest() {}

void OAICreateThreadRequest::initializeModel() {

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;
}

void OAICreateThreadRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateThreadRequest::fromJsonObject(QJsonObject json) {

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;
}

QString OAICreateThreadRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateThreadRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    return obj;
}

QList<OAICreateMessageRequest> OAICreateThreadRequest::getMessages() const {
    return m_messages;
}
void OAICreateThreadRequest::setMessages(const QList<OAICreateMessageRequest> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAICreateThreadRequest::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAICreateThreadRequest::is_messages_Valid() const{
    return m_messages_isValid;
}

OAIObject OAICreateThreadRequest::getMetadata() const {
    return m_metadata;
}
void OAICreateThreadRequest::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICreateThreadRequest::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICreateThreadRequest::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAICreateThreadRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateThreadRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
