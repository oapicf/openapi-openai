/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFineTuningApi_H
#define OAI_OAIFineTuningApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateFineTuningJobRequest.h"
#include "OAIFineTuningJob.h"
#include "OAIListFineTuningJobCheckpointsResponse.h"
#include "OAIListFineTuningJobEventsResponse.h"
#include "OAIListPaginatedFineTuningJobsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFineTuningApi : public QObject {
    Q_OBJECT

public:
    OAIFineTuningApi(const int timeOut = 0);
    ~OAIFineTuningApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  fine_tuning_job_id QString [required]
    */
    void cancelFineTuningJob(const QString &fine_tuning_job_id);

    /**
    * @param[in]  oai_create_fine_tuning_job_request OAICreateFineTuningJobRequest [required]
    */
    void createFineTuningJob(const OAICreateFineTuningJobRequest &oai_create_fine_tuning_job_request);

    /**
    * @param[in]  fine_tuning_job_id QString [required]
    * @param[in]  after QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    void listFineTuningEvents(const QString &fine_tuning_job_id, const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  fine_tuning_job_id QString [required]
    * @param[in]  after QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    void listFineTuningJobCheckpoints(const QString &fine_tuning_job_id, const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  after QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    void listPaginatedFineTuningJobs(const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  fine_tuning_job_id QString [required]
    */
    void retrieveFineTuningJob(const QString &fine_tuning_job_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelFineTuningJobCallback(OAIHttpRequestWorker *worker);
    void createFineTuningJobCallback(OAIHttpRequestWorker *worker);
    void listFineTuningEventsCallback(OAIHttpRequestWorker *worker);
    void listFineTuningJobCheckpointsCallback(OAIHttpRequestWorker *worker);
    void listPaginatedFineTuningJobsCallback(OAIHttpRequestWorker *worker);
    void retrieveFineTuningJobCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelFineTuningJobSignal(OAIFineTuningJob summary);
    void createFineTuningJobSignal(OAIFineTuningJob summary);
    void listFineTuningEventsSignal(OAIListFineTuningJobEventsResponse summary);
    void listFineTuningJobCheckpointsSignal(OAIListFineTuningJobCheckpointsResponse summary);
    void listPaginatedFineTuningJobsSignal(OAIListPaginatedFineTuningJobsResponse summary);
    void retrieveFineTuningJobSignal(OAIFineTuningJob summary);

    void cancelFineTuningJobSignalFull(OAIHttpRequestWorker *worker, OAIFineTuningJob summary);
    void createFineTuningJobSignalFull(OAIHttpRequestWorker *worker, OAIFineTuningJob summary);
    void listFineTuningEventsSignalFull(OAIHttpRequestWorker *worker, OAIListFineTuningJobEventsResponse summary);
    void listFineTuningJobCheckpointsSignalFull(OAIHttpRequestWorker *worker, OAIListFineTuningJobCheckpointsResponse summary);
    void listPaginatedFineTuningJobsSignalFull(OAIHttpRequestWorker *worker, OAIListPaginatedFineTuningJobsResponse summary);
    void retrieveFineTuningJobSignalFull(OAIHttpRequestWorker *worker, OAIFineTuningJob summary);

    Q_DECL_DEPRECATED_X("Use cancelFineTuningJobSignalError() instead")
    void cancelFineTuningJobSignalE(OAIFineTuningJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelFineTuningJobSignalError(OAIFineTuningJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFineTuningJobSignalError() instead")
    void createFineTuningJobSignalE(OAIFineTuningJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFineTuningJobSignalError(OAIFineTuningJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFineTuningEventsSignalError() instead")
    void listFineTuningEventsSignalE(OAIListFineTuningJobEventsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFineTuningEventsSignalError(OAIListFineTuningJobEventsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFineTuningJobCheckpointsSignalError() instead")
    void listFineTuningJobCheckpointsSignalE(OAIListFineTuningJobCheckpointsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFineTuningJobCheckpointsSignalError(OAIListFineTuningJobCheckpointsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPaginatedFineTuningJobsSignalError() instead")
    void listPaginatedFineTuningJobsSignalE(OAIListPaginatedFineTuningJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPaginatedFineTuningJobsSignalError(OAIListPaginatedFineTuningJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveFineTuningJobSignalError() instead")
    void retrieveFineTuningJobSignalE(OAIFineTuningJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveFineTuningJobSignalError(OAIFineTuningJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelFineTuningJobSignalErrorFull() instead")
    void cancelFineTuningJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelFineTuningJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFineTuningJobSignalErrorFull() instead")
    void createFineTuningJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFineTuningJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFineTuningEventsSignalErrorFull() instead")
    void listFineTuningEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFineTuningEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFineTuningJobCheckpointsSignalErrorFull() instead")
    void listFineTuningJobCheckpointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFineTuningJobCheckpointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPaginatedFineTuningJobsSignalErrorFull() instead")
    void listPaginatedFineTuningJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPaginatedFineTuningJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveFineTuningJobSignalErrorFull() instead")
    void retrieveFineTuningJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveFineTuningJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
