/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFineTuningJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFineTuningJob::OAIFineTuningJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFineTuningJob::OAIFineTuningJob() {
    this->initializeModel();
}

OAIFineTuningJob::~OAIFineTuningJob() {}

void OAIFineTuningJob::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_fine_tuned_model_isSet = false;
    m_fine_tuned_model_isValid = false;

    m_finished_at_isSet = false;
    m_finished_at_isValid = false;

    m_hyperparameters_isSet = false;
    m_hyperparameters_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_result_files_isSet = false;
    m_result_files_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_trained_tokens_isSet = false;
    m_trained_tokens_isValid = false;

    m_training_file_isSet = false;
    m_training_file_isValid = false;

    m_validation_file_isSet = false;
    m_validation_file_isValid = false;

    m_integrations_isSet = false;
    m_integrations_isValid = false;

    m_seed_isSet = false;
    m_seed_isValid = false;
}

void OAIFineTuningJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFineTuningJob::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_fine_tuned_model_isValid = ::OpenAPI::fromJsonValue(m_fine_tuned_model, json[QString("fine_tuned_model")]);
    m_fine_tuned_model_isSet = !json[QString("fine_tuned_model")].isNull() && m_fine_tuned_model_isValid;

    m_finished_at_isValid = ::OpenAPI::fromJsonValue(m_finished_at, json[QString("finished_at")]);
    m_finished_at_isSet = !json[QString("finished_at")].isNull() && m_finished_at_isValid;

    m_hyperparameters_isValid = ::OpenAPI::fromJsonValue(m_hyperparameters, json[QString("hyperparameters")]);
    m_hyperparameters_isSet = !json[QString("hyperparameters")].isNull() && m_hyperparameters_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("organization_id")]);
    m_organization_id_isSet = !json[QString("organization_id")].isNull() && m_organization_id_isValid;

    m_result_files_isValid = ::OpenAPI::fromJsonValue(m_result_files, json[QString("result_files")]);
    m_result_files_isSet = !json[QString("result_files")].isNull() && m_result_files_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_trained_tokens_isValid = ::OpenAPI::fromJsonValue(m_trained_tokens, json[QString("trained_tokens")]);
    m_trained_tokens_isSet = !json[QString("trained_tokens")].isNull() && m_trained_tokens_isValid;

    m_training_file_isValid = ::OpenAPI::fromJsonValue(m_training_file, json[QString("training_file")]);
    m_training_file_isSet = !json[QString("training_file")].isNull() && m_training_file_isValid;

    m_validation_file_isValid = ::OpenAPI::fromJsonValue(m_validation_file, json[QString("validation_file")]);
    m_validation_file_isSet = !json[QString("validation_file")].isNull() && m_validation_file_isValid;

    m_integrations_isValid = ::OpenAPI::fromJsonValue(m_integrations, json[QString("integrations")]);
    m_integrations_isSet = !json[QString("integrations")].isNull() && m_integrations_isValid;

    m_seed_isValid = ::OpenAPI::fromJsonValue(m_seed, json[QString("seed")]);
    m_seed_isSet = !json[QString("seed")].isNull() && m_seed_isValid;
}

QString OAIFineTuningJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFineTuningJob::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_fine_tuned_model_isSet) {
        obj.insert(QString("fine_tuned_model"), ::OpenAPI::toJsonValue(m_fine_tuned_model));
    }
    if (m_finished_at_isSet) {
        obj.insert(QString("finished_at"), ::OpenAPI::toJsonValue(m_finished_at));
    }
    if (m_hyperparameters.isSet()) {
        obj.insert(QString("hyperparameters"), ::OpenAPI::toJsonValue(m_hyperparameters));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organization_id"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    if (m_result_files.size() > 0) {
        obj.insert(QString("result_files"), ::OpenAPI::toJsonValue(m_result_files));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_trained_tokens_isSet) {
        obj.insert(QString("trained_tokens"), ::OpenAPI::toJsonValue(m_trained_tokens));
    }
    if (m_training_file_isSet) {
        obj.insert(QString("training_file"), ::OpenAPI::toJsonValue(m_training_file));
    }
    if (m_validation_file_isSet) {
        obj.insert(QString("validation_file"), ::OpenAPI::toJsonValue(m_validation_file));
    }
    if (m_integrations.size() > 0) {
        obj.insert(QString("integrations"), ::OpenAPI::toJsonValue(m_integrations));
    }
    if (m_seed_isSet) {
        obj.insert(QString("seed"), ::OpenAPI::toJsonValue(m_seed));
    }
    return obj;
}

QString OAIFineTuningJob::getId() const {
    return m_id;
}
void OAIFineTuningJob::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFineTuningJob::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFineTuningJob::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIFineTuningJob::getCreatedAt() const {
    return m_created_at;
}
void OAIFineTuningJob::setCreatedAt(const qint32 &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIFineTuningJob::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIFineTuningJob::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIFineTuningJob_error OAIFineTuningJob::getError() const {
    return m_error;
}
void OAIFineTuningJob::setError(const OAIFineTuningJob_error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIFineTuningJob::is_error_Set() const{
    return m_error_isSet;
}

bool OAIFineTuningJob::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIFineTuningJob::getFineTunedModel() const {
    return m_fine_tuned_model;
}
void OAIFineTuningJob::setFineTunedModel(const QString &fine_tuned_model) {
    m_fine_tuned_model = fine_tuned_model;
    m_fine_tuned_model_isSet = true;
}

bool OAIFineTuningJob::is_fine_tuned_model_Set() const{
    return m_fine_tuned_model_isSet;
}

bool OAIFineTuningJob::is_fine_tuned_model_Valid() const{
    return m_fine_tuned_model_isValid;
}

qint32 OAIFineTuningJob::getFinishedAt() const {
    return m_finished_at;
}
void OAIFineTuningJob::setFinishedAt(const qint32 &finished_at) {
    m_finished_at = finished_at;
    m_finished_at_isSet = true;
}

bool OAIFineTuningJob::is_finished_at_Set() const{
    return m_finished_at_isSet;
}

bool OAIFineTuningJob::is_finished_at_Valid() const{
    return m_finished_at_isValid;
}

OAIFineTuningJob_hyperparameters OAIFineTuningJob::getHyperparameters() const {
    return m_hyperparameters;
}
void OAIFineTuningJob::setHyperparameters(const OAIFineTuningJob_hyperparameters &hyperparameters) {
    m_hyperparameters = hyperparameters;
    m_hyperparameters_isSet = true;
}

bool OAIFineTuningJob::is_hyperparameters_Set() const{
    return m_hyperparameters_isSet;
}

bool OAIFineTuningJob::is_hyperparameters_Valid() const{
    return m_hyperparameters_isValid;
}

QString OAIFineTuningJob::getModel() const {
    return m_model;
}
void OAIFineTuningJob::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIFineTuningJob::is_model_Set() const{
    return m_model_isSet;
}

bool OAIFineTuningJob::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIFineTuningJob::getObject() const {
    return m_object;
}
void OAIFineTuningJob::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIFineTuningJob::is_object_Set() const{
    return m_object_isSet;
}

bool OAIFineTuningJob::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIFineTuningJob::getOrganizationId() const {
    return m_organization_id;
}
void OAIFineTuningJob::setOrganizationId(const QString &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAIFineTuningJob::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIFineTuningJob::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QList<QString> OAIFineTuningJob::getResultFiles() const {
    return m_result_files;
}
void OAIFineTuningJob::setResultFiles(const QList<QString> &result_files) {
    m_result_files = result_files;
    m_result_files_isSet = true;
}

bool OAIFineTuningJob::is_result_files_Set() const{
    return m_result_files_isSet;
}

bool OAIFineTuningJob::is_result_files_Valid() const{
    return m_result_files_isValid;
}

QString OAIFineTuningJob::getStatus() const {
    return m_status;
}
void OAIFineTuningJob::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFineTuningJob::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFineTuningJob::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIFineTuningJob::getTrainedTokens() const {
    return m_trained_tokens;
}
void OAIFineTuningJob::setTrainedTokens(const qint32 &trained_tokens) {
    m_trained_tokens = trained_tokens;
    m_trained_tokens_isSet = true;
}

bool OAIFineTuningJob::is_trained_tokens_Set() const{
    return m_trained_tokens_isSet;
}

bool OAIFineTuningJob::is_trained_tokens_Valid() const{
    return m_trained_tokens_isValid;
}

QString OAIFineTuningJob::getTrainingFile() const {
    return m_training_file;
}
void OAIFineTuningJob::setTrainingFile(const QString &training_file) {
    m_training_file = training_file;
    m_training_file_isSet = true;
}

bool OAIFineTuningJob::is_training_file_Set() const{
    return m_training_file_isSet;
}

bool OAIFineTuningJob::is_training_file_Valid() const{
    return m_training_file_isValid;
}

QString OAIFineTuningJob::getValidationFile() const {
    return m_validation_file;
}
void OAIFineTuningJob::setValidationFile(const QString &validation_file) {
    m_validation_file = validation_file;
    m_validation_file_isSet = true;
}

bool OAIFineTuningJob::is_validation_file_Set() const{
    return m_validation_file_isSet;
}

bool OAIFineTuningJob::is_validation_file_Valid() const{
    return m_validation_file_isValid;
}

QList<OAIFineTuningJob_integrations_inner> OAIFineTuningJob::getIntegrations() const {
    return m_integrations;
}
void OAIFineTuningJob::setIntegrations(const QList<OAIFineTuningJob_integrations_inner> &integrations) {
    m_integrations = integrations;
    m_integrations_isSet = true;
}

bool OAIFineTuningJob::is_integrations_Set() const{
    return m_integrations_isSet;
}

bool OAIFineTuningJob::is_integrations_Valid() const{
    return m_integrations_isValid;
}

qint32 OAIFineTuningJob::getSeed() const {
    return m_seed;
}
void OAIFineTuningJob::setSeed(const qint32 &seed) {
    m_seed = seed;
    m_seed_isSet = true;
}

bool OAIFineTuningJob::is_seed_Set() const{
    return m_seed_isSet;
}

bool OAIFineTuningJob::is_seed_Valid() const{
    return m_seed_isValid;
}

bool OAIFineTuningJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fine_tuned_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyperparameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trained_tokens_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integrations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_seed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFineTuningJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_created_at_isValid && m_error_isValid && m_fine_tuned_model_isValid && m_finished_at_isValid && m_hyperparameters_isValid && m_model_isValid && m_object_isValid && m_organization_id_isValid && m_result_files_isValid && m_status_isValid && m_trained_tokens_isValid && m_training_file_isValid && m_validation_file_isValid && m_seed_isValid && true;
}

} // namespace OpenAPI
