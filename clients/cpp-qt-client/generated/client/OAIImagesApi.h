/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImagesApi_H
#define OAI_OAIImagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateImageEditRequest_model.h"
#include "OAICreateImageRequest.h"
#include "OAIHttpFileElement.h"
#include "OAIImagesResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImagesApi : public QObject {
    Q_OBJECT

public:
    OAIImagesApi(const int timeOut = 0);
    ~OAIImagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_image_request OAICreateImageRequest [required]
    */
    virtual void createImage(const OAICreateImageRequest &oai_create_image_request);

    /**
    * @param[in]  image OAIHttpFileElement [required]
    * @param[in]  prompt QString [required]
    * @param[in]  mask OAIHttpFileElement [optional]
    * @param[in]  model OAICreateImageEditRequest_model [optional]
    * @param[in]  n qint32 [optional]
    * @param[in]  size QString [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  user QString [optional]
    */
    virtual void createImageEdit(const OAIHttpFileElement &image, const QString &prompt, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &mask = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<OAICreateImageEditRequest_model> &model = ::OpenAPI::OptionalParam<OAICreateImageEditRequest_model>(), const ::OpenAPI::OptionalParam<qint32> &n = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image OAIHttpFileElement [required]
    * @param[in]  model OAICreateImageEditRequest_model [optional]
    * @param[in]  n qint32 [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  size QString [optional]
    * @param[in]  user QString [optional]
    */
    virtual void createImageVariation(const OAIHttpFileElement &image, const ::OpenAPI::OptionalParam<OAICreateImageEditRequest_model> &model = ::OpenAPI::OptionalParam<OAICreateImageEditRequest_model>(), const ::OpenAPI::OptionalParam<qint32> &n = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createImageCallback(OAIHttpRequestWorker *worker);
    void createImageEditCallback(OAIHttpRequestWorker *worker);
    void createImageVariationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createImageSignal(OAIImagesResponse summary);
    void createImageEditSignal(OAIImagesResponse summary);
    void createImageVariationSignal(OAIImagesResponse summary);


    void createImageSignalFull(OAIHttpRequestWorker *worker, OAIImagesResponse summary);
    void createImageEditSignalFull(OAIHttpRequestWorker *worker, OAIImagesResponse summary);
    void createImageVariationSignalFull(OAIHttpRequestWorker *worker, OAIImagesResponse summary);

    Q_DECL_DEPRECATED_X("Use createImageSignalError() instead")
    void createImageSignalE(OAIImagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createImageSignalError(OAIImagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImageEditSignalError() instead")
    void createImageEditSignalE(OAIImagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createImageEditSignalError(OAIImagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImageVariationSignalError() instead")
    void createImageVariationSignalE(OAIImagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createImageVariationSignalError(OAIImagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createImageSignalErrorFull() instead")
    void createImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImageEditSignalErrorFull() instead")
    void createImageEditSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createImageEditSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImageVariationSignalErrorFull() instead")
    void createImageVariationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createImageVariationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
