/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageDeltaContentImageFileObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageDeltaContentImageFileObject::OAIMessageDeltaContentImageFileObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageDeltaContentImageFileObject::OAIMessageDeltaContentImageFileObject() {
    this->initializeModel();
}

OAIMessageDeltaContentImageFileObject::~OAIMessageDeltaContentImageFileObject() {}

void OAIMessageDeltaContentImageFileObject::initializeModel() {

    m_index_isSet = false;
    m_index_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_image_file_isSet = false;
    m_image_file_isValid = false;
}

void OAIMessageDeltaContentImageFileObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageDeltaContentImageFileObject::fromJsonObject(QJsonObject json) {

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_image_file_isValid = ::OpenAPI::fromJsonValue(m_image_file, json[QString("image_file")]);
    m_image_file_isSet = !json[QString("image_file")].isNull() && m_image_file_isValid;
}

QString OAIMessageDeltaContentImageFileObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageDeltaContentImageFileObject::asJsonObject() const {
    QJsonObject obj;
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_image_file.isSet()) {
        obj.insert(QString("image_file"), ::OpenAPI::toJsonValue(m_image_file));
    }
    return obj;
}

qint32 OAIMessageDeltaContentImageFileObject::getIndex() const {
    return m_index;
}
void OAIMessageDeltaContentImageFileObject::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIMessageDeltaContentImageFileObject::is_index_Set() const{
    return m_index_isSet;
}

bool OAIMessageDeltaContentImageFileObject::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIMessageDeltaContentImageFileObject::getType() const {
    return m_type;
}
void OAIMessageDeltaContentImageFileObject::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMessageDeltaContentImageFileObject::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMessageDeltaContentImageFileObject::is_type_Valid() const{
    return m_type_isValid;
}

OAIMessageDeltaContentImageFileObject_image_file OAIMessageDeltaContentImageFileObject::getImageFile() const {
    return m_image_file;
}
void OAIMessageDeltaContentImageFileObject::setImageFile(const OAIMessageDeltaContentImageFileObject_image_file &image_file) {
    m_image_file = image_file;
    m_image_file_isSet = true;
}

bool OAIMessageDeltaContentImageFileObject::is_image_file_Set() const{
    return m_image_file_isSet;
}

bool OAIMessageDeltaContentImageFileObject::is_image_file_Valid() const{
    return m_image_file_isValid;
}

bool OAIMessageDeltaContentImageFileObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_file.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageDeltaContentImageFileObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_index_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
