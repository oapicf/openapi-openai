/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageDeltaContentTextObject_text_annotations_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageDeltaContentTextObject_text_annotations_inner::OAIMessageDeltaContentTextObject_text_annotations_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageDeltaContentTextObject_text_annotations_inner::OAIMessageDeltaContentTextObject_text_annotations_inner() {
    this->initializeModel();
}

OAIMessageDeltaContentTextObject_text_annotations_inner::~OAIMessageDeltaContentTextObject_text_annotations_inner() {}

void OAIMessageDeltaContentTextObject_text_annotations_inner::initializeModel() {

    m_index_isSet = false;
    m_index_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_file_citation_isSet = false;
    m_file_citation_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;

    m_end_index_isSet = false;
    m_end_index_isValid = false;

    m_file_path_isSet = false;
    m_file_path_isValid = false;
}

void OAIMessageDeltaContentTextObject_text_annotations_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageDeltaContentTextObject_text_annotations_inner::fromJsonObject(QJsonObject json) {

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_file_citation_isValid = ::OpenAPI::fromJsonValue(m_file_citation, json[QString("file_citation")]);
    m_file_citation_isSet = !json[QString("file_citation")].isNull() && m_file_citation_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("start_index")]);
    m_start_index_isSet = !json[QString("start_index")].isNull() && m_start_index_isValid;

    m_end_index_isValid = ::OpenAPI::fromJsonValue(m_end_index, json[QString("end_index")]);
    m_end_index_isSet = !json[QString("end_index")].isNull() && m_end_index_isValid;

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("file_path")]);
    m_file_path_isSet = !json[QString("file_path")].isNull() && m_file_path_isValid;
}

QString OAIMessageDeltaContentTextObject_text_annotations_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageDeltaContentTextObject_text_annotations_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_file_citation.isSet()) {
        obj.insert(QString("file_citation"), ::OpenAPI::toJsonValue(m_file_citation));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("start_index"), ::OpenAPI::toJsonValue(m_start_index));
    }
    if (m_end_index_isSet) {
        obj.insert(QString("end_index"), ::OpenAPI::toJsonValue(m_end_index));
    }
    if (m_file_path.isSet()) {
        obj.insert(QString("file_path"), ::OpenAPI::toJsonValue(m_file_path));
    }
    return obj;
}

qint32 OAIMessageDeltaContentTextObject_text_annotations_inner::getIndex() const {
    return m_index;
}
void OAIMessageDeltaContentTextObject_text_annotations_inner::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIMessageDeltaContentTextObject_text_annotations_inner::is_index_Set() const{
    return m_index_isSet;
}

bool OAIMessageDeltaContentTextObject_text_annotations_inner::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIMessageDeltaContentTextObject_text_annotations_inner::getType() const {
    return m_type;
}
void OAIMessageDeltaContentTextObject_text_annotations_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMessageDeltaContentTextObject_text_annotations_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMessageDeltaContentTextObject_text_annotations_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIMessageDeltaContentTextObject_text_annotations_inner::getText() const {
    return m_text;
}
void OAIMessageDeltaContentTextObject_text_annotations_inner::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIMessageDeltaContentTextObject_text_annotations_inner::is_text_Set() const{
    return m_text_isSet;
}

bool OAIMessageDeltaContentTextObject_text_annotations_inner::is_text_Valid() const{
    return m_text_isValid;
}

OAIMessageDeltaContentTextAnnotationsFileCitationObject_file_citation OAIMessageDeltaContentTextObject_text_annotations_inner::getFileCitation() const {
    return m_file_citation;
}
void OAIMessageDeltaContentTextObject_text_annotations_inner::setFileCitation(const OAIMessageDeltaContentTextAnnotationsFileCitationObject_file_citation &file_citation) {
    m_file_citation = file_citation;
    m_file_citation_isSet = true;
}

bool OAIMessageDeltaContentTextObject_text_annotations_inner::is_file_citation_Set() const{
    return m_file_citation_isSet;
}

bool OAIMessageDeltaContentTextObject_text_annotations_inner::is_file_citation_Valid() const{
    return m_file_citation_isValid;
}

qint32 OAIMessageDeltaContentTextObject_text_annotations_inner::getStartIndex() const {
    return m_start_index;
}
void OAIMessageDeltaContentTextObject_text_annotations_inner::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAIMessageDeltaContentTextObject_text_annotations_inner::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAIMessageDeltaContentTextObject_text_annotations_inner::is_start_index_Valid() const{
    return m_start_index_isValid;
}

qint32 OAIMessageDeltaContentTextObject_text_annotations_inner::getEndIndex() const {
    return m_end_index;
}
void OAIMessageDeltaContentTextObject_text_annotations_inner::setEndIndex(const qint32 &end_index) {
    m_end_index = end_index;
    m_end_index_isSet = true;
}

bool OAIMessageDeltaContentTextObject_text_annotations_inner::is_end_index_Set() const{
    return m_end_index_isSet;
}

bool OAIMessageDeltaContentTextObject_text_annotations_inner::is_end_index_Valid() const{
    return m_end_index_isValid;
}

OAIMessageDeltaContentTextAnnotationsFilePathObject_file_path OAIMessageDeltaContentTextObject_text_annotations_inner::getFilePath() const {
    return m_file_path;
}
void OAIMessageDeltaContentTextObject_text_annotations_inner::setFilePath(const OAIMessageDeltaContentTextAnnotationsFilePathObject_file_path &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAIMessageDeltaContentTextObject_text_annotations_inner::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAIMessageDeltaContentTextObject_text_annotations_inner::is_file_path_Valid() const{
    return m_file_path_isValid;
}

bool OAIMessageDeltaContentTextObject_text_annotations_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_citation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_path.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageDeltaContentTextObject_text_annotations_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_index_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
