/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOpenAIApi_H
#define OAI_OAIOpenAIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateChatCompletionRequest.h"
#include "OAICreateChatCompletionResponse.h"
#include "OAICreateCompletionRequest.h"
#include "OAICreateCompletionResponse.h"
#include "OAICreateEditRequest.h"
#include "OAICreateEditResponse.h"
#include "OAICreateEmbeddingRequest.h"
#include "OAICreateEmbeddingResponse.h"
#include "OAICreateFineTuneRequest.h"
#include "OAICreateImageRequest.h"
#include "OAICreateModerationRequest.h"
#include "OAICreateModerationResponse.h"
#include "OAICreateTranscriptionRequest_model.h"
#include "OAICreateTranscriptionResponse.h"
#include "OAICreateTranslationResponse.h"
#include "OAIDeleteFileResponse.h"
#include "OAIDeleteModelResponse.h"
#include "OAIFineTune.h"
#include "OAIHttpFileElement.h"
#include "OAIImagesResponse.h"
#include "OAIListFilesResponse.h"
#include "OAIListFineTuneEventsResponse.h"
#include "OAIListFineTunesResponse.h"
#include "OAIListModelsResponse.h"
#include "OAIModel.h"
#include "OAIOpenAIFile.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOpenAIApi : public QObject {
    Q_OBJECT

public:
    OAIOpenAIApi(const int timeOut = 0);
    ~OAIOpenAIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  fine_tune_id QString [required]
    */
    void cancelFineTune(const QString &fine_tune_id);

    /**
    * @param[in]  oai_create_chat_completion_request OAICreateChatCompletionRequest [required]
    */
    void createChatCompletion(const OAICreateChatCompletionRequest &oai_create_chat_completion_request);

    /**
    * @param[in]  oai_create_completion_request OAICreateCompletionRequest [required]
    */
    void createCompletion(const OAICreateCompletionRequest &oai_create_completion_request);

    /**
    * @param[in]  oai_create_edit_request OAICreateEditRequest [required]
    */
    void createEdit(const OAICreateEditRequest &oai_create_edit_request);

    /**
    * @param[in]  oai_create_embedding_request OAICreateEmbeddingRequest [required]
    */
    void createEmbedding(const OAICreateEmbeddingRequest &oai_create_embedding_request);

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  purpose QString [required]
    */
    void createFile(const OAIHttpFileElement &file, const QString &purpose);

    /**
    * @param[in]  oai_create_fine_tune_request OAICreateFineTuneRequest [required]
    */
    void createFineTune(const OAICreateFineTuneRequest &oai_create_fine_tune_request);

    /**
    * @param[in]  oai_create_image_request OAICreateImageRequest [required]
    */
    void createImage(const OAICreateImageRequest &oai_create_image_request);

    /**
    * @param[in]  image OAIHttpFileElement [required]
    * @param[in]  prompt QString [required]
    * @param[in]  mask OAIHttpFileElement [optional]
    * @param[in]  n qint32 [optional]
    * @param[in]  size QString [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  user QString [optional]
    */
    void createImageEdit(const OAIHttpFileElement &image, const QString &prompt, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &mask = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<qint32> &n = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image OAIHttpFileElement [required]
    * @param[in]  n qint32 [optional]
    * @param[in]  size QString [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  user QString [optional]
    */
    void createImageVariation(const OAIHttpFileElement &image, const ::OpenAPI::OptionalParam<qint32> &n = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_moderation_request OAICreateModerationRequest [required]
    */
    void createModeration(const OAICreateModerationRequest &oai_create_moderation_request);

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  model OAICreateTranscriptionRequest_model [required]
    * @param[in]  prompt QString [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  temperature double [optional]
    * @param[in]  language QString [optional]
    */
    void createTranscription(const OAIHttpFileElement &file, const OAICreateTranscriptionRequest_model &model, const ::OpenAPI::OptionalParam<QString> &prompt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &temperature = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  model OAICreateTranscriptionRequest_model [required]
    * @param[in]  prompt QString [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  temperature double [optional]
    */
    void createTranslation(const OAIHttpFileElement &file, const OAICreateTranscriptionRequest_model &model, const ::OpenAPI::OptionalParam<QString> &prompt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &temperature = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  file_id QString [required]
    */
    void deleteFile(const QString &file_id);

    /**
    * @param[in]  model QString [required]
    */
    void deleteModel(const QString &model);

    /**
    * @param[in]  file_id QString [required]
    */
    void downloadFile(const QString &file_id);


    void listFiles();

    /**
    * @param[in]  fine_tune_id QString [required]
    * @param[in]  stream bool [optional]
    */
    void listFineTuneEvents(const QString &fine_tune_id, const ::OpenAPI::OptionalParam<bool> &stream = ::OpenAPI::OptionalParam<bool>());


    void listFineTunes();


    void listModels();

    /**
    * @param[in]  file_id QString [required]
    */
    void retrieveFile(const QString &file_id);

    /**
    * @param[in]  fine_tune_id QString [required]
    */
    void retrieveFineTune(const QString &fine_tune_id);

    /**
    * @param[in]  model QString [required]
    */
    void retrieveModel(const QString &model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelFineTuneCallback(OAIHttpRequestWorker *worker);
    void createChatCompletionCallback(OAIHttpRequestWorker *worker);
    void createCompletionCallback(OAIHttpRequestWorker *worker);
    void createEditCallback(OAIHttpRequestWorker *worker);
    void createEmbeddingCallback(OAIHttpRequestWorker *worker);
    void createFileCallback(OAIHttpRequestWorker *worker);
    void createFineTuneCallback(OAIHttpRequestWorker *worker);
    void createImageCallback(OAIHttpRequestWorker *worker);
    void createImageEditCallback(OAIHttpRequestWorker *worker);
    void createImageVariationCallback(OAIHttpRequestWorker *worker);
    void createModerationCallback(OAIHttpRequestWorker *worker);
    void createTranscriptionCallback(OAIHttpRequestWorker *worker);
    void createTranslationCallback(OAIHttpRequestWorker *worker);
    void deleteFileCallback(OAIHttpRequestWorker *worker);
    void deleteModelCallback(OAIHttpRequestWorker *worker);
    void downloadFileCallback(OAIHttpRequestWorker *worker);
    void listFilesCallback(OAIHttpRequestWorker *worker);
    void listFineTuneEventsCallback(OAIHttpRequestWorker *worker);
    void listFineTunesCallback(OAIHttpRequestWorker *worker);
    void listModelsCallback(OAIHttpRequestWorker *worker);
    void retrieveFileCallback(OAIHttpRequestWorker *worker);
    void retrieveFineTuneCallback(OAIHttpRequestWorker *worker);
    void retrieveModelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelFineTuneSignal(OAIFineTune summary);
    void createChatCompletionSignal(OAICreateChatCompletionResponse summary);
    void createCompletionSignal(OAICreateCompletionResponse summary);
    void createEditSignal(OAICreateEditResponse summary);
    void createEmbeddingSignal(OAICreateEmbeddingResponse summary);
    void createFileSignal(OAIOpenAIFile summary);
    void createFineTuneSignal(OAIFineTune summary);
    void createImageSignal(OAIImagesResponse summary);
    void createImageEditSignal(OAIImagesResponse summary);
    void createImageVariationSignal(OAIImagesResponse summary);
    void createModerationSignal(OAICreateModerationResponse summary);
    void createTranscriptionSignal(OAICreateTranscriptionResponse summary);
    void createTranslationSignal(OAICreateTranslationResponse summary);
    void deleteFileSignal(OAIDeleteFileResponse summary);
    void deleteModelSignal(OAIDeleteModelResponse summary);
    void downloadFileSignal(QString summary);
    void listFilesSignal(OAIListFilesResponse summary);
    void listFineTuneEventsSignal(OAIListFineTuneEventsResponse summary);
    void listFineTunesSignal(OAIListFineTunesResponse summary);
    void listModelsSignal(OAIListModelsResponse summary);
    void retrieveFileSignal(OAIOpenAIFile summary);
    void retrieveFineTuneSignal(OAIFineTune summary);
    void retrieveModelSignal(OAIModel summary);

    void cancelFineTuneSignalFull(OAIHttpRequestWorker *worker, OAIFineTune summary);
    void createChatCompletionSignalFull(OAIHttpRequestWorker *worker, OAICreateChatCompletionResponse summary);
    void createCompletionSignalFull(OAIHttpRequestWorker *worker, OAICreateCompletionResponse summary);
    void createEditSignalFull(OAIHttpRequestWorker *worker, OAICreateEditResponse summary);
    void createEmbeddingSignalFull(OAIHttpRequestWorker *worker, OAICreateEmbeddingResponse summary);
    void createFileSignalFull(OAIHttpRequestWorker *worker, OAIOpenAIFile summary);
    void createFineTuneSignalFull(OAIHttpRequestWorker *worker, OAIFineTune summary);
    void createImageSignalFull(OAIHttpRequestWorker *worker, OAIImagesResponse summary);
    void createImageEditSignalFull(OAIHttpRequestWorker *worker, OAIImagesResponse summary);
    void createImageVariationSignalFull(OAIHttpRequestWorker *worker, OAIImagesResponse summary);
    void createModerationSignalFull(OAIHttpRequestWorker *worker, OAICreateModerationResponse summary);
    void createTranscriptionSignalFull(OAIHttpRequestWorker *worker, OAICreateTranscriptionResponse summary);
    void createTranslationSignalFull(OAIHttpRequestWorker *worker, OAICreateTranslationResponse summary);
    void deleteFileSignalFull(OAIHttpRequestWorker *worker, OAIDeleteFileResponse summary);
    void deleteModelSignalFull(OAIHttpRequestWorker *worker, OAIDeleteModelResponse summary);
    void downloadFileSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void listFilesSignalFull(OAIHttpRequestWorker *worker, OAIListFilesResponse summary);
    void listFineTuneEventsSignalFull(OAIHttpRequestWorker *worker, OAIListFineTuneEventsResponse summary);
    void listFineTunesSignalFull(OAIHttpRequestWorker *worker, OAIListFineTunesResponse summary);
    void listModelsSignalFull(OAIHttpRequestWorker *worker, OAIListModelsResponse summary);
    void retrieveFileSignalFull(OAIHttpRequestWorker *worker, OAIOpenAIFile summary);
    void retrieveFineTuneSignalFull(OAIHttpRequestWorker *worker, OAIFineTune summary);
    void retrieveModelSignalFull(OAIHttpRequestWorker *worker, OAIModel summary);

    Q_DECL_DEPRECATED_X("Use cancelFineTuneSignalError() instead")
    void cancelFineTuneSignalE(OAIFineTune summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelFineTuneSignalError(OAIFineTune summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createChatCompletionSignalError() instead")
    void createChatCompletionSignalE(OAICreateChatCompletionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createChatCompletionSignalError(OAICreateChatCompletionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCompletionSignalError() instead")
    void createCompletionSignalE(OAICreateCompletionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCompletionSignalError(OAICreateCompletionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createEditSignalError() instead")
    void createEditSignalE(OAICreateEditResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createEditSignalError(OAICreateEditResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createEmbeddingSignalError() instead")
    void createEmbeddingSignalE(OAICreateEmbeddingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createEmbeddingSignalError(OAICreateEmbeddingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFileSignalError() instead")
    void createFileSignalE(OAIOpenAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFileSignalError(OAIOpenAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFineTuneSignalError() instead")
    void createFineTuneSignalE(OAIFineTune summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFineTuneSignalError(OAIFineTune summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImageSignalError() instead")
    void createImageSignalE(OAIImagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createImageSignalError(OAIImagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImageEditSignalError() instead")
    void createImageEditSignalE(OAIImagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createImageEditSignalError(OAIImagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImageVariationSignalError() instead")
    void createImageVariationSignalE(OAIImagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createImageVariationSignalError(OAIImagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createModerationSignalError() instead")
    void createModerationSignalE(OAICreateModerationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createModerationSignalError(OAICreateModerationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTranscriptionSignalError() instead")
    void createTranscriptionSignalE(OAICreateTranscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranscriptionSignalError(OAICreateTranscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTranslationSignalError() instead")
    void createTranslationSignalE(OAICreateTranslationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranslationSignalError(OAICreateTranslationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFileSignalError() instead")
    void deleteFileSignalE(OAIDeleteFileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFileSignalError(OAIDeleteFileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteModelSignalError() instead")
    void deleteModelSignalE(OAIDeleteModelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteModelSignalError(OAIDeleteModelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadFileSignalError() instead")
    void downloadFileSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadFileSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFilesSignalError() instead")
    void listFilesSignalE(OAIListFilesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFilesSignalError(OAIListFilesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFineTuneEventsSignalError() instead")
    void listFineTuneEventsSignalE(OAIListFineTuneEventsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFineTuneEventsSignalError(OAIListFineTuneEventsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFineTunesSignalError() instead")
    void listFineTunesSignalE(OAIListFineTunesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFineTunesSignalError(OAIListFineTunesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listModelsSignalError() instead")
    void listModelsSignalE(OAIListModelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listModelsSignalError(OAIListModelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveFileSignalError() instead")
    void retrieveFileSignalE(OAIOpenAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveFileSignalError(OAIOpenAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveFineTuneSignalError() instead")
    void retrieveFineTuneSignalE(OAIFineTune summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveFineTuneSignalError(OAIFineTune summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveModelSignalError() instead")
    void retrieveModelSignalE(OAIModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveModelSignalError(OAIModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelFineTuneSignalErrorFull() instead")
    void cancelFineTuneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelFineTuneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createChatCompletionSignalErrorFull() instead")
    void createChatCompletionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createChatCompletionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCompletionSignalErrorFull() instead")
    void createCompletionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCompletionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createEditSignalErrorFull() instead")
    void createEditSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createEditSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createEmbeddingSignalErrorFull() instead")
    void createEmbeddingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createEmbeddingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFileSignalErrorFull() instead")
    void createFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFineTuneSignalErrorFull() instead")
    void createFineTuneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFineTuneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImageSignalErrorFull() instead")
    void createImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImageEditSignalErrorFull() instead")
    void createImageEditSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createImageEditSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImageVariationSignalErrorFull() instead")
    void createImageVariationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createImageVariationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createModerationSignalErrorFull() instead")
    void createModerationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createModerationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTranscriptionSignalErrorFull() instead")
    void createTranscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTranslationSignalErrorFull() instead")
    void createTranslationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranslationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFileSignalErrorFull() instead")
    void deleteFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteModelSignalErrorFull() instead")
    void deleteModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadFileSignalErrorFull() instead")
    void downloadFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFilesSignalErrorFull() instead")
    void listFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFineTuneEventsSignalErrorFull() instead")
    void listFineTuneEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFineTuneEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFineTunesSignalErrorFull() instead")
    void listFineTunesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFineTunesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listModelsSignalErrorFull() instead")
    void listModelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listModelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveFileSignalErrorFull() instead")
    void retrieveFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveFineTuneSignalErrorFull() instead")
    void retrieveFineTuneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveFineTuneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveModelSignalErrorFull() instead")
    void retrieveModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
