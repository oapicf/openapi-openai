/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITranscriptionSegment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITranscriptionSegment::OAITranscriptionSegment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITranscriptionSegment::OAITranscriptionSegment() {
    this->initializeModel();
}

OAITranscriptionSegment::~OAITranscriptionSegment() {}

void OAITranscriptionSegment::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_seek_isSet = false;
    m_seek_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_tokens_isSet = false;
    m_tokens_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_avg_logprob_isSet = false;
    m_avg_logprob_isValid = false;

    m_compression_ratio_isSet = false;
    m_compression_ratio_isValid = false;

    m_no_speech_prob_isSet = false;
    m_no_speech_prob_isValid = false;
}

void OAITranscriptionSegment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITranscriptionSegment::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_seek_isValid = ::OpenAPI::fromJsonValue(m_seek, json[QString("seek")]);
    m_seek_isSet = !json[QString("seek")].isNull() && m_seek_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_tokens_isValid = ::OpenAPI::fromJsonValue(m_tokens, json[QString("tokens")]);
    m_tokens_isSet = !json[QString("tokens")].isNull() && m_tokens_isValid;

    m_temperature_isValid = ::OpenAPI::fromJsonValue(m_temperature, json[QString("temperature")]);
    m_temperature_isSet = !json[QString("temperature")].isNull() && m_temperature_isValid;

    m_avg_logprob_isValid = ::OpenAPI::fromJsonValue(m_avg_logprob, json[QString("avg_logprob")]);
    m_avg_logprob_isSet = !json[QString("avg_logprob")].isNull() && m_avg_logprob_isValid;

    m_compression_ratio_isValid = ::OpenAPI::fromJsonValue(m_compression_ratio, json[QString("compression_ratio")]);
    m_compression_ratio_isSet = !json[QString("compression_ratio")].isNull() && m_compression_ratio_isValid;

    m_no_speech_prob_isValid = ::OpenAPI::fromJsonValue(m_no_speech_prob, json[QString("no_speech_prob")]);
    m_no_speech_prob_isSet = !json[QString("no_speech_prob")].isNull() && m_no_speech_prob_isValid;
}

QString OAITranscriptionSegment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITranscriptionSegment::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_seek_isSet) {
        obj.insert(QString("seek"), ::OpenAPI::toJsonValue(m_seek));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_tokens.size() > 0) {
        obj.insert(QString("tokens"), ::OpenAPI::toJsonValue(m_tokens));
    }
    if (m_temperature_isSet) {
        obj.insert(QString("temperature"), ::OpenAPI::toJsonValue(m_temperature));
    }
    if (m_avg_logprob_isSet) {
        obj.insert(QString("avg_logprob"), ::OpenAPI::toJsonValue(m_avg_logprob));
    }
    if (m_compression_ratio_isSet) {
        obj.insert(QString("compression_ratio"), ::OpenAPI::toJsonValue(m_compression_ratio));
    }
    if (m_no_speech_prob_isSet) {
        obj.insert(QString("no_speech_prob"), ::OpenAPI::toJsonValue(m_no_speech_prob));
    }
    return obj;
}

qint32 OAITranscriptionSegment::getId() const {
    return m_id;
}
void OAITranscriptionSegment::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITranscriptionSegment::is_id_Set() const{
    return m_id_isSet;
}

bool OAITranscriptionSegment::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAITranscriptionSegment::getSeek() const {
    return m_seek;
}
void OAITranscriptionSegment::setSeek(const qint32 &seek) {
    m_seek = seek;
    m_seek_isSet = true;
}

bool OAITranscriptionSegment::is_seek_Set() const{
    return m_seek_isSet;
}

bool OAITranscriptionSegment::is_seek_Valid() const{
    return m_seek_isValid;
}

float OAITranscriptionSegment::getStart() const {
    return m_start;
}
void OAITranscriptionSegment::setStart(const float &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAITranscriptionSegment::is_start_Set() const{
    return m_start_isSet;
}

bool OAITranscriptionSegment::is_start_Valid() const{
    return m_start_isValid;
}

float OAITranscriptionSegment::getEnd() const {
    return m_end;
}
void OAITranscriptionSegment::setEnd(const float &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAITranscriptionSegment::is_end_Set() const{
    return m_end_isSet;
}

bool OAITranscriptionSegment::is_end_Valid() const{
    return m_end_isValid;
}

QString OAITranscriptionSegment::getText() const {
    return m_text;
}
void OAITranscriptionSegment::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAITranscriptionSegment::is_text_Set() const{
    return m_text_isSet;
}

bool OAITranscriptionSegment::is_text_Valid() const{
    return m_text_isValid;
}

QList<qint32> OAITranscriptionSegment::getTokens() const {
    return m_tokens;
}
void OAITranscriptionSegment::setTokens(const QList<qint32> &tokens) {
    m_tokens = tokens;
    m_tokens_isSet = true;
}

bool OAITranscriptionSegment::is_tokens_Set() const{
    return m_tokens_isSet;
}

bool OAITranscriptionSegment::is_tokens_Valid() const{
    return m_tokens_isValid;
}

float OAITranscriptionSegment::getTemperature() const {
    return m_temperature;
}
void OAITranscriptionSegment::setTemperature(const float &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OAITranscriptionSegment::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAITranscriptionSegment::is_temperature_Valid() const{
    return m_temperature_isValid;
}

float OAITranscriptionSegment::getAvgLogprob() const {
    return m_avg_logprob;
}
void OAITranscriptionSegment::setAvgLogprob(const float &avg_logprob) {
    m_avg_logprob = avg_logprob;
    m_avg_logprob_isSet = true;
}

bool OAITranscriptionSegment::is_avg_logprob_Set() const{
    return m_avg_logprob_isSet;
}

bool OAITranscriptionSegment::is_avg_logprob_Valid() const{
    return m_avg_logprob_isValid;
}

float OAITranscriptionSegment::getCompressionRatio() const {
    return m_compression_ratio;
}
void OAITranscriptionSegment::setCompressionRatio(const float &compression_ratio) {
    m_compression_ratio = compression_ratio;
    m_compression_ratio_isSet = true;
}

bool OAITranscriptionSegment::is_compression_ratio_Set() const{
    return m_compression_ratio_isSet;
}

bool OAITranscriptionSegment::is_compression_ratio_Valid() const{
    return m_compression_ratio_isValid;
}

float OAITranscriptionSegment::getNoSpeechProb() const {
    return m_no_speech_prob;
}
void OAITranscriptionSegment::setNoSpeechProb(const float &no_speech_prob) {
    m_no_speech_prob = no_speech_prob;
    m_no_speech_prob_isSet = true;
}

bool OAITranscriptionSegment::is_no_speech_prob_Set() const{
    return m_no_speech_prob_isSet;
}

bool OAITranscriptionSegment::is_no_speech_prob_Valid() const{
    return m_no_speech_prob_isValid;
}

bool OAITranscriptionSegment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seek_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avg_logprob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compression_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_speech_prob_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITranscriptionSegment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_seek_isValid && m_start_isValid && m_end_isValid && m_text_isValid && m_tokens_isValid && m_temperature_isValid && m_avg_logprob_isValid && m_compression_ratio_isValid && m_no_speech_prob_isValid && true;
}

} // namespace OpenAPI
