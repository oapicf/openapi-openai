/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIAssistantsApiHandler.h"
#include "OAIAssistantsApiRequest.h"

namespace OpenAPI {

OAIAssistantsApiHandler::OAIAssistantsApiHandler(){

}

OAIAssistantsApiHandler::~OAIAssistantsApiHandler(){

}

void OAIAssistantsApiHandler::cancelRun(QString thread_id, QString run_id) {
    Q_UNUSED(thread_id);
    Q_UNUSED(run_id);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIRunObject res;
        reqObj->cancelRunResponse(res);
    }
}
void OAIAssistantsApiHandler::createAssistant(OAICreateAssistantRequest oai_create_assistant_request) {
    Q_UNUSED(oai_create_assistant_request);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAssistantObject res;
        reqObj->createAssistantResponse(res);
    }
}
void OAIAssistantsApiHandler::createAssistantFile(QString assistant_id, OAICreateAssistantFileRequest oai_create_assistant_file_request) {
    Q_UNUSED(assistant_id);
    Q_UNUSED(oai_create_assistant_file_request);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAssistantFileObject res;
        reqObj->createAssistantFileResponse(res);
    }
}
void OAIAssistantsApiHandler::createMessage(QString thread_id, OAICreateMessageRequest oai_create_message_request) {
    Q_UNUSED(thread_id);
    Q_UNUSED(oai_create_message_request);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIMessageObject res;
        reqObj->createMessageResponse(res);
    }
}
void OAIAssistantsApiHandler::createRun(QString thread_id, OAICreateRunRequest oai_create_run_request) {
    Q_UNUSED(thread_id);
    Q_UNUSED(oai_create_run_request);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIRunObject res;
        reqObj->createRunResponse(res);
    }
}
void OAIAssistantsApiHandler::createThread(OAICreateThreadRequest oai_create_thread_request) {
    Q_UNUSED(oai_create_thread_request);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIThreadObject res;
        reqObj->createThreadResponse(res);
    }
}
void OAIAssistantsApiHandler::createThreadAndRun(OAICreateThreadAndRunRequest oai_create_thread_and_run_request) {
    Q_UNUSED(oai_create_thread_and_run_request);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIRunObject res;
        reqObj->createThreadAndRunResponse(res);
    }
}
void OAIAssistantsApiHandler::deleteAssistant(QString assistant_id) {
    Q_UNUSED(assistant_id);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIDeleteAssistantResponse res;
        reqObj->deleteAssistantResponse(res);
    }
}
void OAIAssistantsApiHandler::deleteAssistantFile(QString assistant_id, QString file_id) {
    Q_UNUSED(assistant_id);
    Q_UNUSED(file_id);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIDeleteAssistantFileResponse res;
        reqObj->deleteAssistantFileResponse(res);
    }
}
void OAIAssistantsApiHandler::deleteThread(QString thread_id) {
    Q_UNUSED(thread_id);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIDeleteThreadResponse res;
        reqObj->deleteThreadResponse(res);
    }
}
void OAIAssistantsApiHandler::getAssistant(QString assistant_id) {
    Q_UNUSED(assistant_id);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAssistantObject res;
        reqObj->getAssistantResponse(res);
    }
}
void OAIAssistantsApiHandler::getAssistantFile(QString assistant_id, QString file_id) {
    Q_UNUSED(assistant_id);
    Q_UNUSED(file_id);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAssistantFileObject res;
        reqObj->getAssistantFileResponse(res);
    }
}
void OAIAssistantsApiHandler::getMessage(QString thread_id, QString message_id) {
    Q_UNUSED(thread_id);
    Q_UNUSED(message_id);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIMessageObject res;
        reqObj->getMessageResponse(res);
    }
}
void OAIAssistantsApiHandler::getMessageFile(QString thread_id, QString message_id, QString file_id) {
    Q_UNUSED(thread_id);
    Q_UNUSED(message_id);
    Q_UNUSED(file_id);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIMessageFileObject res;
        reqObj->getMessageFileResponse(res);
    }
}
void OAIAssistantsApiHandler::getRun(QString thread_id, QString run_id) {
    Q_UNUSED(thread_id);
    Q_UNUSED(run_id);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIRunObject res;
        reqObj->getRunResponse(res);
    }
}
void OAIAssistantsApiHandler::getRunStep(QString thread_id, QString run_id, QString step_id) {
    Q_UNUSED(thread_id);
    Q_UNUSED(run_id);
    Q_UNUSED(step_id);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIRunStepObject res;
        reqObj->getRunStepResponse(res);
    }
}
void OAIAssistantsApiHandler::getThread(QString thread_id) {
    Q_UNUSED(thread_id);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIThreadObject res;
        reqObj->getThreadResponse(res);
    }
}
void OAIAssistantsApiHandler::listAssistantFiles(QString assistant_id, qint32 limit, QString order, QString after, QString before) {
    Q_UNUSED(assistant_id);
    Q_UNUSED(limit);
    Q_UNUSED(order);
    Q_UNUSED(after);
    Q_UNUSED(before);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIListAssistantFilesResponse res;
        reqObj->listAssistantFilesResponse(res);
    }
}
void OAIAssistantsApiHandler::listAssistants(qint32 limit, QString order, QString after, QString before) {
    Q_UNUSED(limit);
    Q_UNUSED(order);
    Q_UNUSED(after);
    Q_UNUSED(before);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIListAssistantsResponse res;
        reqObj->listAssistantsResponse(res);
    }
}
void OAIAssistantsApiHandler::listMessageFiles(QString thread_id, QString message_id, qint32 limit, QString order, QString after, QString before) {
    Q_UNUSED(thread_id);
    Q_UNUSED(message_id);
    Q_UNUSED(limit);
    Q_UNUSED(order);
    Q_UNUSED(after);
    Q_UNUSED(before);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIListMessageFilesResponse res;
        reqObj->listMessageFilesResponse(res);
    }
}
void OAIAssistantsApiHandler::listMessages(QString thread_id, qint32 limit, QString order, QString after, QString before, QString run_id) {
    Q_UNUSED(thread_id);
    Q_UNUSED(limit);
    Q_UNUSED(order);
    Q_UNUSED(after);
    Q_UNUSED(before);
    Q_UNUSED(run_id);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIListMessagesResponse res;
        reqObj->listMessagesResponse(res);
    }
}
void OAIAssistantsApiHandler::listRunSteps(QString thread_id, QString run_id, qint32 limit, QString order, QString after, QString before) {
    Q_UNUSED(thread_id);
    Q_UNUSED(run_id);
    Q_UNUSED(limit);
    Q_UNUSED(order);
    Q_UNUSED(after);
    Q_UNUSED(before);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIListRunStepsResponse res;
        reqObj->listRunStepsResponse(res);
    }
}
void OAIAssistantsApiHandler::listRuns(QString thread_id, qint32 limit, QString order, QString after, QString before) {
    Q_UNUSED(thread_id);
    Q_UNUSED(limit);
    Q_UNUSED(order);
    Q_UNUSED(after);
    Q_UNUSED(before);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIListRunsResponse res;
        reqObj->listRunsResponse(res);
    }
}
void OAIAssistantsApiHandler::modifyAssistant(QString assistant_id, OAIModifyAssistantRequest oai_modify_assistant_request) {
    Q_UNUSED(assistant_id);
    Q_UNUSED(oai_modify_assistant_request);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAssistantObject res;
        reqObj->modifyAssistantResponse(res);
    }
}
void OAIAssistantsApiHandler::modifyMessage(QString thread_id, QString message_id, OAIModifyMessageRequest oai_modify_message_request) {
    Q_UNUSED(thread_id);
    Q_UNUSED(message_id);
    Q_UNUSED(oai_modify_message_request);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIMessageObject res;
        reqObj->modifyMessageResponse(res);
    }
}
void OAIAssistantsApiHandler::modifyRun(QString thread_id, QString run_id, OAIModifyRunRequest oai_modify_run_request) {
    Q_UNUSED(thread_id);
    Q_UNUSED(run_id);
    Q_UNUSED(oai_modify_run_request);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIRunObject res;
        reqObj->modifyRunResponse(res);
    }
}
void OAIAssistantsApiHandler::modifyThread(QString thread_id, OAIModifyThreadRequest oai_modify_thread_request) {
    Q_UNUSED(thread_id);
    Q_UNUSED(oai_modify_thread_request);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIThreadObject res;
        reqObj->modifyThreadResponse(res);
    }
}
void OAIAssistantsApiHandler::submitToolOuputsToRun(QString thread_id, QString run_id, OAISubmitToolOutputsRunRequest oai_submit_tool_outputs_run_request) {
    Q_UNUSED(thread_id);
    Q_UNUSED(run_id);
    Q_UNUSED(oai_submit_tool_outputs_run_request);
    auto reqObj = qobject_cast<OAIAssistantsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIRunObject res;
        reqObj->submitToolOuputsToRunResponse(res);
    }
}


}
