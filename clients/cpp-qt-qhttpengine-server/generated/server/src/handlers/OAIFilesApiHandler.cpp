/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIFilesApiHandler.h"
#include "OAIFilesApiRequest.h"

namespace OpenAPI {

OAIFilesApiHandler::OAIFilesApiHandler(){

}

OAIFilesApiHandler::~OAIFilesApiHandler(){

}

void OAIFilesApiHandler::createFile(OAIHttpFileElement file, QString purpose) {
    Q_UNUSED(file);
    Q_UNUSED(purpose);
    auto reqObj = qobject_cast<OAIFilesApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIOpenAIFile res;
        reqObj->createFileResponse(res);
    }
}
void OAIFilesApiHandler::deleteFile(QString file_id) {
    Q_UNUSED(file_id);
    auto reqObj = qobject_cast<OAIFilesApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIDeleteFileResponse res;
        reqObj->deleteFileResponse(res);
    }
}
void OAIFilesApiHandler::downloadFile(QString file_id) {
    Q_UNUSED(file_id);
    auto reqObj = qobject_cast<OAIFilesApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        QString res;
        reqObj->downloadFileResponse(res);
    }
}
void OAIFilesApiHandler::listFiles(QString purpose) {
    Q_UNUSED(purpose);
    auto reqObj = qobject_cast<OAIFilesApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIListFilesResponse res;
        reqObj->listFilesResponse(res);
    }
}
void OAIFilesApiHandler::retrieveFile(QString file_id) {
    Q_UNUSED(file_id);
    auto reqObj = qobject_cast<OAIFilesApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIOpenAIFile res;
        reqObj->retrieveFileResponse(res);
    }
}


}
