/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIOpenAIApiHandler.h"
#include "OAIOpenAIApiRequest.h"

namespace OpenAPI {

OAIOpenAIApiHandler::OAIOpenAIApiHandler(){

}

OAIOpenAIApiHandler::~OAIOpenAIApiHandler(){

}

void OAIOpenAIApiHandler::cancelFineTune(QString fine_tune_id) {
    Q_UNUSED(fine_tune_id);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIFineTune res;
        reqObj->cancelFineTuneResponse(res);
    }
}
void OAIOpenAIApiHandler::createChatCompletion(OAICreateChatCompletionRequest oai_create_chat_completion_request) {
    Q_UNUSED(oai_create_chat_completion_request);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAICreateChatCompletionResponse res;
        reqObj->createChatCompletionResponse(res);
    }
}
void OAIOpenAIApiHandler::createCompletion(OAICreateCompletionRequest oai_create_completion_request) {
    Q_UNUSED(oai_create_completion_request);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAICreateCompletionResponse res;
        reqObj->createCompletionResponse(res);
    }
}
void OAIOpenAIApiHandler::createEdit(OAICreateEditRequest oai_create_edit_request) {
    Q_UNUSED(oai_create_edit_request);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAICreateEditResponse res;
        reqObj->createEditResponse(res);
    }
}
void OAIOpenAIApiHandler::createEmbedding(OAICreateEmbeddingRequest oai_create_embedding_request) {
    Q_UNUSED(oai_create_embedding_request);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAICreateEmbeddingResponse res;
        reqObj->createEmbeddingResponse(res);
    }
}
void OAIOpenAIApiHandler::createFile(OAIHttpFileElement file, QString purpose) {
    Q_UNUSED(file);
    Q_UNUSED(purpose);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIOpenAIFile res;
        reqObj->createFileResponse(res);
    }
}
void OAIOpenAIApiHandler::createFineTune(OAICreateFineTuneRequest oai_create_fine_tune_request) {
    Q_UNUSED(oai_create_fine_tune_request);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIFineTune res;
        reqObj->createFineTuneResponse(res);
    }
}
void OAIOpenAIApiHandler::createImage(OAICreateImageRequest oai_create_image_request) {
    Q_UNUSED(oai_create_image_request);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIImagesResponse res;
        reqObj->createImageResponse(res);
    }
}
void OAIOpenAIApiHandler::createImageEdit(OAIHttpFileElement image, QString prompt, OAIHttpFileElement mask, qint32 n, QString size, QString response_format, QString user) {
    Q_UNUSED(image);
    Q_UNUSED(prompt);
    Q_UNUSED(mask);
    Q_UNUSED(n);
    Q_UNUSED(size);
    Q_UNUSED(response_format);
    Q_UNUSED(user);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIImagesResponse res;
        reqObj->createImageEditResponse(res);
    }
}
void OAIOpenAIApiHandler::createImageVariation(OAIHttpFileElement image, qint32 n, QString size, QString response_format, QString user) {
    Q_UNUSED(image);
    Q_UNUSED(n);
    Q_UNUSED(size);
    Q_UNUSED(response_format);
    Q_UNUSED(user);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIImagesResponse res;
        reqObj->createImageVariationResponse(res);
    }
}
void OAIOpenAIApiHandler::createModeration(OAICreateModerationRequest oai_create_moderation_request) {
    Q_UNUSED(oai_create_moderation_request);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAICreateModerationResponse res;
        reqObj->createModerationResponse(res);
    }
}
void OAIOpenAIApiHandler::createTranscription(OAIHttpFileElement file, OAICreateTranscriptionRequest_model model, QString prompt, QString response_format, double temperature, QString language) {
    Q_UNUSED(file);
    Q_UNUSED(model);
    Q_UNUSED(prompt);
    Q_UNUSED(response_format);
    Q_UNUSED(temperature);
    Q_UNUSED(language);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAICreateTranscriptionResponse res;
        reqObj->createTranscriptionResponse(res);
    }
}
void OAIOpenAIApiHandler::createTranslation(OAIHttpFileElement file, OAICreateTranscriptionRequest_model model, QString prompt, QString response_format, double temperature) {
    Q_UNUSED(file);
    Q_UNUSED(model);
    Q_UNUSED(prompt);
    Q_UNUSED(response_format);
    Q_UNUSED(temperature);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAICreateTranslationResponse res;
        reqObj->createTranslationResponse(res);
    }
}
void OAIOpenAIApiHandler::deleteFile(QString file_id) {
    Q_UNUSED(file_id);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIDeleteFileResponse res;
        reqObj->deleteFileResponse(res);
    }
}
void OAIOpenAIApiHandler::deleteModel(QString model) {
    Q_UNUSED(model);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIDeleteModelResponse res;
        reqObj->deleteModelResponse(res);
    }
}
void OAIOpenAIApiHandler::downloadFile(QString file_id) {
    Q_UNUSED(file_id);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        QString res;
        reqObj->downloadFileResponse(res);
    }
}
void OAIOpenAIApiHandler::listFiles() {
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIListFilesResponse res;
        reqObj->listFilesResponse(res);
    }
}
void OAIOpenAIApiHandler::listFineTuneEvents(QString fine_tune_id, bool stream) {
    Q_UNUSED(fine_tune_id);
    Q_UNUSED(stream);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIListFineTuneEventsResponse res;
        reqObj->listFineTuneEventsResponse(res);
    }
}
void OAIOpenAIApiHandler::listFineTunes() {
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIListFineTunesResponse res;
        reqObj->listFineTunesResponse(res);
    }
}
void OAIOpenAIApiHandler::listModels() {
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIListModelsResponse res;
        reqObj->listModelsResponse(res);
    }
}
void OAIOpenAIApiHandler::retrieveFile(QString file_id) {
    Q_UNUSED(file_id);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIOpenAIFile res;
        reqObj->retrieveFileResponse(res);
    }
}
void OAIOpenAIApiHandler::retrieveFineTune(QString fine_tune_id) {
    Q_UNUSED(fine_tune_id);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIFineTune res;
        reqObj->retrieveFineTuneResponse(res);
    }
}
void OAIOpenAIApiHandler::retrieveModel(QString model) {
    Q_UNUSED(model);
    auto reqObj = qobject_cast<OAIOpenAIApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIModel res;
        reqObj->retrieveModelResponse(res);
    }
}


}
