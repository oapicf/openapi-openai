/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChatCompletionRequestMessageContentPartImage_image_url.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChatCompletionRequestMessageContentPartImage_image_url::OAIChatCompletionRequestMessageContentPartImage_image_url(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChatCompletionRequestMessageContentPartImage_image_url::OAIChatCompletionRequestMessageContentPartImage_image_url() {
    this->initializeModel();
}

OAIChatCompletionRequestMessageContentPartImage_image_url::~OAIChatCompletionRequestMessageContentPartImage_image_url() {}

void OAIChatCompletionRequestMessageContentPartImage_image_url::initializeModel() {

    m_url_isSet = false;
    m_url_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;
}

void OAIChatCompletionRequestMessageContentPartImage_image_url::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChatCompletionRequestMessageContentPartImage_image_url::fromJsonObject(QJsonObject json) {

    m_url_isValid = ::OpenAPI::fromJsonValue(url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;
}

QString OAIChatCompletionRequestMessageContentPartImage_image_url::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChatCompletionRequestMessageContentPartImage_image_url::asJsonObject() const {
    QJsonObject obj;
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(url));
    }
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(detail));
    }
    return obj;
}

QString OAIChatCompletionRequestMessageContentPartImage_image_url::getUrl() const {
    return url;
}
void OAIChatCompletionRequestMessageContentPartImage_image_url::setUrl(const QString &url) {
    this->url = url;
    this->m_url_isSet = true;
}

bool OAIChatCompletionRequestMessageContentPartImage_image_url::is_url_Set() const{
    return m_url_isSet;
}

bool OAIChatCompletionRequestMessageContentPartImage_image_url::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIChatCompletionRequestMessageContentPartImage_image_url::getDetail() const {
    return detail;
}
void OAIChatCompletionRequestMessageContentPartImage_image_url::setDetail(const QString &detail) {
    this->detail = detail;
    this->m_detail_isSet = true;
}

bool OAIChatCompletionRequestMessageContentPartImage_image_url::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIChatCompletionRequestMessageContentPartImage_image_url::is_detail_Valid() const{
    return m_detail_isValid;
}

bool OAIChatCompletionRequestMessageContentPartImage_image_url::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChatCompletionRequestMessageContentPartImage_image_url::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && true;
}

} // namespace OpenAPI
