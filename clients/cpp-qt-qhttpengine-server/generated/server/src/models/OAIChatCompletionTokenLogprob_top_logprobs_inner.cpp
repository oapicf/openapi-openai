/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChatCompletionTokenLogprob_top_logprobs_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChatCompletionTokenLogprob_top_logprobs_inner::OAIChatCompletionTokenLogprob_top_logprobs_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChatCompletionTokenLogprob_top_logprobs_inner::OAIChatCompletionTokenLogprob_top_logprobs_inner() {
    this->initializeModel();
}

OAIChatCompletionTokenLogprob_top_logprobs_inner::~OAIChatCompletionTokenLogprob_top_logprobs_inner() {}

void OAIChatCompletionTokenLogprob_top_logprobs_inner::initializeModel() {

    m_token_isSet = false;
    m_token_isValid = false;

    m_logprob_isSet = false;
    m_logprob_isValid = false;

    m_bytes_isSet = false;
    m_bytes_isValid = false;
}

void OAIChatCompletionTokenLogprob_top_logprobs_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChatCompletionTokenLogprob_top_logprobs_inner::fromJsonObject(QJsonObject json) {

    m_token_isValid = ::OpenAPI::fromJsonValue(token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_logprob_isValid = ::OpenAPI::fromJsonValue(logprob, json[QString("logprob")]);
    m_logprob_isSet = !json[QString("logprob")].isNull() && m_logprob_isValid;

    m_bytes_isValid = ::OpenAPI::fromJsonValue(bytes, json[QString("bytes")]);
    m_bytes_isSet = !json[QString("bytes")].isNull() && m_bytes_isValid;
}

QString OAIChatCompletionTokenLogprob_top_logprobs_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChatCompletionTokenLogprob_top_logprobs_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(token));
    }
    if (m_logprob_isSet) {
        obj.insert(QString("logprob"), ::OpenAPI::toJsonValue(logprob));
    }
    if (bytes.size() > 0) {
        obj.insert(QString("bytes"), ::OpenAPI::toJsonValue(bytes));
    }
    return obj;
}

QString OAIChatCompletionTokenLogprob_top_logprobs_inner::getToken() const {
    return token;
}
void OAIChatCompletionTokenLogprob_top_logprobs_inner::setToken(const QString &token) {
    this->token = token;
    this->m_token_isSet = true;
}

bool OAIChatCompletionTokenLogprob_top_logprobs_inner::is_token_Set() const{
    return m_token_isSet;
}

bool OAIChatCompletionTokenLogprob_top_logprobs_inner::is_token_Valid() const{
    return m_token_isValid;
}

double OAIChatCompletionTokenLogprob_top_logprobs_inner::getLogprob() const {
    return logprob;
}
void OAIChatCompletionTokenLogprob_top_logprobs_inner::setLogprob(const double &logprob) {
    this->logprob = logprob;
    this->m_logprob_isSet = true;
}

bool OAIChatCompletionTokenLogprob_top_logprobs_inner::is_logprob_Set() const{
    return m_logprob_isSet;
}

bool OAIChatCompletionTokenLogprob_top_logprobs_inner::is_logprob_Valid() const{
    return m_logprob_isValid;
}

QList<qint32> OAIChatCompletionTokenLogprob_top_logprobs_inner::getBytes() const {
    return bytes;
}
void OAIChatCompletionTokenLogprob_top_logprobs_inner::setBytes(const QList<qint32> &bytes) {
    this->bytes = bytes;
    this->m_bytes_isSet = true;
}

bool OAIChatCompletionTokenLogprob_top_logprobs_inner::is_bytes_Set() const{
    return m_bytes_isSet;
}

bool OAIChatCompletionTokenLogprob_top_logprobs_inner::is_bytes_Valid() const{
    return m_bytes_isValid;
}

bool OAIChatCompletionTokenLogprob_top_logprobs_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logprob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (bytes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChatCompletionTokenLogprob_top_logprobs_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_token_isValid && m_logprob_isValid && m_bytes_isValid && true;
}

} // namespace OpenAPI
