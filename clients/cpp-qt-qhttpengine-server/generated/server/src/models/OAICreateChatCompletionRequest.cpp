/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateChatCompletionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateChatCompletionRequest::OAICreateChatCompletionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateChatCompletionRequest::OAICreateChatCompletionRequest() {
    this->initializeModel();
}

OAICreateChatCompletionRequest::~OAICreateChatCompletionRequest() {}

void OAICreateChatCompletionRequest::initializeModel() {

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_frequency_penalty_isSet = false;
    m_frequency_penalty_isValid = false;

    m_logit_bias_isSet = false;
    m_logit_bias_isValid = false;

    m_logprobs_isSet = false;
    m_logprobs_isValid = false;

    m_top_logprobs_isSet = false;
    m_top_logprobs_isValid = false;

    m_max_tokens_isSet = false;
    m_max_tokens_isValid = false;

    m_n_isSet = false;
    m_n_isValid = false;

    m_presence_penalty_isSet = false;
    m_presence_penalty_isValid = false;

    m_response_format_isSet = false;
    m_response_format_isValid = false;

    m_seed_isSet = false;
    m_seed_isValid = false;

    m_stop_isSet = false;
    m_stop_isValid = false;

    m_stream_isSet = false;
    m_stream_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_top_p_isSet = false;
    m_top_p_isValid = false;

    m_tools_isSet = false;
    m_tools_isValid = false;

    m_tool_choice_isSet = false;
    m_tool_choice_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_function_call_isSet = false;
    m_function_call_isValid = false;

    m_functions_isSet = false;
    m_functions_isValid = false;
}

void OAICreateChatCompletionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateChatCompletionRequest::fromJsonObject(QJsonObject json) {

    m_messages_isValid = ::OpenAPI::fromJsonValue(messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_frequency_penalty_isValid = ::OpenAPI::fromJsonValue(frequency_penalty, json[QString("frequency_penalty")]);
    m_frequency_penalty_isSet = !json[QString("frequency_penalty")].isNull() && m_frequency_penalty_isValid;

    m_logit_bias_isValid = ::OpenAPI::fromJsonValue(logit_bias, json[QString("logit_bias")]);
    m_logit_bias_isSet = !json[QString("logit_bias")].isNull() && m_logit_bias_isValid;

    m_logprobs_isValid = ::OpenAPI::fromJsonValue(logprobs, json[QString("logprobs")]);
    m_logprobs_isSet = !json[QString("logprobs")].isNull() && m_logprobs_isValid;

    m_top_logprobs_isValid = ::OpenAPI::fromJsonValue(top_logprobs, json[QString("top_logprobs")]);
    m_top_logprobs_isSet = !json[QString("top_logprobs")].isNull() && m_top_logprobs_isValid;

    m_max_tokens_isValid = ::OpenAPI::fromJsonValue(max_tokens, json[QString("max_tokens")]);
    m_max_tokens_isSet = !json[QString("max_tokens")].isNull() && m_max_tokens_isValid;

    m_n_isValid = ::OpenAPI::fromJsonValue(n, json[QString("n")]);
    m_n_isSet = !json[QString("n")].isNull() && m_n_isValid;

    m_presence_penalty_isValid = ::OpenAPI::fromJsonValue(presence_penalty, json[QString("presence_penalty")]);
    m_presence_penalty_isSet = !json[QString("presence_penalty")].isNull() && m_presence_penalty_isValid;

    m_response_format_isValid = ::OpenAPI::fromJsonValue(response_format, json[QString("response_format")]);
    m_response_format_isSet = !json[QString("response_format")].isNull() && m_response_format_isValid;

    m_seed_isValid = ::OpenAPI::fromJsonValue(seed, json[QString("seed")]);
    m_seed_isSet = !json[QString("seed")].isNull() && m_seed_isValid;

    m_stop_isValid = ::OpenAPI::fromJsonValue(stop, json[QString("stop")]);
    m_stop_isSet = !json[QString("stop")].isNull() && m_stop_isValid;

    m_stream_isValid = ::OpenAPI::fromJsonValue(stream, json[QString("stream")]);
    m_stream_isSet = !json[QString("stream")].isNull() && m_stream_isValid;

    m_temperature_isValid = ::OpenAPI::fromJsonValue(temperature, json[QString("temperature")]);
    m_temperature_isSet = !json[QString("temperature")].isNull() && m_temperature_isValid;

    m_top_p_isValid = ::OpenAPI::fromJsonValue(top_p, json[QString("top_p")]);
    m_top_p_isSet = !json[QString("top_p")].isNull() && m_top_p_isValid;

    m_tools_isValid = ::OpenAPI::fromJsonValue(tools, json[QString("tools")]);
    m_tools_isSet = !json[QString("tools")].isNull() && m_tools_isValid;

    m_tool_choice_isValid = ::OpenAPI::fromJsonValue(tool_choice, json[QString("tool_choice")]);
    m_tool_choice_isSet = !json[QString("tool_choice")].isNull() && m_tool_choice_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_function_call_isValid = ::OpenAPI::fromJsonValue(function_call, json[QString("function_call")]);
    m_function_call_isSet = !json[QString("function_call")].isNull() && m_function_call_isValid;

    m_functions_isValid = ::OpenAPI::fromJsonValue(functions, json[QString("functions")]);
    m_functions_isSet = !json[QString("functions")].isNull() && m_functions_isValid;
}

QString OAICreateChatCompletionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateChatCompletionRequest::asJsonObject() const {
    QJsonObject obj;
    if (messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(messages));
    }
    if (model.isSet()) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(model));
    }
    if (m_frequency_penalty_isSet) {
        obj.insert(QString("frequency_penalty"), ::OpenAPI::toJsonValue(frequency_penalty));
    }
    if (logit_bias.size() > 0) {
        obj.insert(QString("logit_bias"), ::OpenAPI::toJsonValue(logit_bias));
    }
    if (m_logprobs_isSet) {
        obj.insert(QString("logprobs"), ::OpenAPI::toJsonValue(logprobs));
    }
    if (m_top_logprobs_isSet) {
        obj.insert(QString("top_logprobs"), ::OpenAPI::toJsonValue(top_logprobs));
    }
    if (m_max_tokens_isSet) {
        obj.insert(QString("max_tokens"), ::OpenAPI::toJsonValue(max_tokens));
    }
    if (m_n_isSet) {
        obj.insert(QString("n"), ::OpenAPI::toJsonValue(n));
    }
    if (m_presence_penalty_isSet) {
        obj.insert(QString("presence_penalty"), ::OpenAPI::toJsonValue(presence_penalty));
    }
    if (response_format.isSet()) {
        obj.insert(QString("response_format"), ::OpenAPI::toJsonValue(response_format));
    }
    if (m_seed_isSet) {
        obj.insert(QString("seed"), ::OpenAPI::toJsonValue(seed));
    }
    if (stop.isSet()) {
        obj.insert(QString("stop"), ::OpenAPI::toJsonValue(stop));
    }
    if (m_stream_isSet) {
        obj.insert(QString("stream"), ::OpenAPI::toJsonValue(stream));
    }
    if (m_temperature_isSet) {
        obj.insert(QString("temperature"), ::OpenAPI::toJsonValue(temperature));
    }
    if (m_top_p_isSet) {
        obj.insert(QString("top_p"), ::OpenAPI::toJsonValue(top_p));
    }
    if (tools.size() > 0) {
        obj.insert(QString("tools"), ::OpenAPI::toJsonValue(tools));
    }
    if (tool_choice.isSet()) {
        obj.insert(QString("tool_choice"), ::OpenAPI::toJsonValue(tool_choice));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(user));
    }
    if (function_call.isSet()) {
        obj.insert(QString("function_call"), ::OpenAPI::toJsonValue(function_call));
    }
    if (functions.size() > 0) {
        obj.insert(QString("functions"), ::OpenAPI::toJsonValue(functions));
    }
    return obj;
}

QList<OAIChatCompletionRequestMessage> OAICreateChatCompletionRequest::getMessages() const {
    return messages;
}
void OAICreateChatCompletionRequest::setMessages(const QList<OAIChatCompletionRequestMessage> &messages) {
    this->messages = messages;
    this->m_messages_isSet = true;
}

bool OAICreateChatCompletionRequest::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAICreateChatCompletionRequest::is_messages_Valid() const{
    return m_messages_isValid;
}

OAICreateChatCompletionRequest_model OAICreateChatCompletionRequest::getModel() const {
    return model;
}
void OAICreateChatCompletionRequest::setModel(const OAICreateChatCompletionRequest_model &model) {
    this->model = model;
    this->m_model_isSet = true;
}

bool OAICreateChatCompletionRequest::is_model_Set() const{
    return m_model_isSet;
}

bool OAICreateChatCompletionRequest::is_model_Valid() const{
    return m_model_isValid;
}

double OAICreateChatCompletionRequest::getFrequencyPenalty() const {
    return frequency_penalty;
}
void OAICreateChatCompletionRequest::setFrequencyPenalty(const double &frequency_penalty) {
    this->frequency_penalty = frequency_penalty;
    this->m_frequency_penalty_isSet = true;
}

bool OAICreateChatCompletionRequest::is_frequency_penalty_Set() const{
    return m_frequency_penalty_isSet;
}

bool OAICreateChatCompletionRequest::is_frequency_penalty_Valid() const{
    return m_frequency_penalty_isValid;
}

QMap<QString, qint32> OAICreateChatCompletionRequest::getLogitBias() const {
    return logit_bias;
}
void OAICreateChatCompletionRequest::setLogitBias(const QMap<QString, qint32> &logit_bias) {
    this->logit_bias = logit_bias;
    this->m_logit_bias_isSet = true;
}

bool OAICreateChatCompletionRequest::is_logit_bias_Set() const{
    return m_logit_bias_isSet;
}

bool OAICreateChatCompletionRequest::is_logit_bias_Valid() const{
    return m_logit_bias_isValid;
}

bool OAICreateChatCompletionRequest::isLogprobs() const {
    return logprobs;
}
void OAICreateChatCompletionRequest::setLogprobs(const bool &logprobs) {
    this->logprobs = logprobs;
    this->m_logprobs_isSet = true;
}

bool OAICreateChatCompletionRequest::is_logprobs_Set() const{
    return m_logprobs_isSet;
}

bool OAICreateChatCompletionRequest::is_logprobs_Valid() const{
    return m_logprobs_isValid;
}

qint32 OAICreateChatCompletionRequest::getTopLogprobs() const {
    return top_logprobs;
}
void OAICreateChatCompletionRequest::setTopLogprobs(const qint32 &top_logprobs) {
    this->top_logprobs = top_logprobs;
    this->m_top_logprobs_isSet = true;
}

bool OAICreateChatCompletionRequest::is_top_logprobs_Set() const{
    return m_top_logprobs_isSet;
}

bool OAICreateChatCompletionRequest::is_top_logprobs_Valid() const{
    return m_top_logprobs_isValid;
}

qint32 OAICreateChatCompletionRequest::getMaxTokens() const {
    return max_tokens;
}
void OAICreateChatCompletionRequest::setMaxTokens(const qint32 &max_tokens) {
    this->max_tokens = max_tokens;
    this->m_max_tokens_isSet = true;
}

bool OAICreateChatCompletionRequest::is_max_tokens_Set() const{
    return m_max_tokens_isSet;
}

bool OAICreateChatCompletionRequest::is_max_tokens_Valid() const{
    return m_max_tokens_isValid;
}

qint32 OAICreateChatCompletionRequest::getN() const {
    return n;
}
void OAICreateChatCompletionRequest::setN(const qint32 &n) {
    this->n = n;
    this->m_n_isSet = true;
}

bool OAICreateChatCompletionRequest::is_n_Set() const{
    return m_n_isSet;
}

bool OAICreateChatCompletionRequest::is_n_Valid() const{
    return m_n_isValid;
}

double OAICreateChatCompletionRequest::getPresencePenalty() const {
    return presence_penalty;
}
void OAICreateChatCompletionRequest::setPresencePenalty(const double &presence_penalty) {
    this->presence_penalty = presence_penalty;
    this->m_presence_penalty_isSet = true;
}

bool OAICreateChatCompletionRequest::is_presence_penalty_Set() const{
    return m_presence_penalty_isSet;
}

bool OAICreateChatCompletionRequest::is_presence_penalty_Valid() const{
    return m_presence_penalty_isValid;
}

OAICreateChatCompletionRequest_response_format OAICreateChatCompletionRequest::getResponseFormat() const {
    return response_format;
}
void OAICreateChatCompletionRequest::setResponseFormat(const OAICreateChatCompletionRequest_response_format &response_format) {
    this->response_format = response_format;
    this->m_response_format_isSet = true;
}

bool OAICreateChatCompletionRequest::is_response_format_Set() const{
    return m_response_format_isSet;
}

bool OAICreateChatCompletionRequest::is_response_format_Valid() const{
    return m_response_format_isValid;
}

qint32 OAICreateChatCompletionRequest::getSeed() const {
    return seed;
}
void OAICreateChatCompletionRequest::setSeed(const qint32 &seed) {
    this->seed = seed;
    this->m_seed_isSet = true;
}

bool OAICreateChatCompletionRequest::is_seed_Set() const{
    return m_seed_isSet;
}

bool OAICreateChatCompletionRequest::is_seed_Valid() const{
    return m_seed_isValid;
}

OAICreateChatCompletionRequest_stop OAICreateChatCompletionRequest::getStop() const {
    return stop;
}
void OAICreateChatCompletionRequest::setStop(const OAICreateChatCompletionRequest_stop &stop) {
    this->stop = stop;
    this->m_stop_isSet = true;
}

bool OAICreateChatCompletionRequest::is_stop_Set() const{
    return m_stop_isSet;
}

bool OAICreateChatCompletionRequest::is_stop_Valid() const{
    return m_stop_isValid;
}

bool OAICreateChatCompletionRequest::isStream() const {
    return stream;
}
void OAICreateChatCompletionRequest::setStream(const bool &stream) {
    this->stream = stream;
    this->m_stream_isSet = true;
}

bool OAICreateChatCompletionRequest::is_stream_Set() const{
    return m_stream_isSet;
}

bool OAICreateChatCompletionRequest::is_stream_Valid() const{
    return m_stream_isValid;
}

double OAICreateChatCompletionRequest::getTemperature() const {
    return temperature;
}
void OAICreateChatCompletionRequest::setTemperature(const double &temperature) {
    this->temperature = temperature;
    this->m_temperature_isSet = true;
}

bool OAICreateChatCompletionRequest::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAICreateChatCompletionRequest::is_temperature_Valid() const{
    return m_temperature_isValid;
}

double OAICreateChatCompletionRequest::getTopP() const {
    return top_p;
}
void OAICreateChatCompletionRequest::setTopP(const double &top_p) {
    this->top_p = top_p;
    this->m_top_p_isSet = true;
}

bool OAICreateChatCompletionRequest::is_top_p_Set() const{
    return m_top_p_isSet;
}

bool OAICreateChatCompletionRequest::is_top_p_Valid() const{
    return m_top_p_isValid;
}

QList<OAIChatCompletionTool> OAICreateChatCompletionRequest::getTools() const {
    return tools;
}
void OAICreateChatCompletionRequest::setTools(const QList<OAIChatCompletionTool> &tools) {
    this->tools = tools;
    this->m_tools_isSet = true;
}

bool OAICreateChatCompletionRequest::is_tools_Set() const{
    return m_tools_isSet;
}

bool OAICreateChatCompletionRequest::is_tools_Valid() const{
    return m_tools_isValid;
}

OAIChatCompletionToolChoiceOption OAICreateChatCompletionRequest::getToolChoice() const {
    return tool_choice;
}
void OAICreateChatCompletionRequest::setToolChoice(const OAIChatCompletionToolChoiceOption &tool_choice) {
    this->tool_choice = tool_choice;
    this->m_tool_choice_isSet = true;
}

bool OAICreateChatCompletionRequest::is_tool_choice_Set() const{
    return m_tool_choice_isSet;
}

bool OAICreateChatCompletionRequest::is_tool_choice_Valid() const{
    return m_tool_choice_isValid;
}

QString OAICreateChatCompletionRequest::getUser() const {
    return user;
}
void OAICreateChatCompletionRequest::setUser(const QString &user) {
    this->user = user;
    this->m_user_isSet = true;
}

bool OAICreateChatCompletionRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAICreateChatCompletionRequest::is_user_Valid() const{
    return m_user_isValid;
}

OAICreateChatCompletionRequest_function_call OAICreateChatCompletionRequest::getFunctionCall() const {
    return function_call;
}
void OAICreateChatCompletionRequest::setFunctionCall(const OAICreateChatCompletionRequest_function_call &function_call) {
    this->function_call = function_call;
    this->m_function_call_isSet = true;
}

bool OAICreateChatCompletionRequest::is_function_call_Set() const{
    return m_function_call_isSet;
}

bool OAICreateChatCompletionRequest::is_function_call_Valid() const{
    return m_function_call_isValid;
}

QList<OAIChatCompletionFunctions> OAICreateChatCompletionRequest::getFunctions() const {
    return functions;
}
void OAICreateChatCompletionRequest::setFunctions(const QList<OAIChatCompletionFunctions> &functions) {
    this->functions = functions;
    this->m_functions_isSet = true;
}

bool OAICreateChatCompletionRequest::is_functions_Set() const{
    return m_functions_isSet;
}

bool OAICreateChatCompletionRequest::is_functions_Valid() const{
    return m_functions_isValid;
}

bool OAICreateChatCompletionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_penalty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (logit_bias.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logprobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_logprobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_tokens_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_n_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_presence_penalty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (response_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (stop.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_p_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (tools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (tool_choice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (function_call.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (functions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateChatCompletionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_messages_isValid && m_model_isValid && true;
}

} // namespace OpenAPI
