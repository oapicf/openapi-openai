/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateChatCompletionRequest.h
 *
 * 
 */

#ifndef OAICreateChatCompletionRequest_H
#define OAICreateChatCompletionRequest_H

#include <QJsonObject>

#include "OAIChatCompletionFunctions.h"
#include "OAIChatCompletionRequestMessage.h"
#include "OAIChatCompletionTool.h"
#include "OAIChatCompletionToolChoiceOption.h"
#include "OAICreateChatCompletionRequest_function_call.h"
#include "OAICreateChatCompletionRequest_model.h"
#include "OAICreateChatCompletionRequest_response_format.h"
#include "OAICreateChatCompletionRequest_stop.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateChatCompletionRequest : public OAIObject {
public:
    OAICreateChatCompletionRequest();
    OAICreateChatCompletionRequest(QString json);
    ~OAICreateChatCompletionRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIChatCompletionRequestMessage> getMessages() const;
    void setMessages(const QList<OAIChatCompletionRequestMessage> &messages);
    bool is_messages_Set() const;
    bool is_messages_Valid() const;

    OAICreateChatCompletionRequest_model getModel() const;
    void setModel(const OAICreateChatCompletionRequest_model &model);
    bool is_model_Set() const;
    bool is_model_Valid() const;

    double getFrequencyPenalty() const;
    void setFrequencyPenalty(const double &frequency_penalty);
    bool is_frequency_penalty_Set() const;
    bool is_frequency_penalty_Valid() const;

    QMap<QString, qint32> getLogitBias() const;
    void setLogitBias(const QMap<QString, qint32> &logit_bias);
    bool is_logit_bias_Set() const;
    bool is_logit_bias_Valid() const;

    bool isLogprobs() const;
    void setLogprobs(const bool &logprobs);
    bool is_logprobs_Set() const;
    bool is_logprobs_Valid() const;

    qint32 getTopLogprobs() const;
    void setTopLogprobs(const qint32 &top_logprobs);
    bool is_top_logprobs_Set() const;
    bool is_top_logprobs_Valid() const;

    qint32 getMaxTokens() const;
    void setMaxTokens(const qint32 &max_tokens);
    bool is_max_tokens_Set() const;
    bool is_max_tokens_Valid() const;

    qint32 getN() const;
    void setN(const qint32 &n);
    bool is_n_Set() const;
    bool is_n_Valid() const;

    double getPresencePenalty() const;
    void setPresencePenalty(const double &presence_penalty);
    bool is_presence_penalty_Set() const;
    bool is_presence_penalty_Valid() const;

    OAICreateChatCompletionRequest_response_format getResponseFormat() const;
    void setResponseFormat(const OAICreateChatCompletionRequest_response_format &response_format);
    bool is_response_format_Set() const;
    bool is_response_format_Valid() const;

    qint32 getSeed() const;
    void setSeed(const qint32 &seed);
    bool is_seed_Set() const;
    bool is_seed_Valid() const;

    OAICreateChatCompletionRequest_stop getStop() const;
    void setStop(const OAICreateChatCompletionRequest_stop &stop);
    bool is_stop_Set() const;
    bool is_stop_Valid() const;

    bool isStream() const;
    void setStream(const bool &stream);
    bool is_stream_Set() const;
    bool is_stream_Valid() const;

    double getTemperature() const;
    void setTemperature(const double &temperature);
    bool is_temperature_Set() const;
    bool is_temperature_Valid() const;

    double getTopP() const;
    void setTopP(const double &top_p);
    bool is_top_p_Set() const;
    bool is_top_p_Valid() const;

    QList<OAIChatCompletionTool> getTools() const;
    void setTools(const QList<OAIChatCompletionTool> &tools);
    bool is_tools_Set() const;
    bool is_tools_Valid() const;

    OAIChatCompletionToolChoiceOption getToolChoice() const;
    void setToolChoice(const OAIChatCompletionToolChoiceOption &tool_choice);
    bool is_tool_choice_Set() const;
    bool is_tool_choice_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    OAICreateChatCompletionRequest_function_call getFunctionCall() const;
    void setFunctionCall(const OAICreateChatCompletionRequest_function_call &function_call);
    bool is_function_call_Set() const;
    bool is_function_call_Valid() const;

    QList<OAIChatCompletionFunctions> getFunctions() const;
    void setFunctions(const QList<OAIChatCompletionFunctions> &functions);
    bool is_functions_Set() const;
    bool is_functions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIChatCompletionRequestMessage> messages;
    bool m_messages_isSet;
    bool m_messages_isValid;

    OAICreateChatCompletionRequest_model model;
    bool m_model_isSet;
    bool m_model_isValid;

    double frequency_penalty;
    bool m_frequency_penalty_isSet;
    bool m_frequency_penalty_isValid;

    QMap<QString, qint32> logit_bias;
    bool m_logit_bias_isSet;
    bool m_logit_bias_isValid;

    bool logprobs;
    bool m_logprobs_isSet;
    bool m_logprobs_isValid;

    qint32 top_logprobs;
    bool m_top_logprobs_isSet;
    bool m_top_logprobs_isValid;

    qint32 max_tokens;
    bool m_max_tokens_isSet;
    bool m_max_tokens_isValid;

    qint32 n;
    bool m_n_isSet;
    bool m_n_isValid;

    double presence_penalty;
    bool m_presence_penalty_isSet;
    bool m_presence_penalty_isValid;

    OAICreateChatCompletionRequest_response_format response_format;
    bool m_response_format_isSet;
    bool m_response_format_isValid;

    qint32 seed;
    bool m_seed_isSet;
    bool m_seed_isValid;

    OAICreateChatCompletionRequest_stop stop;
    bool m_stop_isSet;
    bool m_stop_isValid;

    bool stream;
    bool m_stream_isSet;
    bool m_stream_isValid;

    double temperature;
    bool m_temperature_isSet;
    bool m_temperature_isValid;

    double top_p;
    bool m_top_p_isSet;
    bool m_top_p_isValid;

    QList<OAIChatCompletionTool> tools;
    bool m_tools_isSet;
    bool m_tools_isValid;

    OAIChatCompletionToolChoiceOption tool_choice;
    bool m_tool_choice_isSet;
    bool m_tool_choice_isValid;

    QString user;
    bool m_user_isSet;
    bool m_user_isValid;

    OAICreateChatCompletionRequest_function_call function_call;
    bool m_function_call_isSet;
    bool m_function_call_isValid;

    QList<OAIChatCompletionFunctions> functions;
    bool m_functions_isSet;
    bool m_functions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateChatCompletionRequest)

#endif // OAICreateChatCompletionRequest_H
