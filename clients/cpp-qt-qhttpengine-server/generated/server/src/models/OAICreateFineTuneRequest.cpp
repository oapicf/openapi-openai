/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFineTuneRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFineTuneRequest::OAICreateFineTuneRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFineTuneRequest::OAICreateFineTuneRequest() {
    this->initializeModel();
}

OAICreateFineTuneRequest::~OAICreateFineTuneRequest() {}

void OAICreateFineTuneRequest::initializeModel() {

    m_training_file_isSet = false;
    m_training_file_isValid = false;

    m_validation_file_isSet = false;
    m_validation_file_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_n_epochs_isSet = false;
    m_n_epochs_isValid = false;

    m_batch_size_isSet = false;
    m_batch_size_isValid = false;

    m_learning_rate_multiplier_isSet = false;
    m_learning_rate_multiplier_isValid = false;

    m_prompt_loss_weight_isSet = false;
    m_prompt_loss_weight_isValid = false;

    m_compute_classification_metrics_isSet = false;
    m_compute_classification_metrics_isValid = false;

    m_classification_n_classes_isSet = false;
    m_classification_n_classes_isValid = false;

    m_classification_positive_class_isSet = false;
    m_classification_positive_class_isValid = false;

    m_classification_betas_isSet = false;
    m_classification_betas_isValid = false;

    m_suffix_isSet = false;
    m_suffix_isValid = false;
}

void OAICreateFineTuneRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFineTuneRequest::fromJsonObject(QJsonObject json) {

    m_training_file_isValid = ::OpenAPI::fromJsonValue(training_file, json[QString("training_file")]);
    m_training_file_isSet = !json[QString("training_file")].isNull() && m_training_file_isValid;

    m_validation_file_isValid = ::OpenAPI::fromJsonValue(validation_file, json[QString("validation_file")]);
    m_validation_file_isSet = !json[QString("validation_file")].isNull() && m_validation_file_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_n_epochs_isValid = ::OpenAPI::fromJsonValue(n_epochs, json[QString("n_epochs")]);
    m_n_epochs_isSet = !json[QString("n_epochs")].isNull() && m_n_epochs_isValid;

    m_batch_size_isValid = ::OpenAPI::fromJsonValue(batch_size, json[QString("batch_size")]);
    m_batch_size_isSet = !json[QString("batch_size")].isNull() && m_batch_size_isValid;

    m_learning_rate_multiplier_isValid = ::OpenAPI::fromJsonValue(learning_rate_multiplier, json[QString("learning_rate_multiplier")]);
    m_learning_rate_multiplier_isSet = !json[QString("learning_rate_multiplier")].isNull() && m_learning_rate_multiplier_isValid;

    m_prompt_loss_weight_isValid = ::OpenAPI::fromJsonValue(prompt_loss_weight, json[QString("prompt_loss_weight")]);
    m_prompt_loss_weight_isSet = !json[QString("prompt_loss_weight")].isNull() && m_prompt_loss_weight_isValid;

    m_compute_classification_metrics_isValid = ::OpenAPI::fromJsonValue(compute_classification_metrics, json[QString("compute_classification_metrics")]);
    m_compute_classification_metrics_isSet = !json[QString("compute_classification_metrics")].isNull() && m_compute_classification_metrics_isValid;

    m_classification_n_classes_isValid = ::OpenAPI::fromJsonValue(classification_n_classes, json[QString("classification_n_classes")]);
    m_classification_n_classes_isSet = !json[QString("classification_n_classes")].isNull() && m_classification_n_classes_isValid;

    m_classification_positive_class_isValid = ::OpenAPI::fromJsonValue(classification_positive_class, json[QString("classification_positive_class")]);
    m_classification_positive_class_isSet = !json[QString("classification_positive_class")].isNull() && m_classification_positive_class_isValid;

    m_classification_betas_isValid = ::OpenAPI::fromJsonValue(classification_betas, json[QString("classification_betas")]);
    m_classification_betas_isSet = !json[QString("classification_betas")].isNull() && m_classification_betas_isValid;

    m_suffix_isValid = ::OpenAPI::fromJsonValue(suffix, json[QString("suffix")]);
    m_suffix_isSet = !json[QString("suffix")].isNull() && m_suffix_isValid;
}

QString OAICreateFineTuneRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFineTuneRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_training_file_isSet) {
        obj.insert(QString("training_file"), ::OpenAPI::toJsonValue(training_file));
    }
    if (m_validation_file_isSet) {
        obj.insert(QString("validation_file"), ::OpenAPI::toJsonValue(validation_file));
    }
    if (model.isSet()) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(model));
    }
    if (m_n_epochs_isSet) {
        obj.insert(QString("n_epochs"), ::OpenAPI::toJsonValue(n_epochs));
    }
    if (m_batch_size_isSet) {
        obj.insert(QString("batch_size"), ::OpenAPI::toJsonValue(batch_size));
    }
    if (m_learning_rate_multiplier_isSet) {
        obj.insert(QString("learning_rate_multiplier"), ::OpenAPI::toJsonValue(learning_rate_multiplier));
    }
    if (m_prompt_loss_weight_isSet) {
        obj.insert(QString("prompt_loss_weight"), ::OpenAPI::toJsonValue(prompt_loss_weight));
    }
    if (m_compute_classification_metrics_isSet) {
        obj.insert(QString("compute_classification_metrics"), ::OpenAPI::toJsonValue(compute_classification_metrics));
    }
    if (m_classification_n_classes_isSet) {
        obj.insert(QString("classification_n_classes"), ::OpenAPI::toJsonValue(classification_n_classes));
    }
    if (m_classification_positive_class_isSet) {
        obj.insert(QString("classification_positive_class"), ::OpenAPI::toJsonValue(classification_positive_class));
    }
    if (classification_betas.size() > 0) {
        obj.insert(QString("classification_betas"), ::OpenAPI::toJsonValue(classification_betas));
    }
    if (m_suffix_isSet) {
        obj.insert(QString("suffix"), ::OpenAPI::toJsonValue(suffix));
    }
    return obj;
}

QString OAICreateFineTuneRequest::getTrainingFile() const {
    return training_file;
}
void OAICreateFineTuneRequest::setTrainingFile(const QString &training_file) {
    this->training_file = training_file;
    this->m_training_file_isSet = true;
}

bool OAICreateFineTuneRequest::is_training_file_Set() const{
    return m_training_file_isSet;
}

bool OAICreateFineTuneRequest::is_training_file_Valid() const{
    return m_training_file_isValid;
}

QString OAICreateFineTuneRequest::getValidationFile() const {
    return validation_file;
}
void OAICreateFineTuneRequest::setValidationFile(const QString &validation_file) {
    this->validation_file = validation_file;
    this->m_validation_file_isSet = true;
}

bool OAICreateFineTuneRequest::is_validation_file_Set() const{
    return m_validation_file_isSet;
}

bool OAICreateFineTuneRequest::is_validation_file_Valid() const{
    return m_validation_file_isValid;
}

OAICreateFineTuneRequest_model OAICreateFineTuneRequest::getModel() const {
    return model;
}
void OAICreateFineTuneRequest::setModel(const OAICreateFineTuneRequest_model &model) {
    this->model = model;
    this->m_model_isSet = true;
}

bool OAICreateFineTuneRequest::is_model_Set() const{
    return m_model_isSet;
}

bool OAICreateFineTuneRequest::is_model_Valid() const{
    return m_model_isValid;
}

qint32 OAICreateFineTuneRequest::getNEpochs() const {
    return n_epochs;
}
void OAICreateFineTuneRequest::setNEpochs(const qint32 &n_epochs) {
    this->n_epochs = n_epochs;
    this->m_n_epochs_isSet = true;
}

bool OAICreateFineTuneRequest::is_n_epochs_Set() const{
    return m_n_epochs_isSet;
}

bool OAICreateFineTuneRequest::is_n_epochs_Valid() const{
    return m_n_epochs_isValid;
}

qint32 OAICreateFineTuneRequest::getBatchSize() const {
    return batch_size;
}
void OAICreateFineTuneRequest::setBatchSize(const qint32 &batch_size) {
    this->batch_size = batch_size;
    this->m_batch_size_isSet = true;
}

bool OAICreateFineTuneRequest::is_batch_size_Set() const{
    return m_batch_size_isSet;
}

bool OAICreateFineTuneRequest::is_batch_size_Valid() const{
    return m_batch_size_isValid;
}

double OAICreateFineTuneRequest::getLearningRateMultiplier() const {
    return learning_rate_multiplier;
}
void OAICreateFineTuneRequest::setLearningRateMultiplier(const double &learning_rate_multiplier) {
    this->learning_rate_multiplier = learning_rate_multiplier;
    this->m_learning_rate_multiplier_isSet = true;
}

bool OAICreateFineTuneRequest::is_learning_rate_multiplier_Set() const{
    return m_learning_rate_multiplier_isSet;
}

bool OAICreateFineTuneRequest::is_learning_rate_multiplier_Valid() const{
    return m_learning_rate_multiplier_isValid;
}

double OAICreateFineTuneRequest::getPromptLossWeight() const {
    return prompt_loss_weight;
}
void OAICreateFineTuneRequest::setPromptLossWeight(const double &prompt_loss_weight) {
    this->prompt_loss_weight = prompt_loss_weight;
    this->m_prompt_loss_weight_isSet = true;
}

bool OAICreateFineTuneRequest::is_prompt_loss_weight_Set() const{
    return m_prompt_loss_weight_isSet;
}

bool OAICreateFineTuneRequest::is_prompt_loss_weight_Valid() const{
    return m_prompt_loss_weight_isValid;
}

bool OAICreateFineTuneRequest::isComputeClassificationMetrics() const {
    return compute_classification_metrics;
}
void OAICreateFineTuneRequest::setComputeClassificationMetrics(const bool &compute_classification_metrics) {
    this->compute_classification_metrics = compute_classification_metrics;
    this->m_compute_classification_metrics_isSet = true;
}

bool OAICreateFineTuneRequest::is_compute_classification_metrics_Set() const{
    return m_compute_classification_metrics_isSet;
}

bool OAICreateFineTuneRequest::is_compute_classification_metrics_Valid() const{
    return m_compute_classification_metrics_isValid;
}

qint32 OAICreateFineTuneRequest::getClassificationNClasses() const {
    return classification_n_classes;
}
void OAICreateFineTuneRequest::setClassificationNClasses(const qint32 &classification_n_classes) {
    this->classification_n_classes = classification_n_classes;
    this->m_classification_n_classes_isSet = true;
}

bool OAICreateFineTuneRequest::is_classification_n_classes_Set() const{
    return m_classification_n_classes_isSet;
}

bool OAICreateFineTuneRequest::is_classification_n_classes_Valid() const{
    return m_classification_n_classes_isValid;
}

QString OAICreateFineTuneRequest::getClassificationPositiveClass() const {
    return classification_positive_class;
}
void OAICreateFineTuneRequest::setClassificationPositiveClass(const QString &classification_positive_class) {
    this->classification_positive_class = classification_positive_class;
    this->m_classification_positive_class_isSet = true;
}

bool OAICreateFineTuneRequest::is_classification_positive_class_Set() const{
    return m_classification_positive_class_isSet;
}

bool OAICreateFineTuneRequest::is_classification_positive_class_Valid() const{
    return m_classification_positive_class_isValid;
}

QList<double> OAICreateFineTuneRequest::getClassificationBetas() const {
    return classification_betas;
}
void OAICreateFineTuneRequest::setClassificationBetas(const QList<double> &classification_betas) {
    this->classification_betas = classification_betas;
    this->m_classification_betas_isSet = true;
}

bool OAICreateFineTuneRequest::is_classification_betas_Set() const{
    return m_classification_betas_isSet;
}

bool OAICreateFineTuneRequest::is_classification_betas_Valid() const{
    return m_classification_betas_isValid;
}

QString OAICreateFineTuneRequest::getSuffix() const {
    return suffix;
}
void OAICreateFineTuneRequest::setSuffix(const QString &suffix) {
    this->suffix = suffix;
    this->m_suffix_isSet = true;
}

bool OAICreateFineTuneRequest::is_suffix_Set() const{
    return m_suffix_isSet;
}

bool OAICreateFineTuneRequest::is_suffix_Valid() const{
    return m_suffix_isValid;
}

bool OAICreateFineTuneRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_training_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_n_epochs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learning_rate_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prompt_loss_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_classification_metrics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_n_classes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_positive_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (classification_betas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFineTuneRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_training_file_isValid && true;
}

} // namespace OpenAPI
