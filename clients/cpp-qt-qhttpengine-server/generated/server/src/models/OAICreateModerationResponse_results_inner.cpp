/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateModerationResponse_results_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateModerationResponse_results_inner::OAICreateModerationResponse_results_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateModerationResponse_results_inner::OAICreateModerationResponse_results_inner() {
    this->initializeModel();
}

OAICreateModerationResponse_results_inner::~OAICreateModerationResponse_results_inner() {}

void OAICreateModerationResponse_results_inner::initializeModel() {

    m_flagged_isSet = false;
    m_flagged_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_category_scores_isSet = false;
    m_category_scores_isValid = false;
}

void OAICreateModerationResponse_results_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateModerationResponse_results_inner::fromJsonObject(QJsonObject json) {

    m_flagged_isValid = ::OpenAPI::fromJsonValue(flagged, json[QString("flagged")]);
    m_flagged_isSet = !json[QString("flagged")].isNull() && m_flagged_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_category_scores_isValid = ::OpenAPI::fromJsonValue(category_scores, json[QString("category_scores")]);
    m_category_scores_isSet = !json[QString("category_scores")].isNull() && m_category_scores_isValid;
}

QString OAICreateModerationResponse_results_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateModerationResponse_results_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_flagged_isSet) {
        obj.insert(QString("flagged"), ::OpenAPI::toJsonValue(flagged));
    }
    if (categories.isSet()) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(categories));
    }
    if (category_scores.isSet()) {
        obj.insert(QString("category_scores"), ::OpenAPI::toJsonValue(category_scores));
    }
    return obj;
}

bool OAICreateModerationResponse_results_inner::isFlagged() const {
    return flagged;
}
void OAICreateModerationResponse_results_inner::setFlagged(const bool &flagged) {
    this->flagged = flagged;
    this->m_flagged_isSet = true;
}

bool OAICreateModerationResponse_results_inner::is_flagged_Set() const{
    return m_flagged_isSet;
}

bool OAICreateModerationResponse_results_inner::is_flagged_Valid() const{
    return m_flagged_isValid;
}

OAICreateModerationResponse_results_inner_categories OAICreateModerationResponse_results_inner::getCategories() const {
    return categories;
}
void OAICreateModerationResponse_results_inner::setCategories(const OAICreateModerationResponse_results_inner_categories &categories) {
    this->categories = categories;
    this->m_categories_isSet = true;
}

bool OAICreateModerationResponse_results_inner::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAICreateModerationResponse_results_inner::is_categories_Valid() const{
    return m_categories_isValid;
}

OAICreateModerationResponse_results_inner_category_scores OAICreateModerationResponse_results_inner::getCategoryScores() const {
    return category_scores;
}
void OAICreateModerationResponse_results_inner::setCategoryScores(const OAICreateModerationResponse_results_inner_category_scores &category_scores) {
    this->category_scores = category_scores;
    this->m_category_scores_isSet = true;
}

bool OAICreateModerationResponse_results_inner::is_category_scores_Set() const{
    return m_category_scores_isSet;
}

bool OAICreateModerationResponse_results_inner::is_category_scores_Valid() const{
    return m_category_scores_isValid;
}

bool OAICreateModerationResponse_results_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_flagged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (categories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (category_scores.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateModerationResponse_results_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_flagged_isValid && m_categories_isValid && m_category_scores_isValid && true;
}

} // namespace OpenAPI
