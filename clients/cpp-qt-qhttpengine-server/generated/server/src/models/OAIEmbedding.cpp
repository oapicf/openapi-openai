/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbedding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmbedding::OAIEmbedding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmbedding::OAIEmbedding() {
    this->initializeModel();
}

OAIEmbedding::~OAIEmbedding() {}

void OAIEmbedding::initializeModel() {

    m_index_isSet = false;
    m_index_isValid = false;

    m_embedding_isSet = false;
    m_embedding_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;
}

void OAIEmbedding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmbedding::fromJsonObject(QJsonObject json) {

    m_index_isValid = ::OpenAPI::fromJsonValue(index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_embedding_isValid = ::OpenAPI::fromJsonValue(embedding, json[QString("embedding")]);
    m_embedding_isSet = !json[QString("embedding")].isNull() && m_embedding_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;
}

QString OAIEmbedding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmbedding::asJsonObject() const {
    QJsonObject obj;
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(index));
    }
    if (embedding.size() > 0) {
        obj.insert(QString("embedding"), ::OpenAPI::toJsonValue(embedding));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(object));
    }
    return obj;
}

qint32 OAIEmbedding::getIndex() const {
    return index;
}
void OAIEmbedding::setIndex(const qint32 &index) {
    this->index = index;
    this->m_index_isSet = true;
}

bool OAIEmbedding::is_index_Set() const{
    return m_index_isSet;
}

bool OAIEmbedding::is_index_Valid() const{
    return m_index_isValid;
}

QList<double> OAIEmbedding::getEmbedding() const {
    return embedding;
}
void OAIEmbedding::setEmbedding(const QList<double> &embedding) {
    this->embedding = embedding;
    this->m_embedding_isSet = true;
}

bool OAIEmbedding::is_embedding_Set() const{
    return m_embedding_isSet;
}

bool OAIEmbedding::is_embedding_Valid() const{
    return m_embedding_isValid;
}

QString OAIEmbedding::getObject() const {
    return object;
}
void OAIEmbedding::setObject(const QString &object) {
    this->object = object;
    this->m_object_isSet = true;
}

bool OAIEmbedding::is_object_Set() const{
    return m_object_isSet;
}

bool OAIEmbedding::is_object_Valid() const{
    return m_object_isValid;
}

bool OAIEmbedding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (embedding.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmbedding::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_index_isValid && m_embedding_isValid && m_object_isValid && true;
}

} // namespace OpenAPI
