/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpenAIFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpenAIFile::OAIOpenAIFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpenAIFile::OAIOpenAIFile() {
    this->initializeModel();
}

OAIOpenAIFile::~OAIOpenAIFile() {}

void OAIOpenAIFile::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_bytes_isSet = false;
    m_bytes_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_details_isSet = false;
    m_status_details_isValid = false;
}

void OAIOpenAIFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOpenAIFile::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_bytes_isValid = ::OpenAPI::fromJsonValue(bytes, json[QString("bytes")]);
    m_bytes_isSet = !json[QString("bytes")].isNull() && m_bytes_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_details_isValid = ::OpenAPI::fromJsonValue(status_details, json[QString("status_details")]);
    m_status_details_isSet = !json[QString("status_details")].isNull() && m_status_details_isValid;
}

QString OAIOpenAIFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOpenAIFile::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(object));
    }
    if (m_bytes_isSet) {
        obj.insert(QString("bytes"), ::OpenAPI::toJsonValue(bytes));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(created_at));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(filename));
    }
    if (m_purpose_isSet) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(purpose));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (m_status_details_isSet) {
        obj.insert(QString("status_details"), ::OpenAPI::toJsonValue(status_details));
    }
    return obj;
}

QString OAIOpenAIFile::getId() const {
    return id;
}
void OAIOpenAIFile::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIOpenAIFile::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOpenAIFile::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOpenAIFile::getObject() const {
    return object;
}
void OAIOpenAIFile::setObject(const QString &object) {
    this->object = object;
    this->m_object_isSet = true;
}

bool OAIOpenAIFile::is_object_Set() const{
    return m_object_isSet;
}

bool OAIOpenAIFile::is_object_Valid() const{
    return m_object_isValid;
}

qint32 OAIOpenAIFile::getBytes() const {
    return bytes;
}
void OAIOpenAIFile::setBytes(const qint32 &bytes) {
    this->bytes = bytes;
    this->m_bytes_isSet = true;
}

bool OAIOpenAIFile::is_bytes_Set() const{
    return m_bytes_isSet;
}

bool OAIOpenAIFile::is_bytes_Valid() const{
    return m_bytes_isValid;
}

qint32 OAIOpenAIFile::getCreatedAt() const {
    return created_at;
}
void OAIOpenAIFile::setCreatedAt(const qint32 &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool OAIOpenAIFile::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIOpenAIFile::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIOpenAIFile::getFilename() const {
    return filename;
}
void OAIOpenAIFile::setFilename(const QString &filename) {
    this->filename = filename;
    this->m_filename_isSet = true;
}

bool OAIOpenAIFile::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIOpenAIFile::is_filename_Valid() const{
    return m_filename_isValid;
}

QString OAIOpenAIFile::getPurpose() const {
    return purpose;
}
void OAIOpenAIFile::setPurpose(const QString &purpose) {
    this->purpose = purpose;
    this->m_purpose_isSet = true;
}

bool OAIOpenAIFile::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool OAIOpenAIFile::is_purpose_Valid() const{
    return m_purpose_isValid;
}

QString OAIOpenAIFile::getStatus() const {
    return status;
}
void OAIOpenAIFile::setStatus(const QString &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAIOpenAIFile::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOpenAIFile::is_status_Valid() const{
    return m_status_isValid;
}

OAIObject OAIOpenAIFile::getStatusDetails() const {
    return status_details;
}
void OAIOpenAIFile::setStatusDetails(const OAIObject &status_details) {
    this->status_details = status_details;
    this->m_status_details_isSet = true;
}

bool OAIOpenAIFile::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAIOpenAIFile::is_status_details_Valid() const{
    return m_status_details_isValid;
}

bool OAIOpenAIFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_details_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOpenAIFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_object_isValid && m_bytes_isValid && m_created_at_isValid && m_filename_isValid && m_purpose_isValid && true;
}

} // namespace OpenAPI
