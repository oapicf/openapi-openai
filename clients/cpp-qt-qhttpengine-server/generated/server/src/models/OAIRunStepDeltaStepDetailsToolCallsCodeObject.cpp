/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunStepDeltaStepDetailsToolCallsCodeObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunStepDeltaStepDetailsToolCallsCodeObject::OAIRunStepDeltaStepDetailsToolCallsCodeObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunStepDeltaStepDetailsToolCallsCodeObject::OAIRunStepDeltaStepDetailsToolCallsCodeObject() {
    this->initializeModel();
}

OAIRunStepDeltaStepDetailsToolCallsCodeObject::~OAIRunStepDeltaStepDetailsToolCallsCodeObject() {}

void OAIRunStepDeltaStepDetailsToolCallsCodeObject::initializeModel() {

    m_index_isSet = false;
    m_index_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_code_interpreter_isSet = false;
    m_code_interpreter_isValid = false;
}

void OAIRunStepDeltaStepDetailsToolCallsCodeObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunStepDeltaStepDetailsToolCallsCodeObject::fromJsonObject(QJsonObject json) {

    m_index_isValid = ::OpenAPI::fromJsonValue(index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_code_interpreter_isValid = ::OpenAPI::fromJsonValue(code_interpreter, json[QString("code_interpreter")]);
    m_code_interpreter_isSet = !json[QString("code_interpreter")].isNull() && m_code_interpreter_isValid;
}

QString OAIRunStepDeltaStepDetailsToolCallsCodeObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunStepDeltaStepDetailsToolCallsCodeObject::asJsonObject() const {
    QJsonObject obj;
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(index));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (code_interpreter.isSet()) {
        obj.insert(QString("code_interpreter"), ::OpenAPI::toJsonValue(code_interpreter));
    }
    return obj;
}

qint32 OAIRunStepDeltaStepDetailsToolCallsCodeObject::getIndex() const {
    return index;
}
void OAIRunStepDeltaStepDetailsToolCallsCodeObject::setIndex(const qint32 &index) {
    this->index = index;
    this->m_index_isSet = true;
}

bool OAIRunStepDeltaStepDetailsToolCallsCodeObject::is_index_Set() const{
    return m_index_isSet;
}

bool OAIRunStepDeltaStepDetailsToolCallsCodeObject::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIRunStepDeltaStepDetailsToolCallsCodeObject::getId() const {
    return id;
}
void OAIRunStepDeltaStepDetailsToolCallsCodeObject::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIRunStepDeltaStepDetailsToolCallsCodeObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRunStepDeltaStepDetailsToolCallsCodeObject::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRunStepDeltaStepDetailsToolCallsCodeObject::getType() const {
    return type;
}
void OAIRunStepDeltaStepDetailsToolCallsCodeObject::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAIRunStepDeltaStepDetailsToolCallsCodeObject::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRunStepDeltaStepDetailsToolCallsCodeObject::is_type_Valid() const{
    return m_type_isValid;
}

OAIRunStepDeltaStepDetailsToolCallsCodeObject_code_interpreter OAIRunStepDeltaStepDetailsToolCallsCodeObject::getCodeInterpreter() const {
    return code_interpreter;
}
void OAIRunStepDeltaStepDetailsToolCallsCodeObject::setCodeInterpreter(const OAIRunStepDeltaStepDetailsToolCallsCodeObject_code_interpreter &code_interpreter) {
    this->code_interpreter = code_interpreter;
    this->m_code_interpreter_isSet = true;
}

bool OAIRunStepDeltaStepDetailsToolCallsCodeObject::is_code_interpreter_Set() const{
    return m_code_interpreter_isSet;
}

bool OAIRunStepDeltaStepDetailsToolCallsCodeObject::is_code_interpreter_Valid() const{
    return m_code_interpreter_isValid;
}

bool OAIRunStepDeltaStepDetailsToolCallsCodeObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (code_interpreter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunStepDeltaStepDetailsToolCallsCodeObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_index_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
