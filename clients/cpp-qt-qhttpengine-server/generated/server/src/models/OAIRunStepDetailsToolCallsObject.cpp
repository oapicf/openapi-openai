/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunStepDetailsToolCallsObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunStepDetailsToolCallsObject::OAIRunStepDetailsToolCallsObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunStepDetailsToolCallsObject::OAIRunStepDetailsToolCallsObject() {
    this->initializeModel();
}

OAIRunStepDetailsToolCallsObject::~OAIRunStepDetailsToolCallsObject() {}

void OAIRunStepDetailsToolCallsObject::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_tool_calls_isSet = false;
    m_tool_calls_isValid = false;
}

void OAIRunStepDetailsToolCallsObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunStepDetailsToolCallsObject::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_tool_calls_isValid = ::OpenAPI::fromJsonValue(tool_calls, json[QString("tool_calls")]);
    m_tool_calls_isSet = !json[QString("tool_calls")].isNull() && m_tool_calls_isValid;
}

QString OAIRunStepDetailsToolCallsObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunStepDetailsToolCallsObject::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (tool_calls.size() > 0) {
        obj.insert(QString("tool_calls"), ::OpenAPI::toJsonValue(tool_calls));
    }
    return obj;
}

QString OAIRunStepDetailsToolCallsObject::getType() const {
    return type;
}
void OAIRunStepDetailsToolCallsObject::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAIRunStepDetailsToolCallsObject::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRunStepDetailsToolCallsObject::is_type_Valid() const{
    return m_type_isValid;
}

QList<OAIRunStepDetailsToolCallsObject_tool_calls_inner> OAIRunStepDetailsToolCallsObject::getToolCalls() const {
    return tool_calls;
}
void OAIRunStepDetailsToolCallsObject::setToolCalls(const QList<OAIRunStepDetailsToolCallsObject_tool_calls_inner> &tool_calls) {
    this->tool_calls = tool_calls;
    this->m_tool_calls_isSet = true;
}

bool OAIRunStepDetailsToolCallsObject::is_tool_calls_Set() const{
    return m_tool_calls_isSet;
}

bool OAIRunStepDetailsToolCallsObject::is_tool_calls_Valid() const{
    return m_tool_calls_isValid;
}

bool OAIRunStepDetailsToolCallsObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (tool_calls.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunStepDetailsToolCallsObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_tool_calls_isValid && true;
}

} // namespace OpenAPI
