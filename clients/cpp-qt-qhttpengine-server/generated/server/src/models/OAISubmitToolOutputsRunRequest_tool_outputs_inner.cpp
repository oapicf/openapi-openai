/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubmitToolOutputsRunRequest_tool_outputs_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubmitToolOutputsRunRequest_tool_outputs_inner::OAISubmitToolOutputsRunRequest_tool_outputs_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubmitToolOutputsRunRequest_tool_outputs_inner::OAISubmitToolOutputsRunRequest_tool_outputs_inner() {
    this->initializeModel();
}

OAISubmitToolOutputsRunRequest_tool_outputs_inner::~OAISubmitToolOutputsRunRequest_tool_outputs_inner() {}

void OAISubmitToolOutputsRunRequest_tool_outputs_inner::initializeModel() {

    m_tool_call_id_isSet = false;
    m_tool_call_id_isValid = false;

    m_output_isSet = false;
    m_output_isValid = false;
}

void OAISubmitToolOutputsRunRequest_tool_outputs_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubmitToolOutputsRunRequest_tool_outputs_inner::fromJsonObject(QJsonObject json) {

    m_tool_call_id_isValid = ::OpenAPI::fromJsonValue(tool_call_id, json[QString("tool_call_id")]);
    m_tool_call_id_isSet = !json[QString("tool_call_id")].isNull() && m_tool_call_id_isValid;

    m_output_isValid = ::OpenAPI::fromJsonValue(output, json[QString("output")]);
    m_output_isSet = !json[QString("output")].isNull() && m_output_isValid;
}

QString OAISubmitToolOutputsRunRequest_tool_outputs_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubmitToolOutputsRunRequest_tool_outputs_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_tool_call_id_isSet) {
        obj.insert(QString("tool_call_id"), ::OpenAPI::toJsonValue(tool_call_id));
    }
    if (m_output_isSet) {
        obj.insert(QString("output"), ::OpenAPI::toJsonValue(output));
    }
    return obj;
}

QString OAISubmitToolOutputsRunRequest_tool_outputs_inner::getToolCallId() const {
    return tool_call_id;
}
void OAISubmitToolOutputsRunRequest_tool_outputs_inner::setToolCallId(const QString &tool_call_id) {
    this->tool_call_id = tool_call_id;
    this->m_tool_call_id_isSet = true;
}

bool OAISubmitToolOutputsRunRequest_tool_outputs_inner::is_tool_call_id_Set() const{
    return m_tool_call_id_isSet;
}

bool OAISubmitToolOutputsRunRequest_tool_outputs_inner::is_tool_call_id_Valid() const{
    return m_tool_call_id_isValid;
}

QString OAISubmitToolOutputsRunRequest_tool_outputs_inner::getOutput() const {
    return output;
}
void OAISubmitToolOutputsRunRequest_tool_outputs_inner::setOutput(const QString &output) {
    this->output = output;
    this->m_output_isSet = true;
}

bool OAISubmitToolOutputsRunRequest_tool_outputs_inner::is_output_Set() const{
    return m_output_isSet;
}

bool OAISubmitToolOutputsRunRequest_tool_outputs_inner::is_output_Valid() const{
    return m_output_isValid;
}

bool OAISubmitToolOutputsRunRequest_tool_outputs_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tool_call_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubmitToolOutputsRunRequest_tool_outputs_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
