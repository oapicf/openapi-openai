/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAssistantsApiRequest_H
#define OAI_OAIAssistantsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIAssistantFileObject.h"
#include "OAIAssistantObject.h"
#include "OAICreateAssistantFileRequest.h"
#include "OAICreateAssistantRequest.h"
#include "OAICreateMessageRequest.h"
#include "OAICreateRunRequest.h"
#include "OAICreateThreadAndRunRequest.h"
#include "OAICreateThreadRequest.h"
#include "OAIDeleteAssistantFileResponse.h"
#include "OAIDeleteAssistantResponse.h"
#include "OAIDeleteThreadResponse.h"
#include "OAIListAssistantFilesResponse.h"
#include "OAIListAssistantsResponse.h"
#include "OAIListMessageFilesResponse.h"
#include "OAIListMessagesResponse.h"
#include "OAIListRunStepsResponse.h"
#include "OAIListRunsResponse.h"
#include "OAIMessageFileObject.h"
#include "OAIMessageObject.h"
#include "OAIModifyAssistantRequest.h"
#include "OAIModifyMessageRequest.h"
#include "OAIModifyRunRequest.h"
#include "OAIModifyThreadRequest.h"
#include "OAIRunObject.h"
#include "OAIRunStepObject.h"
#include "OAISubmitToolOutputsRunRequest.h"
#include "OAIThreadObject.h"
#include <QString>
#include "OAIAssistantsApiHandler.h"

namespace OpenAPI {

class OAIAssistantsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIAssistantsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIAssistantsApiHandler> handler);
    virtual ~OAIAssistantsApiRequest();

    void cancelRunRequest(const QString& thread_id, const QString& run_id);
    void createAssistantRequest();
    void createAssistantFileRequest(const QString& assistant_id);
    void createMessageRequest(const QString& thread_id);
    void createRunRequest(const QString& thread_id);
    void createThreadRequest();
    void createThreadAndRunRequest();
    void deleteAssistantRequest(const QString& assistant_id);
    void deleteAssistantFileRequest(const QString& assistant_id, const QString& file_id);
    void deleteThreadRequest(const QString& thread_id);
    void getAssistantRequest(const QString& assistant_id);
    void getAssistantFileRequest(const QString& assistant_id, const QString& file_id);
    void getMessageRequest(const QString& thread_id, const QString& message_id);
    void getMessageFileRequest(const QString& thread_id, const QString& message_id, const QString& file_id);
    void getRunRequest(const QString& thread_id, const QString& run_id);
    void getRunStepRequest(const QString& thread_id, const QString& run_id, const QString& step_id);
    void getThreadRequest(const QString& thread_id);
    void listAssistantFilesRequest(const QString& assistant_id);
    void listAssistantsRequest();
    void listMessageFilesRequest(const QString& thread_id, const QString& message_id);
    void listMessagesRequest(const QString& thread_id);
    void listRunStepsRequest(const QString& thread_id, const QString& run_id);
    void listRunsRequest(const QString& thread_id);
    void modifyAssistantRequest(const QString& assistant_id);
    void modifyMessageRequest(const QString& thread_id, const QString& message_id);
    void modifyRunRequest(const QString& thread_id, const QString& run_id);
    void modifyThreadRequest(const QString& thread_id);
    void submitToolOuputsToRunRequest(const QString& thread_id, const QString& run_id);
    

    void cancelRunResponse(const OAIRunObject& res);
    void createAssistantResponse(const OAIAssistantObject& res);
    void createAssistantFileResponse(const OAIAssistantFileObject& res);
    void createMessageResponse(const OAIMessageObject& res);
    void createRunResponse(const OAIRunObject& res);
    void createThreadResponse(const OAIThreadObject& res);
    void createThreadAndRunResponse(const OAIRunObject& res);
    void deleteAssistantResponse(const OAIDeleteAssistantResponse& res);
    void deleteAssistantFileResponse(const OAIDeleteAssistantFileResponse& res);
    void deleteThreadResponse(const OAIDeleteThreadResponse& res);
    void getAssistantResponse(const OAIAssistantObject& res);
    void getAssistantFileResponse(const OAIAssistantFileObject& res);
    void getMessageResponse(const OAIMessageObject& res);
    void getMessageFileResponse(const OAIMessageFileObject& res);
    void getRunResponse(const OAIRunObject& res);
    void getRunStepResponse(const OAIRunStepObject& res);
    void getThreadResponse(const OAIThreadObject& res);
    void listAssistantFilesResponse(const OAIListAssistantFilesResponse& res);
    void listAssistantsResponse(const OAIListAssistantsResponse& res);
    void listMessageFilesResponse(const OAIListMessageFilesResponse& res);
    void listMessagesResponse(const OAIListMessagesResponse& res);
    void listRunStepsResponse(const OAIListRunStepsResponse& res);
    void listRunsResponse(const OAIListRunsResponse& res);
    void modifyAssistantResponse(const OAIAssistantObject& res);
    void modifyMessageResponse(const OAIMessageObject& res);
    void modifyRunResponse(const OAIRunObject& res);
    void modifyThreadResponse(const OAIThreadObject& res);
    void submitToolOuputsToRunResponse(const OAIRunObject& res);
    

    void cancelRunError(const OAIRunObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createAssistantError(const OAIAssistantObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createAssistantFileError(const OAIAssistantFileObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createMessageError(const OAIMessageObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createRunError(const OAIRunObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createThreadError(const OAIThreadObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createThreadAndRunError(const OAIRunObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteAssistantError(const OAIDeleteAssistantResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteAssistantFileError(const OAIDeleteAssistantFileResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteThreadError(const OAIDeleteThreadResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAssistantError(const OAIAssistantObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAssistantFileError(const OAIAssistantFileObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getMessageError(const OAIMessageObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getMessageFileError(const OAIMessageFileObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRunError(const OAIRunObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRunStepError(const OAIRunStepObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getThreadError(const OAIThreadObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void listAssistantFilesError(const OAIListAssistantFilesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void listAssistantsError(const OAIListAssistantsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void listMessageFilesError(const OAIListMessageFilesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void listMessagesError(const OAIListMessagesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void listRunStepsError(const OAIListRunStepsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void listRunsError(const OAIListRunsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void modifyAssistantError(const OAIAssistantObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void modifyMessageError(const OAIMessageObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void modifyRunError(const OAIRunObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void modifyThreadError(const OAIThreadObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void submitToolOuputsToRunError(const OAIRunObject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void cancelRun(QString thread_id, QString run_id);
    void createAssistant(OAICreateAssistantRequest oai_create_assistant_request);
    void createAssistantFile(QString assistant_id, OAICreateAssistantFileRequest oai_create_assistant_file_request);
    void createMessage(QString thread_id, OAICreateMessageRequest oai_create_message_request);
    void createRun(QString thread_id, OAICreateRunRequest oai_create_run_request);
    void createThread(OAICreateThreadRequest oai_create_thread_request);
    void createThreadAndRun(OAICreateThreadAndRunRequest oai_create_thread_and_run_request);
    void deleteAssistant(QString assistant_id);
    void deleteAssistantFile(QString assistant_id, QString file_id);
    void deleteThread(QString thread_id);
    void getAssistant(QString assistant_id);
    void getAssistantFile(QString assistant_id, QString file_id);
    void getMessage(QString thread_id, QString message_id);
    void getMessageFile(QString thread_id, QString message_id, QString file_id);
    void getRun(QString thread_id, QString run_id);
    void getRunStep(QString thread_id, QString run_id, QString step_id);
    void getThread(QString thread_id);
    void listAssistantFiles(QString assistant_id, qint32 limit, QString order, QString after, QString before);
    void listAssistants(qint32 limit, QString order, QString after, QString before);
    void listMessageFiles(QString thread_id, QString message_id, qint32 limit, QString order, QString after, QString before);
    void listMessages(QString thread_id, qint32 limit, QString order, QString after, QString before, QString run_id);
    void listRunSteps(QString thread_id, QString run_id, qint32 limit, QString order, QString after, QString before);
    void listRuns(QString thread_id, qint32 limit, QString order, QString after, QString before);
    void modifyAssistant(QString assistant_id, OAIModifyAssistantRequest oai_modify_assistant_request);
    void modifyMessage(QString thread_id, QString message_id, OAIModifyMessageRequest oai_modify_message_request);
    void modifyRun(QString thread_id, QString run_id, OAIModifyRunRequest oai_modify_run_request);
    void modifyThread(QString thread_id, OAIModifyThreadRequest oai_modify_thread_request);
    void submitToolOuputsToRun(QString thread_id, QString run_id, OAISubmitToolOutputsRunRequest oai_submit_tool_outputs_run_request);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIAssistantsApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIAssistantsApiRequest_H
