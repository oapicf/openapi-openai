/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIAudioApiRequest.h"

namespace OpenAPI {

OAIAudioApiRequest::OAIAudioApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIAudioApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIAudioApiRequest::~OAIAudioApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIAudioApiRequest::~OAIAudioApiRequest()";
}

QMap<QString, QString>
OAIAudioApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIAudioApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIAudioApiRequest::getRawSocket(){
    return socket;
}


void OAIAudioApiRequest::createSpeechRequest(){
    qDebug() << "/v1/audio/speech";
    connect(this, &OAIAudioApiRequest::createSpeech, handler.data(), &OAIAudioApiHandler::createSpeech);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICreateSpeechRequest oai_create_speech_request;
    ::OpenAPI::fromJsonValue(oai_create_speech_request, obj);
    

    Q_EMIT createSpeech(oai_create_speech_request);
}


void OAIAudioApiRequest::createTranscriptionRequest(){
    qDebug() << "/v1/audio/transcriptions";
    connect(this, &OAIAudioApiRequest::createTranscription, handler.data(), &OAIAudioApiHandler::createTranscription);

    

    OAIHttpFileElement file;
    OAICreateTranscriptionRequest_model model;
    QString language;
    QString prompt;
    QString response_format;
    double temperature;
    QList<QString> timestamp_granularities;

    Q_EMIT createTranscription(file, model, language, prompt, response_format, temperature, timestamp_granularities);
}


void OAIAudioApiRequest::createTranslationRequest(){
    qDebug() << "/v1/audio/translations";
    connect(this, &OAIAudioApiRequest::createTranslation, handler.data(), &OAIAudioApiHandler::createTranslation);

    

    OAIHttpFileElement file;
    OAICreateTranscriptionRequest_model model;
    QString prompt;
    QString response_format;
    double temperature;

    Q_EMIT createTranslation(file, model, prompt, response_format, temperature);
}



void OAIAudioApiRequest::createSpeechResponse(const OAIHttpFileElement& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAudioApiRequest::createTranscriptionResponse(const OAICreateTranscription_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAudioApiRequest::createTranslationResponse(const OAICreateTranslation_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIAudioApiRequest::createSpeechError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAudioApiRequest::createTranscriptionError(const OAICreateTranscription_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAudioApiRequest::createTranslationError(const OAICreateTranslation_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIAudioApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAudioApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
