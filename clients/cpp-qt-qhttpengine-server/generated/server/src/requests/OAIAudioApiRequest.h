/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAudioApiRequest_H
#define OAI_OAIAudioApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAICreateSpeechRequest.h"
#include "OAICreateTranscriptionRequest_model.h"
#include "OAICreateTranscription_200_response.h"
#include "OAICreateTranslation_200_response.h"
#include "OAIHttpFileElement.h"
#include <QString>
#include "OAIAudioApiHandler.h"

namespace OpenAPI {

class OAIAudioApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIAudioApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIAudioApiHandler> handler);
    virtual ~OAIAudioApiRequest();

    void createSpeechRequest();
    void createTranscriptionRequest();
    void createTranslationRequest();
    

    void createSpeechResponse(const OAIHttpFileElement& res);
    void createTranscriptionResponse(const OAICreateTranscription_200_response& res);
    void createTranslationResponse(const OAICreateTranslation_200_response& res);
    

    void createSpeechError(const OAIHttpFileElement& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createTranscriptionError(const OAICreateTranscription_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createTranslationError(const OAICreateTranslation_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void createSpeech(OAICreateSpeechRequest oai_create_speech_request);
    void createTranscription(OAIHttpFileElement file, OAICreateTranscriptionRequest_model model, QString language, QString prompt, QString response_format, double temperature, QList<QString> timestamp_granularities);
    void createTranslation(OAIHttpFileElement file, OAICreateTranscriptionRequest_model model, QString prompt, QString response_format, double temperature);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIAudioApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIAudioApiRequest_H
