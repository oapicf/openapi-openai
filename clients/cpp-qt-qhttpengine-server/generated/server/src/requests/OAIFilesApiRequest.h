/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFilesApiRequest_H
#define OAI_OAIFilesApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIDeleteFileResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIListFilesResponse.h"
#include "OAIOpenAIFile.h"
#include <QString>
#include "OAIFilesApiHandler.h"

namespace OpenAPI {

class OAIFilesApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIFilesApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIFilesApiHandler> handler);
    virtual ~OAIFilesApiRequest();

    void createFileRequest();
    void deleteFileRequest(const QString& file_id);
    void downloadFileRequest(const QString& file_id);
    void listFilesRequest();
    void retrieveFileRequest(const QString& file_id);
    

    void createFileResponse(const OAIOpenAIFile& res);
    void deleteFileResponse(const OAIDeleteFileResponse& res);
    void downloadFileResponse(const QString& res);
    void listFilesResponse(const OAIListFilesResponse& res);
    void retrieveFileResponse(const OAIOpenAIFile& res);
    

    void createFileError(const OAIOpenAIFile& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteFileError(const OAIDeleteFileResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void downloadFileError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void listFilesError(const OAIListFilesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void retrieveFileError(const OAIOpenAIFile& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void createFile(OAIHttpFileElement file, QString purpose);
    void deleteFile(QString file_id);
    void downloadFile(QString file_id);
    void listFiles(QString purpose);
    void retrieveFile(QString file_id);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIFilesApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIFilesApiRequest_H
