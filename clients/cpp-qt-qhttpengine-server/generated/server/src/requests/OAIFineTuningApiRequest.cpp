/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIFineTuningApiRequest.h"

namespace OpenAPI {

OAIFineTuningApiRequest::OAIFineTuningApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIFineTuningApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIFineTuningApiRequest::~OAIFineTuningApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIFineTuningApiRequest::~OAIFineTuningApiRequest()";
}

QMap<QString, QString>
OAIFineTuningApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIFineTuningApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIFineTuningApiRequest::getRawSocket(){
    return socket;
}


void OAIFineTuningApiRequest::cancelFineTuningJobRequest(const QString& fine_tuning_job_idstr){
    qDebug() << "/v1/fine_tuning/jobs/{fine_tuning_job_id}/cancel";
    connect(this, &OAIFineTuningApiRequest::cancelFineTuningJob, handler.data(), &OAIFineTuningApiHandler::cancelFineTuningJob);

    
    QString fine_tuning_job_id;
    fromStringValue(fine_tuning_job_idstr, fine_tuning_job_id);
    

    Q_EMIT cancelFineTuningJob(fine_tuning_job_id);
}


void OAIFineTuningApiRequest::createFineTuningJobRequest(){
    qDebug() << "/v1/fine_tuning/jobs";
    connect(this, &OAIFineTuningApiRequest::createFineTuningJob, handler.data(), &OAIFineTuningApiHandler::createFineTuningJob);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICreateFineTuningJobRequest oai_create_fine_tuning_job_request;
    ::OpenAPI::fromJsonValue(oai_create_fine_tuning_job_request, obj);
    

    Q_EMIT createFineTuningJob(oai_create_fine_tuning_job_request);
}


void OAIFineTuningApiRequest::listFineTuningEventsRequest(const QString& fine_tuning_job_idstr){
    qDebug() << "/v1/fine_tuning/jobs/{fine_tuning_job_id}/events";
    connect(this, &OAIFineTuningApiRequest::listFineTuningEvents, handler.data(), &OAIFineTuningApiHandler::listFineTuningEvents);

    
    QString after;
    if(socket->queryString().keys().contains("after")){
        fromStringValue(socket->queryString().value("after"), after);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    QString fine_tuning_job_id;
    fromStringValue(fine_tuning_job_idstr, fine_tuning_job_id);
    

    Q_EMIT listFineTuningEvents(fine_tuning_job_id, after, limit);
}


void OAIFineTuningApiRequest::listFineTuningJobCheckpointsRequest(const QString& fine_tuning_job_idstr){
    qDebug() << "/v1/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints";
    connect(this, &OAIFineTuningApiRequest::listFineTuningJobCheckpoints, handler.data(), &OAIFineTuningApiHandler::listFineTuningJobCheckpoints);

    
    QString after;
    if(socket->queryString().keys().contains("after")){
        fromStringValue(socket->queryString().value("after"), after);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    QString fine_tuning_job_id;
    fromStringValue(fine_tuning_job_idstr, fine_tuning_job_id);
    

    Q_EMIT listFineTuningJobCheckpoints(fine_tuning_job_id, after, limit);
}


void OAIFineTuningApiRequest::listPaginatedFineTuningJobsRequest(){
    qDebug() << "/v1/fine_tuning/jobs";
    connect(this, &OAIFineTuningApiRequest::listPaginatedFineTuningJobs, handler.data(), &OAIFineTuningApiHandler::listPaginatedFineTuningJobs);

    
    QString after;
    if(socket->queryString().keys().contains("after")){
        fromStringValue(socket->queryString().value("after"), after);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    


    Q_EMIT listPaginatedFineTuningJobs(after, limit);
}


void OAIFineTuningApiRequest::retrieveFineTuningJobRequest(const QString& fine_tuning_job_idstr){
    qDebug() << "/v1/fine_tuning/jobs/{fine_tuning_job_id}";
    connect(this, &OAIFineTuningApiRequest::retrieveFineTuningJob, handler.data(), &OAIFineTuningApiHandler::retrieveFineTuningJob);

    
    QString fine_tuning_job_id;
    fromStringValue(fine_tuning_job_idstr, fine_tuning_job_id);
    

    Q_EMIT retrieveFineTuningJob(fine_tuning_job_id);
}



void OAIFineTuningApiRequest::cancelFineTuningJobResponse(const OAIFineTuningJob& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFineTuningApiRequest::createFineTuningJobResponse(const OAIFineTuningJob& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFineTuningApiRequest::listFineTuningEventsResponse(const OAIListFineTuningJobEventsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFineTuningApiRequest::listFineTuningJobCheckpointsResponse(const OAIListFineTuningJobCheckpointsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFineTuningApiRequest::listPaginatedFineTuningJobsResponse(const OAIListPaginatedFineTuningJobsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFineTuningApiRequest::retrieveFineTuningJobResponse(const OAIFineTuningJob& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIFineTuningApiRequest::cancelFineTuningJobError(const OAIFineTuningJob& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFineTuningApiRequest::createFineTuningJobError(const OAIFineTuningJob& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFineTuningApiRequest::listFineTuningEventsError(const OAIListFineTuningJobEventsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFineTuningApiRequest::listFineTuningJobCheckpointsError(const OAIListFineTuningJobCheckpointsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFineTuningApiRequest::listPaginatedFineTuningJobsError(const OAIListPaginatedFineTuningJobsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFineTuningApiRequest::retrieveFineTuningJobError(const OAIFineTuningJob& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIFineTuningApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIFineTuningApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
