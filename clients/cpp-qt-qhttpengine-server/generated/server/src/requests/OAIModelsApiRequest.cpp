/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIModelsApiRequest.h"

namespace OpenAPI {

OAIModelsApiRequest::OAIModelsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIModelsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIModelsApiRequest::~OAIModelsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIModelsApiRequest::~OAIModelsApiRequest()";
}

QMap<QString, QString>
OAIModelsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIModelsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIModelsApiRequest::getRawSocket(){
    return socket;
}


void OAIModelsApiRequest::deleteModelRequest(const QString& modelstr){
    qDebug() << "/v1/models/{model}";
    connect(this, &OAIModelsApiRequest::deleteModel, handler.data(), &OAIModelsApiHandler::deleteModel);

    
    QString model;
    fromStringValue(modelstr, model);
    

    Q_EMIT deleteModel(model);
}


void OAIModelsApiRequest::listModelsRequest(){
    qDebug() << "/v1/models";
    connect(this, &OAIModelsApiRequest::listModels, handler.data(), &OAIModelsApiHandler::listModels);

    


    Q_EMIT listModels();
}


void OAIModelsApiRequest::retrieveModelRequest(const QString& modelstr){
    qDebug() << "/v1/models/{model}";
    connect(this, &OAIModelsApiRequest::retrieveModel, handler.data(), &OAIModelsApiHandler::retrieveModel);

    
    QString model;
    fromStringValue(modelstr, model);
    

    Q_EMIT retrieveModel(model);
}



void OAIModelsApiRequest::deleteModelResponse(const OAIDeleteModelResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIModelsApiRequest::listModelsResponse(const OAIListModelsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIModelsApiRequest::retrieveModelResponse(const OAIModel& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIModelsApiRequest::deleteModelError(const OAIDeleteModelResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIModelsApiRequest::listModelsError(const OAIListModelsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIModelsApiRequest::retrieveModelError(const OAIModel& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIModelsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIModelsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
