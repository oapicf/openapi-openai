/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIOpenAIApiRequest.h"

namespace OpenAPI {

OAIOpenAIApiRequest::OAIOpenAIApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIOpenAIApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIOpenAIApiRequest::~OAIOpenAIApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIOpenAIApiRequest::~OAIOpenAIApiRequest()";
}

QMap<QString, QString>
OAIOpenAIApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIOpenAIApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIOpenAIApiRequest::getRawSocket(){
    return socket;
}


void OAIOpenAIApiRequest::cancelFineTuneRequest(const QString& fine_tune_idstr){
    qDebug() << "/v1/fine-tunes/{fine_tune_id}/cancel";
    connect(this, &OAIOpenAIApiRequest::cancelFineTune, handler.data(), &OAIOpenAIApiHandler::cancelFineTune);

    
    QString fine_tune_id;
    fromStringValue(fine_tune_idstr, fine_tune_id);
    

    Q_EMIT cancelFineTune(fine_tune_id);
}


void OAIOpenAIApiRequest::createChatCompletionRequest(){
    qDebug() << "/v1/chat/completions";
    connect(this, &OAIOpenAIApiRequest::createChatCompletion, handler.data(), &OAIOpenAIApiHandler::createChatCompletion);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICreateChatCompletionRequest oai_create_chat_completion_request;
    ::OpenAPI::fromJsonValue(oai_create_chat_completion_request, obj);
    

    Q_EMIT createChatCompletion(oai_create_chat_completion_request);
}


void OAIOpenAIApiRequest::createCompletionRequest(){
    qDebug() << "/v1/completions";
    connect(this, &OAIOpenAIApiRequest::createCompletion, handler.data(), &OAIOpenAIApiHandler::createCompletion);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICreateCompletionRequest oai_create_completion_request;
    ::OpenAPI::fromJsonValue(oai_create_completion_request, obj);
    

    Q_EMIT createCompletion(oai_create_completion_request);
}


void OAIOpenAIApiRequest::createEditRequest(){
    qDebug() << "/v1/edits";
    connect(this, &OAIOpenAIApiRequest::createEdit, handler.data(), &OAIOpenAIApiHandler::createEdit);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICreateEditRequest oai_create_edit_request;
    ::OpenAPI::fromJsonValue(oai_create_edit_request, obj);
    

    Q_EMIT createEdit(oai_create_edit_request);
}


void OAIOpenAIApiRequest::createEmbeddingRequest(){
    qDebug() << "/v1/embeddings";
    connect(this, &OAIOpenAIApiRequest::createEmbedding, handler.data(), &OAIOpenAIApiHandler::createEmbedding);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICreateEmbeddingRequest oai_create_embedding_request;
    ::OpenAPI::fromJsonValue(oai_create_embedding_request, obj);
    

    Q_EMIT createEmbedding(oai_create_embedding_request);
}


void OAIOpenAIApiRequest::createFileRequest(){
    qDebug() << "/v1/files";
    connect(this, &OAIOpenAIApiRequest::createFile, handler.data(), &OAIOpenAIApiHandler::createFile);

    

    OAIHttpFileElement file;
    QString purpose;

    Q_EMIT createFile(file, purpose);
}


void OAIOpenAIApiRequest::createFineTuneRequest(){
    qDebug() << "/v1/fine-tunes";
    connect(this, &OAIOpenAIApiRequest::createFineTune, handler.data(), &OAIOpenAIApiHandler::createFineTune);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICreateFineTuneRequest oai_create_fine_tune_request;
    ::OpenAPI::fromJsonValue(oai_create_fine_tune_request, obj);
    

    Q_EMIT createFineTune(oai_create_fine_tune_request);
}


void OAIOpenAIApiRequest::createImageRequest(){
    qDebug() << "/v1/images/generations";
    connect(this, &OAIOpenAIApiRequest::createImage, handler.data(), &OAIOpenAIApiHandler::createImage);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICreateImageRequest oai_create_image_request;
    ::OpenAPI::fromJsonValue(oai_create_image_request, obj);
    

    Q_EMIT createImage(oai_create_image_request);
}


void OAIOpenAIApiRequest::createImageEditRequest(){
    qDebug() << "/v1/images/edits";
    connect(this, &OAIOpenAIApiRequest::createImageEdit, handler.data(), &OAIOpenAIApiHandler::createImageEdit);

    

    OAIHttpFileElement image;
    OAIHttpFileElement mask;
    QString prompt;
    qint32 n;
    QString size;
    QString response_format;
    QString user;

    Q_EMIT createImageEdit(image, prompt, mask, n, size, response_format, user);
}


void OAIOpenAIApiRequest::createImageVariationRequest(){
    qDebug() << "/v1/images/variations";
    connect(this, &OAIOpenAIApiRequest::createImageVariation, handler.data(), &OAIOpenAIApiHandler::createImageVariation);

    

    OAIHttpFileElement image;
    qint32 n;
    QString size;
    QString response_format;
    QString user;

    Q_EMIT createImageVariation(image, n, size, response_format, user);
}


void OAIOpenAIApiRequest::createModerationRequest(){
    qDebug() << "/v1/moderations";
    connect(this, &OAIOpenAIApiRequest::createModeration, handler.data(), &OAIOpenAIApiHandler::createModeration);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICreateModerationRequest oai_create_moderation_request;
    ::OpenAPI::fromJsonValue(oai_create_moderation_request, obj);
    

    Q_EMIT createModeration(oai_create_moderation_request);
}


void OAIOpenAIApiRequest::createTranscriptionRequest(){
    qDebug() << "/v1/audio/transcriptions";
    connect(this, &OAIOpenAIApiRequest::createTranscription, handler.data(), &OAIOpenAIApiHandler::createTranscription);

    

    OAIHttpFileElement file;
    OAICreateTranscriptionRequest_model model;
    QString prompt;
    QString response_format;
    double temperature;
    QString language;

    Q_EMIT createTranscription(file, model, prompt, response_format, temperature, language);
}


void OAIOpenAIApiRequest::createTranslationRequest(){
    qDebug() << "/v1/audio/translations";
    connect(this, &OAIOpenAIApiRequest::createTranslation, handler.data(), &OAIOpenAIApiHandler::createTranslation);

    

    OAIHttpFileElement file;
    OAICreateTranscriptionRequest_model model;
    QString prompt;
    QString response_format;
    double temperature;

    Q_EMIT createTranslation(file, model, prompt, response_format, temperature);
}


void OAIOpenAIApiRequest::deleteFileRequest(const QString& file_idstr){
    qDebug() << "/v1/files/{file_id}";
    connect(this, &OAIOpenAIApiRequest::deleteFile, handler.data(), &OAIOpenAIApiHandler::deleteFile);

    
    QString file_id;
    fromStringValue(file_idstr, file_id);
    

    Q_EMIT deleteFile(file_id);
}


void OAIOpenAIApiRequest::deleteModelRequest(const QString& modelstr){
    qDebug() << "/v1/models/{model}";
    connect(this, &OAIOpenAIApiRequest::deleteModel, handler.data(), &OAIOpenAIApiHandler::deleteModel);

    
    QString model;
    fromStringValue(modelstr, model);
    

    Q_EMIT deleteModel(model);
}


void OAIOpenAIApiRequest::downloadFileRequest(const QString& file_idstr){
    qDebug() << "/v1/files/{file_id}/content";
    connect(this, &OAIOpenAIApiRequest::downloadFile, handler.data(), &OAIOpenAIApiHandler::downloadFile);

    
    QString file_id;
    fromStringValue(file_idstr, file_id);
    

    Q_EMIT downloadFile(file_id);
}


void OAIOpenAIApiRequest::listFilesRequest(){
    qDebug() << "/v1/files";
    connect(this, &OAIOpenAIApiRequest::listFiles, handler.data(), &OAIOpenAIApiHandler::listFiles);

    


    Q_EMIT listFiles();
}


void OAIOpenAIApiRequest::listFineTuneEventsRequest(const QString& fine_tune_idstr){
    qDebug() << "/v1/fine-tunes/{fine_tune_id}/events";
    connect(this, &OAIOpenAIApiRequest::listFineTuneEvents, handler.data(), &OAIOpenAIApiHandler::listFineTuneEvents);

    
    bool stream;
    if(socket->queryString().keys().contains("stream")){
        fromStringValue(socket->queryString().value("stream"), stream);
    }
    
    QString fine_tune_id;
    fromStringValue(fine_tune_idstr, fine_tune_id);
    

    Q_EMIT listFineTuneEvents(fine_tune_id, stream);
}


void OAIOpenAIApiRequest::listFineTunesRequest(){
    qDebug() << "/v1/fine-tunes";
    connect(this, &OAIOpenAIApiRequest::listFineTunes, handler.data(), &OAIOpenAIApiHandler::listFineTunes);

    


    Q_EMIT listFineTunes();
}


void OAIOpenAIApiRequest::listModelsRequest(){
    qDebug() << "/v1/models";
    connect(this, &OAIOpenAIApiRequest::listModels, handler.data(), &OAIOpenAIApiHandler::listModels);

    


    Q_EMIT listModels();
}


void OAIOpenAIApiRequest::retrieveFileRequest(const QString& file_idstr){
    qDebug() << "/v1/files/{file_id}";
    connect(this, &OAIOpenAIApiRequest::retrieveFile, handler.data(), &OAIOpenAIApiHandler::retrieveFile);

    
    QString file_id;
    fromStringValue(file_idstr, file_id);
    

    Q_EMIT retrieveFile(file_id);
}


void OAIOpenAIApiRequest::retrieveFineTuneRequest(const QString& fine_tune_idstr){
    qDebug() << "/v1/fine-tunes/{fine_tune_id}";
    connect(this, &OAIOpenAIApiRequest::retrieveFineTune, handler.data(), &OAIOpenAIApiHandler::retrieveFineTune);

    
    QString fine_tune_id;
    fromStringValue(fine_tune_idstr, fine_tune_id);
    

    Q_EMIT retrieveFineTune(fine_tune_id);
}


void OAIOpenAIApiRequest::retrieveModelRequest(const QString& modelstr){
    qDebug() << "/v1/models/{model}";
    connect(this, &OAIOpenAIApiRequest::retrieveModel, handler.data(), &OAIOpenAIApiHandler::retrieveModel);

    
    QString model;
    fromStringValue(modelstr, model);
    

    Q_EMIT retrieveModel(model);
}



void OAIOpenAIApiRequest::cancelFineTuneResponse(const OAIFineTune& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createChatCompletionResponse(const OAICreateChatCompletionResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createCompletionResponse(const OAICreateCompletionResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createEditResponse(const OAICreateEditResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createEmbeddingResponse(const OAICreateEmbeddingResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createFileResponse(const OAIOpenAIFile& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createFineTuneResponse(const OAIFineTune& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createImageResponse(const OAIImagesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createImageEditResponse(const OAIImagesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createImageVariationResponse(const OAIImagesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createModerationResponse(const OAICreateModerationResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createTranscriptionResponse(const OAICreateTranscriptionResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createTranslationResponse(const OAICreateTranslationResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::deleteFileResponse(const OAIDeleteFileResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::deleteModelResponse(const OAIDeleteModelResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::downloadFileResponse(const QString& res){
    setSocketResponseHeaders();
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::listFilesResponse(const OAIListFilesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::listFineTuneEventsResponse(const OAIListFineTuneEventsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::listFineTunesResponse(const OAIListFineTunesResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::listModelsResponse(const OAIListModelsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::retrieveFileResponse(const OAIOpenAIFile& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::retrieveFineTuneResponse(const OAIFineTune& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::retrieveModelResponse(const OAIModel& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIOpenAIApiRequest::cancelFineTuneError(const OAIFineTune& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createChatCompletionError(const OAICreateChatCompletionResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createCompletionError(const OAICreateCompletionResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createEditError(const OAICreateEditResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createEmbeddingError(const OAICreateEmbeddingResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createFileError(const OAIOpenAIFile& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createFineTuneError(const OAIFineTune& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createImageError(const OAIImagesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createImageEditError(const OAIImagesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createImageVariationError(const OAIImagesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createModerationError(const OAICreateModerationResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createTranscriptionError(const OAICreateTranscriptionResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::createTranslationError(const OAICreateTranslationResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::deleteFileError(const OAIDeleteFileResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::deleteModelError(const OAIDeleteModelResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::downloadFileError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::listFilesError(const OAIListFilesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::listFineTuneEventsError(const OAIListFineTuneEventsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::listFineTunesError(const OAIListFineTunesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::listModelsError(const OAIListModelsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::retrieveFileError(const OAIOpenAIFile& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::retrieveFineTuneError(const OAIFineTune& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::retrieveModelError(const OAIModel& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIOpenAIApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOpenAIApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
