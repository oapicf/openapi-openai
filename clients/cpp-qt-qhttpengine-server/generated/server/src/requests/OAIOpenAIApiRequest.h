/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOpenAIApiRequest_H
#define OAI_OAIOpenAIApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAICreateChatCompletionRequest.h"
#include "OAICreateChatCompletionResponse.h"
#include "OAICreateCompletionRequest.h"
#include "OAICreateCompletionResponse.h"
#include "OAICreateEditRequest.h"
#include "OAICreateEditResponse.h"
#include "OAICreateEmbeddingRequest.h"
#include "OAICreateEmbeddingResponse.h"
#include "OAICreateFineTuneRequest.h"
#include "OAICreateImageRequest.h"
#include "OAICreateModerationRequest.h"
#include "OAICreateModerationResponse.h"
#include "OAICreateTranscriptionRequest_model.h"
#include "OAICreateTranscriptionResponse.h"
#include "OAICreateTranslationResponse.h"
#include "OAIDeleteFileResponse.h"
#include "OAIDeleteModelResponse.h"
#include "OAIFineTune.h"
#include "OAIHttpFileElement.h"
#include "OAIImagesResponse.h"
#include "OAIListFilesResponse.h"
#include "OAIListFineTuneEventsResponse.h"
#include "OAIListFineTunesResponse.h"
#include "OAIListModelsResponse.h"
#include "OAIModel.h"
#include "OAIOpenAIFile.h"
#include <QString>
#include "OAIOpenAIApiHandler.h"

namespace OpenAPI {

class OAIOpenAIApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIOpenAIApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIOpenAIApiHandler> handler);
    virtual ~OAIOpenAIApiRequest();

    void cancelFineTuneRequest(const QString& fine_tune_id);
    void createChatCompletionRequest();
    void createCompletionRequest();
    void createEditRequest();
    void createEmbeddingRequest();
    void createFileRequest();
    void createFineTuneRequest();
    void createImageRequest();
    void createImageEditRequest();
    void createImageVariationRequest();
    void createModerationRequest();
    void createTranscriptionRequest();
    void createTranslationRequest();
    void deleteFileRequest(const QString& file_id);
    void deleteModelRequest(const QString& model);
    void downloadFileRequest(const QString& file_id);
    void listFilesRequest();
    void listFineTuneEventsRequest(const QString& fine_tune_id);
    void listFineTunesRequest();
    void listModelsRequest();
    void retrieveFileRequest(const QString& file_id);
    void retrieveFineTuneRequest(const QString& fine_tune_id);
    void retrieveModelRequest(const QString& model);
    

    void cancelFineTuneResponse(const OAIFineTune& res);
    void createChatCompletionResponse(const OAICreateChatCompletionResponse& res);
    void createCompletionResponse(const OAICreateCompletionResponse& res);
    void createEditResponse(const OAICreateEditResponse& res);
    void createEmbeddingResponse(const OAICreateEmbeddingResponse& res);
    void createFileResponse(const OAIOpenAIFile& res);
    void createFineTuneResponse(const OAIFineTune& res);
    void createImageResponse(const OAIImagesResponse& res);
    void createImageEditResponse(const OAIImagesResponse& res);
    void createImageVariationResponse(const OAIImagesResponse& res);
    void createModerationResponse(const OAICreateModerationResponse& res);
    void createTranscriptionResponse(const OAICreateTranscriptionResponse& res);
    void createTranslationResponse(const OAICreateTranslationResponse& res);
    void deleteFileResponse(const OAIDeleteFileResponse& res);
    void deleteModelResponse(const OAIDeleteModelResponse& res);
    void downloadFileResponse(const QString& res);
    void listFilesResponse(const OAIListFilesResponse& res);
    void listFineTuneEventsResponse(const OAIListFineTuneEventsResponse& res);
    void listFineTunesResponse(const OAIListFineTunesResponse& res);
    void listModelsResponse(const OAIListModelsResponse& res);
    void retrieveFileResponse(const OAIOpenAIFile& res);
    void retrieveFineTuneResponse(const OAIFineTune& res);
    void retrieveModelResponse(const OAIModel& res);
    

    void cancelFineTuneError(const OAIFineTune& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createChatCompletionError(const OAICreateChatCompletionResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createCompletionError(const OAICreateCompletionResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createEditError(const OAICreateEditResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createEmbeddingError(const OAICreateEmbeddingResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createFileError(const OAIOpenAIFile& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createFineTuneError(const OAIFineTune& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createImageError(const OAIImagesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createImageEditError(const OAIImagesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createImageVariationError(const OAIImagesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createModerationError(const OAICreateModerationResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createTranscriptionError(const OAICreateTranscriptionResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createTranslationError(const OAICreateTranslationResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteFileError(const OAIDeleteFileResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteModelError(const OAIDeleteModelResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void downloadFileError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void listFilesError(const OAIListFilesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void listFineTuneEventsError(const OAIListFineTuneEventsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void listFineTunesError(const OAIListFineTunesResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void listModelsError(const OAIListModelsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void retrieveFileError(const OAIOpenAIFile& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void retrieveFineTuneError(const OAIFineTune& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void retrieveModelError(const OAIModel& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void cancelFineTune(QString fine_tune_id);
    void createChatCompletion(OAICreateChatCompletionRequest oai_create_chat_completion_request);
    void createCompletion(OAICreateCompletionRequest oai_create_completion_request);
    void createEdit(OAICreateEditRequest oai_create_edit_request);
    void createEmbedding(OAICreateEmbeddingRequest oai_create_embedding_request);
    void createFile(OAIHttpFileElement file, QString purpose);
    void createFineTune(OAICreateFineTuneRequest oai_create_fine_tune_request);
    void createImage(OAICreateImageRequest oai_create_image_request);
    void createImageEdit(OAIHttpFileElement image, QString prompt, OAIHttpFileElement mask, qint32 n, QString size, QString response_format, QString user);
    void createImageVariation(OAIHttpFileElement image, qint32 n, QString size, QString response_format, QString user);
    void createModeration(OAICreateModerationRequest oai_create_moderation_request);
    void createTranscription(OAIHttpFileElement file, OAICreateTranscriptionRequest_model model, QString prompt, QString response_format, double temperature, QString language);
    void createTranslation(OAIHttpFileElement file, OAICreateTranscriptionRequest_model model, QString prompt, QString response_format, double temperature);
    void deleteFile(QString file_id);
    void deleteModel(QString model);
    void downloadFile(QString file_id);
    void listFiles();
    void listFineTuneEvents(QString fine_tune_id, bool stream);
    void listFineTunes();
    void listModels();
    void retrieveFile(QString file_id);
    void retrieveFineTune(QString fine_tune_id);
    void retrieveModel(QString model);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIOpenAIApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIOpenAIApiRequest_H
