/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "AssistantsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

AssistantsApiException::AssistantsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int AssistantsApiException::getStatus() const
{
    return m_status;
}
const char* AssistantsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace AssistantsApiResources {
ThreadsThread_idRunsRun_idCancelResource::ThreadsThread_idRunsRun_idCancelResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/threads/{thread_id: .*}/runs/{run_id: .*}/cancel");
	this->set_method_handler("POST",
		std::bind(&ThreadsThread_idRunsRun_idCancelResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ThreadsThread_idRunsRun_idCancelResource::handleAssistantsApiException(const AssistantsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ThreadsThread_idRunsRun_idCancelResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ThreadsThread_idRunsRun_idCancelResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ThreadsThread_idRunsRun_idCancelResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ThreadsThread_idRunsRun_idCancelResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ThreadsThread_idRunsRun_idCancelResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ThreadsThread_idRunsRun_idCancelResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string threadId = request->get_path_parameter("thread_id", "");
    std::string runId = request->get_path_parameter("run_id", "");
    
    int status_code = 500;
    RunObject resultObject = RunObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(threadId, runId);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, RunObject> ThreadsThread_idRunsRun_idCancelResource::handler_POST(
        std::string & threadId, std::string & runId)
{
    return handler_POST_func(threadId, runId);
}


std::string ThreadsThread_idRunsRun_idCancelResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ThreadsThread_idRunsRun_idCancelResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
AssistantsResource::AssistantsResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/assistants");
	this->set_method_handler("POST",
		std::bind(&AssistantsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&AssistantsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> AssistantsResource::handleAssistantsApiException(const AssistantsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> AssistantsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> AssistantsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void AssistantsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void AssistantsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void AssistantsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void AssistantsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto createAssistantRequest = extractJsonModelBodyParam<CreateAssistantRequest>(bodyContent);
    
    int status_code = 500;
    AssistantObject resultObject = AssistantObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(createAssistantRequest);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void AssistantsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the query params
    int32_t limit = request->get_query_parameter("limit", 20);
    std::string order = request->get_query_parameter("order", "desc");
    std::string after = request->get_query_parameter("after", "");
    std::string before = request->get_query_parameter("before", "");
    
    int status_code = 500;
    ListAssistantsResponse resultObject = ListAssistantsResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(limit, order, after, before);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, AssistantObject> AssistantsResource::handler_POST(
        CreateAssistantRequest & createAssistantRequest)
{
    return handler_POST_func(createAssistantRequest);
}

std::pair<int, ListAssistantsResponse> AssistantsResource::handler_GET(
    int32_t & limit, std::string & order, std::string & after, std::string & before)
{
    return handler_GET_func(limit, order, after, before);
}

std::string AssistantsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string AssistantsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
AssistantsAssistant_idFilesResource::AssistantsAssistant_idFilesResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/assistants/{assistant_id: .*}/files");
	this->set_method_handler("POST",
		std::bind(&AssistantsAssistant_idFilesResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&AssistantsAssistant_idFilesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> AssistantsAssistant_idFilesResource::handleAssistantsApiException(const AssistantsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> AssistantsAssistant_idFilesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> AssistantsAssistant_idFilesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void AssistantsAssistant_idFilesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void AssistantsAssistant_idFilesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void AssistantsAssistant_idFilesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void AssistantsAssistant_idFilesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto createAssistantFileRequest = extractJsonModelBodyParam<CreateAssistantFileRequest>(bodyContent);
    // Getting the path params
    std::string assistantId = request->get_path_parameter("assistant_id", "");
    
    int status_code = 500;
    AssistantFileObject resultObject = AssistantFileObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(assistantId, createAssistantFileRequest);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void AssistantsAssistant_idFilesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the path params
    std::string assistantId = request->get_path_parameter("assistant_id", "");
    // Getting the query params
    int32_t limit = request->get_query_parameter("limit", 20);
    std::string order = request->get_query_parameter("order", "desc");
    std::string after = request->get_query_parameter("after", "");
    std::string before = request->get_query_parameter("before", "");
    
    int status_code = 500;
    ListAssistantFilesResponse resultObject = ListAssistantFilesResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(assistantId, limit, order, after, before);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, AssistantFileObject> AssistantsAssistant_idFilesResource::handler_POST(
        std::string & assistantId, CreateAssistantFileRequest & createAssistantFileRequest)
{
    return handler_POST_func(assistantId, createAssistantFileRequest);
}

std::pair<int, ListAssistantFilesResponse> AssistantsAssistant_idFilesResource::handler_GET(
    std::string & assistantId, int32_t & limit, std::string & order, std::string & after, std::string & before)
{
    return handler_GET_func(assistantId, limit, order, after, before);
}

std::string AssistantsAssistant_idFilesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string AssistantsAssistant_idFilesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ThreadsThread_idMessagesResource::ThreadsThread_idMessagesResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/threads/{thread_id: .*}/messages");
	this->set_method_handler("POST",
		std::bind(&ThreadsThread_idMessagesResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&ThreadsThread_idMessagesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ThreadsThread_idMessagesResource::handleAssistantsApiException(const AssistantsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ThreadsThread_idMessagesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ThreadsThread_idMessagesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ThreadsThread_idMessagesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ThreadsThread_idMessagesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ThreadsThread_idMessagesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ThreadsThread_idMessagesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto createMessageRequest = extractJsonModelBodyParam<CreateMessageRequest>(bodyContent);
    // Getting the path params
    std::string threadId = request->get_path_parameter("thread_id", "");
    
    int status_code = 500;
    MessageObject resultObject = MessageObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(threadId, createMessageRequest);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void ThreadsThread_idMessagesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the path params
    std::string threadId = request->get_path_parameter("thread_id", "");
    // Getting the query params
    int32_t limit = request->get_query_parameter("limit", 20);
    std::string order = request->get_query_parameter("order", "desc");
    std::string after = request->get_query_parameter("after", "");
    std::string before = request->get_query_parameter("before", "");
    std::string runId = request->get_query_parameter("runId", "");
    
    int status_code = 500;
    ListMessagesResponse resultObject = ListMessagesResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(threadId, limit, order, after, before, runId);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, MessageObject> ThreadsThread_idMessagesResource::handler_POST(
        std::string & threadId, CreateMessageRequest & createMessageRequest)
{
    return handler_POST_func(threadId, createMessageRequest);
}

std::pair<int, ListMessagesResponse> ThreadsThread_idMessagesResource::handler_GET(
    std::string & threadId, int32_t & limit, std::string & order, std::string & after, std::string & before, std::string & runId)
{
    return handler_GET_func(threadId, limit, order, after, before, runId);
}

std::string ThreadsThread_idMessagesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ThreadsThread_idMessagesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ThreadsThread_idRunsResource::ThreadsThread_idRunsResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/threads/{thread_id: .*}/runs");
	this->set_method_handler("POST",
		std::bind(&ThreadsThread_idRunsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&ThreadsThread_idRunsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ThreadsThread_idRunsResource::handleAssistantsApiException(const AssistantsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ThreadsThread_idRunsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ThreadsThread_idRunsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ThreadsThread_idRunsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ThreadsThread_idRunsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ThreadsThread_idRunsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ThreadsThread_idRunsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto createRunRequest = extractJsonModelBodyParam<CreateRunRequest>(bodyContent);
    // Getting the path params
    std::string threadId = request->get_path_parameter("thread_id", "");
    
    int status_code = 500;
    RunObject resultObject = RunObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(threadId, createRunRequest);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void ThreadsThread_idRunsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the path params
    std::string threadId = request->get_path_parameter("thread_id", "");
    // Getting the query params
    int32_t limit = request->get_query_parameter("limit", 20);
    std::string order = request->get_query_parameter("order", "desc");
    std::string after = request->get_query_parameter("after", "");
    std::string before = request->get_query_parameter("before", "");
    
    int status_code = 500;
    ListRunsResponse resultObject = ListRunsResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(threadId, limit, order, after, before);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, RunObject> ThreadsThread_idRunsResource::handler_POST(
        std::string & threadId, CreateRunRequest & createRunRequest)
{
    return handler_POST_func(threadId, createRunRequest);
}

std::pair<int, ListRunsResponse> ThreadsThread_idRunsResource::handler_GET(
    std::string & threadId, int32_t & limit, std::string & order, std::string & after, std::string & before)
{
    return handler_GET_func(threadId, limit, order, after, before);
}

std::string ThreadsThread_idRunsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ThreadsThread_idRunsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ThreadsResource::ThreadsResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/threads");
	this->set_method_handler("POST",
		std::bind(&ThreadsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ThreadsResource::handleAssistantsApiException(const AssistantsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ThreadsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ThreadsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ThreadsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ThreadsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ThreadsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ThreadsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto createThreadRequest = extractJsonModelBodyParam<CreateThreadRequest>(bodyContent);
    
    int status_code = 500;
    ThreadObject resultObject = ThreadObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(createThreadRequest);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, ThreadObject> ThreadsResource::handler_POST(
        CreateThreadRequest & createThreadRequest)
{
    return handler_POST_func(createThreadRequest);
}


std::string ThreadsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ThreadsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ThreadsRunsResource::ThreadsRunsResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/threads/runs");
	this->set_method_handler("POST",
		std::bind(&ThreadsRunsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ThreadsRunsResource::handleAssistantsApiException(const AssistantsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ThreadsRunsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ThreadsRunsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ThreadsRunsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ThreadsRunsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ThreadsRunsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ThreadsRunsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto createThreadAndRunRequest = extractJsonModelBodyParam<CreateThreadAndRunRequest>(bodyContent);
    
    int status_code = 500;
    RunObject resultObject = RunObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(createThreadAndRunRequest);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, RunObject> ThreadsRunsResource::handler_POST(
        CreateThreadAndRunRequest & createThreadAndRunRequest)
{
    return handler_POST_func(createThreadAndRunRequest);
}


std::string ThreadsRunsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ThreadsRunsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
AssistantsAssistant_idResource::AssistantsAssistant_idResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/assistants/{assistant_id: .*}");
	this->set_method_handler("DELETE",
		std::bind(&AssistantsAssistant_idResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&AssistantsAssistant_idResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&AssistantsAssistant_idResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> AssistantsAssistant_idResource::handleAssistantsApiException(const AssistantsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> AssistantsAssistant_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> AssistantsAssistant_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void AssistantsAssistant_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void AssistantsAssistant_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void AssistantsAssistant_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void AssistantsAssistant_idResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string assistantId = request->get_path_parameter("assistant_id", "");
    
    int status_code = 500;
    DeleteAssistantResponse resultObject = DeleteAssistantResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_DELETE(assistantId);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void AssistantsAssistant_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the path params
    std::string assistantId = request->get_path_parameter("assistant_id", "");
    
    int status_code = 500;
    AssistantObject resultObject = AssistantObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(assistantId);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}
// x-extension
void AssistantsAssistant_idResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto modifyAssistantRequest = extractJsonModelBodyParam<ModifyAssistantRequest>(bodyContent);
    // Getting the path params
    std::string assistantId = request->get_path_parameter("assistant_id", "");
    
    int status_code = 500;
    AssistantObject resultObject = AssistantObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(assistantId, modifyAssistantRequest);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, DeleteAssistantResponse> AssistantsAssistant_idResource::handler_DELETE(
        std::string & assistantId)
{
    return handler_DELETE_func(assistantId);
}

std::pair<int, AssistantObject> AssistantsAssistant_idResource::handler_GET(
    std::string & assistantId)
{
    return handler_GET_func(assistantId);
}
std::pair<int, AssistantObject> AssistantsAssistant_idResource::handler_POST(
    std::string & assistantId, ModifyAssistantRequest & modifyAssistantRequest)
{
    return handler_POST_func(assistantId, modifyAssistantRequest);
}

std::string AssistantsAssistant_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string AssistantsAssistant_idResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
AssistantsAssistant_idFilesFile_idResource::AssistantsAssistant_idFilesFile_idResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/assistants/{assistant_id: .*}/files/{file_id: .*}");
	this->set_method_handler("DELETE",
		std::bind(&AssistantsAssistant_idFilesFile_idResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&AssistantsAssistant_idFilesFile_idResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> AssistantsAssistant_idFilesFile_idResource::handleAssistantsApiException(const AssistantsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> AssistantsAssistant_idFilesFile_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> AssistantsAssistant_idFilesFile_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void AssistantsAssistant_idFilesFile_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void AssistantsAssistant_idFilesFile_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void AssistantsAssistant_idFilesFile_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void AssistantsAssistant_idFilesFile_idResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string assistantId = request->get_path_parameter("assistant_id", "");
    std::string fileId = request->get_path_parameter("file_id", "");
    
    int status_code = 500;
    DeleteAssistantFileResponse resultObject = DeleteAssistantFileResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_DELETE(assistantId, fileId);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void AssistantsAssistant_idFilesFile_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the path params
    std::string assistantId = request->get_path_parameter("assistant_id", "");
    std::string fileId = request->get_path_parameter("file_id", "");
    
    int status_code = 500;
    AssistantFileObject resultObject = AssistantFileObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(assistantId, fileId);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, DeleteAssistantFileResponse> AssistantsAssistant_idFilesFile_idResource::handler_DELETE(
        std::string & assistantId, std::string & fileId)
{
    return handler_DELETE_func(assistantId, fileId);
}

std::pair<int, AssistantFileObject> AssistantsAssistant_idFilesFile_idResource::handler_GET(
    std::string & assistantId, std::string & fileId)
{
    return handler_GET_func(assistantId, fileId);
}

std::string AssistantsAssistant_idFilesFile_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string AssistantsAssistant_idFilesFile_idResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ThreadsThread_idResource::ThreadsThread_idResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/threads/{thread_id: .*}");
	this->set_method_handler("DELETE",
		std::bind(&ThreadsThread_idResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&ThreadsThread_idResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&ThreadsThread_idResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ThreadsThread_idResource::handleAssistantsApiException(const AssistantsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ThreadsThread_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ThreadsThread_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ThreadsThread_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ThreadsThread_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ThreadsThread_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ThreadsThread_idResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string threadId = request->get_path_parameter("thread_id", "");
    
    int status_code = 500;
    DeleteThreadResponse resultObject = DeleteThreadResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_DELETE(threadId);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void ThreadsThread_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the path params
    std::string threadId = request->get_path_parameter("thread_id", "");
    
    int status_code = 500;
    ThreadObject resultObject = ThreadObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(threadId);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}
// x-extension
void ThreadsThread_idResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto modifyThreadRequest = extractJsonModelBodyParam<ModifyThreadRequest>(bodyContent);
    // Getting the path params
    std::string threadId = request->get_path_parameter("thread_id", "");
    
    int status_code = 500;
    ThreadObject resultObject = ThreadObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(threadId, modifyThreadRequest);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, DeleteThreadResponse> ThreadsThread_idResource::handler_DELETE(
        std::string & threadId)
{
    return handler_DELETE_func(threadId);
}

std::pair<int, ThreadObject> ThreadsThread_idResource::handler_GET(
    std::string & threadId)
{
    return handler_GET_func(threadId);
}
std::pair<int, ThreadObject> ThreadsThread_idResource::handler_POST(
    std::string & threadId, ModifyThreadRequest & modifyThreadRequest)
{
    return handler_POST_func(threadId, modifyThreadRequest);
}

std::string ThreadsThread_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ThreadsThread_idResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ThreadsThread_idMessagesMessage_idResource::ThreadsThread_idMessagesMessage_idResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/threads/{thread_id: .*}/messages/{message_id: .*}");
	this->set_method_handler("GET",
		std::bind(&ThreadsThread_idMessagesMessage_idResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&ThreadsThread_idMessagesMessage_idResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ThreadsThread_idMessagesMessage_idResource::handleAssistantsApiException(const AssistantsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ThreadsThread_idMessagesMessage_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ThreadsThread_idMessagesMessage_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ThreadsThread_idMessagesMessage_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ThreadsThread_idMessagesMessage_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ThreadsThread_idMessagesMessage_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ThreadsThread_idMessagesMessage_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string threadId = request->get_path_parameter("thread_id", "");
    std::string messageId = request->get_path_parameter("message_id", "");
    
    int status_code = 500;
    MessageObject resultObject = MessageObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(threadId, messageId);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void ThreadsThread_idMessagesMessage_idResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto modifyMessageRequest = extractJsonModelBodyParam<ModifyMessageRequest>(bodyContent);
    // Getting the path params
    std::string threadId = request->get_path_parameter("thread_id", "");
    std::string messageId = request->get_path_parameter("message_id", "");
    
    int status_code = 500;
    MessageObject resultObject = MessageObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(threadId, messageId, modifyMessageRequest);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, MessageObject> ThreadsThread_idMessagesMessage_idResource::handler_GET(
        std::string & threadId, std::string & messageId)
{
    return handler_GET_func(threadId, messageId);
}

std::pair<int, MessageObject> ThreadsThread_idMessagesMessage_idResource::handler_POST(
    std::string & threadId, std::string & messageId, ModifyMessageRequest & modifyMessageRequest)
{
    return handler_POST_func(threadId, messageId, modifyMessageRequest);
}

std::string ThreadsThread_idMessagesMessage_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ThreadsThread_idMessagesMessage_idResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ThreadsThread_idMessagesMessage_idFilesFile_idResource::ThreadsThread_idMessagesMessage_idFilesFile_idResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/threads/{thread_id: .*}/messages/{message_id: .*}/files/{file_id: .*}");
	this->set_method_handler("GET",
		std::bind(&ThreadsThread_idMessagesMessage_idFilesFile_idResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ThreadsThread_idMessagesMessage_idFilesFile_idResource::handleAssistantsApiException(const AssistantsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ThreadsThread_idMessagesMessage_idFilesFile_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ThreadsThread_idMessagesMessage_idFilesFile_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ThreadsThread_idMessagesMessage_idFilesFile_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ThreadsThread_idMessagesMessage_idFilesFile_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ThreadsThread_idMessagesMessage_idFilesFile_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ThreadsThread_idMessagesMessage_idFilesFile_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string threadId = request->get_path_parameter("thread_id", "");
    std::string messageId = request->get_path_parameter("message_id", "");
    std::string fileId = request->get_path_parameter("file_id", "");
    
    int status_code = 500;
    MessageFileObject resultObject = MessageFileObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(threadId, messageId, fileId);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, MessageFileObject> ThreadsThread_idMessagesMessage_idFilesFile_idResource::handler_GET(
        std::string & threadId, std::string & messageId, std::string & fileId)
{
    return handler_GET_func(threadId, messageId, fileId);
}


std::string ThreadsThread_idMessagesMessage_idFilesFile_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ThreadsThread_idMessagesMessage_idFilesFile_idResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ThreadsThread_idRunsRun_idResource::ThreadsThread_idRunsRun_idResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/threads/{thread_id: .*}/runs/{run_id: .*}");
	this->set_method_handler("GET",
		std::bind(&ThreadsThread_idRunsRun_idResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&ThreadsThread_idRunsRun_idResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ThreadsThread_idRunsRun_idResource::handleAssistantsApiException(const AssistantsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ThreadsThread_idRunsRun_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ThreadsThread_idRunsRun_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ThreadsThread_idRunsRun_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ThreadsThread_idRunsRun_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ThreadsThread_idRunsRun_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ThreadsThread_idRunsRun_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string threadId = request->get_path_parameter("thread_id", "");
    std::string runId = request->get_path_parameter("run_id", "");
    
    int status_code = 500;
    RunObject resultObject = RunObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(threadId, runId);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void ThreadsThread_idRunsRun_idResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto modifyRunRequest = extractJsonModelBodyParam<ModifyRunRequest>(bodyContent);
    // Getting the path params
    std::string threadId = request->get_path_parameter("thread_id", "");
    std::string runId = request->get_path_parameter("run_id", "");
    
    int status_code = 500;
    RunObject resultObject = RunObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(threadId, runId, modifyRunRequest);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, RunObject> ThreadsThread_idRunsRun_idResource::handler_GET(
        std::string & threadId, std::string & runId)
{
    return handler_GET_func(threadId, runId);
}

std::pair<int, RunObject> ThreadsThread_idRunsRun_idResource::handler_POST(
    std::string & threadId, std::string & runId, ModifyRunRequest & modifyRunRequest)
{
    return handler_POST_func(threadId, runId, modifyRunRequest);
}

std::string ThreadsThread_idRunsRun_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ThreadsThread_idRunsRun_idResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ThreadsThread_idRunsRun_idStepsStep_idResource::ThreadsThread_idRunsRun_idStepsStep_idResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/threads/{thread_id: .*}/runs/{run_id: .*}/steps/{step_id: .*}");
	this->set_method_handler("GET",
		std::bind(&ThreadsThread_idRunsRun_idStepsStep_idResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ThreadsThread_idRunsRun_idStepsStep_idResource::handleAssistantsApiException(const AssistantsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ThreadsThread_idRunsRun_idStepsStep_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ThreadsThread_idRunsRun_idStepsStep_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ThreadsThread_idRunsRun_idStepsStep_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ThreadsThread_idRunsRun_idStepsStep_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ThreadsThread_idRunsRun_idStepsStep_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ThreadsThread_idRunsRun_idStepsStep_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string threadId = request->get_path_parameter("thread_id", "");
    std::string runId = request->get_path_parameter("run_id", "");
    std::string stepId = request->get_path_parameter("step_id", "");
    
    int status_code = 500;
    RunStepObject resultObject = RunStepObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(threadId, runId, stepId);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, RunStepObject> ThreadsThread_idRunsRun_idStepsStep_idResource::handler_GET(
        std::string & threadId, std::string & runId, std::string & stepId)
{
    return handler_GET_func(threadId, runId, stepId);
}


std::string ThreadsThread_idRunsRun_idStepsStep_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ThreadsThread_idRunsRun_idStepsStep_idResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ThreadsThread_idMessagesMessage_idFilesResource::ThreadsThread_idMessagesMessage_idFilesResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/threads/{thread_id: .*}/messages/{message_id: .*}/files");
	this->set_method_handler("GET",
		std::bind(&ThreadsThread_idMessagesMessage_idFilesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ThreadsThread_idMessagesMessage_idFilesResource::handleAssistantsApiException(const AssistantsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ThreadsThread_idMessagesMessage_idFilesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ThreadsThread_idMessagesMessage_idFilesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ThreadsThread_idMessagesMessage_idFilesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ThreadsThread_idMessagesMessage_idFilesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ThreadsThread_idMessagesMessage_idFilesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ThreadsThread_idMessagesMessage_idFilesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string threadId = request->get_path_parameter("thread_id", "");
    std::string messageId = request->get_path_parameter("message_id", "");
    // Getting the query params
    int32_t limit = request->get_query_parameter("limit", 20);
    std::string order = request->get_query_parameter("order", "desc");
    std::string after = request->get_query_parameter("after", "");
    std::string before = request->get_query_parameter("before", "");
    
    int status_code = 500;
    ListMessageFilesResponse resultObject = ListMessageFilesResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(threadId, messageId, limit, order, after, before);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, ListMessageFilesResponse> ThreadsThread_idMessagesMessage_idFilesResource::handler_GET(
        std::string & threadId, std::string & messageId, int32_t & limit, std::string & order, std::string & after, std::string & before)
{
    return handler_GET_func(threadId, messageId, limit, order, after, before);
}


std::string ThreadsThread_idMessagesMessage_idFilesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ThreadsThread_idMessagesMessage_idFilesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ThreadsThread_idRunsRun_idStepsResource::ThreadsThread_idRunsRun_idStepsResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/threads/{thread_id: .*}/runs/{run_id: .*}/steps");
	this->set_method_handler("GET",
		std::bind(&ThreadsThread_idRunsRun_idStepsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ThreadsThread_idRunsRun_idStepsResource::handleAssistantsApiException(const AssistantsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ThreadsThread_idRunsRun_idStepsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ThreadsThread_idRunsRun_idStepsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ThreadsThread_idRunsRun_idStepsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ThreadsThread_idRunsRun_idStepsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ThreadsThread_idRunsRun_idStepsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ThreadsThread_idRunsRun_idStepsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string threadId = request->get_path_parameter("thread_id", "");
    std::string runId = request->get_path_parameter("run_id", "");
    // Getting the query params
    int32_t limit = request->get_query_parameter("limit", 20);
    std::string order = request->get_query_parameter("order", "desc");
    std::string after = request->get_query_parameter("after", "");
    std::string before = request->get_query_parameter("before", "");
    
    int status_code = 500;
    ListRunStepsResponse resultObject = ListRunStepsResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(threadId, runId, limit, order, after, before);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, ListRunStepsResponse> ThreadsThread_idRunsRun_idStepsResource::handler_GET(
        std::string & threadId, std::string & runId, int32_t & limit, std::string & order, std::string & after, std::string & before)
{
    return handler_GET_func(threadId, runId, limit, order, after, before);
}


std::string ThreadsThread_idRunsRun_idStepsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ThreadsThread_idRunsRun_idStepsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ThreadsThread_idRunsRun_idSubmit_tool_outputsResource::ThreadsThread_idRunsRun_idSubmit_tool_outputsResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/threads/{thread_id: .*}/runs/{run_id: .*}/submit_tool_outputs");
	this->set_method_handler("POST",
		std::bind(&ThreadsThread_idRunsRun_idSubmit_tool_outputsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ThreadsThread_idRunsRun_idSubmit_tool_outputsResource::handleAssistantsApiException(const AssistantsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ThreadsThread_idRunsRun_idSubmit_tool_outputsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ThreadsThread_idRunsRun_idSubmit_tool_outputsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ThreadsThread_idRunsRun_idSubmit_tool_outputsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ThreadsThread_idRunsRun_idSubmit_tool_outputsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ThreadsThread_idRunsRun_idSubmit_tool_outputsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ThreadsThread_idRunsRun_idSubmit_tool_outputsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto submitToolOutputsRunRequest = extractJsonModelBodyParam<SubmitToolOutputsRunRequest>(bodyContent);
    // Getting the path params
    std::string threadId = request->get_path_parameter("thread_id", "");
    std::string runId = request->get_path_parameter("run_id", "");
    
    int status_code = 500;
    RunObject resultObject = RunObject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(threadId, runId, submitToolOutputsRunRequest);
    }
    catch(const AssistantsApiException& e) {
        std::tie(status_code, result) = handleAssistantsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, RunObject> ThreadsThread_idRunsRun_idSubmit_tool_outputsResource::handler_POST(
        std::string & threadId, std::string & runId, SubmitToolOutputsRunRequest & submitToolOutputsRunRequest)
{
    return handler_POST_func(threadId, runId, submitToolOutputsRunRequest);
}


std::string ThreadsThread_idRunsRun_idSubmit_tool_outputsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ThreadsThread_idRunsRun_idSubmit_tool_outputsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace AssistantsApiResources */

AssistantsApi::AssistantsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

AssistantsApi::~AssistantsApi() {}

std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idCancelResource> AssistantsApi::getThreadsThread_idRunsRun_idCancelResource() {
    if (!m_spThreadsThread_idRunsRun_idCancelResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idRunsRun_idCancelResource>());
    }
    return m_spThreadsThread_idRunsRun_idCancelResource;
}
std::shared_ptr<AssistantsApiResources::AssistantsResource> AssistantsApi::getAssistantsResource() {
    if (!m_spAssistantsResource) {
        setResource(std::make_shared<AssistantsApiResources::AssistantsResource>());
    }
    return m_spAssistantsResource;
}
std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idFilesResource> AssistantsApi::getAssistantsAssistant_idFilesResource() {
    if (!m_spAssistantsAssistant_idFilesResource) {
        setResource(std::make_shared<AssistantsApiResources::AssistantsAssistant_idFilesResource>());
    }
    return m_spAssistantsAssistant_idFilesResource;
}
std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesResource> AssistantsApi::getThreadsThread_idMessagesResource() {
    if (!m_spThreadsThread_idMessagesResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idMessagesResource>());
    }
    return m_spThreadsThread_idMessagesResource;
}
std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsResource> AssistantsApi::getThreadsThread_idRunsResource() {
    if (!m_spThreadsThread_idRunsResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idRunsResource>());
    }
    return m_spThreadsThread_idRunsResource;
}
std::shared_ptr<AssistantsApiResources::ThreadsResource> AssistantsApi::getThreadsResource() {
    if (!m_spThreadsResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsResource>());
    }
    return m_spThreadsResource;
}
std::shared_ptr<AssistantsApiResources::ThreadsRunsResource> AssistantsApi::getThreadsRunsResource() {
    if (!m_spThreadsRunsResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsRunsResource>());
    }
    return m_spThreadsRunsResource;
}
std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idResource> AssistantsApi::getAssistantsAssistant_idResource() {
    if (!m_spAssistantsAssistant_idResource) {
        setResource(std::make_shared<AssistantsApiResources::AssistantsAssistant_idResource>());
    }
    return m_spAssistantsAssistant_idResource;
}
std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idFilesFile_idResource> AssistantsApi::getAssistantsAssistant_idFilesFile_idResource() {
    if (!m_spAssistantsAssistant_idFilesFile_idResource) {
        setResource(std::make_shared<AssistantsApiResources::AssistantsAssistant_idFilesFile_idResource>());
    }
    return m_spAssistantsAssistant_idFilesFile_idResource;
}
std::shared_ptr<AssistantsApiResources::ThreadsThread_idResource> AssistantsApi::getThreadsThread_idResource() {
    if (!m_spThreadsThread_idResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idResource>());
    }
    return m_spThreadsThread_idResource;
}
std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idResource> AssistantsApi::getThreadsThread_idMessagesMessage_idResource() {
    if (!m_spThreadsThread_idMessagesMessage_idResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idMessagesMessage_idResource>());
    }
    return m_spThreadsThread_idMessagesMessage_idResource;
}
std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesFile_idResource> AssistantsApi::getThreadsThread_idMessagesMessage_idFilesFile_idResource() {
    if (!m_spThreadsThread_idMessagesMessage_idFilesFile_idResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesFile_idResource>());
    }
    return m_spThreadsThread_idMessagesMessage_idFilesFile_idResource;
}
std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idResource> AssistantsApi::getThreadsThread_idRunsRun_idResource() {
    if (!m_spThreadsThread_idRunsRun_idResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idRunsRun_idResource>());
    }
    return m_spThreadsThread_idRunsRun_idResource;
}
std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idStepsStep_idResource> AssistantsApi::getThreadsThread_idRunsRun_idStepsStep_idResource() {
    if (!m_spThreadsThread_idRunsRun_idStepsStep_idResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idRunsRun_idStepsStep_idResource>());
    }
    return m_spThreadsThread_idRunsRun_idStepsStep_idResource;
}
std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesResource> AssistantsApi::getThreadsThread_idMessagesMessage_idFilesResource() {
    if (!m_spThreadsThread_idMessagesMessage_idFilesResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesResource>());
    }
    return m_spThreadsThread_idMessagesMessage_idFilesResource;
}
std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idStepsResource> AssistantsApi::getThreadsThread_idRunsRun_idStepsResource() {
    if (!m_spThreadsThread_idRunsRun_idStepsResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idRunsRun_idStepsResource>());
    }
    return m_spThreadsThread_idRunsRun_idStepsResource;
}
std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idSubmit_tool_outputsResource> AssistantsApi::getThreadsThread_idRunsRun_idSubmit_tool_outputsResource() {
    if (!m_spThreadsThread_idRunsRun_idSubmit_tool_outputsResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idRunsRun_idSubmit_tool_outputsResource>());
    }
    return m_spThreadsThread_idRunsRun_idSubmit_tool_outputsResource;
}
void AssistantsApi::setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idCancelResource> resource) {
    m_spThreadsThread_idRunsRun_idCancelResource = resource;
    m_service->publish(m_spThreadsThread_idRunsRun_idCancelResource);
}
void AssistantsApi::setResource(std::shared_ptr<AssistantsApiResources::AssistantsResource> resource) {
    m_spAssistantsResource = resource;
    m_service->publish(m_spAssistantsResource);
}
void AssistantsApi::setResource(std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idFilesResource> resource) {
    m_spAssistantsAssistant_idFilesResource = resource;
    m_service->publish(m_spAssistantsAssistant_idFilesResource);
}
void AssistantsApi::setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesResource> resource) {
    m_spThreadsThread_idMessagesResource = resource;
    m_service->publish(m_spThreadsThread_idMessagesResource);
}
void AssistantsApi::setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsResource> resource) {
    m_spThreadsThread_idRunsResource = resource;
    m_service->publish(m_spThreadsThread_idRunsResource);
}
void AssistantsApi::setResource(std::shared_ptr<AssistantsApiResources::ThreadsResource> resource) {
    m_spThreadsResource = resource;
    m_service->publish(m_spThreadsResource);
}
void AssistantsApi::setResource(std::shared_ptr<AssistantsApiResources::ThreadsRunsResource> resource) {
    m_spThreadsRunsResource = resource;
    m_service->publish(m_spThreadsRunsResource);
}
void AssistantsApi::setResource(std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idResource> resource) {
    m_spAssistantsAssistant_idResource = resource;
    m_service->publish(m_spAssistantsAssistant_idResource);
}
void AssistantsApi::setResource(std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idFilesFile_idResource> resource) {
    m_spAssistantsAssistant_idFilesFile_idResource = resource;
    m_service->publish(m_spAssistantsAssistant_idFilesFile_idResource);
}
void AssistantsApi::setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idResource> resource) {
    m_spThreadsThread_idResource = resource;
    m_service->publish(m_spThreadsThread_idResource);
}
void AssistantsApi::setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idResource> resource) {
    m_spThreadsThread_idMessagesMessage_idResource = resource;
    m_service->publish(m_spThreadsThread_idMessagesMessage_idResource);
}
void AssistantsApi::setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesFile_idResource> resource) {
    m_spThreadsThread_idMessagesMessage_idFilesFile_idResource = resource;
    m_service->publish(m_spThreadsThread_idMessagesMessage_idFilesFile_idResource);
}
void AssistantsApi::setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idResource> resource) {
    m_spThreadsThread_idRunsRun_idResource = resource;
    m_service->publish(m_spThreadsThread_idRunsRun_idResource);
}
void AssistantsApi::setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idStepsStep_idResource> resource) {
    m_spThreadsThread_idRunsRun_idStepsStep_idResource = resource;
    m_service->publish(m_spThreadsThread_idRunsRun_idStepsStep_idResource);
}
void AssistantsApi::setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesResource> resource) {
    m_spThreadsThread_idMessagesMessage_idFilesResource = resource;
    m_service->publish(m_spThreadsThread_idMessagesMessage_idFilesResource);
}
void AssistantsApi::setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idStepsResource> resource) {
    m_spThreadsThread_idRunsRun_idStepsResource = resource;
    m_service->publish(m_spThreadsThread_idRunsRun_idStepsResource);
}
void AssistantsApi::setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idSubmit_tool_outputsResource> resource) {
    m_spThreadsThread_idRunsRun_idSubmit_tool_outputsResource = resource;
    m_service->publish(m_spThreadsThread_idRunsRun_idSubmit_tool_outputsResource);
}
void AssistantsApi::setAssistantsApiThreadsThread_idRunsRun_idCancelResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idCancelResource> spThreadsThread_idRunsRun_idCancelResource) {
    m_spThreadsThread_idRunsRun_idCancelResource = spThreadsThread_idRunsRun_idCancelResource;
    m_service->publish(m_spThreadsThread_idRunsRun_idCancelResource);
}
void AssistantsApi::setAssistantsApiAssistantsResource(std::shared_ptr<AssistantsApiResources::AssistantsResource> spAssistantsResource) {
    m_spAssistantsResource = spAssistantsResource;
    m_service->publish(m_spAssistantsResource);
}
void AssistantsApi::setAssistantsApiAssistantsAssistant_idFilesResource(std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idFilesResource> spAssistantsAssistant_idFilesResource) {
    m_spAssistantsAssistant_idFilesResource = spAssistantsAssistant_idFilesResource;
    m_service->publish(m_spAssistantsAssistant_idFilesResource);
}
void AssistantsApi::setAssistantsApiThreadsThread_idMessagesResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesResource> spThreadsThread_idMessagesResource) {
    m_spThreadsThread_idMessagesResource = spThreadsThread_idMessagesResource;
    m_service->publish(m_spThreadsThread_idMessagesResource);
}
void AssistantsApi::setAssistantsApiThreadsThread_idRunsResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsResource> spThreadsThread_idRunsResource) {
    m_spThreadsThread_idRunsResource = spThreadsThread_idRunsResource;
    m_service->publish(m_spThreadsThread_idRunsResource);
}
void AssistantsApi::setAssistantsApiThreadsResource(std::shared_ptr<AssistantsApiResources::ThreadsResource> spThreadsResource) {
    m_spThreadsResource = spThreadsResource;
    m_service->publish(m_spThreadsResource);
}
void AssistantsApi::setAssistantsApiThreadsRunsResource(std::shared_ptr<AssistantsApiResources::ThreadsRunsResource> spThreadsRunsResource) {
    m_spThreadsRunsResource = spThreadsRunsResource;
    m_service->publish(m_spThreadsRunsResource);
}
void AssistantsApi::setAssistantsApiAssistantsAssistant_idResource(std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idResource> spAssistantsAssistant_idResource) {
    m_spAssistantsAssistant_idResource = spAssistantsAssistant_idResource;
    m_service->publish(m_spAssistantsAssistant_idResource);
}
void AssistantsApi::setAssistantsApiAssistantsAssistant_idFilesFile_idResource(std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idFilesFile_idResource> spAssistantsAssistant_idFilesFile_idResource) {
    m_spAssistantsAssistant_idFilesFile_idResource = spAssistantsAssistant_idFilesFile_idResource;
    m_service->publish(m_spAssistantsAssistant_idFilesFile_idResource);
}
void AssistantsApi::setAssistantsApiThreadsThread_idResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idResource> spThreadsThread_idResource) {
    m_spThreadsThread_idResource = spThreadsThread_idResource;
    m_service->publish(m_spThreadsThread_idResource);
}
void AssistantsApi::setAssistantsApiThreadsThread_idMessagesMessage_idResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idResource> spThreadsThread_idMessagesMessage_idResource) {
    m_spThreadsThread_idMessagesMessage_idResource = spThreadsThread_idMessagesMessage_idResource;
    m_service->publish(m_spThreadsThread_idMessagesMessage_idResource);
}
void AssistantsApi::setAssistantsApiThreadsThread_idMessagesMessage_idFilesFile_idResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesFile_idResource> spThreadsThread_idMessagesMessage_idFilesFile_idResource) {
    m_spThreadsThread_idMessagesMessage_idFilesFile_idResource = spThreadsThread_idMessagesMessage_idFilesFile_idResource;
    m_service->publish(m_spThreadsThread_idMessagesMessage_idFilesFile_idResource);
}
void AssistantsApi::setAssistantsApiThreadsThread_idRunsRun_idResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idResource> spThreadsThread_idRunsRun_idResource) {
    m_spThreadsThread_idRunsRun_idResource = spThreadsThread_idRunsRun_idResource;
    m_service->publish(m_spThreadsThread_idRunsRun_idResource);
}
void AssistantsApi::setAssistantsApiThreadsThread_idRunsRun_idStepsStep_idResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idStepsStep_idResource> spThreadsThread_idRunsRun_idStepsStep_idResource) {
    m_spThreadsThread_idRunsRun_idStepsStep_idResource = spThreadsThread_idRunsRun_idStepsStep_idResource;
    m_service->publish(m_spThreadsThread_idRunsRun_idStepsStep_idResource);
}
void AssistantsApi::setAssistantsApiThreadsThread_idMessagesMessage_idFilesResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesResource> spThreadsThread_idMessagesMessage_idFilesResource) {
    m_spThreadsThread_idMessagesMessage_idFilesResource = spThreadsThread_idMessagesMessage_idFilesResource;
    m_service->publish(m_spThreadsThread_idMessagesMessage_idFilesResource);
}
void AssistantsApi::setAssistantsApiThreadsThread_idRunsRun_idStepsResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idStepsResource> spThreadsThread_idRunsRun_idStepsResource) {
    m_spThreadsThread_idRunsRun_idStepsResource = spThreadsThread_idRunsRun_idStepsResource;
    m_service->publish(m_spThreadsThread_idRunsRun_idStepsResource);
}
void AssistantsApi::setAssistantsApiThreadsThread_idRunsRun_idSubmit_tool_outputsResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idSubmit_tool_outputsResource> spThreadsThread_idRunsRun_idSubmit_tool_outputsResource) {
    m_spThreadsThread_idRunsRun_idSubmit_tool_outputsResource = spThreadsThread_idRunsRun_idSubmit_tool_outputsResource;
    m_service->publish(m_spThreadsThread_idRunsRun_idSubmit_tool_outputsResource);
}


void AssistantsApi::publishDefaultResources() {
    if (!m_spThreadsThread_idRunsRun_idCancelResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idRunsRun_idCancelResource>());
    }
    if (!m_spAssistantsResource) {
        setResource(std::make_shared<AssistantsApiResources::AssistantsResource>());
    }
    if (!m_spAssistantsAssistant_idFilesResource) {
        setResource(std::make_shared<AssistantsApiResources::AssistantsAssistant_idFilesResource>());
    }
    if (!m_spThreadsThread_idMessagesResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idMessagesResource>());
    }
    if (!m_spThreadsThread_idRunsResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idRunsResource>());
    }
    if (!m_spThreadsResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsResource>());
    }
    if (!m_spThreadsRunsResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsRunsResource>());
    }
    if (!m_spAssistantsAssistant_idResource) {
        setResource(std::make_shared<AssistantsApiResources::AssistantsAssistant_idResource>());
    }
    if (!m_spAssistantsAssistant_idFilesFile_idResource) {
        setResource(std::make_shared<AssistantsApiResources::AssistantsAssistant_idFilesFile_idResource>());
    }
    if (!m_spThreadsThread_idResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idResource>());
    }
    if (!m_spThreadsThread_idMessagesMessage_idResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idMessagesMessage_idResource>());
    }
    if (!m_spThreadsThread_idMessagesMessage_idFilesFile_idResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesFile_idResource>());
    }
    if (!m_spThreadsThread_idRunsRun_idResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idRunsRun_idResource>());
    }
    if (!m_spThreadsThread_idRunsRun_idStepsStep_idResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idRunsRun_idStepsStep_idResource>());
    }
    if (!m_spThreadsThread_idMessagesMessage_idFilesResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesResource>());
    }
    if (!m_spThreadsThread_idRunsRun_idStepsResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idRunsRun_idStepsResource>());
    }
    if (!m_spThreadsThread_idRunsRun_idSubmit_tool_outputsResource) {
        setResource(std::make_shared<AssistantsApiResources::ThreadsThread_idRunsRun_idSubmit_tool_outputsResource>());
    }
}

std::shared_ptr<restbed::Service> AssistantsApi::service() {
    return m_service;
}


}
}
}
}

