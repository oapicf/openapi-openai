/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AssistantsApi.h
 *
 * 
 */

#ifndef AssistantsApi_H_
#define AssistantsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AssistantFileObject.h"
#include "AssistantObject.h"
#include "CreateAssistantFileRequest.h"
#include "CreateAssistantRequest.h"
#include "CreateMessageRequest.h"
#include "CreateRunRequest.h"
#include "CreateThreadAndRunRequest.h"
#include "CreateThreadRequest.h"
#include "DeleteAssistantFileResponse.h"
#include "DeleteAssistantResponse.h"
#include "DeleteThreadResponse.h"
#include "ListAssistantFilesResponse.h"
#include "ListAssistantsResponse.h"
#include "ListMessageFilesResponse.h"
#include "ListMessagesResponse.h"
#include "ListRunStepsResponse.h"
#include "ListRunsResponse.h"
#include "MessageFileObject.h"
#include "MessageObject.h"
#include "ModifyAssistantRequest.h"
#include "ModifyMessageRequest.h"
#include "ModifyRunRequest.h"
#include "ModifyThreadRequest.h"
#include "RunObject.h"
#include "RunStepObject.h"
#include "SubmitToolOutputsRunRequest.h"
#include "ThreadObject.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  AssistantsApiException: public std::exception
{
public:
    AssistantsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace AssistantsApiResources {
/// <summary>
/// Cancels a run that is &#x60;in_progress&#x60;.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ThreadsThread_idRunsRun_idCancelResource: public restbed::Resource
{
public:
    ThreadsThread_idRunsRun_idCancelResource(const std::string& context = "/v1");
    virtual ~ThreadsThread_idRunsRun_idCancelResource() = default;

    ThreadsThread_idRunsRun_idCancelResource(
        const ThreadsThread_idRunsRun_idCancelResource& other) = default; // copy constructor
    ThreadsThread_idRunsRun_idCancelResource(ThreadsThread_idRunsRun_idCancelResource&& other) noexcept = default; // move constructor

    ThreadsThread_idRunsRun_idCancelResource& operator=(const ThreadsThread_idRunsRun_idCancelResource& other) = default; // copy assignment
    ThreadsThread_idRunsRun_idCancelResource& operator=(ThreadsThread_idRunsRun_idCancelResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, RunObject>(
        std::string & threadId, std::string & runId)> handler_POST_func =
            [](std::string &, std::string &) -> std::pair<int, RunObject>
                { throw AssistantsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, RunObject> handler_POST(
        std::string & threadId, std::string & runId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAssistantsApiException(const AssistantsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create an assistant with a model and instructions.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  AssistantsResource: public restbed::Resource
{
public:
    AssistantsResource(const std::string& context = "/v1");
    virtual ~AssistantsResource() = default;

    AssistantsResource(
        const AssistantsResource& other) = default; // copy constructor
    AssistantsResource(AssistantsResource&& other) noexcept = default; // move constructor

    AssistantsResource& operator=(const AssistantsResource& other) = default; // copy assignment
    AssistantsResource& operator=(AssistantsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, AssistantObject>(
        CreateAssistantRequest & createAssistantRequest)> handler_POST_func =
            [](CreateAssistantRequest &) -> std::pair<int, AssistantObject>
                { throw AssistantsApiException(501, "Not implemented"); };

    std::function<std::pair<int, ListAssistantsResponse>(
        int32_t & limit, std::string & order, std::string & after, std::string & before)> handler_GET_func =
            [](int32_t &, std::string &, std::string &, std::string &) -> std::pair<int, ListAssistantsResponse>
                { throw AssistantsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, AssistantObject> handler_POST(
        CreateAssistantRequest & createAssistantRequest);

    virtual std::pair<int, ListAssistantsResponse> handler_GET(
        int32_t & limit, std::string & order, std::string & after, std::string & before);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAssistantsApiException(const AssistantsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  AssistantsAssistant_idFilesResource: public restbed::Resource
{
public:
    AssistantsAssistant_idFilesResource(const std::string& context = "/v1");
    virtual ~AssistantsAssistant_idFilesResource() = default;

    AssistantsAssistant_idFilesResource(
        const AssistantsAssistant_idFilesResource& other) = default; // copy constructor
    AssistantsAssistant_idFilesResource(AssistantsAssistant_idFilesResource&& other) noexcept = default; // move constructor

    AssistantsAssistant_idFilesResource& operator=(const AssistantsAssistant_idFilesResource& other) = default; // copy assignment
    AssistantsAssistant_idFilesResource& operator=(AssistantsAssistant_idFilesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, AssistantFileObject>(
        std::string & assistantId, CreateAssistantFileRequest & createAssistantFileRequest)> handler_POST_func =
            [](std::string &, CreateAssistantFileRequest &) -> std::pair<int, AssistantFileObject>
                { throw AssistantsApiException(501, "Not implemented"); };

    std::function<std::pair<int, ListAssistantFilesResponse>(
        std::string & assistantId, int32_t & limit, std::string & order, std::string & after, std::string & before)> handler_GET_func =
            [](std::string &, int32_t &, std::string &, std::string &, std::string &) -> std::pair<int, ListAssistantFilesResponse>
                { throw AssistantsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, AssistantFileObject> handler_POST(
        std::string & assistantId, CreateAssistantFileRequest & createAssistantFileRequest);

    virtual std::pair<int, ListAssistantFilesResponse> handler_GET(
        std::string & assistantId, int32_t & limit, std::string & order, std::string & after, std::string & before);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAssistantsApiException(const AssistantsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create a message.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ThreadsThread_idMessagesResource: public restbed::Resource
{
public:
    ThreadsThread_idMessagesResource(const std::string& context = "/v1");
    virtual ~ThreadsThread_idMessagesResource() = default;

    ThreadsThread_idMessagesResource(
        const ThreadsThread_idMessagesResource& other) = default; // copy constructor
    ThreadsThread_idMessagesResource(ThreadsThread_idMessagesResource&& other) noexcept = default; // move constructor

    ThreadsThread_idMessagesResource& operator=(const ThreadsThread_idMessagesResource& other) = default; // copy assignment
    ThreadsThread_idMessagesResource& operator=(ThreadsThread_idMessagesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, MessageObject>(
        std::string & threadId, CreateMessageRequest & createMessageRequest)> handler_POST_func =
            [](std::string &, CreateMessageRequest &) -> std::pair<int, MessageObject>
                { throw AssistantsApiException(501, "Not implemented"); };

    std::function<std::pair<int, ListMessagesResponse>(
        std::string & threadId, int32_t & limit, std::string & order, std::string & after, std::string & before, std::string & runId)> handler_GET_func =
            [](std::string &, int32_t &, std::string &, std::string &, std::string &, std::string &) -> std::pair<int, ListMessagesResponse>
                { throw AssistantsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, MessageObject> handler_POST(
        std::string & threadId, CreateMessageRequest & createMessageRequest);

    virtual std::pair<int, ListMessagesResponse> handler_GET(
        std::string & threadId, int32_t & limit, std::string & order, std::string & after, std::string & before, std::string & runId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAssistantsApiException(const AssistantsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create a run.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ThreadsThread_idRunsResource: public restbed::Resource
{
public:
    ThreadsThread_idRunsResource(const std::string& context = "/v1");
    virtual ~ThreadsThread_idRunsResource() = default;

    ThreadsThread_idRunsResource(
        const ThreadsThread_idRunsResource& other) = default; // copy constructor
    ThreadsThread_idRunsResource(ThreadsThread_idRunsResource&& other) noexcept = default; // move constructor

    ThreadsThread_idRunsResource& operator=(const ThreadsThread_idRunsResource& other) = default; // copy assignment
    ThreadsThread_idRunsResource& operator=(ThreadsThread_idRunsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, RunObject>(
        std::string & threadId, CreateRunRequest & createRunRequest)> handler_POST_func =
            [](std::string &, CreateRunRequest &) -> std::pair<int, RunObject>
                { throw AssistantsApiException(501, "Not implemented"); };

    std::function<std::pair<int, ListRunsResponse>(
        std::string & threadId, int32_t & limit, std::string & order, std::string & after, std::string & before)> handler_GET_func =
            [](std::string &, int32_t &, std::string &, std::string &, std::string &) -> std::pair<int, ListRunsResponse>
                { throw AssistantsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, RunObject> handler_POST(
        std::string & threadId, CreateRunRequest & createRunRequest);

    virtual std::pair<int, ListRunsResponse> handler_GET(
        std::string & threadId, int32_t & limit, std::string & order, std::string & after, std::string & before);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAssistantsApiException(const AssistantsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create a thread.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ThreadsResource: public restbed::Resource
{
public:
    ThreadsResource(const std::string& context = "/v1");
    virtual ~ThreadsResource() = default;

    ThreadsResource(
        const ThreadsResource& other) = default; // copy constructor
    ThreadsResource(ThreadsResource&& other) noexcept = default; // move constructor

    ThreadsResource& operator=(const ThreadsResource& other) = default; // copy assignment
    ThreadsResource& operator=(ThreadsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, ThreadObject>(
        CreateThreadRequest & createThreadRequest)> handler_POST_func =
            [](CreateThreadRequest &) -> std::pair<int, ThreadObject>
                { throw AssistantsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, ThreadObject> handler_POST(
        CreateThreadRequest & createThreadRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAssistantsApiException(const AssistantsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create a thread and run it in one request.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ThreadsRunsResource: public restbed::Resource
{
public:
    ThreadsRunsResource(const std::string& context = "/v1");
    virtual ~ThreadsRunsResource() = default;

    ThreadsRunsResource(
        const ThreadsRunsResource& other) = default; // copy constructor
    ThreadsRunsResource(ThreadsRunsResource&& other) noexcept = default; // move constructor

    ThreadsRunsResource& operator=(const ThreadsRunsResource& other) = default; // copy assignment
    ThreadsRunsResource& operator=(ThreadsRunsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, RunObject>(
        CreateThreadAndRunRequest & createThreadAndRunRequest)> handler_POST_func =
            [](CreateThreadAndRunRequest &) -> std::pair<int, RunObject>
                { throw AssistantsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, RunObject> handler_POST(
        CreateThreadAndRunRequest & createThreadAndRunRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAssistantsApiException(const AssistantsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete an assistant.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  AssistantsAssistant_idResource: public restbed::Resource
{
public:
    AssistantsAssistant_idResource(const std::string& context = "/v1");
    virtual ~AssistantsAssistant_idResource() = default;

    AssistantsAssistant_idResource(
        const AssistantsAssistant_idResource& other) = default; // copy constructor
    AssistantsAssistant_idResource(AssistantsAssistant_idResource&& other) noexcept = default; // move constructor

    AssistantsAssistant_idResource& operator=(const AssistantsAssistant_idResource& other) = default; // copy assignment
    AssistantsAssistant_idResource& operator=(AssistantsAssistant_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeleteAssistantResponse>(
        std::string & assistantId)> handler_DELETE_func =
            [](std::string &) -> std::pair<int, DeleteAssistantResponse>
                { throw AssistantsApiException(501, "Not implemented"); };

    std::function<std::pair<int, AssistantObject>(
        std::string & assistantId)> handler_GET_func =
            [](std::string &) -> std::pair<int, AssistantObject>
                { throw AssistantsApiException(501, "Not implemented"); };

    std::function<std::pair<int, AssistantObject>(
        std::string & assistantId, ModifyAssistantRequest & modifyAssistantRequest)> handler_POST_func =
            [](std::string &, ModifyAssistantRequest &) -> std::pair<int, AssistantObject>
                { throw AssistantsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeleteAssistantResponse> handler_DELETE(
        std::string & assistantId);

    virtual std::pair<int, AssistantObject> handler_GET(
        std::string & assistantId);
    virtual std::pair<int, AssistantObject> handler_POST(
        std::string & assistantId, ModifyAssistantRequest & modifyAssistantRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAssistantsApiException(const AssistantsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete an assistant file.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  AssistantsAssistant_idFilesFile_idResource: public restbed::Resource
{
public:
    AssistantsAssistant_idFilesFile_idResource(const std::string& context = "/v1");
    virtual ~AssistantsAssistant_idFilesFile_idResource() = default;

    AssistantsAssistant_idFilesFile_idResource(
        const AssistantsAssistant_idFilesFile_idResource& other) = default; // copy constructor
    AssistantsAssistant_idFilesFile_idResource(AssistantsAssistant_idFilesFile_idResource&& other) noexcept = default; // move constructor

    AssistantsAssistant_idFilesFile_idResource& operator=(const AssistantsAssistant_idFilesFile_idResource& other) = default; // copy assignment
    AssistantsAssistant_idFilesFile_idResource& operator=(AssistantsAssistant_idFilesFile_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeleteAssistantFileResponse>(
        std::string & assistantId, std::string & fileId)> handler_DELETE_func =
            [](std::string &, std::string &) -> std::pair<int, DeleteAssistantFileResponse>
                { throw AssistantsApiException(501, "Not implemented"); };

    std::function<std::pair<int, AssistantFileObject>(
        std::string & assistantId, std::string & fileId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, AssistantFileObject>
                { throw AssistantsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeleteAssistantFileResponse> handler_DELETE(
        std::string & assistantId, std::string & fileId);

    virtual std::pair<int, AssistantFileObject> handler_GET(
        std::string & assistantId, std::string & fileId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAssistantsApiException(const AssistantsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete a thread.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ThreadsThread_idResource: public restbed::Resource
{
public:
    ThreadsThread_idResource(const std::string& context = "/v1");
    virtual ~ThreadsThread_idResource() = default;

    ThreadsThread_idResource(
        const ThreadsThread_idResource& other) = default; // copy constructor
    ThreadsThread_idResource(ThreadsThread_idResource&& other) noexcept = default; // move constructor

    ThreadsThread_idResource& operator=(const ThreadsThread_idResource& other) = default; // copy assignment
    ThreadsThread_idResource& operator=(ThreadsThread_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeleteThreadResponse>(
        std::string & threadId)> handler_DELETE_func =
            [](std::string &) -> std::pair<int, DeleteThreadResponse>
                { throw AssistantsApiException(501, "Not implemented"); };

    std::function<std::pair<int, ThreadObject>(
        std::string & threadId)> handler_GET_func =
            [](std::string &) -> std::pair<int, ThreadObject>
                { throw AssistantsApiException(501, "Not implemented"); };

    std::function<std::pair<int, ThreadObject>(
        std::string & threadId, ModifyThreadRequest & modifyThreadRequest)> handler_POST_func =
            [](std::string &, ModifyThreadRequest &) -> std::pair<int, ThreadObject>
                { throw AssistantsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeleteThreadResponse> handler_DELETE(
        std::string & threadId);

    virtual std::pair<int, ThreadObject> handler_GET(
        std::string & threadId);
    virtual std::pair<int, ThreadObject> handler_POST(
        std::string & threadId, ModifyThreadRequest & modifyThreadRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAssistantsApiException(const AssistantsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Retrieve a message.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ThreadsThread_idMessagesMessage_idResource: public restbed::Resource
{
public:
    ThreadsThread_idMessagesMessage_idResource(const std::string& context = "/v1");
    virtual ~ThreadsThread_idMessagesMessage_idResource() = default;

    ThreadsThread_idMessagesMessage_idResource(
        const ThreadsThread_idMessagesMessage_idResource& other) = default; // copy constructor
    ThreadsThread_idMessagesMessage_idResource(ThreadsThread_idMessagesMessage_idResource&& other) noexcept = default; // move constructor

    ThreadsThread_idMessagesMessage_idResource& operator=(const ThreadsThread_idMessagesMessage_idResource& other) = default; // copy assignment
    ThreadsThread_idMessagesMessage_idResource& operator=(ThreadsThread_idMessagesMessage_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, MessageObject>(
        std::string & threadId, std::string & messageId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, MessageObject>
                { throw AssistantsApiException(501, "Not implemented"); };

    std::function<std::pair<int, MessageObject>(
        std::string & threadId, std::string & messageId, ModifyMessageRequest & modifyMessageRequest)> handler_POST_func =
            [](std::string &, std::string &, ModifyMessageRequest &) -> std::pair<int, MessageObject>
                { throw AssistantsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, MessageObject> handler_GET(
        std::string & threadId, std::string & messageId);

    virtual std::pair<int, MessageObject> handler_POST(
        std::string & threadId, std::string & messageId, ModifyMessageRequest & modifyMessageRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAssistantsApiException(const AssistantsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Retrieves a message file.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ThreadsThread_idMessagesMessage_idFilesFile_idResource: public restbed::Resource
{
public:
    ThreadsThread_idMessagesMessage_idFilesFile_idResource(const std::string& context = "/v1");
    virtual ~ThreadsThread_idMessagesMessage_idFilesFile_idResource() = default;

    ThreadsThread_idMessagesMessage_idFilesFile_idResource(
        const ThreadsThread_idMessagesMessage_idFilesFile_idResource& other) = default; // copy constructor
    ThreadsThread_idMessagesMessage_idFilesFile_idResource(ThreadsThread_idMessagesMessage_idFilesFile_idResource&& other) noexcept = default; // move constructor

    ThreadsThread_idMessagesMessage_idFilesFile_idResource& operator=(const ThreadsThread_idMessagesMessage_idFilesFile_idResource& other) = default; // copy assignment
    ThreadsThread_idMessagesMessage_idFilesFile_idResource& operator=(ThreadsThread_idMessagesMessage_idFilesFile_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, MessageFileObject>(
        std::string & threadId, std::string & messageId, std::string & fileId)> handler_GET_func =
            [](std::string &, std::string &, std::string &) -> std::pair<int, MessageFileObject>
                { throw AssistantsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, MessageFileObject> handler_GET(
        std::string & threadId, std::string & messageId, std::string & fileId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAssistantsApiException(const AssistantsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Retrieves a run.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ThreadsThread_idRunsRun_idResource: public restbed::Resource
{
public:
    ThreadsThread_idRunsRun_idResource(const std::string& context = "/v1");
    virtual ~ThreadsThread_idRunsRun_idResource() = default;

    ThreadsThread_idRunsRun_idResource(
        const ThreadsThread_idRunsRun_idResource& other) = default; // copy constructor
    ThreadsThread_idRunsRun_idResource(ThreadsThread_idRunsRun_idResource&& other) noexcept = default; // move constructor

    ThreadsThread_idRunsRun_idResource& operator=(const ThreadsThread_idRunsRun_idResource& other) = default; // copy assignment
    ThreadsThread_idRunsRun_idResource& operator=(ThreadsThread_idRunsRun_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, RunObject>(
        std::string & threadId, std::string & runId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, RunObject>
                { throw AssistantsApiException(501, "Not implemented"); };

    std::function<std::pair<int, RunObject>(
        std::string & threadId, std::string & runId, ModifyRunRequest & modifyRunRequest)> handler_POST_func =
            [](std::string &, std::string &, ModifyRunRequest &) -> std::pair<int, RunObject>
                { throw AssistantsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, RunObject> handler_GET(
        std::string & threadId, std::string & runId);

    virtual std::pair<int, RunObject> handler_POST(
        std::string & threadId, std::string & runId, ModifyRunRequest & modifyRunRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAssistantsApiException(const AssistantsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Retrieves a run step.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ThreadsThread_idRunsRun_idStepsStep_idResource: public restbed::Resource
{
public:
    ThreadsThread_idRunsRun_idStepsStep_idResource(const std::string& context = "/v1");
    virtual ~ThreadsThread_idRunsRun_idStepsStep_idResource() = default;

    ThreadsThread_idRunsRun_idStepsStep_idResource(
        const ThreadsThread_idRunsRun_idStepsStep_idResource& other) = default; // copy constructor
    ThreadsThread_idRunsRun_idStepsStep_idResource(ThreadsThread_idRunsRun_idStepsStep_idResource&& other) noexcept = default; // move constructor

    ThreadsThread_idRunsRun_idStepsStep_idResource& operator=(const ThreadsThread_idRunsRun_idStepsStep_idResource& other) = default; // copy assignment
    ThreadsThread_idRunsRun_idStepsStep_idResource& operator=(ThreadsThread_idRunsRun_idStepsStep_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, RunStepObject>(
        std::string & threadId, std::string & runId, std::string & stepId)> handler_GET_func =
            [](std::string &, std::string &, std::string &) -> std::pair<int, RunStepObject>
                { throw AssistantsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, RunStepObject> handler_GET(
        std::string & threadId, std::string & runId, std::string & stepId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAssistantsApiException(const AssistantsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Returns a list of message files.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ThreadsThread_idMessagesMessage_idFilesResource: public restbed::Resource
{
public:
    ThreadsThread_idMessagesMessage_idFilesResource(const std::string& context = "/v1");
    virtual ~ThreadsThread_idMessagesMessage_idFilesResource() = default;

    ThreadsThread_idMessagesMessage_idFilesResource(
        const ThreadsThread_idMessagesMessage_idFilesResource& other) = default; // copy constructor
    ThreadsThread_idMessagesMessage_idFilesResource(ThreadsThread_idMessagesMessage_idFilesResource&& other) noexcept = default; // move constructor

    ThreadsThread_idMessagesMessage_idFilesResource& operator=(const ThreadsThread_idMessagesMessage_idFilesResource& other) = default; // copy assignment
    ThreadsThread_idMessagesMessage_idFilesResource& operator=(ThreadsThread_idMessagesMessage_idFilesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, ListMessageFilesResponse>(
        std::string & threadId, std::string & messageId, int32_t & limit, std::string & order, std::string & after, std::string & before)> handler_GET_func =
            [](std::string &, std::string &, int32_t &, std::string &, std::string &, std::string &) -> std::pair<int, ListMessageFilesResponse>
                { throw AssistantsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, ListMessageFilesResponse> handler_GET(
        std::string & threadId, std::string & messageId, int32_t & limit, std::string & order, std::string & after, std::string & before);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAssistantsApiException(const AssistantsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Returns a list of run steps belonging to a run.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ThreadsThread_idRunsRun_idStepsResource: public restbed::Resource
{
public:
    ThreadsThread_idRunsRun_idStepsResource(const std::string& context = "/v1");
    virtual ~ThreadsThread_idRunsRun_idStepsResource() = default;

    ThreadsThread_idRunsRun_idStepsResource(
        const ThreadsThread_idRunsRun_idStepsResource& other) = default; // copy constructor
    ThreadsThread_idRunsRun_idStepsResource(ThreadsThread_idRunsRun_idStepsResource&& other) noexcept = default; // move constructor

    ThreadsThread_idRunsRun_idStepsResource& operator=(const ThreadsThread_idRunsRun_idStepsResource& other) = default; // copy assignment
    ThreadsThread_idRunsRun_idStepsResource& operator=(ThreadsThread_idRunsRun_idStepsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, ListRunStepsResponse>(
        std::string & threadId, std::string & runId, int32_t & limit, std::string & order, std::string & after, std::string & before)> handler_GET_func =
            [](std::string &, std::string &, int32_t &, std::string &, std::string &, std::string &) -> std::pair<int, ListRunStepsResponse>
                { throw AssistantsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, ListRunStepsResponse> handler_GET(
        std::string & threadId, std::string & runId, int32_t & limit, std::string & order, std::string & after, std::string & before);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAssistantsApiException(const AssistantsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ThreadsThread_idRunsRun_idSubmit_tool_outputsResource: public restbed::Resource
{
public:
    ThreadsThread_idRunsRun_idSubmit_tool_outputsResource(const std::string& context = "/v1");
    virtual ~ThreadsThread_idRunsRun_idSubmit_tool_outputsResource() = default;

    ThreadsThread_idRunsRun_idSubmit_tool_outputsResource(
        const ThreadsThread_idRunsRun_idSubmit_tool_outputsResource& other) = default; // copy constructor
    ThreadsThread_idRunsRun_idSubmit_tool_outputsResource(ThreadsThread_idRunsRun_idSubmit_tool_outputsResource&& other) noexcept = default; // move constructor

    ThreadsThread_idRunsRun_idSubmit_tool_outputsResource& operator=(const ThreadsThread_idRunsRun_idSubmit_tool_outputsResource& other) = default; // copy assignment
    ThreadsThread_idRunsRun_idSubmit_tool_outputsResource& operator=(ThreadsThread_idRunsRun_idSubmit_tool_outputsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, RunObject>(
        std::string & threadId, std::string & runId, SubmitToolOutputsRunRequest & submitToolOutputsRunRequest)> handler_POST_func =
            [](std::string &, std::string &, SubmitToolOutputsRunRequest &) -> std::pair<int, RunObject>
                { throw AssistantsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, RunObject> handler_POST(
        std::string & threadId, std::string & runId, SubmitToolOutputsRunRequest & submitToolOutputsRunRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAssistantsApiException(const AssistantsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace AssistantsApiResources */

using AssistantsApiThreadsThread_idRunsRun_idCancelResource [[deprecated]] = AssistantsApiResources::ThreadsThread_idRunsRun_idCancelResource;
using AssistantsApiAssistantsResource [[deprecated]] = AssistantsApiResources::AssistantsResource;
using AssistantsApiAssistantsAssistant_idFilesResource [[deprecated]] = AssistantsApiResources::AssistantsAssistant_idFilesResource;
using AssistantsApiThreadsThread_idMessagesResource [[deprecated]] = AssistantsApiResources::ThreadsThread_idMessagesResource;
using AssistantsApiThreadsThread_idRunsResource [[deprecated]] = AssistantsApiResources::ThreadsThread_idRunsResource;
using AssistantsApiThreadsResource [[deprecated]] = AssistantsApiResources::ThreadsResource;
using AssistantsApiThreadsRunsResource [[deprecated]] = AssistantsApiResources::ThreadsRunsResource;
using AssistantsApiAssistantsAssistant_idResource [[deprecated]] = AssistantsApiResources::AssistantsAssistant_idResource;
using AssistantsApiAssistantsAssistant_idFilesFile_idResource [[deprecated]] = AssistantsApiResources::AssistantsAssistant_idFilesFile_idResource;
using AssistantsApiThreadsThread_idResource [[deprecated]] = AssistantsApiResources::ThreadsThread_idResource;
using AssistantsApiThreadsThread_idMessagesMessage_idResource [[deprecated]] = AssistantsApiResources::ThreadsThread_idMessagesMessage_idResource;
using AssistantsApiThreadsThread_idMessagesMessage_idFilesFile_idResource [[deprecated]] = AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesFile_idResource;
using AssistantsApiThreadsThread_idRunsRun_idResource [[deprecated]] = AssistantsApiResources::ThreadsThread_idRunsRun_idResource;
using AssistantsApiThreadsThread_idRunsRun_idStepsStep_idResource [[deprecated]] = AssistantsApiResources::ThreadsThread_idRunsRun_idStepsStep_idResource;
using AssistantsApiThreadsThread_idMessagesMessage_idFilesResource [[deprecated]] = AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesResource;
using AssistantsApiThreadsThread_idRunsRun_idStepsResource [[deprecated]] = AssistantsApiResources::ThreadsThread_idRunsRun_idStepsResource;
using AssistantsApiThreadsThread_idRunsRun_idSubmit_tool_outputsResource [[deprecated]] = AssistantsApiResources::ThreadsThread_idRunsRun_idSubmit_tool_outputsResource;

//
// The restbed service to actually implement the REST server
//
class  AssistantsApi
{
public:
    explicit AssistantsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~AssistantsApi();

    std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idCancelResource> getThreadsThread_idRunsRun_idCancelResource();
    std::shared_ptr<AssistantsApiResources::AssistantsResource> getAssistantsResource();
    std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idFilesResource> getAssistantsAssistant_idFilesResource();
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesResource> getThreadsThread_idMessagesResource();
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsResource> getThreadsThread_idRunsResource();
    std::shared_ptr<AssistantsApiResources::ThreadsResource> getThreadsResource();
    std::shared_ptr<AssistantsApiResources::ThreadsRunsResource> getThreadsRunsResource();
    std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idResource> getAssistantsAssistant_idResource();
    std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idFilesFile_idResource> getAssistantsAssistant_idFilesFile_idResource();
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idResource> getThreadsThread_idResource();
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idResource> getThreadsThread_idMessagesMessage_idResource();
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesFile_idResource> getThreadsThread_idMessagesMessage_idFilesFile_idResource();
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idResource> getThreadsThread_idRunsRun_idResource();
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idStepsStep_idResource> getThreadsThread_idRunsRun_idStepsStep_idResource();
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesResource> getThreadsThread_idMessagesMessage_idFilesResource();
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idStepsResource> getThreadsThread_idRunsRun_idStepsResource();
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idSubmit_tool_outputsResource> getThreadsThread_idRunsRun_idSubmit_tool_outputsResource();

    void setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idCancelResource> resource);
    void setResource(std::shared_ptr<AssistantsApiResources::AssistantsResource> resource);
    void setResource(std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idFilesResource> resource);
    void setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesResource> resource);
    void setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsResource> resource);
    void setResource(std::shared_ptr<AssistantsApiResources::ThreadsResource> resource);
    void setResource(std::shared_ptr<AssistantsApiResources::ThreadsRunsResource> resource);
    void setResource(std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idResource> resource);
    void setResource(std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idFilesFile_idResource> resource);
    void setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idResource> resource);
    void setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idResource> resource);
    void setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesFile_idResource> resource);
    void setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idResource> resource);
    void setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idStepsStep_idResource> resource);
    void setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesResource> resource);
    void setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idStepsResource> resource);
    void setResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idSubmit_tool_outputsResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setAssistantsApiThreadsThread_idRunsRun_idCancelResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idCancelResource> spAssistantsApiThreadsThread_idRunsRun_idCancelResource);
    [[deprecated("use setResource()")]]
    virtual void setAssistantsApiAssistantsResource(std::shared_ptr<AssistantsApiResources::AssistantsResource> spAssistantsApiAssistantsResource);
    [[deprecated("use setResource()")]]
    virtual void setAssistantsApiAssistantsAssistant_idFilesResource(std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idFilesResource> spAssistantsApiAssistantsAssistant_idFilesResource);
    [[deprecated("use setResource()")]]
    virtual void setAssistantsApiThreadsThread_idMessagesResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesResource> spAssistantsApiThreadsThread_idMessagesResource);
    [[deprecated("use setResource()")]]
    virtual void setAssistantsApiThreadsThread_idRunsResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsResource> spAssistantsApiThreadsThread_idRunsResource);
    [[deprecated("use setResource()")]]
    virtual void setAssistantsApiThreadsResource(std::shared_ptr<AssistantsApiResources::ThreadsResource> spAssistantsApiThreadsResource);
    [[deprecated("use setResource()")]]
    virtual void setAssistantsApiThreadsRunsResource(std::shared_ptr<AssistantsApiResources::ThreadsRunsResource> spAssistantsApiThreadsRunsResource);
    [[deprecated("use setResource()")]]
    virtual void setAssistantsApiAssistantsAssistant_idResource(std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idResource> spAssistantsApiAssistantsAssistant_idResource);
    [[deprecated("use setResource()")]]
    virtual void setAssistantsApiAssistantsAssistant_idFilesFile_idResource(std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idFilesFile_idResource> spAssistantsApiAssistantsAssistant_idFilesFile_idResource);
    [[deprecated("use setResource()")]]
    virtual void setAssistantsApiThreadsThread_idResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idResource> spAssistantsApiThreadsThread_idResource);
    [[deprecated("use setResource()")]]
    virtual void setAssistantsApiThreadsThread_idMessagesMessage_idResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idResource> spAssistantsApiThreadsThread_idMessagesMessage_idResource);
    [[deprecated("use setResource()")]]
    virtual void setAssistantsApiThreadsThread_idMessagesMessage_idFilesFile_idResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesFile_idResource> spAssistantsApiThreadsThread_idMessagesMessage_idFilesFile_idResource);
    [[deprecated("use setResource()")]]
    virtual void setAssistantsApiThreadsThread_idRunsRun_idResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idResource> spAssistantsApiThreadsThread_idRunsRun_idResource);
    [[deprecated("use setResource()")]]
    virtual void setAssistantsApiThreadsThread_idRunsRun_idStepsStep_idResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idStepsStep_idResource> spAssistantsApiThreadsThread_idRunsRun_idStepsStep_idResource);
    [[deprecated("use setResource()")]]
    virtual void setAssistantsApiThreadsThread_idMessagesMessage_idFilesResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesResource> spAssistantsApiThreadsThread_idMessagesMessage_idFilesResource);
    [[deprecated("use setResource()")]]
    virtual void setAssistantsApiThreadsThread_idRunsRun_idStepsResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idStepsResource> spAssistantsApiThreadsThread_idRunsRun_idStepsResource);
    [[deprecated("use setResource()")]]
    virtual void setAssistantsApiThreadsThread_idRunsRun_idSubmit_tool_outputsResource(std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idSubmit_tool_outputsResource> spAssistantsApiThreadsThread_idRunsRun_idSubmit_tool_outputsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idCancelResource> m_spThreadsThread_idRunsRun_idCancelResource;
    std::shared_ptr<AssistantsApiResources::AssistantsResource> m_spAssistantsResource;
    std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idFilesResource> m_spAssistantsAssistant_idFilesResource;
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesResource> m_spThreadsThread_idMessagesResource;
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsResource> m_spThreadsThread_idRunsResource;
    std::shared_ptr<AssistantsApiResources::ThreadsResource> m_spThreadsResource;
    std::shared_ptr<AssistantsApiResources::ThreadsRunsResource> m_spThreadsRunsResource;
    std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idResource> m_spAssistantsAssistant_idResource;
    std::shared_ptr<AssistantsApiResources::AssistantsAssistant_idFilesFile_idResource> m_spAssistantsAssistant_idFilesFile_idResource;
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idResource> m_spThreadsThread_idResource;
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idResource> m_spThreadsThread_idMessagesMessage_idResource;
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesFile_idResource> m_spThreadsThread_idMessagesMessage_idFilesFile_idResource;
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idResource> m_spThreadsThread_idRunsRun_idResource;
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idStepsStep_idResource> m_spThreadsThread_idRunsRun_idStepsStep_idResource;
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idMessagesMessage_idFilesResource> m_spThreadsThread_idMessagesMessage_idFilesResource;
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idStepsResource> m_spThreadsThread_idRunsRun_idStepsResource;
    std::shared_ptr<AssistantsApiResources::ThreadsThread_idRunsRun_idSubmit_tool_outputsResource> m_spThreadsThread_idRunsRun_idSubmit_tool_outputsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* AssistantsApi_H_ */

