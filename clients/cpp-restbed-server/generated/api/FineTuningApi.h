/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FineTuningApi.h
 *
 * 
 */

#ifndef FineTuningApi_H_
#define FineTuningApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "CreateFineTuningJobRequest.h"
#include "FineTuningJob.h"
#include "ListFineTuningJobCheckpointsResponse.h"
#include "ListFineTuningJobEventsResponse.h"
#include "ListPaginatedFineTuningJobsResponse.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  FineTuningApiException: public std::exception
{
public:
    FineTuningApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace FineTuningApiResources {
/// <summary>
/// Immediately cancel a fine-tune job. 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  Fine_tuningJobsFine_tuning_job_idCancelResource: public restbed::Resource
{
public:
    Fine_tuningJobsFine_tuning_job_idCancelResource(const std::string& context = "/v1");
    virtual ~Fine_tuningJobsFine_tuning_job_idCancelResource() = default;

    Fine_tuningJobsFine_tuning_job_idCancelResource(
        const Fine_tuningJobsFine_tuning_job_idCancelResource& other) = default; // copy constructor
    Fine_tuningJobsFine_tuning_job_idCancelResource(Fine_tuningJobsFine_tuning_job_idCancelResource&& other) noexcept = default; // move constructor

    Fine_tuningJobsFine_tuning_job_idCancelResource& operator=(const Fine_tuningJobsFine_tuning_job_idCancelResource& other) = default; // copy assignment
    Fine_tuningJobsFine_tuning_job_idCancelResource& operator=(Fine_tuningJobsFine_tuning_job_idCancelResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, FineTuningJob>(
        std::string & fineTuningJobId)> handler_POST_func =
            [](std::string &) -> std::pair<int, FineTuningJob>
                { throw FineTuningApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, FineTuningJob> handler_POST(
        std::string & fineTuningJobId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleFineTuningApiException(const FineTuningApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  Fine_tuningJobsResource: public restbed::Resource
{
public:
    Fine_tuningJobsResource(const std::string& context = "/v1");
    virtual ~Fine_tuningJobsResource() = default;

    Fine_tuningJobsResource(
        const Fine_tuningJobsResource& other) = default; // copy constructor
    Fine_tuningJobsResource(Fine_tuningJobsResource&& other) noexcept = default; // move constructor

    Fine_tuningJobsResource& operator=(const Fine_tuningJobsResource& other) = default; // copy assignment
    Fine_tuningJobsResource& operator=(Fine_tuningJobsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, FineTuningJob>(
        CreateFineTuningJobRequest & createFineTuningJobRequest)> handler_POST_func =
            [](CreateFineTuningJobRequest &) -> std::pair<int, FineTuningJob>
                { throw FineTuningApiException(501, "Not implemented"); };

    std::function<std::pair<int, ListPaginatedFineTuningJobsResponse>(
        std::string & after, int32_t & limit)> handler_GET_func =
            [](std::string &, int32_t &) -> std::pair<int, ListPaginatedFineTuningJobsResponse>
                { throw FineTuningApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, FineTuningJob> handler_POST(
        CreateFineTuningJobRequest & createFineTuningJobRequest);

    virtual std::pair<int, ListPaginatedFineTuningJobsResponse> handler_GET(
        std::string & after, int32_t & limit);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleFineTuningApiException(const FineTuningApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get status updates for a fine-tuning job. 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  Fine_tuningJobsFine_tuning_job_idEventsResource: public restbed::Resource
{
public:
    Fine_tuningJobsFine_tuning_job_idEventsResource(const std::string& context = "/v1");
    virtual ~Fine_tuningJobsFine_tuning_job_idEventsResource() = default;

    Fine_tuningJobsFine_tuning_job_idEventsResource(
        const Fine_tuningJobsFine_tuning_job_idEventsResource& other) = default; // copy constructor
    Fine_tuningJobsFine_tuning_job_idEventsResource(Fine_tuningJobsFine_tuning_job_idEventsResource&& other) noexcept = default; // move constructor

    Fine_tuningJobsFine_tuning_job_idEventsResource& operator=(const Fine_tuningJobsFine_tuning_job_idEventsResource& other) = default; // copy assignment
    Fine_tuningJobsFine_tuning_job_idEventsResource& operator=(Fine_tuningJobsFine_tuning_job_idEventsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, ListFineTuningJobEventsResponse>(
        std::string & fineTuningJobId, std::string & after, int32_t & limit)> handler_GET_func =
            [](std::string &, std::string &, int32_t &) -> std::pair<int, ListFineTuningJobEventsResponse>
                { throw FineTuningApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, ListFineTuningJobEventsResponse> handler_GET(
        std::string & fineTuningJobId, std::string & after, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleFineTuningApiException(const FineTuningApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// List checkpoints for a fine-tuning job. 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  Fine_tuningJobsFine_tuning_job_idCheckpointsResource: public restbed::Resource
{
public:
    Fine_tuningJobsFine_tuning_job_idCheckpointsResource(const std::string& context = "/v1");
    virtual ~Fine_tuningJobsFine_tuning_job_idCheckpointsResource() = default;

    Fine_tuningJobsFine_tuning_job_idCheckpointsResource(
        const Fine_tuningJobsFine_tuning_job_idCheckpointsResource& other) = default; // copy constructor
    Fine_tuningJobsFine_tuning_job_idCheckpointsResource(Fine_tuningJobsFine_tuning_job_idCheckpointsResource&& other) noexcept = default; // move constructor

    Fine_tuningJobsFine_tuning_job_idCheckpointsResource& operator=(const Fine_tuningJobsFine_tuning_job_idCheckpointsResource& other) = default; // copy assignment
    Fine_tuningJobsFine_tuning_job_idCheckpointsResource& operator=(Fine_tuningJobsFine_tuning_job_idCheckpointsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, ListFineTuningJobCheckpointsResponse>(
        std::string & fineTuningJobId, std::string & after, int32_t & limit)> handler_GET_func =
            [](std::string &, std::string &, int32_t &) -> std::pair<int, ListFineTuningJobCheckpointsResponse>
                { throw FineTuningApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, ListFineTuningJobCheckpointsResponse> handler_GET(
        std::string & fineTuningJobId, std::string & after, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleFineTuningApiException(const FineTuningApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  Fine_tuningJobsFine_tuning_job_idResource: public restbed::Resource
{
public:
    Fine_tuningJobsFine_tuning_job_idResource(const std::string& context = "/v1");
    virtual ~Fine_tuningJobsFine_tuning_job_idResource() = default;

    Fine_tuningJobsFine_tuning_job_idResource(
        const Fine_tuningJobsFine_tuning_job_idResource& other) = default; // copy constructor
    Fine_tuningJobsFine_tuning_job_idResource(Fine_tuningJobsFine_tuning_job_idResource&& other) noexcept = default; // move constructor

    Fine_tuningJobsFine_tuning_job_idResource& operator=(const Fine_tuningJobsFine_tuning_job_idResource& other) = default; // copy assignment
    Fine_tuningJobsFine_tuning_job_idResource& operator=(Fine_tuningJobsFine_tuning_job_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, FineTuningJob>(
        std::string & fineTuningJobId)> handler_GET_func =
            [](std::string &) -> std::pair<int, FineTuningJob>
                { throw FineTuningApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, FineTuningJob> handler_GET(
        std::string & fineTuningJobId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleFineTuningApiException(const FineTuningApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace FineTuningApiResources */

using FineTuningApiFine_tuningJobsFine_tuning_job_idCancelResource [[deprecated]] = FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idCancelResource;
using FineTuningApiFine_tuningJobsResource [[deprecated]] = FineTuningApiResources::Fine_tuningJobsResource;
using FineTuningApiFine_tuningJobsFine_tuning_job_idEventsResource [[deprecated]] = FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idEventsResource;
using FineTuningApiFine_tuningJobsFine_tuning_job_idCheckpointsResource [[deprecated]] = FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idCheckpointsResource;
using FineTuningApiFine_tuningJobsFine_tuning_job_idResource [[deprecated]] = FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idResource;

//
// The restbed service to actually implement the REST server
//
class  FineTuningApi
{
public:
    explicit FineTuningApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~FineTuningApi();

    std::shared_ptr<FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idCancelResource> getFine_tuningJobsFine_tuning_job_idCancelResource();
    std::shared_ptr<FineTuningApiResources::Fine_tuningJobsResource> getFine_tuningJobsResource();
    std::shared_ptr<FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idEventsResource> getFine_tuningJobsFine_tuning_job_idEventsResource();
    std::shared_ptr<FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idCheckpointsResource> getFine_tuningJobsFine_tuning_job_idCheckpointsResource();
    std::shared_ptr<FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idResource> getFine_tuningJobsFine_tuning_job_idResource();

    void setResource(std::shared_ptr<FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idCancelResource> resource);
    void setResource(std::shared_ptr<FineTuningApiResources::Fine_tuningJobsResource> resource);
    void setResource(std::shared_ptr<FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idEventsResource> resource);
    void setResource(std::shared_ptr<FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idCheckpointsResource> resource);
    void setResource(std::shared_ptr<FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setFineTuningApiFine_tuningJobsFine_tuning_job_idCancelResource(std::shared_ptr<FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idCancelResource> spFineTuningApiFine_tuningJobsFine_tuning_job_idCancelResource);
    [[deprecated("use setResource()")]]
    virtual void setFineTuningApiFine_tuningJobsResource(std::shared_ptr<FineTuningApiResources::Fine_tuningJobsResource> spFineTuningApiFine_tuningJobsResource);
    [[deprecated("use setResource()")]]
    virtual void setFineTuningApiFine_tuningJobsFine_tuning_job_idEventsResource(std::shared_ptr<FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idEventsResource> spFineTuningApiFine_tuningJobsFine_tuning_job_idEventsResource);
    [[deprecated("use setResource()")]]
    virtual void setFineTuningApiFine_tuningJobsFine_tuning_job_idCheckpointsResource(std::shared_ptr<FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idCheckpointsResource> spFineTuningApiFine_tuningJobsFine_tuning_job_idCheckpointsResource);
    [[deprecated("use setResource()")]]
    virtual void setFineTuningApiFine_tuningJobsFine_tuning_job_idResource(std::shared_ptr<FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idResource> spFineTuningApiFine_tuningJobsFine_tuning_job_idResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idCancelResource> m_spFine_tuningJobsFine_tuning_job_idCancelResource;
    std::shared_ptr<FineTuningApiResources::Fine_tuningJobsResource> m_spFine_tuningJobsResource;
    std::shared_ptr<FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idEventsResource> m_spFine_tuningJobsFine_tuning_job_idEventsResource;
    std::shared_ptr<FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idCheckpointsResource> m_spFine_tuningJobsFine_tuning_job_idCheckpointsResource;
    std::shared_ptr<FineTuningApiResources::Fine_tuningJobsFine_tuning_job_idResource> m_spFine_tuningJobsFine_tuning_job_idResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* FineTuningApi_H_ */

