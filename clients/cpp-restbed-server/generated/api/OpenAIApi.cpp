/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "OpenAIApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

OpenAIApiException::OpenAIApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int OpenAIApiException::getStatus() const
{
    return m_status;
}
const char* OpenAIApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace OpenAIApiResources {
Fine_tunesFine_tune_idCancelResource::Fine_tunesFine_tune_idCancelResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/fine-tunes/{fine_tune_id: .*}/cancel");
	this->set_method_handler("POST",
		std::bind(&Fine_tunesFine_tune_idCancelResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Fine_tunesFine_tune_idCancelResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Fine_tunesFine_tune_idCancelResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Fine_tunesFine_tune_idCancelResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Fine_tunesFine_tune_idCancelResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Fine_tunesFine_tune_idCancelResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Fine_tunesFine_tune_idCancelResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Fine_tunesFine_tune_idCancelResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string fineTuneId = request->get_path_parameter("fine_tune_id", "");
    
    int status_code = 500;
    FineTune resultObject = FineTune{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(fineTuneId);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, FineTune> Fine_tunesFine_tune_idCancelResource::handler_POST(
        std::string & fineTuneId)
{
    return handler_POST_func(fineTuneId);
}


std::string Fine_tunesFine_tune_idCancelResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Fine_tunesFine_tune_idCancelResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ChatCompletionsResource::ChatCompletionsResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/chat/completions");
	this->set_method_handler("POST",
		std::bind(&ChatCompletionsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ChatCompletionsResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ChatCompletionsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ChatCompletionsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ChatCompletionsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ChatCompletionsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ChatCompletionsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ChatCompletionsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto createChatCompletionRequest = extractJsonModelBodyParam<CreateChatCompletionRequest>(bodyContent);
    
    int status_code = 500;
    CreateChatCompletionResponse resultObject = CreateChatCompletionResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(createChatCompletionRequest);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, CreateChatCompletionResponse> ChatCompletionsResource::handler_POST(
        CreateChatCompletionRequest & createChatCompletionRequest)
{
    return handler_POST_func(createChatCompletionRequest);
}


std::string ChatCompletionsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ChatCompletionsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CompletionsResource::CompletionsResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/completions");
	this->set_method_handler("POST",
		std::bind(&CompletionsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CompletionsResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CompletionsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CompletionsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CompletionsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CompletionsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CompletionsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CompletionsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto createCompletionRequest = extractJsonModelBodyParam<CreateCompletionRequest>(bodyContent);
    
    int status_code = 500;
    CreateCompletionResponse resultObject = CreateCompletionResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(createCompletionRequest);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, CreateCompletionResponse> CompletionsResource::handler_POST(
        CreateCompletionRequest & createCompletionRequest)
{
    return handler_POST_func(createCompletionRequest);
}


std::string CompletionsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CompletionsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
EditsResource::EditsResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/edits");
	this->set_method_handler("POST",
		std::bind(&EditsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> EditsResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> EditsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> EditsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void EditsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void EditsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void EditsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void EditsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto createEditRequest = extractJsonModelBodyParam<CreateEditRequest>(bodyContent);
    
    int status_code = 500;
    CreateEditResponse resultObject = CreateEditResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(createEditRequest);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, CreateEditResponse> EditsResource::handler_POST(
        CreateEditRequest & createEditRequest)
{
    return handler_POST_func(createEditRequest);
}


std::string EditsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string EditsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
EmbeddingsResource::EmbeddingsResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/embeddings");
	this->set_method_handler("POST",
		std::bind(&EmbeddingsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> EmbeddingsResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> EmbeddingsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> EmbeddingsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void EmbeddingsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void EmbeddingsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void EmbeddingsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void EmbeddingsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto createEmbeddingRequest = extractJsonModelBodyParam<CreateEmbeddingRequest>(bodyContent);
    
    int status_code = 500;
    CreateEmbeddingResponse resultObject = CreateEmbeddingResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(createEmbeddingRequest);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, CreateEmbeddingResponse> EmbeddingsResource::handler_POST(
        CreateEmbeddingRequest & createEmbeddingRequest)
{
    return handler_POST_func(createEmbeddingRequest);
}


std::string EmbeddingsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string EmbeddingsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
FilesResource::FilesResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/files");
	this->set_method_handler("POST",
		std::bind(&FilesResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&FilesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> FilesResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FilesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FilesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FilesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FilesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void FilesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FilesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    auto file = boost::lexical_cast<std::string>(extractFormParamsFromBody("file", extractBodyContent(session)));
    auto purpose = boost::lexical_cast<std::string>(extractFormParamsFromBody("purpose", extractBodyContent(session)));
    
    int status_code = 500;
    OpenAIFile resultObject = OpenAIFile{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(file, purpose);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "multipart/form-data, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void FilesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    
    int status_code = 500;
    ListFilesResponse resultObject = ListFilesResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET();
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, OpenAIFile> FilesResource::handler_POST(
        std::string & file, std::string & purpose)
{
    return handler_POST_func(file, purpose);
}

std::pair<int, ListFilesResponse> FilesResource::handler_GET(
    )
{
    return handler_GET_func();
}

std::string FilesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string FilesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Fine_tunesResource::Fine_tunesResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/fine-tunes");
	this->set_method_handler("POST",
		std::bind(&Fine_tunesResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&Fine_tunesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Fine_tunesResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Fine_tunesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Fine_tunesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Fine_tunesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Fine_tunesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Fine_tunesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Fine_tunesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto createFineTuneRequest = extractJsonModelBodyParam<CreateFineTuneRequest>(bodyContent);
    
    int status_code = 500;
    FineTune resultObject = FineTune{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(createFineTuneRequest);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void Fine_tunesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    
    int status_code = 500;
    ListFineTunesResponse resultObject = ListFineTunesResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET();
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, FineTune> Fine_tunesResource::handler_POST(
        CreateFineTuneRequest & createFineTuneRequest)
{
    return handler_POST_func(createFineTuneRequest);
}

std::pair<int, ListFineTunesResponse> Fine_tunesResource::handler_GET(
    )
{
    return handler_GET_func();
}

std::string Fine_tunesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Fine_tunesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ImagesGenerationsResource::ImagesGenerationsResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/images/generations");
	this->set_method_handler("POST",
		std::bind(&ImagesGenerationsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ImagesGenerationsResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ImagesGenerationsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ImagesGenerationsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ImagesGenerationsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ImagesGenerationsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ImagesGenerationsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ImagesGenerationsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto createImageRequest = extractJsonModelBodyParam<CreateImageRequest>(bodyContent);
    
    int status_code = 500;
    ImagesResponse resultObject = ImagesResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(createImageRequest);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, ImagesResponse> ImagesGenerationsResource::handler_POST(
        CreateImageRequest & createImageRequest)
{
    return handler_POST_func(createImageRequest);
}


std::string ImagesGenerationsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ImagesGenerationsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ImagesEditsResource::ImagesEditsResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/images/edits");
	this->set_method_handler("POST",
		std::bind(&ImagesEditsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ImagesEditsResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ImagesEditsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ImagesEditsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ImagesEditsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ImagesEditsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ImagesEditsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ImagesEditsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    auto image = boost::lexical_cast<std::string>(extractFormParamsFromBody("image", extractBodyContent(session)));
    auto mask = boost::lexical_cast<std::string>(extractFormParamsFromBody("mask", extractBodyContent(session)));
    auto prompt = boost::lexical_cast<std::string>(extractFormParamsFromBody("prompt", extractBodyContent(session)));
    auto n = boost::lexical_cast<int32_t>(extractFormParamsFromBody("n", extractBodyContent(session)));
    auto size = boost::lexical_cast<std::string>(extractFormParamsFromBody("size", extractBodyContent(session)));
    auto responseFormat = boost::lexical_cast<std::string>(extractFormParamsFromBody("responseFormat", extractBodyContent(session)));
    auto user = boost::lexical_cast<std::string>(extractFormParamsFromBody("user", extractBodyContent(session)));
    
    int status_code = 500;
    ImagesResponse resultObject = ImagesResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(image, prompt, mask, n, size, responseFormat, user);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "multipart/form-data, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, ImagesResponse> ImagesEditsResource::handler_POST(
        std::string & image, std::string & prompt, std::string & mask, int32_t & n, std::string & size, std::string & responseFormat, std::string & user)
{
    return handler_POST_func(image, prompt, mask, n, size, responseFormat, user);
}


std::string ImagesEditsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ImagesEditsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ImagesVariationsResource::ImagesVariationsResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/images/variations");
	this->set_method_handler("POST",
		std::bind(&ImagesVariationsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ImagesVariationsResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ImagesVariationsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ImagesVariationsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ImagesVariationsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ImagesVariationsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ImagesVariationsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ImagesVariationsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    auto image = boost::lexical_cast<std::string>(extractFormParamsFromBody("image", extractBodyContent(session)));
    auto n = boost::lexical_cast<int32_t>(extractFormParamsFromBody("n", extractBodyContent(session)));
    auto size = boost::lexical_cast<std::string>(extractFormParamsFromBody("size", extractBodyContent(session)));
    auto responseFormat = boost::lexical_cast<std::string>(extractFormParamsFromBody("responseFormat", extractBodyContent(session)));
    auto user = boost::lexical_cast<std::string>(extractFormParamsFromBody("user", extractBodyContent(session)));
    
    int status_code = 500;
    ImagesResponse resultObject = ImagesResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(image, n, size, responseFormat, user);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "multipart/form-data, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, ImagesResponse> ImagesVariationsResource::handler_POST(
        std::string & image, int32_t & n, std::string & size, std::string & responseFormat, std::string & user)
{
    return handler_POST_func(image, n, size, responseFormat, user);
}


std::string ImagesVariationsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ImagesVariationsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ModerationsResource::ModerationsResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/moderations");
	this->set_method_handler("POST",
		std::bind(&ModerationsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ModerationsResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ModerationsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ModerationsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ModerationsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ModerationsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ModerationsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ModerationsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto createModerationRequest = extractJsonModelBodyParam<CreateModerationRequest>(bodyContent);
    
    int status_code = 500;
    CreateModerationResponse resultObject = CreateModerationResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(createModerationRequest);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, CreateModerationResponse> ModerationsResource::handler_POST(
        CreateModerationRequest & createModerationRequest)
{
    return handler_POST_func(createModerationRequest);
}


std::string ModerationsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ModerationsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
AudioTranscriptionsResource::AudioTranscriptionsResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/audio/transcriptions");
	this->set_method_handler("POST",
		std::bind(&AudioTranscriptionsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> AudioTranscriptionsResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> AudioTranscriptionsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> AudioTranscriptionsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void AudioTranscriptionsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void AudioTranscriptionsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void AudioTranscriptionsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void AudioTranscriptionsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    auto file = boost::lexical_cast<std::string>(extractFormParamsFromBody("file", extractBodyContent(session)));
    auto model = boost::lexical_cast<CreateTranscriptionRequest_model>(extractFormParamsFromBody("model", extractBodyContent(session)));
    auto prompt = boost::lexical_cast<std::string>(extractFormParamsFromBody("prompt", extractBodyContent(session)));
    auto responseFormat = boost::lexical_cast<std::string>(extractFormParamsFromBody("responseFormat", extractBodyContent(session)));
    auto temperature = boost::lexical_cast<double>(extractFormParamsFromBody("temperature", extractBodyContent(session)));
    auto language = boost::lexical_cast<std::string>(extractFormParamsFromBody("language", extractBodyContent(session)));
    
    int status_code = 500;
    CreateTranscriptionResponse resultObject = CreateTranscriptionResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(file, model, prompt, responseFormat, temperature, language);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "multipart/form-data, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, CreateTranscriptionResponse> AudioTranscriptionsResource::handler_POST(
        std::string & file, CreateTranscriptionRequest_model & model, std::string & prompt, std::string & responseFormat, double & temperature, std::string & language)
{
    return handler_POST_func(file, model, prompt, responseFormat, temperature, language);
}


std::string AudioTranscriptionsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string AudioTranscriptionsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
AudioTranslationsResource::AudioTranslationsResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/audio/translations");
	this->set_method_handler("POST",
		std::bind(&AudioTranslationsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> AudioTranslationsResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> AudioTranslationsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> AudioTranslationsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void AudioTranslationsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void AudioTranslationsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void AudioTranslationsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void AudioTranslationsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    auto file = boost::lexical_cast<std::string>(extractFormParamsFromBody("file", extractBodyContent(session)));
    auto model = boost::lexical_cast<CreateTranscriptionRequest_model>(extractFormParamsFromBody("model", extractBodyContent(session)));
    auto prompt = boost::lexical_cast<std::string>(extractFormParamsFromBody("prompt", extractBodyContent(session)));
    auto responseFormat = boost::lexical_cast<std::string>(extractFormParamsFromBody("responseFormat", extractBodyContent(session)));
    auto temperature = boost::lexical_cast<double>(extractFormParamsFromBody("temperature", extractBodyContent(session)));
    
    int status_code = 500;
    CreateTranslationResponse resultObject = CreateTranslationResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(file, model, prompt, responseFormat, temperature);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "multipart/form-data, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, CreateTranslationResponse> AudioTranslationsResource::handler_POST(
        std::string & file, CreateTranscriptionRequest_model & model, std::string & prompt, std::string & responseFormat, double & temperature)
{
    return handler_POST_func(file, model, prompt, responseFormat, temperature);
}


std::string AudioTranslationsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string AudioTranslationsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
FilesFile_idResource::FilesFile_idResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/files/{file_id: .*}");
	this->set_method_handler("DELETE",
		std::bind(&FilesFile_idResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&FilesFile_idResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> FilesFile_idResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FilesFile_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FilesFile_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FilesFile_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FilesFile_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void FilesFile_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FilesFile_idResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string fileId = request->get_path_parameter("file_id", "");
    
    int status_code = 500;
    DeleteFileResponse resultObject = DeleteFileResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_DELETE(fileId);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void FilesFile_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the path params
    std::string fileId = request->get_path_parameter("file_id", "");
    
    int status_code = 500;
    OpenAIFile resultObject = OpenAIFile{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(fileId);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, DeleteFileResponse> FilesFile_idResource::handler_DELETE(
        std::string & fileId)
{
    return handler_DELETE_func(fileId);
}

std::pair<int, OpenAIFile> FilesFile_idResource::handler_GET(
    std::string & fileId)
{
    return handler_GET_func(fileId);
}

std::string FilesFile_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string FilesFile_idResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ModelsModelResource::ModelsModelResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/models/{model: .*}");
	this->set_method_handler("DELETE",
		std::bind(&ModelsModelResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&ModelsModelResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ModelsModelResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ModelsModelResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ModelsModelResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ModelsModelResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ModelsModelResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ModelsModelResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ModelsModelResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string model = request->get_path_parameter("model", "");
    
    int status_code = 500;
    DeleteModelResponse resultObject = DeleteModelResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_DELETE(model);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void ModelsModelResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the path params
    std::string model = request->get_path_parameter("model", "");
    
    int status_code = 500;
    Model resultObject = Model{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(model);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, DeleteModelResponse> ModelsModelResource::handler_DELETE(
        std::string & model)
{
    return handler_DELETE_func(model);
}

std::pair<int, Model> ModelsModelResource::handler_GET(
    std::string & model)
{
    return handler_GET_func(model);
}

std::string ModelsModelResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ModelsModelResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
FilesFile_idContentResource::FilesFile_idContentResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/files/{file_id: .*}/content");
	this->set_method_handler("GET",
		std::bind(&FilesFile_idContentResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> FilesFile_idContentResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> FilesFile_idContentResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> FilesFile_idContentResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void FilesFile_idContentResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void FilesFile_idContentResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void FilesFile_idContentResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void FilesFile_idContentResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string fileId = request->get_path_parameter("file_id", "");
    
    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(fileId);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject;
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::string> FilesFile_idContentResource::handler_GET(
        std::string & fileId)
{
    return handler_GET_func(fileId);
}


std::string FilesFile_idContentResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string FilesFile_idContentResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Fine_tunesFine_tune_idEventsResource::Fine_tunesFine_tune_idEventsResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/fine-tunes/{fine_tune_id: .*}/events");
	this->set_method_handler("GET",
		std::bind(&Fine_tunesFine_tune_idEventsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Fine_tunesFine_tune_idEventsResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Fine_tunesFine_tune_idEventsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Fine_tunesFine_tune_idEventsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Fine_tunesFine_tune_idEventsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Fine_tunesFine_tune_idEventsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Fine_tunesFine_tune_idEventsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Fine_tunesFine_tune_idEventsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string fineTuneId = request->get_path_parameter("fine_tune_id", "");
    // Getting the query params
    bool stream = request->get_query_parameter("stream", false);
    
    int status_code = 500;
    ListFineTuneEventsResponse resultObject = ListFineTuneEventsResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(fineTuneId, stream);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, ListFineTuneEventsResponse> Fine_tunesFine_tune_idEventsResource::handler_GET(
        std::string & fineTuneId, bool & stream)
{
    return handler_GET_func(fineTuneId, stream);
}


std::string Fine_tunesFine_tune_idEventsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Fine_tunesFine_tune_idEventsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ModelsResource::ModelsResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/models");
	this->set_method_handler("GET",
		std::bind(&ModelsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ModelsResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ModelsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ModelsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ModelsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ModelsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ModelsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ModelsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    
    int status_code = 500;
    ListModelsResponse resultObject = ListModelsResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET();
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, ListModelsResponse> ModelsResource::handler_GET(
        )
{
    return handler_GET_func();
}


std::string ModelsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ModelsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Fine_tunesFine_tune_idResource::Fine_tunesFine_tune_idResource(const std::string& context /* = "/v1" */)
{
	this->set_path(context + "/fine-tunes/{fine_tune_id: .*}");
	this->set_method_handler("GET",
		std::bind(&Fine_tunesFine_tune_idResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Fine_tunesFine_tune_idResource::handleOpenAIApiException(const OpenAIApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Fine_tunesFine_tune_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Fine_tunesFine_tune_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Fine_tunesFine_tune_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Fine_tunesFine_tune_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Fine_tunesFine_tune_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Fine_tunesFine_tune_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string fineTuneId = request->get_path_parameter("fine_tune_id", "");
    
    int status_code = 500;
    FineTune resultObject = FineTune{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(fineTuneId);
    }
    catch(const OpenAIApiException& e) {
        std::tie(status_code, result) = handleOpenAIApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, FineTune> Fine_tunesFine_tune_idResource::handler_GET(
        std::string & fineTuneId)
{
    return handler_GET_func(fineTuneId);
}


std::string Fine_tunesFine_tune_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Fine_tunesFine_tune_idResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace OpenAIApiResources */

OpenAIApi::OpenAIApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

OpenAIApi::~OpenAIApi() {}

std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idCancelResource> OpenAIApi::getFine_tunesFine_tune_idCancelResource() {
    if (!m_spFine_tunesFine_tune_idCancelResource) {
        setResource(std::make_shared<OpenAIApiResources::Fine_tunesFine_tune_idCancelResource>());
    }
    return m_spFine_tunesFine_tune_idCancelResource;
}
std::shared_ptr<OpenAIApiResources::ChatCompletionsResource> OpenAIApi::getChatCompletionsResource() {
    if (!m_spChatCompletionsResource) {
        setResource(std::make_shared<OpenAIApiResources::ChatCompletionsResource>());
    }
    return m_spChatCompletionsResource;
}
std::shared_ptr<OpenAIApiResources::CompletionsResource> OpenAIApi::getCompletionsResource() {
    if (!m_spCompletionsResource) {
        setResource(std::make_shared<OpenAIApiResources::CompletionsResource>());
    }
    return m_spCompletionsResource;
}
std::shared_ptr<OpenAIApiResources::EditsResource> OpenAIApi::getEditsResource() {
    if (!m_spEditsResource) {
        setResource(std::make_shared<OpenAIApiResources::EditsResource>());
    }
    return m_spEditsResource;
}
std::shared_ptr<OpenAIApiResources::EmbeddingsResource> OpenAIApi::getEmbeddingsResource() {
    if (!m_spEmbeddingsResource) {
        setResource(std::make_shared<OpenAIApiResources::EmbeddingsResource>());
    }
    return m_spEmbeddingsResource;
}
std::shared_ptr<OpenAIApiResources::FilesResource> OpenAIApi::getFilesResource() {
    if (!m_spFilesResource) {
        setResource(std::make_shared<OpenAIApiResources::FilesResource>());
    }
    return m_spFilesResource;
}
std::shared_ptr<OpenAIApiResources::Fine_tunesResource> OpenAIApi::getFine_tunesResource() {
    if (!m_spFine_tunesResource) {
        setResource(std::make_shared<OpenAIApiResources::Fine_tunesResource>());
    }
    return m_spFine_tunesResource;
}
std::shared_ptr<OpenAIApiResources::ImagesGenerationsResource> OpenAIApi::getImagesGenerationsResource() {
    if (!m_spImagesGenerationsResource) {
        setResource(std::make_shared<OpenAIApiResources::ImagesGenerationsResource>());
    }
    return m_spImagesGenerationsResource;
}
std::shared_ptr<OpenAIApiResources::ImagesEditsResource> OpenAIApi::getImagesEditsResource() {
    if (!m_spImagesEditsResource) {
        setResource(std::make_shared<OpenAIApiResources::ImagesEditsResource>());
    }
    return m_spImagesEditsResource;
}
std::shared_ptr<OpenAIApiResources::ImagesVariationsResource> OpenAIApi::getImagesVariationsResource() {
    if (!m_spImagesVariationsResource) {
        setResource(std::make_shared<OpenAIApiResources::ImagesVariationsResource>());
    }
    return m_spImagesVariationsResource;
}
std::shared_ptr<OpenAIApiResources::ModerationsResource> OpenAIApi::getModerationsResource() {
    if (!m_spModerationsResource) {
        setResource(std::make_shared<OpenAIApiResources::ModerationsResource>());
    }
    return m_spModerationsResource;
}
std::shared_ptr<OpenAIApiResources::AudioTranscriptionsResource> OpenAIApi::getAudioTranscriptionsResource() {
    if (!m_spAudioTranscriptionsResource) {
        setResource(std::make_shared<OpenAIApiResources::AudioTranscriptionsResource>());
    }
    return m_spAudioTranscriptionsResource;
}
std::shared_ptr<OpenAIApiResources::AudioTranslationsResource> OpenAIApi::getAudioTranslationsResource() {
    if (!m_spAudioTranslationsResource) {
        setResource(std::make_shared<OpenAIApiResources::AudioTranslationsResource>());
    }
    return m_spAudioTranslationsResource;
}
std::shared_ptr<OpenAIApiResources::FilesFile_idResource> OpenAIApi::getFilesFile_idResource() {
    if (!m_spFilesFile_idResource) {
        setResource(std::make_shared<OpenAIApiResources::FilesFile_idResource>());
    }
    return m_spFilesFile_idResource;
}
std::shared_ptr<OpenAIApiResources::ModelsModelResource> OpenAIApi::getModelsModelResource() {
    if (!m_spModelsModelResource) {
        setResource(std::make_shared<OpenAIApiResources::ModelsModelResource>());
    }
    return m_spModelsModelResource;
}
std::shared_ptr<OpenAIApiResources::FilesFile_idContentResource> OpenAIApi::getFilesFile_idContentResource() {
    if (!m_spFilesFile_idContentResource) {
        setResource(std::make_shared<OpenAIApiResources::FilesFile_idContentResource>());
    }
    return m_spFilesFile_idContentResource;
}
std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idEventsResource> OpenAIApi::getFine_tunesFine_tune_idEventsResource() {
    if (!m_spFine_tunesFine_tune_idEventsResource) {
        setResource(std::make_shared<OpenAIApiResources::Fine_tunesFine_tune_idEventsResource>());
    }
    return m_spFine_tunesFine_tune_idEventsResource;
}
std::shared_ptr<OpenAIApiResources::ModelsResource> OpenAIApi::getModelsResource() {
    if (!m_spModelsResource) {
        setResource(std::make_shared<OpenAIApiResources::ModelsResource>());
    }
    return m_spModelsResource;
}
std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idResource> OpenAIApi::getFine_tunesFine_tune_idResource() {
    if (!m_spFine_tunesFine_tune_idResource) {
        setResource(std::make_shared<OpenAIApiResources::Fine_tunesFine_tune_idResource>());
    }
    return m_spFine_tunesFine_tune_idResource;
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idCancelResource> resource) {
    m_spFine_tunesFine_tune_idCancelResource = resource;
    m_service->publish(m_spFine_tunesFine_tune_idCancelResource);
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::ChatCompletionsResource> resource) {
    m_spChatCompletionsResource = resource;
    m_service->publish(m_spChatCompletionsResource);
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::CompletionsResource> resource) {
    m_spCompletionsResource = resource;
    m_service->publish(m_spCompletionsResource);
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::EditsResource> resource) {
    m_spEditsResource = resource;
    m_service->publish(m_spEditsResource);
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::EmbeddingsResource> resource) {
    m_spEmbeddingsResource = resource;
    m_service->publish(m_spEmbeddingsResource);
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::FilesResource> resource) {
    m_spFilesResource = resource;
    m_service->publish(m_spFilesResource);
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::Fine_tunesResource> resource) {
    m_spFine_tunesResource = resource;
    m_service->publish(m_spFine_tunesResource);
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::ImagesGenerationsResource> resource) {
    m_spImagesGenerationsResource = resource;
    m_service->publish(m_spImagesGenerationsResource);
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::ImagesEditsResource> resource) {
    m_spImagesEditsResource = resource;
    m_service->publish(m_spImagesEditsResource);
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::ImagesVariationsResource> resource) {
    m_spImagesVariationsResource = resource;
    m_service->publish(m_spImagesVariationsResource);
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::ModerationsResource> resource) {
    m_spModerationsResource = resource;
    m_service->publish(m_spModerationsResource);
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::AudioTranscriptionsResource> resource) {
    m_spAudioTranscriptionsResource = resource;
    m_service->publish(m_spAudioTranscriptionsResource);
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::AudioTranslationsResource> resource) {
    m_spAudioTranslationsResource = resource;
    m_service->publish(m_spAudioTranslationsResource);
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::FilesFile_idResource> resource) {
    m_spFilesFile_idResource = resource;
    m_service->publish(m_spFilesFile_idResource);
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::ModelsModelResource> resource) {
    m_spModelsModelResource = resource;
    m_service->publish(m_spModelsModelResource);
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::FilesFile_idContentResource> resource) {
    m_spFilesFile_idContentResource = resource;
    m_service->publish(m_spFilesFile_idContentResource);
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idEventsResource> resource) {
    m_spFine_tunesFine_tune_idEventsResource = resource;
    m_service->publish(m_spFine_tunesFine_tune_idEventsResource);
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::ModelsResource> resource) {
    m_spModelsResource = resource;
    m_service->publish(m_spModelsResource);
}
void OpenAIApi::setResource(std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idResource> resource) {
    m_spFine_tunesFine_tune_idResource = resource;
    m_service->publish(m_spFine_tunesFine_tune_idResource);
}
void OpenAIApi::setOpenAIApiFine_tunesFine_tune_idCancelResource(std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idCancelResource> spFine_tunesFine_tune_idCancelResource) {
    m_spFine_tunesFine_tune_idCancelResource = spFine_tunesFine_tune_idCancelResource;
    m_service->publish(m_spFine_tunesFine_tune_idCancelResource);
}
void OpenAIApi::setOpenAIApiChatCompletionsResource(std::shared_ptr<OpenAIApiResources::ChatCompletionsResource> spChatCompletionsResource) {
    m_spChatCompletionsResource = spChatCompletionsResource;
    m_service->publish(m_spChatCompletionsResource);
}
void OpenAIApi::setOpenAIApiCompletionsResource(std::shared_ptr<OpenAIApiResources::CompletionsResource> spCompletionsResource) {
    m_spCompletionsResource = spCompletionsResource;
    m_service->publish(m_spCompletionsResource);
}
void OpenAIApi::setOpenAIApiEditsResource(std::shared_ptr<OpenAIApiResources::EditsResource> spEditsResource) {
    m_spEditsResource = spEditsResource;
    m_service->publish(m_spEditsResource);
}
void OpenAIApi::setOpenAIApiEmbeddingsResource(std::shared_ptr<OpenAIApiResources::EmbeddingsResource> spEmbeddingsResource) {
    m_spEmbeddingsResource = spEmbeddingsResource;
    m_service->publish(m_spEmbeddingsResource);
}
void OpenAIApi::setOpenAIApiFilesResource(std::shared_ptr<OpenAIApiResources::FilesResource> spFilesResource) {
    m_spFilesResource = spFilesResource;
    m_service->publish(m_spFilesResource);
}
void OpenAIApi::setOpenAIApiFine_tunesResource(std::shared_ptr<OpenAIApiResources::Fine_tunesResource> spFine_tunesResource) {
    m_spFine_tunesResource = spFine_tunesResource;
    m_service->publish(m_spFine_tunesResource);
}
void OpenAIApi::setOpenAIApiImagesGenerationsResource(std::shared_ptr<OpenAIApiResources::ImagesGenerationsResource> spImagesGenerationsResource) {
    m_spImagesGenerationsResource = spImagesGenerationsResource;
    m_service->publish(m_spImagesGenerationsResource);
}
void OpenAIApi::setOpenAIApiImagesEditsResource(std::shared_ptr<OpenAIApiResources::ImagesEditsResource> spImagesEditsResource) {
    m_spImagesEditsResource = spImagesEditsResource;
    m_service->publish(m_spImagesEditsResource);
}
void OpenAIApi::setOpenAIApiImagesVariationsResource(std::shared_ptr<OpenAIApiResources::ImagesVariationsResource> spImagesVariationsResource) {
    m_spImagesVariationsResource = spImagesVariationsResource;
    m_service->publish(m_spImagesVariationsResource);
}
void OpenAIApi::setOpenAIApiModerationsResource(std::shared_ptr<OpenAIApiResources::ModerationsResource> spModerationsResource) {
    m_spModerationsResource = spModerationsResource;
    m_service->publish(m_spModerationsResource);
}
void OpenAIApi::setOpenAIApiAudioTranscriptionsResource(std::shared_ptr<OpenAIApiResources::AudioTranscriptionsResource> spAudioTranscriptionsResource) {
    m_spAudioTranscriptionsResource = spAudioTranscriptionsResource;
    m_service->publish(m_spAudioTranscriptionsResource);
}
void OpenAIApi::setOpenAIApiAudioTranslationsResource(std::shared_ptr<OpenAIApiResources::AudioTranslationsResource> spAudioTranslationsResource) {
    m_spAudioTranslationsResource = spAudioTranslationsResource;
    m_service->publish(m_spAudioTranslationsResource);
}
void OpenAIApi::setOpenAIApiFilesFile_idResource(std::shared_ptr<OpenAIApiResources::FilesFile_idResource> spFilesFile_idResource) {
    m_spFilesFile_idResource = spFilesFile_idResource;
    m_service->publish(m_spFilesFile_idResource);
}
void OpenAIApi::setOpenAIApiModelsModelResource(std::shared_ptr<OpenAIApiResources::ModelsModelResource> spModelsModelResource) {
    m_spModelsModelResource = spModelsModelResource;
    m_service->publish(m_spModelsModelResource);
}
void OpenAIApi::setOpenAIApiFilesFile_idContentResource(std::shared_ptr<OpenAIApiResources::FilesFile_idContentResource> spFilesFile_idContentResource) {
    m_spFilesFile_idContentResource = spFilesFile_idContentResource;
    m_service->publish(m_spFilesFile_idContentResource);
}
void OpenAIApi::setOpenAIApiFine_tunesFine_tune_idEventsResource(std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idEventsResource> spFine_tunesFine_tune_idEventsResource) {
    m_spFine_tunesFine_tune_idEventsResource = spFine_tunesFine_tune_idEventsResource;
    m_service->publish(m_spFine_tunesFine_tune_idEventsResource);
}
void OpenAIApi::setOpenAIApiModelsResource(std::shared_ptr<OpenAIApiResources::ModelsResource> spModelsResource) {
    m_spModelsResource = spModelsResource;
    m_service->publish(m_spModelsResource);
}
void OpenAIApi::setOpenAIApiFine_tunesFine_tune_idResource(std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idResource> spFine_tunesFine_tune_idResource) {
    m_spFine_tunesFine_tune_idResource = spFine_tunesFine_tune_idResource;
    m_service->publish(m_spFine_tunesFine_tune_idResource);
}


void OpenAIApi::publishDefaultResources() {
    if (!m_spFine_tunesFine_tune_idCancelResource) {
        setResource(std::make_shared<OpenAIApiResources::Fine_tunesFine_tune_idCancelResource>());
    }
    if (!m_spChatCompletionsResource) {
        setResource(std::make_shared<OpenAIApiResources::ChatCompletionsResource>());
    }
    if (!m_spCompletionsResource) {
        setResource(std::make_shared<OpenAIApiResources::CompletionsResource>());
    }
    if (!m_spEditsResource) {
        setResource(std::make_shared<OpenAIApiResources::EditsResource>());
    }
    if (!m_spEmbeddingsResource) {
        setResource(std::make_shared<OpenAIApiResources::EmbeddingsResource>());
    }
    if (!m_spFilesResource) {
        setResource(std::make_shared<OpenAIApiResources::FilesResource>());
    }
    if (!m_spFine_tunesResource) {
        setResource(std::make_shared<OpenAIApiResources::Fine_tunesResource>());
    }
    if (!m_spImagesGenerationsResource) {
        setResource(std::make_shared<OpenAIApiResources::ImagesGenerationsResource>());
    }
    if (!m_spImagesEditsResource) {
        setResource(std::make_shared<OpenAIApiResources::ImagesEditsResource>());
    }
    if (!m_spImagesVariationsResource) {
        setResource(std::make_shared<OpenAIApiResources::ImagesVariationsResource>());
    }
    if (!m_spModerationsResource) {
        setResource(std::make_shared<OpenAIApiResources::ModerationsResource>());
    }
    if (!m_spAudioTranscriptionsResource) {
        setResource(std::make_shared<OpenAIApiResources::AudioTranscriptionsResource>());
    }
    if (!m_spAudioTranslationsResource) {
        setResource(std::make_shared<OpenAIApiResources::AudioTranslationsResource>());
    }
    if (!m_spFilesFile_idResource) {
        setResource(std::make_shared<OpenAIApiResources::FilesFile_idResource>());
    }
    if (!m_spModelsModelResource) {
        setResource(std::make_shared<OpenAIApiResources::ModelsModelResource>());
    }
    if (!m_spFilesFile_idContentResource) {
        setResource(std::make_shared<OpenAIApiResources::FilesFile_idContentResource>());
    }
    if (!m_spFine_tunesFine_tune_idEventsResource) {
        setResource(std::make_shared<OpenAIApiResources::Fine_tunesFine_tune_idEventsResource>());
    }
    if (!m_spModelsResource) {
        setResource(std::make_shared<OpenAIApiResources::ModelsResource>());
    }
    if (!m_spFine_tunesFine_tune_idResource) {
        setResource(std::make_shared<OpenAIApiResources::Fine_tunesFine_tune_idResource>());
    }
}

std::shared_ptr<restbed::Service> OpenAIApi::service() {
    return m_service;
}


}
}
}
}

