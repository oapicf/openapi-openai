/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OpenAIApi.h
 *
 * 
 */

#ifndef OpenAIApi_H_
#define OpenAIApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "CreateChatCompletionRequest.h"
#include "CreateChatCompletionResponse.h"
#include "CreateCompletionRequest.h"
#include "CreateCompletionResponse.h"
#include "CreateEditRequest.h"
#include "CreateEditResponse.h"
#include "CreateEmbeddingRequest.h"
#include "CreateEmbeddingResponse.h"
#include "CreateFineTuneRequest.h"
#include "CreateImageRequest.h"
#include "CreateModerationRequest.h"
#include "CreateModerationResponse.h"
#include "CreateTranscriptionRequest_model.h"
#include "CreateTranscriptionResponse.h"
#include "CreateTranslationResponse.h"
#include "DeleteFileResponse.h"
#include "DeleteModelResponse.h"
#include "FineTune.h"
#include "ImagesResponse.h"
#include "ListFilesResponse.h"
#include "ListFineTuneEventsResponse.h"
#include "ListFineTunesResponse.h"
#include "ListModelsResponse.h"
#include "Model.h"
#include "OpenAIFile.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  OpenAIApiException: public std::exception
{
public:
    OpenAIApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace OpenAIApiResources {
/// <summary>
/// Immediately cancel a fine-tune job. 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  Fine_tunesFine_tune_idCancelResource: public restbed::Resource
{
public:
    Fine_tunesFine_tune_idCancelResource(const std::string& context = "/v1");
    virtual ~Fine_tunesFine_tune_idCancelResource() = default;

    Fine_tunesFine_tune_idCancelResource(
        const Fine_tunesFine_tune_idCancelResource& other) = default; // copy constructor
    Fine_tunesFine_tune_idCancelResource(Fine_tunesFine_tune_idCancelResource&& other) noexcept = default; // move constructor

    Fine_tunesFine_tune_idCancelResource& operator=(const Fine_tunesFine_tune_idCancelResource& other) = default; // copy assignment
    Fine_tunesFine_tune_idCancelResource& operator=(Fine_tunesFine_tune_idCancelResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, FineTune>(
        std::string & fineTuneId)> handler_POST_func =
            [](std::string &) -> std::pair<int, FineTune>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, FineTune> handler_POST(
        std::string & fineTuneId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Creates a model response for the given chat conversation.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ChatCompletionsResource: public restbed::Resource
{
public:
    ChatCompletionsResource(const std::string& context = "/v1");
    virtual ~ChatCompletionsResource() = default;

    ChatCompletionsResource(
        const ChatCompletionsResource& other) = default; // copy constructor
    ChatCompletionsResource(ChatCompletionsResource&& other) noexcept = default; // move constructor

    ChatCompletionsResource& operator=(const ChatCompletionsResource& other) = default; // copy assignment
    ChatCompletionsResource& operator=(ChatCompletionsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CreateChatCompletionResponse>(
        CreateChatCompletionRequest & createChatCompletionRequest)> handler_POST_func =
            [](CreateChatCompletionRequest &) -> std::pair<int, CreateChatCompletionResponse>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CreateChatCompletionResponse> handler_POST(
        CreateChatCompletionRequest & createChatCompletionRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Creates a completion for the provided prompt and parameters.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  CompletionsResource: public restbed::Resource
{
public:
    CompletionsResource(const std::string& context = "/v1");
    virtual ~CompletionsResource() = default;

    CompletionsResource(
        const CompletionsResource& other) = default; // copy constructor
    CompletionsResource(CompletionsResource&& other) noexcept = default; // move constructor

    CompletionsResource& operator=(const CompletionsResource& other) = default; // copy assignment
    CompletionsResource& operator=(CompletionsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CreateCompletionResponse>(
        CreateCompletionRequest & createCompletionRequest)> handler_POST_func =
            [](CreateCompletionRequest &) -> std::pair<int, CreateCompletionResponse>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CreateCompletionResponse> handler_POST(
        CreateCompletionRequest & createCompletionRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Creates a new edit for the provided input, instruction, and parameters.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  EditsResource: public restbed::Resource
{
public:
    EditsResource(const std::string& context = "/v1");
    virtual ~EditsResource() = default;

    EditsResource(
        const EditsResource& other) = default; // copy constructor
    EditsResource(EditsResource&& other) noexcept = default; // move constructor

    EditsResource& operator=(const EditsResource& other) = default; // copy assignment
    EditsResource& operator=(EditsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CreateEditResponse>(
        CreateEditRequest & createEditRequest)> handler_POST_func =
            [](CreateEditRequest &) -> std::pair<int, CreateEditResponse>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CreateEditResponse> handler_POST(
        CreateEditRequest & createEditRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Creates an embedding vector representing the input text.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  EmbeddingsResource: public restbed::Resource
{
public:
    EmbeddingsResource(const std::string& context = "/v1");
    virtual ~EmbeddingsResource() = default;

    EmbeddingsResource(
        const EmbeddingsResource& other) = default; // copy constructor
    EmbeddingsResource(EmbeddingsResource&& other) noexcept = default; // move constructor

    EmbeddingsResource& operator=(const EmbeddingsResource& other) = default; // copy assignment
    EmbeddingsResource& operator=(EmbeddingsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CreateEmbeddingResponse>(
        CreateEmbeddingRequest & createEmbeddingRequest)> handler_POST_func =
            [](CreateEmbeddingRequest &) -> std::pair<int, CreateEmbeddingResponse>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CreateEmbeddingResponse> handler_POST(
        CreateEmbeddingRequest & createEmbeddingRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  FilesResource: public restbed::Resource
{
public:
    FilesResource(const std::string& context = "/v1");
    virtual ~FilesResource() = default;

    FilesResource(
        const FilesResource& other) = default; // copy constructor
    FilesResource(FilesResource&& other) noexcept = default; // move constructor

    FilesResource& operator=(const FilesResource& other) = default; // copy assignment
    FilesResource& operator=(FilesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, OpenAIFile>(
        std::string & file, std::string & purpose)> handler_POST_func =
            [](std::string &, std::string &) -> std::pair<int, OpenAIFile>
                { throw OpenAIApiException(501, "Not implemented"); };

    std::function<std::pair<int, ListFilesResponse>(
        )> handler_GET_func =
            []() -> std::pair<int, ListFilesResponse>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, OpenAIFile> handler_POST(
        std::string & file, std::string & purpose);

    virtual std::pair<int, ListFilesResponse> handler_GET(
        );

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  Fine_tunesResource: public restbed::Resource
{
public:
    Fine_tunesResource(const std::string& context = "/v1");
    virtual ~Fine_tunesResource() = default;

    Fine_tunesResource(
        const Fine_tunesResource& other) = default; // copy constructor
    Fine_tunesResource(Fine_tunesResource&& other) noexcept = default; // move constructor

    Fine_tunesResource& operator=(const Fine_tunesResource& other) = default; // copy assignment
    Fine_tunesResource& operator=(Fine_tunesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, FineTune>(
        CreateFineTuneRequest & createFineTuneRequest)> handler_POST_func =
            [](CreateFineTuneRequest &) -> std::pair<int, FineTune>
                { throw OpenAIApiException(501, "Not implemented"); };

    std::function<std::pair<int, ListFineTunesResponse>(
        )> handler_GET_func =
            []() -> std::pair<int, ListFineTunesResponse>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, FineTune> handler_POST(
        CreateFineTuneRequest & createFineTuneRequest);

    virtual std::pair<int, ListFineTunesResponse> handler_GET(
        );

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Creates an image given a prompt.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ImagesGenerationsResource: public restbed::Resource
{
public:
    ImagesGenerationsResource(const std::string& context = "/v1");
    virtual ~ImagesGenerationsResource() = default;

    ImagesGenerationsResource(
        const ImagesGenerationsResource& other) = default; // copy constructor
    ImagesGenerationsResource(ImagesGenerationsResource&& other) noexcept = default; // move constructor

    ImagesGenerationsResource& operator=(const ImagesGenerationsResource& other) = default; // copy assignment
    ImagesGenerationsResource& operator=(ImagesGenerationsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, ImagesResponse>(
        CreateImageRequest & createImageRequest)> handler_POST_func =
            [](CreateImageRequest &) -> std::pair<int, ImagesResponse>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, ImagesResponse> handler_POST(
        CreateImageRequest & createImageRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Creates an edited or extended image given an original image and a prompt.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ImagesEditsResource: public restbed::Resource
{
public:
    ImagesEditsResource(const std::string& context = "/v1");
    virtual ~ImagesEditsResource() = default;

    ImagesEditsResource(
        const ImagesEditsResource& other) = default; // copy constructor
    ImagesEditsResource(ImagesEditsResource&& other) noexcept = default; // move constructor

    ImagesEditsResource& operator=(const ImagesEditsResource& other) = default; // copy assignment
    ImagesEditsResource& operator=(ImagesEditsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, ImagesResponse>(
        std::string & image, std::string & prompt, std::string & mask, int32_t & n, std::string & size, std::string & responseFormat, std::string & user)> handler_POST_func =
            [](std::string &, std::string &, std::string &, int32_t &, std::string &, std::string &, std::string &) -> std::pair<int, ImagesResponse>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, ImagesResponse> handler_POST(
        std::string & image, std::string & prompt, std::string & mask, int32_t & n, std::string & size, std::string & responseFormat, std::string & user);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Creates a variation of a given image.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ImagesVariationsResource: public restbed::Resource
{
public:
    ImagesVariationsResource(const std::string& context = "/v1");
    virtual ~ImagesVariationsResource() = default;

    ImagesVariationsResource(
        const ImagesVariationsResource& other) = default; // copy constructor
    ImagesVariationsResource(ImagesVariationsResource&& other) noexcept = default; // move constructor

    ImagesVariationsResource& operator=(const ImagesVariationsResource& other) = default; // copy assignment
    ImagesVariationsResource& operator=(ImagesVariationsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, ImagesResponse>(
        std::string & image, int32_t & n, std::string & size, std::string & responseFormat, std::string & user)> handler_POST_func =
            [](std::string &, int32_t &, std::string &, std::string &, std::string &) -> std::pair<int, ImagesResponse>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, ImagesResponse> handler_POST(
        std::string & image, int32_t & n, std::string & size, std::string & responseFormat, std::string & user);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Classifies if text violates OpenAI&#39;s Content Policy
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ModerationsResource: public restbed::Resource
{
public:
    ModerationsResource(const std::string& context = "/v1");
    virtual ~ModerationsResource() = default;

    ModerationsResource(
        const ModerationsResource& other) = default; // copy constructor
    ModerationsResource(ModerationsResource&& other) noexcept = default; // move constructor

    ModerationsResource& operator=(const ModerationsResource& other) = default; // copy assignment
    ModerationsResource& operator=(ModerationsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CreateModerationResponse>(
        CreateModerationRequest & createModerationRequest)> handler_POST_func =
            [](CreateModerationRequest &) -> std::pair<int, CreateModerationResponse>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CreateModerationResponse> handler_POST(
        CreateModerationRequest & createModerationRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Transcribes audio into the input language.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  AudioTranscriptionsResource: public restbed::Resource
{
public:
    AudioTranscriptionsResource(const std::string& context = "/v1");
    virtual ~AudioTranscriptionsResource() = default;

    AudioTranscriptionsResource(
        const AudioTranscriptionsResource& other) = default; // copy constructor
    AudioTranscriptionsResource(AudioTranscriptionsResource&& other) noexcept = default; // move constructor

    AudioTranscriptionsResource& operator=(const AudioTranscriptionsResource& other) = default; // copy assignment
    AudioTranscriptionsResource& operator=(AudioTranscriptionsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CreateTranscriptionResponse>(
        std::string & file, CreateTranscriptionRequest_model & model, std::string & prompt, std::string & responseFormat, double & temperature, std::string & language)> handler_POST_func =
            [](std::string &, CreateTranscriptionRequest_model &, std::string &, std::string &, double &, std::string &) -> std::pair<int, CreateTranscriptionResponse>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CreateTranscriptionResponse> handler_POST(
        std::string & file, CreateTranscriptionRequest_model & model, std::string & prompt, std::string & responseFormat, double & temperature, std::string & language);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Translates audio into English.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  AudioTranslationsResource: public restbed::Resource
{
public:
    AudioTranslationsResource(const std::string& context = "/v1");
    virtual ~AudioTranslationsResource() = default;

    AudioTranslationsResource(
        const AudioTranslationsResource& other) = default; // copy constructor
    AudioTranslationsResource(AudioTranslationsResource&& other) noexcept = default; // move constructor

    AudioTranslationsResource& operator=(const AudioTranslationsResource& other) = default; // copy assignment
    AudioTranslationsResource& operator=(AudioTranslationsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CreateTranslationResponse>(
        std::string & file, CreateTranscriptionRequest_model & model, std::string & prompt, std::string & responseFormat, double & temperature)> handler_POST_func =
            [](std::string &, CreateTranscriptionRequest_model &, std::string &, std::string &, double &) -> std::pair<int, CreateTranslationResponse>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CreateTranslationResponse> handler_POST(
        std::string & file, CreateTranscriptionRequest_model & model, std::string & prompt, std::string & responseFormat, double & temperature);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete a file.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  FilesFile_idResource: public restbed::Resource
{
public:
    FilesFile_idResource(const std::string& context = "/v1");
    virtual ~FilesFile_idResource() = default;

    FilesFile_idResource(
        const FilesFile_idResource& other) = default; // copy constructor
    FilesFile_idResource(FilesFile_idResource&& other) noexcept = default; // move constructor

    FilesFile_idResource& operator=(const FilesFile_idResource& other) = default; // copy assignment
    FilesFile_idResource& operator=(FilesFile_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeleteFileResponse>(
        std::string & fileId)> handler_DELETE_func =
            [](std::string &) -> std::pair<int, DeleteFileResponse>
                { throw OpenAIApiException(501, "Not implemented"); };

    std::function<std::pair<int, OpenAIFile>(
        std::string & fileId)> handler_GET_func =
            [](std::string &) -> std::pair<int, OpenAIFile>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeleteFileResponse> handler_DELETE(
        std::string & fileId);

    virtual std::pair<int, OpenAIFile> handler_GET(
        std::string & fileId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete a fine-tuned model. You must have the Owner role in your organization.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ModelsModelResource: public restbed::Resource
{
public:
    ModelsModelResource(const std::string& context = "/v1");
    virtual ~ModelsModelResource() = default;

    ModelsModelResource(
        const ModelsModelResource& other) = default; // copy constructor
    ModelsModelResource(ModelsModelResource&& other) noexcept = default; // move constructor

    ModelsModelResource& operator=(const ModelsModelResource& other) = default; // copy assignment
    ModelsModelResource& operator=(ModelsModelResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeleteModelResponse>(
        std::string & model)> handler_DELETE_func =
            [](std::string &) -> std::pair<int, DeleteModelResponse>
                { throw OpenAIApiException(501, "Not implemented"); };

    std::function<std::pair<int, Model>(
        std::string & model)> handler_GET_func =
            [](std::string &) -> std::pair<int, Model>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeleteModelResponse> handler_DELETE(
        std::string & model);

    virtual std::pair<int, Model> handler_GET(
        std::string & model);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Returns the contents of the specified file
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  FilesFile_idContentResource: public restbed::Resource
{
public:
    FilesFile_idContentResource(const std::string& context = "/v1");
    virtual ~FilesFile_idContentResource() = default;

    FilesFile_idContentResource(
        const FilesFile_idContentResource& other) = default; // copy constructor
    FilesFile_idContentResource(FilesFile_idContentResource&& other) noexcept = default; // move constructor

    FilesFile_idContentResource& operator=(const FilesFile_idContentResource& other) = default; // copy assignment
    FilesFile_idContentResource& operator=(FilesFile_idContentResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        std::string & fileId)> handler_GET_func =
            [](std::string &) -> std::pair<int, std::string>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        std::string & fileId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get fine-grained status updates for a fine-tune job. 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  Fine_tunesFine_tune_idEventsResource: public restbed::Resource
{
public:
    Fine_tunesFine_tune_idEventsResource(const std::string& context = "/v1");
    virtual ~Fine_tunesFine_tune_idEventsResource() = default;

    Fine_tunesFine_tune_idEventsResource(
        const Fine_tunesFine_tune_idEventsResource& other) = default; // copy constructor
    Fine_tunesFine_tune_idEventsResource(Fine_tunesFine_tune_idEventsResource&& other) noexcept = default; // move constructor

    Fine_tunesFine_tune_idEventsResource& operator=(const Fine_tunesFine_tune_idEventsResource& other) = default; // copy assignment
    Fine_tunesFine_tune_idEventsResource& operator=(Fine_tunesFine_tune_idEventsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, ListFineTuneEventsResponse>(
        std::string & fineTuneId, bool & stream)> handler_GET_func =
            [](std::string &, bool &) -> std::pair<int, ListFineTuneEventsResponse>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, ListFineTuneEventsResponse> handler_GET(
        std::string & fineTuneId, bool & stream);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Lists the currently available models, and provides basic information about each one such as the owner and availability.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ModelsResource: public restbed::Resource
{
public:
    ModelsResource(const std::string& context = "/v1");
    virtual ~ModelsResource() = default;

    ModelsResource(
        const ModelsResource& other) = default; // copy constructor
    ModelsResource(ModelsResource&& other) noexcept = default; // move constructor

    ModelsResource& operator=(const ModelsResource& other) = default; // copy assignment
    ModelsResource& operator=(ModelsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, ListModelsResponse>(
        )> handler_GET_func =
            []() -> std::pair<int, ListModelsResponse>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, ListModelsResponse> handler_GET(
        );


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  Fine_tunesFine_tune_idResource: public restbed::Resource
{
public:
    Fine_tunesFine_tune_idResource(const std::string& context = "/v1");
    virtual ~Fine_tunesFine_tune_idResource() = default;

    Fine_tunesFine_tune_idResource(
        const Fine_tunesFine_tune_idResource& other) = default; // copy constructor
    Fine_tunesFine_tune_idResource(Fine_tunesFine_tune_idResource&& other) noexcept = default; // move constructor

    Fine_tunesFine_tune_idResource& operator=(const Fine_tunesFine_tune_idResource& other) = default; // copy assignment
    Fine_tunesFine_tune_idResource& operator=(Fine_tunesFine_tune_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, FineTune>(
        std::string & fineTuneId)> handler_GET_func =
            [](std::string &) -> std::pair<int, FineTune>
                { throw OpenAIApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, FineTune> handler_GET(
        std::string & fineTuneId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOpenAIApiException(const OpenAIApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace OpenAIApiResources */

using OpenAIApiFine_tunesFine_tune_idCancelResource [[deprecated]] = OpenAIApiResources::Fine_tunesFine_tune_idCancelResource;
using OpenAIApiChatCompletionsResource [[deprecated]] = OpenAIApiResources::ChatCompletionsResource;
using OpenAIApiCompletionsResource [[deprecated]] = OpenAIApiResources::CompletionsResource;
using OpenAIApiEditsResource [[deprecated]] = OpenAIApiResources::EditsResource;
using OpenAIApiEmbeddingsResource [[deprecated]] = OpenAIApiResources::EmbeddingsResource;
using OpenAIApiFilesResource [[deprecated]] = OpenAIApiResources::FilesResource;
using OpenAIApiFine_tunesResource [[deprecated]] = OpenAIApiResources::Fine_tunesResource;
using OpenAIApiImagesGenerationsResource [[deprecated]] = OpenAIApiResources::ImagesGenerationsResource;
using OpenAIApiImagesEditsResource [[deprecated]] = OpenAIApiResources::ImagesEditsResource;
using OpenAIApiImagesVariationsResource [[deprecated]] = OpenAIApiResources::ImagesVariationsResource;
using OpenAIApiModerationsResource [[deprecated]] = OpenAIApiResources::ModerationsResource;
using OpenAIApiAudioTranscriptionsResource [[deprecated]] = OpenAIApiResources::AudioTranscriptionsResource;
using OpenAIApiAudioTranslationsResource [[deprecated]] = OpenAIApiResources::AudioTranslationsResource;
using OpenAIApiFilesFile_idResource [[deprecated]] = OpenAIApiResources::FilesFile_idResource;
using OpenAIApiModelsModelResource [[deprecated]] = OpenAIApiResources::ModelsModelResource;
using OpenAIApiFilesFile_idContentResource [[deprecated]] = OpenAIApiResources::FilesFile_idContentResource;
using OpenAIApiFine_tunesFine_tune_idEventsResource [[deprecated]] = OpenAIApiResources::Fine_tunesFine_tune_idEventsResource;
using OpenAIApiModelsResource [[deprecated]] = OpenAIApiResources::ModelsResource;
using OpenAIApiFine_tunesFine_tune_idResource [[deprecated]] = OpenAIApiResources::Fine_tunesFine_tune_idResource;

//
// The restbed service to actually implement the REST server
//
class  OpenAIApi
{
public:
    explicit OpenAIApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~OpenAIApi();

    std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idCancelResource> getFine_tunesFine_tune_idCancelResource();
    std::shared_ptr<OpenAIApiResources::ChatCompletionsResource> getChatCompletionsResource();
    std::shared_ptr<OpenAIApiResources::CompletionsResource> getCompletionsResource();
    std::shared_ptr<OpenAIApiResources::EditsResource> getEditsResource();
    std::shared_ptr<OpenAIApiResources::EmbeddingsResource> getEmbeddingsResource();
    std::shared_ptr<OpenAIApiResources::FilesResource> getFilesResource();
    std::shared_ptr<OpenAIApiResources::Fine_tunesResource> getFine_tunesResource();
    std::shared_ptr<OpenAIApiResources::ImagesGenerationsResource> getImagesGenerationsResource();
    std::shared_ptr<OpenAIApiResources::ImagesEditsResource> getImagesEditsResource();
    std::shared_ptr<OpenAIApiResources::ImagesVariationsResource> getImagesVariationsResource();
    std::shared_ptr<OpenAIApiResources::ModerationsResource> getModerationsResource();
    std::shared_ptr<OpenAIApiResources::AudioTranscriptionsResource> getAudioTranscriptionsResource();
    std::shared_ptr<OpenAIApiResources::AudioTranslationsResource> getAudioTranslationsResource();
    std::shared_ptr<OpenAIApiResources::FilesFile_idResource> getFilesFile_idResource();
    std::shared_ptr<OpenAIApiResources::ModelsModelResource> getModelsModelResource();
    std::shared_ptr<OpenAIApiResources::FilesFile_idContentResource> getFilesFile_idContentResource();
    std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idEventsResource> getFine_tunesFine_tune_idEventsResource();
    std::shared_ptr<OpenAIApiResources::ModelsResource> getModelsResource();
    std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idResource> getFine_tunesFine_tune_idResource();

    void setResource(std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idCancelResource> resource);
    void setResource(std::shared_ptr<OpenAIApiResources::ChatCompletionsResource> resource);
    void setResource(std::shared_ptr<OpenAIApiResources::CompletionsResource> resource);
    void setResource(std::shared_ptr<OpenAIApiResources::EditsResource> resource);
    void setResource(std::shared_ptr<OpenAIApiResources::EmbeddingsResource> resource);
    void setResource(std::shared_ptr<OpenAIApiResources::FilesResource> resource);
    void setResource(std::shared_ptr<OpenAIApiResources::Fine_tunesResource> resource);
    void setResource(std::shared_ptr<OpenAIApiResources::ImagesGenerationsResource> resource);
    void setResource(std::shared_ptr<OpenAIApiResources::ImagesEditsResource> resource);
    void setResource(std::shared_ptr<OpenAIApiResources::ImagesVariationsResource> resource);
    void setResource(std::shared_ptr<OpenAIApiResources::ModerationsResource> resource);
    void setResource(std::shared_ptr<OpenAIApiResources::AudioTranscriptionsResource> resource);
    void setResource(std::shared_ptr<OpenAIApiResources::AudioTranslationsResource> resource);
    void setResource(std::shared_ptr<OpenAIApiResources::FilesFile_idResource> resource);
    void setResource(std::shared_ptr<OpenAIApiResources::ModelsModelResource> resource);
    void setResource(std::shared_ptr<OpenAIApiResources::FilesFile_idContentResource> resource);
    void setResource(std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idEventsResource> resource);
    void setResource(std::shared_ptr<OpenAIApiResources::ModelsResource> resource);
    void setResource(std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiFine_tunesFine_tune_idCancelResource(std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idCancelResource> spOpenAIApiFine_tunesFine_tune_idCancelResource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiChatCompletionsResource(std::shared_ptr<OpenAIApiResources::ChatCompletionsResource> spOpenAIApiChatCompletionsResource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiCompletionsResource(std::shared_ptr<OpenAIApiResources::CompletionsResource> spOpenAIApiCompletionsResource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiEditsResource(std::shared_ptr<OpenAIApiResources::EditsResource> spOpenAIApiEditsResource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiEmbeddingsResource(std::shared_ptr<OpenAIApiResources::EmbeddingsResource> spOpenAIApiEmbeddingsResource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiFilesResource(std::shared_ptr<OpenAIApiResources::FilesResource> spOpenAIApiFilesResource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiFine_tunesResource(std::shared_ptr<OpenAIApiResources::Fine_tunesResource> spOpenAIApiFine_tunesResource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiImagesGenerationsResource(std::shared_ptr<OpenAIApiResources::ImagesGenerationsResource> spOpenAIApiImagesGenerationsResource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiImagesEditsResource(std::shared_ptr<OpenAIApiResources::ImagesEditsResource> spOpenAIApiImagesEditsResource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiImagesVariationsResource(std::shared_ptr<OpenAIApiResources::ImagesVariationsResource> spOpenAIApiImagesVariationsResource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiModerationsResource(std::shared_ptr<OpenAIApiResources::ModerationsResource> spOpenAIApiModerationsResource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiAudioTranscriptionsResource(std::shared_ptr<OpenAIApiResources::AudioTranscriptionsResource> spOpenAIApiAudioTranscriptionsResource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiAudioTranslationsResource(std::shared_ptr<OpenAIApiResources::AudioTranslationsResource> spOpenAIApiAudioTranslationsResource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiFilesFile_idResource(std::shared_ptr<OpenAIApiResources::FilesFile_idResource> spOpenAIApiFilesFile_idResource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiModelsModelResource(std::shared_ptr<OpenAIApiResources::ModelsModelResource> spOpenAIApiModelsModelResource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiFilesFile_idContentResource(std::shared_ptr<OpenAIApiResources::FilesFile_idContentResource> spOpenAIApiFilesFile_idContentResource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiFine_tunesFine_tune_idEventsResource(std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idEventsResource> spOpenAIApiFine_tunesFine_tune_idEventsResource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiModelsResource(std::shared_ptr<OpenAIApiResources::ModelsResource> spOpenAIApiModelsResource);
    [[deprecated("use setResource()")]]
    virtual void setOpenAIApiFine_tunesFine_tune_idResource(std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idResource> spOpenAIApiFine_tunesFine_tune_idResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idCancelResource> m_spFine_tunesFine_tune_idCancelResource;
    std::shared_ptr<OpenAIApiResources::ChatCompletionsResource> m_spChatCompletionsResource;
    std::shared_ptr<OpenAIApiResources::CompletionsResource> m_spCompletionsResource;
    std::shared_ptr<OpenAIApiResources::EditsResource> m_spEditsResource;
    std::shared_ptr<OpenAIApiResources::EmbeddingsResource> m_spEmbeddingsResource;
    std::shared_ptr<OpenAIApiResources::FilesResource> m_spFilesResource;
    std::shared_ptr<OpenAIApiResources::Fine_tunesResource> m_spFine_tunesResource;
    std::shared_ptr<OpenAIApiResources::ImagesGenerationsResource> m_spImagesGenerationsResource;
    std::shared_ptr<OpenAIApiResources::ImagesEditsResource> m_spImagesEditsResource;
    std::shared_ptr<OpenAIApiResources::ImagesVariationsResource> m_spImagesVariationsResource;
    std::shared_ptr<OpenAIApiResources::ModerationsResource> m_spModerationsResource;
    std::shared_ptr<OpenAIApiResources::AudioTranscriptionsResource> m_spAudioTranscriptionsResource;
    std::shared_ptr<OpenAIApiResources::AudioTranslationsResource> m_spAudioTranslationsResource;
    std::shared_ptr<OpenAIApiResources::FilesFile_idResource> m_spFilesFile_idResource;
    std::shared_ptr<OpenAIApiResources::ModelsModelResource> m_spModelsModelResource;
    std::shared_ptr<OpenAIApiResources::FilesFile_idContentResource> m_spFilesFile_idContentResource;
    std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idEventsResource> m_spFine_tunesFine_tune_idEventsResource;
    std::shared_ptr<OpenAIApiResources::ModelsResource> m_spModelsResource;
    std::shared_ptr<OpenAIApiResources::Fine_tunesFine_tune_idResource> m_spFine_tunesFine_tune_idResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* OpenAIApi_H_ */

