/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AssistantFileObject.h
 *
 * A list of [Files](/docs/api-reference/files) attached to an &#x60;assistant&#x60;.
 */

#ifndef AssistantFileObject_H_
#define AssistantFileObject_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// A list of [Files](/docs/api-reference/files) attached to an &#x60;assistant&#x60;.
/// </summary>
class  AssistantFileObject 
{
public:
    AssistantFileObject() = default;
    explicit AssistantFileObject(boost::property_tree::ptree const& pt);
    virtual ~AssistantFileObject() = default;

    AssistantFileObject(const AssistantFileObject& other) = default; // copy constructor
    AssistantFileObject(AssistantFileObject&& other) noexcept = default; // move constructor

    AssistantFileObject& operator=(const AssistantFileObject& other) = default; // copy assignment
    AssistantFileObject& operator=(AssistantFileObject&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AssistantFileObject members

    /// <summary>
    /// The identifier, which can be referenced in API endpoints.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// The object type, which is always &#x60;assistant.file&#x60;.
    /// </summary>
    std::string getObject() const;
    void setObject(std::string value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the assistant file was created.
    /// </summary>
    int32_t getCreatedAt() const;
    void setCreatedAt(int32_t value);

    /// <summary>
    /// The assistant ID that the file is attached to.
    /// </summary>
    std::string getAssistantId() const;
    void setAssistantId(std::string value);

protected:
    std::string m_Id = "";
    std::string m_object = "";
    int32_t m_Created_at = 0;
    std::string m_Assistant_id = "";
};

std::vector<AssistantFileObject> createAssistantFileObjectVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AssistantFileObject>(const AssistantFileObject& val) {
    return val.toPropertyTree();
}

template<>
inline AssistantFileObject fromPt<AssistantFileObject>(const boost::property_tree::ptree& pt) {
    AssistantFileObject ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AssistantFileObject_H_ */
