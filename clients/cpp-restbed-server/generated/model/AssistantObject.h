/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AssistantObject.h
 *
 * Represents an &#x60;assistant&#x60; that can call the model and use tools.
 */

#ifndef AssistantObject_H_
#define AssistantObject_H_



#include "AssistantObject_tools_inner.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents an &#x60;assistant&#x60; that can call the model and use tools.
/// </summary>
class  AssistantObject 
{
public:
    AssistantObject() = default;
    explicit AssistantObject(boost::property_tree::ptree const& pt);
    virtual ~AssistantObject() = default;

    AssistantObject(const AssistantObject& other) = default; // copy constructor
    AssistantObject(AssistantObject&& other) noexcept = default; // move constructor

    AssistantObject& operator=(const AssistantObject& other) = default; // copy assignment
    AssistantObject& operator=(AssistantObject&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AssistantObject members

    /// <summary>
    /// The identifier, which can be referenced in API endpoints.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// The object type, which is always &#x60;assistant&#x60;.
    /// </summary>
    std::string getObject() const;
    void setObject(std::string value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the assistant was created.
    /// </summary>
    int32_t getCreatedAt() const;
    void setCreatedAt(int32_t value);

    /// <summary>
    /// The name of the assistant. The maximum length is 256 characters. 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// The description of the assistant. The maximum length is 512 characters. 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
    /// </summary>
    std::string getModel() const;
    void setModel(std::string value);

    /// <summary>
    /// The system instructions that the assistant uses. The maximum length is 256,000 characters. 
    /// </summary>
    std::string getInstructions() const;
    void setInstructions(std::string value);

    /// <summary>
    /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types &#x60;code_interpreter&#x60;, &#x60;retrieval&#x60;, or &#x60;function&#x60;. 
    /// </summary>
    std::vector<AssistantObject_tools_inner> getTools() const;
    void setTools(std::vector<AssistantObject_tools_inner> value);

    /// <summary>
    /// A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. 
    /// </summary>
    std::vector<std::string> getFileIds() const;
    void setFileIds(std::vector<std::string> value);

    /// <summary>
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    /// </summary>
    std::string getMetadata() const;
    void setMetadata(std::string value);

protected:
    std::string m_Id = "";
    std::string m_object = "";
    int32_t m_Created_at = 0;
    std::string m_Name = "";
    std::string m_Description = "";
    std::string m_Model = "";
    std::string m_Instructions = "";
    std::vector<AssistantObject_tools_inner> m_Tools;
    std::vector<std::string> m_File_ids;
    std::string m_Metadata = std::string{};
};

std::vector<AssistantObject> createAssistantObjectVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AssistantObject>(const AssistantObject& val) {
    return val.toPropertyTree();
}

template<>
inline AssistantObject fromPt<AssistantObject>(const boost::property_tree::ptree& pt) {
    AssistantObject ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AssistantObject_H_ */
