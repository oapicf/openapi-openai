/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AssistantObject_tools_inner.h
 *
 * 
 */

#ifndef AssistantObject_tools_inner_H_
#define AssistantObject_tools_inner_H_



#include "AssistantToolsFunction.h"
#include "FunctionObject.h"
#include "AssistantToolsCode.h"
#include "AssistantToolsRetrieval.h"
#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "AssistantToolsCode.h"
#include "AssistantToolsRetrieval.h"
#include "AssistantToolsFunction.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AssistantObject_tools_inner : public AssistantToolsCode, public AssistantToolsRetrieval, public AssistantToolsFunction
{
public:
    AssistantObject_tools_inner() = default;
    explicit AssistantObject_tools_inner(boost::property_tree::ptree const& pt);
    virtual ~AssistantObject_tools_inner() = default;

    AssistantObject_tools_inner(const AssistantObject_tools_inner& other) = default; // copy constructor
    AssistantObject_tools_inner(AssistantObject_tools_inner&& other) noexcept = default; // move constructor

    AssistantObject_tools_inner& operator=(const AssistantObject_tools_inner& other) = default; // copy assignment
    AssistantObject_tools_inner& operator=(AssistantObject_tools_inner&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AssistantObject_tools_inner members

    /// <summary>
    /// The type of tool being defined: &#x60;code_interpreter&#x60;
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    FunctionObject getFunction() const;
    void setFunction(FunctionObject value);

protected:
    std::string m_Type = "";
    FunctionObject m_Function;
};

std::vector<AssistantObject_tools_inner> createAssistantObject_tools_innerVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AssistantObject_tools_inner>(const AssistantObject_tools_inner& val) {
    return val.toPropertyTree();
}

template<>
inline AssistantObject_tools_inner fromPt<AssistantObject_tools_inner>(const boost::property_tree::ptree& pt) {
    AssistantObject_tools_inner ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AssistantObject_tools_inner_H_ */
