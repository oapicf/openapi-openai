/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AssistantStreamEvent.h
 *
 * Represents an event emitted when streaming a Run.  Each event in a server-sent events stream has an &#x60;event&#x60; and &#x60;data&#x60; property:  &#x60;&#x60;&#x60; event: thread.created data: {\&quot;id\&quot;: \&quot;thread_123\&quot;, \&quot;object\&quot;: \&quot;thread\&quot;, ...} &#x60;&#x60;&#x60;  We emit events whenever a new object is created, transitions to a new state, or is being streamed in parts (deltas). For example, we emit &#x60;thread.run.created&#x60; when a new run is created, &#x60;thread.run.completed&#x60; when a run completes, and so on. When an Assistant chooses to create a message during a run, we emit a &#x60;thread.message.created event&#x60;, a &#x60;thread.message.in_progress&#x60; event, many &#x60;thread.message.delta&#x60; events, and finally a &#x60;thread.message.completed&#x60; event.  We may add additional events over time, so we recommend handling unknown events gracefully in your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to integrate the Assistants API with streaming. 
 */

#ifndef AssistantStreamEvent_H_
#define AssistantStreamEvent_H_



#include "RunStreamEvent.h"
#include "ThreadStreamEvent.h"
#include "ErrorEvent.h"
#include "DoneEvent.h"
#include <string>
#include "RunStepStreamEvent.h"
#include "MessageStreamEvent.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "ThreadStreamEvent.h"
#include "RunStreamEvent.h"
#include "RunStepStreamEvent.h"
#include "MessageStreamEvent.h"
#include "ErrorEvent.h"
#include "DoneEvent.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents an event emitted when streaming a Run.  Each event in a server-sent events stream has an &#x60;event&#x60; and &#x60;data&#x60; property:  &#x60;&#x60;&#x60; event: thread.created data: {\&quot;id\&quot;: \&quot;thread_123\&quot;, \&quot;object\&quot;: \&quot;thread\&quot;, ...} &#x60;&#x60;&#x60;  We emit events whenever a new object is created, transitions to a new state, or is being streamed in parts (deltas). For example, we emit &#x60;thread.run.created&#x60; when a new run is created, &#x60;thread.run.completed&#x60; when a run completes, and so on. When an Assistant chooses to create a message during a run, we emit a &#x60;thread.message.created event&#x60;, a &#x60;thread.message.in_progress&#x60; event, many &#x60;thread.message.delta&#x60; events, and finally a &#x60;thread.message.completed&#x60; event.  We may add additional events over time, so we recommend handling unknown events gracefully in your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to integrate the Assistants API with streaming. 
/// </summary>
class  AssistantStreamEvent : public ThreadStreamEvent, public RunStreamEvent, public RunStepStreamEvent, public MessageStreamEvent, public ErrorEvent, public DoneEvent
{
public:
    AssistantStreamEvent() = default;
    explicit AssistantStreamEvent(boost::property_tree::ptree const& pt);
    virtual ~AssistantStreamEvent() = default;

    AssistantStreamEvent(const AssistantStreamEvent& other) = default; // copy constructor
    AssistantStreamEvent(AssistantStreamEvent&& other) noexcept = default; // move constructor

    AssistantStreamEvent& operator=(const AssistantStreamEvent& other) = default; // copy assignment
    AssistantStreamEvent& operator=(AssistantStreamEvent&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AssistantStreamEvent members

    /// <summary>
    /// 
    /// </summary>
    std::string getEvent() const;
    void setEvent(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getData() const;
    void setData(std::string value);

protected:
    std::string m_Event = "";
    std::string m_Data = "";
};

std::vector<AssistantStreamEvent> createAssistantStreamEventVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AssistantStreamEvent>(const AssistantStreamEvent& val) {
    return val.toPropertyTree();
}

template<>
inline AssistantStreamEvent fromPt<AssistantStreamEvent>(const boost::property_tree::ptree& pt) {
    AssistantStreamEvent ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AssistantStreamEvent_H_ */
