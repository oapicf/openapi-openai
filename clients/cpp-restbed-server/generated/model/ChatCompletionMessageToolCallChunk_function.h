/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ChatCompletionMessageToolCallChunk_function.h
 *
 * 
 */

#ifndef ChatCompletionMessageToolCallChunk_function_H_
#define ChatCompletionMessageToolCallChunk_function_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ChatCompletionMessageToolCallChunk_function 
{
public:
    ChatCompletionMessageToolCallChunk_function() = default;
    explicit ChatCompletionMessageToolCallChunk_function(boost::property_tree::ptree const& pt);
    virtual ~ChatCompletionMessageToolCallChunk_function() = default;

    ChatCompletionMessageToolCallChunk_function(const ChatCompletionMessageToolCallChunk_function& other) = default; // copy constructor
    ChatCompletionMessageToolCallChunk_function(ChatCompletionMessageToolCallChunk_function&& other) noexcept = default; // move constructor

    ChatCompletionMessageToolCallChunk_function& operator=(const ChatCompletionMessageToolCallChunk_function& other) = default; // copy assignment
    ChatCompletionMessageToolCallChunk_function& operator=(ChatCompletionMessageToolCallChunk_function&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ChatCompletionMessageToolCallChunk_function members

    /// <summary>
    /// The name of the function to call.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
    /// </summary>
    std::string getArguments() const;
    void setArguments(std::string value);

protected:
    std::string m_Name = "";
    std::string m_Arguments = "";
};

std::vector<ChatCompletionMessageToolCallChunk_function> createChatCompletionMessageToolCallChunk_functionVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ChatCompletionMessageToolCallChunk_function>(const ChatCompletionMessageToolCallChunk_function& val) {
    return val.toPropertyTree();
}

template<>
inline ChatCompletionMessageToolCallChunk_function fromPt<ChatCompletionMessageToolCallChunk_function>(const boost::property_tree::ptree& pt) {
    ChatCompletionMessageToolCallChunk_function ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ChatCompletionMessageToolCallChunk_function_H_ */
