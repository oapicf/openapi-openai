/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ChatCompletionRequestMessage.h
 *
 * 
 */

#ifndef ChatCompletionRequestMessage_H_
#define ChatCompletionRequestMessage_H_



#include "ChatCompletionRequestMessage_function_call.h"
#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ChatCompletionRequestMessage 
{
public:
    ChatCompletionRequestMessage() = default;
    explicit ChatCompletionRequestMessage(boost::property_tree::ptree const& pt);
    virtual ~ChatCompletionRequestMessage() = default;

    ChatCompletionRequestMessage(const ChatCompletionRequestMessage& other) = default; // copy constructor
    ChatCompletionRequestMessage(ChatCompletionRequestMessage&& other) noexcept = default; // move constructor

    ChatCompletionRequestMessage& operator=(const ChatCompletionRequestMessage& other) = default; // copy assignment
    ChatCompletionRequestMessage& operator=(ChatCompletionRequestMessage&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ChatCompletionRequestMessage members

    /// <summary>
    /// The role of the messages author. One of &#x60;system&#x60;, &#x60;user&#x60;, &#x60;assistant&#x60;, or &#x60;function&#x60;.
    /// </summary>
    std::string getRole() const;
    void setRole(std::string value);

    /// <summary>
    /// The contents of the message. &#x60;content&#x60; is required for all messages except assistant messages with function calls.
    /// </summary>
    std::string getContent() const;
    void setContent(std::string value);

    /// <summary>
    /// The name of the author of this message. &#x60;name&#x60; is required if role is &#x60;function&#x60;, and it should be the name of the function whose response is in the &#x60;content&#x60;. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    ChatCompletionRequestMessage_function_call getFunctionCall() const;
    void setFunctionCall(ChatCompletionRequestMessage_function_call value);

protected:
    std::string m_Role = "";
    std::string m_Content = "";
    std::string m_Name = "";
    ChatCompletionRequestMessage_function_call m_Function_call;
};

std::vector<ChatCompletionRequestMessage> createChatCompletionRequestMessageVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ChatCompletionRequestMessage>(const ChatCompletionRequestMessage& val) {
    return val.toPropertyTree();
}

template<>
inline ChatCompletionRequestMessage fromPt<ChatCompletionRequestMessage>(const boost::property_tree::ptree& pt) {
    ChatCompletionRequestMessage ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ChatCompletionRequestMessage_H_ */
