/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ChatCompletionRequestMessageContentPart.h
 *
 * 
 */

#ifndef ChatCompletionRequestMessageContentPart_H_
#define ChatCompletionRequestMessageContentPart_H_



#include "ChatCompletionRequestMessageContentPartImage_image_url.h"
#include "ChatCompletionRequestMessageContentPartText.h"
#include <string>
#include "ChatCompletionRequestMessageContentPartImage.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "ChatCompletionRequestMessageContentPartText.h"
#include "ChatCompletionRequestMessageContentPartImage.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ChatCompletionRequestMessageContentPart : public ChatCompletionRequestMessageContentPartText, public ChatCompletionRequestMessageContentPartImage
{
public:
    ChatCompletionRequestMessageContentPart() = default;
    explicit ChatCompletionRequestMessageContentPart(boost::property_tree::ptree const& pt);
    virtual ~ChatCompletionRequestMessageContentPart() = default;

    ChatCompletionRequestMessageContentPart(const ChatCompletionRequestMessageContentPart& other) = default; // copy constructor
    ChatCompletionRequestMessageContentPart(ChatCompletionRequestMessageContentPart&& other) noexcept = default; // move constructor

    ChatCompletionRequestMessageContentPart& operator=(const ChatCompletionRequestMessageContentPart& other) = default; // copy assignment
    ChatCompletionRequestMessageContentPart& operator=(ChatCompletionRequestMessageContentPart&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ChatCompletionRequestMessageContentPart members

    /// <summary>
    /// The type of the content part.
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// The text content.
    /// </summary>
    std::string getText() const;
    void setText(std::string value);

    /// <summary>
    /// 
    /// </summary>
    ChatCompletionRequestMessageContentPartImage_image_url getImageUrl() const;
    void setImageUrl(ChatCompletionRequestMessageContentPartImage_image_url value);

protected:
    std::string m_Type = "";
    std::string m_Text = "";
    ChatCompletionRequestMessageContentPartImage_image_url m_Image_url;
};

std::vector<ChatCompletionRequestMessageContentPart> createChatCompletionRequestMessageContentPartVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ChatCompletionRequestMessageContentPart>(const ChatCompletionRequestMessageContentPart& val) {
    return val.toPropertyTree();
}

template<>
inline ChatCompletionRequestMessageContentPart fromPt<ChatCompletionRequestMessageContentPart>(const boost::property_tree::ptree& pt) {
    ChatCompletionRequestMessageContentPart ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ChatCompletionRequestMessageContentPart_H_ */
