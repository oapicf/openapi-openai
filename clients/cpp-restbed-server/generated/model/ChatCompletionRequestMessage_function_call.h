/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ChatCompletionRequestMessage_function_call.h
 *
 * The name and arguments of a function that should be called, as generated by the model.
 */

#ifndef ChatCompletionRequestMessage_function_call_H_
#define ChatCompletionRequestMessage_function_call_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// The name and arguments of a function that should be called, as generated by the model.
/// </summary>
class  ChatCompletionRequestMessage_function_call 
{
public:
    ChatCompletionRequestMessage_function_call() = default;
    explicit ChatCompletionRequestMessage_function_call(boost::property_tree::ptree const& pt);
    virtual ~ChatCompletionRequestMessage_function_call() = default;

    ChatCompletionRequestMessage_function_call(const ChatCompletionRequestMessage_function_call& other) = default; // copy constructor
    ChatCompletionRequestMessage_function_call(ChatCompletionRequestMessage_function_call&& other) noexcept = default; // move constructor

    ChatCompletionRequestMessage_function_call& operator=(const ChatCompletionRequestMessage_function_call& other) = default; // copy assignment
    ChatCompletionRequestMessage_function_call& operator=(ChatCompletionRequestMessage_function_call&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ChatCompletionRequestMessage_function_call members

    /// <summary>
    /// The name of the function to call.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
    /// </summary>
    std::string getArguments() const;
    void setArguments(std::string value);

protected:
    std::string m_Name = "";
    std::string m_Arguments = "";
};

std::vector<ChatCompletionRequestMessage_function_call> createChatCompletionRequestMessage_function_callVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ChatCompletionRequestMessage_function_call>(const ChatCompletionRequestMessage_function_call& val) {
    return val.toPropertyTree();
}

template<>
inline ChatCompletionRequestMessage_function_call fromPt<ChatCompletionRequestMessage_function_call>(const boost::property_tree::ptree& pt) {
    ChatCompletionRequestMessage_function_call ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ChatCompletionRequestMessage_function_call_H_ */
