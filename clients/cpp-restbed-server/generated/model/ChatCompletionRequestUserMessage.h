/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ChatCompletionRequestUserMessage.h
 *
 * 
 */

#ifndef ChatCompletionRequestUserMessage_H_
#define ChatCompletionRequestUserMessage_H_



#include <string>
#include "ChatCompletionRequestUserMessage_content.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ChatCompletionRequestUserMessage 
{
public:
    ChatCompletionRequestUserMessage() = default;
    explicit ChatCompletionRequestUserMessage(boost::property_tree::ptree const& pt);
    virtual ~ChatCompletionRequestUserMessage() = default;

    ChatCompletionRequestUserMessage(const ChatCompletionRequestUserMessage& other) = default; // copy constructor
    ChatCompletionRequestUserMessage(ChatCompletionRequestUserMessage&& other) noexcept = default; // move constructor

    ChatCompletionRequestUserMessage& operator=(const ChatCompletionRequestUserMessage& other) = default; // copy assignment
    ChatCompletionRequestUserMessage& operator=(ChatCompletionRequestUserMessage&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ChatCompletionRequestUserMessage members

    /// <summary>
    /// 
    /// </summary>
    ChatCompletionRequestUserMessage_content getContent() const;
    void setContent(ChatCompletionRequestUserMessage_content value);

    /// <summary>
    /// The role of the messages author, in this case &#x60;user&#x60;.
    /// </summary>
    std::string getRole() const;
    void setRole(std::string value);

    /// <summary>
    /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

protected:
    ChatCompletionRequestUserMessage_content m_Content;
    std::string m_Role = "";
    std::string m_Name = "";
};

std::vector<ChatCompletionRequestUserMessage> createChatCompletionRequestUserMessageVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ChatCompletionRequestUserMessage>(const ChatCompletionRequestUserMessage& val) {
    return val.toPropertyTree();
}

template<>
inline ChatCompletionRequestUserMessage fromPt<ChatCompletionRequestUserMessage>(const boost::property_tree::ptree& pt) {
    ChatCompletionRequestUserMessage ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ChatCompletionRequestUserMessage_H_ */
