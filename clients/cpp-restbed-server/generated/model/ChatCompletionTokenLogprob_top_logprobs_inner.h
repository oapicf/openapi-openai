/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ChatCompletionTokenLogprob_top_logprobs_inner.h
 *
 * 
 */

#ifndef ChatCompletionTokenLogprob_top_logprobs_inner_H_
#define ChatCompletionTokenLogprob_top_logprobs_inner_H_



#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ChatCompletionTokenLogprob_top_logprobs_inner 
{
public:
    ChatCompletionTokenLogprob_top_logprobs_inner() = default;
    explicit ChatCompletionTokenLogprob_top_logprobs_inner(boost::property_tree::ptree const& pt);
    virtual ~ChatCompletionTokenLogprob_top_logprobs_inner() = default;

    ChatCompletionTokenLogprob_top_logprobs_inner(const ChatCompletionTokenLogprob_top_logprobs_inner& other) = default; // copy constructor
    ChatCompletionTokenLogprob_top_logprobs_inner(ChatCompletionTokenLogprob_top_logprobs_inner&& other) noexcept = default; // move constructor

    ChatCompletionTokenLogprob_top_logprobs_inner& operator=(const ChatCompletionTokenLogprob_top_logprobs_inner& other) = default; // copy assignment
    ChatCompletionTokenLogprob_top_logprobs_inner& operator=(ChatCompletionTokenLogprob_top_logprobs_inner&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ChatCompletionTokenLogprob_top_logprobs_inner members

    /// <summary>
    /// The token.
    /// </summary>
    std::string getToken() const;
    void setToken(std::string value);

    /// <summary>
    /// The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value &#x60;-9999.0&#x60; is used to signify that the token is very unlikely.
    /// </summary>
    double getLogprob() const;
    void setLogprob(double value);

    /// <summary>
    /// A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be &#x60;null&#x60; if there is no bytes representation for the token.
    /// </summary>
    std::vector<int32_t> getBytes() const;
    void setBytes(std::vector<int32_t> value);

protected:
    std::string m_Token = "";
    double m_Logprob = 0.0;
    std::vector<int32_t> m_Bytes;
};

std::vector<ChatCompletionTokenLogprob_top_logprobs_inner> createChatCompletionTokenLogprob_top_logprobs_innerVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ChatCompletionTokenLogprob_top_logprobs_inner>(const ChatCompletionTokenLogprob_top_logprobs_inner& val) {
    return val.toPropertyTree();
}

template<>
inline ChatCompletionTokenLogprob_top_logprobs_inner fromPt<ChatCompletionTokenLogprob_top_logprobs_inner>(const boost::property_tree::ptree& pt) {
    ChatCompletionTokenLogprob_top_logprobs_inner ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ChatCompletionTokenLogprob_top_logprobs_inner_H_ */
