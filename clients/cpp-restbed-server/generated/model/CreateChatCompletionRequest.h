/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateChatCompletionRequest.h
 *
 * 
 */

#ifndef CreateChatCompletionRequest_H_
#define CreateChatCompletionRequest_H_



#include "CreateChatCompletionRequest_model.h"
#include "ChatCompletionRequestMessage.h"
#include "CreateChatCompletionRequest_response_format.h"
#include "CreateChatCompletionRequest_function_call.h"
#include "CreateChatCompletionRequest_stop.h"
#include <string>
#include "ChatCompletionFunctions.h"
#include "ChatCompletionTool.h"
#include <map>
#include <vector>
#include "ChatCompletionToolChoiceOption.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CreateChatCompletionRequest 
{
public:
    CreateChatCompletionRequest() = default;
    explicit CreateChatCompletionRequest(boost::property_tree::ptree const& pt);
    virtual ~CreateChatCompletionRequest() = default;

    CreateChatCompletionRequest(const CreateChatCompletionRequest& other) = default; // copy constructor
    CreateChatCompletionRequest(CreateChatCompletionRequest&& other) noexcept = default; // move constructor

    CreateChatCompletionRequest& operator=(const CreateChatCompletionRequest& other) = default; // copy assignment
    CreateChatCompletionRequest& operator=(CreateChatCompletionRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateChatCompletionRequest members

    /// <summary>
    /// A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
    /// </summary>
    std::vector<ChatCompletionRequestMessage> getMessages() const;
    void setMessages(std::vector<ChatCompletionRequestMessage> value);

    /// <summary>
    /// 
    /// </summary>
    CreateChatCompletionRequest_model getModel() const;
    void setModel(CreateChatCompletionRequest_model value);

    /// <summary>
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
    /// </summary>
    double getFrequencyPenalty() const;
    void setFrequencyPenalty(double value);

    /// <summary>
    /// Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. 
    /// </summary>
    std::map<std::string, int32_t> getLogitBias() const;
    void setLogitBias(std::map<std::string, int32_t> value);

    /// <summary>
    /// Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the &#x60;content&#x60; of &#x60;message&#x60;.
    /// </summary>
    bool isLogprobs() const;
    void setLogprobs(bool value);

    /// <summary>
    /// An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. &#x60;logprobs&#x60; must be set to &#x60;true&#x60; if this parameter is used.
    /// </summary>
    int32_t getTopLogprobs() const;
    void setTopLogprobs(int32_t value);

    /// <summary>
    /// The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.  The total length of input tokens and generated tokens is limited by the model&#39;s context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. 
    /// </summary>
    int32_t getMaxTokens() const;
    void setMaxTokens(int32_t value);

    /// <summary>
    /// How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep &#x60;n&#x60; as &#x60;1&#x60; to minimize costs.
    /// </summary>
    int32_t getN() const;
    void setN(int32_t value);

    /// <summary>
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
    /// </summary>
    double getPresencePenalty() const;
    void setPresencePenalty(double value);

    /// <summary>
    /// 
    /// </summary>
    CreateChatCompletionRequest_response_format getResponseFormat() const;
    void setResponseFormat(CreateChatCompletionRequest_response_format value);

    /// <summary>
    /// This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same &#x60;seed&#x60; and parameters should return the same result. Determinism is not guaranteed, and you should refer to the &#x60;system_fingerprint&#x60; response parameter to monitor changes in the backend. 
    /// </summary>
    int32_t getSeed() const;
    void setSeed(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    CreateChatCompletionRequest_stop getStop() const;
    void setStop(CreateChatCompletionRequest_stop value);

    /// <summary>
    /// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a &#x60;data: [DONE]&#x60; message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). 
    /// </summary>
    bool isStream() const;
    void setStream(bool value);

    /// <summary>
    /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both. 
    /// </summary>
    double getTemperature() const;
    void setTemperature(double value);

    /// <summary>
    /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. 
    /// </summary>
    double getTopP() const;
    void setTopP(double value);

    /// <summary>
    /// A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported. 
    /// </summary>
    std::vector<ChatCompletionTool> getTools() const;
    void setTools(std::vector<ChatCompletionTool> value);

    /// <summary>
    /// 
    /// </summary>
    ChatCompletionToolChoiceOption getToolChoice() const;
    void setToolChoice(ChatCompletionToolChoiceOption value);

    /// <summary>
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    /// </summary>
    std::string getUser() const;
    void setUser(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CreateChatCompletionRequest_function_call getFunctionCall() const;
    void setFunctionCall(CreateChatCompletionRequest_function_call value);

    /// <summary>
    /// Deprecated in favor of &#x60;tools&#x60;.  A list of functions the model may generate JSON inputs for. 
    /// </summary>
    std::vector<ChatCompletionFunctions> getFunctions() const;
    void setFunctions(std::vector<ChatCompletionFunctions> value);

protected:
    std::vector<ChatCompletionRequestMessage> m_Messages;
    CreateChatCompletionRequest_model m_Model;
    double m_Frequency_penalty = 0;
    std::map<std::string, int32_t> m_Logit_bias;
    bool m_Logprobs = false;
    int32_t m_Top_logprobs = 0;
    int32_t m_Max_tokens = 0;
    int32_t m_n = 1;
    double m_Presence_penalty = 0;
    CreateChatCompletionRequest_response_format m_Response_format;
    int32_t m_Seed = 0;
    CreateChatCompletionRequest_stop m_Stop;
    bool m_Stream = false;
    double m_Temperature = 1;
    double m_Top_p = 1;
    std::vector<ChatCompletionTool> m_Tools;
    ChatCompletionToolChoiceOption m_Tool_choice;
    std::string m_User = "";
    CreateChatCompletionRequest_function_call m_Function_call;
    std::vector<ChatCompletionFunctions> m_Functions;
};

std::vector<CreateChatCompletionRequest> createCreateChatCompletionRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateChatCompletionRequest>(const CreateChatCompletionRequest& val) {
    return val.toPropertyTree();
}

template<>
inline CreateChatCompletionRequest fromPt<CreateChatCompletionRequest>(const boost::property_tree::ptree& pt) {
    CreateChatCompletionRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateChatCompletionRequest_H_ */
