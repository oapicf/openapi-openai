/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateChatCompletionRequest_function_call.h
 *
 * Controls how the model responds to function calls. \&quot;none\&quot; means the model does not call a function, and responds to the end-user. \&quot;auto\&quot; means the model can pick between an end-user or calling a function.  Specifying a particular function via &#x60;{\&quot;name\&quot;:\\ \&quot;my_function\&quot;}&#x60; forces the model to call that function. \&quot;none\&quot; is the default when no functions are present. \&quot;auto\&quot; is the default if functions are present.
 */

#ifndef CreateChatCompletionRequest_function_call_H_
#define CreateChatCompletionRequest_function_call_H_



#include <string>
#include "CreateChatCompletionRequest_function_call_oneOf.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "CreateChatCompletionRequest_function_call_oneOf.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Controls how the model responds to function calls. \&quot;none\&quot; means the model does not call a function, and responds to the end-user. \&quot;auto\&quot; means the model can pick between an end-user or calling a function.  Specifying a particular function via &#x60;{\&quot;name\&quot;:\\ \&quot;my_function\&quot;}&#x60; forces the model to call that function. \&quot;none\&quot; is the default when no functions are present. \&quot;auto\&quot; is the default if functions are present.
/// </summary>
class  CreateChatCompletionRequest_function_call : public CreateChatCompletionRequest_function_call_oneOf
{
public:
    CreateChatCompletionRequest_function_call() = default;
    explicit CreateChatCompletionRequest_function_call(boost::property_tree::ptree const& pt);
    virtual ~CreateChatCompletionRequest_function_call() = default;

    CreateChatCompletionRequest_function_call(const CreateChatCompletionRequest_function_call& other) = default; // copy constructor
    CreateChatCompletionRequest_function_call(CreateChatCompletionRequest_function_call&& other) noexcept = default; // move constructor

    CreateChatCompletionRequest_function_call& operator=(const CreateChatCompletionRequest_function_call& other) = default; // copy assignment
    CreateChatCompletionRequest_function_call& operator=(CreateChatCompletionRequest_function_call&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateChatCompletionRequest_function_call members

    /// <summary>
    /// The name of the function to call.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

protected:
    std::string m_Name = "";
};

std::vector<CreateChatCompletionRequest_function_call> createCreateChatCompletionRequest_function_callVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateChatCompletionRequest_function_call>(const CreateChatCompletionRequest_function_call& val) {
    return val.toPropertyTree();
}

template<>
inline CreateChatCompletionRequest_function_call fromPt<CreateChatCompletionRequest_function_call>(const boost::property_tree::ptree& pt) {
    CreateChatCompletionRequest_function_call ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateChatCompletionRequest_function_call_H_ */
