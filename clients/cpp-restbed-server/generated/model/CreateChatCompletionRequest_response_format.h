/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateChatCompletionRequest_response_format.h
 *
 * An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than &#x60;gpt-3.5-turbo-1106&#x60;.  Setting to &#x60;{ \&quot;type\&quot;: \&quot;json_object\&quot; }&#x60; enables JSON mode, which guarantees the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \&quot;stuck\&quot; request. Also note that the message content may be partially cut off if &#x60;finish_reason&#x3D;\&quot;length\&quot;&#x60;, which indicates the generation exceeded &#x60;max_tokens&#x60; or the conversation exceeded the max context length. 
 */

#ifndef CreateChatCompletionRequest_response_format_H_
#define CreateChatCompletionRequest_response_format_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than &#x60;gpt-3.5-turbo-1106&#x60;.  Setting to &#x60;{ \&quot;type\&quot;: \&quot;json_object\&quot; }&#x60; enables JSON mode, which guarantees the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \&quot;stuck\&quot; request. Also note that the message content may be partially cut off if &#x60;finish_reason&#x3D;\&quot;length\&quot;&#x60;, which indicates the generation exceeded &#x60;max_tokens&#x60; or the conversation exceeded the max context length. 
/// </summary>
class  CreateChatCompletionRequest_response_format 
{
public:
    CreateChatCompletionRequest_response_format() = default;
    explicit CreateChatCompletionRequest_response_format(boost::property_tree::ptree const& pt);
    virtual ~CreateChatCompletionRequest_response_format() = default;

    CreateChatCompletionRequest_response_format(const CreateChatCompletionRequest_response_format& other) = default; // copy constructor
    CreateChatCompletionRequest_response_format(CreateChatCompletionRequest_response_format&& other) noexcept = default; // move constructor

    CreateChatCompletionRequest_response_format& operator=(const CreateChatCompletionRequest_response_format& other) = default; // copy assignment
    CreateChatCompletionRequest_response_format& operator=(CreateChatCompletionRequest_response_format&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateChatCompletionRequest_response_format members

    /// <summary>
    /// Must be one of &#x60;text&#x60; or &#x60;json_object&#x60;.
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

protected:
    std::string m_Type = "text";
};

std::vector<CreateChatCompletionRequest_response_format> createCreateChatCompletionRequest_response_formatVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateChatCompletionRequest_response_format>(const CreateChatCompletionRequest_response_format& val) {
    return val.toPropertyTree();
}

template<>
inline CreateChatCompletionRequest_response_format fromPt<CreateChatCompletionRequest_response_format>(const boost::property_tree::ptree& pt) {
    CreateChatCompletionRequest_response_format ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateChatCompletionRequest_response_format_H_ */
