/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateChatCompletionResponse.h
 *
 * 
 */

#ifndef CreateChatCompletionResponse_H_
#define CreateChatCompletionResponse_H_



#include "CreateChatCompletionResponse_choices_inner.h"
#include <string>
#include "CreateCompletionResponse_usage.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CreateChatCompletionResponse 
{
public:
    CreateChatCompletionResponse() = default;
    explicit CreateChatCompletionResponse(boost::property_tree::ptree const& pt);
    virtual ~CreateChatCompletionResponse() = default;

    CreateChatCompletionResponse(const CreateChatCompletionResponse& other) = default; // copy constructor
    CreateChatCompletionResponse(CreateChatCompletionResponse&& other) noexcept = default; // move constructor

    CreateChatCompletionResponse& operator=(const CreateChatCompletionResponse& other) = default; // copy assignment
    CreateChatCompletionResponse& operator=(CreateChatCompletionResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateChatCompletionResponse members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getObject() const;
    void setObject(std::string value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCreated() const;
    void setCreated(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getModel() const;
    void setModel(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<CreateChatCompletionResponse_choices_inner> getChoices() const;
    void setChoices(std::vector<CreateChatCompletionResponse_choices_inner> value);

    /// <summary>
    /// 
    /// </summary>
    CreateCompletionResponse_usage getUsage() const;
    void setUsage(CreateCompletionResponse_usage value);

protected:
    std::string m_Id = "";
    std::string m_object = "";
    int32_t m_Created = 0;
    std::string m_Model = "";
    std::vector<CreateChatCompletionResponse_choices_inner> m_Choices;
    CreateCompletionResponse_usage m_Usage;
};

std::vector<CreateChatCompletionResponse> createCreateChatCompletionResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateChatCompletionResponse>(const CreateChatCompletionResponse& val) {
    return val.toPropertyTree();
}

template<>
inline CreateChatCompletionResponse fromPt<CreateChatCompletionResponse>(const boost::property_tree::ptree& pt) {
    CreateChatCompletionResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateChatCompletionResponse_H_ */
