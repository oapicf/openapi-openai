/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateChatCompletionStreamResponse_choices_inner.h
 *
 * 
 */

#ifndef CreateChatCompletionStreamResponse_choices_inner_H_
#define CreateChatCompletionStreamResponse_choices_inner_H_



#include <string>
#include "CreateChatCompletionResponse_choices_inner_logprobs.h"
#include "ChatCompletionStreamResponseDelta.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CreateChatCompletionStreamResponse_choices_inner 
{
public:
    CreateChatCompletionStreamResponse_choices_inner() = default;
    explicit CreateChatCompletionStreamResponse_choices_inner(boost::property_tree::ptree const& pt);
    virtual ~CreateChatCompletionStreamResponse_choices_inner() = default;

    CreateChatCompletionStreamResponse_choices_inner(const CreateChatCompletionStreamResponse_choices_inner& other) = default; // copy constructor
    CreateChatCompletionStreamResponse_choices_inner(CreateChatCompletionStreamResponse_choices_inner&& other) noexcept = default; // move constructor

    CreateChatCompletionStreamResponse_choices_inner& operator=(const CreateChatCompletionStreamResponse_choices_inner& other) = default; // copy assignment
    CreateChatCompletionStreamResponse_choices_inner& operator=(CreateChatCompletionStreamResponse_choices_inner&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateChatCompletionStreamResponse_choices_inner members

    /// <summary>
    /// 
    /// </summary>
    ChatCompletionStreamResponseDelta getDelta() const;
    void setDelta(ChatCompletionStreamResponseDelta value);

    /// <summary>
    /// 
    /// </summary>
    CreateChatCompletionResponse_choices_inner_logprobs getLogprobs() const;
    void setLogprobs(CreateChatCompletionResponse_choices_inner_logprobs value);

    /// <summary>
    /// The reason the model stopped generating tokens. This will be &#x60;stop&#x60; if the model hit a natural stop point or a provided stop sequence, &#x60;length&#x60; if the maximum number of tokens specified in the request was reached, &#x60;content_filter&#x60; if content was omitted due to a flag from our content filters, &#x60;tool_calls&#x60; if the model called a tool, or &#x60;function_call&#x60; (deprecated) if the model called a function. 
    /// </summary>
    std::string getFinishReason() const;
    void setFinishReason(std::string value);

    /// <summary>
    /// The index of the choice in the list of choices.
    /// </summary>
    int32_t getIndex() const;
    void setIndex(int32_t value);

protected:
    ChatCompletionStreamResponseDelta m_Delta;
    CreateChatCompletionResponse_choices_inner_logprobs m_Logprobs;
    std::string m_Finish_reason = "";
    int32_t m_Index = 0;
};

std::vector<CreateChatCompletionStreamResponse_choices_inner> createCreateChatCompletionStreamResponse_choices_innerVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateChatCompletionStreamResponse_choices_inner>(const CreateChatCompletionStreamResponse_choices_inner& val) {
    return val.toPropertyTree();
}

template<>
inline CreateChatCompletionStreamResponse_choices_inner fromPt<CreateChatCompletionStreamResponse_choices_inner>(const boost::property_tree::ptree& pt) {
    CreateChatCompletionStreamResponse_choices_inner ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateChatCompletionStreamResponse_choices_inner_H_ */
