/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateCompletionRequest.h
 *
 * 
 */

#ifndef CreateCompletionRequest_H_
#define CreateCompletionRequest_H_



#include "CreateCompletionRequest_model.h"
#include <string>
#include "CreateCompletionRequest_prompt.h"
#include "CreateCompletionRequest_stop.h"
#include <map>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CreateCompletionRequest 
{
public:
    CreateCompletionRequest() = default;
    explicit CreateCompletionRequest(boost::property_tree::ptree const& pt);
    virtual ~CreateCompletionRequest() = default;

    CreateCompletionRequest(const CreateCompletionRequest& other) = default; // copy constructor
    CreateCompletionRequest(CreateCompletionRequest&& other) noexcept = default; // move constructor

    CreateCompletionRequest& operator=(const CreateCompletionRequest& other) = default; // copy assignment
    CreateCompletionRequest& operator=(CreateCompletionRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateCompletionRequest members

    /// <summary>
    /// 
    /// </summary>
    CreateCompletionRequest_model getModel() const;
    void setModel(CreateCompletionRequest_model value);

    /// <summary>
    /// 
    /// </summary>
    CreateCompletionRequest_prompt getPrompt() const;
    void setPrompt(CreateCompletionRequest_prompt value);

    /// <summary>
    /// Generates &#x60;best_of&#x60; completions server-side and returns the \&quot;best\&quot; (the one with the highest log probability per token). Results cannot be streamed.  When used with &#x60;n&#x60;, &#x60;best_of&#x60; controls the number of candidate completions and &#x60;n&#x60; specifies how many to return â€“ &#x60;best_of&#x60; must be greater than &#x60;n&#x60;.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for &#x60;max_tokens&#x60; and &#x60;stop&#x60;. 
    /// </summary>
    int32_t getBestOf() const;
    void setBestOf(int32_t value);

    /// <summary>
    /// Echo back the prompt in addition to the completion 
    /// </summary>
    bool isEcho() const;
    void setEcho(bool value);

    /// <summary>
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
    /// </summary>
    double getFrequencyPenalty() const;
    void setFrequencyPenalty(double value);

    /// <summary>
    /// Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view&#x3D;bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass &#x60;{\&quot;50256\&quot;: -100}&#x60; to prevent the &lt;|endoftext|&gt; token from being generated. 
    /// </summary>
    std::map<std::string, int32_t> getLogitBias() const;
    void setLogitBias(std::map<std::string, int32_t> value);

    /// <summary>
    /// Include the log probabilities on the &#x60;logprobs&#x60; most likely output tokens, as well the chosen tokens. For example, if &#x60;logprobs&#x60; is 5, the API will return a list of the 5 most likely tokens. The API will always return the &#x60;logprob&#x60; of the sampled token, so there may be up to &#x60;logprobs+1&#x60; elements in the response.  The maximum value for &#x60;logprobs&#x60; is 5. 
    /// </summary>
    int32_t getLogprobs() const;
    void setLogprobs(int32_t value);

    /// <summary>
    /// The maximum number of [tokens](/tokenizer) that can be generated in the completion.  The token count of your prompt plus &#x60;max_tokens&#x60; cannot exceed the model&#39;s context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. 
    /// </summary>
    int32_t getMaxTokens() const;
    void setMaxTokens(int32_t value);

    /// <summary>
    /// How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for &#x60;max_tokens&#x60; and &#x60;stop&#x60;. 
    /// </summary>
    int32_t getN() const;
    void setN(int32_t value);

    /// <summary>
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
    /// </summary>
    double getPresencePenalty() const;
    void setPresencePenalty(double value);

    /// <summary>
    /// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same &#x60;seed&#x60; and parameters should return the same result.  Determinism is not guaranteed, and you should refer to the &#x60;system_fingerprint&#x60; response parameter to monitor changes in the backend. 
    /// </summary>
    int32_t getSeed() const;
    void setSeed(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    CreateCompletionRequest_stop getStop() const;
    void setStop(CreateCompletionRequest_stop value);

    /// <summary>
    /// Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a &#x60;data: [DONE]&#x60; message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). 
    /// </summary>
    bool isStream() const;
    void setStream(bool value);

    /// <summary>
    /// The suffix that comes after a completion of inserted text.  This parameter is only supported for &#x60;gpt-3.5-turbo-instruct&#x60;. 
    /// </summary>
    std::string getSuffix() const;
    void setSuffix(std::string value);

    /// <summary>
    /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both. 
    /// </summary>
    double getTemperature() const;
    void setTemperature(double value);

    /// <summary>
    /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. 
    /// </summary>
    double getTopP() const;
    void setTopP(double value);

    /// <summary>
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    /// </summary>
    std::string getUser() const;
    void setUser(std::string value);

protected:
    CreateCompletionRequest_model m_Model;
    CreateCompletionRequest_prompt m_Prompt;
    int32_t m_Best_of = 1;
    bool m_Echo = false;
    double m_Frequency_penalty = 0;
    std::map<std::string, int32_t> m_Logit_bias;
    int32_t m_Logprobs = 0;
    int32_t m_Max_tokens = 16;
    int32_t m_n = 1;
    double m_Presence_penalty = 0;
    int32_t m_Seed = 0;
    CreateCompletionRequest_stop m_Stop;
    bool m_Stream = false;
    std::string m_Suffix = "";
    double m_Temperature = 1;
    double m_Top_p = 1;
    std::string m_User = "";
};

std::vector<CreateCompletionRequest> createCreateCompletionRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateCompletionRequest>(const CreateCompletionRequest& val) {
    return val.toPropertyTree();
}

template<>
inline CreateCompletionRequest fromPt<CreateCompletionRequest>(const boost::property_tree::ptree& pt) {
    CreateCompletionRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateCompletionRequest_H_ */
