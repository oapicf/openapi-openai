/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CreateCompletionResponse_choices_inner_logprobs.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CreateCompletionResponse_choices_inner_logprobs::CreateCompletionResponse_choices_inner_logprobs(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CreateCompletionResponse_choices_inner_logprobs::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CreateCompletionResponse_choices_inner_logprobs::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CreateCompletionResponse_choices_inner_logprobs::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	// generate tree for Text_offset
    tmp_node.clear();
	if (!m_Text_offset.empty()) {
        tmp_node = toPt(m_Text_offset);
		pt.add_child("text_offset", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Token_logprobs
    tmp_node.clear();
	if (!m_Token_logprobs.empty()) {
        tmp_node = toPt(m_Token_logprobs);
		pt.add_child("token_logprobs", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Tokens
    tmp_node.clear();
	if (!m_Tokens.empty()) {
        tmp_node = toPt(m_Tokens);
		pt.add_child("tokens", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Top_logprobs
    tmp_node.clear();
	if (!m_Top_logprobs.empty()) {
        tmp_node = toPt(m_Top_logprobs);
		pt.add_child("top_logprobs", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void CreateCompletionResponse_choices_inner_logprobs::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	// push all items of Text_offset into member
	if (pt.get_child_optional("text_offset")) {
        m_Text_offset = fromPt<std::vector<int32_t>>(pt.get_child("text_offset"));
	}
	// push all items of Token_logprobs into member
	if (pt.get_child_optional("token_logprobs")) {
        m_Token_logprobs = fromPt<std::vector<double>>(pt.get_child("token_logprobs"));
	}
	// push all items of Tokens into member
	if (pt.get_child_optional("tokens")) {
        m_Tokens = fromPt<std::vector<std::string>>(pt.get_child("tokens"));
	}
	// push all items of Top_logprobs into member
	if (pt.get_child_optional("top_logprobs")) {
        m_Top_logprobs = fromPt<std::vector<std::map<std::string, double>>>(pt.get_child("top_logprobs"));
	}
}

std::vector<int32_t> CreateCompletionResponse_choices_inner_logprobs::getTextOffset() const
{
    return m_Text_offset;
}

void CreateCompletionResponse_choices_inner_logprobs::setTextOffset(std::vector<int32_t> value)
{
    m_Text_offset = value;
}


std::vector<double> CreateCompletionResponse_choices_inner_logprobs::getTokenLogprobs() const
{
    return m_Token_logprobs;
}

void CreateCompletionResponse_choices_inner_logprobs::setTokenLogprobs(std::vector<double> value)
{
    m_Token_logprobs = value;
}


std::vector<std::string> CreateCompletionResponse_choices_inner_logprobs::getTokens() const
{
    return m_Tokens;
}

void CreateCompletionResponse_choices_inner_logprobs::setTokens(std::vector<std::string> value)
{
    m_Tokens = value;
}


std::vector<std::map<std::string, double>> CreateCompletionResponse_choices_inner_logprobs::getTopLogprobs() const
{
    return m_Top_logprobs;
}

void CreateCompletionResponse_choices_inner_logprobs::setTopLogprobs(std::vector<std::map<std::string, double>> value)
{
    m_Top_logprobs = value;
}



std::vector<CreateCompletionResponse_choices_inner_logprobs> createCreateCompletionResponse_choices_inner_logprobsVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CreateCompletionResponse_choices_inner_logprobs>();
    for (const auto& child: pt) {
        vec.emplace_back(CreateCompletionResponse_choices_inner_logprobs(child.second));
    }

    return vec;
}

}
}
}
}

