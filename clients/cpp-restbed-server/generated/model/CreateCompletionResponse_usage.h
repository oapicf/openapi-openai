/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateCompletionResponse_usage.h
 *
 * 
 */

#ifndef CreateCompletionResponse_usage_H_
#define CreateCompletionResponse_usage_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CreateCompletionResponse_usage 
{
public:
    CreateCompletionResponse_usage() = default;
    explicit CreateCompletionResponse_usage(boost::property_tree::ptree const& pt);
    virtual ~CreateCompletionResponse_usage() = default;

    CreateCompletionResponse_usage(const CreateCompletionResponse_usage& other) = default; // copy constructor
    CreateCompletionResponse_usage(CreateCompletionResponse_usage&& other) noexcept = default; // move constructor

    CreateCompletionResponse_usage& operator=(const CreateCompletionResponse_usage& other) = default; // copy assignment
    CreateCompletionResponse_usage& operator=(CreateCompletionResponse_usage&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateCompletionResponse_usage members

    /// <summary>
    /// 
    /// </summary>
    int32_t getPromptTokens() const;
    void setPromptTokens(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCompletionTokens() const;
    void setCompletionTokens(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTotalTokens() const;
    void setTotalTokens(int32_t value);

protected:
    int32_t m_Prompt_tokens = 0;
    int32_t m_Completion_tokens = 0;
    int32_t m_Total_tokens = 0;
};

std::vector<CreateCompletionResponse_usage> createCreateCompletionResponse_usageVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateCompletionResponse_usage>(const CreateCompletionResponse_usage& val) {
    return val.toPropertyTree();
}

template<>
inline CreateCompletionResponse_usage fromPt<CreateCompletionResponse_usage>(const boost::property_tree::ptree& pt) {
    CreateCompletionResponse_usage ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateCompletionResponse_usage_H_ */
