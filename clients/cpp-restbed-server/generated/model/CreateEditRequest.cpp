/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CreateEditRequest.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CreateEditRequest::CreateEditRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CreateEditRequest::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CreateEditRequest::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CreateEditRequest::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.add_child("model", m_Model.toPropertyTree());
	pt.put("input", m_Input);
	pt.put("instruction", m_Instruction);
	pt.put("n", m_n);
	pt.put("temperature", m_Temperature);
	pt.put("top_p", m_Top_p);
	return pt;
}

void CreateEditRequest::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	if (pt.get_child_optional("model")) {
        m_Model = fromPt<CreateEditRequest_model>(pt.get_child("model"));
	}
	m_Input = pt.get("input", "");
	m_Instruction = pt.get("instruction", "");
	m_n = pt.get("n", 1);
	m_Temperature = pt.get("temperature", 1);
	m_Top_p = pt.get("top_p", 1);
}

CreateEditRequest_model CreateEditRequest::getModel() const
{
    return m_Model;
}

void CreateEditRequest::setModel(CreateEditRequest_model value)
{
    m_Model = value;
}


std::string CreateEditRequest::getInput() const
{
    return m_Input;
}

void CreateEditRequest::setInput(std::string value)
{
    m_Input = value;
}


std::string CreateEditRequest::getInstruction() const
{
    return m_Instruction;
}

void CreateEditRequest::setInstruction(std::string value)
{
    m_Instruction = value;
}


int32_t CreateEditRequest::getN() const
{
    return m_n;
}

void CreateEditRequest::setN(int32_t value)
{
    m_n = value;
}


double CreateEditRequest::getTemperature() const
{
    return m_Temperature;
}

void CreateEditRequest::setTemperature(double value)
{
    m_Temperature = value;
}


double CreateEditRequest::getTopP() const
{
    return m_Top_p;
}

void CreateEditRequest::setTopP(double value)
{
    m_Top_p = value;
}



std::vector<CreateEditRequest> createCreateEditRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CreateEditRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(CreateEditRequest(child.second));
    }

    return vec;
}

}
}
}
}

