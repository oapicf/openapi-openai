/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateEditRequest.h
 *
 * 
 */

#ifndef CreateEditRequest_H_
#define CreateEditRequest_H_



#include "CreateEditRequest_model.h"
#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CreateEditRequest 
{
public:
    CreateEditRequest() = default;
    explicit CreateEditRequest(boost::property_tree::ptree const& pt);
    virtual ~CreateEditRequest() = default;

    CreateEditRequest(const CreateEditRequest& other) = default; // copy constructor
    CreateEditRequest(CreateEditRequest&& other) noexcept = default; // move constructor

    CreateEditRequest& operator=(const CreateEditRequest& other) = default; // copy assignment
    CreateEditRequest& operator=(CreateEditRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateEditRequest members

    /// <summary>
    /// 
    /// </summary>
    CreateEditRequest_model getModel() const;
    void setModel(CreateEditRequest_model value);

    /// <summary>
    /// The input text to use as a starting point for the edit.
    /// </summary>
    std::string getInput() const;
    void setInput(std::string value);

    /// <summary>
    /// The instruction that tells the model how to edit the prompt.
    /// </summary>
    std::string getInstruction() const;
    void setInstruction(std::string value);

    /// <summary>
    /// How many edits to generate for the input and instruction.
    /// </summary>
    int32_t getN() const;
    void setN(int32_t value);

    /// <summary>
    /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both. 
    /// </summary>
    double getTemperature() const;
    void setTemperature(double value);

    /// <summary>
    /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. 
    /// </summary>
    double getTopP() const;
    void setTopP(double value);

protected:
    CreateEditRequest_model m_Model;
    std::string m_Input = "";
    std::string m_Instruction = "";
    int32_t m_n = 1;
    double m_Temperature = 1;
    double m_Top_p = 1;
};

std::vector<CreateEditRequest> createCreateEditRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateEditRequest>(const CreateEditRequest& val) {
    return val.toPropertyTree();
}

template<>
inline CreateEditRequest fromPt<CreateEditRequest>(const boost::property_tree::ptree& pt) {
    CreateEditRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateEditRequest_H_ */
