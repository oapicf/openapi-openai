/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateEmbeddingRequest.h
 *
 * 
 */

#ifndef CreateEmbeddingRequest_H_
#define CreateEmbeddingRequest_H_



#include "CreateEmbeddingRequest_input.h"
#include <string>
#include "CreateEmbeddingRequest_model.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CreateEmbeddingRequest 
{
public:
    CreateEmbeddingRequest() = default;
    explicit CreateEmbeddingRequest(boost::property_tree::ptree const& pt);
    virtual ~CreateEmbeddingRequest() = default;

    CreateEmbeddingRequest(const CreateEmbeddingRequest& other) = default; // copy constructor
    CreateEmbeddingRequest(CreateEmbeddingRequest&& other) noexcept = default; // move constructor

    CreateEmbeddingRequest& operator=(const CreateEmbeddingRequest& other) = default; // copy assignment
    CreateEmbeddingRequest& operator=(CreateEmbeddingRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateEmbeddingRequest members

    /// <summary>
    /// 
    /// </summary>
    CreateEmbeddingRequest_input getInput() const;
    void setInput(CreateEmbeddingRequest_input value);

    /// <summary>
    /// 
    /// </summary>
    CreateEmbeddingRequest_model getModel() const;
    void setModel(CreateEmbeddingRequest_model value);

    /// <summary>
    /// The format to return the embeddings in. Can be either &#x60;float&#x60; or [&#x60;base64&#x60;](https://pypi.org/project/pybase64/).
    /// </summary>
    std::string getEncodingFormat() const;
    void setEncodingFormat(std::string value);

    /// <summary>
    /// The number of dimensions the resulting output embeddings should have. Only supported in &#x60;text-embedding-3&#x60; and later models. 
    /// </summary>
    int32_t getDimensions() const;
    void setDimensions(int32_t value);

    /// <summary>
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    /// </summary>
    std::string getUser() const;
    void setUser(std::string value);

protected:
    CreateEmbeddingRequest_input m_Input;
    CreateEmbeddingRequest_model m_Model;
    std::string m_Encoding_format = "float";
    int32_t m_Dimensions = 0;
    std::string m_User = "";
};

std::vector<CreateEmbeddingRequest> createCreateEmbeddingRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateEmbeddingRequest>(const CreateEmbeddingRequest& val) {
    return val.toPropertyTree();
}

template<>
inline CreateEmbeddingRequest fromPt<CreateEmbeddingRequest>(const boost::property_tree::ptree& pt) {
    CreateEmbeddingRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateEmbeddingRequest_H_ */
