/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateEmbeddingRequest_input.h
 *
 * Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. Each input must not exceed the max input tokens for the model (8191 tokens for &#x60;text-embedding-ada-002&#x60;). [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens. 
 */

#ifndef CreateEmbeddingRequest_input_H_
#define CreateEmbeddingRequest_input_H_



#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. Each input must not exceed the max input tokens for the model (8191 tokens for &#x60;text-embedding-ada-002&#x60;). [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens. 
/// </summary>
class  CreateEmbeddingRequest_input 
{
public:
    CreateEmbeddingRequest_input() = default;
    explicit CreateEmbeddingRequest_input(boost::property_tree::ptree const& pt);
    virtual ~CreateEmbeddingRequest_input() = default;

    CreateEmbeddingRequest_input(const CreateEmbeddingRequest_input& other) = default; // copy constructor
    CreateEmbeddingRequest_input(CreateEmbeddingRequest_input&& other) noexcept = default; // move constructor

    CreateEmbeddingRequest_input& operator=(const CreateEmbeddingRequest_input& other) = default; // copy assignment
    CreateEmbeddingRequest_input& operator=(CreateEmbeddingRequest_input&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateEmbeddingRequest_input members

protected:
};

std::vector<CreateEmbeddingRequest_input> createCreateEmbeddingRequest_inputVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateEmbeddingRequest_input>(const CreateEmbeddingRequest_input& val) {
    return val.toPropertyTree();
}

template<>
inline CreateEmbeddingRequest_input fromPt<CreateEmbeddingRequest_input>(const boost::property_tree::ptree& pt) {
    CreateEmbeddingRequest_input ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateEmbeddingRequest_input_H_ */
