/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CreateFineTuneRequest.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CreateFineTuneRequest::CreateFineTuneRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CreateFineTuneRequest::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CreateFineTuneRequest::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CreateFineTuneRequest::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("training_file", m_Training_file);
	pt.put("validation_file", m_Validation_file);
	pt.add_child("model", m_Model.toPropertyTree());
	pt.put("n_epochs", m_N_epochs);
	pt.put("batch_size", m_Batch_size);
	pt.put("learning_rate_multiplier", m_Learning_rate_multiplier);
	pt.put("prompt_loss_weight", m_Prompt_loss_weight);
	pt.put("compute_classification_metrics", m_Compute_classification_metrics);
	pt.put("classification_n_classes", m_Classification_n_classes);
	pt.put("classification_positive_class", m_Classification_positive_class);
	// generate tree for Classification_betas
    tmp_node.clear();
	if (!m_Classification_betas.empty()) {
        tmp_node = toPt(m_Classification_betas);
		pt.add_child("classification_betas", tmp_node);
		tmp_node.clear();
	}
	pt.put("suffix", m_Suffix);
	return pt;
}

void CreateFineTuneRequest::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Training_file = pt.get("training_file", "");
	m_Validation_file = pt.get("validation_file", "");
	if (pt.get_child_optional("model")) {
        m_Model = fromPt<CreateFineTuneRequest_model>(pt.get_child("model"));
	}
	m_N_epochs = pt.get("n_epochs", 4);
	m_Batch_size = pt.get("batch_size", 0);
	m_Learning_rate_multiplier = pt.get("learning_rate_multiplier", 0.0);
	m_Prompt_loss_weight = pt.get("prompt_loss_weight", 0.01);
	m_Compute_classification_metrics = pt.get("compute_classification_metrics", false);
	m_Classification_n_classes = pt.get("classification_n_classes", 0);
	m_Classification_positive_class = pt.get("classification_positive_class", "");
	// push all items of Classification_betas into member
	if (pt.get_child_optional("classification_betas")) {
        m_Classification_betas = fromPt<std::vector<double>>(pt.get_child("classification_betas"));
	}
	m_Suffix = pt.get("suffix", "");
}

std::string CreateFineTuneRequest::getTrainingFile() const
{
    return m_Training_file;
}

void CreateFineTuneRequest::setTrainingFile(std::string value)
{
    m_Training_file = value;
}


std::string CreateFineTuneRequest::getValidationFile() const
{
    return m_Validation_file;
}

void CreateFineTuneRequest::setValidationFile(std::string value)
{
    m_Validation_file = value;
}


CreateFineTuneRequest_model CreateFineTuneRequest::getModel() const
{
    return m_Model;
}

void CreateFineTuneRequest::setModel(CreateFineTuneRequest_model value)
{
    m_Model = value;
}


int32_t CreateFineTuneRequest::getNEpochs() const
{
    return m_N_epochs;
}

void CreateFineTuneRequest::setNEpochs(int32_t value)
{
    m_N_epochs = value;
}


int32_t CreateFineTuneRequest::getBatchSize() const
{
    return m_Batch_size;
}

void CreateFineTuneRequest::setBatchSize(int32_t value)
{
    m_Batch_size = value;
}


double CreateFineTuneRequest::getLearningRateMultiplier() const
{
    return m_Learning_rate_multiplier;
}

void CreateFineTuneRequest::setLearningRateMultiplier(double value)
{
    m_Learning_rate_multiplier = value;
}


double CreateFineTuneRequest::getPromptLossWeight() const
{
    return m_Prompt_loss_weight;
}

void CreateFineTuneRequest::setPromptLossWeight(double value)
{
    m_Prompt_loss_weight = value;
}


bool CreateFineTuneRequest::isComputeClassificationMetrics() const
{
    return m_Compute_classification_metrics;
}

void CreateFineTuneRequest::setComputeClassificationMetrics(bool value)
{
    m_Compute_classification_metrics = value;
}


int32_t CreateFineTuneRequest::getClassificationNClasses() const
{
    return m_Classification_n_classes;
}

void CreateFineTuneRequest::setClassificationNClasses(int32_t value)
{
    m_Classification_n_classes = value;
}


std::string CreateFineTuneRequest::getClassificationPositiveClass() const
{
    return m_Classification_positive_class;
}

void CreateFineTuneRequest::setClassificationPositiveClass(std::string value)
{
    m_Classification_positive_class = value;
}


std::vector<double> CreateFineTuneRequest::getClassificationBetas() const
{
    return m_Classification_betas;
}

void CreateFineTuneRequest::setClassificationBetas(std::vector<double> value)
{
    m_Classification_betas = value;
}


std::string CreateFineTuneRequest::getSuffix() const
{
    return m_Suffix;
}

void CreateFineTuneRequest::setSuffix(std::string value)
{
    m_Suffix = value;
}



std::vector<CreateFineTuneRequest> createCreateFineTuneRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CreateFineTuneRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(CreateFineTuneRequest(child.second));
    }

    return vec;
}

}
}
}
}

