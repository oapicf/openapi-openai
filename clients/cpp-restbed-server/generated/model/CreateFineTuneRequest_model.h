/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateFineTuneRequest_model.h
 *
 * The name of the base model to fine-tune. You can select one of \&quot;ada\&quot;, \&quot;babbage\&quot;, \&quot;curie\&quot;, \&quot;davinci\&quot;, or a fine-tuned model created after 2022-04-21. To learn more about these models, see the [Models](https://platform.openai.com/docs/models) documentation. 
 */

#ifndef CreateFineTuneRequest_model_H_
#define CreateFineTuneRequest_model_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// The name of the base model to fine-tune. You can select one of \&quot;ada\&quot;, \&quot;babbage\&quot;, \&quot;curie\&quot;, \&quot;davinci\&quot;, or a fine-tuned model created after 2022-04-21. To learn more about these models, see the [Models](https://platform.openai.com/docs/models) documentation. 
/// </summary>
class  CreateFineTuneRequest_model 
{
public:
    CreateFineTuneRequest_model() = default;
    explicit CreateFineTuneRequest_model(boost::property_tree::ptree const& pt);
    virtual ~CreateFineTuneRequest_model() = default;

    CreateFineTuneRequest_model(const CreateFineTuneRequest_model& other) = default; // copy constructor
    CreateFineTuneRequest_model(CreateFineTuneRequest_model&& other) noexcept = default; // move constructor

    CreateFineTuneRequest_model& operator=(const CreateFineTuneRequest_model& other) = default; // copy assignment
    CreateFineTuneRequest_model& operator=(CreateFineTuneRequest_model&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateFineTuneRequest_model members

protected:
};

std::vector<CreateFineTuneRequest_model> createCreateFineTuneRequest_modelVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateFineTuneRequest_model>(const CreateFineTuneRequest_model& val) {
    return val.toPropertyTree();
}

template<>
inline CreateFineTuneRequest_model fromPt<CreateFineTuneRequest_model>(const boost::property_tree::ptree& pt) {
    CreateFineTuneRequest_model ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateFineTuneRequest_model_H_ */
