/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CreateFineTuningJobRequest.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CreateFineTuningJobRequest::CreateFineTuningJobRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CreateFineTuningJobRequest::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CreateFineTuningJobRequest::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CreateFineTuningJobRequest::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.add_child("model", m_Model.toPropertyTree());
	pt.put("training_file", m_Training_file);
	pt.add_child("hyperparameters", m_Hyperparameters.toPropertyTree());
	pt.put("suffix", m_Suffix);
	pt.put("validation_file", m_Validation_file);
	// generate tree for Integrations
    tmp_node.clear();
	if (!m_Integrations.empty()) {
        tmp_node = toPt(m_Integrations);
		pt.add_child("integrations", tmp_node);
		tmp_node.clear();
	}
	pt.put("seed", m_Seed);
	return pt;
}

void CreateFineTuningJobRequest::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	if (pt.get_child_optional("model")) {
        m_Model = fromPt<CreateFineTuningJobRequest_model>(pt.get_child("model"));
	}
	m_Training_file = pt.get("training_file", "");
	if (pt.get_child_optional("hyperparameters")) {
        m_Hyperparameters = fromPt<CreateFineTuningJobRequest_hyperparameters>(pt.get_child("hyperparameters"));
	}
	m_Suffix = pt.get("suffix", "");
	m_Validation_file = pt.get("validation_file", "");
	// push all items of Integrations into member
	if (pt.get_child_optional("integrations")) {
        m_Integrations = fromPt<std::vector<CreateFineTuningJobRequest_integrations_inner>>(pt.get_child("integrations"));
	}
	m_Seed = pt.get("seed", 0);
}

CreateFineTuningJobRequest_model CreateFineTuningJobRequest::getModel() const
{
    return m_Model;
}

void CreateFineTuningJobRequest::setModel(CreateFineTuningJobRequest_model value)
{
    m_Model = value;
}


std::string CreateFineTuningJobRequest::getTrainingFile() const
{
    return m_Training_file;
}

void CreateFineTuningJobRequest::setTrainingFile(std::string value)
{
    m_Training_file = value;
}


CreateFineTuningJobRequest_hyperparameters CreateFineTuningJobRequest::getHyperparameters() const
{
    return m_Hyperparameters;
}

void CreateFineTuningJobRequest::setHyperparameters(CreateFineTuningJobRequest_hyperparameters value)
{
    m_Hyperparameters = value;
}


std::string CreateFineTuningJobRequest::getSuffix() const
{
    return m_Suffix;
}

void CreateFineTuningJobRequest::setSuffix(std::string value)
{
    m_Suffix = value;
}


std::string CreateFineTuningJobRequest::getValidationFile() const
{
    return m_Validation_file;
}

void CreateFineTuningJobRequest::setValidationFile(std::string value)
{
    m_Validation_file = value;
}


std::vector<CreateFineTuningJobRequest_integrations_inner> CreateFineTuningJobRequest::getIntegrations() const
{
    return m_Integrations;
}

void CreateFineTuningJobRequest::setIntegrations(std::vector<CreateFineTuningJobRequest_integrations_inner> value)
{
    m_Integrations = value;
}


int32_t CreateFineTuningJobRequest::getSeed() const
{
    return m_Seed;
}

void CreateFineTuningJobRequest::setSeed(int32_t value)
{
    m_Seed = value;
}



std::vector<CreateFineTuningJobRequest> createCreateFineTuningJobRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CreateFineTuningJobRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(CreateFineTuningJobRequest(child.second));
    }

    return vec;
}

}
}
}
}

