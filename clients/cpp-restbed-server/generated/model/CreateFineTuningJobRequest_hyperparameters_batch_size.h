/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateFineTuningJobRequest_hyperparameters_batch_size.h
 *
 * Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance. 
 */

#ifndef CreateFineTuningJobRequest_hyperparameters_batch_size_H_
#define CreateFineTuningJobRequest_hyperparameters_batch_size_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance. 
/// </summary>
class  CreateFineTuningJobRequest_hyperparameters_batch_size 
{
public:
    CreateFineTuningJobRequest_hyperparameters_batch_size() = default;
    explicit CreateFineTuningJobRequest_hyperparameters_batch_size(boost::property_tree::ptree const& pt);
    virtual ~CreateFineTuningJobRequest_hyperparameters_batch_size() = default;

    CreateFineTuningJobRequest_hyperparameters_batch_size(const CreateFineTuningJobRequest_hyperparameters_batch_size& other) = default; // copy constructor
    CreateFineTuningJobRequest_hyperparameters_batch_size(CreateFineTuningJobRequest_hyperparameters_batch_size&& other) noexcept = default; // move constructor

    CreateFineTuningJobRequest_hyperparameters_batch_size& operator=(const CreateFineTuningJobRequest_hyperparameters_batch_size& other) = default; // copy assignment
    CreateFineTuningJobRequest_hyperparameters_batch_size& operator=(CreateFineTuningJobRequest_hyperparameters_batch_size&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateFineTuningJobRequest_hyperparameters_batch_size members

protected:
};

std::vector<CreateFineTuningJobRequest_hyperparameters_batch_size> createCreateFineTuningJobRequest_hyperparameters_batch_sizeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateFineTuningJobRequest_hyperparameters_batch_size>(const CreateFineTuningJobRequest_hyperparameters_batch_size& val) {
    return val.toPropertyTree();
}

template<>
inline CreateFineTuningJobRequest_hyperparameters_batch_size fromPt<CreateFineTuningJobRequest_hyperparameters_batch_size>(const boost::property_tree::ptree& pt) {
    CreateFineTuningJobRequest_hyperparameters_batch_size ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateFineTuningJobRequest_hyperparameters_batch_size_H_ */
