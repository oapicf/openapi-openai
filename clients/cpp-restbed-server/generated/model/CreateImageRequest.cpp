/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CreateImageRequest.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CreateImageRequest::CreateImageRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CreateImageRequest::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CreateImageRequest::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CreateImageRequest::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("prompt", m_Prompt);
	pt.add_child("model", m_Model.toPropertyTree());
	pt.put("n", m_n);
	pt.put("quality", m_Quality);
	pt.put("response_format", m_Response_format);
	pt.put("size", m_Size);
	pt.put("style", m_Style);
	pt.put("user", m_User);
	return pt;
}

void CreateImageRequest::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Prompt = pt.get("prompt", "");
	if (pt.get_child_optional("model")) {
        m_Model = fromPt<CreateImageRequest_model>(pt.get_child("model"));
	}
	m_n = pt.get("n", 1);
	setQuality(pt.get("quality", "standard"));
	setResponseFormat(pt.get("response_format", "url"));
	setSize(pt.get("size", "1024x1024"));
	setStyle(pt.get("style", "vivid"));
	m_User = pt.get("user", "");
}

std::string CreateImageRequest::getPrompt() const
{
    return m_Prompt;
}

void CreateImageRequest::setPrompt(std::string value)
{
    m_Prompt = value;
}


CreateImageRequest_model CreateImageRequest::getModel() const
{
    return m_Model;
}

void CreateImageRequest::setModel(CreateImageRequest_model value)
{
    m_Model = value;
}


int32_t CreateImageRequest::getN() const
{
    return m_n;
}

void CreateImageRequest::setN(int32_t value)
{
    m_n = value;
}


std::string CreateImageRequest::getQuality() const
{
    return m_Quality;
}

void CreateImageRequest::setQuality(std::string value)
{
    static const std::array<std::string, 2> allowedValues = {
        "standard", "hd"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Quality = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string CreateImageRequest::getResponseFormat() const
{
    return m_Response_format;
}

void CreateImageRequest::setResponseFormat(std::string value)
{
    static const std::array<std::string, 2> allowedValues = {
        "url", "b64_json"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Response_format = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string CreateImageRequest::getSize() const
{
    return m_Size;
}

void CreateImageRequest::setSize(std::string value)
{
    static const std::array<std::string, 5> allowedValues = {
        "256x256", "512x512", "1024x1024", "1792x1024", "1024x1792"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Size = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string CreateImageRequest::getStyle() const
{
    return m_Style;
}

void CreateImageRequest::setStyle(std::string value)
{
    static const std::array<std::string, 2> allowedValues = {
        "vivid", "natural"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Style = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string CreateImageRequest::getUser() const
{
    return m_User;
}

void CreateImageRequest::setUser(std::string value)
{
    m_User = value;
}



std::vector<CreateImageRequest> createCreateImageRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CreateImageRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(CreateImageRequest(child.second));
    }

    return vec;
}

}
}
}
}

