/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateImageRequest.h
 *
 * 
 */

#ifndef CreateImageRequest_H_
#define CreateImageRequest_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CreateImageRequest 
{
public:
    CreateImageRequest() = default;
    explicit CreateImageRequest(boost::property_tree::ptree const& pt);
    virtual ~CreateImageRequest() = default;

    CreateImageRequest(const CreateImageRequest& other) = default; // copy constructor
    CreateImageRequest(CreateImageRequest&& other) noexcept = default; // move constructor

    CreateImageRequest& operator=(const CreateImageRequest& other) = default; // copy assignment
    CreateImageRequest& operator=(CreateImageRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateImageRequest members

    /// <summary>
    /// A text description of the desired image(s). The maximum length is 1000 characters.
    /// </summary>
    std::string getPrompt() const;
    void setPrompt(std::string value);

    /// <summary>
    /// The number of images to generate. Must be between 1 and 10.
    /// </summary>
    int32_t getN() const;
    void setN(int32_t value);

    /// <summary>
    /// The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
    /// </summary>
    std::string getSize() const;
    void setSize(std::string value);

    /// <summary>
    /// The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.
    /// </summary>
    std::string getResponseFormat() const;
    void setResponseFormat(std::string value);

    /// <summary>
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    /// </summary>
    std::string getUser() const;
    void setUser(std::string value);

protected:
    std::string m_Prompt = "";
    int32_t m_n = 1;
    std::string m_Size = "1024x1024";
    std::string m_Response_format = "url";
    std::string m_User = "";
};

std::vector<CreateImageRequest> createCreateImageRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateImageRequest>(const CreateImageRequest& val) {
    return val.toPropertyTree();
}

template<>
inline CreateImageRequest fromPt<CreateImageRequest>(const boost::property_tree::ptree& pt) {
    CreateImageRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateImageRequest_H_ */
