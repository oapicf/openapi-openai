/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateModerationResponse.h
 *
 * Represents if a given text input is potentially harmful.
 */

#ifndef CreateModerationResponse_H_
#define CreateModerationResponse_H_



#include "CreateModerationResponse_results_inner.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents if a given text input is potentially harmful.
/// </summary>
class  CreateModerationResponse 
{
public:
    CreateModerationResponse() = default;
    explicit CreateModerationResponse(boost::property_tree::ptree const& pt);
    virtual ~CreateModerationResponse() = default;

    CreateModerationResponse(const CreateModerationResponse& other) = default; // copy constructor
    CreateModerationResponse(CreateModerationResponse&& other) noexcept = default; // move constructor

    CreateModerationResponse& operator=(const CreateModerationResponse& other) = default; // copy assignment
    CreateModerationResponse& operator=(CreateModerationResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateModerationResponse members

    /// <summary>
    /// The unique identifier for the moderation request.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// The model used to generate the moderation results.
    /// </summary>
    std::string getModel() const;
    void setModel(std::string value);

    /// <summary>
    /// A list of moderation objects.
    /// </summary>
    std::vector<CreateModerationResponse_results_inner> getResults() const;
    void setResults(std::vector<CreateModerationResponse_results_inner> value);

protected:
    std::string m_Id = "";
    std::string m_Model = "";
    std::vector<CreateModerationResponse_results_inner> m_Results;
};

std::vector<CreateModerationResponse> createCreateModerationResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateModerationResponse>(const CreateModerationResponse& val) {
    return val.toPropertyTree();
}

template<>
inline CreateModerationResponse fromPt<CreateModerationResponse>(const boost::property_tree::ptree& pt) {
    CreateModerationResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateModerationResponse_H_ */
