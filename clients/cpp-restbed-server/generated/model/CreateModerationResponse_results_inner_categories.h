/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateModerationResponse_results_inner_categories.h
 *
 * 
 */

#ifndef CreateModerationResponse_results_inner_categories_H_
#define CreateModerationResponse_results_inner_categories_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CreateModerationResponse_results_inner_categories 
{
public:
    CreateModerationResponse_results_inner_categories() = default;
    explicit CreateModerationResponse_results_inner_categories(boost::property_tree::ptree const& pt);
    virtual ~CreateModerationResponse_results_inner_categories() = default;

    CreateModerationResponse_results_inner_categories(const CreateModerationResponse_results_inner_categories& other) = default; // copy constructor
    CreateModerationResponse_results_inner_categories(CreateModerationResponse_results_inner_categories&& other) noexcept = default; // move constructor

    CreateModerationResponse_results_inner_categories& operator=(const CreateModerationResponse_results_inner_categories& other) = default; // copy assignment
    CreateModerationResponse_results_inner_categories& operator=(CreateModerationResponse_results_inner_categories&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateModerationResponse_results_inner_categories members

    /// <summary>
    /// 
    /// </summary>
    bool isHate() const;
    void setHate(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isHateThreatening() const;
    void setHateThreatening(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isSelfHarm() const;
    void setSelfHarm(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isSexual() const;
    void setSexual(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isSexualMinors() const;
    void setSexualMinors(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isViolence() const;
    void setViolence(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isViolenceGraphic() const;
    void setViolenceGraphic(bool value);

protected:
    bool m_Hate = false;
    bool m_Hate_threatening = false;
    bool m_Self_harm = false;
    bool m_Sexual = false;
    bool m_Sexual_minors = false;
    bool m_Violence = false;
    bool m_Violence_graphic = false;
};

std::vector<CreateModerationResponse_results_inner_categories> createCreateModerationResponse_results_inner_categoriesVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateModerationResponse_results_inner_categories>(const CreateModerationResponse_results_inner_categories& val) {
    return val.toPropertyTree();
}

template<>
inline CreateModerationResponse_results_inner_categories fromPt<CreateModerationResponse_results_inner_categories>(const boost::property_tree::ptree& pt) {
    CreateModerationResponse_results_inner_categories ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateModerationResponse_results_inner_categories_H_ */
