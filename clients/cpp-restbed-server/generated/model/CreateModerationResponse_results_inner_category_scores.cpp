/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CreateModerationResponse_results_inner_category_scores.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CreateModerationResponse_results_inner_category_scores::CreateModerationResponse_results_inner_category_scores(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CreateModerationResponse_results_inner_category_scores::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CreateModerationResponse_results_inner_category_scores::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CreateModerationResponse_results_inner_category_scores::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("hate", m_Hate);
	pt.put("hate/threatening", m_Hate_threatening);
	pt.put("harassment", m_Harassment);
	pt.put("harassment/threatening", m_Harassment_threatening);
	pt.put("self-harm", m_Self_harm);
	pt.put("self-harm/intent", m_Self_harm_intent);
	pt.put("self-harm/instructions", m_Self_harm_instructions);
	pt.put("sexual", m_Sexual);
	pt.put("sexual/minors", m_Sexual_minors);
	pt.put("violence", m_Violence);
	pt.put("violence/graphic", m_Violence_graphic);
	return pt;
}

void CreateModerationResponse_results_inner_category_scores::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Hate = pt.get("hate", 0.0);
	m_Hate_threatening = pt.get("hate/threatening", 0.0);
	m_Harassment = pt.get("harassment", 0.0);
	m_Harassment_threatening = pt.get("harassment/threatening", 0.0);
	m_Self_harm = pt.get("self-harm", 0.0);
	m_Self_harm_intent = pt.get("self-harm/intent", 0.0);
	m_Self_harm_instructions = pt.get("self-harm/instructions", 0.0);
	m_Sexual = pt.get("sexual", 0.0);
	m_Sexual_minors = pt.get("sexual/minors", 0.0);
	m_Violence = pt.get("violence", 0.0);
	m_Violence_graphic = pt.get("violence/graphic", 0.0);
}

double CreateModerationResponse_results_inner_category_scores::getHate() const
{
    return m_Hate;
}

void CreateModerationResponse_results_inner_category_scores::setHate(double value)
{
    m_Hate = value;
}


double CreateModerationResponse_results_inner_category_scores::getHateThreatening() const
{
    return m_Hate_threatening;
}

void CreateModerationResponse_results_inner_category_scores::setHateThreatening(double value)
{
    m_Hate_threatening = value;
}


double CreateModerationResponse_results_inner_category_scores::getHarassment() const
{
    return m_Harassment;
}

void CreateModerationResponse_results_inner_category_scores::setHarassment(double value)
{
    m_Harassment = value;
}


double CreateModerationResponse_results_inner_category_scores::getHarassmentThreatening() const
{
    return m_Harassment_threatening;
}

void CreateModerationResponse_results_inner_category_scores::setHarassmentThreatening(double value)
{
    m_Harassment_threatening = value;
}


double CreateModerationResponse_results_inner_category_scores::getSelfHarm() const
{
    return m_Self_harm;
}

void CreateModerationResponse_results_inner_category_scores::setSelfHarm(double value)
{
    m_Self_harm = value;
}


double CreateModerationResponse_results_inner_category_scores::getSelfHarmIntent() const
{
    return m_Self_harm_intent;
}

void CreateModerationResponse_results_inner_category_scores::setSelfHarmIntent(double value)
{
    m_Self_harm_intent = value;
}


double CreateModerationResponse_results_inner_category_scores::getSelfHarmInstructions() const
{
    return m_Self_harm_instructions;
}

void CreateModerationResponse_results_inner_category_scores::setSelfHarmInstructions(double value)
{
    m_Self_harm_instructions = value;
}


double CreateModerationResponse_results_inner_category_scores::getSexual() const
{
    return m_Sexual;
}

void CreateModerationResponse_results_inner_category_scores::setSexual(double value)
{
    m_Sexual = value;
}


double CreateModerationResponse_results_inner_category_scores::getSexualMinors() const
{
    return m_Sexual_minors;
}

void CreateModerationResponse_results_inner_category_scores::setSexualMinors(double value)
{
    m_Sexual_minors = value;
}


double CreateModerationResponse_results_inner_category_scores::getViolence() const
{
    return m_Violence;
}

void CreateModerationResponse_results_inner_category_scores::setViolence(double value)
{
    m_Violence = value;
}


double CreateModerationResponse_results_inner_category_scores::getViolenceGraphic() const
{
    return m_Violence_graphic;
}

void CreateModerationResponse_results_inner_category_scores::setViolenceGraphic(double value)
{
    m_Violence_graphic = value;
}



std::vector<CreateModerationResponse_results_inner_category_scores> createCreateModerationResponse_results_inner_category_scoresVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CreateModerationResponse_results_inner_category_scores>();
    for (const auto& child: pt) {
        vec.emplace_back(CreateModerationResponse_results_inner_category_scores(child.second));
    }

    return vec;
}

}
}
}
}

