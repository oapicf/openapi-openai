/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateRunRequest_model.h
 *
 * The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
 */

#ifndef CreateRunRequest_model_H_
#define CreateRunRequest_model_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
/// </summary>
class  CreateRunRequest_model 
{
public:
    CreateRunRequest_model() = default;
    explicit CreateRunRequest_model(boost::property_tree::ptree const& pt);
    virtual ~CreateRunRequest_model() = default;

    CreateRunRequest_model(const CreateRunRequest_model& other) = default; // copy constructor
    CreateRunRequest_model(CreateRunRequest_model&& other) noexcept = default; // move constructor

    CreateRunRequest_model& operator=(const CreateRunRequest_model& other) = default; // copy assignment
    CreateRunRequest_model& operator=(CreateRunRequest_model&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateRunRequest_model members

protected:
};

std::vector<CreateRunRequest_model> createCreateRunRequest_modelVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateRunRequest_model>(const CreateRunRequest_model& val) {
    return val.toPropertyTree();
}

template<>
inline CreateRunRequest_model fromPt<CreateRunRequest_model>(const boost::property_tree::ptree& pt) {
    CreateRunRequest_model ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateRunRequest_model_H_ */
