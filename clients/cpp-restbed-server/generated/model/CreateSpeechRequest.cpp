/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CreateSpeechRequest.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CreateSpeechRequest::CreateSpeechRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CreateSpeechRequest::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CreateSpeechRequest::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CreateSpeechRequest::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.add_child("model", m_Model.toPropertyTree());
	pt.put("input", m_Input);
	pt.put("voice", m_Voice);
	pt.put("response_format", m_Response_format);
	pt.put("speed", m_Speed);
	return pt;
}

void CreateSpeechRequest::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	if (pt.get_child_optional("model")) {
        m_Model = fromPt<CreateSpeechRequest_model>(pt.get_child("model"));
	}
	m_Input = pt.get("input", "");
	setVoice(pt.get("voice", ""));
	setResponseFormat(pt.get("response_format", "mp3"));
	m_Speed = pt.get("speed", 1.0);
}

CreateSpeechRequest_model CreateSpeechRequest::getModel() const
{
    return m_Model;
}

void CreateSpeechRequest::setModel(CreateSpeechRequest_model value)
{
    m_Model = value;
}


std::string CreateSpeechRequest::getInput() const
{
    return m_Input;
}

void CreateSpeechRequest::setInput(std::string value)
{
    m_Input = value;
}


std::string CreateSpeechRequest::getVoice() const
{
    return m_Voice;
}

void CreateSpeechRequest::setVoice(std::string value)
{
    static const std::array<std::string, 6> allowedValues = {
        "alloy", "echo", "fable", "onyx", "nova", "shimmer"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Voice = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string CreateSpeechRequest::getResponseFormat() const
{
    return m_Response_format;
}

void CreateSpeechRequest::setResponseFormat(std::string value)
{
    static const std::array<std::string, 6> allowedValues = {
        "mp3", "opus", "aac", "flac", "wav", "pcm"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Response_format = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


double CreateSpeechRequest::getSpeed() const
{
    return m_Speed;
}

void CreateSpeechRequest::setSpeed(double value)
{
    m_Speed = value;
}



std::vector<CreateSpeechRequest> createCreateSpeechRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CreateSpeechRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(CreateSpeechRequest(child.second));
    }

    return vec;
}

}
}
}
}

