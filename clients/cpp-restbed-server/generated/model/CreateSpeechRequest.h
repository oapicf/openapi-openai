/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateSpeechRequest.h
 *
 * 
 */

#ifndef CreateSpeechRequest_H_
#define CreateSpeechRequest_H_



#include <string>
#include "CreateSpeechRequest_model.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CreateSpeechRequest 
{
public:
    CreateSpeechRequest() = default;
    explicit CreateSpeechRequest(boost::property_tree::ptree const& pt);
    virtual ~CreateSpeechRequest() = default;

    CreateSpeechRequest(const CreateSpeechRequest& other) = default; // copy constructor
    CreateSpeechRequest(CreateSpeechRequest&& other) noexcept = default; // move constructor

    CreateSpeechRequest& operator=(const CreateSpeechRequest& other) = default; // copy assignment
    CreateSpeechRequest& operator=(CreateSpeechRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateSpeechRequest members

    /// <summary>
    /// 
    /// </summary>
    CreateSpeechRequest_model getModel() const;
    void setModel(CreateSpeechRequest_model value);

    /// <summary>
    /// The text to generate audio for. The maximum length is 4096 characters.
    /// </summary>
    std::string getInput() const;
    void setInput(std::string value);

    /// <summary>
    /// The voice to use when generating the audio. Supported voices are &#x60;alloy&#x60;, &#x60;echo&#x60;, &#x60;fable&#x60;, &#x60;onyx&#x60;, &#x60;nova&#x60;, and &#x60;shimmer&#x60;. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
    /// </summary>
    std::string getVoice() const;
    void setVoice(std::string value);

    /// <summary>
    /// The format to audio in. Supported formats are &#x60;mp3&#x60;, &#x60;opus&#x60;, &#x60;aac&#x60;, &#x60;flac&#x60;, &#x60;wav&#x60;, and &#x60;pcm&#x60;.
    /// </summary>
    std::string getResponseFormat() const;
    void setResponseFormat(std::string value);

    /// <summary>
    /// The speed of the generated audio. Select a value from &#x60;0.25&#x60; to &#x60;4.0&#x60;. &#x60;1.0&#x60; is the default.
    /// </summary>
    double getSpeed() const;
    void setSpeed(double value);

protected:
    CreateSpeechRequest_model m_Model;
    std::string m_Input = "";
    std::string m_Voice = "";
    std::string m_Response_format = "mp3";
    double m_Speed = 1.0;
};

std::vector<CreateSpeechRequest> createCreateSpeechRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateSpeechRequest>(const CreateSpeechRequest& val) {
    return val.toPropertyTree();
}

template<>
inline CreateSpeechRequest fromPt<CreateSpeechRequest>(const boost::property_tree::ptree& pt) {
    CreateSpeechRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateSpeechRequest_H_ */
