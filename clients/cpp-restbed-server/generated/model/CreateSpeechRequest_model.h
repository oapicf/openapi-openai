/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateSpeechRequest_model.h
 *
 * One of the available [TTS models](/docs/models/tts): &#x60;tts-1&#x60; or &#x60;tts-1-hd&#x60; 
 */

#ifndef CreateSpeechRequest_model_H_
#define CreateSpeechRequest_model_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// One of the available [TTS models](/docs/models/tts): &#x60;tts-1&#x60; or &#x60;tts-1-hd&#x60; 
/// </summary>
class  CreateSpeechRequest_model 
{
public:
    CreateSpeechRequest_model() = default;
    explicit CreateSpeechRequest_model(boost::property_tree::ptree const& pt);
    virtual ~CreateSpeechRequest_model() = default;

    CreateSpeechRequest_model(const CreateSpeechRequest_model& other) = default; // copy constructor
    CreateSpeechRequest_model(CreateSpeechRequest_model&& other) noexcept = default; // move constructor

    CreateSpeechRequest_model& operator=(const CreateSpeechRequest_model& other) = default; // copy assignment
    CreateSpeechRequest_model& operator=(CreateSpeechRequest_model&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateSpeechRequest_model members

protected:
};

std::vector<CreateSpeechRequest_model> createCreateSpeechRequest_modelVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateSpeechRequest_model>(const CreateSpeechRequest_model& val) {
    return val.toPropertyTree();
}

template<>
inline CreateSpeechRequest_model fromPt<CreateSpeechRequest_model>(const boost::property_tree::ptree& pt) {
    CreateSpeechRequest_model ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateSpeechRequest_model_H_ */
