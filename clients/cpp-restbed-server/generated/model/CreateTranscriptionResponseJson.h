/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateTranscriptionResponseJson.h
 *
 * Represents a transcription response returned by model, based on the provided input.
 */

#ifndef CreateTranscriptionResponseJson_H_
#define CreateTranscriptionResponseJson_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a transcription response returned by model, based on the provided input.
/// </summary>
class  CreateTranscriptionResponseJson 
{
public:
    CreateTranscriptionResponseJson() = default;
    explicit CreateTranscriptionResponseJson(boost::property_tree::ptree const& pt);
    virtual ~CreateTranscriptionResponseJson() = default;

    CreateTranscriptionResponseJson(const CreateTranscriptionResponseJson& other) = default; // copy constructor
    CreateTranscriptionResponseJson(CreateTranscriptionResponseJson&& other) noexcept = default; // move constructor

    CreateTranscriptionResponseJson& operator=(const CreateTranscriptionResponseJson& other) = default; // copy assignment
    CreateTranscriptionResponseJson& operator=(CreateTranscriptionResponseJson&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateTranscriptionResponseJson members

    /// <summary>
    /// The transcribed text.
    /// </summary>
    std::string getText() const;
    void setText(std::string value);

protected:
    std::string m_Text = "";
};

std::vector<CreateTranscriptionResponseJson> createCreateTranscriptionResponseJsonVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateTranscriptionResponseJson>(const CreateTranscriptionResponseJson& val) {
    return val.toPropertyTree();
}

template<>
inline CreateTranscriptionResponseJson fromPt<CreateTranscriptionResponseJson>(const boost::property_tree::ptree& pt) {
    CreateTranscriptionResponseJson ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateTranscriptionResponseJson_H_ */
