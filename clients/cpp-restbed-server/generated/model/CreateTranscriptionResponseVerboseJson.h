/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateTranscriptionResponseVerboseJson.h
 *
 * Represents a verbose json transcription response returned by model, based on the provided input.
 */

#ifndef CreateTranscriptionResponseVerboseJson_H_
#define CreateTranscriptionResponseVerboseJson_H_



#include "TranscriptionWord.h"
#include <string>
#include "TranscriptionSegment.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a verbose json transcription response returned by model, based on the provided input.
/// </summary>
class  CreateTranscriptionResponseVerboseJson 
{
public:
    CreateTranscriptionResponseVerboseJson() = default;
    explicit CreateTranscriptionResponseVerboseJson(boost::property_tree::ptree const& pt);
    virtual ~CreateTranscriptionResponseVerboseJson() = default;

    CreateTranscriptionResponseVerboseJson(const CreateTranscriptionResponseVerboseJson& other) = default; // copy constructor
    CreateTranscriptionResponseVerboseJson(CreateTranscriptionResponseVerboseJson&& other) noexcept = default; // move constructor

    CreateTranscriptionResponseVerboseJson& operator=(const CreateTranscriptionResponseVerboseJson& other) = default; // copy assignment
    CreateTranscriptionResponseVerboseJson& operator=(CreateTranscriptionResponseVerboseJson&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateTranscriptionResponseVerboseJson members

    /// <summary>
    /// The language of the input audio.
    /// </summary>
    std::string getLanguage() const;
    void setLanguage(std::string value);

    /// <summary>
    /// The duration of the input audio.
    /// </summary>
    std::string getDuration() const;
    void setDuration(std::string value);

    /// <summary>
    /// The transcribed text.
    /// </summary>
    std::string getText() const;
    void setText(std::string value);

    /// <summary>
    /// Extracted words and their corresponding timestamps.
    /// </summary>
    std::vector<TranscriptionWord> getWords() const;
    void setWords(std::vector<TranscriptionWord> value);

    /// <summary>
    /// Segments of the transcribed text and their corresponding details.
    /// </summary>
    std::vector<TranscriptionSegment> getSegments() const;
    void setSegments(std::vector<TranscriptionSegment> value);

protected:
    std::string m_Language = "";
    std::string m_Duration = "";
    std::string m_Text = "";
    std::vector<TranscriptionWord> m_Words;
    std::vector<TranscriptionSegment> m_Segments;
};

std::vector<CreateTranscriptionResponseVerboseJson> createCreateTranscriptionResponseVerboseJsonVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateTranscriptionResponseVerboseJson>(const CreateTranscriptionResponseVerboseJson& val) {
    return val.toPropertyTree();
}

template<>
inline CreateTranscriptionResponseVerboseJson fromPt<CreateTranscriptionResponseVerboseJson>(const boost::property_tree::ptree& pt) {
    CreateTranscriptionResponseVerboseJson ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateTranscriptionResponseVerboseJson_H_ */
