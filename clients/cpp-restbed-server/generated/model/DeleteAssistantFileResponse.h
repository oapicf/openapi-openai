/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DeleteAssistantFileResponse.h
 *
 * Deletes the association between the assistant and the file, but does not delete the [File](/docs/api-reference/files) object itself.
 */

#ifndef DeleteAssistantFileResponse_H_
#define DeleteAssistantFileResponse_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Deletes the association between the assistant and the file, but does not delete the [File](/docs/api-reference/files) object itself.
/// </summary>
class  DeleteAssistantFileResponse 
{
public:
    DeleteAssistantFileResponse() = default;
    explicit DeleteAssistantFileResponse(boost::property_tree::ptree const& pt);
    virtual ~DeleteAssistantFileResponse() = default;

    DeleteAssistantFileResponse(const DeleteAssistantFileResponse& other) = default; // copy constructor
    DeleteAssistantFileResponse(DeleteAssistantFileResponse&& other) noexcept = default; // move constructor

    DeleteAssistantFileResponse& operator=(const DeleteAssistantFileResponse& other) = default; // copy assignment
    DeleteAssistantFileResponse& operator=(DeleteAssistantFileResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// DeleteAssistantFileResponse members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    bool isDeleted() const;
    void setDeleted(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::string getObject() const;
    void setObject(std::string value);

protected:
    std::string m_Id = "";
    bool m_Deleted = false;
    std::string m_object = "";
};

std::vector<DeleteAssistantFileResponse> createDeleteAssistantFileResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<DeleteAssistantFileResponse>(const DeleteAssistantFileResponse& val) {
    return val.toPropertyTree();
}

template<>
inline DeleteAssistantFileResponse fromPt<DeleteAssistantFileResponse>(const boost::property_tree::ptree& pt) {
    DeleteAssistantFileResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* DeleteAssistantFileResponse_H_ */
