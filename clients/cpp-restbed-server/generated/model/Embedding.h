/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Embedding.h
 *
 * Represents an embedding vector returned by embedding endpoint. 
 */

#ifndef Embedding_H_
#define Embedding_H_



#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents an embedding vector returned by embedding endpoint. 
/// </summary>
class  Embedding 
{
public:
    Embedding() = default;
    explicit Embedding(boost::property_tree::ptree const& pt);
    virtual ~Embedding() = default;

    Embedding(const Embedding& other) = default; // copy constructor
    Embedding(Embedding&& other) noexcept = default; // move constructor

    Embedding& operator=(const Embedding& other) = default; // copy assignment
    Embedding& operator=(Embedding&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Embedding members

    /// <summary>
    /// The index of the embedding in the list of embeddings.
    /// </summary>
    int32_t getIndex() const;
    void setIndex(int32_t value);

    /// <summary>
    /// The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings). 
    /// </summary>
    std::vector<double> getEmbedding() const;
    void setEmbedding(std::vector<double> value);

    /// <summary>
    /// The object type, which is always \&quot;embedding\&quot;.
    /// </summary>
    std::string getObject() const;
    void setObject(std::string value);

protected:
    int32_t m_Index = 0;
    std::vector<double> m_Embedding;
    std::string m_object = "";
};

std::vector<Embedding> createEmbeddingVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Embedding>(const Embedding& val) {
    return val.toPropertyTree();
}

template<>
inline Embedding fromPt<Embedding>(const boost::property_tree::ptree& pt) {
    Embedding ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Embedding_H_ */
