/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ErrorResponse.h
 *
 * 
 */

#ifndef ErrorResponse_H_
#define ErrorResponse_H_



#include "Error.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ErrorResponse 
{
public:
    ErrorResponse() = default;
    explicit ErrorResponse(boost::property_tree::ptree const& pt);
    virtual ~ErrorResponse() = default;

    ErrorResponse(const ErrorResponse& other) = default; // copy constructor
    ErrorResponse(ErrorResponse&& other) noexcept = default; // move constructor

    ErrorResponse& operator=(const ErrorResponse& other) = default; // copy assignment
    ErrorResponse& operator=(ErrorResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ErrorResponse members

    /// <summary>
    /// 
    /// </summary>
    Error getError() const;
    void setError(Error value);

protected:
    Error m_Error;
};

std::vector<ErrorResponse> createErrorResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ErrorResponse>(const ErrorResponse& val) {
    return val.toPropertyTree();
}

template<>
inline ErrorResponse fromPt<ErrorResponse>(const boost::property_tree::ptree& pt) {
    ErrorResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ErrorResponse_H_ */
