/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FineTune.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

FineTune::FineTune(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string FineTune::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void FineTune::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree FineTune::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("object", m_object);
	pt.put("created_at", m_Created_at);
	pt.put("updated_at", m_Updated_at);
	pt.put("model", m_Model);
	pt.put("fine_tuned_model", m_Fine_tuned_model);
	pt.put("organization_id", m_Organization_id);
	pt.put("status", m_Status);
	// generate tree for Training_files
    tmp_node.clear();
	if (!m_Training_files.empty()) {
        tmp_node = toPt(m_Training_files);
		pt.add_child("training_files", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Validation_files
    tmp_node.clear();
	if (!m_Validation_files.empty()) {
        tmp_node = toPt(m_Validation_files);
		pt.add_child("validation_files", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Result_files
    tmp_node.clear();
	if (!m_Result_files.empty()) {
        tmp_node = toPt(m_Result_files);
		pt.add_child("result_files", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Events
    tmp_node.clear();
	if (!m_Events.empty()) {
        tmp_node = toPt(m_Events);
		pt.add_child("events", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void FineTune::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", "");
	m_object = pt.get("object", "");
	m_Created_at = pt.get("created_at", 0);
	m_Updated_at = pt.get("updated_at", 0);
	m_Model = pt.get("model", "");
	m_Fine_tuned_model = pt.get("fine_tuned_model", "");
	m_Organization_id = pt.get("organization_id", "");
	m_Status = pt.get("status", "");
	// push all items of Training_files into member
	if (pt.get_child_optional("training_files")) {
        m_Training_files = fromPt<std::vector<OpenAIFile>>(pt.get_child("training_files"));
	}
	// push all items of Validation_files into member
	if (pt.get_child_optional("validation_files")) {
        m_Validation_files = fromPt<std::vector<OpenAIFile>>(pt.get_child("validation_files"));
	}
	// push all items of Result_files into member
	if (pt.get_child_optional("result_files")) {
        m_Result_files = fromPt<std::vector<OpenAIFile>>(pt.get_child("result_files"));
	}
	// push all items of Events into member
	if (pt.get_child_optional("events")) {
        m_Events = fromPt<std::vector<FineTuneEvent>>(pt.get_child("events"));
	}
}

std::string FineTune::getId() const
{
    return m_Id;
}

void FineTune::setId(std::string value)
{
    m_Id = value;
}


std::string FineTune::getObject() const
{
    return m_object;
}

void FineTune::setObject(std::string value)
{
    m_object = value;
}


int32_t FineTune::getCreatedAt() const
{
    return m_Created_at;
}

void FineTune::setCreatedAt(int32_t value)
{
    m_Created_at = value;
}


int32_t FineTune::getUpdatedAt() const
{
    return m_Updated_at;
}

void FineTune::setUpdatedAt(int32_t value)
{
    m_Updated_at = value;
}


std::string FineTune::getModel() const
{
    return m_Model;
}

void FineTune::setModel(std::string value)
{
    m_Model = value;
}


std::string FineTune::getFineTunedModel() const
{
    return m_Fine_tuned_model;
}

void FineTune::setFineTunedModel(std::string value)
{
    m_Fine_tuned_model = value;
}


std::string FineTune::getOrganizationId() const
{
    return m_Organization_id;
}

void FineTune::setOrganizationId(std::string value)
{
    m_Organization_id = value;
}


std::string FineTune::getStatus() const
{
    return m_Status;
}

void FineTune::setStatus(std::string value)
{
    m_Status = value;
}


std::string FineTune::getHyperparams() const
{
    return m_Hyperparams;
}

void FineTune::setHyperparams(std::string value)
{
    m_Hyperparams = value;
}


std::vector<OpenAIFile> FineTune::getTrainingFiles() const
{
    return m_Training_files;
}

void FineTune::setTrainingFiles(std::vector<OpenAIFile> value)
{
    m_Training_files = value;
}


std::vector<OpenAIFile> FineTune::getValidationFiles() const
{
    return m_Validation_files;
}

void FineTune::setValidationFiles(std::vector<OpenAIFile> value)
{
    m_Validation_files = value;
}


std::vector<OpenAIFile> FineTune::getResultFiles() const
{
    return m_Result_files;
}

void FineTune::setResultFiles(std::vector<OpenAIFile> value)
{
    m_Result_files = value;
}


std::vector<FineTuneEvent> FineTune::getEvents() const
{
    return m_Events;
}

void FineTune::setEvents(std::vector<FineTuneEvent> value)
{
    m_Events = value;
}



std::vector<FineTune> createFineTuneVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<FineTune>();
    for (const auto& child: pt) {
        vec.emplace_back(FineTune(child.second));
    }

    return vec;
}

}
}
}
}

