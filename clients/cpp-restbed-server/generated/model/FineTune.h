/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FineTune.h
 *
 * 
 */

#ifndef FineTune_H_
#define FineTune_H_



#include <string>
#include "OpenAIFile.h"
#include <vector>
#include "FineTuneEvent.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  FineTune 
{
public:
    FineTune() = default;
    explicit FineTune(boost::property_tree::ptree const& pt);
    virtual ~FineTune() = default;

    FineTune(const FineTune& other) = default; // copy constructor
    FineTune(FineTune&& other) noexcept = default; // move constructor

    FineTune& operator=(const FineTune& other) = default; // copy assignment
    FineTune& operator=(FineTune&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// FineTune members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getObject() const;
    void setObject(std::string value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCreatedAt() const;
    void setCreatedAt(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getUpdatedAt() const;
    void setUpdatedAt(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getModel() const;
    void setModel(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getFineTunedModel() const;
    void setFineTunedModel(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getOrganizationId() const;
    void setOrganizationId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getHyperparams() const;
    void setHyperparams(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<OpenAIFile> getTrainingFiles() const;
    void setTrainingFiles(std::vector<OpenAIFile> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<OpenAIFile> getValidationFiles() const;
    void setValidationFiles(std::vector<OpenAIFile> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<OpenAIFile> getResultFiles() const;
    void setResultFiles(std::vector<OpenAIFile> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<FineTuneEvent> getEvents() const;
    void setEvents(std::vector<FineTuneEvent> value);

protected:
    std::string m_Id = "";
    std::string m_object = "";
    int32_t m_Created_at = 0;
    int32_t m_Updated_at = 0;
    std::string m_Model = "";
    std::string m_Fine_tuned_model = "";
    std::string m_Organization_id = "";
    std::string m_Status = "";
    std::string m_Hyperparams = std::string{};
    std::vector<OpenAIFile> m_Training_files;
    std::vector<OpenAIFile> m_Validation_files;
    std::vector<OpenAIFile> m_Result_files;
    std::vector<FineTuneEvent> m_Events;
};

std::vector<FineTune> createFineTuneVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<FineTune>(const FineTune& val) {
    return val.toPropertyTree();
}

template<>
inline FineTune fromPt<FineTune>(const boost::property_tree::ptree& pt) {
    FineTune ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* FineTune_H_ */
