/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FineTuningJob.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

FineTuningJob::FineTuningJob(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string FineTuningJob::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void FineTuningJob::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree FineTuningJob::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("created_at", m_Created_at);
	pt.add_child("error", m_Error.toPropertyTree());
	pt.put("fine_tuned_model", m_Fine_tuned_model);
	pt.put("finished_at", m_Finished_at);
	pt.add_child("hyperparameters", m_Hyperparameters.toPropertyTree());
	pt.put("model", m_Model);
	pt.put("object", m_object);
	pt.put("organization_id", m_Organization_id);
	// generate tree for Result_files
    tmp_node.clear();
	if (!m_Result_files.empty()) {
        tmp_node = toPt(m_Result_files);
		pt.add_child("result_files", tmp_node);
		tmp_node.clear();
	}
	pt.put("status", m_Status);
	pt.put("trained_tokens", m_Trained_tokens);
	pt.put("training_file", m_Training_file);
	pt.put("validation_file", m_Validation_file);
	// generate tree for Integrations
    tmp_node.clear();
	if (!m_Integrations.empty()) {
        tmp_node = toPt(m_Integrations);
		pt.add_child("integrations", tmp_node);
		tmp_node.clear();
	}
	pt.put("seed", m_Seed);
	return pt;
}

void FineTuningJob::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", "");
	m_Created_at = pt.get("created_at", 0);
	if (pt.get_child_optional("error")) {
        m_Error = fromPt<FineTuningJob_error>(pt.get_child("error"));
	}
	m_Fine_tuned_model = pt.get("fine_tuned_model", "");
	m_Finished_at = pt.get("finished_at", 0);
	if (pt.get_child_optional("hyperparameters")) {
        m_Hyperparameters = fromPt<FineTuningJob_hyperparameters>(pt.get_child("hyperparameters"));
	}
	m_Model = pt.get("model", "");
	setObject(pt.get("object", ""));
	m_Organization_id = pt.get("organization_id", "");
	// push all items of Result_files into member
	if (pt.get_child_optional("result_files")) {
        m_Result_files = fromPt<std::vector<std::string>>(pt.get_child("result_files"));
	}
	setStatus(pt.get("status", ""));
	m_Trained_tokens = pt.get("trained_tokens", 0);
	m_Training_file = pt.get("training_file", "");
	m_Validation_file = pt.get("validation_file", "");
	// push all items of Integrations into member
	if (pt.get_child_optional("integrations")) {
        m_Integrations = fromPt<std::vector<FineTuningJob_integrations_inner>>(pt.get_child("integrations"));
	}
	m_Seed = pt.get("seed", 0);
}

std::string FineTuningJob::getId() const
{
    return m_Id;
}

void FineTuningJob::setId(std::string value)
{
    m_Id = value;
}


int32_t FineTuningJob::getCreatedAt() const
{
    return m_Created_at;
}

void FineTuningJob::setCreatedAt(int32_t value)
{
    m_Created_at = value;
}


FineTuningJob_error FineTuningJob::getError() const
{
    return m_Error;
}

void FineTuningJob::setError(FineTuningJob_error value)
{
    m_Error = value;
}


std::string FineTuningJob::getFineTunedModel() const
{
    return m_Fine_tuned_model;
}

void FineTuningJob::setFineTunedModel(std::string value)
{
    m_Fine_tuned_model = value;
}


int32_t FineTuningJob::getFinishedAt() const
{
    return m_Finished_at;
}

void FineTuningJob::setFinishedAt(int32_t value)
{
    m_Finished_at = value;
}


FineTuningJob_hyperparameters FineTuningJob::getHyperparameters() const
{
    return m_Hyperparameters;
}

void FineTuningJob::setHyperparameters(FineTuningJob_hyperparameters value)
{
    m_Hyperparameters = value;
}


std::string FineTuningJob::getModel() const
{
    return m_Model;
}

void FineTuningJob::setModel(std::string value)
{
    m_Model = value;
}


std::string FineTuningJob::getObject() const
{
    return m_object;
}

void FineTuningJob::setObject(std::string value)
{
    static const std::array<std::string, 1> allowedValues = {
        "fine_tuning.job"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_object = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string FineTuningJob::getOrganizationId() const
{
    return m_Organization_id;
}

void FineTuningJob::setOrganizationId(std::string value)
{
    m_Organization_id = value;
}


std::vector<std::string> FineTuningJob::getResultFiles() const
{
    return m_Result_files;
}

void FineTuningJob::setResultFiles(std::vector<std::string> value)
{
    m_Result_files = value;
}


std::string FineTuningJob::getStatus() const
{
    return m_Status;
}

void FineTuningJob::setStatus(std::string value)
{
    static const std::array<std::string, 6> allowedValues = {
        "validating_files", "queued", "running", "succeeded", "failed", "cancelled"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Status = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


int32_t FineTuningJob::getTrainedTokens() const
{
    return m_Trained_tokens;
}

void FineTuningJob::setTrainedTokens(int32_t value)
{
    m_Trained_tokens = value;
}


std::string FineTuningJob::getTrainingFile() const
{
    return m_Training_file;
}

void FineTuningJob::setTrainingFile(std::string value)
{
    m_Training_file = value;
}


std::string FineTuningJob::getValidationFile() const
{
    return m_Validation_file;
}

void FineTuningJob::setValidationFile(std::string value)
{
    m_Validation_file = value;
}


std::vector<FineTuningJob_integrations_inner> FineTuningJob::getIntegrations() const
{
    return m_Integrations;
}

void FineTuningJob::setIntegrations(std::vector<FineTuningJob_integrations_inner> value)
{
    m_Integrations = value;
}


int32_t FineTuningJob::getSeed() const
{
    return m_Seed;
}

void FineTuningJob::setSeed(int32_t value)
{
    m_Seed = value;
}



std::vector<FineTuningJob> createFineTuningJobVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<FineTuningJob>();
    for (const auto& child: pt) {
        vec.emplace_back(FineTuningJob(child.second));
    }

    return vec;
}

}
}
}
}

