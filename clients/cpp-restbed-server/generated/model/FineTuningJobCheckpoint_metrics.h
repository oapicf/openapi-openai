/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FineTuningJobCheckpoint_metrics.h
 *
 * Metrics at the step number during the fine-tuning job.
 */

#ifndef FineTuningJobCheckpoint_metrics_H_
#define FineTuningJobCheckpoint_metrics_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Metrics at the step number during the fine-tuning job.
/// </summary>
class  FineTuningJobCheckpoint_metrics 
{
public:
    FineTuningJobCheckpoint_metrics() = default;
    explicit FineTuningJobCheckpoint_metrics(boost::property_tree::ptree const& pt);
    virtual ~FineTuningJobCheckpoint_metrics() = default;

    FineTuningJobCheckpoint_metrics(const FineTuningJobCheckpoint_metrics& other) = default; // copy constructor
    FineTuningJobCheckpoint_metrics(FineTuningJobCheckpoint_metrics&& other) noexcept = default; // move constructor

    FineTuningJobCheckpoint_metrics& operator=(const FineTuningJobCheckpoint_metrics& other) = default; // copy assignment
    FineTuningJobCheckpoint_metrics& operator=(FineTuningJobCheckpoint_metrics&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// FineTuningJobCheckpoint_metrics members

    /// <summary>
    /// 
    /// </summary>
    double getStep() const;
    void setStep(double value);

    /// <summary>
    /// 
    /// </summary>
    double getTrainLoss() const;
    void setTrainLoss(double value);

    /// <summary>
    /// 
    /// </summary>
    double getTrainMeanTokenAccuracy() const;
    void setTrainMeanTokenAccuracy(double value);

    /// <summary>
    /// 
    /// </summary>
    double getValidLoss() const;
    void setValidLoss(double value);

    /// <summary>
    /// 
    /// </summary>
    double getValidMeanTokenAccuracy() const;
    void setValidMeanTokenAccuracy(double value);

    /// <summary>
    /// 
    /// </summary>
    double getFullValidLoss() const;
    void setFullValidLoss(double value);

    /// <summary>
    /// 
    /// </summary>
    double getFullValidMeanTokenAccuracy() const;
    void setFullValidMeanTokenAccuracy(double value);

protected:
    double m_Step = 0.0;
    double m_Train_loss = 0.0;
    double m_Train_mean_token_accuracy = 0.0;
    double m_Valid_loss = 0.0;
    double m_Valid_mean_token_accuracy = 0.0;
    double m_Full_valid_loss = 0.0;
    double m_Full_valid_mean_token_accuracy = 0.0;
};

std::vector<FineTuningJobCheckpoint_metrics> createFineTuningJobCheckpoint_metricsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<FineTuningJobCheckpoint_metrics>(const FineTuningJobCheckpoint_metrics& val) {
    return val.toPropertyTree();
}

template<>
inline FineTuningJobCheckpoint_metrics fromPt<FineTuningJobCheckpoint_metrics>(const boost::property_tree::ptree& pt) {
    FineTuningJobCheckpoint_metrics ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* FineTuningJobCheckpoint_metrics_H_ */
