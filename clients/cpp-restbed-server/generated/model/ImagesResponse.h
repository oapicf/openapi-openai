/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ImagesResponse.h
 *
 * 
 */

#ifndef ImagesResponse_H_
#define ImagesResponse_H_



#include "Image.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ImagesResponse 
{
public:
    ImagesResponse() = default;
    explicit ImagesResponse(boost::property_tree::ptree const& pt);
    virtual ~ImagesResponse() = default;

    ImagesResponse(const ImagesResponse& other) = default; // copy constructor
    ImagesResponse(ImagesResponse&& other) noexcept = default; // move constructor

    ImagesResponse& operator=(const ImagesResponse& other) = default; // copy assignment
    ImagesResponse& operator=(ImagesResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ImagesResponse members

    /// <summary>
    /// 
    /// </summary>
    int32_t getCreated() const;
    void setCreated(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<Image> getData() const;
    void setData(std::vector<Image> value);

protected:
    int32_t m_Created = 0;
    std::vector<Image> m_Data;
};

std::vector<ImagesResponse> createImagesResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ImagesResponse>(const ImagesResponse& val) {
    return val.toPropertyTree();
}

template<>
inline ImagesResponse fromPt<ImagesResponse>(const boost::property_tree::ptree& pt) {
    ImagesResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ImagesResponse_H_ */
