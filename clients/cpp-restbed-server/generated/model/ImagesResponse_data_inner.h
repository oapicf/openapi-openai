/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ImagesResponse_data_inner.h
 *
 * 
 */

#ifndef ImagesResponse_data_inner_H_
#define ImagesResponse_data_inner_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ImagesResponse_data_inner 
{
public:
    ImagesResponse_data_inner() = default;
    explicit ImagesResponse_data_inner(boost::property_tree::ptree const& pt);
    virtual ~ImagesResponse_data_inner() = default;

    ImagesResponse_data_inner(const ImagesResponse_data_inner& other) = default; // copy constructor
    ImagesResponse_data_inner(ImagesResponse_data_inner&& other) noexcept = default; // move constructor

    ImagesResponse_data_inner& operator=(const ImagesResponse_data_inner& other) = default; // copy assignment
    ImagesResponse_data_inner& operator=(ImagesResponse_data_inner&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ImagesResponse_data_inner members

    /// <summary>
    /// 
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getB64Json() const;
    void setB64Json(std::string value);

protected:
    std::string m_Url = "";
    std::string m_B64_json = "";
};

std::vector<ImagesResponse_data_inner> createImagesResponse_data_innerVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ImagesResponse_data_inner>(const ImagesResponse_data_inner& val) {
    return val.toPropertyTree();
}

template<>
inline ImagesResponse_data_inner fromPt<ImagesResponse_data_inner>(const boost::property_tree::ptree& pt) {
    ImagesResponse_data_inner ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ImagesResponse_data_inner_H_ */
