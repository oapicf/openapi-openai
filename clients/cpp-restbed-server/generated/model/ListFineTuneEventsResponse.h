/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ListFineTuneEventsResponse.h
 *
 * 
 */

#ifndef ListFineTuneEventsResponse_H_
#define ListFineTuneEventsResponse_H_



#include <string>
#include <vector>
#include "FineTuneEvent.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ListFineTuneEventsResponse 
{
public:
    ListFineTuneEventsResponse() = default;
    explicit ListFineTuneEventsResponse(boost::property_tree::ptree const& pt);
    virtual ~ListFineTuneEventsResponse() = default;

    ListFineTuneEventsResponse(const ListFineTuneEventsResponse& other) = default; // copy constructor
    ListFineTuneEventsResponse(ListFineTuneEventsResponse&& other) noexcept = default; // move constructor

    ListFineTuneEventsResponse& operator=(const ListFineTuneEventsResponse& other) = default; // copy assignment
    ListFineTuneEventsResponse& operator=(ListFineTuneEventsResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ListFineTuneEventsResponse members

    /// <summary>
    /// 
    /// </summary>
    std::string getObject() const;
    void setObject(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<FineTuneEvent> getData() const;
    void setData(std::vector<FineTuneEvent> value);

protected:
    std::string m_object = "";
    std::vector<FineTuneEvent> m_Data;
};

std::vector<ListFineTuneEventsResponse> createListFineTuneEventsResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ListFineTuneEventsResponse>(const ListFineTuneEventsResponse& val) {
    return val.toPropertyTree();
}

template<>
inline ListFineTuneEventsResponse fromPt<ListFineTuneEventsResponse>(const boost::property_tree::ptree& pt) {
    ListFineTuneEventsResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ListFineTuneEventsResponse_H_ */
