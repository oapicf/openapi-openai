/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MessageContentImageFileObject.h
 *
 * References an image [File](/docs/api-reference/files) in the content of a message.
 */

#ifndef MessageContentImageFileObject_H_
#define MessageContentImageFileObject_H_



#include "MessageContentImageFileObject_image_file.h"
#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// References an image [File](/docs/api-reference/files) in the content of a message.
/// </summary>
class  MessageContentImageFileObject 
{
public:
    MessageContentImageFileObject() = default;
    explicit MessageContentImageFileObject(boost::property_tree::ptree const& pt);
    virtual ~MessageContentImageFileObject() = default;

    MessageContentImageFileObject(const MessageContentImageFileObject& other) = default; // copy constructor
    MessageContentImageFileObject(MessageContentImageFileObject&& other) noexcept = default; // move constructor

    MessageContentImageFileObject& operator=(const MessageContentImageFileObject& other) = default; // copy assignment
    MessageContentImageFileObject& operator=(MessageContentImageFileObject&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// MessageContentImageFileObject members

    /// <summary>
    /// Always &#x60;image_file&#x60;.
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    MessageContentImageFileObject_image_file getImageFile() const;
    void setImageFile(MessageContentImageFileObject_image_file value);

protected:
    std::string m_Type = "";
    MessageContentImageFileObject_image_file m_Image_file;
};

std::vector<MessageContentImageFileObject> createMessageContentImageFileObjectVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<MessageContentImageFileObject>(const MessageContentImageFileObject& val) {
    return val.toPropertyTree();
}

template<>
inline MessageContentImageFileObject fromPt<MessageContentImageFileObject>(const boost::property_tree::ptree& pt) {
    MessageContentImageFileObject ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* MessageContentImageFileObject_H_ */
