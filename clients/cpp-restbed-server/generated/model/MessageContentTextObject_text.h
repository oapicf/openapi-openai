/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MessageContentTextObject_text.h
 *
 * 
 */

#ifndef MessageContentTextObject_text_H_
#define MessageContentTextObject_text_H_



#include <string>
#include "MessageContentTextObject_text_annotations_inner.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  MessageContentTextObject_text 
{
public:
    MessageContentTextObject_text() = default;
    explicit MessageContentTextObject_text(boost::property_tree::ptree const& pt);
    virtual ~MessageContentTextObject_text() = default;

    MessageContentTextObject_text(const MessageContentTextObject_text& other) = default; // copy constructor
    MessageContentTextObject_text(MessageContentTextObject_text&& other) noexcept = default; // move constructor

    MessageContentTextObject_text& operator=(const MessageContentTextObject_text& other) = default; // copy assignment
    MessageContentTextObject_text& operator=(MessageContentTextObject_text&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// MessageContentTextObject_text members

    /// <summary>
    /// The data that makes up the text.
    /// </summary>
    std::string getValue() const;
    void setValue(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<MessageContentTextObject_text_annotations_inner> getAnnotations() const;
    void setAnnotations(std::vector<MessageContentTextObject_text_annotations_inner> value);

protected:
    std::string m_Value = "";
    std::vector<MessageContentTextObject_text_annotations_inner> m_Annotations;
};

std::vector<MessageContentTextObject_text> createMessageContentTextObject_textVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<MessageContentTextObject_text>(const MessageContentTextObject_text& val) {
    return val.toPropertyTree();
}

template<>
inline MessageContentTextObject_text fromPt<MessageContentTextObject_text>(const boost::property_tree::ptree& pt) {
    MessageContentTextObject_text ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* MessageContentTextObject_text_H_ */
