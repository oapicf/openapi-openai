/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MessageDeltaContentTextAnnotationsFilePathObject.h
 *
 * A URL for the file that&#39;s generated when the assistant used the &#x60;code_interpreter&#x60; tool to generate a file.
 */

#ifndef MessageDeltaContentTextAnnotationsFilePathObject_H_
#define MessageDeltaContentTextAnnotationsFilePathObject_H_



#include "MessageDeltaContentTextAnnotationsFilePathObject_file_path.h"
#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// A URL for the file that&#39;s generated when the assistant used the &#x60;code_interpreter&#x60; tool to generate a file.
/// </summary>
class  MessageDeltaContentTextAnnotationsFilePathObject 
{
public:
    MessageDeltaContentTextAnnotationsFilePathObject() = default;
    explicit MessageDeltaContentTextAnnotationsFilePathObject(boost::property_tree::ptree const& pt);
    virtual ~MessageDeltaContentTextAnnotationsFilePathObject() = default;

    MessageDeltaContentTextAnnotationsFilePathObject(const MessageDeltaContentTextAnnotationsFilePathObject& other) = default; // copy constructor
    MessageDeltaContentTextAnnotationsFilePathObject(MessageDeltaContentTextAnnotationsFilePathObject&& other) noexcept = default; // move constructor

    MessageDeltaContentTextAnnotationsFilePathObject& operator=(const MessageDeltaContentTextAnnotationsFilePathObject& other) = default; // copy assignment
    MessageDeltaContentTextAnnotationsFilePathObject& operator=(MessageDeltaContentTextAnnotationsFilePathObject&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// MessageDeltaContentTextAnnotationsFilePathObject members

    /// <summary>
    /// The index of the annotation in the text content part.
    /// </summary>
    int32_t getIndex() const;
    void setIndex(int32_t value);

    /// <summary>
    /// Always &#x60;file_path&#x60;.
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// The text in the message content that needs to be replaced.
    /// </summary>
    std::string getText() const;
    void setText(std::string value);

    /// <summary>
    /// 
    /// </summary>
    MessageDeltaContentTextAnnotationsFilePathObject_file_path getFilePath() const;
    void setFilePath(MessageDeltaContentTextAnnotationsFilePathObject_file_path value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getStartIndex() const;
    void setStartIndex(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getEndIndex() const;
    void setEndIndex(int32_t value);

protected:
    int32_t m_Index = 0;
    std::string m_Type = "";
    std::string m_Text = "";
    MessageDeltaContentTextAnnotationsFilePathObject_file_path m_File_path;
    int32_t m_Start_index = 0;
    int32_t m_End_index = 0;
};

std::vector<MessageDeltaContentTextAnnotationsFilePathObject> createMessageDeltaContentTextAnnotationsFilePathObjectVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<MessageDeltaContentTextAnnotationsFilePathObject>(const MessageDeltaContentTextAnnotationsFilePathObject& val) {
    return val.toPropertyTree();
}

template<>
inline MessageDeltaContentTextAnnotationsFilePathObject fromPt<MessageDeltaContentTextAnnotationsFilePathObject>(const boost::property_tree::ptree& pt) {
    MessageDeltaContentTextAnnotationsFilePathObject ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* MessageDeltaContentTextAnnotationsFilePathObject_H_ */
