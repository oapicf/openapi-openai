/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MessageDeltaContentTextObject.h
 *
 * The text content that is part of a message.
 */

#ifndef MessageDeltaContentTextObject_H_
#define MessageDeltaContentTextObject_H_



#include "MessageDeltaContentTextObject_text.h"
#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// The text content that is part of a message.
/// </summary>
class  MessageDeltaContentTextObject 
{
public:
    MessageDeltaContentTextObject() = default;
    explicit MessageDeltaContentTextObject(boost::property_tree::ptree const& pt);
    virtual ~MessageDeltaContentTextObject() = default;

    MessageDeltaContentTextObject(const MessageDeltaContentTextObject& other) = default; // copy constructor
    MessageDeltaContentTextObject(MessageDeltaContentTextObject&& other) noexcept = default; // move constructor

    MessageDeltaContentTextObject& operator=(const MessageDeltaContentTextObject& other) = default; // copy assignment
    MessageDeltaContentTextObject& operator=(MessageDeltaContentTextObject&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// MessageDeltaContentTextObject members

    /// <summary>
    /// The index of the content part in the message.
    /// </summary>
    int32_t getIndex() const;
    void setIndex(int32_t value);

    /// <summary>
    /// Always &#x60;text&#x60;.
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    MessageDeltaContentTextObject_text getText() const;
    void setText(MessageDeltaContentTextObject_text value);

protected:
    int32_t m_Index = 0;
    std::string m_Type = "";
    MessageDeltaContentTextObject_text m_Text;
};

std::vector<MessageDeltaContentTextObject> createMessageDeltaContentTextObjectVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<MessageDeltaContentTextObject>(const MessageDeltaContentTextObject& val) {
    return val.toPropertyTree();
}

template<>
inline MessageDeltaContentTextObject fromPt<MessageDeltaContentTextObject>(const boost::property_tree::ptree& pt) {
    MessageDeltaContentTextObject ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* MessageDeltaContentTextObject_H_ */
