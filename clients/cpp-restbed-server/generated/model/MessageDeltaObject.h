/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MessageDeltaObject.h
 *
 * Represents a message delta i.e. any changed fields on a message during streaming. 
 */

#ifndef MessageDeltaObject_H_
#define MessageDeltaObject_H_



#include <string>
#include "MessageDeltaObject_delta.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a message delta i.e. any changed fields on a message during streaming. 
/// </summary>
class  MessageDeltaObject 
{
public:
    MessageDeltaObject() = default;
    explicit MessageDeltaObject(boost::property_tree::ptree const& pt);
    virtual ~MessageDeltaObject() = default;

    MessageDeltaObject(const MessageDeltaObject& other) = default; // copy constructor
    MessageDeltaObject(MessageDeltaObject&& other) noexcept = default; // move constructor

    MessageDeltaObject& operator=(const MessageDeltaObject& other) = default; // copy assignment
    MessageDeltaObject& operator=(MessageDeltaObject&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// MessageDeltaObject members

    /// <summary>
    /// The identifier of the message, which can be referenced in API endpoints.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// The object type, which is always &#x60;thread.message.delta&#x60;.
    /// </summary>
    std::string getObject() const;
    void setObject(std::string value);

    /// <summary>
    /// 
    /// </summary>
    MessageDeltaObject_delta getDelta() const;
    void setDelta(MessageDeltaObject_delta value);

protected:
    std::string m_Id = "";
    std::string m_object = "";
    MessageDeltaObject_delta m_Delta;
};

std::vector<MessageDeltaObject> createMessageDeltaObjectVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<MessageDeltaObject>(const MessageDeltaObject& val) {
    return val.toPropertyTree();
}

template<>
inline MessageDeltaObject fromPt<MessageDeltaObject>(const boost::property_tree::ptree& pt) {
    MessageDeltaObject ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* MessageDeltaObject_H_ */
