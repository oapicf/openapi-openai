/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MessageDeltaObject_delta.h
 *
 * The delta containing the fields that have changed on the Message.
 */

#ifndef MessageDeltaObject_delta_H_
#define MessageDeltaObject_delta_H_



#include <string>
#include "MessageDeltaObject_delta_content_inner.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// The delta containing the fields that have changed on the Message.
/// </summary>
class  MessageDeltaObject_delta 
{
public:
    MessageDeltaObject_delta() = default;
    explicit MessageDeltaObject_delta(boost::property_tree::ptree const& pt);
    virtual ~MessageDeltaObject_delta() = default;

    MessageDeltaObject_delta(const MessageDeltaObject_delta& other) = default; // copy constructor
    MessageDeltaObject_delta(MessageDeltaObject_delta&& other) noexcept = default; // move constructor

    MessageDeltaObject_delta& operator=(const MessageDeltaObject_delta& other) = default; // copy assignment
    MessageDeltaObject_delta& operator=(MessageDeltaObject_delta&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// MessageDeltaObject_delta members

    /// <summary>
    /// The entity that produced the message. One of &#x60;user&#x60; or &#x60;assistant&#x60;.
    /// </summary>
    std::string getRole() const;
    void setRole(std::string value);

    /// <summary>
    /// The content of the message in array of text and/or images.
    /// </summary>
    std::vector<MessageDeltaObject_delta_content_inner> getContent() const;
    void setContent(std::vector<MessageDeltaObject_delta_content_inner> value);

    /// <summary>
    /// A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
    /// </summary>
    std::vector<std::string> getFileIds() const;
    void setFileIds(std::vector<std::string> value);

protected:
    std::string m_Role = "";
    std::vector<MessageDeltaObject_delta_content_inner> m_Content;
    std::vector<std::string> m_File_ids;
};

std::vector<MessageDeltaObject_delta> createMessageDeltaObject_deltaVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<MessageDeltaObject_delta>(const MessageDeltaObject_delta& val) {
    return val.toPropertyTree();
}

template<>
inline MessageDeltaObject_delta fromPt<MessageDeltaObject_delta>(const boost::property_tree::ptree& pt) {
    MessageDeltaObject_delta ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* MessageDeltaObject_delta_H_ */
