/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MessageObject.h
 *
 * Represents a message within a [thread](/docs/api-reference/threads).
 */

#ifndef MessageObject_H_
#define MessageObject_H_



#include "MessageObject_content_inner.h"
#include "MessageObject_incomplete_details.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a message within a [thread](/docs/api-reference/threads).
/// </summary>
class  MessageObject 
{
public:
    MessageObject() = default;
    explicit MessageObject(boost::property_tree::ptree const& pt);
    virtual ~MessageObject() = default;

    MessageObject(const MessageObject& other) = default; // copy constructor
    MessageObject(MessageObject&& other) noexcept = default; // move constructor

    MessageObject& operator=(const MessageObject& other) = default; // copy assignment
    MessageObject& operator=(MessageObject&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// MessageObject members

    /// <summary>
    /// The identifier, which can be referenced in API endpoints.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// The object type, which is always &#x60;thread.message&#x60;.
    /// </summary>
    std::string getObject() const;
    void setObject(std::string value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the message was created.
    /// </summary>
    int32_t getCreatedAt() const;
    void setCreatedAt(int32_t value);

    /// <summary>
    /// The [thread](/docs/api-reference/threads) ID that this message belongs to.
    /// </summary>
    std::string getThreadId() const;
    void setThreadId(std::string value);

    /// <summary>
    /// The status of the message, which can be either &#x60;in_progress&#x60;, &#x60;incomplete&#x60;, or &#x60;completed&#x60;.
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string value);

    /// <summary>
    /// 
    /// </summary>
    MessageObject_incomplete_details getIncompleteDetails() const;
    void setIncompleteDetails(MessageObject_incomplete_details value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the message was completed.
    /// </summary>
    int32_t getCompletedAt() const;
    void setCompletedAt(int32_t value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the message was marked as incomplete.
    /// </summary>
    int32_t getIncompleteAt() const;
    void setIncompleteAt(int32_t value);

    /// <summary>
    /// The entity that produced the message. One of &#x60;user&#x60; or &#x60;assistant&#x60;.
    /// </summary>
    std::string getRole() const;
    void setRole(std::string value);

    /// <summary>
    /// The content of the message in array of text and/or images.
    /// </summary>
    std::vector<MessageObject_content_inner> getContent() const;
    void setContent(std::vector<MessageObject_content_inner> value);

    /// <summary>
    /// If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
    /// </summary>
    std::string getAssistantId() const;
    void setAssistantId(std::string value);

    /// <summary>
    /// The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is &#x60;null&#x60; when messages are created manually using the create message or create thread endpoints.
    /// </summary>
    std::string getRunId() const;
    void setRunId(std::string value);

    /// <summary>
    /// A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
    /// </summary>
    std::vector<std::string> getFileIds() const;
    void setFileIds(std::vector<std::string> value);

    /// <summary>
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    /// </summary>
    std::string getMetadata() const;
    void setMetadata(std::string value);

protected:
    std::string m_Id = "";
    std::string m_object = "";
    int32_t m_Created_at = 0;
    std::string m_Thread_id = "";
    std::string m_Status = "";
    MessageObject_incomplete_details m_Incomplete_details;
    int32_t m_Completed_at = 0;
    int32_t m_Incomplete_at = 0;
    std::string m_Role = "";
    std::vector<MessageObject_content_inner> m_Content;
    std::string m_Assistant_id = "";
    std::string m_Run_id = "";
    std::vector<std::string> m_File_ids;
    std::string m_Metadata = std::string{};
};

std::vector<MessageObject> createMessageObjectVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<MessageObject>(const MessageObject& val) {
    return val.toPropertyTree();
}

template<>
inline MessageObject fromPt<MessageObject>(const boost::property_tree::ptree& pt) {
    MessageObject ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* MessageObject_H_ */
