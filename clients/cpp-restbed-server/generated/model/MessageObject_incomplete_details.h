/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MessageObject_incomplete_details.h
 *
 * On an incomplete message, details about why the message is incomplete.
 */

#ifndef MessageObject_incomplete_details_H_
#define MessageObject_incomplete_details_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// On an incomplete message, details about why the message is incomplete.
/// </summary>
class  MessageObject_incomplete_details 
{
public:
    MessageObject_incomplete_details() = default;
    explicit MessageObject_incomplete_details(boost::property_tree::ptree const& pt);
    virtual ~MessageObject_incomplete_details() = default;

    MessageObject_incomplete_details(const MessageObject_incomplete_details& other) = default; // copy constructor
    MessageObject_incomplete_details(MessageObject_incomplete_details&& other) noexcept = default; // move constructor

    MessageObject_incomplete_details& operator=(const MessageObject_incomplete_details& other) = default; // copy assignment
    MessageObject_incomplete_details& operator=(MessageObject_incomplete_details&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// MessageObject_incomplete_details members

    /// <summary>
    /// The reason the message is incomplete.
    /// </summary>
    std::string getReason() const;
    void setReason(std::string value);

protected:
    std::string m_Reason = "";
};

std::vector<MessageObject_incomplete_details> createMessageObject_incomplete_detailsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<MessageObject_incomplete_details>(const MessageObject_incomplete_details& val) {
    return val.toPropertyTree();
}

template<>
inline MessageObject_incomplete_details fromPt<MessageObject_incomplete_details>(const boost::property_tree::ptree& pt) {
    MessageObject_incomplete_details ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* MessageObject_incomplete_details_H_ */
