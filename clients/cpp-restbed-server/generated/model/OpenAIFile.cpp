/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OpenAIFile.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OpenAIFile::OpenAIFile(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string OpenAIFile::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void OpenAIFile::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree OpenAIFile::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("bytes", m_Bytes);
	pt.put("created_at", m_Created_at);
	pt.put("filename", m_Filename);
	pt.put("object", m_object);
	pt.put("purpose", m_Purpose);
	pt.put("status", m_Status);
	pt.put("status_details", m_Status_details);
	return pt;
}

void OpenAIFile::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", "");
	m_Bytes = pt.get("bytes", 0);
	m_Created_at = pt.get("created_at", 0);
	m_Filename = pt.get("filename", "");
	setObject(pt.get("object", ""));
	setPurpose(pt.get("purpose", ""));
	setStatus(pt.get("status", ""));
	m_Status_details = pt.get("status_details", "");
}

std::string OpenAIFile::getId() const
{
    return m_Id;
}

void OpenAIFile::setId(std::string value)
{
    m_Id = value;
}


int32_t OpenAIFile::getBytes() const
{
    return m_Bytes;
}

void OpenAIFile::setBytes(int32_t value)
{
    m_Bytes = value;
}


int32_t OpenAIFile::getCreatedAt() const
{
    return m_Created_at;
}

void OpenAIFile::setCreatedAt(int32_t value)
{
    m_Created_at = value;
}


std::string OpenAIFile::getFilename() const
{
    return m_Filename;
}

void OpenAIFile::setFilename(std::string value)
{
    m_Filename = value;
}


std::string OpenAIFile::getObject() const
{
    return m_object;
}

void OpenAIFile::setObject(std::string value)
{
    static const std::array<std::string, 1> allowedValues = {
        "file"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_object = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string OpenAIFile::getPurpose() const
{
    return m_Purpose;
}

void OpenAIFile::setPurpose(std::string value)
{
    static const std::array<std::string, 4> allowedValues = {
        "fine-tune", "fine-tune-results", "assistants", "assistants_output"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Purpose = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string OpenAIFile::getStatus() const
{
    return m_Status;
}

void OpenAIFile::setStatus(std::string value)
{
    static const std::array<std::string, 3> allowedValues = {
        "uploaded", "processed", "error"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Status = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string OpenAIFile::getStatusDetails() const
{
    return m_Status_details;
}

void OpenAIFile::setStatusDetails(std::string value)
{
    m_Status_details = value;
}



std::vector<OpenAIFile> createOpenAIFileVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<OpenAIFile>();
    for (const auto& child: pt) {
        vec.emplace_back(OpenAIFile(child.second));
    }

    return vec;
}

}
}
}
}

