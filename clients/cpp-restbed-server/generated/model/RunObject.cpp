/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RunObject.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

RunObject::RunObject(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string RunObject::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void RunObject::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree RunObject::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("object", m_object);
	pt.put("created_at", m_Created_at);
	pt.put("thread_id", m_Thread_id);
	pt.put("assistant_id", m_Assistant_id);
	pt.put("status", m_Status);
	pt.add_child("required_action", m_Required_action.toPropertyTree());
	pt.add_child("last_error", m_Last_error.toPropertyTree());
	pt.put("expires_at", m_Expires_at);
	pt.put("started_at", m_Started_at);
	pt.put("cancelled_at", m_Cancelled_at);
	pt.put("failed_at", m_Failed_at);
	pt.put("completed_at", m_Completed_at);
	pt.add_child("incomplete_details", m_Incomplete_details.toPropertyTree());
	pt.put("model", m_Model);
	pt.put("instructions", m_Instructions);
	// generate tree for Tools
    tmp_node.clear();
	if (!m_Tools.empty()) {
        tmp_node = toPt(m_Tools);
		pt.add_child("tools", tmp_node);
		tmp_node.clear();
	}
	// generate tree for File_ids
    tmp_node.clear();
	if (!m_File_ids.empty()) {
        tmp_node = toPt(m_File_ids);
		pt.add_child("file_ids", tmp_node);
		tmp_node.clear();
	}
	pt.add_child("usage", m_Usage.toPropertyTree());
	pt.put("temperature", m_Temperature);
	pt.put("max_prompt_tokens", m_Max_prompt_tokens);
	pt.put("max_completion_tokens", m_Max_completion_tokens);
	pt.add_child("truncation_strategy", m_Truncation_strategy.toPropertyTree());
	pt.add_child("tool_choice", m_Tool_choice.toPropertyTree());
	pt.add_child("response_format", m_Response_format.toPropertyTree());
	return pt;
}

void RunObject::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", "");
	setObject(pt.get("object", ""));
	m_Created_at = pt.get("created_at", 0);
	m_Thread_id = pt.get("thread_id", "");
	m_Assistant_id = pt.get("assistant_id", "");
	setStatus(pt.get("status", ""));
	if (pt.get_child_optional("required_action")) {
        m_Required_action = fromPt<RunObject_required_action>(pt.get_child("required_action"));
	}
	if (pt.get_child_optional("last_error")) {
        m_Last_error = fromPt<RunObject_last_error>(pt.get_child("last_error"));
	}
	m_Expires_at = pt.get("expires_at", 0);
	m_Started_at = pt.get("started_at", 0);
	m_Cancelled_at = pt.get("cancelled_at", 0);
	m_Failed_at = pt.get("failed_at", 0);
	m_Completed_at = pt.get("completed_at", 0);
	if (pt.get_child_optional("incomplete_details")) {
        m_Incomplete_details = fromPt<RunObject_incomplete_details>(pt.get_child("incomplete_details"));
	}
	m_Model = pt.get("model", "");
	m_Instructions = pt.get("instructions", "");
	// push all items of Tools into member
	if (pt.get_child_optional("tools")) {
        m_Tools = fromPt<std::vector<AssistantObject_tools_inner>>(pt.get_child("tools"));
	}
	// push all items of File_ids into member
	if (pt.get_child_optional("file_ids")) {
        m_File_ids = fromPt<std::vector<std::string>>(pt.get_child("file_ids"));
	}
	if (pt.get_child_optional("usage")) {
        m_Usage = fromPt<RunCompletionUsage>(pt.get_child("usage"));
	}
	m_Temperature = pt.get("temperature", 0.0);
	m_Max_prompt_tokens = pt.get("max_prompt_tokens", 0);
	m_Max_completion_tokens = pt.get("max_completion_tokens", 0);
	if (pt.get_child_optional("truncation_strategy")) {
        m_Truncation_strategy = fromPt<TruncationObject>(pt.get_child("truncation_strategy"));
	}
	if (pt.get_child_optional("tool_choice")) {
        m_Tool_choice = fromPt<AssistantsApiToolChoiceOption>(pt.get_child("tool_choice"));
	}
	if (pt.get_child_optional("response_format")) {
        m_Response_format = fromPt<AssistantsApiResponseFormatOption>(pt.get_child("response_format"));
	}
}

std::string RunObject::getId() const
{
    return m_Id;
}

void RunObject::setId(std::string value)
{
    m_Id = value;
}


std::string RunObject::getObject() const
{
    return m_object;
}

void RunObject::setObject(std::string value)
{
    static const std::array<std::string, 1> allowedValues = {
        "thread.run"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_object = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


int32_t RunObject::getCreatedAt() const
{
    return m_Created_at;
}

void RunObject::setCreatedAt(int32_t value)
{
    m_Created_at = value;
}


std::string RunObject::getThreadId() const
{
    return m_Thread_id;
}

void RunObject::setThreadId(std::string value)
{
    m_Thread_id = value;
}


std::string RunObject::getAssistantId() const
{
    return m_Assistant_id;
}

void RunObject::setAssistantId(std::string value)
{
    m_Assistant_id = value;
}


std::string RunObject::getStatus() const
{
    return m_Status;
}

void RunObject::setStatus(std::string value)
{
    static const std::array<std::string, 8> allowedValues = {
        "queued", "in_progress", "requires_action", "cancelling", "cancelled", "failed", "completed", "expired"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Status = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


RunObject_required_action RunObject::getRequiredAction() const
{
    return m_Required_action;
}

void RunObject::setRequiredAction(RunObject_required_action value)
{
    m_Required_action = value;
}


RunObject_last_error RunObject::getLastError() const
{
    return m_Last_error;
}

void RunObject::setLastError(RunObject_last_error value)
{
    m_Last_error = value;
}


int32_t RunObject::getExpiresAt() const
{
    return m_Expires_at;
}

void RunObject::setExpiresAt(int32_t value)
{
    m_Expires_at = value;
}


int32_t RunObject::getStartedAt() const
{
    return m_Started_at;
}

void RunObject::setStartedAt(int32_t value)
{
    m_Started_at = value;
}


int32_t RunObject::getCancelledAt() const
{
    return m_Cancelled_at;
}

void RunObject::setCancelledAt(int32_t value)
{
    m_Cancelled_at = value;
}


int32_t RunObject::getFailedAt() const
{
    return m_Failed_at;
}

void RunObject::setFailedAt(int32_t value)
{
    m_Failed_at = value;
}


int32_t RunObject::getCompletedAt() const
{
    return m_Completed_at;
}

void RunObject::setCompletedAt(int32_t value)
{
    m_Completed_at = value;
}


RunObject_incomplete_details RunObject::getIncompleteDetails() const
{
    return m_Incomplete_details;
}

void RunObject::setIncompleteDetails(RunObject_incomplete_details value)
{
    m_Incomplete_details = value;
}


std::string RunObject::getModel() const
{
    return m_Model;
}

void RunObject::setModel(std::string value)
{
    m_Model = value;
}


std::string RunObject::getInstructions() const
{
    return m_Instructions;
}

void RunObject::setInstructions(std::string value)
{
    m_Instructions = value;
}


std::vector<AssistantObject_tools_inner> RunObject::getTools() const
{
    return m_Tools;
}

void RunObject::setTools(std::vector<AssistantObject_tools_inner> value)
{
    m_Tools = value;
}


std::vector<std::string> RunObject::getFileIds() const
{
    return m_File_ids;
}

void RunObject::setFileIds(std::vector<std::string> value)
{
    m_File_ids = value;
}


std::string RunObject::getMetadata() const
{
    return m_Metadata;
}

void RunObject::setMetadata(std::string value)
{
    m_Metadata = value;
}


RunCompletionUsage RunObject::getUsage() const
{
    return m_Usage;
}

void RunObject::setUsage(RunCompletionUsage value)
{
    m_Usage = value;
}


double RunObject::getTemperature() const
{
    return m_Temperature;
}

void RunObject::setTemperature(double value)
{
    m_Temperature = value;
}


int32_t RunObject::getMaxPromptTokens() const
{
    return m_Max_prompt_tokens;
}

void RunObject::setMaxPromptTokens(int32_t value)
{
    m_Max_prompt_tokens = value;
}


int32_t RunObject::getMaxCompletionTokens() const
{
    return m_Max_completion_tokens;
}

void RunObject::setMaxCompletionTokens(int32_t value)
{
    m_Max_completion_tokens = value;
}


TruncationObject RunObject::getTruncationStrategy() const
{
    return m_Truncation_strategy;
}

void RunObject::setTruncationStrategy(TruncationObject value)
{
    m_Truncation_strategy = value;
}


AssistantsApiToolChoiceOption RunObject::getToolChoice() const
{
    return m_Tool_choice;
}

void RunObject::setToolChoice(AssistantsApiToolChoiceOption value)
{
    m_Tool_choice = value;
}


AssistantsApiResponseFormatOption RunObject::getResponseFormat() const
{
    return m_Response_format;
}

void RunObject::setResponseFormat(AssistantsApiResponseFormatOption value)
{
    m_Response_format = value;
}



std::vector<RunObject> createRunObjectVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<RunObject>();
    for (const auto& child: pt) {
        vec.emplace_back(RunObject(child.second));
    }

    return vec;
}

}
}
}
}

