/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RunObject_incomplete_details.h
 *
 * Details on why the run is incomplete. Will be &#x60;null&#x60; if the run is not incomplete.
 */

#ifndef RunObject_incomplete_details_H_
#define RunObject_incomplete_details_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Details on why the run is incomplete. Will be &#x60;null&#x60; if the run is not incomplete.
/// </summary>
class  RunObject_incomplete_details 
{
public:
    RunObject_incomplete_details() = default;
    explicit RunObject_incomplete_details(boost::property_tree::ptree const& pt);
    virtual ~RunObject_incomplete_details() = default;

    RunObject_incomplete_details(const RunObject_incomplete_details& other) = default; // copy constructor
    RunObject_incomplete_details(RunObject_incomplete_details&& other) noexcept = default; // move constructor

    RunObject_incomplete_details& operator=(const RunObject_incomplete_details& other) = default; // copy assignment
    RunObject_incomplete_details& operator=(RunObject_incomplete_details&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// RunObject_incomplete_details members

    /// <summary>
    /// The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
    /// </summary>
    std::string getReason() const;
    void setReason(std::string value);

protected:
    std::string m_Reason = "";
};

std::vector<RunObject_incomplete_details> createRunObject_incomplete_detailsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<RunObject_incomplete_details>(const RunObject_incomplete_details& val) {
    return val.toPropertyTree();
}

template<>
inline RunObject_incomplete_details fromPt<RunObject_incomplete_details>(const boost::property_tree::ptree& pt) {
    RunObject_incomplete_details ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* RunObject_incomplete_details_H_ */
