/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RunStepCompletionUsage.h
 *
 * Usage statistics related to the run step. This value will be &#x60;null&#x60; while the run step&#39;s status is &#x60;in_progress&#x60;.
 */

#ifndef RunStepCompletionUsage_H_
#define RunStepCompletionUsage_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Usage statistics related to the run step. This value will be &#x60;null&#x60; while the run step&#39;s status is &#x60;in_progress&#x60;.
/// </summary>
class  RunStepCompletionUsage 
{
public:
    RunStepCompletionUsage() = default;
    explicit RunStepCompletionUsage(boost::property_tree::ptree const& pt);
    virtual ~RunStepCompletionUsage() = default;

    RunStepCompletionUsage(const RunStepCompletionUsage& other) = default; // copy constructor
    RunStepCompletionUsage(RunStepCompletionUsage&& other) noexcept = default; // move constructor

    RunStepCompletionUsage& operator=(const RunStepCompletionUsage& other) = default; // copy assignment
    RunStepCompletionUsage& operator=(RunStepCompletionUsage&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// RunStepCompletionUsage members

    /// <summary>
    /// Number of completion tokens used over the course of the run step.
    /// </summary>
    int32_t getCompletionTokens() const;
    void setCompletionTokens(int32_t value);

    /// <summary>
    /// Number of prompt tokens used over the course of the run step.
    /// </summary>
    int32_t getPromptTokens() const;
    void setPromptTokens(int32_t value);

    /// <summary>
    /// Total number of tokens used (prompt + completion).
    /// </summary>
    int32_t getTotalTokens() const;
    void setTotalTokens(int32_t value);

protected:
    int32_t m_Completion_tokens = 0;
    int32_t m_Prompt_tokens = 0;
    int32_t m_Total_tokens = 0;
};

std::vector<RunStepCompletionUsage> createRunStepCompletionUsageVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<RunStepCompletionUsage>(const RunStepCompletionUsage& val) {
    return val.toPropertyTree();
}

template<>
inline RunStepCompletionUsage fromPt<RunStepCompletionUsage>(const boost::property_tree::ptree& pt) {
    RunStepCompletionUsage ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* RunStepCompletionUsage_H_ */
