/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RunStepDetailsToolCallsCodeObject_code_interpreter.h
 *
 * The Code Interpreter tool call definition.
 */

#ifndef RunStepDetailsToolCallsCodeObject_code_interpreter_H_
#define RunStepDetailsToolCallsCodeObject_code_interpreter_H_



#include <string>
#include "RunStepDetailsToolCallsCodeObject_code_interpreter_outputs_inner.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// The Code Interpreter tool call definition.
/// </summary>
class  RunStepDetailsToolCallsCodeObject_code_interpreter 
{
public:
    RunStepDetailsToolCallsCodeObject_code_interpreter() = default;
    explicit RunStepDetailsToolCallsCodeObject_code_interpreter(boost::property_tree::ptree const& pt);
    virtual ~RunStepDetailsToolCallsCodeObject_code_interpreter() = default;

    RunStepDetailsToolCallsCodeObject_code_interpreter(const RunStepDetailsToolCallsCodeObject_code_interpreter& other) = default; // copy constructor
    RunStepDetailsToolCallsCodeObject_code_interpreter(RunStepDetailsToolCallsCodeObject_code_interpreter&& other) noexcept = default; // move constructor

    RunStepDetailsToolCallsCodeObject_code_interpreter& operator=(const RunStepDetailsToolCallsCodeObject_code_interpreter& other) = default; // copy assignment
    RunStepDetailsToolCallsCodeObject_code_interpreter& operator=(RunStepDetailsToolCallsCodeObject_code_interpreter&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// RunStepDetailsToolCallsCodeObject_code_interpreter members

    /// <summary>
    /// The input to the Code Interpreter tool call.
    /// </summary>
    std::string getInput() const;
    void setInput(std::string value);

    /// <summary>
    /// The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (&#x60;logs&#x60;) or images (&#x60;image&#x60;). Each of these are represented by a different object type.
    /// </summary>
    std::vector<RunStepDetailsToolCallsCodeObject_code_interpreter_outputs_inner> getOutputs() const;
    void setOutputs(std::vector<RunStepDetailsToolCallsCodeObject_code_interpreter_outputs_inner> value);

protected:
    std::string m_Input = "";
    std::vector<RunStepDetailsToolCallsCodeObject_code_interpreter_outputs_inner> m_Outputs;
};

std::vector<RunStepDetailsToolCallsCodeObject_code_interpreter> createRunStepDetailsToolCallsCodeObject_code_interpreterVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<RunStepDetailsToolCallsCodeObject_code_interpreter>(const RunStepDetailsToolCallsCodeObject_code_interpreter& val) {
    return val.toPropertyTree();
}

template<>
inline RunStepDetailsToolCallsCodeObject_code_interpreter fromPt<RunStepDetailsToolCallsCodeObject_code_interpreter>(const boost::property_tree::ptree& pt) {
    RunStepDetailsToolCallsCodeObject_code_interpreter ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* RunStepDetailsToolCallsCodeObject_code_interpreter_H_ */
