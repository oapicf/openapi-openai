/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RunStepObject.h
 *
 * Represents a step in execution of a run. 
 */

#ifndef RunStepObject_H_
#define RunStepObject_H_



#include "RunStepObject_last_error.h"
#include <string>
#include "RunStepObject_step_details.h"
#include "RunStepCompletionUsage.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a step in execution of a run. 
/// </summary>
class  RunStepObject 
{
public:
    RunStepObject() = default;
    explicit RunStepObject(boost::property_tree::ptree const& pt);
    virtual ~RunStepObject() = default;

    RunStepObject(const RunStepObject& other) = default; // copy constructor
    RunStepObject(RunStepObject&& other) noexcept = default; // move constructor

    RunStepObject& operator=(const RunStepObject& other) = default; // copy assignment
    RunStepObject& operator=(RunStepObject&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// RunStepObject members

    /// <summary>
    /// The identifier of the run step, which can be referenced in API endpoints.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// The object type, which is always &#x60;thread.run.step&#x60;.
    /// </summary>
    std::string getObject() const;
    void setObject(std::string value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the run step was created.
    /// </summary>
    int32_t getCreatedAt() const;
    void setCreatedAt(int32_t value);

    /// <summary>
    /// The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
    /// </summary>
    std::string getAssistantId() const;
    void setAssistantId(std::string value);

    /// <summary>
    /// The ID of the [thread](/docs/api-reference/threads) that was run.
    /// </summary>
    std::string getThreadId() const;
    void setThreadId(std::string value);

    /// <summary>
    /// The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
    /// </summary>
    std::string getRunId() const;
    void setRunId(std::string value);

    /// <summary>
    /// The type of run step, which can be either &#x60;message_creation&#x60; or &#x60;tool_calls&#x60;.
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// The status of the run step, which can be either &#x60;in_progress&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string value);

    /// <summary>
    /// 
    /// </summary>
    RunStepObject_step_details getStepDetails() const;
    void setStepDetails(RunStepObject_step_details value);

    /// <summary>
    /// 
    /// </summary>
    RunStepObject_last_error getLastError() const;
    void setLastError(RunStepObject_last_error value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
    /// </summary>
    int32_t getExpiredAt() const;
    void setExpiredAt(int32_t value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the run step was cancelled.
    /// </summary>
    int32_t getCancelledAt() const;
    void setCancelledAt(int32_t value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the run step failed.
    /// </summary>
    int32_t getFailedAt() const;
    void setFailedAt(int32_t value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the run step completed.
    /// </summary>
    int32_t getCompletedAt() const;
    void setCompletedAt(int32_t value);

    /// <summary>
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    /// </summary>
    std::string getMetadata() const;
    void setMetadata(std::string value);

    /// <summary>
    /// 
    /// </summary>
    RunStepCompletionUsage getUsage() const;
    void setUsage(RunStepCompletionUsage value);

protected:
    std::string m_Id = "";
    std::string m_object = "";
    int32_t m_Created_at = 0;
    std::string m_Assistant_id = "";
    std::string m_Thread_id = "";
    std::string m_Run_id = "";
    std::string m_Type = "";
    std::string m_Status = "";
    RunStepObject_step_details m_Step_details;
    RunStepObject_last_error m_Last_error;
    int32_t m_Expired_at = 0;
    int32_t m_Cancelled_at = 0;
    int32_t m_Failed_at = 0;
    int32_t m_Completed_at = 0;
    std::string m_Metadata = std::string{};
    RunStepCompletionUsage m_Usage;
};

std::vector<RunStepObject> createRunStepObjectVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<RunStepObject>(const RunStepObject& val) {
    return val.toPropertyTree();
}

template<>
inline RunStepObject fromPt<RunStepObject>(const boost::property_tree::ptree& pt) {
    RunStepObject ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* RunStepObject_H_ */
