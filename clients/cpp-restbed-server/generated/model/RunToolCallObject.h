/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RunToolCallObject.h
 *
 * Tool call objects
 */

#ifndef RunToolCallObject_H_
#define RunToolCallObject_H_



#include "RunToolCallObject_function.h"
#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Tool call objects
/// </summary>
class  RunToolCallObject 
{
public:
    RunToolCallObject() = default;
    explicit RunToolCallObject(boost::property_tree::ptree const& pt);
    virtual ~RunToolCallObject() = default;

    RunToolCallObject(const RunToolCallObject& other) = default; // copy constructor
    RunToolCallObject(RunToolCallObject&& other) noexcept = default; // move constructor

    RunToolCallObject& operator=(const RunToolCallObject& other) = default; // copy assignment
    RunToolCallObject& operator=(RunToolCallObject&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// RunToolCallObject members

    /// <summary>
    /// The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// The type of tool call the output is required for. For now, this is always &#x60;function&#x60;.
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    RunToolCallObject_function getFunction() const;
    void setFunction(RunToolCallObject_function value);

protected:
    std::string m_Id = "";
    std::string m_Type = "";
    RunToolCallObject_function m_Function;
};

std::vector<RunToolCallObject> createRunToolCallObjectVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<RunToolCallObject>(const RunToolCallObject& val) {
    return val.toPropertyTree();
}

template<>
inline RunToolCallObject fromPt<RunToolCallObject>(const boost::property_tree::ptree& pt) {
    RunToolCallObject ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* RunToolCallObject_H_ */
