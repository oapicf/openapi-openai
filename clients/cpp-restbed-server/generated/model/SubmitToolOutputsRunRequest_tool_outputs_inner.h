/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SubmitToolOutputsRunRequest_tool_outputs_inner.h
 *
 * 
 */

#ifndef SubmitToolOutputsRunRequest_tool_outputs_inner_H_
#define SubmitToolOutputsRunRequest_tool_outputs_inner_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  SubmitToolOutputsRunRequest_tool_outputs_inner 
{
public:
    SubmitToolOutputsRunRequest_tool_outputs_inner() = default;
    explicit SubmitToolOutputsRunRequest_tool_outputs_inner(boost::property_tree::ptree const& pt);
    virtual ~SubmitToolOutputsRunRequest_tool_outputs_inner() = default;

    SubmitToolOutputsRunRequest_tool_outputs_inner(const SubmitToolOutputsRunRequest_tool_outputs_inner& other) = default; // copy constructor
    SubmitToolOutputsRunRequest_tool_outputs_inner(SubmitToolOutputsRunRequest_tool_outputs_inner&& other) noexcept = default; // move constructor

    SubmitToolOutputsRunRequest_tool_outputs_inner& operator=(const SubmitToolOutputsRunRequest_tool_outputs_inner& other) = default; // copy assignment
    SubmitToolOutputsRunRequest_tool_outputs_inner& operator=(SubmitToolOutputsRunRequest_tool_outputs_inner&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// SubmitToolOutputsRunRequest_tool_outputs_inner members

    /// <summary>
    /// The ID of the tool call in the &#x60;required_action&#x60; object within the run object the output is being submitted for.
    /// </summary>
    std::string getToolCallId() const;
    void setToolCallId(std::string value);

    /// <summary>
    /// The output of the tool call to be submitted to continue the run.
    /// </summary>
    std::string getOutput() const;
    void setOutput(std::string value);

protected:
    std::string m_Tool_call_id = "";
    std::string m_Output = "";
};

std::vector<SubmitToolOutputsRunRequest_tool_outputs_inner> createSubmitToolOutputsRunRequest_tool_outputs_innerVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<SubmitToolOutputsRunRequest_tool_outputs_inner>(const SubmitToolOutputsRunRequest_tool_outputs_inner& val) {
    return val.toPropertyTree();
}

template<>
inline SubmitToolOutputsRunRequest_tool_outputs_inner fromPt<SubmitToolOutputsRunRequest_tool_outputs_inner>(const boost::property_tree::ptree& pt) {
    SubmitToolOutputsRunRequest_tool_outputs_inner ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* SubmitToolOutputsRunRequest_tool_outputs_inner_H_ */
