/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TranscriptionSegment.h
 *
 * 
 */

#ifndef TranscriptionSegment_H_
#define TranscriptionSegment_H_



#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  TranscriptionSegment 
{
public:
    TranscriptionSegment() = default;
    explicit TranscriptionSegment(boost::property_tree::ptree const& pt);
    virtual ~TranscriptionSegment() = default;

    TranscriptionSegment(const TranscriptionSegment& other) = default; // copy constructor
    TranscriptionSegment(TranscriptionSegment&& other) noexcept = default; // move constructor

    TranscriptionSegment& operator=(const TranscriptionSegment& other) = default; // copy assignment
    TranscriptionSegment& operator=(TranscriptionSegment&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// TranscriptionSegment members

    /// <summary>
    /// Unique identifier of the segment.
    /// </summary>
    int32_t getId() const;
    void setId(int32_t value);

    /// <summary>
    /// Seek offset of the segment.
    /// </summary>
    int32_t getSeek() const;
    void setSeek(int32_t value);

    /// <summary>
    /// Start time of the segment in seconds.
    /// </summary>
    float getStart() const;
    void setStart(float value);

    /// <summary>
    /// End time of the segment in seconds.
    /// </summary>
    float getEnd() const;
    void setEnd(float value);

    /// <summary>
    /// Text content of the segment.
    /// </summary>
    std::string getText() const;
    void setText(std::string value);

    /// <summary>
    /// Array of token IDs for the text content.
    /// </summary>
    std::vector<int32_t> getTokens() const;
    void setTokens(std::vector<int32_t> value);

    /// <summary>
    /// Temperature parameter used for generating the segment.
    /// </summary>
    float getTemperature() const;
    void setTemperature(float value);

    /// <summary>
    /// Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
    /// </summary>
    float getAvgLogprob() const;
    void setAvgLogprob(float value);

    /// <summary>
    /// Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
    /// </summary>
    float getCompressionRatio() const;
    void setCompressionRatio(float value);

    /// <summary>
    /// Probability of no speech in the segment. If the value is higher than 1.0 and the &#x60;avg_logprob&#x60; is below -1, consider this segment silent.
    /// </summary>
    float getNoSpeechProb() const;
    void setNoSpeechProb(float value);

protected:
    int32_t m_Id = 0;
    int32_t m_Seek = 0;
    float m_Start = 0.0f;
    float m_End = 0.0f;
    std::string m_Text = "";
    std::vector<int32_t> m_Tokens;
    float m_Temperature = 0.0f;
    float m_Avg_logprob = 0.0f;
    float m_Compression_ratio = 0.0f;
    float m_No_speech_prob = 0.0f;
};

std::vector<TranscriptionSegment> createTranscriptionSegmentVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<TranscriptionSegment>(const TranscriptionSegment& val) {
    return val.toPropertyTree();
}

template<>
inline TranscriptionSegment fromPt<TranscriptionSegment>(const boost::property_tree::ptree& pt) {
    TranscriptionSegment ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* TranscriptionSegment_H_ */
