/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TranscriptionWord.h
 *
 * 
 */

#ifndef TranscriptionWord_H_
#define TranscriptionWord_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  TranscriptionWord 
{
public:
    TranscriptionWord() = default;
    explicit TranscriptionWord(boost::property_tree::ptree const& pt);
    virtual ~TranscriptionWord() = default;

    TranscriptionWord(const TranscriptionWord& other) = default; // copy constructor
    TranscriptionWord(TranscriptionWord&& other) noexcept = default; // move constructor

    TranscriptionWord& operator=(const TranscriptionWord& other) = default; // copy assignment
    TranscriptionWord& operator=(TranscriptionWord&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// TranscriptionWord members

    /// <summary>
    /// The text content of the word.
    /// </summary>
    std::string getWord() const;
    void setWord(std::string value);

    /// <summary>
    /// Start time of the word in seconds.
    /// </summary>
    float getStart() const;
    void setStart(float value);

    /// <summary>
    /// End time of the word in seconds.
    /// </summary>
    float getEnd() const;
    void setEnd(float value);

protected:
    std::string m_Word = "";
    float m_Start = 0.0f;
    float m_End = 0.0f;
};

std::vector<TranscriptionWord> createTranscriptionWordVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<TranscriptionWord>(const TranscriptionWord& val) {
    return val.toPropertyTree();
}

template<>
inline TranscriptionWord fromPt<TranscriptionWord>(const boost::property_tree::ptree& pt) {
    TranscriptionWord ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* TranscriptionWord_H_ */
