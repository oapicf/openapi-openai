/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TruncationObject.h
 *
 * 
 */

#ifndef TruncationObject_H_
#define TruncationObject_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  TruncationObject 
{
public:
    TruncationObject() = default;
    explicit TruncationObject(boost::property_tree::ptree const& pt);
    virtual ~TruncationObject() = default;

    TruncationObject(const TruncationObject& other) = default; // copy constructor
    TruncationObject(TruncationObject&& other) noexcept = default; // move constructor

    TruncationObject& operator=(const TruncationObject& other) = default; // copy assignment
    TruncationObject& operator=(TruncationObject&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// TruncationObject members

    /// <summary>
    /// The truncation strategy to use for the thread. The default is &#x60;auto&#x60;. If set to &#x60;last_messages&#x60;, the thread will be truncated to the n most recent messages in the thread. When set to &#x60;auto&#x60;, messages in the middle of the thread will be dropped to fit the context length of the model, &#x60;max_prompt_tokens&#x60;.
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// The number of most recent messages from the thread when constructing the context for the run.
    /// </summary>
    int32_t getLastMessages() const;
    void setLastMessages(int32_t value);

protected:
    std::string m_Type = "";
    int32_t m_Last_messages = 0;
};

std::vector<TruncationObject> createTruncationObjectVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<TruncationObject>(const TruncationObject& val) {
    return val.toPropertyTree();
}

template<>
inline TruncationObject fromPt<TruncationObject>(const boost::property_tree::ptree& pt) {
    TruncationObject ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* TruncationObject_H_ */
