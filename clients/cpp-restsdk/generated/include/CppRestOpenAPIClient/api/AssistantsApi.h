/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AssistantsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_AssistantsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_AssistantsApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/AssistantFileObject.h"
#include "CppRestOpenAPIClient/model/AssistantObject.h"
#include "CppRestOpenAPIClient/model/CreateAssistantFileRequest.h"
#include "CppRestOpenAPIClient/model/CreateAssistantRequest.h"
#include "CppRestOpenAPIClient/model/CreateMessageRequest.h"
#include "CppRestOpenAPIClient/model/CreateRunRequest.h"
#include "CppRestOpenAPIClient/model/CreateThreadAndRunRequest.h"
#include "CppRestOpenAPIClient/model/CreateThreadRequest.h"
#include "CppRestOpenAPIClient/model/DeleteAssistantFileResponse.h"
#include "CppRestOpenAPIClient/model/DeleteAssistantResponse.h"
#include "CppRestOpenAPIClient/model/DeleteThreadResponse.h"
#include "CppRestOpenAPIClient/model/ListAssistantFilesResponse.h"
#include "CppRestOpenAPIClient/model/ListAssistantsResponse.h"
#include "CppRestOpenAPIClient/model/ListMessageFilesResponse.h"
#include "CppRestOpenAPIClient/model/ListMessagesResponse.h"
#include "CppRestOpenAPIClient/model/ListRunStepsResponse.h"
#include "CppRestOpenAPIClient/model/ListRunsResponse.h"
#include "CppRestOpenAPIClient/model/MessageFileObject.h"
#include "CppRestOpenAPIClient/model/MessageObject.h"
#include "CppRestOpenAPIClient/model/ModifyAssistantRequest.h"
#include "CppRestOpenAPIClient/model/ModifyMessageRequest.h"
#include "CppRestOpenAPIClient/model/ModifyRunRequest.h"
#include "CppRestOpenAPIClient/model/ModifyThreadRequest.h"
#include "CppRestOpenAPIClient/model/RunObject.h"
#include "CppRestOpenAPIClient/model/RunStepObject.h"
#include "CppRestOpenAPIClient/model/SubmitToolOutputsRunRequest.h"
#include "CppRestOpenAPIClient/model/ThreadObject.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  AssistantsApi 
{
public:

    explicit AssistantsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~AssistantsApi();

    /// <summary>
    /// Cancels a run that is &#x60;in_progress&#x60;.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread to which this run belongs.</param>
    /// <param name="runId">The ID of the run to cancel.</param>
    pplx::task<std::shared_ptr<RunObject>> cancelRun(
        utility::string_t threadId,
        utility::string_t runId
    ) const;
    /// <summary>
    /// Create an assistant with a model and instructions.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createAssistantRequest"></param>
    pplx::task<std::shared_ptr<AssistantObject>> createAssistant(
        std::shared_ptr<CreateAssistantRequest> createAssistantRequest
    ) const;
    /// <summary>
    /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
    /// <param name="createAssistantFileRequest"></param>
    pplx::task<std::shared_ptr<AssistantFileObject>> createAssistantFile(
        utility::string_t assistantId,
        std::shared_ptr<CreateAssistantFileRequest> createAssistantFileRequest
    ) const;
    /// <summary>
    /// Create a message.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
    /// <param name="createMessageRequest"></param>
    pplx::task<std::shared_ptr<MessageObject>> createMessage(
        utility::string_t threadId,
        std::shared_ptr<CreateMessageRequest> createMessageRequest
    ) const;
    /// <summary>
    /// Create a run.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread to run.</param>
    /// <param name="createRunRequest"></param>
    pplx::task<std::shared_ptr<RunObject>> createRun(
        utility::string_t threadId,
        std::shared_ptr<CreateRunRequest> createRunRequest
    ) const;
    /// <summary>
    /// Create a thread.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createThreadRequest"> (optional)</param>
    pplx::task<std::shared_ptr<ThreadObject>> createThread(
        boost::optional<std::shared_ptr<CreateThreadRequest>> createThreadRequest
    ) const;
    /// <summary>
    /// Create a thread and run it in one request.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createThreadAndRunRequest"></param>
    pplx::task<std::shared_ptr<RunObject>> createThreadAndRun(
        std::shared_ptr<CreateThreadAndRunRequest> createThreadAndRunRequest
    ) const;
    /// <summary>
    /// Delete an assistant.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="assistantId">The ID of the assistant to delete.</param>
    pplx::task<std::shared_ptr<DeleteAssistantResponse>> deleteAssistant(
        utility::string_t assistantId
    ) const;
    /// <summary>
    /// Delete an assistant file.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
    /// <param name="fileId">The ID of the file to delete.</param>
    pplx::task<std::shared_ptr<DeleteAssistantFileResponse>> deleteAssistantFile(
        utility::string_t assistantId,
        utility::string_t fileId
    ) const;
    /// <summary>
    /// Delete a thread.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread to delete.</param>
    pplx::task<std::shared_ptr<DeleteThreadResponse>> deleteThread(
        utility::string_t threadId
    ) const;
    /// <summary>
    /// Retrieves an assistant.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="assistantId">The ID of the assistant to retrieve.</param>
    pplx::task<std::shared_ptr<AssistantObject>> getAssistant(
        utility::string_t assistantId
    ) const;
    /// <summary>
    /// Retrieves an AssistantFile.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
    /// <param name="fileId">The ID of the file we&#39;re getting.</param>
    pplx::task<std::shared_ptr<AssistantFileObject>> getAssistantFile(
        utility::string_t assistantId,
        utility::string_t fileId
    ) const;
    /// <summary>
    /// Retrieve a message.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
    /// <param name="messageId">The ID of the message to retrieve.</param>
    pplx::task<std::shared_ptr<MessageObject>> getMessage(
        utility::string_t threadId,
        utility::string_t messageId
    ) const;
    /// <summary>
    /// Retrieves a message file.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
    /// <param name="messageId">The ID of the message the file belongs to.</param>
    /// <param name="fileId">The ID of the file being retrieved.</param>
    pplx::task<std::shared_ptr<MessageFileObject>> getMessageFile(
        utility::string_t threadId,
        utility::string_t messageId,
        utility::string_t fileId
    ) const;
    /// <summary>
    /// Retrieves a run.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
    /// <param name="runId">The ID of the run to retrieve.</param>
    pplx::task<std::shared_ptr<RunObject>> getRun(
        utility::string_t threadId,
        utility::string_t runId
    ) const;
    /// <summary>
    /// Retrieves a run step.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
    /// <param name="runId">The ID of the run to which the run step belongs.</param>
    /// <param name="stepId">The ID of the run step to retrieve.</param>
    pplx::task<std::shared_ptr<RunStepObject>> getRunStep(
        utility::string_t threadId,
        utility::string_t runId,
        utility::string_t stepId
    ) const;
    /// <summary>
    /// Retrieves a thread.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread to retrieve.</param>
    pplx::task<std::shared_ptr<ThreadObject>> getThread(
        utility::string_t threadId
    ) const;
    /// <summary>
    /// Returns a list of assistant files.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
    /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 0)</param>
    /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ListAssistantFilesResponse>> listAssistantFiles(
        utility::string_t assistantId,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> order,
        boost::optional<utility::string_t> after,
        boost::optional<utility::string_t> before
    ) const;
    /// <summary>
    /// Returns a list of assistants.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 0)</param>
    /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ListAssistantsResponse>> listAssistants(
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> order,
        boost::optional<utility::string_t> after,
        boost::optional<utility::string_t> before
    ) const;
    /// <summary>
    /// Returns a list of message files.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
    /// <param name="messageId">The ID of the message that the files belongs to.</param>
    /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 0)</param>
    /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ListMessageFilesResponse>> listMessageFiles(
        utility::string_t threadId,
        utility::string_t messageId,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> order,
        boost::optional<utility::string_t> after,
        boost::optional<utility::string_t> before
    ) const;
    /// <summary>
    /// Returns a list of messages for a given thread.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
    /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 0)</param>
    /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="runId">Filter messages by the run ID that generated them.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ListMessagesResponse>> listMessages(
        utility::string_t threadId,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> order,
        boost::optional<utility::string_t> after,
        boost::optional<utility::string_t> before,
        boost::optional<utility::string_t> runId
    ) const;
    /// <summary>
    /// Returns a list of run steps belonging to a run.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
    /// <param name="runId">The ID of the run the run steps belong to.</param>
    /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 0)</param>
    /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ListRunStepsResponse>> listRunSteps(
        utility::string_t threadId,
        utility::string_t runId,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> order,
        boost::optional<utility::string_t> after,
        boost::optional<utility::string_t> before
    ) const;
    /// <summary>
    /// Returns a list of runs belonging to a thread.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread the run belongs to.</param>
    /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 0)</param>
    /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ListRunsResponse>> listRuns(
        utility::string_t threadId,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> order,
        boost::optional<utility::string_t> after,
        boost::optional<utility::string_t> before
    ) const;
    /// <summary>
    /// Modifies an assistant.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="assistantId">The ID of the assistant to modify.</param>
    /// <param name="modifyAssistantRequest"></param>
    pplx::task<std::shared_ptr<AssistantObject>> modifyAssistant(
        utility::string_t assistantId,
        std::shared_ptr<ModifyAssistantRequest> modifyAssistantRequest
    ) const;
    /// <summary>
    /// Modifies a message.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread to which this message belongs.</param>
    /// <param name="messageId">The ID of the message to modify.</param>
    /// <param name="modifyMessageRequest"></param>
    pplx::task<std::shared_ptr<MessageObject>> modifyMessage(
        utility::string_t threadId,
        utility::string_t messageId,
        std::shared_ptr<ModifyMessageRequest> modifyMessageRequest
    ) const;
    /// <summary>
    /// Modifies a run.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
    /// <param name="runId">The ID of the run to modify.</param>
    /// <param name="modifyRunRequest"></param>
    pplx::task<std::shared_ptr<RunObject>> modifyRun(
        utility::string_t threadId,
        utility::string_t runId,
        std::shared_ptr<ModifyRunRequest> modifyRunRequest
    ) const;
    /// <summary>
    /// Modifies a thread.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
    /// <param name="modifyThreadRequest"></param>
    pplx::task<std::shared_ptr<ThreadObject>> modifyThread(
        utility::string_t threadId,
        std::shared_ptr<ModifyThreadRequest> modifyThreadRequest
    ) const;
    /// <summary>
    /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
    /// <param name="runId">The ID of the run that requires the tool output submission.</param>
    /// <param name="submitToolOutputsRunRequest"></param>
    pplx::task<std::shared_ptr<RunObject>> submitToolOuputsToRun(
        utility::string_t threadId,
        utility::string_t runId,
        std::shared_ptr<SubmitToolOutputsRunRequest> submitToolOutputsRunRequest
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_AssistantsApi_H_ */

