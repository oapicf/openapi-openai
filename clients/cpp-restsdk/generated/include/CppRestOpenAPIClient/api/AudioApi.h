/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AudioApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_AudioApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_AudioApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/CreateSpeechRequest.h"
#include "CppRestOpenAPIClient/model/CreateTranscriptionRequest_model.h"
#include "CppRestOpenAPIClient/model/CreateTranscription_200_response.h"
#include "CppRestOpenAPIClient/model/CreateTranslation_200_response.h"
#include "CppRestOpenAPIClient/HttpContent.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  AudioApi 
{
public:

    explicit AudioApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~AudioApi();

    /// <summary>
    /// Generates audio from the input text.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createSpeechRequest"></param>
    pplx::task<std::shared_ptr<HttpContent>> createSpeech(
        std::shared_ptr<CreateSpeechRequest> createSpeechRequest
    ) const;
    /// <summary>
    /// Transcribes audio into the input language.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="file">The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. </param>
    /// <param name="model"></param>
    /// <param name="language">The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="prompt">An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="responseFormat">The format of the transcript output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="temperature">The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.  (optional, default to 0.0)</param>
    /// <param name="timestampGranularitiesLeft_Square_BracketRight_Square_Bracket">The timestamp granularities to populate for this transcription. &#x60;response_format&#x60; must be set &#x60;verbose_json&#x60; to use timestamp granularities. Either or both of these options are supported: &#x60;word&#x60;, or &#x60;segment&#x60;. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<CreateTranscription_200_response>> createTranscription(
        std::shared_ptr<HttpContent> file,
        std::shared_ptr<CreateTranscriptionRequest_model> model,
        boost::optional<utility::string_t> language,
        boost::optional<utility::string_t> prompt,
        boost::optional<utility::string_t> responseFormat,
        boost::optional<double> temperature,
        boost::optional<std::vector<utility::string_t>> timestampGranularitiesLeft_Square_BracketRight_Square_Bracket
    ) const;
    /// <summary>
    /// Translates audio into English.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="file">The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. </param>
    /// <param name="model"></param>
    /// <param name="prompt">An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="responseFormat">The format of the transcript output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="temperature">The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.  (optional, default to 0.0)</param>
    pplx::task<std::shared_ptr<CreateTranslation_200_response>> createTranslation(
        std::shared_ptr<HttpContent> file,
        std::shared_ptr<CreateTranscriptionRequest_model> model,
        boost::optional<utility::string_t> prompt,
        boost::optional<utility::string_t> responseFormat,
        boost::optional<double> temperature
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_AudioApi_H_ */

