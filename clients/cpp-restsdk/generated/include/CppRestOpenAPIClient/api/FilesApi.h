/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FilesApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_FilesApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_FilesApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/DeleteFileResponse.h"
#include "CppRestOpenAPIClient/HttpContent.h"
#include "CppRestOpenAPIClient/model/ListFilesResponse.h"
#include "CppRestOpenAPIClient/model/OpenAIFile.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  FilesApi 
{
public:

    explicit FilesApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~FilesApi();

    /// <summary>
    /// Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports &#x60;.jsonl&#x60; files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="file">The File object (not file name) to be uploaded. </param>
    /// <param name="purpose">The intended purpose of the uploaded file.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tuning) and \\\&quot;assistants\\\&quot; for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning. </param>
    pplx::task<std::shared_ptr<OpenAIFile>> createFile(
        std::shared_ptr<HttpContent> file,
        utility::string_t purpose
    ) const;
    /// <summary>
    /// Delete a file.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fileId">The ID of the file to use for this request.</param>
    pplx::task<std::shared_ptr<DeleteFileResponse>> deleteFile(
        utility::string_t fileId
    ) const;
    /// <summary>
    /// Returns the contents of the specified file.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fileId">The ID of the file to use for this request.</param>
    pplx::task<utility::string_t> downloadFile(
        utility::string_t fileId
    ) const;
    /// <summary>
    /// Returns a list of files that belong to the user&#39;s organization.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="purpose">Only return files with the given purpose. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ListFilesResponse>> listFiles(
        boost::optional<utility::string_t> purpose
    ) const;
    /// <summary>
    /// Returns information about a specific file.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fileId">The ID of the file to use for this request.</param>
    pplx::task<std::shared_ptr<OpenAIFile>> retrieveFile(
        utility::string_t fileId
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_FilesApi_H_ */

