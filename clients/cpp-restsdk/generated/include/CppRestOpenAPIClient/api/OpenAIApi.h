/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OpenAIApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_OpenAIApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_OpenAIApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/CreateChatCompletionRequest.h"
#include "CppRestOpenAPIClient/model/CreateChatCompletionResponse.h"
#include "CppRestOpenAPIClient/model/CreateCompletionRequest.h"
#include "CppRestOpenAPIClient/model/CreateCompletionResponse.h"
#include "CppRestOpenAPIClient/model/CreateEditRequest.h"
#include "CppRestOpenAPIClient/model/CreateEditResponse.h"
#include "CppRestOpenAPIClient/model/CreateEmbeddingRequest.h"
#include "CppRestOpenAPIClient/model/CreateEmbeddingResponse.h"
#include "CppRestOpenAPIClient/model/CreateFineTuneRequest.h"
#include "CppRestOpenAPIClient/model/CreateImageRequest.h"
#include "CppRestOpenAPIClient/model/CreateModerationRequest.h"
#include "CppRestOpenAPIClient/model/CreateModerationResponse.h"
#include "CppRestOpenAPIClient/model/CreateTranscriptionRequest_model.h"
#include "CppRestOpenAPIClient/model/CreateTranscriptionResponse.h"
#include "CppRestOpenAPIClient/model/CreateTranslationResponse.h"
#include "CppRestOpenAPIClient/model/DeleteFileResponse.h"
#include "CppRestOpenAPIClient/model/DeleteModelResponse.h"
#include "CppRestOpenAPIClient/model/FineTune.h"
#include "CppRestOpenAPIClient/HttpContent.h"
#include "CppRestOpenAPIClient/model/ImagesResponse.h"
#include "CppRestOpenAPIClient/model/ListFilesResponse.h"
#include "CppRestOpenAPIClient/model/ListFineTuneEventsResponse.h"
#include "CppRestOpenAPIClient/model/ListFineTunesResponse.h"
#include "CppRestOpenAPIClient/model/ListModelsResponse.h"
#include "CppRestOpenAPIClient/model/Model.h"
#include "CppRestOpenAPIClient/model/OpenAIFile.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  OpenAIApi 
{
public:

    explicit OpenAIApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~OpenAIApi();

    /// <summary>
    /// Immediately cancel a fine-tune job. 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fineTuneId">The ID of the fine-tune job to cancel </param>
    pplx::task<std::shared_ptr<FineTune>> cancelFineTune(
        utility::string_t fineTuneId
    ) const;
    /// <summary>
    /// Creates a model response for the given chat conversation.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createChatCompletionRequest"></param>
    pplx::task<std::shared_ptr<CreateChatCompletionResponse>> createChatCompletion(
        std::shared_ptr<CreateChatCompletionRequest> createChatCompletionRequest
    ) const;
    /// <summary>
    /// Creates a completion for the provided prompt and parameters.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createCompletionRequest"></param>
    pplx::task<std::shared_ptr<CreateCompletionResponse>> createCompletion(
        std::shared_ptr<CreateCompletionRequest> createCompletionRequest
    ) const;
    /// <summary>
    /// Creates a new edit for the provided input, instruction, and parameters.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createEditRequest"></param>
    pplx::task<std::shared_ptr<CreateEditResponse>> createEdit(
        std::shared_ptr<CreateEditRequest> createEditRequest
    ) const;
    /// <summary>
    /// Creates an embedding vector representing the input text.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createEmbeddingRequest"></param>
    pplx::task<std::shared_ptr<CreateEmbeddingResponse>> createEmbedding(
        std::shared_ptr<CreateEmbeddingRequest> createEmbeddingRequest
    ) const;
    /// <summary>
    /// Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="file">Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\&quot;fine-tune\\\&quot;, each line is a JSON record with \\\&quot;prompt\\\&quot; and \\\&quot;completion\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data). </param>
    /// <param name="purpose">The intended purpose of the uploaded documents.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. </param>
    pplx::task<std::shared_ptr<OpenAIFile>> createFile(
        std::shared_ptr<HttpContent> file,
        utility::string_t purpose
    ) const;
    /// <summary>
    /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createFineTuneRequest"></param>
    pplx::task<std::shared_ptr<FineTune>> createFineTune(
        std::shared_ptr<CreateFineTuneRequest> createFineTuneRequest
    ) const;
    /// <summary>
    /// Creates an image given a prompt.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createImageRequest"></param>
    pplx::task<std::shared_ptr<ImagesResponse>> createImage(
        std::shared_ptr<CreateImageRequest> createImageRequest
    ) const;
    /// <summary>
    /// Creates an edited or extended image given an original image and a prompt.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="image">The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.</param>
    /// <param name="prompt">A text description of the desired image(s). The maximum length is 1000 characters.</param>
    /// <param name="mask">An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="n">The number of images to generate. Must be between 1 and 10. (optional, default to 0)</param>
    /// <param name="size">The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="responseFormat">The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user">A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ImagesResponse>> createImageEdit(
        std::shared_ptr<HttpContent> image,
        utility::string_t prompt,
        boost::optional<std::shared_ptr<HttpContent>> mask,
        boost::optional<int32_t> n,
        boost::optional<utility::string_t> size,
        boost::optional<utility::string_t> responseFormat,
        boost::optional<utility::string_t> user
    ) const;
    /// <summary>
    /// Creates a variation of a given image.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="image">The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.</param>
    /// <param name="n">The number of images to generate. Must be between 1 and 10. (optional, default to 0)</param>
    /// <param name="size">The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="responseFormat">The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user">A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ImagesResponse>> createImageVariation(
        std::shared_ptr<HttpContent> image,
        boost::optional<int32_t> n,
        boost::optional<utility::string_t> size,
        boost::optional<utility::string_t> responseFormat,
        boost::optional<utility::string_t> user
    ) const;
    /// <summary>
    /// Classifies if text violates OpenAI&#39;s Content Policy
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createModerationRequest"></param>
    pplx::task<std::shared_ptr<CreateModerationResponse>> createModeration(
        std::shared_ptr<CreateModerationRequest> createModerationRequest
    ) const;
    /// <summary>
    /// Transcribes audio into the input language.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="file">The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. </param>
    /// <param name="model"></param>
    /// <param name="prompt">An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="responseFormat">The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="temperature">The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.  (optional, default to 0.0)</param>
    /// <param name="language">The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<CreateTranscriptionResponse>> createTranscription(
        std::shared_ptr<HttpContent> file,
        std::shared_ptr<CreateTranscriptionRequest_model> model,
        boost::optional<utility::string_t> prompt,
        boost::optional<utility::string_t> responseFormat,
        boost::optional<double> temperature,
        boost::optional<utility::string_t> language
    ) const;
    /// <summary>
    /// Translates audio into English.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="file">The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. </param>
    /// <param name="model"></param>
    /// <param name="prompt">An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="responseFormat">The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="temperature">The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.  (optional, default to 0.0)</param>
    pplx::task<std::shared_ptr<CreateTranslationResponse>> createTranslation(
        std::shared_ptr<HttpContent> file,
        std::shared_ptr<CreateTranscriptionRequest_model> model,
        boost::optional<utility::string_t> prompt,
        boost::optional<utility::string_t> responseFormat,
        boost::optional<double> temperature
    ) const;
    /// <summary>
    /// Delete a file.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fileId">The ID of the file to use for this request</param>
    pplx::task<std::shared_ptr<DeleteFileResponse>> deleteFile(
        utility::string_t fileId
    ) const;
    /// <summary>
    /// Delete a fine-tuned model. You must have the Owner role in your organization.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="model">The model to delete</param>
    pplx::task<std::shared_ptr<DeleteModelResponse>> deleteModel(
        utility::string_t model
    ) const;
    /// <summary>
    /// Returns the contents of the specified file
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fileId">The ID of the file to use for this request</param>
    pplx::task<utility::string_t> downloadFile(
        utility::string_t fileId
    ) const;
    /// <summary>
    /// Returns a list of files that belong to the user&#39;s organization.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<ListFilesResponse>> listFiles(
    ) const;
    /// <summary>
    /// Get fine-grained status updates for a fine-tune job. 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fineTuneId">The ID of the fine-tune job to get events for. </param>
    /// <param name="stream">Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.  (optional, default to false)</param>
    pplx::task<std::shared_ptr<ListFineTuneEventsResponse>> listFineTuneEvents(
        utility::string_t fineTuneId,
        boost::optional<bool> stream
    ) const;
    /// <summary>
    /// List your organization&#39;s fine-tuning jobs 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<ListFineTunesResponse>> listFineTunes(
    ) const;
    /// <summary>
    /// Lists the currently available models, and provides basic information about each one such as the owner and availability.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<ListModelsResponse>> listModels(
    ) const;
    /// <summary>
    /// Returns information about a specific file.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fileId">The ID of the file to use for this request</param>
    pplx::task<std::shared_ptr<OpenAIFile>> retrieveFile(
        utility::string_t fileId
    ) const;
    /// <summary>
    /// Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fineTuneId">The ID of the fine-tune job </param>
    pplx::task<std::shared_ptr<FineTune>> retrieveFineTune(
        utility::string_t fineTuneId
    ) const;
    /// <summary>
    /// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="model">The ID of the model to use for this request</param>
    pplx::task<std::shared_ptr<Model>> retrieveModel(
        utility::string_t model
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_OpenAIApi_H_ */

