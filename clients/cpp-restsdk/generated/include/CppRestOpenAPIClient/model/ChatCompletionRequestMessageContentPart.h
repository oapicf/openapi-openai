/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ChatCompletionRequestMessageContentPart.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ChatCompletionRequestMessageContentPart_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ChatCompletionRequestMessageContentPart_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/ChatCompletionRequestMessageContentPartImage.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/ChatCompletionRequestMessageContentPartText.h"
#include "CppRestOpenAPIClient/model/ChatCompletionRequestMessageContentPartImage_image_url.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class ChatCompletionRequestMessageContentPartImage_image_url;

/// <summary>
/// 
/// </summary>
class  ChatCompletionRequestMessageContentPart
    : public ModelBase
{
public:
    ChatCompletionRequestMessageContentPart();
    virtual ~ChatCompletionRequestMessageContentPart();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ChatCompletionRequestMessageContentPart members

    /// <summary>
    /// The type of the content part.
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// The text content.
    /// </summary>
    utility::string_t getText() const;
    bool textIsSet() const;
    void unsetText();

    void setText(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ChatCompletionRequestMessageContentPartImage_image_url> getImageUrl() const;
    bool imageUrlIsSet() const;
    void unsetImage_url();

    void setImageUrl(const std::shared_ptr<ChatCompletionRequestMessageContentPartImage_image_url>& value);


protected:
    utility::string_t m_Type;
    bool m_TypeIsSet;
    utility::string_t m_Text;
    bool m_TextIsSet;
    std::shared_ptr<ChatCompletionRequestMessageContentPartImage_image_url> m_Image_url;
    bool m_Image_urlIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ChatCompletionRequestMessageContentPart_H_ */
