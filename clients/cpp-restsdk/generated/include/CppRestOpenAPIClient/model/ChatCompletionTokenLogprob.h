/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ChatCompletionTokenLogprob.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ChatCompletionTokenLogprob_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ChatCompletionTokenLogprob_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/ChatCompletionTokenLogprob_top_logprobs_inner.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class ChatCompletionTokenLogprob_top_logprobs_inner;


/// <summary>
/// 
/// </summary>
class  ChatCompletionTokenLogprob
    : public ModelBase
{
public:
    ChatCompletionTokenLogprob();
    virtual ~ChatCompletionTokenLogprob();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ChatCompletionTokenLogprob members

    /// <summary>
    /// The token.
    /// </summary>
    utility::string_t getToken() const;
    bool tokenIsSet() const;
    void unsetToken();

    void setToken(const utility::string_t& value);

    /// <summary>
    /// The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value &#x60;-9999.0&#x60; is used to signify that the token is very unlikely.
    /// </summary>
    double getLogprob() const;
    bool logprobIsSet() const;
    void unsetLogprob();

    void setLogprob(double value);

    /// <summary>
    /// A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be &#x60;null&#x60; if there is no bytes representation for the token.
    /// </summary>
    std::vector<int32_t>& getBytes();
    bool bytesIsSet() const;
    void unsetBytes();

    void setBytes(std::vector<int32_t> value);

    /// <summary>
    /// List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested &#x60;top_logprobs&#x60; returned.
    /// </summary>
    std::vector<std::shared_ptr<ChatCompletionTokenLogprob_top_logprobs_inner>>& getTopLogprobs();
    bool topLogprobsIsSet() const;
    void unsetTop_logprobs();

    void setTopLogprobs(const std::vector<std::shared_ptr<ChatCompletionTokenLogprob_top_logprobs_inner>>& value);


protected:
    utility::string_t m_Token;
    bool m_TokenIsSet;
    double m_Logprob;
    bool m_LogprobIsSet;
    std::vector<int32_t> m_Bytes;
    bool m_BytesIsSet;
    std::vector<std::shared_ptr<ChatCompletionTokenLogprob_top_logprobs_inner>> m_Top_logprobs;
    bool m_Top_logprobsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ChatCompletionTokenLogprob_H_ */
