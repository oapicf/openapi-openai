/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateAssistantRequest.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CreateAssistantRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CreateAssistantRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/AssistantObject_tools_inner.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/Object.h"
#include "CppRestOpenAPIClient/model/CreateAssistantRequest_model.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class AssistantObject_tools_inner;


/// <summary>
/// 
/// </summary>
class  CreateAssistantRequest
    : public ModelBase
{
public:
    CreateAssistantRequest();
    virtual ~CreateAssistantRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreateAssistantRequest members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CreateAssistantRequest_model> getModel() const;
    bool modelIsSet() const;
    void unsetModel();

    void setModel(const std::shared_ptr<CreateAssistantRequest_model>& value);

    /// <summary>
    /// The name of the assistant. The maximum length is 256 characters. 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// The description of the assistant. The maximum length is 512 characters. 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// The system instructions that the assistant uses. The maximum length is 256,000 characters. 
    /// </summary>
    utility::string_t getInstructions() const;
    bool instructionsIsSet() const;
    void unsetInstructions();

    void setInstructions(const utility::string_t& value);

    /// <summary>
    /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types &#x60;code_interpreter&#x60;, &#x60;retrieval&#x60;, or &#x60;function&#x60;. 
    /// </summary>
    std::vector<std::shared_ptr<AssistantObject_tools_inner>>& getTools();
    bool toolsIsSet() const;
    void unsetTools();

    void setTools(const std::vector<std::shared_ptr<AssistantObject_tools_inner>>& value);

    /// <summary>
    /// A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. 
    /// </summary>
    std::vector<utility::string_t>& getFileIds();
    bool fileIdsIsSet() const;
    void unsetFile_ids();

    void setFileIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    /// </summary>
    std::shared_ptr<Object> getMetadata() const;
    bool metadataIsSet() const;
    void unsetMetadata();

    void setMetadata(const std::shared_ptr<Object>& value);


protected:
    std::shared_ptr<CreateAssistantRequest_model> m_Model;
    bool m_ModelIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_Instructions;
    bool m_InstructionsIsSet;
    std::vector<std::shared_ptr<AssistantObject_tools_inner>> m_Tools;
    bool m_ToolsIsSet;
    std::vector<utility::string_t> m_File_ids;
    bool m_File_idsIsSet;
    std::shared_ptr<Object> m_Metadata;
    bool m_MetadataIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CreateAssistantRequest_H_ */
