/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateChatCompletionRequest.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CreateChatCompletionRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CreateChatCompletionRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/CreateChatCompletionRequest_stop.h"
#include "CppRestOpenAPIClient/model/CreateChatCompletionRequest_model.h"
#include "CppRestOpenAPIClient/model/CreateChatCompletionRequest_function_call.h"
#include "CppRestOpenAPIClient/model/ChatCompletionFunctions.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/ChatCompletionRequestMessage.h"
#include "CppRestOpenAPIClient/Object.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class ChatCompletionRequestMessage;
class ChatCompletionFunctions;
class CreateChatCompletionRequest_function_call;

/// <summary>
/// 
/// </summary>
class  CreateChatCompletionRequest
    : public ModelBase
{
public:
    CreateChatCompletionRequest();
    virtual ~CreateChatCompletionRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreateChatCompletionRequest members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CreateChatCompletionRequest_model> getModel() const;
    bool modelIsSet() const;
    void unsetModel();

    void setModel(const std::shared_ptr<CreateChatCompletionRequest_model>& value);

    /// <summary>
    /// A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).
    /// </summary>
    std::vector<std::shared_ptr<ChatCompletionRequestMessage>>& getMessages();
    bool messagesIsSet() const;
    void unsetMessages();

    void setMessages(const std::vector<std::shared_ptr<ChatCompletionRequestMessage>>& value);

    /// <summary>
    /// A list of functions the model may generate JSON inputs for.
    /// </summary>
    std::vector<std::shared_ptr<ChatCompletionFunctions>>& getFunctions();
    bool functionsIsSet() const;
    void unsetFunctions();

    void setFunctions(const std::vector<std::shared_ptr<ChatCompletionFunctions>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CreateChatCompletionRequest_function_call> getFunctionCall() const;
    bool functionCallIsSet() const;
    void unsetFunction_call();

    void setFunctionCall(const std::shared_ptr<CreateChatCompletionRequest_function_call>& value);

    /// <summary>
    /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both. 
    /// </summary>
    double getTemperature() const;
    bool temperatureIsSet() const;
    void unsetTemperature();

    void setTemperature(double value);

    /// <summary>
    /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. 
    /// </summary>
    double getTopP() const;
    bool topPIsSet() const;
    void unsetTop_p();

    void setTopP(double value);

    /// <summary>
    /// How many chat completion choices to generate for each input message.
    /// </summary>
    int32_t getN() const;
    bool NIsSet() const;
    void unsetn();

    void setN(int32_t value);

    /// <summary>
    /// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a &#x60;data: [DONE]&#x60; message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb). 
    /// </summary>
    bool isStream() const;
    bool streamIsSet() const;
    void unsetStream();

    void setStream(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CreateChatCompletionRequest_stop> getStop() const;
    bool stopIsSet() const;
    void unsetStop();

    void setStop(const std::shared_ptr<CreateChatCompletionRequest_stop>& value);

    /// <summary>
    /// The maximum number of [tokens](/tokenizer) to generate in the chat completion.  The total length of input tokens and generated tokens is limited by the model&#39;s context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens. 
    /// </summary>
    int32_t getMaxTokens() const;
    bool maxTokensIsSet() const;
    void unsetMax_tokens();

    void setMaxTokens(int32_t value);

    /// <summary>
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 
    /// </summary>
    double getPresencePenalty() const;
    bool presencePenaltyIsSet() const;
    void unsetPresence_penalty();

    void setPresencePenalty(double value);

    /// <summary>
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 
    /// </summary>
    double getFrequencyPenalty() const;
    bool frequencyPenaltyIsSet() const;
    void unsetFrequency_penalty();

    void setFrequencyPenalty(double value);

    /// <summary>
    /// Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. 
    /// </summary>
    std::shared_ptr<Object> getLogitBias() const;
    bool logitBiasIsSet() const;
    void unsetLogit_bias();

    void setLogitBias(const std::shared_ptr<Object>& value);

    /// <summary>
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    /// </summary>
    utility::string_t getUser() const;
    bool userIsSet() const;
    void unsetUser();

    void setUser(const utility::string_t& value);


protected:
    std::shared_ptr<CreateChatCompletionRequest_model> m_Model;
    bool m_ModelIsSet;
    std::vector<std::shared_ptr<ChatCompletionRequestMessage>> m_Messages;
    bool m_MessagesIsSet;
    std::vector<std::shared_ptr<ChatCompletionFunctions>> m_Functions;
    bool m_FunctionsIsSet;
    std::shared_ptr<CreateChatCompletionRequest_function_call> m_Function_call;
    bool m_Function_callIsSet;
    double m_Temperature;
    bool m_TemperatureIsSet;
    double m_Top_p;
    bool m_Top_pIsSet;
    int32_t m_n;
    bool m_nIsSet;
    bool m_Stream;
    bool m_StreamIsSet;
    std::shared_ptr<CreateChatCompletionRequest_stop> m_Stop;
    bool m_StopIsSet;
    int32_t m_Max_tokens;
    bool m_Max_tokensIsSet;
    double m_Presence_penalty;
    bool m_Presence_penaltyIsSet;
    double m_Frequency_penalty;
    bool m_Frequency_penaltyIsSet;
    std::shared_ptr<Object> m_Logit_bias;
    bool m_Logit_biasIsSet;
    utility::string_t m_User;
    bool m_UserIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CreateChatCompletionRequest_H_ */
