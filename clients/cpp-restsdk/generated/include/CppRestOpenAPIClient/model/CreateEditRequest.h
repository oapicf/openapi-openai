/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateEditRequest.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CreateEditRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CreateEditRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/CreateEditRequest_model.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  CreateEditRequest
    : public ModelBase
{
public:
    CreateEditRequest();
    virtual ~CreateEditRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreateEditRequest members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CreateEditRequest_model> getModel() const;
    bool modelIsSet() const;
    void unsetModel();

    void setModel(const std::shared_ptr<CreateEditRequest_model>& value);

    /// <summary>
    /// The input text to use as a starting point for the edit.
    /// </summary>
    utility::string_t getInput() const;
    bool inputIsSet() const;
    void unsetInput();

    void setInput(const utility::string_t& value);

    /// <summary>
    /// The instruction that tells the model how to edit the prompt.
    /// </summary>
    utility::string_t getInstruction() const;
    bool instructionIsSet() const;
    void unsetInstruction();

    void setInstruction(const utility::string_t& value);

    /// <summary>
    /// How many edits to generate for the input and instruction.
    /// </summary>
    int32_t getN() const;
    bool NIsSet() const;
    void unsetn();

    void setN(int32_t value);

    /// <summary>
    /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both. 
    /// </summary>
    double getTemperature() const;
    bool temperatureIsSet() const;
    void unsetTemperature();

    void setTemperature(double value);

    /// <summary>
    /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. 
    /// </summary>
    double getTopP() const;
    bool topPIsSet() const;
    void unsetTop_p();

    void setTopP(double value);


protected:
    std::shared_ptr<CreateEditRequest_model> m_Model;
    bool m_ModelIsSet;
    utility::string_t m_Input;
    bool m_InputIsSet;
    utility::string_t m_Instruction;
    bool m_InstructionIsSet;
    int32_t m_n;
    bool m_nIsSet;
    double m_Temperature;
    bool m_TemperatureIsSet;
    double m_Top_p;
    bool m_Top_pIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CreateEditRequest_H_ */
