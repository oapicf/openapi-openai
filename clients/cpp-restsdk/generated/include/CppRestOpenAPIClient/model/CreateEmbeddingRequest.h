/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateEmbeddingRequest.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CreateEmbeddingRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CreateEmbeddingRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/CreateEmbeddingRequest_input.h"
#include "CppRestOpenAPIClient/model/CreateEmbeddingRequest_model.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  CreateEmbeddingRequest
    : public ModelBase
{
public:
    CreateEmbeddingRequest();
    virtual ~CreateEmbeddingRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreateEmbeddingRequest members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CreateEmbeddingRequest_input> getInput() const;
    bool inputIsSet() const;
    void unsetInput();

    void setInput(const std::shared_ptr<CreateEmbeddingRequest_input>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CreateEmbeddingRequest_model> getModel() const;
    bool modelIsSet() const;
    void unsetModel();

    void setModel(const std::shared_ptr<CreateEmbeddingRequest_model>& value);

    /// <summary>
    /// The format to return the embeddings in. Can be either &#x60;float&#x60; or [&#x60;base64&#x60;](https://pypi.org/project/pybase64/).
    /// </summary>
    utility::string_t getEncodingFormat() const;
    bool encodingFormatIsSet() const;
    void unsetEncoding_format();

    void setEncodingFormat(const utility::string_t& value);

    /// <summary>
    /// The number of dimensions the resulting output embeddings should have. Only supported in &#x60;text-embedding-3&#x60; and later models. 
    /// </summary>
    int32_t getDimensions() const;
    bool dimensionsIsSet() const;
    void unsetDimensions();

    void setDimensions(int32_t value);

    /// <summary>
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    /// </summary>
    utility::string_t getUser() const;
    bool userIsSet() const;
    void unsetUser();

    void setUser(const utility::string_t& value);


protected:
    std::shared_ptr<CreateEmbeddingRequest_input> m_Input;
    bool m_InputIsSet;
    std::shared_ptr<CreateEmbeddingRequest_model> m_Model;
    bool m_ModelIsSet;
    utility::string_t m_Encoding_format;
    bool m_Encoding_formatIsSet;
    int32_t m_Dimensions;
    bool m_DimensionsIsSet;
    utility::string_t m_User;
    bool m_UserIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CreateEmbeddingRequest_H_ */
