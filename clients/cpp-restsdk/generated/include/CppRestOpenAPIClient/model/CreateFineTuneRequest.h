/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateFineTuneRequest.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CreateFineTuneRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CreateFineTuneRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/CreateFineTuneRequest_model.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  CreateFineTuneRequest
    : public ModelBase
{
public:
    CreateFineTuneRequest();
    virtual ~CreateFineTuneRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreateFineTuneRequest members

    /// <summary>
    /// The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file, where each training example is a JSON object with the keys \&quot;prompt\&quot; and \&quot;completion\&quot;. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. 
    /// </summary>
    utility::string_t getTrainingFile() const;
    bool trainingFileIsSet() const;
    void unsetTraining_file();

    void setTrainingFile(const utility::string_t& value);

    /// <summary>
    /// The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model). Your train and validation data should be mutually exclusive.  Your dataset must be formatted as a JSONL file, where each validation example is a JSON object with the keys \&quot;prompt\&quot; and \&quot;completion\&quot;. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. 
    /// </summary>
    utility::string_t getValidationFile() const;
    bool validationFileIsSet() const;
    void unsetValidation_file();

    void setValidationFile(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CreateFineTuneRequest_model> getModel() const;
    bool modelIsSet() const;
    void unsetModel();

    void setModel(const std::shared_ptr<CreateFineTuneRequest_model>& value);

    /// <summary>
    /// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. 
    /// </summary>
    int32_t getNEpochs() const;
    bool nEpochsIsSet() const;
    void unsetN_epochs();

    void setNEpochs(int32_t value);

    /// <summary>
    /// The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass.  By default, the batch size will be dynamically configured to be ~0.2% of the number of examples in the training set, capped at 256 - in general, we&#39;ve found that larger batch sizes tend to work better for larger datasets. 
    /// </summary>
    int32_t getBatchSize() const;
    bool batchSizeIsSet() const;
    void unsetBatch_size();

    void setBatchSize(int32_t value);

    /// <summary>
    /// The learning rate multiplier to use for training. The fine-tuning learning rate is the original learning rate used for pretraining multiplied by this value.  By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on final &#x60;batch_size&#x60; (larger learning rates tend to perform better with larger batch sizes). We recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best results. 
    /// </summary>
    double getLearningRateMultiplier() const;
    bool learningRateMultiplierIsSet() const;
    void unsetLearning_rate_multiplier();

    void setLearningRateMultiplier(double value);

    /// <summary>
    /// The weight to use for loss on the prompt tokens. This controls how much the model tries to learn to generate the prompt (as compared to the completion which always has a weight of 1.0), and can add a stabilizing effect to training when completions are short.  If prompts are extremely long (relative to completions), it may make sense to reduce this weight so as to avoid over-prioritizing learning the prompt. 
    /// </summary>
    double getPromptLossWeight() const;
    bool promptLossWeightIsSet() const;
    void unsetPrompt_loss_weight();

    void setPromptLossWeight(double value);

    /// <summary>
    /// If set, we calculate classification-specific metrics such as accuracy and F-1 score using the validation set at the end of every epoch. These metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).  In order to compute classification metrics, you must provide a &#x60;validation_file&#x60;. Additionally, you must specify &#x60;classification_n_classes&#x60; for multiclass classification or &#x60;classification_positive_class&#x60; for binary classification. 
    /// </summary>
    bool isComputeClassificationMetrics() const;
    bool computeClassificationMetricsIsSet() const;
    void unsetCompute_classification_metrics();

    void setComputeClassificationMetrics(bool value);

    /// <summary>
    /// The number of classes in a classification task.  This parameter is required for multiclass classification. 
    /// </summary>
    int32_t getClassificationNClasses() const;
    bool classificationNClassesIsSet() const;
    void unsetClassification_n_classes();

    void setClassificationNClasses(int32_t value);

    /// <summary>
    /// The positive class in binary classification.  This parameter is needed to generate precision, recall, and F1 metrics when doing binary classification. 
    /// </summary>
    utility::string_t getClassificationPositiveClass() const;
    bool classificationPositiveClassIsSet() const;
    void unsetClassification_positive_class();

    void setClassificationPositiveClass(const utility::string_t& value);

    /// <summary>
    /// If this is provided, we calculate F-beta scores at the specified beta values. The F-beta score is a generalization of F-1 score. This is only used for binary classification.  With a beta of 1 (i.e. the F-1 score), precision and recall are given the same weight. A larger beta score puts more weight on recall and less on precision. A smaller beta score puts more weight on precision and less on recall. 
    /// </summary>
    std::vector<double>& getClassificationBetas();
    bool classificationBetasIsSet() const;
    void unsetClassification_betas();

    void setClassificationBetas(std::vector<double> value);

    /// <summary>
    /// A string of up to 40 characters that will be added to your fine-tuned model name.  For example, a &#x60;suffix&#x60; of \&quot;custom-model-name\&quot; would produce a model name like &#x60;ada:ft-your-org:custom-model-name-2022-02-15-04-21-04&#x60;. 
    /// </summary>
    utility::string_t getSuffix() const;
    bool suffixIsSet() const;
    void unsetSuffix();

    void setSuffix(const utility::string_t& value);


protected:
    utility::string_t m_Training_file;
    bool m_Training_fileIsSet;
    utility::string_t m_Validation_file;
    bool m_Validation_fileIsSet;
    std::shared_ptr<CreateFineTuneRequest_model> m_Model;
    bool m_ModelIsSet;
    int32_t m_N_epochs;
    bool m_N_epochsIsSet;
    int32_t m_Batch_size;
    bool m_Batch_sizeIsSet;
    double m_Learning_rate_multiplier;
    bool m_Learning_rate_multiplierIsSet;
    double m_Prompt_loss_weight;
    bool m_Prompt_loss_weightIsSet;
    bool m_Compute_classification_metrics;
    bool m_Compute_classification_metricsIsSet;
    int32_t m_Classification_n_classes;
    bool m_Classification_n_classesIsSet;
    utility::string_t m_Classification_positive_class;
    bool m_Classification_positive_classIsSet;
    std::vector<double> m_Classification_betas;
    bool m_Classification_betasIsSet;
    utility::string_t m_Suffix;
    bool m_SuffixIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CreateFineTuneRequest_H_ */
