/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateFineTuningJobRequest.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CreateFineTuningJobRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CreateFineTuningJobRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/CreateFineTuningJobRequest_hyperparameters.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/CreateFineTuningJobRequest_integrations_inner.h"
#include "CppRestOpenAPIClient/model/CreateFineTuningJobRequest_model.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class CreateFineTuningJobRequest_hyperparameters;
class CreateFineTuningJobRequest_integrations_inner;


/// <summary>
/// 
/// </summary>
class  CreateFineTuningJobRequest
    : public ModelBase
{
public:
    CreateFineTuningJobRequest();
    virtual ~CreateFineTuningJobRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreateFineTuningJobRequest members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CreateFineTuningJobRequest_model> getModel() const;
    bool modelIsSet() const;
    void unsetModel();

    void setModel(const std::shared_ptr<CreateFineTuningJobRequest_model>& value);

    /// <summary>
    /// The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
    /// </summary>
    utility::string_t getTrainingFile() const;
    bool trainingFileIsSet() const;
    void unsetTraining_file();

    void setTrainingFile(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CreateFineTuningJobRequest_hyperparameters> getHyperparameters() const;
    bool hyperparametersIsSet() const;
    void unsetHyperparameters();

    void setHyperparameters(const std::shared_ptr<CreateFineTuningJobRequest_hyperparameters>& value);

    /// <summary>
    /// A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a &#x60;suffix&#x60; of \&quot;custom-model-name\&quot; would produce a model name like &#x60;ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel&#x60;. 
    /// </summary>
    utility::string_t getSuffix() const;
    bool suffixIsSet() const;
    void unsetSuffix();

    void setSuffix(const utility::string_t& value);

    /// <summary>
    /// The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
    /// </summary>
    utility::string_t getValidationFile() const;
    bool validationFileIsSet() const;
    void unsetValidation_file();

    void setValidationFile(const utility::string_t& value);

    /// <summary>
    /// A list of integrations to enable for your fine-tuning job.
    /// </summary>
    std::vector<std::shared_ptr<CreateFineTuningJobRequest_integrations_inner>>& getIntegrations();
    bool integrationsIsSet() const;
    void unsetIntegrations();

    void setIntegrations(const std::vector<std::shared_ptr<CreateFineTuningJobRequest_integrations_inner>>& value);

    /// <summary>
    /// The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases. If a seed is not specified, one will be generated for you. 
    /// </summary>
    int32_t getSeed() const;
    bool seedIsSet() const;
    void unsetSeed();

    void setSeed(int32_t value);


protected:
    std::shared_ptr<CreateFineTuningJobRequest_model> m_Model;
    bool m_ModelIsSet;
    utility::string_t m_Training_file;
    bool m_Training_fileIsSet;
    std::shared_ptr<CreateFineTuningJobRequest_hyperparameters> m_Hyperparameters;
    bool m_HyperparametersIsSet;
    utility::string_t m_Suffix;
    bool m_SuffixIsSet;
    utility::string_t m_Validation_file;
    bool m_Validation_fileIsSet;
    std::vector<std::shared_ptr<CreateFineTuningJobRequest_integrations_inner>> m_Integrations;
    bool m_IntegrationsIsSet;
    int32_t m_Seed;
    bool m_SeedIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CreateFineTuningJobRequest_H_ */
