/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateFineTuningJobRequest_integrations_inner_wandb.h
 *
 * The settings for your integration with Weights and Biases. This payload specifies the project that metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags to your run, and set a default entity (team, username, etc) to be associated with your run. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CreateFineTuningJobRequest_integrations_inner_wandb_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CreateFineTuningJobRequest_integrations_inner_wandb_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// The settings for your integration with Weights and Biases. This payload specifies the project that metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags to your run, and set a default entity (team, username, etc) to be associated with your run. 
/// </summary>
class  CreateFineTuningJobRequest_integrations_inner_wandb
    : public ModelBase
{
public:
    CreateFineTuningJobRequest_integrations_inner_wandb();
    virtual ~CreateFineTuningJobRequest_integrations_inner_wandb();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreateFineTuningJobRequest_integrations_inner_wandb members

    /// <summary>
    /// The name of the project that the new run will be created under. 
    /// </summary>
    utility::string_t getProject() const;
    bool projectIsSet() const;
    void unsetProject();

    void setProject(const utility::string_t& value);

    /// <summary>
    /// A display name to set for the run. If not set, we will use the Job ID as the name. 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// The entity to use for the run. This allows you to set the team or username of the WandB user that you would like associated with the run. If not set, the default entity for the registered WandB API key is used. 
    /// </summary>
    utility::string_t getEntity() const;
    bool entityIsSet() const;
    void unsetEntity();

    void setEntity(const utility::string_t& value);

    /// <summary>
    /// A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some default tags are generated by OpenAI: \&quot;openai/finetune\&quot;, \&quot;openai/{base-model}\&quot;, \&quot;openai/{ftjob-abcdef}\&quot;. 
    /// </summary>
    std::vector<utility::string_t>& getTags();
    bool tagsIsSet() const;
    void unsetTags();

    void setTags(const std::vector<utility::string_t>& value);


protected:
    utility::string_t m_Project;
    bool m_ProjectIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Entity;
    bool m_EntityIsSet;
    std::vector<utility::string_t> m_Tags;
    bool m_TagsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CreateFineTuningJobRequest_integrations_inner_wandb_H_ */
