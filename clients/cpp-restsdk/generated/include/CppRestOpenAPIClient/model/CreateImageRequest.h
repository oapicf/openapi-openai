/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateImageRequest.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CreateImageRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CreateImageRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  CreateImageRequest
    : public ModelBase
{
public:
    CreateImageRequest();
    virtual ~CreateImageRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreateImageRequest members

    /// <summary>
    /// A text description of the desired image(s). The maximum length is 1000 characters.
    /// </summary>
    utility::string_t getPrompt() const;
    bool promptIsSet() const;
    void unsetPrompt();

    void setPrompt(const utility::string_t& value);

    /// <summary>
    /// The number of images to generate. Must be between 1 and 10.
    /// </summary>
    int32_t getN() const;
    bool NIsSet() const;
    void unsetn();

    void setN(int32_t value);

    /// <summary>
    /// The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
    /// </summary>
    utility::string_t getSize() const;
    bool sizeIsSet() const;
    void unsetSize();

    void setSize(const utility::string_t& value);

    /// <summary>
    /// The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.
    /// </summary>
    utility::string_t getResponseFormat() const;
    bool responseFormatIsSet() const;
    void unsetResponse_format();

    void setResponseFormat(const utility::string_t& value);

    /// <summary>
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    /// </summary>
    utility::string_t getUser() const;
    bool userIsSet() const;
    void unsetUser();

    void setUser(const utility::string_t& value);


protected:
    utility::string_t m_Prompt;
    bool m_PromptIsSet;
    int32_t m_n;
    bool m_nIsSet;
    utility::string_t m_Size;
    bool m_SizeIsSet;
    utility::string_t m_Response_format;
    bool m_Response_formatIsSet;
    utility::string_t m_User;
    bool m_UserIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CreateImageRequest_H_ */
