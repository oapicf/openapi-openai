/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateSpeechRequest.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CreateSpeechRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CreateSpeechRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/CreateSpeechRequest_model.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  CreateSpeechRequest
    : public ModelBase
{
public:
    CreateSpeechRequest();
    virtual ~CreateSpeechRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreateSpeechRequest members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CreateSpeechRequest_model> getModel() const;
    bool modelIsSet() const;
    void unsetModel();

    void setModel(const std::shared_ptr<CreateSpeechRequest_model>& value);

    /// <summary>
    /// The text to generate audio for. The maximum length is 4096 characters.
    /// </summary>
    utility::string_t getInput() const;
    bool inputIsSet() const;
    void unsetInput();

    void setInput(const utility::string_t& value);

    /// <summary>
    /// The voice to use when generating the audio. Supported voices are &#x60;alloy&#x60;, &#x60;echo&#x60;, &#x60;fable&#x60;, &#x60;onyx&#x60;, &#x60;nova&#x60;, and &#x60;shimmer&#x60;. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
    /// </summary>
    utility::string_t getVoice() const;
    bool voiceIsSet() const;
    void unsetVoice();

    void setVoice(const utility::string_t& value);

    /// <summary>
    /// The format to audio in. Supported formats are &#x60;mp3&#x60;, &#x60;opus&#x60;, &#x60;aac&#x60;, &#x60;flac&#x60;, &#x60;wav&#x60;, and &#x60;pcm&#x60;.
    /// </summary>
    utility::string_t getResponseFormat() const;
    bool responseFormatIsSet() const;
    void unsetResponse_format();

    void setResponseFormat(const utility::string_t& value);

    /// <summary>
    /// The speed of the generated audio. Select a value from &#x60;0.25&#x60; to &#x60;4.0&#x60;. &#x60;1.0&#x60; is the default.
    /// </summary>
    double getSpeed() const;
    bool speedIsSet() const;
    void unsetSpeed();

    void setSpeed(double value);


protected:
    std::shared_ptr<CreateSpeechRequest_model> m_Model;
    bool m_ModelIsSet;
    utility::string_t m_Input;
    bool m_InputIsSet;
    utility::string_t m_Voice;
    bool m_VoiceIsSet;
    utility::string_t m_Response_format;
    bool m_Response_formatIsSet;
    double m_Speed;
    bool m_SpeedIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CreateSpeechRequest_H_ */
