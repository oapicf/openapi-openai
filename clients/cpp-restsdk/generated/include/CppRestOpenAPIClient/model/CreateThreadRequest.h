/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateThreadRequest.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CreateThreadRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CreateThreadRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/CreateMessageRequest.h"
#include "CppRestOpenAPIClient/Object.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class CreateMessageRequest;

/// <summary>
/// 
/// </summary>
class  CreateThreadRequest
    : public ModelBase
{
public:
    CreateThreadRequest();
    virtual ~CreateThreadRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreateThreadRequest members

    /// <summary>
    /// A list of [messages](/docs/api-reference/messages) to start the thread with.
    /// </summary>
    std::vector<std::shared_ptr<CreateMessageRequest>>& getMessages();
    bool messagesIsSet() const;
    void unsetMessages();

    void setMessages(const std::vector<std::shared_ptr<CreateMessageRequest>>& value);

    /// <summary>
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    /// </summary>
    std::shared_ptr<Object> getMetadata() const;
    bool metadataIsSet() const;
    void unsetMetadata();

    void setMetadata(const std::shared_ptr<Object>& value);


protected:
    std::vector<std::shared_ptr<CreateMessageRequest>> m_Messages;
    bool m_MessagesIsSet;
    std::shared_ptr<Object> m_Metadata;
    bool m_MetadataIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CreateThreadRequest_H_ */
