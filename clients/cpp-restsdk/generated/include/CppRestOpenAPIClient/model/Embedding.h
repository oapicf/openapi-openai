/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Embedding.h
 *
 * Represents an embedding vector returned by embedding endpoint. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Embedding_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Embedding_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Represents an embedding vector returned by embedding endpoint. 
/// </summary>
class  Embedding
    : public ModelBase
{
public:
    Embedding();
    virtual ~Embedding();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Embedding members

    /// <summary>
    /// The index of the embedding in the list of embeddings.
    /// </summary>
    int32_t getIndex() const;
    bool indexIsSet() const;
    void unsetIndex();

    void setIndex(int32_t value);

    /// <summary>
    /// The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings). 
    /// </summary>
    std::vector<double>& getEmbedding();
    bool embeddingIsSet() const;
    void unsetEmbedding();

    void setEmbedding(std::vector<double> value);

    /// <summary>
    /// The object type, which is always \&quot;embedding\&quot;.
    /// </summary>
    utility::string_t getObject() const;
    bool objectIsSet() const;
    void unsetobject();

    void setObject(const utility::string_t& value);


protected:
    int32_t m_Index;
    bool m_IndexIsSet;
    std::vector<double> m_Embedding;
    bool m_EmbeddingIsSet;
    utility::string_t m_object;
    bool m_objectIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Embedding_H_ */
