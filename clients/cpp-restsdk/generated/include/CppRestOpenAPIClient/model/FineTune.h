/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FineTune.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_FineTune_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_FineTune_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/OpenAIFile.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/FineTuneEvent.h"
#include "CppRestOpenAPIClient/Object.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class OpenAIFile;
class FineTuneEvent;

/// <summary>
/// 
/// </summary>
class  FineTune
    : public ModelBase
{
public:
    FineTune();
    virtual ~FineTune();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// FineTune members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getObject() const;
    bool objectIsSet() const;
    void unsetobject();

    void setObject(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreated_at();

    void setCreatedAt(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getUpdatedAt() const;
    bool updatedAtIsSet() const;
    void unsetUpdated_at();

    void setUpdatedAt(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getModel() const;
    bool modelIsSet() const;
    void unsetModel();

    void setModel(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFineTunedModel() const;
    bool fineTunedModelIsSet() const;
    void unsetFine_tuned_model();

    void setFineTunedModel(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrganizationId() const;
    bool organizationIdIsSet() const;
    void unsetOrganization_id();

    void setOrganizationId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getHyperparams() const;
    bool hyperparamsIsSet() const;
    void unsetHyperparams();

    void setHyperparams(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<OpenAIFile>>& getTrainingFiles();
    bool trainingFilesIsSet() const;
    void unsetTraining_files();

    void setTrainingFiles(const std::vector<std::shared_ptr<OpenAIFile>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<OpenAIFile>>& getValidationFiles();
    bool validationFilesIsSet() const;
    void unsetValidation_files();

    void setValidationFiles(const std::vector<std::shared_ptr<OpenAIFile>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<OpenAIFile>>& getResultFiles();
    bool resultFilesIsSet() const;
    void unsetResult_files();

    void setResultFiles(const std::vector<std::shared_ptr<OpenAIFile>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<FineTuneEvent>>& getEvents();
    bool eventsIsSet() const;
    void unsetEvents();

    void setEvents(const std::vector<std::shared_ptr<FineTuneEvent>>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_object;
    bool m_objectIsSet;
    int32_t m_Created_at;
    bool m_Created_atIsSet;
    int32_t m_Updated_at;
    bool m_Updated_atIsSet;
    utility::string_t m_Model;
    bool m_ModelIsSet;
    utility::string_t m_Fine_tuned_model;
    bool m_Fine_tuned_modelIsSet;
    utility::string_t m_Organization_id;
    bool m_Organization_idIsSet;
    utility::string_t m_Status;
    bool m_StatusIsSet;
    std::shared_ptr<Object> m_Hyperparams;
    bool m_HyperparamsIsSet;
    std::vector<std::shared_ptr<OpenAIFile>> m_Training_files;
    bool m_Training_filesIsSet;
    std::vector<std::shared_ptr<OpenAIFile>> m_Validation_files;
    bool m_Validation_filesIsSet;
    std::vector<std::shared_ptr<OpenAIFile>> m_Result_files;
    bool m_Result_filesIsSet;
    std::vector<std::shared_ptr<FineTuneEvent>> m_Events;
    bool m_EventsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_FineTune_H_ */
