/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MessageContentTextAnnotationsFileCitationObject.h
 *
 * A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \&quot;retrieval\&quot; tool to search files.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_MessageContentTextAnnotationsFileCitationObject_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_MessageContentTextAnnotationsFileCitationObject_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/MessageContentTextAnnotationsFileCitationObject_file_citation.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class MessageContentTextAnnotationsFileCitationObject_file_citation;


/// <summary>
/// A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \&quot;retrieval\&quot; tool to search files.
/// </summary>
class  MessageContentTextAnnotationsFileCitationObject
    : public ModelBase
{
public:
    MessageContentTextAnnotationsFileCitationObject();
    virtual ~MessageContentTextAnnotationsFileCitationObject();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// MessageContentTextAnnotationsFileCitationObject members

    /// <summary>
    /// Always &#x60;file_citation&#x60;.
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// The text in the message content that needs to be replaced.
    /// </summary>
    utility::string_t getText() const;
    bool textIsSet() const;
    void unsetText();

    void setText(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<MessageContentTextAnnotationsFileCitationObject_file_citation> getFileCitation() const;
    bool fileCitationIsSet() const;
    void unsetFile_citation();

    void setFileCitation(const std::shared_ptr<MessageContentTextAnnotationsFileCitationObject_file_citation>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getStartIndex() const;
    bool startIndexIsSet() const;
    void unsetStart_index();

    void setStartIndex(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getEndIndex() const;
    bool endIndexIsSet() const;
    void unsetEnd_index();

    void setEndIndex(int32_t value);


protected:
    utility::string_t m_Type;
    bool m_TypeIsSet;
    utility::string_t m_Text;
    bool m_TextIsSet;
    std::shared_ptr<MessageContentTextAnnotationsFileCitationObject_file_citation> m_File_citation;
    bool m_File_citationIsSet;
    int32_t m_Start_index;
    bool m_Start_indexIsSet;
    int32_t m_End_index;
    bool m_End_indexIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_MessageContentTextAnnotationsFileCitationObject_H_ */
