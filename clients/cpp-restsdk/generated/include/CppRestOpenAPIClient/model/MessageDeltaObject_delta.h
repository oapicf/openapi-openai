/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MessageDeltaObject_delta.h
 *
 * The delta containing the fields that have changed on the Message.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_MessageDeltaObject_delta_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_MessageDeltaObject_delta_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/MessageDeltaObject_delta_content_inner.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class MessageDeltaObject_delta_content_inner;


/// <summary>
/// The delta containing the fields that have changed on the Message.
/// </summary>
class  MessageDeltaObject_delta
    : public ModelBase
{
public:
    MessageDeltaObject_delta();
    virtual ~MessageDeltaObject_delta();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// MessageDeltaObject_delta members

    /// <summary>
    /// The entity that produced the message. One of &#x60;user&#x60; or &#x60;assistant&#x60;.
    /// </summary>
    utility::string_t getRole() const;
    bool roleIsSet() const;
    void unsetRole();

    void setRole(const utility::string_t& value);

    /// <summary>
    /// The content of the message in array of text and/or images.
    /// </summary>
    std::vector<std::shared_ptr<MessageDeltaObject_delta_content_inner>>& getContent();
    bool contentIsSet() const;
    void unsetContent();

    void setContent(const std::vector<std::shared_ptr<MessageDeltaObject_delta_content_inner>>& value);

    /// <summary>
    /// A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
    /// </summary>
    std::vector<utility::string_t>& getFileIds();
    bool fileIdsIsSet() const;
    void unsetFile_ids();

    void setFileIds(const std::vector<utility::string_t>& value);


protected:
    utility::string_t m_Role;
    bool m_RoleIsSet;
    std::vector<std::shared_ptr<MessageDeltaObject_delta_content_inner>> m_Content;
    bool m_ContentIsSet;
    std::vector<utility::string_t> m_File_ids;
    bool m_File_idsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_MessageDeltaObject_delta_H_ */
