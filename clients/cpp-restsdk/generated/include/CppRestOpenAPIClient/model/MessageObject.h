/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MessageObject.h
 *
 * Represents a message within a [thread](/docs/api-reference/threads).
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_MessageObject_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_MessageObject_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/MessageObject_content_inner.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/Object.h"
#include "CppRestOpenAPIClient/model/MessageObject_incomplete_details.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class MessageObject_incomplete_details;
class MessageObject_content_inner;


/// <summary>
/// Represents a message within a [thread](/docs/api-reference/threads).
/// </summary>
class  MessageObject
    : public ModelBase
{
public:
    MessageObject();
    virtual ~MessageObject();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// MessageObject members

    /// <summary>
    /// The identifier, which can be referenced in API endpoints.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// The object type, which is always &#x60;thread.message&#x60;.
    /// </summary>
    utility::string_t getObject() const;
    bool objectIsSet() const;
    void unsetobject();

    void setObject(const utility::string_t& value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the message was created.
    /// </summary>
    int32_t getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreated_at();

    void setCreatedAt(int32_t value);

    /// <summary>
    /// The [thread](/docs/api-reference/threads) ID that this message belongs to.
    /// </summary>
    utility::string_t getThreadId() const;
    bool threadIdIsSet() const;
    void unsetThread_id();

    void setThreadId(const utility::string_t& value);

    /// <summary>
    /// The status of the message, which can be either &#x60;in_progress&#x60;, &#x60;incomplete&#x60;, or &#x60;completed&#x60;.
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<MessageObject_incomplete_details> getIncompleteDetails() const;
    bool incompleteDetailsIsSet() const;
    void unsetIncomplete_details();

    void setIncompleteDetails(const std::shared_ptr<MessageObject_incomplete_details>& value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the message was completed.
    /// </summary>
    int32_t getCompletedAt() const;
    bool completedAtIsSet() const;
    void unsetCompleted_at();

    void setCompletedAt(int32_t value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the message was marked as incomplete.
    /// </summary>
    int32_t getIncompleteAt() const;
    bool incompleteAtIsSet() const;
    void unsetIncomplete_at();

    void setIncompleteAt(int32_t value);

    /// <summary>
    /// The entity that produced the message. One of &#x60;user&#x60; or &#x60;assistant&#x60;.
    /// </summary>
    utility::string_t getRole() const;
    bool roleIsSet() const;
    void unsetRole();

    void setRole(const utility::string_t& value);

    /// <summary>
    /// The content of the message in array of text and/or images.
    /// </summary>
    std::vector<std::shared_ptr<MessageObject_content_inner>>& getContent();
    bool contentIsSet() const;
    void unsetContent();

    void setContent(const std::vector<std::shared_ptr<MessageObject_content_inner>>& value);

    /// <summary>
    /// If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
    /// </summary>
    utility::string_t getAssistantId() const;
    bool assistantIdIsSet() const;
    void unsetAssistant_id();

    void setAssistantId(const utility::string_t& value);

    /// <summary>
    /// The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is &#x60;null&#x60; when messages are created manually using the create message or create thread endpoints.
    /// </summary>
    utility::string_t getRunId() const;
    bool runIdIsSet() const;
    void unsetRun_id();

    void setRunId(const utility::string_t& value);

    /// <summary>
    /// A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
    /// </summary>
    std::vector<utility::string_t>& getFileIds();
    bool fileIdsIsSet() const;
    void unsetFile_ids();

    void setFileIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    /// </summary>
    std::shared_ptr<Object> getMetadata() const;
    bool metadataIsSet() const;
    void unsetMetadata();

    void setMetadata(const std::shared_ptr<Object>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_object;
    bool m_objectIsSet;
    int32_t m_Created_at;
    bool m_Created_atIsSet;
    utility::string_t m_Thread_id;
    bool m_Thread_idIsSet;
    utility::string_t m_Status;
    bool m_StatusIsSet;
    std::shared_ptr<MessageObject_incomplete_details> m_Incomplete_details;
    bool m_Incomplete_detailsIsSet;
    int32_t m_Completed_at;
    bool m_Completed_atIsSet;
    int32_t m_Incomplete_at;
    bool m_Incomplete_atIsSet;
    utility::string_t m_Role;
    bool m_RoleIsSet;
    std::vector<std::shared_ptr<MessageObject_content_inner>> m_Content;
    bool m_ContentIsSet;
    utility::string_t m_Assistant_id;
    bool m_Assistant_idIsSet;
    utility::string_t m_Run_id;
    bool m_Run_idIsSet;
    std::vector<utility::string_t> m_File_ids;
    bool m_File_idsIsSet;
    std::shared_ptr<Object> m_Metadata;
    bool m_MetadataIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_MessageObject_H_ */
