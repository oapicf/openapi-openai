/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RunObject.h
 *
 * Represents an execution run on a [thread](/docs/api-reference/threads).
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_RunObject_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_RunObject_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/TruncationObject.h"
#include "CppRestOpenAPIClient/model/AssistantsApiToolChoiceOption.h"
#include "CppRestOpenAPIClient/model/AssistantObject_tools_inner.h"
#include "CppRestOpenAPIClient/model/RunCompletionUsage.h"
#include "CppRestOpenAPIClient/model/RunObject_required_action.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/RunObject_last_error.h"
#include "CppRestOpenAPIClient/model/AssistantsApiResponseFormatOption.h"
#include "CppRestOpenAPIClient/Object.h"
#include <vector>
#include "CppRestOpenAPIClient/model/RunObject_incomplete_details.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class RunObject_required_action;
class RunObject_last_error;
class RunObject_incomplete_details;
class AssistantObject_tools_inner;
class RunCompletionUsage;
class TruncationObject;
class AssistantsApiToolChoiceOption;
class AssistantsApiResponseFormatOption;


/// <summary>
/// Represents an execution run on a [thread](/docs/api-reference/threads).
/// </summary>
class  RunObject
    : public ModelBase
{
public:
    RunObject();
    virtual ~RunObject();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RunObject members

    /// <summary>
    /// The identifier, which can be referenced in API endpoints.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// The object type, which is always &#x60;thread.run&#x60;.
    /// </summary>
    utility::string_t getObject() const;
    bool objectIsSet() const;
    void unsetobject();

    void setObject(const utility::string_t& value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the run was created.
    /// </summary>
    int32_t getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreated_at();

    void setCreatedAt(int32_t value);

    /// <summary>
    /// The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
    /// </summary>
    utility::string_t getThreadId() const;
    bool threadIdIsSet() const;
    void unsetThread_id();

    void setThreadId(const utility::string_t& value);

    /// <summary>
    /// The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
    /// </summary>
    utility::string_t getAssistantId() const;
    bool assistantIdIsSet() const;
    void unsetAssistant_id();

    void setAssistantId(const utility::string_t& value);

    /// <summary>
    /// The status of the run, which can be either &#x60;queued&#x60;, &#x60;in_progress&#x60;, &#x60;requires_action&#x60;, &#x60;cancelling&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RunObject_required_action> getRequiredAction() const;
    bool requiredActionIsSet() const;
    void unsetRequired_action();

    void setRequiredAction(const std::shared_ptr<RunObject_required_action>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RunObject_last_error> getLastError() const;
    bool lastErrorIsSet() const;
    void unsetLast_error();

    void setLastError(const std::shared_ptr<RunObject_last_error>& value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the run will expire.
    /// </summary>
    int32_t getExpiresAt() const;
    bool expiresAtIsSet() const;
    void unsetExpires_at();

    void setExpiresAt(int32_t value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the run was started.
    /// </summary>
    int32_t getStartedAt() const;
    bool startedAtIsSet() const;
    void unsetStarted_at();

    void setStartedAt(int32_t value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the run was cancelled.
    /// </summary>
    int32_t getCancelledAt() const;
    bool cancelledAtIsSet() const;
    void unsetCancelled_at();

    void setCancelledAt(int32_t value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the run failed.
    /// </summary>
    int32_t getFailedAt() const;
    bool failedAtIsSet() const;
    void unsetFailed_at();

    void setFailedAt(int32_t value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the run was completed.
    /// </summary>
    int32_t getCompletedAt() const;
    bool completedAtIsSet() const;
    void unsetCompleted_at();

    void setCompletedAt(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RunObject_incomplete_details> getIncompleteDetails() const;
    bool incompleteDetailsIsSet() const;
    void unsetIncomplete_details();

    void setIncompleteDetails(const std::shared_ptr<RunObject_incomplete_details>& value);

    /// <summary>
    /// The model that the [assistant](/docs/api-reference/assistants) used for this run.
    /// </summary>
    utility::string_t getModel() const;
    bool modelIsSet() const;
    void unsetModel();

    void setModel(const utility::string_t& value);

    /// <summary>
    /// The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
    /// </summary>
    utility::string_t getInstructions() const;
    bool instructionsIsSet() const;
    void unsetInstructions();

    void setInstructions(const utility::string_t& value);

    /// <summary>
    /// The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
    /// </summary>
    std::vector<std::shared_ptr<AssistantObject_tools_inner>>& getTools();
    bool toolsIsSet() const;
    void unsetTools();

    void setTools(const std::vector<std::shared_ptr<AssistantObject_tools_inner>>& value);

    /// <summary>
    /// The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
    /// </summary>
    std::vector<utility::string_t>& getFileIds();
    bool fileIdsIsSet() const;
    void unsetFile_ids();

    void setFileIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    /// </summary>
    std::shared_ptr<Object> getMetadata() const;
    bool metadataIsSet() const;
    void unsetMetadata();

    void setMetadata(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RunCompletionUsage> getUsage() const;
    bool usageIsSet() const;
    void unsetUsage();

    void setUsage(const std::shared_ptr<RunCompletionUsage>& value);

    /// <summary>
    /// The sampling temperature used for this run. If not set, defaults to 1.
    /// </summary>
    double getTemperature() const;
    bool temperatureIsSet() const;
    void unsetTemperature();

    void setTemperature(double value);

    /// <summary>
    /// The maximum number of prompt tokens specified to have been used over the course of the run. 
    /// </summary>
    int32_t getMaxPromptTokens() const;
    bool maxPromptTokensIsSet() const;
    void unsetMax_prompt_tokens();

    void setMaxPromptTokens(int32_t value);

    /// <summary>
    /// The maximum number of completion tokens specified to have been used over the course of the run. 
    /// </summary>
    int32_t getMaxCompletionTokens() const;
    bool maxCompletionTokensIsSet() const;
    void unsetMax_completion_tokens();

    void setMaxCompletionTokens(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TruncationObject> getTruncationStrategy() const;
    bool truncationStrategyIsSet() const;
    void unsetTruncation_strategy();

    void setTruncationStrategy(const std::shared_ptr<TruncationObject>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AssistantsApiToolChoiceOption> getToolChoice() const;
    bool toolChoiceIsSet() const;
    void unsetTool_choice();

    void setToolChoice(const std::shared_ptr<AssistantsApiToolChoiceOption>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AssistantsApiResponseFormatOption> getResponseFormat() const;
    bool responseFormatIsSet() const;
    void unsetResponse_format();

    void setResponseFormat(const std::shared_ptr<AssistantsApiResponseFormatOption>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_object;
    bool m_objectIsSet;
    int32_t m_Created_at;
    bool m_Created_atIsSet;
    utility::string_t m_Thread_id;
    bool m_Thread_idIsSet;
    utility::string_t m_Assistant_id;
    bool m_Assistant_idIsSet;
    utility::string_t m_Status;
    bool m_StatusIsSet;
    std::shared_ptr<RunObject_required_action> m_Required_action;
    bool m_Required_actionIsSet;
    std::shared_ptr<RunObject_last_error> m_Last_error;
    bool m_Last_errorIsSet;
    int32_t m_Expires_at;
    bool m_Expires_atIsSet;
    int32_t m_Started_at;
    bool m_Started_atIsSet;
    int32_t m_Cancelled_at;
    bool m_Cancelled_atIsSet;
    int32_t m_Failed_at;
    bool m_Failed_atIsSet;
    int32_t m_Completed_at;
    bool m_Completed_atIsSet;
    std::shared_ptr<RunObject_incomplete_details> m_Incomplete_details;
    bool m_Incomplete_detailsIsSet;
    utility::string_t m_Model;
    bool m_ModelIsSet;
    utility::string_t m_Instructions;
    bool m_InstructionsIsSet;
    std::vector<std::shared_ptr<AssistantObject_tools_inner>> m_Tools;
    bool m_ToolsIsSet;
    std::vector<utility::string_t> m_File_ids;
    bool m_File_idsIsSet;
    std::shared_ptr<Object> m_Metadata;
    bool m_MetadataIsSet;
    std::shared_ptr<RunCompletionUsage> m_Usage;
    bool m_UsageIsSet;
    double m_Temperature;
    bool m_TemperatureIsSet;
    int32_t m_Max_prompt_tokens;
    bool m_Max_prompt_tokensIsSet;
    int32_t m_Max_completion_tokens;
    bool m_Max_completion_tokensIsSet;
    std::shared_ptr<TruncationObject> m_Truncation_strategy;
    bool m_Truncation_strategyIsSet;
    std::shared_ptr<AssistantsApiToolChoiceOption> m_Tool_choice;
    bool m_Tool_choiceIsSet;
    std::shared_ptr<AssistantsApiResponseFormatOption> m_Response_format;
    bool m_Response_formatIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_RunObject_H_ */
