/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RunStepCompletionUsage.h
 *
 * Usage statistics related to the run step. This value will be &#x60;null&#x60; while the run step&#39;s status is &#x60;in_progress&#x60;.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_RunStepCompletionUsage_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_RunStepCompletionUsage_H_


#include "CppRestOpenAPIClient/ModelBase.h"


namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Usage statistics related to the run step. This value will be &#x60;null&#x60; while the run step&#39;s status is &#x60;in_progress&#x60;.
/// </summary>
class  RunStepCompletionUsage
    : public ModelBase
{
public:
    RunStepCompletionUsage();
    virtual ~RunStepCompletionUsage();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RunStepCompletionUsage members

    /// <summary>
    /// Number of completion tokens used over the course of the run step.
    /// </summary>
    int32_t getCompletionTokens() const;
    bool completionTokensIsSet() const;
    void unsetCompletion_tokens();

    void setCompletionTokens(int32_t value);

    /// <summary>
    /// Number of prompt tokens used over the course of the run step.
    /// </summary>
    int32_t getPromptTokens() const;
    bool promptTokensIsSet() const;
    void unsetPrompt_tokens();

    void setPromptTokens(int32_t value);

    /// <summary>
    /// Total number of tokens used (prompt + completion).
    /// </summary>
    int32_t getTotalTokens() const;
    bool totalTokensIsSet() const;
    void unsetTotal_tokens();

    void setTotalTokens(int32_t value);


protected:
    int32_t m_Completion_tokens;
    bool m_Completion_tokensIsSet;
    int32_t m_Prompt_tokens;
    bool m_Prompt_tokensIsSet;
    int32_t m_Total_tokens;
    bool m_Total_tokensIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_RunStepCompletionUsage_H_ */
