/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RunStepObject.h
 *
 * Represents a step in execution of a run. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_RunStepObject_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_RunStepObject_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/RunStepObject_step_details.h"
#include "CppRestOpenAPIClient/model/RunStepCompletionUsage.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/RunStepObject_last_error.h"
#include "CppRestOpenAPIClient/Object.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class RunStepObject_step_details;
class RunStepObject_last_error;
class RunStepCompletionUsage;


/// <summary>
/// Represents a step in execution of a run. 
/// </summary>
class  RunStepObject
    : public ModelBase
{
public:
    RunStepObject();
    virtual ~RunStepObject();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RunStepObject members

    /// <summary>
    /// The identifier of the run step, which can be referenced in API endpoints.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// The object type, which is always &#x60;thread.run.step&#x60;.
    /// </summary>
    utility::string_t getObject() const;
    bool objectIsSet() const;
    void unsetobject();

    void setObject(const utility::string_t& value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the run step was created.
    /// </summary>
    int32_t getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreated_at();

    void setCreatedAt(int32_t value);

    /// <summary>
    /// The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
    /// </summary>
    utility::string_t getAssistantId() const;
    bool assistantIdIsSet() const;
    void unsetAssistant_id();

    void setAssistantId(const utility::string_t& value);

    /// <summary>
    /// The ID of the [thread](/docs/api-reference/threads) that was run.
    /// </summary>
    utility::string_t getThreadId() const;
    bool threadIdIsSet() const;
    void unsetThread_id();

    void setThreadId(const utility::string_t& value);

    /// <summary>
    /// The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
    /// </summary>
    utility::string_t getRunId() const;
    bool runIdIsSet() const;
    void unsetRun_id();

    void setRunId(const utility::string_t& value);

    /// <summary>
    /// The type of run step, which can be either &#x60;message_creation&#x60; or &#x60;tool_calls&#x60;.
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// The status of the run step, which can be either &#x60;in_progress&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RunStepObject_step_details> getStepDetails() const;
    bool stepDetailsIsSet() const;
    void unsetStep_details();

    void setStepDetails(const std::shared_ptr<RunStepObject_step_details>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RunStepObject_last_error> getLastError() const;
    bool lastErrorIsSet() const;
    void unsetLast_error();

    void setLastError(const std::shared_ptr<RunStepObject_last_error>& value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
    /// </summary>
    int32_t getExpiredAt() const;
    bool expiredAtIsSet() const;
    void unsetExpired_at();

    void setExpiredAt(int32_t value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the run step was cancelled.
    /// </summary>
    int32_t getCancelledAt() const;
    bool cancelledAtIsSet() const;
    void unsetCancelled_at();

    void setCancelledAt(int32_t value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the run step failed.
    /// </summary>
    int32_t getFailedAt() const;
    bool failedAtIsSet() const;
    void unsetFailed_at();

    void setFailedAt(int32_t value);

    /// <summary>
    /// The Unix timestamp (in seconds) for when the run step completed.
    /// </summary>
    int32_t getCompletedAt() const;
    bool completedAtIsSet() const;
    void unsetCompleted_at();

    void setCompletedAt(int32_t value);

    /// <summary>
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    /// </summary>
    std::shared_ptr<Object> getMetadata() const;
    bool metadataIsSet() const;
    void unsetMetadata();

    void setMetadata(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RunStepCompletionUsage> getUsage() const;
    bool usageIsSet() const;
    void unsetUsage();

    void setUsage(const std::shared_ptr<RunStepCompletionUsage>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_object;
    bool m_objectIsSet;
    int32_t m_Created_at;
    bool m_Created_atIsSet;
    utility::string_t m_Assistant_id;
    bool m_Assistant_idIsSet;
    utility::string_t m_Thread_id;
    bool m_Thread_idIsSet;
    utility::string_t m_Run_id;
    bool m_Run_idIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
    utility::string_t m_Status;
    bool m_StatusIsSet;
    std::shared_ptr<RunStepObject_step_details> m_Step_details;
    bool m_Step_detailsIsSet;
    std::shared_ptr<RunStepObject_last_error> m_Last_error;
    bool m_Last_errorIsSet;
    int32_t m_Expired_at;
    bool m_Expired_atIsSet;
    int32_t m_Cancelled_at;
    bool m_Cancelled_atIsSet;
    int32_t m_Failed_at;
    bool m_Failed_atIsSet;
    int32_t m_Completed_at;
    bool m_Completed_atIsSet;
    std::shared_ptr<Object> m_Metadata;
    bool m_MetadataIsSet;
    std::shared_ptr<RunStepCompletionUsage> m_Usage;
    bool m_UsageIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_RunStepObject_H_ */
