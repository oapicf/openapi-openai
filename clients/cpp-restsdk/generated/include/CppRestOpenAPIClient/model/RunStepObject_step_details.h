/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RunStepObject_step_details.h
 *
 * The details of the run step.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_RunStepObject_step_details_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_RunStepObject_step_details_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/RunStepDetailsMessageCreationObject.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/RunStepDetailsMessageCreationObject_message_creation.h"
#include "CppRestOpenAPIClient/model/RunStepDetailsToolCallsObject.h"
#include <vector>
#include "CppRestOpenAPIClient/model/RunStepDetailsToolCallsObject_tool_calls_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class RunStepDetailsMessageCreationObject_message_creation;
class RunStepDetailsToolCallsObject_tool_calls_inner;

/// <summary>
/// The details of the run step.
/// </summary>
class  RunStepObject_step_details
    : public ModelBase
{
public:
    RunStepObject_step_details();
    virtual ~RunStepObject_step_details();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RunStepObject_step_details members

    /// <summary>
    /// Always &#x60;message_creation&#x60;.
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RunStepDetailsMessageCreationObject_message_creation> getMessageCreation() const;
    bool messageCreationIsSet() const;
    void unsetMessage_creation();

    void setMessageCreation(const std::shared_ptr<RunStepDetailsMessageCreationObject_message_creation>& value);

    /// <summary>
    /// An array of tool calls the run step was involved in. These can be associated with one of three types of tools: &#x60;code_interpreter&#x60;, &#x60;retrieval&#x60;, or &#x60;function&#x60;. 
    /// </summary>
    std::vector<std::shared_ptr<RunStepDetailsToolCallsObject_tool_calls_inner>>& getToolCalls();
    bool toolCallsIsSet() const;
    void unsetTool_calls();

    void setToolCalls(const std::vector<std::shared_ptr<RunStepDetailsToolCallsObject_tool_calls_inner>>& value);


protected:
    utility::string_t m_Type;
    bool m_TypeIsSet;
    std::shared_ptr<RunStepDetailsMessageCreationObject_message_creation> m_Message_creation;
    bool m_Message_creationIsSet;
    std::vector<std::shared_ptr<RunStepDetailsToolCallsObject_tool_calls_inner>> m_Tool_calls;
    bool m_Tool_callsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_RunStepObject_step_details_H_ */
