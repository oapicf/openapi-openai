/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RunStepStreamEvent.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_RunStepStreamEvent_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_RunStepStreamEvent_H_

#include <variant>

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/RunStepStreamEvent_oneOf.h"
#include "CppRestOpenAPIClient/model/RunStepStreamEvent_oneOf_5.h"
#include "CppRestOpenAPIClient/model/RunStepStreamEvent_oneOf_6.h"
#include "CppRestOpenAPIClient/model/RunStepStreamEvent_oneOf_2.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/RunStepStreamEvent_oneOf_1.h"
#include "CppRestOpenAPIClient/model/RunStepStreamEvent_oneOf_3.h"
#include "CppRestOpenAPIClient/model/RunStepStreamEvent_oneOf_4.h"
#include "CppRestOpenAPIClient/model/RunStepObject.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class RunStepObject;


class  RunStepStreamEvent
{
public:
    RunStepStreamEvent() = default;
    ~RunStepStreamEvent() = default;

    /////////////////////////////////////////////

    void validate();

    web::json::value toJson() const;

    template<typename Target>
    bool fromJson(const web::json::value& json) {
        // convert json to Target type
        Target target;
        if (!target.fromJson(json)) {
            return false;
        }

        m_variantValue = target;
        return true;
    }

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const;

    template<typename Target>
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) {
        // convert multipart to Target type
        Target target;
        if (!target.fromMultiPart(multipart, namePrefix)) {
            return false;
        }

        m_variantValue = target;
        return true;
    }

    /////////////////////////////////////////////
    /// RunStepStreamEvent members

    using VariantType = std::variant<RunStepStreamEvent_oneOf, RunStepStreamEvent_oneOf_1, RunStepStreamEvent_oneOf_2, RunStepStreamEvent_oneOf_3, RunStepStreamEvent_oneOf_4, RunStepStreamEvent_oneOf_5, RunStepStreamEvent_oneOf_6>;

    const VariantType& getVariant() const;
    void setVariant(VariantType value);

protected:
    VariantType m_variantValue;
};



}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_RunStepStreamEvent_H_ */
