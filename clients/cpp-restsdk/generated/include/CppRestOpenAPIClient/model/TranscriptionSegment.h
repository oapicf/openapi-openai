/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TranscriptionSegment.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_TranscriptionSegment_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_TranscriptionSegment_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  TranscriptionSegment
    : public ModelBase
{
public:
    TranscriptionSegment();
    virtual ~TranscriptionSegment();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// TranscriptionSegment members

    /// <summary>
    /// Unique identifier of the segment.
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// Seek offset of the segment.
    /// </summary>
    int32_t getSeek() const;
    bool seekIsSet() const;
    void unsetSeek();

    void setSeek(int32_t value);

    /// <summary>
    /// Start time of the segment in seconds.
    /// </summary>
    float getStart() const;
    bool startIsSet() const;
    void unsetStart();

    void setStart(float value);

    /// <summary>
    /// End time of the segment in seconds.
    /// </summary>
    float getEnd() const;
    bool endIsSet() const;
    void unsetEnd();

    void setEnd(float value);

    /// <summary>
    /// Text content of the segment.
    /// </summary>
    utility::string_t getText() const;
    bool textIsSet() const;
    void unsetText();

    void setText(const utility::string_t& value);

    /// <summary>
    /// Array of token IDs for the text content.
    /// </summary>
    std::vector<int32_t>& getTokens();
    bool tokensIsSet() const;
    void unsetTokens();

    void setTokens(std::vector<int32_t> value);

    /// <summary>
    /// Temperature parameter used for generating the segment.
    /// </summary>
    float getTemperature() const;
    bool temperatureIsSet() const;
    void unsetTemperature();

    void setTemperature(float value);

    /// <summary>
    /// Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
    /// </summary>
    float getAvgLogprob() const;
    bool avgLogprobIsSet() const;
    void unsetAvg_logprob();

    void setAvgLogprob(float value);

    /// <summary>
    /// Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
    /// </summary>
    float getCompressionRatio() const;
    bool compressionRatioIsSet() const;
    void unsetCompression_ratio();

    void setCompressionRatio(float value);

    /// <summary>
    /// Probability of no speech in the segment. If the value is higher than 1.0 and the &#x60;avg_logprob&#x60; is below -1, consider this segment silent.
    /// </summary>
    float getNoSpeechProb() const;
    bool noSpeechProbIsSet() const;
    void unsetNo_speech_prob();

    void setNoSpeechProb(float value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    int32_t m_Seek;
    bool m_SeekIsSet;
    float m_Start;
    bool m_StartIsSet;
    float m_End;
    bool m_EndIsSet;
    utility::string_t m_Text;
    bool m_TextIsSet;
    std::vector<int32_t> m_Tokens;
    bool m_TokensIsSet;
    float m_Temperature;
    bool m_TemperatureIsSet;
    float m_Avg_logprob;
    bool m_Avg_logprobIsSet;
    float m_Compression_ratio;
    bool m_Compression_ratioIsSet;
    float m_No_speech_prob;
    bool m_No_speech_probIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_TranscriptionSegment_H_ */
