/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateChatCompletionRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreateChatCompletionRequest::CreateChatCompletionRequest()
{
    m_ModelIsSet = false;
    m_MessagesIsSet = false;
    m_FunctionsIsSet = false;
    m_Function_callIsSet = false;
    m_Temperature = 0.0;
    m_TemperatureIsSet = false;
    m_Top_p = 0.0;
    m_Top_pIsSet = false;
    m_n = 0;
    m_nIsSet = false;
    m_Stream = false;
    m_StreamIsSet = false;
    m_StopIsSet = false;
    m_Max_tokens = 0;
    m_Max_tokensIsSet = false;
    m_Presence_penalty = 0.0;
    m_Presence_penaltyIsSet = false;
    m_Frequency_penalty = 0.0;
    m_Frequency_penaltyIsSet = false;
    m_Logit_biasIsSet = false;
    m_User = utility::conversions::to_string_t("");
    m_UserIsSet = false;
}

CreateChatCompletionRequest::~CreateChatCompletionRequest()
{
}

void CreateChatCompletionRequest::validate()
{
    // TODO: implement validation
}

web::json::value CreateChatCompletionRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ModelIsSet)
    {
        val[utility::conversions::to_string_t(U("model"))] = ModelBase::toJson(m_Model);
    }
    if(m_MessagesIsSet)
    {
        val[utility::conversions::to_string_t(U("messages"))] = ModelBase::toJson(m_Messages);
    }
    if(m_FunctionsIsSet)
    {
        val[utility::conversions::to_string_t(U("functions"))] = ModelBase::toJson(m_Functions);
    }
    if(m_Function_callIsSet)
    {
        val[utility::conversions::to_string_t(U("function_call"))] = ModelBase::toJson(m_Function_call);
    }
    if(m_TemperatureIsSet)
    {
        val[utility::conversions::to_string_t(U("temperature"))] = ModelBase::toJson(m_Temperature);
    }
    if(m_Top_pIsSet)
    {
        val[utility::conversions::to_string_t(U("top_p"))] = ModelBase::toJson(m_Top_p);
    }
    if(m_nIsSet)
    {
        val[utility::conversions::to_string_t(U("n"))] = ModelBase::toJson(m_n);
    }
    if(m_StreamIsSet)
    {
        val[utility::conversions::to_string_t(U("stream"))] = ModelBase::toJson(m_Stream);
    }
    if(m_StopIsSet)
    {
        val[utility::conversions::to_string_t(U("stop"))] = ModelBase::toJson(m_Stop);
    }
    if(m_Max_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("max_tokens"))] = ModelBase::toJson(m_Max_tokens);
    }
    if(m_Presence_penaltyIsSet)
    {
        val[utility::conversions::to_string_t(U("presence_penalty"))] = ModelBase::toJson(m_Presence_penalty);
    }
    if(m_Frequency_penaltyIsSet)
    {
        val[utility::conversions::to_string_t(U("frequency_penalty"))] = ModelBase::toJson(m_Frequency_penalty);
    }
    if(m_Logit_biasIsSet)
    {
        val[utility::conversions::to_string_t(U("logit_bias"))] = ModelBase::toJson(m_Logit_bias);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t(U("user"))] = ModelBase::toJson(m_User);
    }

    return val;
}

bool CreateChatCompletionRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("model"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("model")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateChatCompletionRequest_model> refVal_setModel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModel);
            setModel(refVal_setModel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("messages"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("messages")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ChatCompletionRequestMessage>> refVal_setMessages;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessages);
            setMessages(refVal_setMessages);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("functions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("functions")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ChatCompletionFunctions>> refVal_setFunctions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFunctions);
            setFunctions(refVal_setFunctions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("function_call"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("function_call")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateChatCompletionRequest_function_call> refVal_setFunctionCall;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFunctionCall);
            setFunctionCall(refVal_setFunctionCall);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("temperature"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("temperature")));
        if(!fieldValue.is_null())
        {
            double refVal_setTemperature;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemperature);
            setTemperature(refVal_setTemperature);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("top_p"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("top_p")));
        if(!fieldValue.is_null())
        {
            double refVal_setTopP;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTopP);
            setTopP(refVal_setTopP);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("n"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("n")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setN);
            setN(refVal_setN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stream"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stream")));
        if(!fieldValue.is_null())
        {
            bool refVal_setStream;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStream);
            setStream(refVal_setStream);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stop"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stop")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateChatCompletionRequest_stop> refVal_setStop;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStop);
            setStop(refVal_setStop);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_tokens")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxTokens);
            setMaxTokens(refVal_setMaxTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("presence_penalty"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("presence_penalty")));
        if(!fieldValue.is_null())
        {
            double refVal_setPresencePenalty;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPresencePenalty);
            setPresencePenalty(refVal_setPresencePenalty);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("frequency_penalty"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("frequency_penalty")));
        if(!fieldValue.is_null())
        {
            double refVal_setFrequencyPenalty;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrequencyPenalty);
            setFrequencyPenalty(refVal_setFrequencyPenalty);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("logit_bias"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("logit_bias")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setLogitBias;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogitBias);
            setLogitBias(refVal_setLogitBias);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUser);
            setUser(refVal_setUser);
        }
    }
    return ok;
}

void CreateChatCompletionRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ModelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("model")), m_Model));
    }
    if(m_MessagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("messages")), m_Messages));
    }
    if(m_FunctionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("functions")), m_Functions));
    }
    if(m_Function_callIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("function_call")), m_Function_call));
    }
    if(m_TemperatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("temperature")), m_Temperature));
    }
    if(m_Top_pIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("top_p")), m_Top_p));
    }
    if(m_nIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("n")), m_n));
    }
    if(m_StreamIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stream")), m_Stream));
    }
    if(m_StopIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stop")), m_Stop));
    }
    if(m_Max_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_tokens")), m_Max_tokens));
    }
    if(m_Presence_penaltyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("presence_penalty")), m_Presence_penalty));
    }
    if(m_Frequency_penaltyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("frequency_penalty")), m_Frequency_penalty));
    }
    if(m_Logit_biasIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("logit_bias")), m_Logit_bias));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user")), m_User));
    }
}

bool CreateChatCompletionRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("model"))))
    {
        std::shared_ptr<CreateChatCompletionRequest_model> refVal_setModel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("model"))), refVal_setModel );
        setModel(refVal_setModel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("messages"))))
    {
        std::vector<std::shared_ptr<ChatCompletionRequestMessage>> refVal_setMessages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("messages"))), refVal_setMessages );
        setMessages(refVal_setMessages);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("functions"))))
    {
        std::vector<std::shared_ptr<ChatCompletionFunctions>> refVal_setFunctions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("functions"))), refVal_setFunctions );
        setFunctions(refVal_setFunctions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("function_call"))))
    {
        std::shared_ptr<CreateChatCompletionRequest_function_call> refVal_setFunctionCall;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("function_call"))), refVal_setFunctionCall );
        setFunctionCall(refVal_setFunctionCall);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("temperature"))))
    {
        double refVal_setTemperature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("temperature"))), refVal_setTemperature );
        setTemperature(refVal_setTemperature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("top_p"))))
    {
        double refVal_setTopP;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("top_p"))), refVal_setTopP );
        setTopP(refVal_setTopP);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("n"))))
    {
        int32_t refVal_setN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("n"))), refVal_setN );
        setN(refVal_setN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stream"))))
    {
        bool refVal_setStream;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stream"))), refVal_setStream );
        setStream(refVal_setStream);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stop"))))
    {
        std::shared_ptr<CreateChatCompletionRequest_stop> refVal_setStop;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stop"))), refVal_setStop );
        setStop(refVal_setStop);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_tokens"))))
    {
        int32_t refVal_setMaxTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_tokens"))), refVal_setMaxTokens );
        setMaxTokens(refVal_setMaxTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("presence_penalty"))))
    {
        double refVal_setPresencePenalty;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("presence_penalty"))), refVal_setPresencePenalty );
        setPresencePenalty(refVal_setPresencePenalty);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("frequency_penalty"))))
    {
        double refVal_setFrequencyPenalty;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("frequency_penalty"))), refVal_setFrequencyPenalty );
        setFrequencyPenalty(refVal_setFrequencyPenalty);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("logit_bias"))))
    {
        std::shared_ptr<Object> refVal_setLogitBias;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("logit_bias"))), refVal_setLogitBias );
        setLogitBias(refVal_setLogitBias);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user"))))
    {
        utility::string_t refVal_setUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user"))), refVal_setUser );
        setUser(refVal_setUser);
    }
    return ok;
}

std::shared_ptr<CreateChatCompletionRequest_model> CreateChatCompletionRequest::getModel() const
{
    return m_Model;
}

void CreateChatCompletionRequest::setModel(const std::shared_ptr<CreateChatCompletionRequest_model>& value)
{
    m_Model = value;
    m_ModelIsSet = true;
}

bool CreateChatCompletionRequest::modelIsSet() const
{
    return m_ModelIsSet;
}

void CreateChatCompletionRequest::unsetModel()
{
    m_ModelIsSet = false;
}
std::vector<std::shared_ptr<ChatCompletionRequestMessage>>& CreateChatCompletionRequest::getMessages()
{
    return m_Messages;
}

void CreateChatCompletionRequest::setMessages(const std::vector<std::shared_ptr<ChatCompletionRequestMessage>>& value)
{
    m_Messages = value;
    m_MessagesIsSet = true;
}

bool CreateChatCompletionRequest::messagesIsSet() const
{
    return m_MessagesIsSet;
}

void CreateChatCompletionRequest::unsetMessages()
{
    m_MessagesIsSet = false;
}
std::vector<std::shared_ptr<ChatCompletionFunctions>>& CreateChatCompletionRequest::getFunctions()
{
    return m_Functions;
}

void CreateChatCompletionRequest::setFunctions(const std::vector<std::shared_ptr<ChatCompletionFunctions>>& value)
{
    m_Functions = value;
    m_FunctionsIsSet = true;
}

bool CreateChatCompletionRequest::functionsIsSet() const
{
    return m_FunctionsIsSet;
}

void CreateChatCompletionRequest::unsetFunctions()
{
    m_FunctionsIsSet = false;
}
std::shared_ptr<CreateChatCompletionRequest_function_call> CreateChatCompletionRequest::getFunctionCall() const
{
    return m_Function_call;
}

void CreateChatCompletionRequest::setFunctionCall(const std::shared_ptr<CreateChatCompletionRequest_function_call>& value)
{
    m_Function_call = value;
    m_Function_callIsSet = true;
}

bool CreateChatCompletionRequest::functionCallIsSet() const
{
    return m_Function_callIsSet;
}

void CreateChatCompletionRequest::unsetFunction_call()
{
    m_Function_callIsSet = false;
}
double CreateChatCompletionRequest::getTemperature() const
{
    return m_Temperature;
}

void CreateChatCompletionRequest::setTemperature(double value)
{
    m_Temperature = value;
    m_TemperatureIsSet = true;
}

bool CreateChatCompletionRequest::temperatureIsSet() const
{
    return m_TemperatureIsSet;
}

void CreateChatCompletionRequest::unsetTemperature()
{
    m_TemperatureIsSet = false;
}
double CreateChatCompletionRequest::getTopP() const
{
    return m_Top_p;
}

void CreateChatCompletionRequest::setTopP(double value)
{
    m_Top_p = value;
    m_Top_pIsSet = true;
}

bool CreateChatCompletionRequest::topPIsSet() const
{
    return m_Top_pIsSet;
}

void CreateChatCompletionRequest::unsetTop_p()
{
    m_Top_pIsSet = false;
}
int32_t CreateChatCompletionRequest::getN() const
{
    return m_n;
}

void CreateChatCompletionRequest::setN(int32_t value)
{
    m_n = value;
    m_nIsSet = true;
}

bool CreateChatCompletionRequest::NIsSet() const
{
    return m_nIsSet;
}

void CreateChatCompletionRequest::unsetn()
{
    m_nIsSet = false;
}
bool CreateChatCompletionRequest::isStream() const
{
    return m_Stream;
}

void CreateChatCompletionRequest::setStream(bool value)
{
    m_Stream = value;
    m_StreamIsSet = true;
}

bool CreateChatCompletionRequest::streamIsSet() const
{
    return m_StreamIsSet;
}

void CreateChatCompletionRequest::unsetStream()
{
    m_StreamIsSet = false;
}
std::shared_ptr<CreateChatCompletionRequest_stop> CreateChatCompletionRequest::getStop() const
{
    return m_Stop;
}

void CreateChatCompletionRequest::setStop(const std::shared_ptr<CreateChatCompletionRequest_stop>& value)
{
    m_Stop = value;
    m_StopIsSet = true;
}

bool CreateChatCompletionRequest::stopIsSet() const
{
    return m_StopIsSet;
}

void CreateChatCompletionRequest::unsetStop()
{
    m_StopIsSet = false;
}
int32_t CreateChatCompletionRequest::getMaxTokens() const
{
    return m_Max_tokens;
}

void CreateChatCompletionRequest::setMaxTokens(int32_t value)
{
    m_Max_tokens = value;
    m_Max_tokensIsSet = true;
}

bool CreateChatCompletionRequest::maxTokensIsSet() const
{
    return m_Max_tokensIsSet;
}

void CreateChatCompletionRequest::unsetMax_tokens()
{
    m_Max_tokensIsSet = false;
}
double CreateChatCompletionRequest::getPresencePenalty() const
{
    return m_Presence_penalty;
}

void CreateChatCompletionRequest::setPresencePenalty(double value)
{
    m_Presence_penalty = value;
    m_Presence_penaltyIsSet = true;
}

bool CreateChatCompletionRequest::presencePenaltyIsSet() const
{
    return m_Presence_penaltyIsSet;
}

void CreateChatCompletionRequest::unsetPresence_penalty()
{
    m_Presence_penaltyIsSet = false;
}
double CreateChatCompletionRequest::getFrequencyPenalty() const
{
    return m_Frequency_penalty;
}

void CreateChatCompletionRequest::setFrequencyPenalty(double value)
{
    m_Frequency_penalty = value;
    m_Frequency_penaltyIsSet = true;
}

bool CreateChatCompletionRequest::frequencyPenaltyIsSet() const
{
    return m_Frequency_penaltyIsSet;
}

void CreateChatCompletionRequest::unsetFrequency_penalty()
{
    m_Frequency_penaltyIsSet = false;
}
std::shared_ptr<Object> CreateChatCompletionRequest::getLogitBias() const
{
    return m_Logit_bias;
}

void CreateChatCompletionRequest::setLogitBias(const std::shared_ptr<Object>& value)
{
    m_Logit_bias = value;
    m_Logit_biasIsSet = true;
}

bool CreateChatCompletionRequest::logitBiasIsSet() const
{
    return m_Logit_biasIsSet;
}

void CreateChatCompletionRequest::unsetLogit_bias()
{
    m_Logit_biasIsSet = false;
}
utility::string_t CreateChatCompletionRequest::getUser() const
{
    return m_User;
}

void CreateChatCompletionRequest::setUser(const utility::string_t& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool CreateChatCompletionRequest::userIsSet() const
{
    return m_UserIsSet;
}

void CreateChatCompletionRequest::unsetUser()
{
    m_UserIsSet = false;
}
}
}
}
}


