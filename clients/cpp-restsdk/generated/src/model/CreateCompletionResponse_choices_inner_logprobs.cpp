/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateCompletionResponse_choices_inner_logprobs.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreateCompletionResponse_choices_inner_logprobs::CreateCompletionResponse_choices_inner_logprobs()
{
    m_TokensIsSet = false;
    m_Token_logprobsIsSet = false;
    m_Top_logprobsIsSet = false;
    m_Text_offsetIsSet = false;
}

CreateCompletionResponse_choices_inner_logprobs::~CreateCompletionResponse_choices_inner_logprobs()
{
}

void CreateCompletionResponse_choices_inner_logprobs::validate()
{
    // TODO: implement validation
}

web::json::value CreateCompletionResponse_choices_inner_logprobs::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TokensIsSet)
    {
        val[utility::conversions::to_string_t(U("tokens"))] = ModelBase::toJson(m_Tokens);
    }
    if(m_Token_logprobsIsSet)
    {
        val[utility::conversions::to_string_t(U("token_logprobs"))] = ModelBase::toJson(m_Token_logprobs);
    }
    if(m_Top_logprobsIsSet)
    {
        val[utility::conversions::to_string_t(U("top_logprobs"))] = ModelBase::toJson(m_Top_logprobs);
    }
    if(m_Text_offsetIsSet)
    {
        val[utility::conversions::to_string_t(U("text_offset"))] = ModelBase::toJson(m_Text_offset);
    }

    return val;
}

bool CreateCompletionResponse_choices_inner_logprobs::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tokens")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokens);
            setTokens(refVal_setTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token_logprobs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_logprobs")));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_setTokenLogprobs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenLogprobs);
            setTokenLogprobs(refVal_setTokenLogprobs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("top_logprobs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("top_logprobs")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Object>> refVal_setTopLogprobs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTopLogprobs);
            setTopLogprobs(refVal_setTopLogprobs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("text_offset"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("text_offset")));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_setTextOffset;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTextOffset);
            setTextOffset(refVal_setTextOffset);
        }
    }
    return ok;
}

void CreateCompletionResponse_choices_inner_logprobs::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tokens")), m_Tokens));
    }
    if(m_Token_logprobsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_logprobs")), m_Token_logprobs));
    }
    if(m_Top_logprobsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("top_logprobs")), m_Top_logprobs));
    }
    if(m_Text_offsetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("text_offset")), m_Text_offset));
    }
}

bool CreateCompletionResponse_choices_inner_logprobs::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("tokens"))))
    {
        std::vector<utility::string_t> refVal_setTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tokens"))), refVal_setTokens );
        setTokens(refVal_setTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token_logprobs"))))
    {
        std::vector<double> refVal_setTokenLogprobs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_logprobs"))), refVal_setTokenLogprobs );
        setTokenLogprobs(refVal_setTokenLogprobs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("top_logprobs"))))
    {
        std::vector<std::shared_ptr<Object>> refVal_setTopLogprobs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("top_logprobs"))), refVal_setTopLogprobs );
        setTopLogprobs(refVal_setTopLogprobs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("text_offset"))))
    {
        std::vector<int32_t> refVal_setTextOffset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("text_offset"))), refVal_setTextOffset );
        setTextOffset(refVal_setTextOffset);
    }
    return ok;
}

std::vector<utility::string_t>& CreateCompletionResponse_choices_inner_logprobs::getTokens()
{
    return m_Tokens;
}

void CreateCompletionResponse_choices_inner_logprobs::setTokens(const std::vector<utility::string_t>& value)
{
    m_Tokens = value;
    m_TokensIsSet = true;
}

bool CreateCompletionResponse_choices_inner_logprobs::tokensIsSet() const
{
    return m_TokensIsSet;
}

void CreateCompletionResponse_choices_inner_logprobs::unsetTokens()
{
    m_TokensIsSet = false;
}
std::vector<double>& CreateCompletionResponse_choices_inner_logprobs::getTokenLogprobs()
{
    return m_Token_logprobs;
}

void CreateCompletionResponse_choices_inner_logprobs::setTokenLogprobs(std::vector<double> value)
{
    m_Token_logprobs = value;
    m_Token_logprobsIsSet = true;
}

bool CreateCompletionResponse_choices_inner_logprobs::tokenLogprobsIsSet() const
{
    return m_Token_logprobsIsSet;
}

void CreateCompletionResponse_choices_inner_logprobs::unsetToken_logprobs()
{
    m_Token_logprobsIsSet = false;
}
std::vector<std::shared_ptr<Object>>& CreateCompletionResponse_choices_inner_logprobs::getTopLogprobs()
{
    return m_Top_logprobs;
}

void CreateCompletionResponse_choices_inner_logprobs::setTopLogprobs(const std::vector<std::shared_ptr<Object>>& value)
{
    m_Top_logprobs = value;
    m_Top_logprobsIsSet = true;
}

bool CreateCompletionResponse_choices_inner_logprobs::topLogprobsIsSet() const
{
    return m_Top_logprobsIsSet;
}

void CreateCompletionResponse_choices_inner_logprobs::unsetTop_logprobs()
{
    m_Top_logprobsIsSet = false;
}
std::vector<int32_t>& CreateCompletionResponse_choices_inner_logprobs::getTextOffset()
{
    return m_Text_offset;
}

void CreateCompletionResponse_choices_inner_logprobs::setTextOffset(std::vector<int32_t> value)
{
    m_Text_offset = value;
    m_Text_offsetIsSet = true;
}

bool CreateCompletionResponse_choices_inner_logprobs::textOffsetIsSet() const
{
    return m_Text_offsetIsSet;
}

void CreateCompletionResponse_choices_inner_logprobs::unsetText_offset()
{
    m_Text_offsetIsSet = false;
}
}
}
}
}


