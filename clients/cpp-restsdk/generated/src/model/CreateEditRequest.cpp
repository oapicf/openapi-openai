/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateEditRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreateEditRequest::CreateEditRequest()
{
    m_ModelIsSet = false;
    m_Input = utility::conversions::to_string_t("");
    m_InputIsSet = false;
    m_Instruction = utility::conversions::to_string_t("");
    m_InstructionIsSet = false;
    m_n = 0;
    m_nIsSet = false;
    m_Temperature = 0.0;
    m_TemperatureIsSet = false;
    m_Top_p = 0.0;
    m_Top_pIsSet = false;
}

CreateEditRequest::~CreateEditRequest()
{
}

void CreateEditRequest::validate()
{
    // TODO: implement validation
}

web::json::value CreateEditRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ModelIsSet)
    {
        val[utility::conversions::to_string_t(U("model"))] = ModelBase::toJson(m_Model);
    }
    if(m_InputIsSet)
    {
        val[utility::conversions::to_string_t(U("input"))] = ModelBase::toJson(m_Input);
    }
    if(m_InstructionIsSet)
    {
        val[utility::conversions::to_string_t(U("instruction"))] = ModelBase::toJson(m_Instruction);
    }
    if(m_nIsSet)
    {
        val[utility::conversions::to_string_t(U("n"))] = ModelBase::toJson(m_n);
    }
    if(m_TemperatureIsSet)
    {
        val[utility::conversions::to_string_t(U("temperature"))] = ModelBase::toJson(m_Temperature);
    }
    if(m_Top_pIsSet)
    {
        val[utility::conversions::to_string_t(U("top_p"))] = ModelBase::toJson(m_Top_p);
    }

    return val;
}

bool CreateEditRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("model"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("model")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateEditRequest_model> refVal_setModel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModel);
            setModel(refVal_setModel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("input"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("input")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInput;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInput);
            setInput(refVal_setInput);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("instruction"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("instruction")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInstruction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInstruction);
            setInstruction(refVal_setInstruction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("n"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("n")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setN);
            setN(refVal_setN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("temperature"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("temperature")));
        if(!fieldValue.is_null())
        {
            double refVal_setTemperature;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemperature);
            setTemperature(refVal_setTemperature);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("top_p"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("top_p")));
        if(!fieldValue.is_null())
        {
            double refVal_setTopP;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTopP);
            setTopP(refVal_setTopP);
        }
    }
    return ok;
}

void CreateEditRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ModelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("model")), m_Model));
    }
    if(m_InputIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("input")), m_Input));
    }
    if(m_InstructionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("instruction")), m_Instruction));
    }
    if(m_nIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("n")), m_n));
    }
    if(m_TemperatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("temperature")), m_Temperature));
    }
    if(m_Top_pIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("top_p")), m_Top_p));
    }
}

bool CreateEditRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("model"))))
    {
        std::shared_ptr<CreateEditRequest_model> refVal_setModel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("model"))), refVal_setModel );
        setModel(refVal_setModel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("input"))))
    {
        utility::string_t refVal_setInput;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("input"))), refVal_setInput );
        setInput(refVal_setInput);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("instruction"))))
    {
        utility::string_t refVal_setInstruction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("instruction"))), refVal_setInstruction );
        setInstruction(refVal_setInstruction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("n"))))
    {
        int32_t refVal_setN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("n"))), refVal_setN );
        setN(refVal_setN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("temperature"))))
    {
        double refVal_setTemperature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("temperature"))), refVal_setTemperature );
        setTemperature(refVal_setTemperature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("top_p"))))
    {
        double refVal_setTopP;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("top_p"))), refVal_setTopP );
        setTopP(refVal_setTopP);
    }
    return ok;
}

std::shared_ptr<CreateEditRequest_model> CreateEditRequest::getModel() const
{
    return m_Model;
}

void CreateEditRequest::setModel(const std::shared_ptr<CreateEditRequest_model>& value)
{
    m_Model = value;
    m_ModelIsSet = true;
}

bool CreateEditRequest::modelIsSet() const
{
    return m_ModelIsSet;
}

void CreateEditRequest::unsetModel()
{
    m_ModelIsSet = false;
}
utility::string_t CreateEditRequest::getInput() const
{
    return m_Input;
}

void CreateEditRequest::setInput(const utility::string_t& value)
{
    m_Input = value;
    m_InputIsSet = true;
}

bool CreateEditRequest::inputIsSet() const
{
    return m_InputIsSet;
}

void CreateEditRequest::unsetInput()
{
    m_InputIsSet = false;
}
utility::string_t CreateEditRequest::getInstruction() const
{
    return m_Instruction;
}

void CreateEditRequest::setInstruction(const utility::string_t& value)
{
    m_Instruction = value;
    m_InstructionIsSet = true;
}

bool CreateEditRequest::instructionIsSet() const
{
    return m_InstructionIsSet;
}

void CreateEditRequest::unsetInstruction()
{
    m_InstructionIsSet = false;
}
int32_t CreateEditRequest::getN() const
{
    return m_n;
}

void CreateEditRequest::setN(int32_t value)
{
    m_n = value;
    m_nIsSet = true;
}

bool CreateEditRequest::NIsSet() const
{
    return m_nIsSet;
}

void CreateEditRequest::unsetn()
{
    m_nIsSet = false;
}
double CreateEditRequest::getTemperature() const
{
    return m_Temperature;
}

void CreateEditRequest::setTemperature(double value)
{
    m_Temperature = value;
    m_TemperatureIsSet = true;
}

bool CreateEditRequest::temperatureIsSet() const
{
    return m_TemperatureIsSet;
}

void CreateEditRequest::unsetTemperature()
{
    m_TemperatureIsSet = false;
}
double CreateEditRequest::getTopP() const
{
    return m_Top_p;
}

void CreateEditRequest::setTopP(double value)
{
    m_Top_p = value;
    m_Top_pIsSet = true;
}

bool CreateEditRequest::topPIsSet() const
{
    return m_Top_pIsSet;
}

void CreateEditRequest::unsetTop_p()
{
    m_Top_pIsSet = false;
}
}
}
}
}


