/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateEmbeddingResponse_data_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreateEmbeddingResponse_data_inner::CreateEmbeddingResponse_data_inner()
{
    m_Index = 0;
    m_IndexIsSet = false;
    m_object = utility::conversions::to_string_t("");
    m_objectIsSet = false;
    m_EmbeddingIsSet = false;
}

CreateEmbeddingResponse_data_inner::~CreateEmbeddingResponse_data_inner()
{
}

void CreateEmbeddingResponse_data_inner::validate()
{
    // TODO: implement validation
}

web::json::value CreateEmbeddingResponse_data_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IndexIsSet)
    {
        val[utility::conversions::to_string_t(U("index"))] = ModelBase::toJson(m_Index);
    }
    if(m_objectIsSet)
    {
        val[utility::conversions::to_string_t(U("object"))] = ModelBase::toJson(m_object);
    }
    if(m_EmbeddingIsSet)
    {
        val[utility::conversions::to_string_t(U("embedding"))] = ModelBase::toJson(m_Embedding);
    }

    return val;
}

bool CreateEmbeddingResponse_data_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("index"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("index")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIndex);
            setIndex(refVal_setIndex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("object"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("object")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setObject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setObject);
            setObject(refVal_setObject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("embedding"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("embedding")));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_setEmbedding;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmbedding);
            setEmbedding(refVal_setEmbedding);
        }
    }
    return ok;
}

void CreateEmbeddingResponse_data_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IndexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("index")), m_Index));
    }
    if(m_objectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("object")), m_object));
    }
    if(m_EmbeddingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("embedding")), m_Embedding));
    }
}

bool CreateEmbeddingResponse_data_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("index"))))
    {
        int32_t refVal_setIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("index"))), refVal_setIndex );
        setIndex(refVal_setIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("object"))))
    {
        utility::string_t refVal_setObject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("object"))), refVal_setObject );
        setObject(refVal_setObject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("embedding"))))
    {
        std::vector<double> refVal_setEmbedding;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("embedding"))), refVal_setEmbedding );
        setEmbedding(refVal_setEmbedding);
    }
    return ok;
}

int32_t CreateEmbeddingResponse_data_inner::getIndex() const
{
    return m_Index;
}

void CreateEmbeddingResponse_data_inner::setIndex(int32_t value)
{
    m_Index = value;
    m_IndexIsSet = true;
}

bool CreateEmbeddingResponse_data_inner::indexIsSet() const
{
    return m_IndexIsSet;
}

void CreateEmbeddingResponse_data_inner::unsetIndex()
{
    m_IndexIsSet = false;
}
utility::string_t CreateEmbeddingResponse_data_inner::getObject() const
{
    return m_object;
}

void CreateEmbeddingResponse_data_inner::setObject(const utility::string_t& value)
{
    m_object = value;
    m_objectIsSet = true;
}

bool CreateEmbeddingResponse_data_inner::objectIsSet() const
{
    return m_objectIsSet;
}

void CreateEmbeddingResponse_data_inner::unsetobject()
{
    m_objectIsSet = false;
}
std::vector<double>& CreateEmbeddingResponse_data_inner::getEmbedding()
{
    return m_Embedding;
}

void CreateEmbeddingResponse_data_inner::setEmbedding(std::vector<double> value)
{
    m_Embedding = value;
    m_EmbeddingIsSet = true;
}

bool CreateEmbeddingResponse_data_inner::embeddingIsSet() const
{
    return m_EmbeddingIsSet;
}

void CreateEmbeddingResponse_data_inner::unsetEmbedding()
{
    m_EmbeddingIsSet = false;
}
}
}
}
}


