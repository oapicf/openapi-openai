/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateFineTuneRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreateFineTuneRequest::CreateFineTuneRequest()
{
    m_Training_file = utility::conversions::to_string_t("");
    m_Training_fileIsSet = false;
    m_Validation_file = utility::conversions::to_string_t("");
    m_Validation_fileIsSet = false;
    m_ModelIsSet = false;
    m_N_epochs = 0;
    m_N_epochsIsSet = false;
    m_Batch_size = 0;
    m_Batch_sizeIsSet = false;
    m_Learning_rate_multiplier = 0.0;
    m_Learning_rate_multiplierIsSet = false;
    m_Prompt_loss_weight = 0.0;
    m_Prompt_loss_weightIsSet = false;
    m_Compute_classification_metrics = false;
    m_Compute_classification_metricsIsSet = false;
    m_Classification_n_classes = 0;
    m_Classification_n_classesIsSet = false;
    m_Classification_positive_class = utility::conversions::to_string_t("");
    m_Classification_positive_classIsSet = false;
    m_Classification_betasIsSet = false;
    m_Suffix = utility::conversions::to_string_t("");
    m_SuffixIsSet = false;
}

CreateFineTuneRequest::~CreateFineTuneRequest()
{
}

void CreateFineTuneRequest::validate()
{
    // TODO: implement validation
}

web::json::value CreateFineTuneRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Training_fileIsSet)
    {
        val[utility::conversions::to_string_t(U("training_file"))] = ModelBase::toJson(m_Training_file);
    }
    if(m_Validation_fileIsSet)
    {
        val[utility::conversions::to_string_t(U("validation_file"))] = ModelBase::toJson(m_Validation_file);
    }
    if(m_ModelIsSet)
    {
        val[utility::conversions::to_string_t(U("model"))] = ModelBase::toJson(m_Model);
    }
    if(m_N_epochsIsSet)
    {
        val[utility::conversions::to_string_t(U("n_epochs"))] = ModelBase::toJson(m_N_epochs);
    }
    if(m_Batch_sizeIsSet)
    {
        val[utility::conversions::to_string_t(U("batch_size"))] = ModelBase::toJson(m_Batch_size);
    }
    if(m_Learning_rate_multiplierIsSet)
    {
        val[utility::conversions::to_string_t(U("learning_rate_multiplier"))] = ModelBase::toJson(m_Learning_rate_multiplier);
    }
    if(m_Prompt_loss_weightIsSet)
    {
        val[utility::conversions::to_string_t(U("prompt_loss_weight"))] = ModelBase::toJson(m_Prompt_loss_weight);
    }
    if(m_Compute_classification_metricsIsSet)
    {
        val[utility::conversions::to_string_t(U("compute_classification_metrics"))] = ModelBase::toJson(m_Compute_classification_metrics);
    }
    if(m_Classification_n_classesIsSet)
    {
        val[utility::conversions::to_string_t(U("classification_n_classes"))] = ModelBase::toJson(m_Classification_n_classes);
    }
    if(m_Classification_positive_classIsSet)
    {
        val[utility::conversions::to_string_t(U("classification_positive_class"))] = ModelBase::toJson(m_Classification_positive_class);
    }
    if(m_Classification_betasIsSet)
    {
        val[utility::conversions::to_string_t(U("classification_betas"))] = ModelBase::toJson(m_Classification_betas);
    }
    if(m_SuffixIsSet)
    {
        val[utility::conversions::to_string_t(U("suffix"))] = ModelBase::toJson(m_Suffix);
    }

    return val;
}

bool CreateFineTuneRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("training_file"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("training_file")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTrainingFile;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrainingFile);
            setTrainingFile(refVal_setTrainingFile);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("validation_file"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("validation_file")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValidationFile;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValidationFile);
            setValidationFile(refVal_setValidationFile);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("model"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("model")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateFineTuneRequest_model> refVal_setModel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModel);
            setModel(refVal_setModel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("n_epochs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("n_epochs")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNEpochs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNEpochs);
            setNEpochs(refVal_setNEpochs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("batch_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("batch_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBatchSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBatchSize);
            setBatchSize(refVal_setBatchSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("learning_rate_multiplier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("learning_rate_multiplier")));
        if(!fieldValue.is_null())
        {
            double refVal_setLearningRateMultiplier;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLearningRateMultiplier);
            setLearningRateMultiplier(refVal_setLearningRateMultiplier);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("prompt_loss_weight"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("prompt_loss_weight")));
        if(!fieldValue.is_null())
        {
            double refVal_setPromptLossWeight;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPromptLossWeight);
            setPromptLossWeight(refVal_setPromptLossWeight);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("compute_classification_metrics"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("compute_classification_metrics")));
        if(!fieldValue.is_null())
        {
            bool refVal_setComputeClassificationMetrics;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComputeClassificationMetrics);
            setComputeClassificationMetrics(refVal_setComputeClassificationMetrics);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("classification_n_classes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("classification_n_classes")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setClassificationNClasses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClassificationNClasses);
            setClassificationNClasses(refVal_setClassificationNClasses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("classification_positive_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("classification_positive_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClassificationPositiveClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClassificationPositiveClass);
            setClassificationPositiveClass(refVal_setClassificationPositiveClass);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("classification_betas"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("classification_betas")));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_setClassificationBetas;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClassificationBetas);
            setClassificationBetas(refVal_setClassificationBetas);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("suffix"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("suffix")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSuffix;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSuffix);
            setSuffix(refVal_setSuffix);
        }
    }
    return ok;
}

void CreateFineTuneRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Training_fileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("training_file")), m_Training_file));
    }
    if(m_Validation_fileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("validation_file")), m_Validation_file));
    }
    if(m_ModelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("model")), m_Model));
    }
    if(m_N_epochsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("n_epochs")), m_N_epochs));
    }
    if(m_Batch_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("batch_size")), m_Batch_size));
    }
    if(m_Learning_rate_multiplierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("learning_rate_multiplier")), m_Learning_rate_multiplier));
    }
    if(m_Prompt_loss_weightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("prompt_loss_weight")), m_Prompt_loss_weight));
    }
    if(m_Compute_classification_metricsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("compute_classification_metrics")), m_Compute_classification_metrics));
    }
    if(m_Classification_n_classesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("classification_n_classes")), m_Classification_n_classes));
    }
    if(m_Classification_positive_classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("classification_positive_class")), m_Classification_positive_class));
    }
    if(m_Classification_betasIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("classification_betas")), m_Classification_betas));
    }
    if(m_SuffixIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("suffix")), m_Suffix));
    }
}

bool CreateFineTuneRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("training_file"))))
    {
        utility::string_t refVal_setTrainingFile;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("training_file"))), refVal_setTrainingFile );
        setTrainingFile(refVal_setTrainingFile);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("validation_file"))))
    {
        utility::string_t refVal_setValidationFile;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("validation_file"))), refVal_setValidationFile );
        setValidationFile(refVal_setValidationFile);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("model"))))
    {
        std::shared_ptr<CreateFineTuneRequest_model> refVal_setModel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("model"))), refVal_setModel );
        setModel(refVal_setModel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("n_epochs"))))
    {
        int32_t refVal_setNEpochs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("n_epochs"))), refVal_setNEpochs );
        setNEpochs(refVal_setNEpochs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("batch_size"))))
    {
        int32_t refVal_setBatchSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("batch_size"))), refVal_setBatchSize );
        setBatchSize(refVal_setBatchSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("learning_rate_multiplier"))))
    {
        double refVal_setLearningRateMultiplier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("learning_rate_multiplier"))), refVal_setLearningRateMultiplier );
        setLearningRateMultiplier(refVal_setLearningRateMultiplier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("prompt_loss_weight"))))
    {
        double refVal_setPromptLossWeight;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("prompt_loss_weight"))), refVal_setPromptLossWeight );
        setPromptLossWeight(refVal_setPromptLossWeight);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("compute_classification_metrics"))))
    {
        bool refVal_setComputeClassificationMetrics;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("compute_classification_metrics"))), refVal_setComputeClassificationMetrics );
        setComputeClassificationMetrics(refVal_setComputeClassificationMetrics);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("classification_n_classes"))))
    {
        int32_t refVal_setClassificationNClasses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("classification_n_classes"))), refVal_setClassificationNClasses );
        setClassificationNClasses(refVal_setClassificationNClasses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("classification_positive_class"))))
    {
        utility::string_t refVal_setClassificationPositiveClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("classification_positive_class"))), refVal_setClassificationPositiveClass );
        setClassificationPositiveClass(refVal_setClassificationPositiveClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("classification_betas"))))
    {
        std::vector<double> refVal_setClassificationBetas;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("classification_betas"))), refVal_setClassificationBetas );
        setClassificationBetas(refVal_setClassificationBetas);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("suffix"))))
    {
        utility::string_t refVal_setSuffix;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("suffix"))), refVal_setSuffix );
        setSuffix(refVal_setSuffix);
    }
    return ok;
}

utility::string_t CreateFineTuneRequest::getTrainingFile() const
{
    return m_Training_file;
}

void CreateFineTuneRequest::setTrainingFile(const utility::string_t& value)
{
    m_Training_file = value;
    m_Training_fileIsSet = true;
}

bool CreateFineTuneRequest::trainingFileIsSet() const
{
    return m_Training_fileIsSet;
}

void CreateFineTuneRequest::unsetTraining_file()
{
    m_Training_fileIsSet = false;
}
utility::string_t CreateFineTuneRequest::getValidationFile() const
{
    return m_Validation_file;
}

void CreateFineTuneRequest::setValidationFile(const utility::string_t& value)
{
    m_Validation_file = value;
    m_Validation_fileIsSet = true;
}

bool CreateFineTuneRequest::validationFileIsSet() const
{
    return m_Validation_fileIsSet;
}

void CreateFineTuneRequest::unsetValidation_file()
{
    m_Validation_fileIsSet = false;
}
std::shared_ptr<CreateFineTuneRequest_model> CreateFineTuneRequest::getModel() const
{
    return m_Model;
}

void CreateFineTuneRequest::setModel(const std::shared_ptr<CreateFineTuneRequest_model>& value)
{
    m_Model = value;
    m_ModelIsSet = true;
}

bool CreateFineTuneRequest::modelIsSet() const
{
    return m_ModelIsSet;
}

void CreateFineTuneRequest::unsetModel()
{
    m_ModelIsSet = false;
}
int32_t CreateFineTuneRequest::getNEpochs() const
{
    return m_N_epochs;
}

void CreateFineTuneRequest::setNEpochs(int32_t value)
{
    m_N_epochs = value;
    m_N_epochsIsSet = true;
}

bool CreateFineTuneRequest::nEpochsIsSet() const
{
    return m_N_epochsIsSet;
}

void CreateFineTuneRequest::unsetN_epochs()
{
    m_N_epochsIsSet = false;
}
int32_t CreateFineTuneRequest::getBatchSize() const
{
    return m_Batch_size;
}

void CreateFineTuneRequest::setBatchSize(int32_t value)
{
    m_Batch_size = value;
    m_Batch_sizeIsSet = true;
}

bool CreateFineTuneRequest::batchSizeIsSet() const
{
    return m_Batch_sizeIsSet;
}

void CreateFineTuneRequest::unsetBatch_size()
{
    m_Batch_sizeIsSet = false;
}
double CreateFineTuneRequest::getLearningRateMultiplier() const
{
    return m_Learning_rate_multiplier;
}

void CreateFineTuneRequest::setLearningRateMultiplier(double value)
{
    m_Learning_rate_multiplier = value;
    m_Learning_rate_multiplierIsSet = true;
}

bool CreateFineTuneRequest::learningRateMultiplierIsSet() const
{
    return m_Learning_rate_multiplierIsSet;
}

void CreateFineTuneRequest::unsetLearning_rate_multiplier()
{
    m_Learning_rate_multiplierIsSet = false;
}
double CreateFineTuneRequest::getPromptLossWeight() const
{
    return m_Prompt_loss_weight;
}

void CreateFineTuneRequest::setPromptLossWeight(double value)
{
    m_Prompt_loss_weight = value;
    m_Prompt_loss_weightIsSet = true;
}

bool CreateFineTuneRequest::promptLossWeightIsSet() const
{
    return m_Prompt_loss_weightIsSet;
}

void CreateFineTuneRequest::unsetPrompt_loss_weight()
{
    m_Prompt_loss_weightIsSet = false;
}
bool CreateFineTuneRequest::isComputeClassificationMetrics() const
{
    return m_Compute_classification_metrics;
}

void CreateFineTuneRequest::setComputeClassificationMetrics(bool value)
{
    m_Compute_classification_metrics = value;
    m_Compute_classification_metricsIsSet = true;
}

bool CreateFineTuneRequest::computeClassificationMetricsIsSet() const
{
    return m_Compute_classification_metricsIsSet;
}

void CreateFineTuneRequest::unsetCompute_classification_metrics()
{
    m_Compute_classification_metricsIsSet = false;
}
int32_t CreateFineTuneRequest::getClassificationNClasses() const
{
    return m_Classification_n_classes;
}

void CreateFineTuneRequest::setClassificationNClasses(int32_t value)
{
    m_Classification_n_classes = value;
    m_Classification_n_classesIsSet = true;
}

bool CreateFineTuneRequest::classificationNClassesIsSet() const
{
    return m_Classification_n_classesIsSet;
}

void CreateFineTuneRequest::unsetClassification_n_classes()
{
    m_Classification_n_classesIsSet = false;
}
utility::string_t CreateFineTuneRequest::getClassificationPositiveClass() const
{
    return m_Classification_positive_class;
}

void CreateFineTuneRequest::setClassificationPositiveClass(const utility::string_t& value)
{
    m_Classification_positive_class = value;
    m_Classification_positive_classIsSet = true;
}

bool CreateFineTuneRequest::classificationPositiveClassIsSet() const
{
    return m_Classification_positive_classIsSet;
}

void CreateFineTuneRequest::unsetClassification_positive_class()
{
    m_Classification_positive_classIsSet = false;
}
std::vector<double>& CreateFineTuneRequest::getClassificationBetas()
{
    return m_Classification_betas;
}

void CreateFineTuneRequest::setClassificationBetas(std::vector<double> value)
{
    m_Classification_betas = value;
    m_Classification_betasIsSet = true;
}

bool CreateFineTuneRequest::classificationBetasIsSet() const
{
    return m_Classification_betasIsSet;
}

void CreateFineTuneRequest::unsetClassification_betas()
{
    m_Classification_betasIsSet = false;
}
utility::string_t CreateFineTuneRequest::getSuffix() const
{
    return m_Suffix;
}

void CreateFineTuneRequest::setSuffix(const utility::string_t& value)
{
    m_Suffix = value;
    m_SuffixIsSet = true;
}

bool CreateFineTuneRequest::suffixIsSet() const
{
    return m_SuffixIsSet;
}

void CreateFineTuneRequest::unsetSuffix()
{
    m_SuffixIsSet = false;
}
}
}
}
}


