/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateFineTuningJobRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreateFineTuningJobRequest::CreateFineTuningJobRequest()
{
    m_ModelIsSet = false;
    m_Training_file = utility::conversions::to_string_t("");
    m_Training_fileIsSet = false;
    m_HyperparametersIsSet = false;
    m_Suffix = utility::conversions::to_string_t("");
    m_SuffixIsSet = false;
    m_Validation_file = utility::conversions::to_string_t("");
    m_Validation_fileIsSet = false;
    m_IntegrationsIsSet = false;
    m_Seed = 0;
    m_SeedIsSet = false;
}

CreateFineTuningJobRequest::~CreateFineTuningJobRequest()
{
}

void CreateFineTuningJobRequest::validate()
{
    // TODO: implement validation
}

web::json::value CreateFineTuningJobRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ModelIsSet)
    {
        val[utility::conversions::to_string_t(U("model"))] = ModelBase::toJson(m_Model);
    }
    if(m_Training_fileIsSet)
    {
        val[utility::conversions::to_string_t(U("training_file"))] = ModelBase::toJson(m_Training_file);
    }
    if(m_HyperparametersIsSet)
    {
        val[utility::conversions::to_string_t(U("hyperparameters"))] = ModelBase::toJson(m_Hyperparameters);
    }
    if(m_SuffixIsSet)
    {
        val[utility::conversions::to_string_t(U("suffix"))] = ModelBase::toJson(m_Suffix);
    }
    if(m_Validation_fileIsSet)
    {
        val[utility::conversions::to_string_t(U("validation_file"))] = ModelBase::toJson(m_Validation_file);
    }
    if(m_IntegrationsIsSet)
    {
        val[utility::conversions::to_string_t(U("integrations"))] = ModelBase::toJson(m_Integrations);
    }
    if(m_SeedIsSet)
    {
        val[utility::conversions::to_string_t(U("seed"))] = ModelBase::toJson(m_Seed);
    }

    return val;
}

bool CreateFineTuningJobRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("model"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("model")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateFineTuningJobRequest_model> refVal_setModel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModel);
            setModel(refVal_setModel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("training_file"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("training_file")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTrainingFile;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrainingFile);
            setTrainingFile(refVal_setTrainingFile);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hyperparameters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hyperparameters")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateFineTuningJobRequest_hyperparameters> refVal_setHyperparameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHyperparameters);
            setHyperparameters(refVal_setHyperparameters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("suffix"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("suffix")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSuffix;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSuffix);
            setSuffix(refVal_setSuffix);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("validation_file"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("validation_file")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValidationFile;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValidationFile);
            setValidationFile(refVal_setValidationFile);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("integrations"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("integrations")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CreateFineTuningJobRequest_integrations_inner>> refVal_setIntegrations;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIntegrations);
            setIntegrations(refVal_setIntegrations);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("seed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("seed")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSeed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSeed);
            setSeed(refVal_setSeed);
        }
    }
    return ok;
}

void CreateFineTuningJobRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ModelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("model")), m_Model));
    }
    if(m_Training_fileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("training_file")), m_Training_file));
    }
    if(m_HyperparametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hyperparameters")), m_Hyperparameters));
    }
    if(m_SuffixIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("suffix")), m_Suffix));
    }
    if(m_Validation_fileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("validation_file")), m_Validation_file));
    }
    if(m_IntegrationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("integrations")), m_Integrations));
    }
    if(m_SeedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("seed")), m_Seed));
    }
}

bool CreateFineTuningJobRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("model"))))
    {
        std::shared_ptr<CreateFineTuningJobRequest_model> refVal_setModel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("model"))), refVal_setModel );
        setModel(refVal_setModel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("training_file"))))
    {
        utility::string_t refVal_setTrainingFile;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("training_file"))), refVal_setTrainingFile );
        setTrainingFile(refVal_setTrainingFile);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hyperparameters"))))
    {
        std::shared_ptr<CreateFineTuningJobRequest_hyperparameters> refVal_setHyperparameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hyperparameters"))), refVal_setHyperparameters );
        setHyperparameters(refVal_setHyperparameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("suffix"))))
    {
        utility::string_t refVal_setSuffix;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("suffix"))), refVal_setSuffix );
        setSuffix(refVal_setSuffix);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("validation_file"))))
    {
        utility::string_t refVal_setValidationFile;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("validation_file"))), refVal_setValidationFile );
        setValidationFile(refVal_setValidationFile);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("integrations"))))
    {
        std::vector<std::shared_ptr<CreateFineTuningJobRequest_integrations_inner>> refVal_setIntegrations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("integrations"))), refVal_setIntegrations );
        setIntegrations(refVal_setIntegrations);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("seed"))))
    {
        int32_t refVal_setSeed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("seed"))), refVal_setSeed );
        setSeed(refVal_setSeed);
    }
    return ok;
}

std::shared_ptr<CreateFineTuningJobRequest_model> CreateFineTuningJobRequest::getModel() const
{
    return m_Model;
}

void CreateFineTuningJobRequest::setModel(const std::shared_ptr<CreateFineTuningJobRequest_model>& value)
{
    m_Model = value;
    m_ModelIsSet = true;
}

bool CreateFineTuningJobRequest::modelIsSet() const
{
    return m_ModelIsSet;
}

void CreateFineTuningJobRequest::unsetModel()
{
    m_ModelIsSet = false;
}
utility::string_t CreateFineTuningJobRequest::getTrainingFile() const
{
    return m_Training_file;
}

void CreateFineTuningJobRequest::setTrainingFile(const utility::string_t& value)
{
    m_Training_file = value;
    m_Training_fileIsSet = true;
}

bool CreateFineTuningJobRequest::trainingFileIsSet() const
{
    return m_Training_fileIsSet;
}

void CreateFineTuningJobRequest::unsetTraining_file()
{
    m_Training_fileIsSet = false;
}
std::shared_ptr<CreateFineTuningJobRequest_hyperparameters> CreateFineTuningJobRequest::getHyperparameters() const
{
    return m_Hyperparameters;
}

void CreateFineTuningJobRequest::setHyperparameters(const std::shared_ptr<CreateFineTuningJobRequest_hyperparameters>& value)
{
    m_Hyperparameters = value;
    m_HyperparametersIsSet = true;
}

bool CreateFineTuningJobRequest::hyperparametersIsSet() const
{
    return m_HyperparametersIsSet;
}

void CreateFineTuningJobRequest::unsetHyperparameters()
{
    m_HyperparametersIsSet = false;
}
utility::string_t CreateFineTuningJobRequest::getSuffix() const
{
    return m_Suffix;
}

void CreateFineTuningJobRequest::setSuffix(const utility::string_t& value)
{
    m_Suffix = value;
    m_SuffixIsSet = true;
}

bool CreateFineTuningJobRequest::suffixIsSet() const
{
    return m_SuffixIsSet;
}

void CreateFineTuningJobRequest::unsetSuffix()
{
    m_SuffixIsSet = false;
}
utility::string_t CreateFineTuningJobRequest::getValidationFile() const
{
    return m_Validation_file;
}

void CreateFineTuningJobRequest::setValidationFile(const utility::string_t& value)
{
    m_Validation_file = value;
    m_Validation_fileIsSet = true;
}

bool CreateFineTuningJobRequest::validationFileIsSet() const
{
    return m_Validation_fileIsSet;
}

void CreateFineTuningJobRequest::unsetValidation_file()
{
    m_Validation_fileIsSet = false;
}
std::vector<std::shared_ptr<CreateFineTuningJobRequest_integrations_inner>>& CreateFineTuningJobRequest::getIntegrations()
{
    return m_Integrations;
}

void CreateFineTuningJobRequest::setIntegrations(const std::vector<std::shared_ptr<CreateFineTuningJobRequest_integrations_inner>>& value)
{
    m_Integrations = value;
    m_IntegrationsIsSet = true;
}

bool CreateFineTuningJobRequest::integrationsIsSet() const
{
    return m_IntegrationsIsSet;
}

void CreateFineTuningJobRequest::unsetIntegrations()
{
    m_IntegrationsIsSet = false;
}
int32_t CreateFineTuningJobRequest::getSeed() const
{
    return m_Seed;
}

void CreateFineTuningJobRequest::setSeed(int32_t value)
{
    m_Seed = value;
    m_SeedIsSet = true;
}

bool CreateFineTuningJobRequest::seedIsSet() const
{
    return m_SeedIsSet;
}

void CreateFineTuningJobRequest::unsetSeed()
{
    m_SeedIsSet = false;
}
}
}
}
}


