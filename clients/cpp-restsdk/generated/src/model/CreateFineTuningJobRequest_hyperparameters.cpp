/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateFineTuningJobRequest_hyperparameters.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreateFineTuningJobRequest_hyperparameters::CreateFineTuningJobRequest_hyperparameters()
{
    m_Batch_sizeIsSet = false;
    m_Learning_rate_multiplierIsSet = false;
    m_N_epochsIsSet = false;
}

CreateFineTuningJobRequest_hyperparameters::~CreateFineTuningJobRequest_hyperparameters()
{
}

void CreateFineTuningJobRequest_hyperparameters::validate()
{
    // TODO: implement validation
}

web::json::value CreateFineTuningJobRequest_hyperparameters::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Batch_sizeIsSet)
    {
        val[utility::conversions::to_string_t(U("batch_size"))] = ModelBase::toJson(m_Batch_size);
    }
    if(m_Learning_rate_multiplierIsSet)
    {
        val[utility::conversions::to_string_t(U("learning_rate_multiplier"))] = ModelBase::toJson(m_Learning_rate_multiplier);
    }
    if(m_N_epochsIsSet)
    {
        val[utility::conversions::to_string_t(U("n_epochs"))] = ModelBase::toJson(m_N_epochs);
    }

    return val;
}

bool CreateFineTuningJobRequest_hyperparameters::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("batch_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("batch_size")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateFineTuningJobRequest_hyperparameters_batch_size> refVal_setBatchSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBatchSize);
            setBatchSize(refVal_setBatchSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("learning_rate_multiplier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("learning_rate_multiplier")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateFineTuningJobRequest_hyperparameters_learning_rate_multiplier> refVal_setLearningRateMultiplier;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLearningRateMultiplier);
            setLearningRateMultiplier(refVal_setLearningRateMultiplier);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("n_epochs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("n_epochs")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateFineTuningJobRequest_hyperparameters_n_epochs> refVal_setNEpochs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNEpochs);
            setNEpochs(refVal_setNEpochs);
        }
    }
    return ok;
}

void CreateFineTuningJobRequest_hyperparameters::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Batch_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("batch_size")), m_Batch_size));
    }
    if(m_Learning_rate_multiplierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("learning_rate_multiplier")), m_Learning_rate_multiplier));
    }
    if(m_N_epochsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("n_epochs")), m_N_epochs));
    }
}

bool CreateFineTuningJobRequest_hyperparameters::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("batch_size"))))
    {
        std::shared_ptr<CreateFineTuningJobRequest_hyperparameters_batch_size> refVal_setBatchSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("batch_size"))), refVal_setBatchSize );
        setBatchSize(refVal_setBatchSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("learning_rate_multiplier"))))
    {
        std::shared_ptr<CreateFineTuningJobRequest_hyperparameters_learning_rate_multiplier> refVal_setLearningRateMultiplier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("learning_rate_multiplier"))), refVal_setLearningRateMultiplier );
        setLearningRateMultiplier(refVal_setLearningRateMultiplier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("n_epochs"))))
    {
        std::shared_ptr<CreateFineTuningJobRequest_hyperparameters_n_epochs> refVal_setNEpochs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("n_epochs"))), refVal_setNEpochs );
        setNEpochs(refVal_setNEpochs);
    }
    return ok;
}

std::shared_ptr<CreateFineTuningJobRequest_hyperparameters_batch_size> CreateFineTuningJobRequest_hyperparameters::getBatchSize() const
{
    return m_Batch_size;
}

void CreateFineTuningJobRequest_hyperparameters::setBatchSize(const std::shared_ptr<CreateFineTuningJobRequest_hyperparameters_batch_size>& value)
{
    m_Batch_size = value;
    m_Batch_sizeIsSet = true;
}

bool CreateFineTuningJobRequest_hyperparameters::batchSizeIsSet() const
{
    return m_Batch_sizeIsSet;
}

void CreateFineTuningJobRequest_hyperparameters::unsetBatch_size()
{
    m_Batch_sizeIsSet = false;
}
std::shared_ptr<CreateFineTuningJobRequest_hyperparameters_learning_rate_multiplier> CreateFineTuningJobRequest_hyperparameters::getLearningRateMultiplier() const
{
    return m_Learning_rate_multiplier;
}

void CreateFineTuningJobRequest_hyperparameters::setLearningRateMultiplier(const std::shared_ptr<CreateFineTuningJobRequest_hyperparameters_learning_rate_multiplier>& value)
{
    m_Learning_rate_multiplier = value;
    m_Learning_rate_multiplierIsSet = true;
}

bool CreateFineTuningJobRequest_hyperparameters::learningRateMultiplierIsSet() const
{
    return m_Learning_rate_multiplierIsSet;
}

void CreateFineTuningJobRequest_hyperparameters::unsetLearning_rate_multiplier()
{
    m_Learning_rate_multiplierIsSet = false;
}
std::shared_ptr<CreateFineTuningJobRequest_hyperparameters_n_epochs> CreateFineTuningJobRequest_hyperparameters::getNEpochs() const
{
    return m_N_epochs;
}

void CreateFineTuningJobRequest_hyperparameters::setNEpochs(const std::shared_ptr<CreateFineTuningJobRequest_hyperparameters_n_epochs>& value)
{
    m_N_epochs = value;
    m_N_epochsIsSet = true;
}

bool CreateFineTuningJobRequest_hyperparameters::nEpochsIsSet() const
{
    return m_N_epochsIsSet;
}

void CreateFineTuningJobRequest_hyperparameters::unsetN_epochs()
{
    m_N_epochsIsSet = false;
}
}
}
}
}


