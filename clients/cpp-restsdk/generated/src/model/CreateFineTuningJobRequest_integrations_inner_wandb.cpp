/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateFineTuningJobRequest_integrations_inner_wandb.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreateFineTuningJobRequest_integrations_inner_wandb::CreateFineTuningJobRequest_integrations_inner_wandb()
{
    m_Project = utility::conversions::to_string_t("");
    m_ProjectIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Entity = utility::conversions::to_string_t("");
    m_EntityIsSet = false;
    m_TagsIsSet = false;
}

CreateFineTuningJobRequest_integrations_inner_wandb::~CreateFineTuningJobRequest_integrations_inner_wandb()
{
}

void CreateFineTuningJobRequest_integrations_inner_wandb::validate()
{
    // TODO: implement validation
}

web::json::value CreateFineTuningJobRequest_integrations_inner_wandb::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ProjectIsSet)
    {
        val[utility::conversions::to_string_t(U("project"))] = ModelBase::toJson(m_Project);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_EntityIsSet)
    {
        val[utility::conversions::to_string_t(U("entity"))] = ModelBase::toJson(m_Entity);
    }
    if(m_TagsIsSet)
    {
        val[utility::conversions::to_string_t(U("tags"))] = ModelBase::toJson(m_Tags);
    }

    return val;
}

bool CreateFineTuningJobRequest_integrations_inner_wandb::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("project"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("project")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProject);
            setProject(refVal_setProject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("entity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entity")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEntity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntity);
            setEntity(refVal_setEntity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTags);
            setTags(refVal_setTags);
        }
    }
    return ok;
}

void CreateFineTuningJobRequest_integrations_inner_wandb::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ProjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("project")), m_Project));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_EntityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entity")), m_Entity));
    }
    if(m_TagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tags")), m_Tags));
    }
}

bool CreateFineTuningJobRequest_integrations_inner_wandb::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("project"))))
    {
        utility::string_t refVal_setProject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("project"))), refVal_setProject );
        setProject(refVal_setProject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("entity"))))
    {
        utility::string_t refVal_setEntity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entity"))), refVal_setEntity );
        setEntity(refVal_setEntity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tags"))))
    {
        std::vector<utility::string_t> refVal_setTags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tags"))), refVal_setTags );
        setTags(refVal_setTags);
    }
    return ok;
}

utility::string_t CreateFineTuningJobRequest_integrations_inner_wandb::getProject() const
{
    return m_Project;
}

void CreateFineTuningJobRequest_integrations_inner_wandb::setProject(const utility::string_t& value)
{
    m_Project = value;
    m_ProjectIsSet = true;
}

bool CreateFineTuningJobRequest_integrations_inner_wandb::projectIsSet() const
{
    return m_ProjectIsSet;
}

void CreateFineTuningJobRequest_integrations_inner_wandb::unsetProject()
{
    m_ProjectIsSet = false;
}
utility::string_t CreateFineTuningJobRequest_integrations_inner_wandb::getName() const
{
    return m_Name;
}

void CreateFineTuningJobRequest_integrations_inner_wandb::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CreateFineTuningJobRequest_integrations_inner_wandb::nameIsSet() const
{
    return m_NameIsSet;
}

void CreateFineTuningJobRequest_integrations_inner_wandb::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t CreateFineTuningJobRequest_integrations_inner_wandb::getEntity() const
{
    return m_Entity;
}

void CreateFineTuningJobRequest_integrations_inner_wandb::setEntity(const utility::string_t& value)
{
    m_Entity = value;
    m_EntityIsSet = true;
}

bool CreateFineTuningJobRequest_integrations_inner_wandb::entityIsSet() const
{
    return m_EntityIsSet;
}

void CreateFineTuningJobRequest_integrations_inner_wandb::unsetEntity()
{
    m_EntityIsSet = false;
}
std::vector<utility::string_t>& CreateFineTuningJobRequest_integrations_inner_wandb::getTags()
{
    return m_Tags;
}

void CreateFineTuningJobRequest_integrations_inner_wandb::setTags(const std::vector<utility::string_t>& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}

bool CreateFineTuningJobRequest_integrations_inner_wandb::tagsIsSet() const
{
    return m_TagsIsSet;
}

void CreateFineTuningJobRequest_integrations_inner_wandb::unsetTags()
{
    m_TagsIsSet = false;
}
}
}
}
}


