/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateImageRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreateImageRequest::CreateImageRequest()
{
    m_Prompt = utility::conversions::to_string_t("");
    m_PromptIsSet = false;
    m_ModelIsSet = false;
    m_n = 0;
    m_nIsSet = false;
    m_Quality = utility::conversions::to_string_t("");
    m_QualityIsSet = false;
    m_Response_format = utility::conversions::to_string_t("");
    m_Response_formatIsSet = false;
    m_Size = utility::conversions::to_string_t("");
    m_SizeIsSet = false;
    m_Style = utility::conversions::to_string_t("");
    m_StyleIsSet = false;
    m_User = utility::conversions::to_string_t("");
    m_UserIsSet = false;
}

CreateImageRequest::~CreateImageRequest()
{
}

void CreateImageRequest::validate()
{
    // TODO: implement validation
}

web::json::value CreateImageRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PromptIsSet)
    {
        val[utility::conversions::to_string_t(U("prompt"))] = ModelBase::toJson(m_Prompt);
    }
    if(m_ModelIsSet)
    {
        val[utility::conversions::to_string_t(U("model"))] = ModelBase::toJson(m_Model);
    }
    if(m_nIsSet)
    {
        val[utility::conversions::to_string_t(U("n"))] = ModelBase::toJson(m_n);
    }
    if(m_QualityIsSet)
    {
        val[utility::conversions::to_string_t(U("quality"))] = ModelBase::toJson(m_Quality);
    }
    if(m_Response_formatIsSet)
    {
        val[utility::conversions::to_string_t(U("response_format"))] = ModelBase::toJson(m_Response_format);
    }
    if(m_SizeIsSet)
    {
        val[utility::conversions::to_string_t(U("size"))] = ModelBase::toJson(m_Size);
    }
    if(m_StyleIsSet)
    {
        val[utility::conversions::to_string_t(U("style"))] = ModelBase::toJson(m_Style);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t(U("user"))] = ModelBase::toJson(m_User);
    }

    return val;
}

bool CreateImageRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("prompt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("prompt")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrompt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrompt);
            setPrompt(refVal_setPrompt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("model"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("model")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateImageRequest_model> refVal_setModel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModel);
            setModel(refVal_setModel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("n"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("n")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setN);
            setN(refVal_setN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("quality"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("quality")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQuality;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuality);
            setQuality(refVal_setQuality);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("response_format"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("response_format")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setResponseFormat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResponseFormat);
            setResponseFormat(refVal_setResponseFormat);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSize);
            setSize(refVal_setSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("style"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("style")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStyle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStyle);
            setStyle(refVal_setStyle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUser);
            setUser(refVal_setUser);
        }
    }
    return ok;
}

void CreateImageRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PromptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("prompt")), m_Prompt));
    }
    if(m_ModelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("model")), m_Model));
    }
    if(m_nIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("n")), m_n));
    }
    if(m_QualityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("quality")), m_Quality));
    }
    if(m_Response_formatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("response_format")), m_Response_format));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size")), m_Size));
    }
    if(m_StyleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("style")), m_Style));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user")), m_User));
    }
}

bool CreateImageRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("prompt"))))
    {
        utility::string_t refVal_setPrompt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("prompt"))), refVal_setPrompt );
        setPrompt(refVal_setPrompt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("model"))))
    {
        std::shared_ptr<CreateImageRequest_model> refVal_setModel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("model"))), refVal_setModel );
        setModel(refVal_setModel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("n"))))
    {
        int32_t refVal_setN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("n"))), refVal_setN );
        setN(refVal_setN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("quality"))))
    {
        utility::string_t refVal_setQuality;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("quality"))), refVal_setQuality );
        setQuality(refVal_setQuality);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("response_format"))))
    {
        utility::string_t refVal_setResponseFormat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("response_format"))), refVal_setResponseFormat );
        setResponseFormat(refVal_setResponseFormat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("size"))))
    {
        utility::string_t refVal_setSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size"))), refVal_setSize );
        setSize(refVal_setSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("style"))))
    {
        utility::string_t refVal_setStyle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("style"))), refVal_setStyle );
        setStyle(refVal_setStyle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user"))))
    {
        utility::string_t refVal_setUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user"))), refVal_setUser );
        setUser(refVal_setUser);
    }
    return ok;
}

utility::string_t CreateImageRequest::getPrompt() const
{
    return m_Prompt;
}

void CreateImageRequest::setPrompt(const utility::string_t& value)
{
    m_Prompt = value;
    m_PromptIsSet = true;
}

bool CreateImageRequest::promptIsSet() const
{
    return m_PromptIsSet;
}

void CreateImageRequest::unsetPrompt()
{
    m_PromptIsSet = false;
}
std::shared_ptr<CreateImageRequest_model> CreateImageRequest::getModel() const
{
    return m_Model;
}

void CreateImageRequest::setModel(const std::shared_ptr<CreateImageRequest_model>& value)
{
    m_Model = value;
    m_ModelIsSet = true;
}

bool CreateImageRequest::modelIsSet() const
{
    return m_ModelIsSet;
}

void CreateImageRequest::unsetModel()
{
    m_ModelIsSet = false;
}
int32_t CreateImageRequest::getN() const
{
    return m_n;
}

void CreateImageRequest::setN(int32_t value)
{
    m_n = value;
    m_nIsSet = true;
}

bool CreateImageRequest::NIsSet() const
{
    return m_nIsSet;
}

void CreateImageRequest::unsetn()
{
    m_nIsSet = false;
}
utility::string_t CreateImageRequest::getQuality() const
{
    return m_Quality;
}

void CreateImageRequest::setQuality(const utility::string_t& value)
{
    m_Quality = value;
    m_QualityIsSet = true;
}

bool CreateImageRequest::qualityIsSet() const
{
    return m_QualityIsSet;
}

void CreateImageRequest::unsetQuality()
{
    m_QualityIsSet = false;
}
utility::string_t CreateImageRequest::getResponseFormat() const
{
    return m_Response_format;
}

void CreateImageRequest::setResponseFormat(const utility::string_t& value)
{
    m_Response_format = value;
    m_Response_formatIsSet = true;
}

bool CreateImageRequest::responseFormatIsSet() const
{
    return m_Response_formatIsSet;
}

void CreateImageRequest::unsetResponse_format()
{
    m_Response_formatIsSet = false;
}
utility::string_t CreateImageRequest::getSize() const
{
    return m_Size;
}

void CreateImageRequest::setSize(const utility::string_t& value)
{
    m_Size = value;
    m_SizeIsSet = true;
}

bool CreateImageRequest::sizeIsSet() const
{
    return m_SizeIsSet;
}

void CreateImageRequest::unsetSize()
{
    m_SizeIsSet = false;
}
utility::string_t CreateImageRequest::getStyle() const
{
    return m_Style;
}

void CreateImageRequest::setStyle(const utility::string_t& value)
{
    m_Style = value;
    m_StyleIsSet = true;
}

bool CreateImageRequest::styleIsSet() const
{
    return m_StyleIsSet;
}

void CreateImageRequest::unsetStyle()
{
    m_StyleIsSet = false;
}
utility::string_t CreateImageRequest::getUser() const
{
    return m_User;
}

void CreateImageRequest::setUser(const utility::string_t& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool CreateImageRequest::userIsSet() const
{
    return m_UserIsSet;
}

void CreateImageRequest::unsetUser()
{
    m_UserIsSet = false;
}
}
}
}
}


