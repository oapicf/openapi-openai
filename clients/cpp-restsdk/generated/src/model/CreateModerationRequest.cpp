/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateModerationRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreateModerationRequest::CreateModerationRequest()
{
    m_InputIsSet = false;
    m_ModelIsSet = false;
}

CreateModerationRequest::~CreateModerationRequest()
{
}

void CreateModerationRequest::validate()
{
    // TODO: implement validation
}

web::json::value CreateModerationRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_InputIsSet)
    {
        val[utility::conversions::to_string_t(U("input"))] = ModelBase::toJson(m_Input);
    }
    if(m_ModelIsSet)
    {
        val[utility::conversions::to_string_t(U("model"))] = ModelBase::toJson(m_Model);
    }

    return val;
}

bool CreateModerationRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("input"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("input")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateModerationRequest_input> refVal_setInput;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInput);
            setInput(refVal_setInput);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("model"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("model")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateModerationRequest_model> refVal_setModel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModel);
            setModel(refVal_setModel);
        }
    }
    return ok;
}

void CreateModerationRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_InputIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("input")), m_Input));
    }
    if(m_ModelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("model")), m_Model));
    }
}

bool CreateModerationRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("input"))))
    {
        std::shared_ptr<CreateModerationRequest_input> refVal_setInput;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("input"))), refVal_setInput );
        setInput(refVal_setInput);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("model"))))
    {
        std::shared_ptr<CreateModerationRequest_model> refVal_setModel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("model"))), refVal_setModel );
        setModel(refVal_setModel);
    }
    return ok;
}

std::shared_ptr<CreateModerationRequest_input> CreateModerationRequest::getInput() const
{
    return m_Input;
}

void CreateModerationRequest::setInput(const std::shared_ptr<CreateModerationRequest_input>& value)
{
    m_Input = value;
    m_InputIsSet = true;
}

bool CreateModerationRequest::inputIsSet() const
{
    return m_InputIsSet;
}

void CreateModerationRequest::unsetInput()
{
    m_InputIsSet = false;
}
std::shared_ptr<CreateModerationRequest_model> CreateModerationRequest::getModel() const
{
    return m_Model;
}

void CreateModerationRequest::setModel(const std::shared_ptr<CreateModerationRequest_model>& value)
{
    m_Model = value;
    m_ModelIsSet = true;
}

bool CreateModerationRequest::modelIsSet() const
{
    return m_ModelIsSet;
}

void CreateModerationRequest::unsetModel()
{
    m_ModelIsSet = false;
}
}
}
}
}


