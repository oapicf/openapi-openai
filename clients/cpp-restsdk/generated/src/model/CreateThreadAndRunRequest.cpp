/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateThreadAndRunRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreateThreadAndRunRequest::CreateThreadAndRunRequest()
{
    m_Assistant_id = utility::conversions::to_string_t("");
    m_Assistant_idIsSet = false;
    m_ThreadIsSet = false;
    m_ModelIsSet = false;
    m_Instructions = utility::conversions::to_string_t("");
    m_InstructionsIsSet = false;
    m_ToolsIsSet = false;
    m_MetadataIsSet = false;
    m_Temperature = 0.0;
    m_TemperatureIsSet = false;
    m_Stream = false;
    m_StreamIsSet = false;
    m_Max_prompt_tokens = 0;
    m_Max_prompt_tokensIsSet = false;
    m_Max_completion_tokens = 0;
    m_Max_completion_tokensIsSet = false;
    m_Truncation_strategyIsSet = false;
    m_Tool_choiceIsSet = false;
    m_Response_formatIsSet = false;
}

CreateThreadAndRunRequest::~CreateThreadAndRunRequest()
{
}

void CreateThreadAndRunRequest::validate()
{
    // TODO: implement validation
}

web::json::value CreateThreadAndRunRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Assistant_idIsSet)
    {
        val[utility::conversions::to_string_t(U("assistant_id"))] = ModelBase::toJson(m_Assistant_id);
    }
    if(m_ThreadIsSet)
    {
        val[utility::conversions::to_string_t(U("thread"))] = ModelBase::toJson(m_Thread);
    }
    if(m_ModelIsSet)
    {
        val[utility::conversions::to_string_t(U("model"))] = ModelBase::toJson(m_Model);
    }
    if(m_InstructionsIsSet)
    {
        val[utility::conversions::to_string_t(U("instructions"))] = ModelBase::toJson(m_Instructions);
    }
    if(m_ToolsIsSet)
    {
        val[utility::conversions::to_string_t(U("tools"))] = ModelBase::toJson(m_Tools);
    }
    if(m_MetadataIsSet)
    {
        val[utility::conversions::to_string_t(U("metadata"))] = ModelBase::toJson(m_Metadata);
    }
    if(m_TemperatureIsSet)
    {
        val[utility::conversions::to_string_t(U("temperature"))] = ModelBase::toJson(m_Temperature);
    }
    if(m_StreamIsSet)
    {
        val[utility::conversions::to_string_t(U("stream"))] = ModelBase::toJson(m_Stream);
    }
    if(m_Max_prompt_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("max_prompt_tokens"))] = ModelBase::toJson(m_Max_prompt_tokens);
    }
    if(m_Max_completion_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("max_completion_tokens"))] = ModelBase::toJson(m_Max_completion_tokens);
    }
    if(m_Truncation_strategyIsSet)
    {
        val[utility::conversions::to_string_t(U("truncation_strategy"))] = ModelBase::toJson(m_Truncation_strategy);
    }
    if(m_Tool_choiceIsSet)
    {
        val[utility::conversions::to_string_t(U("tool_choice"))] = ModelBase::toJson(m_Tool_choice);
    }
    if(m_Response_formatIsSet)
    {
        val[utility::conversions::to_string_t(U("response_format"))] = ModelBase::toJson(m_Response_format);
    }

    return val;
}

bool CreateThreadAndRunRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("assistant_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("assistant_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssistantId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssistantId);
            setAssistantId(refVal_setAssistantId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("thread"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("thread")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateThreadRequest> refVal_setThread;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThread);
            setThread(refVal_setThread);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("model"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("model")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateRunRequest_model> refVal_setModel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModel);
            setModel(refVal_setModel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("instructions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("instructions")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInstructions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInstructions);
            setInstructions(refVal_setInstructions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tools"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tools")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CreateThreadAndRunRequest_tools_inner>> refVal_setTools;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTools);
            setTools(refVal_setTools);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("metadata"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metadata")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setMetadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetadata);
            setMetadata(refVal_setMetadata);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("temperature"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("temperature")));
        if(!fieldValue.is_null())
        {
            double refVal_setTemperature;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemperature);
            setTemperature(refVal_setTemperature);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stream"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stream")));
        if(!fieldValue.is_null())
        {
            bool refVal_setStream;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStream);
            setStream(refVal_setStream);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_prompt_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_prompt_tokens")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxPromptTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxPromptTokens);
            setMaxPromptTokens(refVal_setMaxPromptTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_completion_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_completion_tokens")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxCompletionTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxCompletionTokens);
            setMaxCompletionTokens(refVal_setMaxCompletionTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("truncation_strategy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("truncation_strategy")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TruncationObject> refVal_setTruncationStrategy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTruncationStrategy);
            setTruncationStrategy(refVal_setTruncationStrategy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tool_choice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tool_choice")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AssistantsApiToolChoiceOption> refVal_setToolChoice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToolChoice);
            setToolChoice(refVal_setToolChoice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("response_format"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("response_format")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AssistantsApiResponseFormatOption> refVal_setResponseFormat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResponseFormat);
            setResponseFormat(refVal_setResponseFormat);
        }
    }
    return ok;
}

void CreateThreadAndRunRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Assistant_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("assistant_id")), m_Assistant_id));
    }
    if(m_ThreadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("thread")), m_Thread));
    }
    if(m_ModelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("model")), m_Model));
    }
    if(m_InstructionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("instructions")), m_Instructions));
    }
    if(m_ToolsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tools")), m_Tools));
    }
    if(m_MetadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metadata")), m_Metadata));
    }
    if(m_TemperatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("temperature")), m_Temperature));
    }
    if(m_StreamIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stream")), m_Stream));
    }
    if(m_Max_prompt_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_prompt_tokens")), m_Max_prompt_tokens));
    }
    if(m_Max_completion_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_completion_tokens")), m_Max_completion_tokens));
    }
    if(m_Truncation_strategyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("truncation_strategy")), m_Truncation_strategy));
    }
    if(m_Tool_choiceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tool_choice")), m_Tool_choice));
    }
    if(m_Response_formatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("response_format")), m_Response_format));
    }
}

bool CreateThreadAndRunRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("assistant_id"))))
    {
        utility::string_t refVal_setAssistantId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("assistant_id"))), refVal_setAssistantId );
        setAssistantId(refVal_setAssistantId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("thread"))))
    {
        std::shared_ptr<CreateThreadRequest> refVal_setThread;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("thread"))), refVal_setThread );
        setThread(refVal_setThread);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("model"))))
    {
        std::shared_ptr<CreateRunRequest_model> refVal_setModel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("model"))), refVal_setModel );
        setModel(refVal_setModel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("instructions"))))
    {
        utility::string_t refVal_setInstructions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("instructions"))), refVal_setInstructions );
        setInstructions(refVal_setInstructions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tools"))))
    {
        std::vector<std::shared_ptr<CreateThreadAndRunRequest_tools_inner>> refVal_setTools;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tools"))), refVal_setTools );
        setTools(refVal_setTools);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("metadata"))))
    {
        std::shared_ptr<Object> refVal_setMetadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metadata"))), refVal_setMetadata );
        setMetadata(refVal_setMetadata);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("temperature"))))
    {
        double refVal_setTemperature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("temperature"))), refVal_setTemperature );
        setTemperature(refVal_setTemperature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stream"))))
    {
        bool refVal_setStream;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stream"))), refVal_setStream );
        setStream(refVal_setStream);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_prompt_tokens"))))
    {
        int32_t refVal_setMaxPromptTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_prompt_tokens"))), refVal_setMaxPromptTokens );
        setMaxPromptTokens(refVal_setMaxPromptTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_completion_tokens"))))
    {
        int32_t refVal_setMaxCompletionTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_completion_tokens"))), refVal_setMaxCompletionTokens );
        setMaxCompletionTokens(refVal_setMaxCompletionTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("truncation_strategy"))))
    {
        std::shared_ptr<TruncationObject> refVal_setTruncationStrategy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("truncation_strategy"))), refVal_setTruncationStrategy );
        setTruncationStrategy(refVal_setTruncationStrategy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tool_choice"))))
    {
        std::shared_ptr<AssistantsApiToolChoiceOption> refVal_setToolChoice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tool_choice"))), refVal_setToolChoice );
        setToolChoice(refVal_setToolChoice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("response_format"))))
    {
        std::shared_ptr<AssistantsApiResponseFormatOption> refVal_setResponseFormat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("response_format"))), refVal_setResponseFormat );
        setResponseFormat(refVal_setResponseFormat);
    }
    return ok;
}

utility::string_t CreateThreadAndRunRequest::getAssistantId() const
{
    return m_Assistant_id;
}

void CreateThreadAndRunRequest::setAssistantId(const utility::string_t& value)
{
    m_Assistant_id = value;
    m_Assistant_idIsSet = true;
}

bool CreateThreadAndRunRequest::assistantIdIsSet() const
{
    return m_Assistant_idIsSet;
}

void CreateThreadAndRunRequest::unsetAssistant_id()
{
    m_Assistant_idIsSet = false;
}
std::shared_ptr<CreateThreadRequest> CreateThreadAndRunRequest::getThread() const
{
    return m_Thread;
}

void CreateThreadAndRunRequest::setThread(const std::shared_ptr<CreateThreadRequest>& value)
{
    m_Thread = value;
    m_ThreadIsSet = true;
}

bool CreateThreadAndRunRequest::threadIsSet() const
{
    return m_ThreadIsSet;
}

void CreateThreadAndRunRequest::unsetThread()
{
    m_ThreadIsSet = false;
}
std::shared_ptr<CreateRunRequest_model> CreateThreadAndRunRequest::getModel() const
{
    return m_Model;
}

void CreateThreadAndRunRequest::setModel(const std::shared_ptr<CreateRunRequest_model>& value)
{
    m_Model = value;
    m_ModelIsSet = true;
}

bool CreateThreadAndRunRequest::modelIsSet() const
{
    return m_ModelIsSet;
}

void CreateThreadAndRunRequest::unsetModel()
{
    m_ModelIsSet = false;
}
utility::string_t CreateThreadAndRunRequest::getInstructions() const
{
    return m_Instructions;
}

void CreateThreadAndRunRequest::setInstructions(const utility::string_t& value)
{
    m_Instructions = value;
    m_InstructionsIsSet = true;
}

bool CreateThreadAndRunRequest::instructionsIsSet() const
{
    return m_InstructionsIsSet;
}

void CreateThreadAndRunRequest::unsetInstructions()
{
    m_InstructionsIsSet = false;
}
std::vector<std::shared_ptr<CreateThreadAndRunRequest_tools_inner>>& CreateThreadAndRunRequest::getTools()
{
    return m_Tools;
}

void CreateThreadAndRunRequest::setTools(const std::vector<std::shared_ptr<CreateThreadAndRunRequest_tools_inner>>& value)
{
    m_Tools = value;
    m_ToolsIsSet = true;
}

bool CreateThreadAndRunRequest::toolsIsSet() const
{
    return m_ToolsIsSet;
}

void CreateThreadAndRunRequest::unsetTools()
{
    m_ToolsIsSet = false;
}
std::shared_ptr<Object> CreateThreadAndRunRequest::getMetadata() const
{
    return m_Metadata;
}

void CreateThreadAndRunRequest::setMetadata(const std::shared_ptr<Object>& value)
{
    m_Metadata = value;
    m_MetadataIsSet = true;
}

bool CreateThreadAndRunRequest::metadataIsSet() const
{
    return m_MetadataIsSet;
}

void CreateThreadAndRunRequest::unsetMetadata()
{
    m_MetadataIsSet = false;
}
double CreateThreadAndRunRequest::getTemperature() const
{
    return m_Temperature;
}

void CreateThreadAndRunRequest::setTemperature(double value)
{
    m_Temperature = value;
    m_TemperatureIsSet = true;
}

bool CreateThreadAndRunRequest::temperatureIsSet() const
{
    return m_TemperatureIsSet;
}

void CreateThreadAndRunRequest::unsetTemperature()
{
    m_TemperatureIsSet = false;
}
bool CreateThreadAndRunRequest::isStream() const
{
    return m_Stream;
}

void CreateThreadAndRunRequest::setStream(bool value)
{
    m_Stream = value;
    m_StreamIsSet = true;
}

bool CreateThreadAndRunRequest::streamIsSet() const
{
    return m_StreamIsSet;
}

void CreateThreadAndRunRequest::unsetStream()
{
    m_StreamIsSet = false;
}
int32_t CreateThreadAndRunRequest::getMaxPromptTokens() const
{
    return m_Max_prompt_tokens;
}

void CreateThreadAndRunRequest::setMaxPromptTokens(int32_t value)
{
    m_Max_prompt_tokens = value;
    m_Max_prompt_tokensIsSet = true;
}

bool CreateThreadAndRunRequest::maxPromptTokensIsSet() const
{
    return m_Max_prompt_tokensIsSet;
}

void CreateThreadAndRunRequest::unsetMax_prompt_tokens()
{
    m_Max_prompt_tokensIsSet = false;
}
int32_t CreateThreadAndRunRequest::getMaxCompletionTokens() const
{
    return m_Max_completion_tokens;
}

void CreateThreadAndRunRequest::setMaxCompletionTokens(int32_t value)
{
    m_Max_completion_tokens = value;
    m_Max_completion_tokensIsSet = true;
}

bool CreateThreadAndRunRequest::maxCompletionTokensIsSet() const
{
    return m_Max_completion_tokensIsSet;
}

void CreateThreadAndRunRequest::unsetMax_completion_tokens()
{
    m_Max_completion_tokensIsSet = false;
}
std::shared_ptr<TruncationObject> CreateThreadAndRunRequest::getTruncationStrategy() const
{
    return m_Truncation_strategy;
}

void CreateThreadAndRunRequest::setTruncationStrategy(const std::shared_ptr<TruncationObject>& value)
{
    m_Truncation_strategy = value;
    m_Truncation_strategyIsSet = true;
}

bool CreateThreadAndRunRequest::truncationStrategyIsSet() const
{
    return m_Truncation_strategyIsSet;
}

void CreateThreadAndRunRequest::unsetTruncation_strategy()
{
    m_Truncation_strategyIsSet = false;
}
std::shared_ptr<AssistantsApiToolChoiceOption> CreateThreadAndRunRequest::getToolChoice() const
{
    return m_Tool_choice;
}

void CreateThreadAndRunRequest::setToolChoice(const std::shared_ptr<AssistantsApiToolChoiceOption>& value)
{
    m_Tool_choice = value;
    m_Tool_choiceIsSet = true;
}

bool CreateThreadAndRunRequest::toolChoiceIsSet() const
{
    return m_Tool_choiceIsSet;
}

void CreateThreadAndRunRequest::unsetTool_choice()
{
    m_Tool_choiceIsSet = false;
}
std::shared_ptr<AssistantsApiResponseFormatOption> CreateThreadAndRunRequest::getResponseFormat() const
{
    return m_Response_format;
}

void CreateThreadAndRunRequest::setResponseFormat(const std::shared_ptr<AssistantsApiResponseFormatOption>& value)
{
    m_Response_format = value;
    m_Response_formatIsSet = true;
}

bool CreateThreadAndRunRequest::responseFormatIsSet() const
{
    return m_Response_formatIsSet;
}

void CreateThreadAndRunRequest::unsetResponse_format()
{
    m_Response_formatIsSet = false;
}
}
}
}
}


