/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateTranslation_200_response.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreateTranslation_200_response::CreateTranslation_200_response()
{
    m_Text = utility::conversions::to_string_t("");
    m_TextIsSet = false;
    m_Language = utility::conversions::to_string_t("");
    m_LanguageIsSet = false;
    m_Duration = utility::conversions::to_string_t("");
    m_DurationIsSet = false;
    m_SegmentsIsSet = false;
}

CreateTranslation_200_response::~CreateTranslation_200_response()
{
}

void CreateTranslation_200_response::validate()
{
    // TODO: implement validation
}

web::json::value CreateTranslation_200_response::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TextIsSet)
    {
        val[utility::conversions::to_string_t(U("text"))] = ModelBase::toJson(m_Text);
    }
    if(m_LanguageIsSet)
    {
        val[utility::conversions::to_string_t(U("language"))] = ModelBase::toJson(m_Language);
    }
    if(m_DurationIsSet)
    {
        val[utility::conversions::to_string_t(U("duration"))] = ModelBase::toJson(m_Duration);
    }
    if(m_SegmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("segments"))] = ModelBase::toJson(m_Segments);
    }

    return val;
}

bool CreateTranslation_200_response::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setText);
            setText(refVal_setText);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("language"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("language")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLanguage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLanguage);
            setLanguage(refVal_setLanguage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("duration"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("duration")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDuration;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDuration);
            setDuration(refVal_setDuration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("segments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("segments")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TranscriptionSegment>> refVal_setSegments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSegments);
            setSegments(refVal_setSegments);
        }
    }
    return ok;
}

void CreateTranslation_200_response::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("text")), m_Text));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("language")), m_Language));
    }
    if(m_DurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("duration")), m_Duration));
    }
    if(m_SegmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("segments")), m_Segments));
    }
}

bool CreateTranslation_200_response::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("text"))))
    {
        utility::string_t refVal_setText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("text"))), refVal_setText );
        setText(refVal_setText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("language"))))
    {
        utility::string_t refVal_setLanguage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("language"))), refVal_setLanguage );
        setLanguage(refVal_setLanguage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("duration"))))
    {
        utility::string_t refVal_setDuration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("duration"))), refVal_setDuration );
        setDuration(refVal_setDuration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("segments"))))
    {
        std::vector<std::shared_ptr<TranscriptionSegment>> refVal_setSegments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("segments"))), refVal_setSegments );
        setSegments(refVal_setSegments);
    }
    return ok;
}

utility::string_t CreateTranslation_200_response::getText() const
{
    return m_Text;
}

void CreateTranslation_200_response::setText(const utility::string_t& value)
{
    m_Text = value;
    m_TextIsSet = true;
}

bool CreateTranslation_200_response::textIsSet() const
{
    return m_TextIsSet;
}

void CreateTranslation_200_response::unsetText()
{
    m_TextIsSet = false;
}
utility::string_t CreateTranslation_200_response::getLanguage() const
{
    return m_Language;
}

void CreateTranslation_200_response::setLanguage(const utility::string_t& value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}

bool CreateTranslation_200_response::languageIsSet() const
{
    return m_LanguageIsSet;
}

void CreateTranslation_200_response::unsetLanguage()
{
    m_LanguageIsSet = false;
}
utility::string_t CreateTranslation_200_response::getDuration() const
{
    return m_Duration;
}

void CreateTranslation_200_response::setDuration(const utility::string_t& value)
{
    m_Duration = value;
    m_DurationIsSet = true;
}

bool CreateTranslation_200_response::durationIsSet() const
{
    return m_DurationIsSet;
}

void CreateTranslation_200_response::unsetDuration()
{
    m_DurationIsSet = false;
}
std::vector<std::shared_ptr<TranscriptionSegment>>& CreateTranslation_200_response::getSegments()
{
    return m_Segments;
}

void CreateTranslation_200_response::setSegments(const std::vector<std::shared_ptr<TranscriptionSegment>>& value)
{
    m_Segments = value;
    m_SegmentsIsSet = true;
}

bool CreateTranslation_200_response::segmentsIsSet() const
{
    return m_SegmentsIsSet;
}

void CreateTranslation_200_response::unsetSegments()
{
    m_SegmentsIsSet = false;
}
}
}
}
}


