/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/FineTune.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



FineTune::FineTune()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_object = utility::conversions::to_string_t("");
    m_objectIsSet = false;
    m_Created_at = 0;
    m_Created_atIsSet = false;
    m_Updated_at = 0;
    m_Updated_atIsSet = false;
    m_Model = utility::conversions::to_string_t("");
    m_ModelIsSet = false;
    m_Fine_tuned_model = utility::conversions::to_string_t("");
    m_Fine_tuned_modelIsSet = false;
    m_Organization_id = utility::conversions::to_string_t("");
    m_Organization_idIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_HyperparamsIsSet = false;
    m_Training_filesIsSet = false;
    m_Validation_filesIsSet = false;
    m_Result_filesIsSet = false;
    m_EventsIsSet = false;
}

FineTune::~FineTune()
{
}

void FineTune::validate()
{
    // TODO: implement validation
}

web::json::value FineTune::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_objectIsSet)
    {
        val[utility::conversions::to_string_t(U("object"))] = ModelBase::toJson(m_object);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_Updated_atIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_at"))] = ModelBase::toJson(m_Updated_at);
    }
    if(m_ModelIsSet)
    {
        val[utility::conversions::to_string_t(U("model"))] = ModelBase::toJson(m_Model);
    }
    if(m_Fine_tuned_modelIsSet)
    {
        val[utility::conversions::to_string_t(U("fine_tuned_model"))] = ModelBase::toJson(m_Fine_tuned_model);
    }
    if(m_Organization_idIsSet)
    {
        val[utility::conversions::to_string_t(U("organization_id"))] = ModelBase::toJson(m_Organization_id);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_HyperparamsIsSet)
    {
        val[utility::conversions::to_string_t(U("hyperparams"))] = ModelBase::toJson(m_Hyperparams);
    }
    if(m_Training_filesIsSet)
    {
        val[utility::conversions::to_string_t(U("training_files"))] = ModelBase::toJson(m_Training_files);
    }
    if(m_Validation_filesIsSet)
    {
        val[utility::conversions::to_string_t(U("validation_files"))] = ModelBase::toJson(m_Validation_files);
    }
    if(m_Result_filesIsSet)
    {
        val[utility::conversions::to_string_t(U("result_files"))] = ModelBase::toJson(m_Result_files);
    }
    if(m_EventsIsSet)
    {
        val[utility::conversions::to_string_t(U("events"))] = ModelBase::toJson(m_Events);
    }

    return val;
}

bool FineTune::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("object"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("object")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setObject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setObject);
            setObject(refVal_setObject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("model"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("model")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setModel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModel);
            setModel(refVal_setModel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fine_tuned_model"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fine_tuned_model")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFineTunedModel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFineTunedModel);
            setFineTunedModel(refVal_setFineTunedModel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organization_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organization_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOrganizationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrganizationId);
            setOrganizationId(refVal_setOrganizationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hyperparams"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hyperparams")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setHyperparams;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHyperparams);
            setHyperparams(refVal_setHyperparams);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("training_files"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("training_files")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OpenAIFile>> refVal_setTrainingFiles;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrainingFiles);
            setTrainingFiles(refVal_setTrainingFiles);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("validation_files"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("validation_files")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OpenAIFile>> refVal_setValidationFiles;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValidationFiles);
            setValidationFiles(refVal_setValidationFiles);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("result_files"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("result_files")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OpenAIFile>> refVal_setResultFiles;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResultFiles);
            setResultFiles(refVal_setResultFiles);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("events"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("events")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<FineTuneEvent>> refVal_setEvents;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEvents);
            setEvents(refVal_setEvents);
        }
    }
    return ok;
}

void FineTune::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_objectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("object")), m_object));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
    if(m_Updated_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_at")), m_Updated_at));
    }
    if(m_ModelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("model")), m_Model));
    }
    if(m_Fine_tuned_modelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fine_tuned_model")), m_Fine_tuned_model));
    }
    if(m_Organization_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organization_id")), m_Organization_id));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_HyperparamsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hyperparams")), m_Hyperparams));
    }
    if(m_Training_filesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("training_files")), m_Training_files));
    }
    if(m_Validation_filesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("validation_files")), m_Validation_files));
    }
    if(m_Result_filesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("result_files")), m_Result_files));
    }
    if(m_EventsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("events")), m_Events));
    }
}

bool FineTune::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("object"))))
    {
        utility::string_t refVal_setObject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("object"))), refVal_setObject );
        setObject(refVal_setObject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        int32_t refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_at"))))
    {
        int32_t refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_at"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("model"))))
    {
        utility::string_t refVal_setModel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("model"))), refVal_setModel );
        setModel(refVal_setModel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fine_tuned_model"))))
    {
        utility::string_t refVal_setFineTunedModel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fine_tuned_model"))), refVal_setFineTunedModel );
        setFineTunedModel(refVal_setFineTunedModel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organization_id"))))
    {
        utility::string_t refVal_setOrganizationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organization_id"))), refVal_setOrganizationId );
        setOrganizationId(refVal_setOrganizationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hyperparams"))))
    {
        std::shared_ptr<Object> refVal_setHyperparams;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hyperparams"))), refVal_setHyperparams );
        setHyperparams(refVal_setHyperparams);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("training_files"))))
    {
        std::vector<std::shared_ptr<OpenAIFile>> refVal_setTrainingFiles;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("training_files"))), refVal_setTrainingFiles );
        setTrainingFiles(refVal_setTrainingFiles);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("validation_files"))))
    {
        std::vector<std::shared_ptr<OpenAIFile>> refVal_setValidationFiles;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("validation_files"))), refVal_setValidationFiles );
        setValidationFiles(refVal_setValidationFiles);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("result_files"))))
    {
        std::vector<std::shared_ptr<OpenAIFile>> refVal_setResultFiles;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("result_files"))), refVal_setResultFiles );
        setResultFiles(refVal_setResultFiles);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("events"))))
    {
        std::vector<std::shared_ptr<FineTuneEvent>> refVal_setEvents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("events"))), refVal_setEvents );
        setEvents(refVal_setEvents);
    }
    return ok;
}

utility::string_t FineTune::getId() const
{
    return m_Id;
}

void FineTune::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool FineTune::idIsSet() const
{
    return m_IdIsSet;
}

void FineTune::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t FineTune::getObject() const
{
    return m_object;
}

void FineTune::setObject(const utility::string_t& value)
{
    m_object = value;
    m_objectIsSet = true;
}

bool FineTune::objectIsSet() const
{
    return m_objectIsSet;
}

void FineTune::unsetobject()
{
    m_objectIsSet = false;
}
int32_t FineTune::getCreatedAt() const
{
    return m_Created_at;
}

void FineTune::setCreatedAt(int32_t value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool FineTune::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void FineTune::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
int32_t FineTune::getUpdatedAt() const
{
    return m_Updated_at;
}

void FineTune::setUpdatedAt(int32_t value)
{
    m_Updated_at = value;
    m_Updated_atIsSet = true;
}

bool FineTune::updatedAtIsSet() const
{
    return m_Updated_atIsSet;
}

void FineTune::unsetUpdated_at()
{
    m_Updated_atIsSet = false;
}
utility::string_t FineTune::getModel() const
{
    return m_Model;
}

void FineTune::setModel(const utility::string_t& value)
{
    m_Model = value;
    m_ModelIsSet = true;
}

bool FineTune::modelIsSet() const
{
    return m_ModelIsSet;
}

void FineTune::unsetModel()
{
    m_ModelIsSet = false;
}
utility::string_t FineTune::getFineTunedModel() const
{
    return m_Fine_tuned_model;
}

void FineTune::setFineTunedModel(const utility::string_t& value)
{
    m_Fine_tuned_model = value;
    m_Fine_tuned_modelIsSet = true;
}

bool FineTune::fineTunedModelIsSet() const
{
    return m_Fine_tuned_modelIsSet;
}

void FineTune::unsetFine_tuned_model()
{
    m_Fine_tuned_modelIsSet = false;
}
utility::string_t FineTune::getOrganizationId() const
{
    return m_Organization_id;
}

void FineTune::setOrganizationId(const utility::string_t& value)
{
    m_Organization_id = value;
    m_Organization_idIsSet = true;
}

bool FineTune::organizationIdIsSet() const
{
    return m_Organization_idIsSet;
}

void FineTune::unsetOrganization_id()
{
    m_Organization_idIsSet = false;
}
utility::string_t FineTune::getStatus() const
{
    return m_Status;
}

void FineTune::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool FineTune::statusIsSet() const
{
    return m_StatusIsSet;
}

void FineTune::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<Object> FineTune::getHyperparams() const
{
    return m_Hyperparams;
}

void FineTune::setHyperparams(const std::shared_ptr<Object>& value)
{
    m_Hyperparams = value;
    m_HyperparamsIsSet = true;
}

bool FineTune::hyperparamsIsSet() const
{
    return m_HyperparamsIsSet;
}

void FineTune::unsetHyperparams()
{
    m_HyperparamsIsSet = false;
}
std::vector<std::shared_ptr<OpenAIFile>>& FineTune::getTrainingFiles()
{
    return m_Training_files;
}

void FineTune::setTrainingFiles(const std::vector<std::shared_ptr<OpenAIFile>>& value)
{
    m_Training_files = value;
    m_Training_filesIsSet = true;
}

bool FineTune::trainingFilesIsSet() const
{
    return m_Training_filesIsSet;
}

void FineTune::unsetTraining_files()
{
    m_Training_filesIsSet = false;
}
std::vector<std::shared_ptr<OpenAIFile>>& FineTune::getValidationFiles()
{
    return m_Validation_files;
}

void FineTune::setValidationFiles(const std::vector<std::shared_ptr<OpenAIFile>>& value)
{
    m_Validation_files = value;
    m_Validation_filesIsSet = true;
}

bool FineTune::validationFilesIsSet() const
{
    return m_Validation_filesIsSet;
}

void FineTune::unsetValidation_files()
{
    m_Validation_filesIsSet = false;
}
std::vector<std::shared_ptr<OpenAIFile>>& FineTune::getResultFiles()
{
    return m_Result_files;
}

void FineTune::setResultFiles(const std::vector<std::shared_ptr<OpenAIFile>>& value)
{
    m_Result_files = value;
    m_Result_filesIsSet = true;
}

bool FineTune::resultFilesIsSet() const
{
    return m_Result_filesIsSet;
}

void FineTune::unsetResult_files()
{
    m_Result_filesIsSet = false;
}
std::vector<std::shared_ptr<FineTuneEvent>>& FineTune::getEvents()
{
    return m_Events;
}

void FineTune::setEvents(const std::vector<std::shared_ptr<FineTuneEvent>>& value)
{
    m_Events = value;
    m_EventsIsSet = true;
}

bool FineTune::eventsIsSet() const
{
    return m_EventsIsSet;
}

void FineTune::unsetEvents()
{
    m_EventsIsSet = false;
}
}
}
}
}


