/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/FineTuningJob.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



FineTuningJob::FineTuningJob()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Created_at = 0;
    m_Created_atIsSet = false;
    m_ErrorIsSet = false;
    m_Fine_tuned_model = utility::conversions::to_string_t("");
    m_Fine_tuned_modelIsSet = false;
    m_Finished_at = 0;
    m_Finished_atIsSet = false;
    m_HyperparametersIsSet = false;
    m_Model = utility::conversions::to_string_t("");
    m_ModelIsSet = false;
    m_object = utility::conversions::to_string_t("");
    m_objectIsSet = false;
    m_Organization_id = utility::conversions::to_string_t("");
    m_Organization_idIsSet = false;
    m_Result_filesIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Trained_tokens = 0;
    m_Trained_tokensIsSet = false;
    m_Training_file = utility::conversions::to_string_t("");
    m_Training_fileIsSet = false;
    m_Validation_file = utility::conversions::to_string_t("");
    m_Validation_fileIsSet = false;
    m_IntegrationsIsSet = false;
    m_Seed = 0;
    m_SeedIsSet = false;
}

FineTuningJob::~FineTuningJob()
{
}

void FineTuningJob::validate()
{
    // TODO: implement validation
}

web::json::value FineTuningJob::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_ErrorIsSet)
    {
        val[utility::conversions::to_string_t(U("error"))] = ModelBase::toJson(m_Error);
    }
    if(m_Fine_tuned_modelIsSet)
    {
        val[utility::conversions::to_string_t(U("fine_tuned_model"))] = ModelBase::toJson(m_Fine_tuned_model);
    }
    if(m_Finished_atIsSet)
    {
        val[utility::conversions::to_string_t(U("finished_at"))] = ModelBase::toJson(m_Finished_at);
    }
    if(m_HyperparametersIsSet)
    {
        val[utility::conversions::to_string_t(U("hyperparameters"))] = ModelBase::toJson(m_Hyperparameters);
    }
    if(m_ModelIsSet)
    {
        val[utility::conversions::to_string_t(U("model"))] = ModelBase::toJson(m_Model);
    }
    if(m_objectIsSet)
    {
        val[utility::conversions::to_string_t(U("object"))] = ModelBase::toJson(m_object);
    }
    if(m_Organization_idIsSet)
    {
        val[utility::conversions::to_string_t(U("organization_id"))] = ModelBase::toJson(m_Organization_id);
    }
    if(m_Result_filesIsSet)
    {
        val[utility::conversions::to_string_t(U("result_files"))] = ModelBase::toJson(m_Result_files);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_Trained_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("trained_tokens"))] = ModelBase::toJson(m_Trained_tokens);
    }
    if(m_Training_fileIsSet)
    {
        val[utility::conversions::to_string_t(U("training_file"))] = ModelBase::toJson(m_Training_file);
    }
    if(m_Validation_fileIsSet)
    {
        val[utility::conversions::to_string_t(U("validation_file"))] = ModelBase::toJson(m_Validation_file);
    }
    if(m_IntegrationsIsSet)
    {
        val[utility::conversions::to_string_t(U("integrations"))] = ModelBase::toJson(m_Integrations);
    }
    if(m_SeedIsSet)
    {
        val[utility::conversions::to_string_t(U("seed"))] = ModelBase::toJson(m_Seed);
    }

    return val;
}

bool FineTuningJob::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("error")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FineTuningJob_error> refVal_setError;
            ok &= ModelBase::fromJson(fieldValue, refVal_setError);
            setError(refVal_setError);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fine_tuned_model"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fine_tuned_model")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFineTunedModel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFineTunedModel);
            setFineTunedModel(refVal_setFineTunedModel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("finished_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("finished_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFinishedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFinishedAt);
            setFinishedAt(refVal_setFinishedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hyperparameters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hyperparameters")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FineTuningJob_hyperparameters> refVal_setHyperparameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHyperparameters);
            setHyperparameters(refVal_setHyperparameters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("model"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("model")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setModel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModel);
            setModel(refVal_setModel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("object"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("object")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setObject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setObject);
            setObject(refVal_setObject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organization_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organization_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOrganizationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrganizationId);
            setOrganizationId(refVal_setOrganizationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("result_files"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("result_files")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setResultFiles;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResultFiles);
            setResultFiles(refVal_setResultFiles);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("trained_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("trained_tokens")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTrainedTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrainedTokens);
            setTrainedTokens(refVal_setTrainedTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("training_file"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("training_file")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTrainingFile;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrainingFile);
            setTrainingFile(refVal_setTrainingFile);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("validation_file"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("validation_file")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValidationFile;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValidationFile);
            setValidationFile(refVal_setValidationFile);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("integrations"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("integrations")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<FineTuningJob_integrations_inner>> refVal_setIntegrations;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIntegrations);
            setIntegrations(refVal_setIntegrations);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("seed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("seed")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSeed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSeed);
            setSeed(refVal_setSeed);
        }
    }
    return ok;
}

void FineTuningJob::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
    if(m_ErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("error")), m_Error));
    }
    if(m_Fine_tuned_modelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fine_tuned_model")), m_Fine_tuned_model));
    }
    if(m_Finished_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("finished_at")), m_Finished_at));
    }
    if(m_HyperparametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hyperparameters")), m_Hyperparameters));
    }
    if(m_ModelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("model")), m_Model));
    }
    if(m_objectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("object")), m_object));
    }
    if(m_Organization_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organization_id")), m_Organization_id));
    }
    if(m_Result_filesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("result_files")), m_Result_files));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_Trained_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("trained_tokens")), m_Trained_tokens));
    }
    if(m_Training_fileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("training_file")), m_Training_file));
    }
    if(m_Validation_fileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("validation_file")), m_Validation_file));
    }
    if(m_IntegrationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("integrations")), m_Integrations));
    }
    if(m_SeedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("seed")), m_Seed));
    }
}

bool FineTuningJob::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        int32_t refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("error"))))
    {
        std::shared_ptr<FineTuningJob_error> refVal_setError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("error"))), refVal_setError );
        setError(refVal_setError);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fine_tuned_model"))))
    {
        utility::string_t refVal_setFineTunedModel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fine_tuned_model"))), refVal_setFineTunedModel );
        setFineTunedModel(refVal_setFineTunedModel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("finished_at"))))
    {
        int32_t refVal_setFinishedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("finished_at"))), refVal_setFinishedAt );
        setFinishedAt(refVal_setFinishedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hyperparameters"))))
    {
        std::shared_ptr<FineTuningJob_hyperparameters> refVal_setHyperparameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hyperparameters"))), refVal_setHyperparameters );
        setHyperparameters(refVal_setHyperparameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("model"))))
    {
        utility::string_t refVal_setModel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("model"))), refVal_setModel );
        setModel(refVal_setModel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("object"))))
    {
        utility::string_t refVal_setObject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("object"))), refVal_setObject );
        setObject(refVal_setObject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organization_id"))))
    {
        utility::string_t refVal_setOrganizationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organization_id"))), refVal_setOrganizationId );
        setOrganizationId(refVal_setOrganizationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("result_files"))))
    {
        std::vector<utility::string_t> refVal_setResultFiles;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("result_files"))), refVal_setResultFiles );
        setResultFiles(refVal_setResultFiles);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("trained_tokens"))))
    {
        int32_t refVal_setTrainedTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("trained_tokens"))), refVal_setTrainedTokens );
        setTrainedTokens(refVal_setTrainedTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("training_file"))))
    {
        utility::string_t refVal_setTrainingFile;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("training_file"))), refVal_setTrainingFile );
        setTrainingFile(refVal_setTrainingFile);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("validation_file"))))
    {
        utility::string_t refVal_setValidationFile;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("validation_file"))), refVal_setValidationFile );
        setValidationFile(refVal_setValidationFile);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("integrations"))))
    {
        std::vector<std::shared_ptr<FineTuningJob_integrations_inner>> refVal_setIntegrations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("integrations"))), refVal_setIntegrations );
        setIntegrations(refVal_setIntegrations);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("seed"))))
    {
        int32_t refVal_setSeed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("seed"))), refVal_setSeed );
        setSeed(refVal_setSeed);
    }
    return ok;
}

utility::string_t FineTuningJob::getId() const
{
    return m_Id;
}

void FineTuningJob::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool FineTuningJob::idIsSet() const
{
    return m_IdIsSet;
}

void FineTuningJob::unsetId()
{
    m_IdIsSet = false;
}
int32_t FineTuningJob::getCreatedAt() const
{
    return m_Created_at;
}

void FineTuningJob::setCreatedAt(int32_t value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool FineTuningJob::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void FineTuningJob::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
std::shared_ptr<FineTuningJob_error> FineTuningJob::getError() const
{
    return m_Error;
}

void FineTuningJob::setError(const std::shared_ptr<FineTuningJob_error>& value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}

bool FineTuningJob::errorIsSet() const
{
    return m_ErrorIsSet;
}

void FineTuningJob::unsetError()
{
    m_ErrorIsSet = false;
}
utility::string_t FineTuningJob::getFineTunedModel() const
{
    return m_Fine_tuned_model;
}

void FineTuningJob::setFineTunedModel(const utility::string_t& value)
{
    m_Fine_tuned_model = value;
    m_Fine_tuned_modelIsSet = true;
}

bool FineTuningJob::fineTunedModelIsSet() const
{
    return m_Fine_tuned_modelIsSet;
}

void FineTuningJob::unsetFine_tuned_model()
{
    m_Fine_tuned_modelIsSet = false;
}
int32_t FineTuningJob::getFinishedAt() const
{
    return m_Finished_at;
}

void FineTuningJob::setFinishedAt(int32_t value)
{
    m_Finished_at = value;
    m_Finished_atIsSet = true;
}

bool FineTuningJob::finishedAtIsSet() const
{
    return m_Finished_atIsSet;
}

void FineTuningJob::unsetFinished_at()
{
    m_Finished_atIsSet = false;
}
std::shared_ptr<FineTuningJob_hyperparameters> FineTuningJob::getHyperparameters() const
{
    return m_Hyperparameters;
}

void FineTuningJob::setHyperparameters(const std::shared_ptr<FineTuningJob_hyperparameters>& value)
{
    m_Hyperparameters = value;
    m_HyperparametersIsSet = true;
}

bool FineTuningJob::hyperparametersIsSet() const
{
    return m_HyperparametersIsSet;
}

void FineTuningJob::unsetHyperparameters()
{
    m_HyperparametersIsSet = false;
}
utility::string_t FineTuningJob::getModel() const
{
    return m_Model;
}

void FineTuningJob::setModel(const utility::string_t& value)
{
    m_Model = value;
    m_ModelIsSet = true;
}

bool FineTuningJob::modelIsSet() const
{
    return m_ModelIsSet;
}

void FineTuningJob::unsetModel()
{
    m_ModelIsSet = false;
}
utility::string_t FineTuningJob::getObject() const
{
    return m_object;
}

void FineTuningJob::setObject(const utility::string_t& value)
{
    m_object = value;
    m_objectIsSet = true;
}

bool FineTuningJob::objectIsSet() const
{
    return m_objectIsSet;
}

void FineTuningJob::unsetobject()
{
    m_objectIsSet = false;
}
utility::string_t FineTuningJob::getOrganizationId() const
{
    return m_Organization_id;
}

void FineTuningJob::setOrganizationId(const utility::string_t& value)
{
    m_Organization_id = value;
    m_Organization_idIsSet = true;
}

bool FineTuningJob::organizationIdIsSet() const
{
    return m_Organization_idIsSet;
}

void FineTuningJob::unsetOrganization_id()
{
    m_Organization_idIsSet = false;
}
std::vector<utility::string_t>& FineTuningJob::getResultFiles()
{
    return m_Result_files;
}

void FineTuningJob::setResultFiles(const std::vector<utility::string_t>& value)
{
    m_Result_files = value;
    m_Result_filesIsSet = true;
}

bool FineTuningJob::resultFilesIsSet() const
{
    return m_Result_filesIsSet;
}

void FineTuningJob::unsetResult_files()
{
    m_Result_filesIsSet = false;
}
utility::string_t FineTuningJob::getStatus() const
{
    return m_Status;
}

void FineTuningJob::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool FineTuningJob::statusIsSet() const
{
    return m_StatusIsSet;
}

void FineTuningJob::unsetStatus()
{
    m_StatusIsSet = false;
}
int32_t FineTuningJob::getTrainedTokens() const
{
    return m_Trained_tokens;
}

void FineTuningJob::setTrainedTokens(int32_t value)
{
    m_Trained_tokens = value;
    m_Trained_tokensIsSet = true;
}

bool FineTuningJob::trainedTokensIsSet() const
{
    return m_Trained_tokensIsSet;
}

void FineTuningJob::unsetTrained_tokens()
{
    m_Trained_tokensIsSet = false;
}
utility::string_t FineTuningJob::getTrainingFile() const
{
    return m_Training_file;
}

void FineTuningJob::setTrainingFile(const utility::string_t& value)
{
    m_Training_file = value;
    m_Training_fileIsSet = true;
}

bool FineTuningJob::trainingFileIsSet() const
{
    return m_Training_fileIsSet;
}

void FineTuningJob::unsetTraining_file()
{
    m_Training_fileIsSet = false;
}
utility::string_t FineTuningJob::getValidationFile() const
{
    return m_Validation_file;
}

void FineTuningJob::setValidationFile(const utility::string_t& value)
{
    m_Validation_file = value;
    m_Validation_fileIsSet = true;
}

bool FineTuningJob::validationFileIsSet() const
{
    return m_Validation_fileIsSet;
}

void FineTuningJob::unsetValidation_file()
{
    m_Validation_fileIsSet = false;
}
std::vector<std::shared_ptr<FineTuningJob_integrations_inner>>& FineTuningJob::getIntegrations()
{
    return m_Integrations;
}

void FineTuningJob::setIntegrations(const std::vector<std::shared_ptr<FineTuningJob_integrations_inner>>& value)
{
    m_Integrations = value;
    m_IntegrationsIsSet = true;
}

bool FineTuningJob::integrationsIsSet() const
{
    return m_IntegrationsIsSet;
}

void FineTuningJob::unsetIntegrations()
{
    m_IntegrationsIsSet = false;
}
int32_t FineTuningJob::getSeed() const
{
    return m_Seed;
}

void FineTuningJob::setSeed(int32_t value)
{
    m_Seed = value;
    m_SeedIsSet = true;
}

bool FineTuningJob::seedIsSet() const
{
    return m_SeedIsSet;
}

void FineTuningJob::unsetSeed()
{
    m_SeedIsSet = false;
}
}
}
}
}


