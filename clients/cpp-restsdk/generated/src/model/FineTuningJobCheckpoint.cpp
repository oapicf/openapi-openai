/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/FineTuningJobCheckpoint.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



FineTuningJobCheckpoint::FineTuningJobCheckpoint()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Created_at = 0;
    m_Created_atIsSet = false;
    m_Fine_tuned_model_checkpoint = utility::conversions::to_string_t("");
    m_Fine_tuned_model_checkpointIsSet = false;
    m_Step_number = 0;
    m_Step_numberIsSet = false;
    m_MetricsIsSet = false;
    m_Fine_tuning_job_id = utility::conversions::to_string_t("");
    m_Fine_tuning_job_idIsSet = false;
    m_object = utility::conversions::to_string_t("");
    m_objectIsSet = false;
}

FineTuningJobCheckpoint::~FineTuningJobCheckpoint()
{
}

void FineTuningJobCheckpoint::validate()
{
    // TODO: implement validation
}

web::json::value FineTuningJobCheckpoint::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_Fine_tuned_model_checkpointIsSet)
    {
        val[utility::conversions::to_string_t(U("fine_tuned_model_checkpoint"))] = ModelBase::toJson(m_Fine_tuned_model_checkpoint);
    }
    if(m_Step_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("step_number"))] = ModelBase::toJson(m_Step_number);
    }
    if(m_MetricsIsSet)
    {
        val[utility::conversions::to_string_t(U("metrics"))] = ModelBase::toJson(m_Metrics);
    }
    if(m_Fine_tuning_job_idIsSet)
    {
        val[utility::conversions::to_string_t(U("fine_tuning_job_id"))] = ModelBase::toJson(m_Fine_tuning_job_id);
    }
    if(m_objectIsSet)
    {
        val[utility::conversions::to_string_t(U("object"))] = ModelBase::toJson(m_object);
    }

    return val;
}

bool FineTuningJobCheckpoint::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fine_tuned_model_checkpoint"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fine_tuned_model_checkpoint")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFineTunedModelCheckpoint;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFineTunedModelCheckpoint);
            setFineTunedModelCheckpoint(refVal_setFineTunedModelCheckpoint);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("step_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("step_number")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setStepNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStepNumber);
            setStepNumber(refVal_setStepNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("metrics"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metrics")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FineTuningJobCheckpoint_metrics> refVal_setMetrics;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetrics);
            setMetrics(refVal_setMetrics);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fine_tuning_job_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fine_tuning_job_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFineTuningJobId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFineTuningJobId);
            setFineTuningJobId(refVal_setFineTuningJobId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("object"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("object")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setObject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setObject);
            setObject(refVal_setObject);
        }
    }
    return ok;
}

void FineTuningJobCheckpoint::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
    if(m_Fine_tuned_model_checkpointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fine_tuned_model_checkpoint")), m_Fine_tuned_model_checkpoint));
    }
    if(m_Step_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("step_number")), m_Step_number));
    }
    if(m_MetricsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metrics")), m_Metrics));
    }
    if(m_Fine_tuning_job_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fine_tuning_job_id")), m_Fine_tuning_job_id));
    }
    if(m_objectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("object")), m_object));
    }
}

bool FineTuningJobCheckpoint::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        int32_t refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fine_tuned_model_checkpoint"))))
    {
        utility::string_t refVal_setFineTunedModelCheckpoint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fine_tuned_model_checkpoint"))), refVal_setFineTunedModelCheckpoint );
        setFineTunedModelCheckpoint(refVal_setFineTunedModelCheckpoint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("step_number"))))
    {
        int32_t refVal_setStepNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("step_number"))), refVal_setStepNumber );
        setStepNumber(refVal_setStepNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("metrics"))))
    {
        std::shared_ptr<FineTuningJobCheckpoint_metrics> refVal_setMetrics;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metrics"))), refVal_setMetrics );
        setMetrics(refVal_setMetrics);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fine_tuning_job_id"))))
    {
        utility::string_t refVal_setFineTuningJobId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fine_tuning_job_id"))), refVal_setFineTuningJobId );
        setFineTuningJobId(refVal_setFineTuningJobId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("object"))))
    {
        utility::string_t refVal_setObject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("object"))), refVal_setObject );
        setObject(refVal_setObject);
    }
    return ok;
}

utility::string_t FineTuningJobCheckpoint::getId() const
{
    return m_Id;
}

void FineTuningJobCheckpoint::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool FineTuningJobCheckpoint::idIsSet() const
{
    return m_IdIsSet;
}

void FineTuningJobCheckpoint::unsetId()
{
    m_IdIsSet = false;
}
int32_t FineTuningJobCheckpoint::getCreatedAt() const
{
    return m_Created_at;
}

void FineTuningJobCheckpoint::setCreatedAt(int32_t value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool FineTuningJobCheckpoint::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void FineTuningJobCheckpoint::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
utility::string_t FineTuningJobCheckpoint::getFineTunedModelCheckpoint() const
{
    return m_Fine_tuned_model_checkpoint;
}

void FineTuningJobCheckpoint::setFineTunedModelCheckpoint(const utility::string_t& value)
{
    m_Fine_tuned_model_checkpoint = value;
    m_Fine_tuned_model_checkpointIsSet = true;
}

bool FineTuningJobCheckpoint::fineTunedModelCheckpointIsSet() const
{
    return m_Fine_tuned_model_checkpointIsSet;
}

void FineTuningJobCheckpoint::unsetFine_tuned_model_checkpoint()
{
    m_Fine_tuned_model_checkpointIsSet = false;
}
int32_t FineTuningJobCheckpoint::getStepNumber() const
{
    return m_Step_number;
}

void FineTuningJobCheckpoint::setStepNumber(int32_t value)
{
    m_Step_number = value;
    m_Step_numberIsSet = true;
}

bool FineTuningJobCheckpoint::stepNumberIsSet() const
{
    return m_Step_numberIsSet;
}

void FineTuningJobCheckpoint::unsetStep_number()
{
    m_Step_numberIsSet = false;
}
std::shared_ptr<FineTuningJobCheckpoint_metrics> FineTuningJobCheckpoint::getMetrics() const
{
    return m_Metrics;
}

void FineTuningJobCheckpoint::setMetrics(const std::shared_ptr<FineTuningJobCheckpoint_metrics>& value)
{
    m_Metrics = value;
    m_MetricsIsSet = true;
}

bool FineTuningJobCheckpoint::metricsIsSet() const
{
    return m_MetricsIsSet;
}

void FineTuningJobCheckpoint::unsetMetrics()
{
    m_MetricsIsSet = false;
}
utility::string_t FineTuningJobCheckpoint::getFineTuningJobId() const
{
    return m_Fine_tuning_job_id;
}

void FineTuningJobCheckpoint::setFineTuningJobId(const utility::string_t& value)
{
    m_Fine_tuning_job_id = value;
    m_Fine_tuning_job_idIsSet = true;
}

bool FineTuningJobCheckpoint::fineTuningJobIdIsSet() const
{
    return m_Fine_tuning_job_idIsSet;
}

void FineTuningJobCheckpoint::unsetFine_tuning_job_id()
{
    m_Fine_tuning_job_idIsSet = false;
}
utility::string_t FineTuningJobCheckpoint::getObject() const
{
    return m_object;
}

void FineTuningJobCheckpoint::setObject(const utility::string_t& value)
{
    m_object = value;
    m_objectIsSet = true;
}

bool FineTuningJobCheckpoint::objectIsSet() const
{
    return m_objectIsSet;
}

void FineTuningJobCheckpoint::unsetobject()
{
    m_objectIsSet = false;
}
}
}
}
}


