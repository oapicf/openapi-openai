/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/FineTuningJobCheckpoint_metrics.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



FineTuningJobCheckpoint_metrics::FineTuningJobCheckpoint_metrics()
{
    m_Step = 0.0;
    m_StepIsSet = false;
    m_Train_loss = 0.0;
    m_Train_lossIsSet = false;
    m_Train_mean_token_accuracy = 0.0;
    m_Train_mean_token_accuracyIsSet = false;
    m_Valid_loss = 0.0;
    m_Valid_lossIsSet = false;
    m_Valid_mean_token_accuracy = 0.0;
    m_Valid_mean_token_accuracyIsSet = false;
    m_Full_valid_loss = 0.0;
    m_Full_valid_lossIsSet = false;
    m_Full_valid_mean_token_accuracy = 0.0;
    m_Full_valid_mean_token_accuracyIsSet = false;
}

FineTuningJobCheckpoint_metrics::~FineTuningJobCheckpoint_metrics()
{
}

void FineTuningJobCheckpoint_metrics::validate()
{
    // TODO: implement validation
}

web::json::value FineTuningJobCheckpoint_metrics::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StepIsSet)
    {
        val[utility::conversions::to_string_t(U("step"))] = ModelBase::toJson(m_Step);
    }
    if(m_Train_lossIsSet)
    {
        val[utility::conversions::to_string_t(U("train_loss"))] = ModelBase::toJson(m_Train_loss);
    }
    if(m_Train_mean_token_accuracyIsSet)
    {
        val[utility::conversions::to_string_t(U("train_mean_token_accuracy"))] = ModelBase::toJson(m_Train_mean_token_accuracy);
    }
    if(m_Valid_lossIsSet)
    {
        val[utility::conversions::to_string_t(U("valid_loss"))] = ModelBase::toJson(m_Valid_loss);
    }
    if(m_Valid_mean_token_accuracyIsSet)
    {
        val[utility::conversions::to_string_t(U("valid_mean_token_accuracy"))] = ModelBase::toJson(m_Valid_mean_token_accuracy);
    }
    if(m_Full_valid_lossIsSet)
    {
        val[utility::conversions::to_string_t(U("full_valid_loss"))] = ModelBase::toJson(m_Full_valid_loss);
    }
    if(m_Full_valid_mean_token_accuracyIsSet)
    {
        val[utility::conversions::to_string_t(U("full_valid_mean_token_accuracy"))] = ModelBase::toJson(m_Full_valid_mean_token_accuracy);
    }

    return val;
}

bool FineTuningJobCheckpoint_metrics::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("step"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("step")));
        if(!fieldValue.is_null())
        {
            double refVal_setStep;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStep);
            setStep(refVal_setStep);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("train_loss"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("train_loss")));
        if(!fieldValue.is_null())
        {
            double refVal_setTrainLoss;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrainLoss);
            setTrainLoss(refVal_setTrainLoss);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("train_mean_token_accuracy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("train_mean_token_accuracy")));
        if(!fieldValue.is_null())
        {
            double refVal_setTrainMeanTokenAccuracy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrainMeanTokenAccuracy);
            setTrainMeanTokenAccuracy(refVal_setTrainMeanTokenAccuracy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("valid_loss"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("valid_loss")));
        if(!fieldValue.is_null())
        {
            double refVal_setValidLoss;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValidLoss);
            setValidLoss(refVal_setValidLoss);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("valid_mean_token_accuracy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("valid_mean_token_accuracy")));
        if(!fieldValue.is_null())
        {
            double refVal_setValidMeanTokenAccuracy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValidMeanTokenAccuracy);
            setValidMeanTokenAccuracy(refVal_setValidMeanTokenAccuracy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("full_valid_loss"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("full_valid_loss")));
        if(!fieldValue.is_null())
        {
            double refVal_setFullValidLoss;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFullValidLoss);
            setFullValidLoss(refVal_setFullValidLoss);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("full_valid_mean_token_accuracy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("full_valid_mean_token_accuracy")));
        if(!fieldValue.is_null())
        {
            double refVal_setFullValidMeanTokenAccuracy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFullValidMeanTokenAccuracy);
            setFullValidMeanTokenAccuracy(refVal_setFullValidMeanTokenAccuracy);
        }
    }
    return ok;
}

void FineTuningJobCheckpoint_metrics::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_StepIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("step")), m_Step));
    }
    if(m_Train_lossIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("train_loss")), m_Train_loss));
    }
    if(m_Train_mean_token_accuracyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("train_mean_token_accuracy")), m_Train_mean_token_accuracy));
    }
    if(m_Valid_lossIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("valid_loss")), m_Valid_loss));
    }
    if(m_Valid_mean_token_accuracyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("valid_mean_token_accuracy")), m_Valid_mean_token_accuracy));
    }
    if(m_Full_valid_lossIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("full_valid_loss")), m_Full_valid_loss));
    }
    if(m_Full_valid_mean_token_accuracyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("full_valid_mean_token_accuracy")), m_Full_valid_mean_token_accuracy));
    }
}

bool FineTuningJobCheckpoint_metrics::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("step"))))
    {
        double refVal_setStep;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("step"))), refVal_setStep );
        setStep(refVal_setStep);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("train_loss"))))
    {
        double refVal_setTrainLoss;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("train_loss"))), refVal_setTrainLoss );
        setTrainLoss(refVal_setTrainLoss);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("train_mean_token_accuracy"))))
    {
        double refVal_setTrainMeanTokenAccuracy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("train_mean_token_accuracy"))), refVal_setTrainMeanTokenAccuracy );
        setTrainMeanTokenAccuracy(refVal_setTrainMeanTokenAccuracy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("valid_loss"))))
    {
        double refVal_setValidLoss;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("valid_loss"))), refVal_setValidLoss );
        setValidLoss(refVal_setValidLoss);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("valid_mean_token_accuracy"))))
    {
        double refVal_setValidMeanTokenAccuracy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("valid_mean_token_accuracy"))), refVal_setValidMeanTokenAccuracy );
        setValidMeanTokenAccuracy(refVal_setValidMeanTokenAccuracy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("full_valid_loss"))))
    {
        double refVal_setFullValidLoss;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("full_valid_loss"))), refVal_setFullValidLoss );
        setFullValidLoss(refVal_setFullValidLoss);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("full_valid_mean_token_accuracy"))))
    {
        double refVal_setFullValidMeanTokenAccuracy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("full_valid_mean_token_accuracy"))), refVal_setFullValidMeanTokenAccuracy );
        setFullValidMeanTokenAccuracy(refVal_setFullValidMeanTokenAccuracy);
    }
    return ok;
}

double FineTuningJobCheckpoint_metrics::getStep() const
{
    return m_Step;
}

void FineTuningJobCheckpoint_metrics::setStep(double value)
{
    m_Step = value;
    m_StepIsSet = true;
}

bool FineTuningJobCheckpoint_metrics::stepIsSet() const
{
    return m_StepIsSet;
}

void FineTuningJobCheckpoint_metrics::unsetStep()
{
    m_StepIsSet = false;
}
double FineTuningJobCheckpoint_metrics::getTrainLoss() const
{
    return m_Train_loss;
}

void FineTuningJobCheckpoint_metrics::setTrainLoss(double value)
{
    m_Train_loss = value;
    m_Train_lossIsSet = true;
}

bool FineTuningJobCheckpoint_metrics::trainLossIsSet() const
{
    return m_Train_lossIsSet;
}

void FineTuningJobCheckpoint_metrics::unsetTrain_loss()
{
    m_Train_lossIsSet = false;
}
double FineTuningJobCheckpoint_metrics::getTrainMeanTokenAccuracy() const
{
    return m_Train_mean_token_accuracy;
}

void FineTuningJobCheckpoint_metrics::setTrainMeanTokenAccuracy(double value)
{
    m_Train_mean_token_accuracy = value;
    m_Train_mean_token_accuracyIsSet = true;
}

bool FineTuningJobCheckpoint_metrics::trainMeanTokenAccuracyIsSet() const
{
    return m_Train_mean_token_accuracyIsSet;
}

void FineTuningJobCheckpoint_metrics::unsetTrain_mean_token_accuracy()
{
    m_Train_mean_token_accuracyIsSet = false;
}
double FineTuningJobCheckpoint_metrics::getValidLoss() const
{
    return m_Valid_loss;
}

void FineTuningJobCheckpoint_metrics::setValidLoss(double value)
{
    m_Valid_loss = value;
    m_Valid_lossIsSet = true;
}

bool FineTuningJobCheckpoint_metrics::validLossIsSet() const
{
    return m_Valid_lossIsSet;
}

void FineTuningJobCheckpoint_metrics::unsetValid_loss()
{
    m_Valid_lossIsSet = false;
}
double FineTuningJobCheckpoint_metrics::getValidMeanTokenAccuracy() const
{
    return m_Valid_mean_token_accuracy;
}

void FineTuningJobCheckpoint_metrics::setValidMeanTokenAccuracy(double value)
{
    m_Valid_mean_token_accuracy = value;
    m_Valid_mean_token_accuracyIsSet = true;
}

bool FineTuningJobCheckpoint_metrics::validMeanTokenAccuracyIsSet() const
{
    return m_Valid_mean_token_accuracyIsSet;
}

void FineTuningJobCheckpoint_metrics::unsetValid_mean_token_accuracy()
{
    m_Valid_mean_token_accuracyIsSet = false;
}
double FineTuningJobCheckpoint_metrics::getFullValidLoss() const
{
    return m_Full_valid_loss;
}

void FineTuningJobCheckpoint_metrics::setFullValidLoss(double value)
{
    m_Full_valid_loss = value;
    m_Full_valid_lossIsSet = true;
}

bool FineTuningJobCheckpoint_metrics::fullValidLossIsSet() const
{
    return m_Full_valid_lossIsSet;
}

void FineTuningJobCheckpoint_metrics::unsetFull_valid_loss()
{
    m_Full_valid_lossIsSet = false;
}
double FineTuningJobCheckpoint_metrics::getFullValidMeanTokenAccuracy() const
{
    return m_Full_valid_mean_token_accuracy;
}

void FineTuningJobCheckpoint_metrics::setFullValidMeanTokenAccuracy(double value)
{
    m_Full_valid_mean_token_accuracy = value;
    m_Full_valid_mean_token_accuracyIsSet = true;
}

bool FineTuningJobCheckpoint_metrics::fullValidMeanTokenAccuracyIsSet() const
{
    return m_Full_valid_mean_token_accuracyIsSet;
}

void FineTuningJobCheckpoint_metrics::unsetFull_valid_mean_token_accuracy()
{
    m_Full_valid_mean_token_accuracyIsSet = false;
}
}
}
}
}


