/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ImagesResponse_data_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ImagesResponse_data_inner::ImagesResponse_data_inner()
{
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_B64_json = utility::conversions::to_string_t("");
    m_B64_jsonIsSet = false;
}

ImagesResponse_data_inner::~ImagesResponse_data_inner()
{
}

void ImagesResponse_data_inner::validate()
{
    // TODO: implement validation
}

web::json::value ImagesResponse_data_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }
    if(m_B64_jsonIsSet)
    {
        val[utility::conversions::to_string_t(U("b64_json"))] = ModelBase::toJson(m_B64_json);
    }

    return val;
}

bool ImagesResponse_data_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
            setUrl(refVal_setUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("b64_json"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("b64_json")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setB64Json;
            ok &= ModelBase::fromJson(fieldValue, refVal_setB64Json);
            setB64Json(refVal_setB64Json);
        }
    }
    return ok;
}

void ImagesResponse_data_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
    if(m_B64_jsonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("b64_json")), m_B64_json));
    }
}

bool ImagesResponse_data_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        utility::string_t refVal_setUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_setUrl );
        setUrl(refVal_setUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("b64_json"))))
    {
        utility::string_t refVal_setB64Json;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("b64_json"))), refVal_setB64Json );
        setB64Json(refVal_setB64Json);
    }
    return ok;
}

utility::string_t ImagesResponse_data_inner::getUrl() const
{
    return m_Url;
}

void ImagesResponse_data_inner::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool ImagesResponse_data_inner::urlIsSet() const
{
    return m_UrlIsSet;
}

void ImagesResponse_data_inner::unsetUrl()
{
    m_UrlIsSet = false;
}
utility::string_t ImagesResponse_data_inner::getB64Json() const
{
    return m_B64_json;
}

void ImagesResponse_data_inner::setB64Json(const utility::string_t& value)
{
    m_B64_json = value;
    m_B64_jsonIsSet = true;
}

bool ImagesResponse_data_inner::b64JsonIsSet() const
{
    return m_B64_jsonIsSet;
}

void ImagesResponse_data_inner::unsetB64_json()
{
    m_B64_jsonIsSet = false;
}
}
}
}
}


