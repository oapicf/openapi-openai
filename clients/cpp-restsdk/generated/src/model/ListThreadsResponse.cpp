/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ListThreadsResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ListThreadsResponse::ListThreadsResponse()
{
    m_object = utility::conversions::to_string_t("");
    m_objectIsSet = false;
    m_DataIsSet = false;
    m_First_id = utility::conversions::to_string_t("");
    m_First_idIsSet = false;
    m_Last_id = utility::conversions::to_string_t("");
    m_Last_idIsSet = false;
    m_Has_more = false;
    m_Has_moreIsSet = false;
}

ListThreadsResponse::~ListThreadsResponse()
{
}

void ListThreadsResponse::validate()
{
    // TODO: implement validation
}

web::json::value ListThreadsResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_objectIsSet)
    {
        val[utility::conversions::to_string_t(U("object"))] = ModelBase::toJson(m_object);
    }
    if(m_DataIsSet)
    {
        val[utility::conversions::to_string_t(U("data"))] = ModelBase::toJson(m_Data);
    }
    if(m_First_idIsSet)
    {
        val[utility::conversions::to_string_t(U("first_id"))] = ModelBase::toJson(m_First_id);
    }
    if(m_Last_idIsSet)
    {
        val[utility::conversions::to_string_t(U("last_id"))] = ModelBase::toJson(m_Last_id);
    }
    if(m_Has_moreIsSet)
    {
        val[utility::conversions::to_string_t(U("has_more"))] = ModelBase::toJson(m_Has_more);
    }

    return val;
}

bool ListThreadsResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("object"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("object")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setObject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setObject);
            setObject(refVal_setObject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("data"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("data")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ThreadObject>> refVal_setData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setData);
            setData(refVal_setData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("first_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("first_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFirstId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFirstId);
            setFirstId(refVal_setFirstId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastId);
            setLastId(refVal_setLastId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("has_more"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("has_more")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHasMore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHasMore);
            setHasMore(refVal_setHasMore);
        }
    }
    return ok;
}

void ListThreadsResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_objectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("object")), m_object));
    }
    if(m_DataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("data")), m_Data));
    }
    if(m_First_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("first_id")), m_First_id));
    }
    if(m_Last_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_id")), m_Last_id));
    }
    if(m_Has_moreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("has_more")), m_Has_more));
    }
}

bool ListThreadsResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("object"))))
    {
        utility::string_t refVal_setObject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("object"))), refVal_setObject );
        setObject(refVal_setObject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("data"))))
    {
        std::vector<std::shared_ptr<ThreadObject>> refVal_setData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("data"))), refVal_setData );
        setData(refVal_setData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("first_id"))))
    {
        utility::string_t refVal_setFirstId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("first_id"))), refVal_setFirstId );
        setFirstId(refVal_setFirstId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_id"))))
    {
        utility::string_t refVal_setLastId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_id"))), refVal_setLastId );
        setLastId(refVal_setLastId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("has_more"))))
    {
        bool refVal_setHasMore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("has_more"))), refVal_setHasMore );
        setHasMore(refVal_setHasMore);
    }
    return ok;
}

utility::string_t ListThreadsResponse::getObject() const
{
    return m_object;
}

void ListThreadsResponse::setObject(const utility::string_t& value)
{
    m_object = value;
    m_objectIsSet = true;
}

bool ListThreadsResponse::objectIsSet() const
{
    return m_objectIsSet;
}

void ListThreadsResponse::unsetobject()
{
    m_objectIsSet = false;
}
std::vector<std::shared_ptr<ThreadObject>>& ListThreadsResponse::getData()
{
    return m_Data;
}

void ListThreadsResponse::setData(const std::vector<std::shared_ptr<ThreadObject>>& value)
{
    m_Data = value;
    m_DataIsSet = true;
}

bool ListThreadsResponse::dataIsSet() const
{
    return m_DataIsSet;
}

void ListThreadsResponse::unsetData()
{
    m_DataIsSet = false;
}
utility::string_t ListThreadsResponse::getFirstId() const
{
    return m_First_id;
}

void ListThreadsResponse::setFirstId(const utility::string_t& value)
{
    m_First_id = value;
    m_First_idIsSet = true;
}

bool ListThreadsResponse::firstIdIsSet() const
{
    return m_First_idIsSet;
}

void ListThreadsResponse::unsetFirst_id()
{
    m_First_idIsSet = false;
}
utility::string_t ListThreadsResponse::getLastId() const
{
    return m_Last_id;
}

void ListThreadsResponse::setLastId(const utility::string_t& value)
{
    m_Last_id = value;
    m_Last_idIsSet = true;
}

bool ListThreadsResponse::lastIdIsSet() const
{
    return m_Last_idIsSet;
}

void ListThreadsResponse::unsetLast_id()
{
    m_Last_idIsSet = false;
}
bool ListThreadsResponse::isHasMore() const
{
    return m_Has_more;
}

void ListThreadsResponse::setHasMore(bool value)
{
    m_Has_more = value;
    m_Has_moreIsSet = true;
}

bool ListThreadsResponse::hasMoreIsSet() const
{
    return m_Has_moreIsSet;
}

void ListThreadsResponse::unsetHas_more()
{
    m_Has_moreIsSet = false;
}
}
}
}
}


