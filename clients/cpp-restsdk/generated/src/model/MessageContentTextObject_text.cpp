/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/MessageContentTextObject_text.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



MessageContentTextObject_text::MessageContentTextObject_text()
{
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
    m_AnnotationsIsSet = false;
}

MessageContentTextObject_text::~MessageContentTextObject_text()
{
}

void MessageContentTextObject_text::validate()
{
    // TODO: implement validation
}

web::json::value MessageContentTextObject_text::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }
    if(m_AnnotationsIsSet)
    {
        val[utility::conversions::to_string_t(U("annotations"))] = ModelBase::toJson(m_Annotations);
    }

    return val;
}

bool MessageContentTextObject_text::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("annotations"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("annotations")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<MessageContentTextObject_text_annotations_inner>> refVal_setAnnotations;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAnnotations);
            setAnnotations(refVal_setAnnotations);
        }
    }
    return ok;
}

void MessageContentTextObject_text::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
    if(m_AnnotationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("annotations")), m_Annotations));
    }
}

bool MessageContentTextObject_text::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        utility::string_t refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("annotations"))))
    {
        std::vector<std::shared_ptr<MessageContentTextObject_text_annotations_inner>> refVal_setAnnotations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("annotations"))), refVal_setAnnotations );
        setAnnotations(refVal_setAnnotations);
    }
    return ok;
}

utility::string_t MessageContentTextObject_text::getValue() const
{
    return m_Value;
}

void MessageContentTextObject_text::setValue(const utility::string_t& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool MessageContentTextObject_text::valueIsSet() const
{
    return m_ValueIsSet;
}

void MessageContentTextObject_text::unsetValue()
{
    m_ValueIsSet = false;
}
std::vector<std::shared_ptr<MessageContentTextObject_text_annotations_inner>>& MessageContentTextObject_text::getAnnotations()
{
    return m_Annotations;
}

void MessageContentTextObject_text::setAnnotations(const std::vector<std::shared_ptr<MessageContentTextObject_text_annotations_inner>>& value)
{
    m_Annotations = value;
    m_AnnotationsIsSet = true;
}

bool MessageContentTextObject_text::annotationsIsSet() const
{
    return m_AnnotationsIsSet;
}

void MessageContentTextObject_text::unsetAnnotations()
{
    m_AnnotationsIsSet = false;
}
}
}
}
}


