/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/MessageDeltaContentTextObject_text_annotations_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


void MessageDeltaContentTextObject_text_annotations_inner::validate()
{
    // TODO: implement validation
}

const MessageDeltaContentTextObject_text_annotations_inner::VariantType& MessageDeltaContentTextObject_text_annotations_inner::getVariant() const
{
    return m_variantValue;
}

void MessageDeltaContentTextObject_text_annotations_inner::setVariant(MessageDeltaContentTextObject_text_annotations_inner::VariantType value)
{
    m_variantValue = value;
}

web::json::value MessageDeltaContentTextObject_text_annotations_inner::toJson() const
{
    web::json::value val = web::json::value::object();

    std::visit([&](auto&& arg) {
        using T = std::decay_t<decltype(arg)>;
        if constexpr (std::is_same_v<T, std::monostate>) {
            val = web::json::value::null();
        } else {
            val = arg.toJson();
        }
    }, m_variantValue);

    return val;
}

void MessageDeltaContentTextObject_text_annotations_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    std::visit([&](auto&& arg) {
        using T = std::decay_t<decltype(arg)>;
        if constexpr (!std::is_same_v<T, std::monostate>) {
          arg.toMultipart(multipart, prefix);
        }
    }, m_variantValue);
}

template bool MessageDeltaContentTextObject_text_annotations_inner::fromJson<MessageDeltaContentTextAnnotationsFileCitationObject>(const web::json::value& json);
template bool MessageDeltaContentTextObject_text_annotations_inner::fromMultiPart<MessageDeltaContentTextAnnotationsFileCitationObject>(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix);
template bool MessageDeltaContentTextObject_text_annotations_inner::fromJson<MessageDeltaContentTextAnnotationsFilePathObject>(const web::json::value& json);
template bool MessageDeltaContentTextObject_text_annotations_inner::fromMultiPart<MessageDeltaContentTextAnnotationsFilePathObject>(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix);


}
}
}
}


