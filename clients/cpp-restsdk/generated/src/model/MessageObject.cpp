/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/MessageObject.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



MessageObject::MessageObject()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_object = utility::conversions::to_string_t("");
    m_objectIsSet = false;
    m_Created_at = 0;
    m_Created_atIsSet = false;
    m_Thread_id = utility::conversions::to_string_t("");
    m_Thread_idIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Incomplete_detailsIsSet = false;
    m_Completed_at = 0;
    m_Completed_atIsSet = false;
    m_Incomplete_at = 0;
    m_Incomplete_atIsSet = false;
    m_Role = utility::conversions::to_string_t("");
    m_RoleIsSet = false;
    m_ContentIsSet = false;
    m_Assistant_id = utility::conversions::to_string_t("");
    m_Assistant_idIsSet = false;
    m_Run_id = utility::conversions::to_string_t("");
    m_Run_idIsSet = false;
    m_File_idsIsSet = false;
    m_MetadataIsSet = false;
}

MessageObject::~MessageObject()
{
}

void MessageObject::validate()
{
    // TODO: implement validation
}

web::json::value MessageObject::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_objectIsSet)
    {
        val[utility::conversions::to_string_t(U("object"))] = ModelBase::toJson(m_object);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_Thread_idIsSet)
    {
        val[utility::conversions::to_string_t(U("thread_id"))] = ModelBase::toJson(m_Thread_id);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_Incomplete_detailsIsSet)
    {
        val[utility::conversions::to_string_t(U("incomplete_details"))] = ModelBase::toJson(m_Incomplete_details);
    }
    if(m_Completed_atIsSet)
    {
        val[utility::conversions::to_string_t(U("completed_at"))] = ModelBase::toJson(m_Completed_at);
    }
    if(m_Incomplete_atIsSet)
    {
        val[utility::conversions::to_string_t(U("incomplete_at"))] = ModelBase::toJson(m_Incomplete_at);
    }
    if(m_RoleIsSet)
    {
        val[utility::conversions::to_string_t(U("role"))] = ModelBase::toJson(m_Role);
    }
    if(m_ContentIsSet)
    {
        val[utility::conversions::to_string_t(U("content"))] = ModelBase::toJson(m_Content);
    }
    if(m_Assistant_idIsSet)
    {
        val[utility::conversions::to_string_t(U("assistant_id"))] = ModelBase::toJson(m_Assistant_id);
    }
    if(m_Run_idIsSet)
    {
        val[utility::conversions::to_string_t(U("run_id"))] = ModelBase::toJson(m_Run_id);
    }
    if(m_File_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("file_ids"))] = ModelBase::toJson(m_File_ids);
    }
    if(m_MetadataIsSet)
    {
        val[utility::conversions::to_string_t(U("metadata"))] = ModelBase::toJson(m_Metadata);
    }

    return val;
}

bool MessageObject::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("object"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("object")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setObject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setObject);
            setObject(refVal_setObject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("thread_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("thread_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setThreadId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThreadId);
            setThreadId(refVal_setThreadId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("incomplete_details"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("incomplete_details")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MessageObject_incomplete_details> refVal_setIncompleteDetails;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncompleteDetails);
            setIncompleteDetails(refVal_setIncompleteDetails);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("completed_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("completed_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCompletedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCompletedAt);
            setCompletedAt(refVal_setCompletedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("incomplete_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("incomplete_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setIncompleteAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncompleteAt);
            setIncompleteAt(refVal_setIncompleteAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("role"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("role")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRole;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRole);
            setRole(refVal_setRole);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("content"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("content")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<MessageObject_content_inner>> refVal_setContent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContent);
            setContent(refVal_setContent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("assistant_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("assistant_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssistantId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssistantId);
            setAssistantId(refVal_setAssistantId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("run_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("run_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRunId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRunId);
            setRunId(refVal_setRunId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("file_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("file_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setFileIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFileIds);
            setFileIds(refVal_setFileIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("metadata"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metadata")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setMetadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetadata);
            setMetadata(refVal_setMetadata);
        }
    }
    return ok;
}

void MessageObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_objectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("object")), m_object));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
    if(m_Thread_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("thread_id")), m_Thread_id));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_Incomplete_detailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("incomplete_details")), m_Incomplete_details));
    }
    if(m_Completed_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("completed_at")), m_Completed_at));
    }
    if(m_Incomplete_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("incomplete_at")), m_Incomplete_at));
    }
    if(m_RoleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("role")), m_Role));
    }
    if(m_ContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("content")), m_Content));
    }
    if(m_Assistant_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("assistant_id")), m_Assistant_id));
    }
    if(m_Run_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("run_id")), m_Run_id));
    }
    if(m_File_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("file_ids")), m_File_ids));
    }
    if(m_MetadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metadata")), m_Metadata));
    }
}

bool MessageObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("object"))))
    {
        utility::string_t refVal_setObject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("object"))), refVal_setObject );
        setObject(refVal_setObject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        int32_t refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("thread_id"))))
    {
        utility::string_t refVal_setThreadId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("thread_id"))), refVal_setThreadId );
        setThreadId(refVal_setThreadId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("incomplete_details"))))
    {
        std::shared_ptr<MessageObject_incomplete_details> refVal_setIncompleteDetails;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("incomplete_details"))), refVal_setIncompleteDetails );
        setIncompleteDetails(refVal_setIncompleteDetails);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("completed_at"))))
    {
        int32_t refVal_setCompletedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("completed_at"))), refVal_setCompletedAt );
        setCompletedAt(refVal_setCompletedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("incomplete_at"))))
    {
        int32_t refVal_setIncompleteAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("incomplete_at"))), refVal_setIncompleteAt );
        setIncompleteAt(refVal_setIncompleteAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("role"))))
    {
        utility::string_t refVal_setRole;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("role"))), refVal_setRole );
        setRole(refVal_setRole);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("content"))))
    {
        std::vector<std::shared_ptr<MessageObject_content_inner>> refVal_setContent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("content"))), refVal_setContent );
        setContent(refVal_setContent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("assistant_id"))))
    {
        utility::string_t refVal_setAssistantId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("assistant_id"))), refVal_setAssistantId );
        setAssistantId(refVal_setAssistantId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("run_id"))))
    {
        utility::string_t refVal_setRunId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("run_id"))), refVal_setRunId );
        setRunId(refVal_setRunId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("file_ids"))))
    {
        std::vector<utility::string_t> refVal_setFileIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("file_ids"))), refVal_setFileIds );
        setFileIds(refVal_setFileIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("metadata"))))
    {
        std::shared_ptr<Object> refVal_setMetadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metadata"))), refVal_setMetadata );
        setMetadata(refVal_setMetadata);
    }
    return ok;
}

utility::string_t MessageObject::getId() const
{
    return m_Id;
}

void MessageObject::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool MessageObject::idIsSet() const
{
    return m_IdIsSet;
}

void MessageObject::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t MessageObject::getObject() const
{
    return m_object;
}

void MessageObject::setObject(const utility::string_t& value)
{
    m_object = value;
    m_objectIsSet = true;
}

bool MessageObject::objectIsSet() const
{
    return m_objectIsSet;
}

void MessageObject::unsetobject()
{
    m_objectIsSet = false;
}
int32_t MessageObject::getCreatedAt() const
{
    return m_Created_at;
}

void MessageObject::setCreatedAt(int32_t value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool MessageObject::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void MessageObject::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
utility::string_t MessageObject::getThreadId() const
{
    return m_Thread_id;
}

void MessageObject::setThreadId(const utility::string_t& value)
{
    m_Thread_id = value;
    m_Thread_idIsSet = true;
}

bool MessageObject::threadIdIsSet() const
{
    return m_Thread_idIsSet;
}

void MessageObject::unsetThread_id()
{
    m_Thread_idIsSet = false;
}
utility::string_t MessageObject::getStatus() const
{
    return m_Status;
}

void MessageObject::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool MessageObject::statusIsSet() const
{
    return m_StatusIsSet;
}

void MessageObject::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<MessageObject_incomplete_details> MessageObject::getIncompleteDetails() const
{
    return m_Incomplete_details;
}

void MessageObject::setIncompleteDetails(const std::shared_ptr<MessageObject_incomplete_details>& value)
{
    m_Incomplete_details = value;
    m_Incomplete_detailsIsSet = true;
}

bool MessageObject::incompleteDetailsIsSet() const
{
    return m_Incomplete_detailsIsSet;
}

void MessageObject::unsetIncomplete_details()
{
    m_Incomplete_detailsIsSet = false;
}
int32_t MessageObject::getCompletedAt() const
{
    return m_Completed_at;
}

void MessageObject::setCompletedAt(int32_t value)
{
    m_Completed_at = value;
    m_Completed_atIsSet = true;
}

bool MessageObject::completedAtIsSet() const
{
    return m_Completed_atIsSet;
}

void MessageObject::unsetCompleted_at()
{
    m_Completed_atIsSet = false;
}
int32_t MessageObject::getIncompleteAt() const
{
    return m_Incomplete_at;
}

void MessageObject::setIncompleteAt(int32_t value)
{
    m_Incomplete_at = value;
    m_Incomplete_atIsSet = true;
}

bool MessageObject::incompleteAtIsSet() const
{
    return m_Incomplete_atIsSet;
}

void MessageObject::unsetIncomplete_at()
{
    m_Incomplete_atIsSet = false;
}
utility::string_t MessageObject::getRole() const
{
    return m_Role;
}

void MessageObject::setRole(const utility::string_t& value)
{
    m_Role = value;
    m_RoleIsSet = true;
}

bool MessageObject::roleIsSet() const
{
    return m_RoleIsSet;
}

void MessageObject::unsetRole()
{
    m_RoleIsSet = false;
}
std::vector<std::shared_ptr<MessageObject_content_inner>>& MessageObject::getContent()
{
    return m_Content;
}

void MessageObject::setContent(const std::vector<std::shared_ptr<MessageObject_content_inner>>& value)
{
    m_Content = value;
    m_ContentIsSet = true;
}

bool MessageObject::contentIsSet() const
{
    return m_ContentIsSet;
}

void MessageObject::unsetContent()
{
    m_ContentIsSet = false;
}
utility::string_t MessageObject::getAssistantId() const
{
    return m_Assistant_id;
}

void MessageObject::setAssistantId(const utility::string_t& value)
{
    m_Assistant_id = value;
    m_Assistant_idIsSet = true;
}

bool MessageObject::assistantIdIsSet() const
{
    return m_Assistant_idIsSet;
}

void MessageObject::unsetAssistant_id()
{
    m_Assistant_idIsSet = false;
}
utility::string_t MessageObject::getRunId() const
{
    return m_Run_id;
}

void MessageObject::setRunId(const utility::string_t& value)
{
    m_Run_id = value;
    m_Run_idIsSet = true;
}

bool MessageObject::runIdIsSet() const
{
    return m_Run_idIsSet;
}

void MessageObject::unsetRun_id()
{
    m_Run_idIsSet = false;
}
std::vector<utility::string_t>& MessageObject::getFileIds()
{
    return m_File_ids;
}

void MessageObject::setFileIds(const std::vector<utility::string_t>& value)
{
    m_File_ids = value;
    m_File_idsIsSet = true;
}

bool MessageObject::fileIdsIsSet() const
{
    return m_File_idsIsSet;
}

void MessageObject::unsetFile_ids()
{
    m_File_idsIsSet = false;
}
std::shared_ptr<Object> MessageObject::getMetadata() const
{
    return m_Metadata;
}

void MessageObject::setMetadata(const std::shared_ptr<Object>& value)
{
    m_Metadata = value;
    m_MetadataIsSet = true;
}

bool MessageObject::metadataIsSet() const
{
    return m_MetadataIsSet;
}

void MessageObject::unsetMetadata()
{
    m_MetadataIsSet = false;
}
}
}
}
}


