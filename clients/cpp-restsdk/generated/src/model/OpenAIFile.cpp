/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/OpenAIFile.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OpenAIFile::OpenAIFile()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_object = utility::conversions::to_string_t("");
    m_objectIsSet = false;
    m_Bytes = 0;
    m_BytesIsSet = false;
    m_Created_at = 0;
    m_Created_atIsSet = false;
    m_Filename = utility::conversions::to_string_t("");
    m_FilenameIsSet = false;
    m_Purpose = utility::conversions::to_string_t("");
    m_PurposeIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Status_detailsIsSet = false;
}

OpenAIFile::~OpenAIFile()
{
}

void OpenAIFile::validate()
{
    // TODO: implement validation
}

web::json::value OpenAIFile::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_objectIsSet)
    {
        val[utility::conversions::to_string_t(U("object"))] = ModelBase::toJson(m_object);
    }
    if(m_BytesIsSet)
    {
        val[utility::conversions::to_string_t(U("bytes"))] = ModelBase::toJson(m_Bytes);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_FilenameIsSet)
    {
        val[utility::conversions::to_string_t(U("filename"))] = ModelBase::toJson(m_Filename);
    }
    if(m_PurposeIsSet)
    {
        val[utility::conversions::to_string_t(U("purpose"))] = ModelBase::toJson(m_Purpose);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_Status_detailsIsSet)
    {
        val[utility::conversions::to_string_t(U("status_details"))] = ModelBase::toJson(m_Status_details);
    }

    return val;
}

bool OpenAIFile::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("object"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("object")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setObject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setObject);
            setObject(refVal_setObject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bytes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bytes")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBytes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBytes);
            setBytes(refVal_setBytes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("filename"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("filename")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFilename;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilename);
            setFilename(refVal_setFilename);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("purpose"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("purpose")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPurpose;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPurpose);
            setPurpose(refVal_setPurpose);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status_details"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status_details")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setStatusDetails;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatusDetails);
            setStatusDetails(refVal_setStatusDetails);
        }
    }
    return ok;
}

void OpenAIFile::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_objectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("object")), m_object));
    }
    if(m_BytesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bytes")), m_Bytes));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
    if(m_FilenameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("filename")), m_Filename));
    }
    if(m_PurposeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("purpose")), m_Purpose));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_Status_detailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status_details")), m_Status_details));
    }
}

bool OpenAIFile::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("object"))))
    {
        utility::string_t refVal_setObject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("object"))), refVal_setObject );
        setObject(refVal_setObject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bytes"))))
    {
        int32_t refVal_setBytes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bytes"))), refVal_setBytes );
        setBytes(refVal_setBytes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        int32_t refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("filename"))))
    {
        utility::string_t refVal_setFilename;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("filename"))), refVal_setFilename );
        setFilename(refVal_setFilename);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("purpose"))))
    {
        utility::string_t refVal_setPurpose;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("purpose"))), refVal_setPurpose );
        setPurpose(refVal_setPurpose);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status_details"))))
    {
        std::shared_ptr<Object> refVal_setStatusDetails;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status_details"))), refVal_setStatusDetails );
        setStatusDetails(refVal_setStatusDetails);
    }
    return ok;
}

utility::string_t OpenAIFile::getId() const
{
    return m_Id;
}

void OpenAIFile::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool OpenAIFile::idIsSet() const
{
    return m_IdIsSet;
}

void OpenAIFile::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t OpenAIFile::getObject() const
{
    return m_object;
}

void OpenAIFile::setObject(const utility::string_t& value)
{
    m_object = value;
    m_objectIsSet = true;
}

bool OpenAIFile::objectIsSet() const
{
    return m_objectIsSet;
}

void OpenAIFile::unsetobject()
{
    m_objectIsSet = false;
}
int32_t OpenAIFile::getBytes() const
{
    return m_Bytes;
}

void OpenAIFile::setBytes(int32_t value)
{
    m_Bytes = value;
    m_BytesIsSet = true;
}

bool OpenAIFile::bytesIsSet() const
{
    return m_BytesIsSet;
}

void OpenAIFile::unsetBytes()
{
    m_BytesIsSet = false;
}
int32_t OpenAIFile::getCreatedAt() const
{
    return m_Created_at;
}

void OpenAIFile::setCreatedAt(int32_t value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool OpenAIFile::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void OpenAIFile::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
utility::string_t OpenAIFile::getFilename() const
{
    return m_Filename;
}

void OpenAIFile::setFilename(const utility::string_t& value)
{
    m_Filename = value;
    m_FilenameIsSet = true;
}

bool OpenAIFile::filenameIsSet() const
{
    return m_FilenameIsSet;
}

void OpenAIFile::unsetFilename()
{
    m_FilenameIsSet = false;
}
utility::string_t OpenAIFile::getPurpose() const
{
    return m_Purpose;
}

void OpenAIFile::setPurpose(const utility::string_t& value)
{
    m_Purpose = value;
    m_PurposeIsSet = true;
}

bool OpenAIFile::purposeIsSet() const
{
    return m_PurposeIsSet;
}

void OpenAIFile::unsetPurpose()
{
    m_PurposeIsSet = false;
}
utility::string_t OpenAIFile::getStatus() const
{
    return m_Status;
}

void OpenAIFile::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool OpenAIFile::statusIsSet() const
{
    return m_StatusIsSet;
}

void OpenAIFile::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<Object> OpenAIFile::getStatusDetails() const
{
    return m_Status_details;
}

void OpenAIFile::setStatusDetails(const std::shared_ptr<Object>& value)
{
    m_Status_details = value;
    m_Status_detailsIsSet = true;
}

bool OpenAIFile::statusDetailsIsSet() const
{
    return m_Status_detailsIsSet;
}

void OpenAIFile::unsetStatus_details()
{
    m_Status_detailsIsSet = false;
}
}
}
}
}


