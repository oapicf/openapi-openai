/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/RunCompletionUsage.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



RunCompletionUsage::RunCompletionUsage()
{
    m_Completion_tokens = 0;
    m_Completion_tokensIsSet = false;
    m_Prompt_tokens = 0;
    m_Prompt_tokensIsSet = false;
    m_Total_tokens = 0;
    m_Total_tokensIsSet = false;
}

RunCompletionUsage::~RunCompletionUsage()
{
}

void RunCompletionUsage::validate()
{
    // TODO: implement validation
}

web::json::value RunCompletionUsage::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Completion_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("completion_tokens"))] = ModelBase::toJson(m_Completion_tokens);
    }
    if(m_Prompt_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("prompt_tokens"))] = ModelBase::toJson(m_Prompt_tokens);
    }
    if(m_Total_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("total_tokens"))] = ModelBase::toJson(m_Total_tokens);
    }

    return val;
}

bool RunCompletionUsage::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("completion_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("completion_tokens")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCompletionTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCompletionTokens);
            setCompletionTokens(refVal_setCompletionTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("prompt_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("prompt_tokens")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPromptTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPromptTokens);
            setPromptTokens(refVal_setPromptTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_tokens")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotalTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalTokens);
            setTotalTokens(refVal_setTotalTokens);
        }
    }
    return ok;
}

void RunCompletionUsage::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Completion_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("completion_tokens")), m_Completion_tokens));
    }
    if(m_Prompt_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("prompt_tokens")), m_Prompt_tokens));
    }
    if(m_Total_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_tokens")), m_Total_tokens));
    }
}

bool RunCompletionUsage::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("completion_tokens"))))
    {
        int32_t refVal_setCompletionTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("completion_tokens"))), refVal_setCompletionTokens );
        setCompletionTokens(refVal_setCompletionTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("prompt_tokens"))))
    {
        int32_t refVal_setPromptTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("prompt_tokens"))), refVal_setPromptTokens );
        setPromptTokens(refVal_setPromptTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_tokens"))))
    {
        int32_t refVal_setTotalTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_tokens"))), refVal_setTotalTokens );
        setTotalTokens(refVal_setTotalTokens);
    }
    return ok;
}

int32_t RunCompletionUsage::getCompletionTokens() const
{
    return m_Completion_tokens;
}

void RunCompletionUsage::setCompletionTokens(int32_t value)
{
    m_Completion_tokens = value;
    m_Completion_tokensIsSet = true;
}

bool RunCompletionUsage::completionTokensIsSet() const
{
    return m_Completion_tokensIsSet;
}

void RunCompletionUsage::unsetCompletion_tokens()
{
    m_Completion_tokensIsSet = false;
}
int32_t RunCompletionUsage::getPromptTokens() const
{
    return m_Prompt_tokens;
}

void RunCompletionUsage::setPromptTokens(int32_t value)
{
    m_Prompt_tokens = value;
    m_Prompt_tokensIsSet = true;
}

bool RunCompletionUsage::promptTokensIsSet() const
{
    return m_Prompt_tokensIsSet;
}

void RunCompletionUsage::unsetPrompt_tokens()
{
    m_Prompt_tokensIsSet = false;
}
int32_t RunCompletionUsage::getTotalTokens() const
{
    return m_Total_tokens;
}

void RunCompletionUsage::setTotalTokens(int32_t value)
{
    m_Total_tokens = value;
    m_Total_tokensIsSet = true;
}

bool RunCompletionUsage::totalTokensIsSet() const
{
    return m_Total_tokensIsSet;
}

void RunCompletionUsage::unsetTotal_tokens()
{
    m_Total_tokensIsSet = false;
}
}
}
}
}


