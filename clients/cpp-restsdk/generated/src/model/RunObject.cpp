/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/RunObject.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



RunObject::RunObject()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_object = utility::conversions::to_string_t("");
    m_objectIsSet = false;
    m_Created_at = 0;
    m_Created_atIsSet = false;
    m_Thread_id = utility::conversions::to_string_t("");
    m_Thread_idIsSet = false;
    m_Assistant_id = utility::conversions::to_string_t("");
    m_Assistant_idIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Required_actionIsSet = false;
    m_Last_errorIsSet = false;
    m_Expires_at = 0;
    m_Expires_atIsSet = false;
    m_Started_at = 0;
    m_Started_atIsSet = false;
    m_Cancelled_at = 0;
    m_Cancelled_atIsSet = false;
    m_Failed_at = 0;
    m_Failed_atIsSet = false;
    m_Completed_at = 0;
    m_Completed_atIsSet = false;
    m_Incomplete_detailsIsSet = false;
    m_Model = utility::conversions::to_string_t("");
    m_ModelIsSet = false;
    m_Instructions = utility::conversions::to_string_t("");
    m_InstructionsIsSet = false;
    m_ToolsIsSet = false;
    m_File_idsIsSet = false;
    m_MetadataIsSet = false;
    m_UsageIsSet = false;
    m_Temperature = 0.0;
    m_TemperatureIsSet = false;
    m_Max_prompt_tokens = 0;
    m_Max_prompt_tokensIsSet = false;
    m_Max_completion_tokens = 0;
    m_Max_completion_tokensIsSet = false;
    m_Truncation_strategyIsSet = false;
    m_Tool_choiceIsSet = false;
    m_Response_formatIsSet = false;
}

RunObject::~RunObject()
{
}

void RunObject::validate()
{
    // TODO: implement validation
}

web::json::value RunObject::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_objectIsSet)
    {
        val[utility::conversions::to_string_t(U("object"))] = ModelBase::toJson(m_object);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_Thread_idIsSet)
    {
        val[utility::conversions::to_string_t(U("thread_id"))] = ModelBase::toJson(m_Thread_id);
    }
    if(m_Assistant_idIsSet)
    {
        val[utility::conversions::to_string_t(U("assistant_id"))] = ModelBase::toJson(m_Assistant_id);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_Required_actionIsSet)
    {
        val[utility::conversions::to_string_t(U("required_action"))] = ModelBase::toJson(m_Required_action);
    }
    if(m_Last_errorIsSet)
    {
        val[utility::conversions::to_string_t(U("last_error"))] = ModelBase::toJson(m_Last_error);
    }
    if(m_Expires_atIsSet)
    {
        val[utility::conversions::to_string_t(U("expires_at"))] = ModelBase::toJson(m_Expires_at);
    }
    if(m_Started_atIsSet)
    {
        val[utility::conversions::to_string_t(U("started_at"))] = ModelBase::toJson(m_Started_at);
    }
    if(m_Cancelled_atIsSet)
    {
        val[utility::conversions::to_string_t(U("cancelled_at"))] = ModelBase::toJson(m_Cancelled_at);
    }
    if(m_Failed_atIsSet)
    {
        val[utility::conversions::to_string_t(U("failed_at"))] = ModelBase::toJson(m_Failed_at);
    }
    if(m_Completed_atIsSet)
    {
        val[utility::conversions::to_string_t(U("completed_at"))] = ModelBase::toJson(m_Completed_at);
    }
    if(m_Incomplete_detailsIsSet)
    {
        val[utility::conversions::to_string_t(U("incomplete_details"))] = ModelBase::toJson(m_Incomplete_details);
    }
    if(m_ModelIsSet)
    {
        val[utility::conversions::to_string_t(U("model"))] = ModelBase::toJson(m_Model);
    }
    if(m_InstructionsIsSet)
    {
        val[utility::conversions::to_string_t(U("instructions"))] = ModelBase::toJson(m_Instructions);
    }
    if(m_ToolsIsSet)
    {
        val[utility::conversions::to_string_t(U("tools"))] = ModelBase::toJson(m_Tools);
    }
    if(m_File_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("file_ids"))] = ModelBase::toJson(m_File_ids);
    }
    if(m_MetadataIsSet)
    {
        val[utility::conversions::to_string_t(U("metadata"))] = ModelBase::toJson(m_Metadata);
    }
    if(m_UsageIsSet)
    {
        val[utility::conversions::to_string_t(U("usage"))] = ModelBase::toJson(m_Usage);
    }
    if(m_TemperatureIsSet)
    {
        val[utility::conversions::to_string_t(U("temperature"))] = ModelBase::toJson(m_Temperature);
    }
    if(m_Max_prompt_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("max_prompt_tokens"))] = ModelBase::toJson(m_Max_prompt_tokens);
    }
    if(m_Max_completion_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("max_completion_tokens"))] = ModelBase::toJson(m_Max_completion_tokens);
    }
    if(m_Truncation_strategyIsSet)
    {
        val[utility::conversions::to_string_t(U("truncation_strategy"))] = ModelBase::toJson(m_Truncation_strategy);
    }
    if(m_Tool_choiceIsSet)
    {
        val[utility::conversions::to_string_t(U("tool_choice"))] = ModelBase::toJson(m_Tool_choice);
    }
    if(m_Response_formatIsSet)
    {
        val[utility::conversions::to_string_t(U("response_format"))] = ModelBase::toJson(m_Response_format);
    }

    return val;
}

bool RunObject::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("object"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("object")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setObject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setObject);
            setObject(refVal_setObject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("thread_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("thread_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setThreadId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThreadId);
            setThreadId(refVal_setThreadId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("assistant_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("assistant_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssistantId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssistantId);
            setAssistantId(refVal_setAssistantId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("required_action"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("required_action")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RunObject_required_action> refVal_setRequiredAction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequiredAction);
            setRequiredAction(refVal_setRequiredAction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_error")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RunObject_last_error> refVal_setLastError;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastError);
            setLastError(refVal_setLastError);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expires_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expires_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setExpiresAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpiresAt);
            setExpiresAt(refVal_setExpiresAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("started_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("started_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setStartedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartedAt);
            setStartedAt(refVal_setStartedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cancelled_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cancelled_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCancelledAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCancelledAt);
            setCancelledAt(refVal_setCancelledAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("failed_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("failed_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFailedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFailedAt);
            setFailedAt(refVal_setFailedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("completed_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("completed_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCompletedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCompletedAt);
            setCompletedAt(refVal_setCompletedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("incomplete_details"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("incomplete_details")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RunObject_incomplete_details> refVal_setIncompleteDetails;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncompleteDetails);
            setIncompleteDetails(refVal_setIncompleteDetails);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("model"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("model")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setModel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModel);
            setModel(refVal_setModel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("instructions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("instructions")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInstructions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInstructions);
            setInstructions(refVal_setInstructions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tools"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tools")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AssistantObject_tools_inner>> refVal_setTools;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTools);
            setTools(refVal_setTools);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("file_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("file_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setFileIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFileIds);
            setFileIds(refVal_setFileIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("metadata"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metadata")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setMetadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetadata);
            setMetadata(refVal_setMetadata);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("usage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("usage")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RunCompletionUsage> refVal_setUsage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsage);
            setUsage(refVal_setUsage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("temperature"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("temperature")));
        if(!fieldValue.is_null())
        {
            double refVal_setTemperature;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemperature);
            setTemperature(refVal_setTemperature);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_prompt_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_prompt_tokens")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxPromptTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxPromptTokens);
            setMaxPromptTokens(refVal_setMaxPromptTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_completion_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_completion_tokens")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxCompletionTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxCompletionTokens);
            setMaxCompletionTokens(refVal_setMaxCompletionTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("truncation_strategy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("truncation_strategy")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TruncationObject> refVal_setTruncationStrategy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTruncationStrategy);
            setTruncationStrategy(refVal_setTruncationStrategy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tool_choice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tool_choice")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AssistantsApiToolChoiceOption> refVal_setToolChoice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToolChoice);
            setToolChoice(refVal_setToolChoice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("response_format"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("response_format")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AssistantsApiResponseFormatOption> refVal_setResponseFormat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResponseFormat);
            setResponseFormat(refVal_setResponseFormat);
        }
    }
    return ok;
}

void RunObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_objectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("object")), m_object));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
    if(m_Thread_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("thread_id")), m_Thread_id));
    }
    if(m_Assistant_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("assistant_id")), m_Assistant_id));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_Required_actionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("required_action")), m_Required_action));
    }
    if(m_Last_errorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_error")), m_Last_error));
    }
    if(m_Expires_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expires_at")), m_Expires_at));
    }
    if(m_Started_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("started_at")), m_Started_at));
    }
    if(m_Cancelled_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cancelled_at")), m_Cancelled_at));
    }
    if(m_Failed_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("failed_at")), m_Failed_at));
    }
    if(m_Completed_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("completed_at")), m_Completed_at));
    }
    if(m_Incomplete_detailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("incomplete_details")), m_Incomplete_details));
    }
    if(m_ModelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("model")), m_Model));
    }
    if(m_InstructionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("instructions")), m_Instructions));
    }
    if(m_ToolsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tools")), m_Tools));
    }
    if(m_File_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("file_ids")), m_File_ids));
    }
    if(m_MetadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metadata")), m_Metadata));
    }
    if(m_UsageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("usage")), m_Usage));
    }
    if(m_TemperatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("temperature")), m_Temperature));
    }
    if(m_Max_prompt_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_prompt_tokens")), m_Max_prompt_tokens));
    }
    if(m_Max_completion_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_completion_tokens")), m_Max_completion_tokens));
    }
    if(m_Truncation_strategyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("truncation_strategy")), m_Truncation_strategy));
    }
    if(m_Tool_choiceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tool_choice")), m_Tool_choice));
    }
    if(m_Response_formatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("response_format")), m_Response_format));
    }
}

bool RunObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("object"))))
    {
        utility::string_t refVal_setObject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("object"))), refVal_setObject );
        setObject(refVal_setObject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        int32_t refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("thread_id"))))
    {
        utility::string_t refVal_setThreadId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("thread_id"))), refVal_setThreadId );
        setThreadId(refVal_setThreadId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("assistant_id"))))
    {
        utility::string_t refVal_setAssistantId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("assistant_id"))), refVal_setAssistantId );
        setAssistantId(refVal_setAssistantId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("required_action"))))
    {
        std::shared_ptr<RunObject_required_action> refVal_setRequiredAction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("required_action"))), refVal_setRequiredAction );
        setRequiredAction(refVal_setRequiredAction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_error"))))
    {
        std::shared_ptr<RunObject_last_error> refVal_setLastError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_error"))), refVal_setLastError );
        setLastError(refVal_setLastError);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expires_at"))))
    {
        int32_t refVal_setExpiresAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expires_at"))), refVal_setExpiresAt );
        setExpiresAt(refVal_setExpiresAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("started_at"))))
    {
        int32_t refVal_setStartedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("started_at"))), refVal_setStartedAt );
        setStartedAt(refVal_setStartedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cancelled_at"))))
    {
        int32_t refVal_setCancelledAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cancelled_at"))), refVal_setCancelledAt );
        setCancelledAt(refVal_setCancelledAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("failed_at"))))
    {
        int32_t refVal_setFailedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("failed_at"))), refVal_setFailedAt );
        setFailedAt(refVal_setFailedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("completed_at"))))
    {
        int32_t refVal_setCompletedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("completed_at"))), refVal_setCompletedAt );
        setCompletedAt(refVal_setCompletedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("incomplete_details"))))
    {
        std::shared_ptr<RunObject_incomplete_details> refVal_setIncompleteDetails;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("incomplete_details"))), refVal_setIncompleteDetails );
        setIncompleteDetails(refVal_setIncompleteDetails);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("model"))))
    {
        utility::string_t refVal_setModel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("model"))), refVal_setModel );
        setModel(refVal_setModel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("instructions"))))
    {
        utility::string_t refVal_setInstructions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("instructions"))), refVal_setInstructions );
        setInstructions(refVal_setInstructions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tools"))))
    {
        std::vector<std::shared_ptr<AssistantObject_tools_inner>> refVal_setTools;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tools"))), refVal_setTools );
        setTools(refVal_setTools);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("file_ids"))))
    {
        std::vector<utility::string_t> refVal_setFileIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("file_ids"))), refVal_setFileIds );
        setFileIds(refVal_setFileIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("metadata"))))
    {
        std::shared_ptr<Object> refVal_setMetadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metadata"))), refVal_setMetadata );
        setMetadata(refVal_setMetadata);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("usage"))))
    {
        std::shared_ptr<RunCompletionUsage> refVal_setUsage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("usage"))), refVal_setUsage );
        setUsage(refVal_setUsage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("temperature"))))
    {
        double refVal_setTemperature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("temperature"))), refVal_setTemperature );
        setTemperature(refVal_setTemperature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_prompt_tokens"))))
    {
        int32_t refVal_setMaxPromptTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_prompt_tokens"))), refVal_setMaxPromptTokens );
        setMaxPromptTokens(refVal_setMaxPromptTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_completion_tokens"))))
    {
        int32_t refVal_setMaxCompletionTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_completion_tokens"))), refVal_setMaxCompletionTokens );
        setMaxCompletionTokens(refVal_setMaxCompletionTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("truncation_strategy"))))
    {
        std::shared_ptr<TruncationObject> refVal_setTruncationStrategy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("truncation_strategy"))), refVal_setTruncationStrategy );
        setTruncationStrategy(refVal_setTruncationStrategy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tool_choice"))))
    {
        std::shared_ptr<AssistantsApiToolChoiceOption> refVal_setToolChoice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tool_choice"))), refVal_setToolChoice );
        setToolChoice(refVal_setToolChoice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("response_format"))))
    {
        std::shared_ptr<AssistantsApiResponseFormatOption> refVal_setResponseFormat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("response_format"))), refVal_setResponseFormat );
        setResponseFormat(refVal_setResponseFormat);
    }
    return ok;
}

utility::string_t RunObject::getId() const
{
    return m_Id;
}

void RunObject::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool RunObject::idIsSet() const
{
    return m_IdIsSet;
}

void RunObject::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t RunObject::getObject() const
{
    return m_object;
}

void RunObject::setObject(const utility::string_t& value)
{
    m_object = value;
    m_objectIsSet = true;
}

bool RunObject::objectIsSet() const
{
    return m_objectIsSet;
}

void RunObject::unsetobject()
{
    m_objectIsSet = false;
}
int32_t RunObject::getCreatedAt() const
{
    return m_Created_at;
}

void RunObject::setCreatedAt(int32_t value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool RunObject::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void RunObject::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
utility::string_t RunObject::getThreadId() const
{
    return m_Thread_id;
}

void RunObject::setThreadId(const utility::string_t& value)
{
    m_Thread_id = value;
    m_Thread_idIsSet = true;
}

bool RunObject::threadIdIsSet() const
{
    return m_Thread_idIsSet;
}

void RunObject::unsetThread_id()
{
    m_Thread_idIsSet = false;
}
utility::string_t RunObject::getAssistantId() const
{
    return m_Assistant_id;
}

void RunObject::setAssistantId(const utility::string_t& value)
{
    m_Assistant_id = value;
    m_Assistant_idIsSet = true;
}

bool RunObject::assistantIdIsSet() const
{
    return m_Assistant_idIsSet;
}

void RunObject::unsetAssistant_id()
{
    m_Assistant_idIsSet = false;
}
utility::string_t RunObject::getStatus() const
{
    return m_Status;
}

void RunObject::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool RunObject::statusIsSet() const
{
    return m_StatusIsSet;
}

void RunObject::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<RunObject_required_action> RunObject::getRequiredAction() const
{
    return m_Required_action;
}

void RunObject::setRequiredAction(const std::shared_ptr<RunObject_required_action>& value)
{
    m_Required_action = value;
    m_Required_actionIsSet = true;
}

bool RunObject::requiredActionIsSet() const
{
    return m_Required_actionIsSet;
}

void RunObject::unsetRequired_action()
{
    m_Required_actionIsSet = false;
}
std::shared_ptr<RunObject_last_error> RunObject::getLastError() const
{
    return m_Last_error;
}

void RunObject::setLastError(const std::shared_ptr<RunObject_last_error>& value)
{
    m_Last_error = value;
    m_Last_errorIsSet = true;
}

bool RunObject::lastErrorIsSet() const
{
    return m_Last_errorIsSet;
}

void RunObject::unsetLast_error()
{
    m_Last_errorIsSet = false;
}
int32_t RunObject::getExpiresAt() const
{
    return m_Expires_at;
}

void RunObject::setExpiresAt(int32_t value)
{
    m_Expires_at = value;
    m_Expires_atIsSet = true;
}

bool RunObject::expiresAtIsSet() const
{
    return m_Expires_atIsSet;
}

void RunObject::unsetExpires_at()
{
    m_Expires_atIsSet = false;
}
int32_t RunObject::getStartedAt() const
{
    return m_Started_at;
}

void RunObject::setStartedAt(int32_t value)
{
    m_Started_at = value;
    m_Started_atIsSet = true;
}

bool RunObject::startedAtIsSet() const
{
    return m_Started_atIsSet;
}

void RunObject::unsetStarted_at()
{
    m_Started_atIsSet = false;
}
int32_t RunObject::getCancelledAt() const
{
    return m_Cancelled_at;
}

void RunObject::setCancelledAt(int32_t value)
{
    m_Cancelled_at = value;
    m_Cancelled_atIsSet = true;
}

bool RunObject::cancelledAtIsSet() const
{
    return m_Cancelled_atIsSet;
}

void RunObject::unsetCancelled_at()
{
    m_Cancelled_atIsSet = false;
}
int32_t RunObject::getFailedAt() const
{
    return m_Failed_at;
}

void RunObject::setFailedAt(int32_t value)
{
    m_Failed_at = value;
    m_Failed_atIsSet = true;
}

bool RunObject::failedAtIsSet() const
{
    return m_Failed_atIsSet;
}

void RunObject::unsetFailed_at()
{
    m_Failed_atIsSet = false;
}
int32_t RunObject::getCompletedAt() const
{
    return m_Completed_at;
}

void RunObject::setCompletedAt(int32_t value)
{
    m_Completed_at = value;
    m_Completed_atIsSet = true;
}

bool RunObject::completedAtIsSet() const
{
    return m_Completed_atIsSet;
}

void RunObject::unsetCompleted_at()
{
    m_Completed_atIsSet = false;
}
std::shared_ptr<RunObject_incomplete_details> RunObject::getIncompleteDetails() const
{
    return m_Incomplete_details;
}

void RunObject::setIncompleteDetails(const std::shared_ptr<RunObject_incomplete_details>& value)
{
    m_Incomplete_details = value;
    m_Incomplete_detailsIsSet = true;
}

bool RunObject::incompleteDetailsIsSet() const
{
    return m_Incomplete_detailsIsSet;
}

void RunObject::unsetIncomplete_details()
{
    m_Incomplete_detailsIsSet = false;
}
utility::string_t RunObject::getModel() const
{
    return m_Model;
}

void RunObject::setModel(const utility::string_t& value)
{
    m_Model = value;
    m_ModelIsSet = true;
}

bool RunObject::modelIsSet() const
{
    return m_ModelIsSet;
}

void RunObject::unsetModel()
{
    m_ModelIsSet = false;
}
utility::string_t RunObject::getInstructions() const
{
    return m_Instructions;
}

void RunObject::setInstructions(const utility::string_t& value)
{
    m_Instructions = value;
    m_InstructionsIsSet = true;
}

bool RunObject::instructionsIsSet() const
{
    return m_InstructionsIsSet;
}

void RunObject::unsetInstructions()
{
    m_InstructionsIsSet = false;
}
std::vector<std::shared_ptr<AssistantObject_tools_inner>>& RunObject::getTools()
{
    return m_Tools;
}

void RunObject::setTools(const std::vector<std::shared_ptr<AssistantObject_tools_inner>>& value)
{
    m_Tools = value;
    m_ToolsIsSet = true;
}

bool RunObject::toolsIsSet() const
{
    return m_ToolsIsSet;
}

void RunObject::unsetTools()
{
    m_ToolsIsSet = false;
}
std::vector<utility::string_t>& RunObject::getFileIds()
{
    return m_File_ids;
}

void RunObject::setFileIds(const std::vector<utility::string_t>& value)
{
    m_File_ids = value;
    m_File_idsIsSet = true;
}

bool RunObject::fileIdsIsSet() const
{
    return m_File_idsIsSet;
}

void RunObject::unsetFile_ids()
{
    m_File_idsIsSet = false;
}
std::shared_ptr<Object> RunObject::getMetadata() const
{
    return m_Metadata;
}

void RunObject::setMetadata(const std::shared_ptr<Object>& value)
{
    m_Metadata = value;
    m_MetadataIsSet = true;
}

bool RunObject::metadataIsSet() const
{
    return m_MetadataIsSet;
}

void RunObject::unsetMetadata()
{
    m_MetadataIsSet = false;
}
std::shared_ptr<RunCompletionUsage> RunObject::getUsage() const
{
    return m_Usage;
}

void RunObject::setUsage(const std::shared_ptr<RunCompletionUsage>& value)
{
    m_Usage = value;
    m_UsageIsSet = true;
}

bool RunObject::usageIsSet() const
{
    return m_UsageIsSet;
}

void RunObject::unsetUsage()
{
    m_UsageIsSet = false;
}
double RunObject::getTemperature() const
{
    return m_Temperature;
}

void RunObject::setTemperature(double value)
{
    m_Temperature = value;
    m_TemperatureIsSet = true;
}

bool RunObject::temperatureIsSet() const
{
    return m_TemperatureIsSet;
}

void RunObject::unsetTemperature()
{
    m_TemperatureIsSet = false;
}
int32_t RunObject::getMaxPromptTokens() const
{
    return m_Max_prompt_tokens;
}

void RunObject::setMaxPromptTokens(int32_t value)
{
    m_Max_prompt_tokens = value;
    m_Max_prompt_tokensIsSet = true;
}

bool RunObject::maxPromptTokensIsSet() const
{
    return m_Max_prompt_tokensIsSet;
}

void RunObject::unsetMax_prompt_tokens()
{
    m_Max_prompt_tokensIsSet = false;
}
int32_t RunObject::getMaxCompletionTokens() const
{
    return m_Max_completion_tokens;
}

void RunObject::setMaxCompletionTokens(int32_t value)
{
    m_Max_completion_tokens = value;
    m_Max_completion_tokensIsSet = true;
}

bool RunObject::maxCompletionTokensIsSet() const
{
    return m_Max_completion_tokensIsSet;
}

void RunObject::unsetMax_completion_tokens()
{
    m_Max_completion_tokensIsSet = false;
}
std::shared_ptr<TruncationObject> RunObject::getTruncationStrategy() const
{
    return m_Truncation_strategy;
}

void RunObject::setTruncationStrategy(const std::shared_ptr<TruncationObject>& value)
{
    m_Truncation_strategy = value;
    m_Truncation_strategyIsSet = true;
}

bool RunObject::truncationStrategyIsSet() const
{
    return m_Truncation_strategyIsSet;
}

void RunObject::unsetTruncation_strategy()
{
    m_Truncation_strategyIsSet = false;
}
std::shared_ptr<AssistantsApiToolChoiceOption> RunObject::getToolChoice() const
{
    return m_Tool_choice;
}

void RunObject::setToolChoice(const std::shared_ptr<AssistantsApiToolChoiceOption>& value)
{
    m_Tool_choice = value;
    m_Tool_choiceIsSet = true;
}

bool RunObject::toolChoiceIsSet() const
{
    return m_Tool_choiceIsSet;
}

void RunObject::unsetTool_choice()
{
    m_Tool_choiceIsSet = false;
}
std::shared_ptr<AssistantsApiResponseFormatOption> RunObject::getResponseFormat() const
{
    return m_Response_format;
}

void RunObject::setResponseFormat(const std::shared_ptr<AssistantsApiResponseFormatOption>& value)
{
    m_Response_format = value;
    m_Response_formatIsSet = true;
}

bool RunObject::responseFormatIsSet() const
{
    return m_Response_formatIsSet;
}

void RunObject::unsetResponse_format()
{
    m_Response_formatIsSet = false;
}
}
}
}
}


