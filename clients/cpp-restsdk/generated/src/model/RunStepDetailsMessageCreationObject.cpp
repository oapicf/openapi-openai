/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/RunStepDetailsMessageCreationObject.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



RunStepDetailsMessageCreationObject::RunStepDetailsMessageCreationObject()
{
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Message_creationIsSet = false;
}

RunStepDetailsMessageCreationObject::~RunStepDetailsMessageCreationObject()
{
}

void RunStepDetailsMessageCreationObject::validate()
{
    // TODO: implement validation
}

web::json::value RunStepDetailsMessageCreationObject::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_Message_creationIsSet)
    {
        val[utility::conversions::to_string_t(U("message_creation"))] = ModelBase::toJson(m_Message_creation);
    }

    return val;
}

bool RunStepDetailsMessageCreationObject::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("message_creation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message_creation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RunStepDetailsMessageCreationObject_message_creation> refVal_setMessageCreation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessageCreation);
            setMessageCreation(refVal_setMessageCreation);
        }
    }
    return ok;
}

void RunStepDetailsMessageCreationObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_Message_creationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message_creation")), m_Message_creation));
    }
}

bool RunStepDetailsMessageCreationObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("message_creation"))))
    {
        std::shared_ptr<RunStepDetailsMessageCreationObject_message_creation> refVal_setMessageCreation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message_creation"))), refVal_setMessageCreation );
        setMessageCreation(refVal_setMessageCreation);
    }
    return ok;
}

utility::string_t RunStepDetailsMessageCreationObject::getType() const
{
    return m_Type;
}

void RunStepDetailsMessageCreationObject::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool RunStepDetailsMessageCreationObject::typeIsSet() const
{
    return m_TypeIsSet;
}

void RunStepDetailsMessageCreationObject::unsetType()
{
    m_TypeIsSet = false;
}
std::shared_ptr<RunStepDetailsMessageCreationObject_message_creation> RunStepDetailsMessageCreationObject::getMessageCreation() const
{
    return m_Message_creation;
}

void RunStepDetailsMessageCreationObject::setMessageCreation(const std::shared_ptr<RunStepDetailsMessageCreationObject_message_creation>& value)
{
    m_Message_creation = value;
    m_Message_creationIsSet = true;
}

bool RunStepDetailsMessageCreationObject::messageCreationIsSet() const
{
    return m_Message_creationIsSet;
}

void RunStepDetailsMessageCreationObject::unsetMessage_creation()
{
    m_Message_creationIsSet = false;
}
}
}
}
}


