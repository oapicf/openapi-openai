/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/RunToolCallObject.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



RunToolCallObject::RunToolCallObject()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_FunctionIsSet = false;
}

RunToolCallObject::~RunToolCallObject()
{
}

void RunToolCallObject::validate()
{
    // TODO: implement validation
}

web::json::value RunToolCallObject::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_FunctionIsSet)
    {
        val[utility::conversions::to_string_t(U("function"))] = ModelBase::toJson(m_Function);
    }

    return val;
}

bool RunToolCallObject::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("function"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("function")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RunToolCallObject_function> refVal_setFunction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFunction);
            setFunction(refVal_setFunction);
        }
    }
    return ok;
}

void RunToolCallObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_FunctionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("function")), m_Function));
    }
}

bool RunToolCallObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("function"))))
    {
        std::shared_ptr<RunToolCallObject_function> refVal_setFunction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("function"))), refVal_setFunction );
        setFunction(refVal_setFunction);
    }
    return ok;
}

utility::string_t RunToolCallObject::getId() const
{
    return m_Id;
}

void RunToolCallObject::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool RunToolCallObject::idIsSet() const
{
    return m_IdIsSet;
}

void RunToolCallObject::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t RunToolCallObject::getType() const
{
    return m_Type;
}

void RunToolCallObject::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool RunToolCallObject::typeIsSet() const
{
    return m_TypeIsSet;
}

void RunToolCallObject::unsetType()
{
    m_TypeIsSet = false;
}
std::shared_ptr<RunToolCallObject_function> RunToolCallObject::getFunction() const
{
    return m_Function;
}

void RunToolCallObject::setFunction(const std::shared_ptr<RunToolCallObject_function>& value)
{
    m_Function = value;
    m_FunctionIsSet = true;
}

bool RunToolCallObject::functionIsSet() const
{
    return m_FunctionIsSet;
}

void RunToolCallObject::unsetFunction()
{
    m_FunctionIsSet = false;
}
}
}
}
}


