/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SubmitToolOutputsRunRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SubmitToolOutputsRunRequest::SubmitToolOutputsRunRequest()
{
    m_Tool_outputsIsSet = false;
    m_Stream = false;
    m_StreamIsSet = false;
}

SubmitToolOutputsRunRequest::~SubmitToolOutputsRunRequest()
{
}

void SubmitToolOutputsRunRequest::validate()
{
    // TODO: implement validation
}

web::json::value SubmitToolOutputsRunRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Tool_outputsIsSet)
    {
        val[utility::conversions::to_string_t(U("tool_outputs"))] = ModelBase::toJson(m_Tool_outputs);
    }
    if(m_StreamIsSet)
    {
        val[utility::conversions::to_string_t(U("stream"))] = ModelBase::toJson(m_Stream);
    }

    return val;
}

bool SubmitToolOutputsRunRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("tool_outputs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tool_outputs")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SubmitToolOutputsRunRequest_tool_outputs_inner>> refVal_setToolOutputs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToolOutputs);
            setToolOutputs(refVal_setToolOutputs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stream"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stream")));
        if(!fieldValue.is_null())
        {
            bool refVal_setStream;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStream);
            setStream(refVal_setStream);
        }
    }
    return ok;
}

void SubmitToolOutputsRunRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Tool_outputsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tool_outputs")), m_Tool_outputs));
    }
    if(m_StreamIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stream")), m_Stream));
    }
}

bool SubmitToolOutputsRunRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("tool_outputs"))))
    {
        std::vector<std::shared_ptr<SubmitToolOutputsRunRequest_tool_outputs_inner>> refVal_setToolOutputs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tool_outputs"))), refVal_setToolOutputs );
        setToolOutputs(refVal_setToolOutputs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stream"))))
    {
        bool refVal_setStream;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stream"))), refVal_setStream );
        setStream(refVal_setStream);
    }
    return ok;
}

std::vector<std::shared_ptr<SubmitToolOutputsRunRequest_tool_outputs_inner>>& SubmitToolOutputsRunRequest::getToolOutputs()
{
    return m_Tool_outputs;
}

void SubmitToolOutputsRunRequest::setToolOutputs(const std::vector<std::shared_ptr<SubmitToolOutputsRunRequest_tool_outputs_inner>>& value)
{
    m_Tool_outputs = value;
    m_Tool_outputsIsSet = true;
}

bool SubmitToolOutputsRunRequest::toolOutputsIsSet() const
{
    return m_Tool_outputsIsSet;
}

void SubmitToolOutputsRunRequest::unsetTool_outputs()
{
    m_Tool_outputsIsSet = false;
}
bool SubmitToolOutputsRunRequest::isStream() const
{
    return m_Stream;
}

void SubmitToolOutputsRunRequest::setStream(bool value)
{
    m_Stream = value;
    m_StreamIsSet = true;
}

bool SubmitToolOutputsRunRequest::streamIsSet() const
{
    return m_StreamIsSet;
}

void SubmitToolOutputsRunRequest::unsetStream()
{
    m_StreamIsSet = false;
}
}
}
}
}


