/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TranscriptionSegment.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TranscriptionSegment::TranscriptionSegment()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Seek = 0;
    m_SeekIsSet = false;
    m_Start = 0.0f;
    m_StartIsSet = false;
    m_End = 0.0f;
    m_EndIsSet = false;
    m_Text = utility::conversions::to_string_t("");
    m_TextIsSet = false;
    m_TokensIsSet = false;
    m_Temperature = 0.0f;
    m_TemperatureIsSet = false;
    m_Avg_logprob = 0.0f;
    m_Avg_logprobIsSet = false;
    m_Compression_ratio = 0.0f;
    m_Compression_ratioIsSet = false;
    m_No_speech_prob = 0.0f;
    m_No_speech_probIsSet = false;
}

TranscriptionSegment::~TranscriptionSegment()
{
}

void TranscriptionSegment::validate()
{
    // TODO: implement validation
}

web::json::value TranscriptionSegment::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_SeekIsSet)
    {
        val[utility::conversions::to_string_t(U("seek"))] = ModelBase::toJson(m_Seek);
    }
    if(m_StartIsSet)
    {
        val[utility::conversions::to_string_t(U("start"))] = ModelBase::toJson(m_Start);
    }
    if(m_EndIsSet)
    {
        val[utility::conversions::to_string_t(U("end"))] = ModelBase::toJson(m_End);
    }
    if(m_TextIsSet)
    {
        val[utility::conversions::to_string_t(U("text"))] = ModelBase::toJson(m_Text);
    }
    if(m_TokensIsSet)
    {
        val[utility::conversions::to_string_t(U("tokens"))] = ModelBase::toJson(m_Tokens);
    }
    if(m_TemperatureIsSet)
    {
        val[utility::conversions::to_string_t(U("temperature"))] = ModelBase::toJson(m_Temperature);
    }
    if(m_Avg_logprobIsSet)
    {
        val[utility::conversions::to_string_t(U("avg_logprob"))] = ModelBase::toJson(m_Avg_logprob);
    }
    if(m_Compression_ratioIsSet)
    {
        val[utility::conversions::to_string_t(U("compression_ratio"))] = ModelBase::toJson(m_Compression_ratio);
    }
    if(m_No_speech_probIsSet)
    {
        val[utility::conversions::to_string_t(U("no_speech_prob"))] = ModelBase::toJson(m_No_speech_prob);
    }

    return val;
}

bool TranscriptionSegment::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("seek"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("seek")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSeek;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSeek);
            setSeek(refVal_setSeek);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("start")));
        if(!fieldValue.is_null())
        {
            float refVal_setStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStart);
            setStart(refVal_setStart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("end")));
        if(!fieldValue.is_null())
        {
            float refVal_setEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnd);
            setEnd(refVal_setEnd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setText);
            setText(refVal_setText);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tokens")));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_setTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokens);
            setTokens(refVal_setTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("temperature"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("temperature")));
        if(!fieldValue.is_null())
        {
            float refVal_setTemperature;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemperature);
            setTemperature(refVal_setTemperature);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("avg_logprob"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("avg_logprob")));
        if(!fieldValue.is_null())
        {
            float refVal_setAvgLogprob;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAvgLogprob);
            setAvgLogprob(refVal_setAvgLogprob);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("compression_ratio"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("compression_ratio")));
        if(!fieldValue.is_null())
        {
            float refVal_setCompressionRatio;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCompressionRatio);
            setCompressionRatio(refVal_setCompressionRatio);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("no_speech_prob"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("no_speech_prob")));
        if(!fieldValue.is_null())
        {
            float refVal_setNoSpeechProb;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNoSpeechProb);
            setNoSpeechProb(refVal_setNoSpeechProb);
        }
    }
    return ok;
}

void TranscriptionSegment::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_SeekIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("seek")), m_Seek));
    }
    if(m_StartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("start")), m_Start));
    }
    if(m_EndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("end")), m_End));
    }
    if(m_TextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("text")), m_Text));
    }
    if(m_TokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tokens")), m_Tokens));
    }
    if(m_TemperatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("temperature")), m_Temperature));
    }
    if(m_Avg_logprobIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("avg_logprob")), m_Avg_logprob));
    }
    if(m_Compression_ratioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("compression_ratio")), m_Compression_ratio));
    }
    if(m_No_speech_probIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("no_speech_prob")), m_No_speech_prob));
    }
}

bool TranscriptionSegment::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int32_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("seek"))))
    {
        int32_t refVal_setSeek;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("seek"))), refVal_setSeek );
        setSeek(refVal_setSeek);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("start"))))
    {
        float refVal_setStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("start"))), refVal_setStart );
        setStart(refVal_setStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("end"))))
    {
        float refVal_setEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("end"))), refVal_setEnd );
        setEnd(refVal_setEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("text"))))
    {
        utility::string_t refVal_setText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("text"))), refVal_setText );
        setText(refVal_setText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tokens"))))
    {
        std::vector<int32_t> refVal_setTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tokens"))), refVal_setTokens );
        setTokens(refVal_setTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("temperature"))))
    {
        float refVal_setTemperature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("temperature"))), refVal_setTemperature );
        setTemperature(refVal_setTemperature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("avg_logprob"))))
    {
        float refVal_setAvgLogprob;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("avg_logprob"))), refVal_setAvgLogprob );
        setAvgLogprob(refVal_setAvgLogprob);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("compression_ratio"))))
    {
        float refVal_setCompressionRatio;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("compression_ratio"))), refVal_setCompressionRatio );
        setCompressionRatio(refVal_setCompressionRatio);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("no_speech_prob"))))
    {
        float refVal_setNoSpeechProb;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("no_speech_prob"))), refVal_setNoSpeechProb );
        setNoSpeechProb(refVal_setNoSpeechProb);
    }
    return ok;
}

int32_t TranscriptionSegment::getId() const
{
    return m_Id;
}

void TranscriptionSegment::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool TranscriptionSegment::idIsSet() const
{
    return m_IdIsSet;
}

void TranscriptionSegment::unsetId()
{
    m_IdIsSet = false;
}
int32_t TranscriptionSegment::getSeek() const
{
    return m_Seek;
}

void TranscriptionSegment::setSeek(int32_t value)
{
    m_Seek = value;
    m_SeekIsSet = true;
}

bool TranscriptionSegment::seekIsSet() const
{
    return m_SeekIsSet;
}

void TranscriptionSegment::unsetSeek()
{
    m_SeekIsSet = false;
}
float TranscriptionSegment::getStart() const
{
    return m_Start;
}

void TranscriptionSegment::setStart(float value)
{
    m_Start = value;
    m_StartIsSet = true;
}

bool TranscriptionSegment::startIsSet() const
{
    return m_StartIsSet;
}

void TranscriptionSegment::unsetStart()
{
    m_StartIsSet = false;
}
float TranscriptionSegment::getEnd() const
{
    return m_End;
}

void TranscriptionSegment::setEnd(float value)
{
    m_End = value;
    m_EndIsSet = true;
}

bool TranscriptionSegment::endIsSet() const
{
    return m_EndIsSet;
}

void TranscriptionSegment::unsetEnd()
{
    m_EndIsSet = false;
}
utility::string_t TranscriptionSegment::getText() const
{
    return m_Text;
}

void TranscriptionSegment::setText(const utility::string_t& value)
{
    m_Text = value;
    m_TextIsSet = true;
}

bool TranscriptionSegment::textIsSet() const
{
    return m_TextIsSet;
}

void TranscriptionSegment::unsetText()
{
    m_TextIsSet = false;
}
std::vector<int32_t>& TranscriptionSegment::getTokens()
{
    return m_Tokens;
}

void TranscriptionSegment::setTokens(std::vector<int32_t> value)
{
    m_Tokens = value;
    m_TokensIsSet = true;
}

bool TranscriptionSegment::tokensIsSet() const
{
    return m_TokensIsSet;
}

void TranscriptionSegment::unsetTokens()
{
    m_TokensIsSet = false;
}
float TranscriptionSegment::getTemperature() const
{
    return m_Temperature;
}

void TranscriptionSegment::setTemperature(float value)
{
    m_Temperature = value;
    m_TemperatureIsSet = true;
}

bool TranscriptionSegment::temperatureIsSet() const
{
    return m_TemperatureIsSet;
}

void TranscriptionSegment::unsetTemperature()
{
    m_TemperatureIsSet = false;
}
float TranscriptionSegment::getAvgLogprob() const
{
    return m_Avg_logprob;
}

void TranscriptionSegment::setAvgLogprob(float value)
{
    m_Avg_logprob = value;
    m_Avg_logprobIsSet = true;
}

bool TranscriptionSegment::avgLogprobIsSet() const
{
    return m_Avg_logprobIsSet;
}

void TranscriptionSegment::unsetAvg_logprob()
{
    m_Avg_logprobIsSet = false;
}
float TranscriptionSegment::getCompressionRatio() const
{
    return m_Compression_ratio;
}

void TranscriptionSegment::setCompressionRatio(float value)
{
    m_Compression_ratio = value;
    m_Compression_ratioIsSet = true;
}

bool TranscriptionSegment::compressionRatioIsSet() const
{
    return m_Compression_ratioIsSet;
}

void TranscriptionSegment::unsetCompression_ratio()
{
    m_Compression_ratioIsSet = false;
}
float TranscriptionSegment::getNoSpeechProb() const
{
    return m_No_speech_prob;
}

void TranscriptionSegment::setNoSpeechProb(float value)
{
    m_No_speech_prob = value;
    m_No_speech_probIsSet = true;
}

bool TranscriptionSegment::noSpeechProbIsSet() const
{
    return m_No_speech_probIsSet;
}

void TranscriptionSegment::unsetNo_speech_prob()
{
    m_No_speech_probIsSet = false;
}
}
}
}
}


