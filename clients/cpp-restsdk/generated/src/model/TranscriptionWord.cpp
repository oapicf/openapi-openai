/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TranscriptionWord.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TranscriptionWord::TranscriptionWord()
{
    m_Word = utility::conversions::to_string_t("");
    m_WordIsSet = false;
    m_Start = 0.0f;
    m_StartIsSet = false;
    m_End = 0.0f;
    m_EndIsSet = false;
}

TranscriptionWord::~TranscriptionWord()
{
}

void TranscriptionWord::validate()
{
    // TODO: implement validation
}

web::json::value TranscriptionWord::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_WordIsSet)
    {
        val[utility::conversions::to_string_t(U("word"))] = ModelBase::toJson(m_Word);
    }
    if(m_StartIsSet)
    {
        val[utility::conversions::to_string_t(U("start"))] = ModelBase::toJson(m_Start);
    }
    if(m_EndIsSet)
    {
        val[utility::conversions::to_string_t(U("end"))] = ModelBase::toJson(m_End);
    }

    return val;
}

bool TranscriptionWord::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("word"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("word")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWord;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWord);
            setWord(refVal_setWord);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("start")));
        if(!fieldValue.is_null())
        {
            float refVal_setStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStart);
            setStart(refVal_setStart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("end")));
        if(!fieldValue.is_null())
        {
            float refVal_setEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnd);
            setEnd(refVal_setEnd);
        }
    }
    return ok;
}

void TranscriptionWord::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_WordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("word")), m_Word));
    }
    if(m_StartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("start")), m_Start));
    }
    if(m_EndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("end")), m_End));
    }
}

bool TranscriptionWord::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("word"))))
    {
        utility::string_t refVal_setWord;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("word"))), refVal_setWord );
        setWord(refVal_setWord);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("start"))))
    {
        float refVal_setStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("start"))), refVal_setStart );
        setStart(refVal_setStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("end"))))
    {
        float refVal_setEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("end"))), refVal_setEnd );
        setEnd(refVal_setEnd);
    }
    return ok;
}

utility::string_t TranscriptionWord::getWord() const
{
    return m_Word;
}

void TranscriptionWord::setWord(const utility::string_t& value)
{
    m_Word = value;
    m_WordIsSet = true;
}

bool TranscriptionWord::wordIsSet() const
{
    return m_WordIsSet;
}

void TranscriptionWord::unsetWord()
{
    m_WordIsSet = false;
}
float TranscriptionWord::getStart() const
{
    return m_Start;
}

void TranscriptionWord::setStart(float value)
{
    m_Start = value;
    m_StartIsSet = true;
}

bool TranscriptionWord::startIsSet() const
{
    return m_StartIsSet;
}

void TranscriptionWord::unsetStart()
{
    m_StartIsSet = false;
}
float TranscriptionWord::getEnd() const
{
    return m_End;
}

void TranscriptionWord::setEnd(float value)
{
    m_End = value;
    m_EndIsSet = true;
}

bool TranscriptionWord::endIsSet() const
{
    return m_EndIsSet;
}

void TranscriptionWord::unsetEnd()
{
    m_EndIsSet = false;
}
}
}
}
}


