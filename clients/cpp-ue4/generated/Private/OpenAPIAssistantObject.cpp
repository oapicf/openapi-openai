/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIAssistantObject.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIAssistantObject::ObjectEnum& Value)
{
	switch (Value)
	{
	case OpenAPIAssistantObject::ObjectEnum::Assistant:
		return TEXT("assistant");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIAssistantObject::ObjectEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIAssistantObject::EnumToString(const OpenAPIAssistantObject::ObjectEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIAssistantObject::ObjectEnum& Value)
{
	static TMap<FString, OpenAPIAssistantObject::ObjectEnum> StringToEnum = { 
		{ TEXT("assistant"), OpenAPIAssistantObject::ObjectEnum::Assistant }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIAssistantObject::EnumFromString(const FString& EnumAsString, OpenAPIAssistantObject::ObjectEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIAssistantObject::ObjectEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIAssistantObject::ObjectEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIAssistantObject::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	Writer->WriteIdentifierPrefix(TEXT("object")); WriteJsonValue(Writer, Object);
	Writer->WriteIdentifierPrefix(TEXT("created_at")); WriteJsonValue(Writer, CreatedAt);
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("model")); WriteJsonValue(Writer, Model);
	if (Instructions.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("instructions")); WriteJsonValue(Writer, Instructions.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("tools")); WriteJsonValue(Writer, Tools);
	Writer->WriteIdentifierPrefix(TEXT("file_ids")); WriteJsonValue(Writer, FileIds);
	if (Metadata.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("metadata")); WriteJsonValue(Writer, Metadata.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIAssistantObject::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("object"), Object);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("created_at"), CreatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("model"), Model);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("instructions"), Instructions);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tools"), Tools);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("file_ids"), FileIds);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("metadata"), Metadata);

	return ParseSuccess;
}

}
