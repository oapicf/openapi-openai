/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICreateAssistantRequest.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPICreateAssistantRequest::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("model")); WriteJsonValue(Writer, Model);
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	if (Instructions.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("instructions")); WriteJsonValue(Writer, Instructions.GetValue());
	}
	if (Tools.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("tools")); WriteJsonValue(Writer, Tools.GetValue());
	}
	if (FileIds.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("file_ids")); WriteJsonValue(Writer, FileIds.GetValue());
	}
	if (Metadata.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("metadata")); WriteJsonValue(Writer, Metadata.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPICreateAssistantRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("model"), Model);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("instructions"), Instructions);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tools"), Tools);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("file_ids"), FileIds);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("metadata"), Metadata);

	return ParseSuccess;
}

}
