/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICreateChatCompletionStreamResponseChoicesInner.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPICreateChatCompletionStreamResponseChoicesInner::FinishReasonEnum& Value)
{
	switch (Value)
	{
	case OpenAPICreateChatCompletionStreamResponseChoicesInner::FinishReasonEnum::Stop:
		return TEXT("stop");
	case OpenAPICreateChatCompletionStreamResponseChoicesInner::FinishReasonEnum::Length:
		return TEXT("length");
	case OpenAPICreateChatCompletionStreamResponseChoicesInner::FinishReasonEnum::FunctionCall:
		return TEXT("function_call");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICreateChatCompletionStreamResponseChoicesInner::FinishReasonEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICreateChatCompletionStreamResponseChoicesInner::EnumToString(const OpenAPICreateChatCompletionStreamResponseChoicesInner::FinishReasonEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICreateChatCompletionStreamResponseChoicesInner::FinishReasonEnum& Value)
{
	static TMap<FString, OpenAPICreateChatCompletionStreamResponseChoicesInner::FinishReasonEnum> StringToEnum = { 
		{ TEXT("stop"), OpenAPICreateChatCompletionStreamResponseChoicesInner::FinishReasonEnum::Stop },
		{ TEXT("length"), OpenAPICreateChatCompletionStreamResponseChoicesInner::FinishReasonEnum::Length },
		{ TEXT("function_call"), OpenAPICreateChatCompletionStreamResponseChoicesInner::FinishReasonEnum::FunctionCall }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICreateChatCompletionStreamResponseChoicesInner::EnumFromString(const FString& EnumAsString, OpenAPICreateChatCompletionStreamResponseChoicesInner::FinishReasonEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICreateChatCompletionStreamResponseChoicesInner::FinishReasonEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICreateChatCompletionStreamResponseChoicesInner::FinishReasonEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPICreateChatCompletionStreamResponseChoicesInner::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Index.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("index")); WriteJsonValue(Writer, Index.GetValue());
	}
	if (Delta.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("delta")); WriteJsonValue(Writer, Delta.GetValue());
	}
	if (FinishReason.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("finish_reason")); WriteJsonValue(Writer, FinishReason.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPICreateChatCompletionStreamResponseChoicesInner::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("index"), Index);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("delta"), Delta);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("finish_reason"), FinishReason);

	return ParseSuccess;
}

}
