/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICreateFineTuneRequest.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPICreateFineTuneRequest::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("training_file")); WriteJsonValue(Writer, TrainingFile);
	if (ValidationFile.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("validation_file")); WriteJsonValue(Writer, ValidationFile.GetValue());
	}
	if (Model.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("model")); WriteJsonValue(Writer, Model.GetValue());
	}
	if (NEpochs.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("n_epochs")); WriteJsonValue(Writer, NEpochs.GetValue());
	}
	if (BatchSize.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("batch_size")); WriteJsonValue(Writer, BatchSize.GetValue());
	}
	if (LearningRateMultiplier.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("learning_rate_multiplier")); WriteJsonValue(Writer, LearningRateMultiplier.GetValue());
	}
	if (PromptLossWeight.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("prompt_loss_weight")); WriteJsonValue(Writer, PromptLossWeight.GetValue());
	}
	if (ComputeClassificationMetrics.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("compute_classification_metrics")); WriteJsonValue(Writer, ComputeClassificationMetrics.GetValue());
	}
	if (ClassificationNClasses.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("classification_n_classes")); WriteJsonValue(Writer, ClassificationNClasses.GetValue());
	}
	if (ClassificationPositiveClass.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("classification_positive_class")); WriteJsonValue(Writer, ClassificationPositiveClass.GetValue());
	}
	if (ClassificationBetas.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("classification_betas")); WriteJsonValue(Writer, ClassificationBetas.GetValue());
	}
	if (Suffix.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("suffix")); WriteJsonValue(Writer, Suffix.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPICreateFineTuneRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("training_file"), TrainingFile);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("validation_file"), ValidationFile);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("model"), Model);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("n_epochs"), NEpochs);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("batch_size"), BatchSize);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("learning_rate_multiplier"), LearningRateMultiplier);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("prompt_loss_weight"), PromptLossWeight);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("compute_classification_metrics"), ComputeClassificationMetrics);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("classification_n_classes"), ClassificationNClasses);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("classification_positive_class"), ClassificationPositiveClass);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("classification_betas"), ClassificationBetas);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("suffix"), Suffix);

	return ParseSuccess;
}

}
