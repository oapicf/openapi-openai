/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICreateImageRequest.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPICreateImageRequest::SizeEnum& Value)
{
	switch (Value)
	{
	case OpenAPICreateImageRequest::SizeEnum::_256x256:
		return TEXT("256x256");
	case OpenAPICreateImageRequest::SizeEnum::_512x512:
		return TEXT("512x512");
	case OpenAPICreateImageRequest::SizeEnum::_1024x1024:
		return TEXT("1024x1024");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICreateImageRequest::SizeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICreateImageRequest::EnumToString(const OpenAPICreateImageRequest::SizeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICreateImageRequest::SizeEnum& Value)
{
	static TMap<FString, OpenAPICreateImageRequest::SizeEnum> StringToEnum = { 
		{ TEXT("256x256"), OpenAPICreateImageRequest::SizeEnum::_256x256 },
		{ TEXT("512x512"), OpenAPICreateImageRequest::SizeEnum::_512x512 },
		{ TEXT("1024x1024"), OpenAPICreateImageRequest::SizeEnum::_1024x1024 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICreateImageRequest::EnumFromString(const FString& EnumAsString, OpenAPICreateImageRequest::SizeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICreateImageRequest::SizeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICreateImageRequest::SizeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPICreateImageRequest::ResponseFormatEnum& Value)
{
	switch (Value)
	{
	case OpenAPICreateImageRequest::ResponseFormatEnum::Url:
		return TEXT("url");
	case OpenAPICreateImageRequest::ResponseFormatEnum::B64Json:
		return TEXT("b64_json");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICreateImageRequest::ResponseFormatEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICreateImageRequest::EnumToString(const OpenAPICreateImageRequest::ResponseFormatEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICreateImageRequest::ResponseFormatEnum& Value)
{
	static TMap<FString, OpenAPICreateImageRequest::ResponseFormatEnum> StringToEnum = { 
		{ TEXT("url"), OpenAPICreateImageRequest::ResponseFormatEnum::Url },
		{ TEXT("b64_json"), OpenAPICreateImageRequest::ResponseFormatEnum::B64Json }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICreateImageRequest::EnumFromString(const FString& EnumAsString, OpenAPICreateImageRequest::ResponseFormatEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICreateImageRequest::ResponseFormatEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICreateImageRequest::ResponseFormatEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPICreateImageRequest::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("prompt")); WriteJsonValue(Writer, Prompt);
	if (N.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("n")); WriteJsonValue(Writer, N.GetValue());
	}
	if (Size.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("size")); WriteJsonValue(Writer, Size.GetValue());
	}
	if (ResponseFormat.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("response_format")); WriteJsonValue(Writer, ResponseFormat.GetValue());
	}
	if (User.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("user")); WriteJsonValue(Writer, User.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPICreateImageRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("prompt"), Prompt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("n"), N);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("size"), Size);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("response_format"), ResponseFormat);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("user"), User);

	return ParseSuccess;
}

}
