/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICreateSpeechRequest.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPICreateSpeechRequest::VoiceEnum& Value)
{
	switch (Value)
	{
	case OpenAPICreateSpeechRequest::VoiceEnum::Alloy:
		return TEXT("alloy");
	case OpenAPICreateSpeechRequest::VoiceEnum::Echo:
		return TEXT("echo");
	case OpenAPICreateSpeechRequest::VoiceEnum::Fable:
		return TEXT("fable");
	case OpenAPICreateSpeechRequest::VoiceEnum::Onyx:
		return TEXT("onyx");
	case OpenAPICreateSpeechRequest::VoiceEnum::Nova:
		return TEXT("nova");
	case OpenAPICreateSpeechRequest::VoiceEnum::Shimmer:
		return TEXT("shimmer");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICreateSpeechRequest::VoiceEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICreateSpeechRequest::EnumToString(const OpenAPICreateSpeechRequest::VoiceEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICreateSpeechRequest::VoiceEnum& Value)
{
	static TMap<FString, OpenAPICreateSpeechRequest::VoiceEnum> StringToEnum = { 
		{ TEXT("alloy"), OpenAPICreateSpeechRequest::VoiceEnum::Alloy },
		{ TEXT("echo"), OpenAPICreateSpeechRequest::VoiceEnum::Echo },
		{ TEXT("fable"), OpenAPICreateSpeechRequest::VoiceEnum::Fable },
		{ TEXT("onyx"), OpenAPICreateSpeechRequest::VoiceEnum::Onyx },
		{ TEXT("nova"), OpenAPICreateSpeechRequest::VoiceEnum::Nova },
		{ TEXT("shimmer"), OpenAPICreateSpeechRequest::VoiceEnum::Shimmer }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICreateSpeechRequest::EnumFromString(const FString& EnumAsString, OpenAPICreateSpeechRequest::VoiceEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICreateSpeechRequest::VoiceEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICreateSpeechRequest::VoiceEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPICreateSpeechRequest::ResponseFormatEnum& Value)
{
	switch (Value)
	{
	case OpenAPICreateSpeechRequest::ResponseFormatEnum::Mp3:
		return TEXT("mp3");
	case OpenAPICreateSpeechRequest::ResponseFormatEnum::Opus:
		return TEXT("opus");
	case OpenAPICreateSpeechRequest::ResponseFormatEnum::Aac:
		return TEXT("aac");
	case OpenAPICreateSpeechRequest::ResponseFormatEnum::Flac:
		return TEXT("flac");
	case OpenAPICreateSpeechRequest::ResponseFormatEnum::Wav:
		return TEXT("wav");
	case OpenAPICreateSpeechRequest::ResponseFormatEnum::Pcm:
		return TEXT("pcm");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICreateSpeechRequest::ResponseFormatEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICreateSpeechRequest::EnumToString(const OpenAPICreateSpeechRequest::ResponseFormatEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICreateSpeechRequest::ResponseFormatEnum& Value)
{
	static TMap<FString, OpenAPICreateSpeechRequest::ResponseFormatEnum> StringToEnum = { 
		{ TEXT("mp3"), OpenAPICreateSpeechRequest::ResponseFormatEnum::Mp3 },
		{ TEXT("opus"), OpenAPICreateSpeechRequest::ResponseFormatEnum::Opus },
		{ TEXT("aac"), OpenAPICreateSpeechRequest::ResponseFormatEnum::Aac },
		{ TEXT("flac"), OpenAPICreateSpeechRequest::ResponseFormatEnum::Flac },
		{ TEXT("wav"), OpenAPICreateSpeechRequest::ResponseFormatEnum::Wav },
		{ TEXT("pcm"), OpenAPICreateSpeechRequest::ResponseFormatEnum::Pcm }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICreateSpeechRequest::EnumFromString(const FString& EnumAsString, OpenAPICreateSpeechRequest::ResponseFormatEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICreateSpeechRequest::ResponseFormatEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICreateSpeechRequest::ResponseFormatEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPICreateSpeechRequest::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("model")); WriteJsonValue(Writer, Model);
	Writer->WriteIdentifierPrefix(TEXT("input")); WriteJsonValue(Writer, Input);
	Writer->WriteIdentifierPrefix(TEXT("voice")); WriteJsonValue(Writer, Voice);
	if (ResponseFormat.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("response_format")); WriteJsonValue(Writer, ResponseFormat.GetValue());
	}
	if (Speed.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("speed")); WriteJsonValue(Writer, Speed.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPICreateSpeechRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("model"), Model);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("input"), Input);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("voice"), Voice);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("response_format"), ResponseFormat);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("speed"), Speed);

	return ParseSuccess;
}

}
