/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICreateThreadAndRunRequest.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPICreateThreadAndRunRequest::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("assistant_id")); WriteJsonValue(Writer, AssistantId);
	if (Thread.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("thread")); WriteJsonValue(Writer, Thread.GetValue());
	}
	if (Model.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("model")); WriteJsonValue(Writer, Model.GetValue());
	}
	if (Instructions.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("instructions")); WriteJsonValue(Writer, Instructions.GetValue());
	}
	if (Tools.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("tools")); WriteJsonValue(Writer, Tools.GetValue());
	}
	if (Metadata.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("metadata")); WriteJsonValue(Writer, Metadata.GetValue());
	}
	if (Temperature.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("temperature")); WriteJsonValue(Writer, Temperature.GetValue());
	}
	if (Stream.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("stream")); WriteJsonValue(Writer, Stream.GetValue());
	}
	if (MaxPromptTokens.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("max_prompt_tokens")); WriteJsonValue(Writer, MaxPromptTokens.GetValue());
	}
	if (MaxCompletionTokens.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("max_completion_tokens")); WriteJsonValue(Writer, MaxCompletionTokens.GetValue());
	}
	if (TruncationStrategy.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("truncation_strategy")); WriteJsonValue(Writer, TruncationStrategy.GetValue());
	}
	if (ToolChoice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("tool_choice")); WriteJsonValue(Writer, ToolChoice.GetValue());
	}
	if (ResponseFormat.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("response_format")); WriteJsonValue(Writer, ResponseFormat.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPICreateThreadAndRunRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("assistant_id"), AssistantId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("thread"), Thread);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("model"), Model);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("instructions"), Instructions);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tools"), Tools);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("metadata"), Metadata);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("temperature"), Temperature);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("stream"), Stream);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("max_prompt_tokens"), MaxPromptTokens);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("max_completion_tokens"), MaxCompletionTokens);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("truncation_strategy"), TruncationStrategy);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tool_choice"), ToolChoice);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("response_format"), ResponseFormat);

	return ParseSuccess;
}

}
