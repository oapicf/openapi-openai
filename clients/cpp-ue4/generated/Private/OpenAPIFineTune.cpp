/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIFineTune.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIFineTune::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	Writer->WriteIdentifierPrefix(TEXT("object")); WriteJsonValue(Writer, Object);
	Writer->WriteIdentifierPrefix(TEXT("created_at")); WriteJsonValue(Writer, CreatedAt);
	Writer->WriteIdentifierPrefix(TEXT("updated_at")); WriteJsonValue(Writer, UpdatedAt);
	Writer->WriteIdentifierPrefix(TEXT("model")); WriteJsonValue(Writer, Model);
	Writer->WriteIdentifierPrefix(TEXT("fine_tuned_model")); WriteJsonValue(Writer, FineTunedModel);
	Writer->WriteIdentifierPrefix(TEXT("organization_id")); WriteJsonValue(Writer, OrganizationId);
	Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status);
	Writer->WriteIdentifierPrefix(TEXT("hyperparams")); WriteJsonValue(Writer, Hyperparams);
	Writer->WriteIdentifierPrefix(TEXT("training_files")); WriteJsonValue(Writer, TrainingFiles);
	Writer->WriteIdentifierPrefix(TEXT("validation_files")); WriteJsonValue(Writer, ValidationFiles);
	Writer->WriteIdentifierPrefix(TEXT("result_files")); WriteJsonValue(Writer, ResultFiles);
	if (Events.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("events")); WriteJsonValue(Writer, Events.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIFineTune::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("object"), Object);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("created_at"), CreatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("updated_at"), UpdatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("model"), Model);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fine_tuned_model"), FineTunedModel);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("organization_id"), OrganizationId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("hyperparams"), Hyperparams);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("training_files"), TrainingFiles);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("validation_files"), ValidationFiles);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("result_files"), ResultFiles);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("events"), Events);

	return ParseSuccess;
}

}
