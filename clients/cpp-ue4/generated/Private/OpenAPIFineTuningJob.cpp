/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIFineTuningJob.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIFineTuningJob::ObjectEnum& Value)
{
	switch (Value)
	{
	case OpenAPIFineTuningJob::ObjectEnum::FineTuningJob:
		return TEXT("fine_tuning.job");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIFineTuningJob::ObjectEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIFineTuningJob::EnumToString(const OpenAPIFineTuningJob::ObjectEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIFineTuningJob::ObjectEnum& Value)
{
	static TMap<FString, OpenAPIFineTuningJob::ObjectEnum> StringToEnum = { 
		{ TEXT("fine_tuning.job"), OpenAPIFineTuningJob::ObjectEnum::FineTuningJob }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIFineTuningJob::EnumFromString(const FString& EnumAsString, OpenAPIFineTuningJob::ObjectEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIFineTuningJob::ObjectEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIFineTuningJob::ObjectEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIFineTuningJob::StatusEnum& Value)
{
	switch (Value)
	{
	case OpenAPIFineTuningJob::StatusEnum::ValidatingFiles:
		return TEXT("validating_files");
	case OpenAPIFineTuningJob::StatusEnum::Queued:
		return TEXT("queued");
	case OpenAPIFineTuningJob::StatusEnum::Running:
		return TEXT("running");
	case OpenAPIFineTuningJob::StatusEnum::Succeeded:
		return TEXT("succeeded");
	case OpenAPIFineTuningJob::StatusEnum::Failed:
		return TEXT("failed");
	case OpenAPIFineTuningJob::StatusEnum::Cancelled:
		return TEXT("cancelled");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIFineTuningJob::StatusEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIFineTuningJob::EnumToString(const OpenAPIFineTuningJob::StatusEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIFineTuningJob::StatusEnum& Value)
{
	static TMap<FString, OpenAPIFineTuningJob::StatusEnum> StringToEnum = { 
		{ TEXT("validating_files"), OpenAPIFineTuningJob::StatusEnum::ValidatingFiles },
		{ TEXT("queued"), OpenAPIFineTuningJob::StatusEnum::Queued },
		{ TEXT("running"), OpenAPIFineTuningJob::StatusEnum::Running },
		{ TEXT("succeeded"), OpenAPIFineTuningJob::StatusEnum::Succeeded },
		{ TEXT("failed"), OpenAPIFineTuningJob::StatusEnum::Failed },
		{ TEXT("cancelled"), OpenAPIFineTuningJob::StatusEnum::Cancelled }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIFineTuningJob::EnumFromString(const FString& EnumAsString, OpenAPIFineTuningJob::StatusEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIFineTuningJob::StatusEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIFineTuningJob::StatusEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIFineTuningJob::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	Writer->WriteIdentifierPrefix(TEXT("created_at")); WriteJsonValue(Writer, CreatedAt);
	if (Error.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("error")); WriteJsonValue(Writer, Error.GetValue());
	}
	if (FineTunedModel.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fine_tuned_model")); WriteJsonValue(Writer, FineTunedModel.GetValue());
	}
	if (FinishedAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("finished_at")); WriteJsonValue(Writer, FinishedAt.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("hyperparameters")); WriteJsonValue(Writer, Hyperparameters);
	Writer->WriteIdentifierPrefix(TEXT("model")); WriteJsonValue(Writer, Model);
	Writer->WriteIdentifierPrefix(TEXT("object")); WriteJsonValue(Writer, Object);
	Writer->WriteIdentifierPrefix(TEXT("organization_id")); WriteJsonValue(Writer, OrganizationId);
	Writer->WriteIdentifierPrefix(TEXT("result_files")); WriteJsonValue(Writer, ResultFiles);
	Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status);
	if (TrainedTokens.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("trained_tokens")); WriteJsonValue(Writer, TrainedTokens.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("training_file")); WriteJsonValue(Writer, TrainingFile);
	if (ValidationFile.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("validation_file")); WriteJsonValue(Writer, ValidationFile.GetValue());
	}
	if (Integrations.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("integrations")); WriteJsonValue(Writer, Integrations.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("seed")); WriteJsonValue(Writer, Seed);
	Writer->WriteObjectEnd();
}

bool OpenAPIFineTuningJob::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("created_at"), CreatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("error"), Error);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fine_tuned_model"), FineTunedModel);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("finished_at"), FinishedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("hyperparameters"), Hyperparameters);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("model"), Model);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("object"), Object);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("organization_id"), OrganizationId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("result_files"), ResultFiles);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("trained_tokens"), TrainedTokens);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("training_file"), TrainingFile);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("validation_file"), ValidationFile);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("integrations"), Integrations);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("seed"), Seed);

	return ParseSuccess;
}

}
