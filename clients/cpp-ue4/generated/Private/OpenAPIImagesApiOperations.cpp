/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIImagesApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

FString OpenAPIImagesApi::CreateImageRequest::ComputePath() const
{
	FString Path(TEXT("/images/generations"));
	return Path;
}

void OpenAPIImagesApi::CreateImageRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPICreateImageRequest);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICreateImageRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICreateImageRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIImagesApi::CreateImageResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIImagesApi::CreateImageResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIImagesApi::CreateImageEditRequest::SizeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIImagesApi::CreateImageEditRequest::SizeEnum::_256x256:
		return TEXT("256x256");
	case OpenAPIImagesApi::CreateImageEditRequest::SizeEnum::_512x512:
		return TEXT("512x512");
	case OpenAPIImagesApi::CreateImageEditRequest::SizeEnum::_1024x1024:
		return TEXT("1024x1024");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIImagesApi::CreateImageEditRequest::SizeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIImagesApi::CreateImageEditRequest::EnumToString(const OpenAPIImagesApi::CreateImageEditRequest::SizeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIImagesApi::CreateImageEditRequest::SizeEnum& Value)
{
	static TMap<FString, OpenAPIImagesApi::CreateImageEditRequest::SizeEnum> StringToEnum = { 
		{ TEXT("256x256"), OpenAPIImagesApi::CreateImageEditRequest::SizeEnum::_256x256 },
		{ TEXT("512x512"), OpenAPIImagesApi::CreateImageEditRequest::SizeEnum::_512x512 },
		{ TEXT("1024x1024"), OpenAPIImagesApi::CreateImageEditRequest::SizeEnum::_1024x1024 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIImagesApi::CreateImageEditRequest::EnumFromString(const FString& EnumAsString, OpenAPIImagesApi::CreateImageEditRequest::SizeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIImagesApi::CreateImageEditRequest::SizeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIImagesApi::CreateImageEditRequest::SizeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIImagesApi::CreateImageEditRequest::ResponseFormatEnum& Value)
{
	switch (Value)
	{
	case OpenAPIImagesApi::CreateImageEditRequest::ResponseFormatEnum::Url:
		return TEXT("url");
	case OpenAPIImagesApi::CreateImageEditRequest::ResponseFormatEnum::B64Json:
		return TEXT("b64_json");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIImagesApi::CreateImageEditRequest::ResponseFormatEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIImagesApi::CreateImageEditRequest::EnumToString(const OpenAPIImagesApi::CreateImageEditRequest::ResponseFormatEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIImagesApi::CreateImageEditRequest::ResponseFormatEnum& Value)
{
	static TMap<FString, OpenAPIImagesApi::CreateImageEditRequest::ResponseFormatEnum> StringToEnum = { 
		{ TEXT("url"), OpenAPIImagesApi::CreateImageEditRequest::ResponseFormatEnum::Url },
		{ TEXT("b64_json"), OpenAPIImagesApi::CreateImageEditRequest::ResponseFormatEnum::B64Json }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIImagesApi::CreateImageEditRequest::EnumFromString(const FString& EnumAsString, OpenAPIImagesApi::CreateImageEditRequest::ResponseFormatEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIImagesApi::CreateImageEditRequest::ResponseFormatEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIImagesApi::CreateImageEditRequest::ResponseFormatEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIImagesApi::CreateImageEditRequest::ComputePath() const
{
	FString Path(TEXT("/images/edits"));
	return Path;
}

void OpenAPIImagesApi::CreateImageEditRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("multipart/form-data") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Form parameters added to try to generate a json body when no body parameters are specified.
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);
		Writer->WriteObjectStart();
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (image) was ignored, Files are not supported in json body"));
		Writer->WriteIdentifierPrefix(TEXT("prompt"));
		WriteJsonValue(Writer, Prompt);
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (mask) was ignored, Files are not supported in json body"));
		if (Model.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("model"));
			WriteJsonValue(Writer, Model.GetValue());
		}
		if (N.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("n"));
			WriteJsonValue(Writer, N.GetValue());
		}
		if (Size.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("size"));
			WriteJsonValue(Writer, Size.GetValue());
		}
		if (ResponseFormat.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("response_format"));
			WriteJsonValue(Writer, ResponseFormat.GetValue());
		}
		if (User.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("user"));
			WriteJsonValue(Writer, User.GetValue());
		}
		Writer->WriteObjectEnd();
		Writer->Close();
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		HttpMultipartFormData FormData;
		FormData.AddFilePart(TEXT("image"), Image);
		FormData.AddStringPart(TEXT("prompt"), *ToUrlString(Prompt));
		if(Mask.IsSet())
		{
			FormData.AddFilePart(TEXT("mask"), Mask.GetValue());
		}
		if(Model.IsSet())
		{
			FormData.AddStringPart(TEXT("model"), *ToUrlString(Model.GetValue()));
		}
		if(N.IsSet())
		{
			FormData.AddStringPart(TEXT("n"), *ToUrlString(N.GetValue()));
		}
		if(Size.IsSet())
		{
			FormData.AddStringPart(TEXT("size"), *ToUrlString(Size.GetValue()));
		}
		if(ResponseFormat.IsSet())
		{
			FormData.AddStringPart(TEXT("response_format"), *ToUrlString(ResponseFormat.GetValue()));
		}
		if(User.IsSet())
		{
			FormData.AddStringPart(TEXT("user"), *ToUrlString(User.GetValue()));
		}

		FormData.SetupHttpRequest(HttpRequest);
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		TArray<FString> FormParams;
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (image) was ignored, Files are not supported in urlencoded requests"));
		FormParams.Add(FString(TEXT("prompt=")) + ToUrlString(Prompt));
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (mask) was ignored, Files are not supported in urlencoded requests"));
		if(Model.IsSet())
		{
			FormParams.Add(FString(TEXT("model=")) + ToUrlString(Model.GetValue()));
		}
		if(N.IsSet())
		{
			FormParams.Add(FString(TEXT("n=")) + ToUrlString(N.GetValue()));
		}
		if(Size.IsSet())
		{
			FormParams.Add(FString(TEXT("size=")) + ToUrlString(Size.GetValue()));
		}
		if(ResponseFormat.IsSet())
		{
			FormParams.Add(FString(TEXT("response_format=")) + ToUrlString(ResponseFormat.GetValue()));
		}
		if(User.IsSet())
		{
			FormParams.Add(FString(TEXT("user=")) + ToUrlString(User.GetValue()));
		}

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/x-www-form-urlencoded; charset=utf-8"));
		HttpRequest->SetContentAsString(FString::Join(FormParams, TEXT("&")));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIImagesApi::CreateImageEditResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIImagesApi::CreateImageEditResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIImagesApi::CreateImageVariationRequest::ResponseFormatEnum& Value)
{
	switch (Value)
	{
	case OpenAPIImagesApi::CreateImageVariationRequest::ResponseFormatEnum::Url:
		return TEXT("url");
	case OpenAPIImagesApi::CreateImageVariationRequest::ResponseFormatEnum::B64Json:
		return TEXT("b64_json");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIImagesApi::CreateImageVariationRequest::ResponseFormatEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIImagesApi::CreateImageVariationRequest::EnumToString(const OpenAPIImagesApi::CreateImageVariationRequest::ResponseFormatEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIImagesApi::CreateImageVariationRequest::ResponseFormatEnum& Value)
{
	static TMap<FString, OpenAPIImagesApi::CreateImageVariationRequest::ResponseFormatEnum> StringToEnum = { 
		{ TEXT("url"), OpenAPIImagesApi::CreateImageVariationRequest::ResponseFormatEnum::Url },
		{ TEXT("b64_json"), OpenAPIImagesApi::CreateImageVariationRequest::ResponseFormatEnum::B64Json }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIImagesApi::CreateImageVariationRequest::EnumFromString(const FString& EnumAsString, OpenAPIImagesApi::CreateImageVariationRequest::ResponseFormatEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIImagesApi::CreateImageVariationRequest::ResponseFormatEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIImagesApi::CreateImageVariationRequest::ResponseFormatEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIImagesApi::CreateImageVariationRequest::SizeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIImagesApi::CreateImageVariationRequest::SizeEnum::_256x256:
		return TEXT("256x256");
	case OpenAPIImagesApi::CreateImageVariationRequest::SizeEnum::_512x512:
		return TEXT("512x512");
	case OpenAPIImagesApi::CreateImageVariationRequest::SizeEnum::_1024x1024:
		return TEXT("1024x1024");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIImagesApi::CreateImageVariationRequest::SizeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIImagesApi::CreateImageVariationRequest::EnumToString(const OpenAPIImagesApi::CreateImageVariationRequest::SizeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIImagesApi::CreateImageVariationRequest::SizeEnum& Value)
{
	static TMap<FString, OpenAPIImagesApi::CreateImageVariationRequest::SizeEnum> StringToEnum = { 
		{ TEXT("256x256"), OpenAPIImagesApi::CreateImageVariationRequest::SizeEnum::_256x256 },
		{ TEXT("512x512"), OpenAPIImagesApi::CreateImageVariationRequest::SizeEnum::_512x512 },
		{ TEXT("1024x1024"), OpenAPIImagesApi::CreateImageVariationRequest::SizeEnum::_1024x1024 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIImagesApi::CreateImageVariationRequest::EnumFromString(const FString& EnumAsString, OpenAPIImagesApi::CreateImageVariationRequest::SizeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIImagesApi::CreateImageVariationRequest::SizeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIImagesApi::CreateImageVariationRequest::SizeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIImagesApi::CreateImageVariationRequest::ComputePath() const
{
	FString Path(TEXT("/images/variations"));
	return Path;
}

void OpenAPIImagesApi::CreateImageVariationRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("multipart/form-data") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Form parameters added to try to generate a json body when no body parameters are specified.
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);
		Writer->WriteObjectStart();
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (image) was ignored, Files are not supported in json body"));
		if (Model.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("model"));
			WriteJsonValue(Writer, Model.GetValue());
		}
		if (N.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("n"));
			WriteJsonValue(Writer, N.GetValue());
		}
		if (ResponseFormat.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("response_format"));
			WriteJsonValue(Writer, ResponseFormat.GetValue());
		}
		if (Size.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("size"));
			WriteJsonValue(Writer, Size.GetValue());
		}
		if (User.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("user"));
			WriteJsonValue(Writer, User.GetValue());
		}
		Writer->WriteObjectEnd();
		Writer->Close();
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		HttpMultipartFormData FormData;
		FormData.AddFilePart(TEXT("image"), Image);
		if(Model.IsSet())
		{
			FormData.AddStringPart(TEXT("model"), *ToUrlString(Model.GetValue()));
		}
		if(N.IsSet())
		{
			FormData.AddStringPart(TEXT("n"), *ToUrlString(N.GetValue()));
		}
		if(ResponseFormat.IsSet())
		{
			FormData.AddStringPart(TEXT("response_format"), *ToUrlString(ResponseFormat.GetValue()));
		}
		if(Size.IsSet())
		{
			FormData.AddStringPart(TEXT("size"), *ToUrlString(Size.GetValue()));
		}
		if(User.IsSet())
		{
			FormData.AddStringPart(TEXT("user"), *ToUrlString(User.GetValue()));
		}

		FormData.SetupHttpRequest(HttpRequest);
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		TArray<FString> FormParams;
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (image) was ignored, Files are not supported in urlencoded requests"));
		if(Model.IsSet())
		{
			FormParams.Add(FString(TEXT("model=")) + ToUrlString(Model.GetValue()));
		}
		if(N.IsSet())
		{
			FormParams.Add(FString(TEXT("n=")) + ToUrlString(N.GetValue()));
		}
		if(ResponseFormat.IsSet())
		{
			FormParams.Add(FString(TEXT("response_format=")) + ToUrlString(ResponseFormat.GetValue()));
		}
		if(Size.IsSet())
		{
			FormParams.Add(FString(TEXT("size=")) + ToUrlString(Size.GetValue()));
		}
		if(User.IsSet())
		{
			FormParams.Add(FString(TEXT("user=")) + ToUrlString(User.GetValue()));
		}

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/x-www-form-urlencoded; charset=utf-8"));
		HttpRequest->SetContentAsString(FString::Join(FormParams, TEXT("&")));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIImagesApi::CreateImageVariationResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIImagesApi::CreateImageVariationResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
