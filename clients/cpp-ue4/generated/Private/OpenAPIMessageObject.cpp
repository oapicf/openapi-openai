/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIMessageObject.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIMessageObject::ObjectEnum& Value)
{
	switch (Value)
	{
	case OpenAPIMessageObject::ObjectEnum::ThreadMessage:
		return TEXT("thread.message");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIMessageObject::ObjectEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIMessageObject::EnumToString(const OpenAPIMessageObject::ObjectEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIMessageObject::ObjectEnum& Value)
{
	static TMap<FString, OpenAPIMessageObject::ObjectEnum> StringToEnum = { 
		{ TEXT("thread.message"), OpenAPIMessageObject::ObjectEnum::ThreadMessage }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIMessageObject::EnumFromString(const FString& EnumAsString, OpenAPIMessageObject::ObjectEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIMessageObject::ObjectEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIMessageObject::ObjectEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIMessageObject::StatusEnum& Value)
{
	switch (Value)
	{
	case OpenAPIMessageObject::StatusEnum::InProgress:
		return TEXT("in_progress");
	case OpenAPIMessageObject::StatusEnum::Incomplete:
		return TEXT("incomplete");
	case OpenAPIMessageObject::StatusEnum::Completed:
		return TEXT("completed");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIMessageObject::StatusEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIMessageObject::EnumToString(const OpenAPIMessageObject::StatusEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIMessageObject::StatusEnum& Value)
{
	static TMap<FString, OpenAPIMessageObject::StatusEnum> StringToEnum = { 
		{ TEXT("in_progress"), OpenAPIMessageObject::StatusEnum::InProgress },
		{ TEXT("incomplete"), OpenAPIMessageObject::StatusEnum::Incomplete },
		{ TEXT("completed"), OpenAPIMessageObject::StatusEnum::Completed }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIMessageObject::EnumFromString(const FString& EnumAsString, OpenAPIMessageObject::StatusEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIMessageObject::StatusEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIMessageObject::StatusEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIMessageObject::RoleEnum& Value)
{
	switch (Value)
	{
	case OpenAPIMessageObject::RoleEnum::User:
		return TEXT("user");
	case OpenAPIMessageObject::RoleEnum::Assistant:
		return TEXT("assistant");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIMessageObject::RoleEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIMessageObject::EnumToString(const OpenAPIMessageObject::RoleEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIMessageObject::RoleEnum& Value)
{
	static TMap<FString, OpenAPIMessageObject::RoleEnum> StringToEnum = { 
		{ TEXT("user"), OpenAPIMessageObject::RoleEnum::User },
		{ TEXT("assistant"), OpenAPIMessageObject::RoleEnum::Assistant }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIMessageObject::EnumFromString(const FString& EnumAsString, OpenAPIMessageObject::RoleEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIMessageObject::RoleEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIMessageObject::RoleEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIMessageObject::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	Writer->WriteIdentifierPrefix(TEXT("object")); WriteJsonValue(Writer, Object);
	Writer->WriteIdentifierPrefix(TEXT("created_at")); WriteJsonValue(Writer, CreatedAt);
	Writer->WriteIdentifierPrefix(TEXT("thread_id")); WriteJsonValue(Writer, ThreadId);
	Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status);
	if (IncompleteDetails.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("incomplete_details")); WriteJsonValue(Writer, IncompleteDetails.GetValue());
	}
	if (CompletedAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("completed_at")); WriteJsonValue(Writer, CompletedAt.GetValue());
	}
	if (IncompleteAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("incomplete_at")); WriteJsonValue(Writer, IncompleteAt.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("role")); WriteJsonValue(Writer, Role);
	Writer->WriteIdentifierPrefix(TEXT("content")); WriteJsonValue(Writer, Content);
	if (AssistantId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("assistant_id")); WriteJsonValue(Writer, AssistantId.GetValue());
	}
	if (RunId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("run_id")); WriteJsonValue(Writer, RunId.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("file_ids")); WriteJsonValue(Writer, FileIds);
	if (Metadata.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("metadata")); WriteJsonValue(Writer, Metadata.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIMessageObject::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("object"), Object);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("created_at"), CreatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("thread_id"), ThreadId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("incomplete_details"), IncompleteDetails);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("completed_at"), CompletedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("incomplete_at"), IncompleteAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("role"), Role);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("content"), Content);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("assistant_id"), AssistantId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("run_id"), RunId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("file_ids"), FileIds);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("metadata"), Metadata);

	return ParseSuccess;
}

}
