/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOpenAIApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

FString OpenAPIOpenAIApi::CancelFineTuneRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("fine_tune_id"), FStringFormatArg(ToUrlString(FineTuneId)) } };

	FString Path = FString::Format(TEXT("/fine-tunes/{fine_tune_id}/cancel"), PathParams);

	return Path;
}

void OpenAPIOpenAIApi::CancelFineTuneRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIOpenAIApi::CancelFineTuneResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::CancelFineTuneResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::CreateChatCompletionRequest::ComputePath() const
{
	FString Path(TEXT("/chat/completions"));
	return Path;
}

void OpenAPIOpenAIApi::CreateChatCompletionRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPICreateChatCompletionRequest);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICreateChatCompletionRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICreateChatCompletionRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIOpenAIApi::CreateChatCompletionResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::CreateChatCompletionResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::CreateCompletionRequest::ComputePath() const
{
	FString Path(TEXT("/completions"));
	return Path;
}

void OpenAPIOpenAIApi::CreateCompletionRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPICreateCompletionRequest);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICreateCompletionRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICreateCompletionRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIOpenAIApi::CreateCompletionResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::CreateCompletionResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::CreateEditRequest::ComputePath() const
{
	FString Path(TEXT("/edits"));
	return Path;
}

void OpenAPIOpenAIApi::CreateEditRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPICreateEditRequest);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICreateEditRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICreateEditRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIOpenAIApi::CreateEditResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::CreateEditResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::CreateEmbeddingRequest::ComputePath() const
{
	FString Path(TEXT("/embeddings"));
	return Path;
}

void OpenAPIOpenAIApi::CreateEmbeddingRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPICreateEmbeddingRequest);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICreateEmbeddingRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICreateEmbeddingRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIOpenAIApi::CreateEmbeddingResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::CreateEmbeddingResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::CreateFileRequest::ComputePath() const
{
	FString Path(TEXT("/files"));
	return Path;
}

void OpenAPIOpenAIApi::CreateFileRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("multipart/form-data") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Form parameters added to try to generate a json body when no body parameters are specified.
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);
		Writer->WriteObjectStart();
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (file) was ignored, Files are not supported in json body"));
		Writer->WriteIdentifierPrefix(TEXT("purpose"));
		WriteJsonValue(Writer, Purpose);
		Writer->WriteObjectEnd();
		Writer->Close();
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		HttpMultipartFormData FormData;
		FormData.AddFilePart(TEXT("file"), File);
		FormData.AddStringPart(TEXT("purpose"), *ToUrlString(Purpose));

		FormData.SetupHttpRequest(HttpRequest);
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		TArray<FString> FormParams;
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (file) was ignored, Files are not supported in urlencoded requests"));
		FormParams.Add(FString(TEXT("purpose=")) + ToUrlString(Purpose));

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/x-www-form-urlencoded; charset=utf-8"));
		HttpRequest->SetContentAsString(FString::Join(FormParams, TEXT("&")));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIOpenAIApi::CreateFileResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::CreateFileResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::CreateFineTuneRequest::ComputePath() const
{
	FString Path(TEXT("/fine-tunes"));
	return Path;
}

void OpenAPIOpenAIApi::CreateFineTuneRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPICreateFineTuneRequest);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICreateFineTuneRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICreateFineTuneRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIOpenAIApi::CreateFineTuneResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::CreateFineTuneResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::CreateImageRequest::ComputePath() const
{
	FString Path(TEXT("/images/generations"));
	return Path;
}

void OpenAPIOpenAIApi::CreateImageRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPICreateImageRequest);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICreateImageRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICreateImageRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIOpenAIApi::CreateImageResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::CreateImageResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIOpenAIApi::CreateImageEditRequest::SizeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIOpenAIApi::CreateImageEditRequest::SizeEnum::_256x256:
		return TEXT("256x256");
	case OpenAPIOpenAIApi::CreateImageEditRequest::SizeEnum::_512x512:
		return TEXT("512x512");
	case OpenAPIOpenAIApi::CreateImageEditRequest::SizeEnum::_1024x1024:
		return TEXT("1024x1024");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIOpenAIApi::CreateImageEditRequest::SizeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIOpenAIApi::CreateImageEditRequest::EnumToString(const OpenAPIOpenAIApi::CreateImageEditRequest::SizeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIOpenAIApi::CreateImageEditRequest::SizeEnum& Value)
{
	static TMap<FString, OpenAPIOpenAIApi::CreateImageEditRequest::SizeEnum> StringToEnum = { 
		{ TEXT("256x256"), OpenAPIOpenAIApi::CreateImageEditRequest::SizeEnum::_256x256 },
		{ TEXT("512x512"), OpenAPIOpenAIApi::CreateImageEditRequest::SizeEnum::_512x512 },
		{ TEXT("1024x1024"), OpenAPIOpenAIApi::CreateImageEditRequest::SizeEnum::_1024x1024 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIOpenAIApi::CreateImageEditRequest::EnumFromString(const FString& EnumAsString, OpenAPIOpenAIApi::CreateImageEditRequest::SizeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIOpenAIApi::CreateImageEditRequest::SizeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIOpenAIApi::CreateImageEditRequest::SizeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIOpenAIApi::CreateImageEditRequest::ResponseFormatEnum& Value)
{
	switch (Value)
	{
	case OpenAPIOpenAIApi::CreateImageEditRequest::ResponseFormatEnum::Url:
		return TEXT("url");
	case OpenAPIOpenAIApi::CreateImageEditRequest::ResponseFormatEnum::B64Json:
		return TEXT("b64_json");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIOpenAIApi::CreateImageEditRequest::ResponseFormatEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIOpenAIApi::CreateImageEditRequest::EnumToString(const OpenAPIOpenAIApi::CreateImageEditRequest::ResponseFormatEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIOpenAIApi::CreateImageEditRequest::ResponseFormatEnum& Value)
{
	static TMap<FString, OpenAPIOpenAIApi::CreateImageEditRequest::ResponseFormatEnum> StringToEnum = { 
		{ TEXT("url"), OpenAPIOpenAIApi::CreateImageEditRequest::ResponseFormatEnum::Url },
		{ TEXT("b64_json"), OpenAPIOpenAIApi::CreateImageEditRequest::ResponseFormatEnum::B64Json }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIOpenAIApi::CreateImageEditRequest::EnumFromString(const FString& EnumAsString, OpenAPIOpenAIApi::CreateImageEditRequest::ResponseFormatEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIOpenAIApi::CreateImageEditRequest::ResponseFormatEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIOpenAIApi::CreateImageEditRequest::ResponseFormatEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIOpenAIApi::CreateImageEditRequest::ComputePath() const
{
	FString Path(TEXT("/images/edits"));
	return Path;
}

void OpenAPIOpenAIApi::CreateImageEditRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("multipart/form-data") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Form parameters added to try to generate a json body when no body parameters are specified.
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);
		Writer->WriteObjectStart();
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (image) was ignored, Files are not supported in json body"));
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (mask) was ignored, Files are not supported in json body"));
		Writer->WriteIdentifierPrefix(TEXT("prompt"));
		WriteJsonValue(Writer, Prompt);
		if (N.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("n"));
			WriteJsonValue(Writer, N.GetValue());
		}
		if (Size.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("size"));
			WriteJsonValue(Writer, Size.GetValue());
		}
		if (ResponseFormat.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("response_format"));
			WriteJsonValue(Writer, ResponseFormat.GetValue());
		}
		if (User.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("user"));
			WriteJsonValue(Writer, User.GetValue());
		}
		Writer->WriteObjectEnd();
		Writer->Close();
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		HttpMultipartFormData FormData;
		FormData.AddFilePart(TEXT("image"), Image);
		if(Mask.IsSet())
		{
			FormData.AddFilePart(TEXT("mask"), Mask.GetValue());
		}
		FormData.AddStringPart(TEXT("prompt"), *ToUrlString(Prompt));
		if(N.IsSet())
		{
			FormData.AddStringPart(TEXT("n"), *ToUrlString(N.GetValue()));
		}
		if(Size.IsSet())
		{
			FormData.AddStringPart(TEXT("size"), *ToUrlString(Size.GetValue()));
		}
		if(ResponseFormat.IsSet())
		{
			FormData.AddStringPart(TEXT("response_format"), *ToUrlString(ResponseFormat.GetValue()));
		}
		if(User.IsSet())
		{
			FormData.AddStringPart(TEXT("user"), *ToUrlString(User.GetValue()));
		}

		FormData.SetupHttpRequest(HttpRequest);
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		TArray<FString> FormParams;
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (image) was ignored, Files are not supported in urlencoded requests"));
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (mask) was ignored, Files are not supported in urlencoded requests"));
		FormParams.Add(FString(TEXT("prompt=")) + ToUrlString(Prompt));
		if(N.IsSet())
		{
			FormParams.Add(FString(TEXT("n=")) + ToUrlString(N.GetValue()));
		}
		if(Size.IsSet())
		{
			FormParams.Add(FString(TEXT("size=")) + ToUrlString(Size.GetValue()));
		}
		if(ResponseFormat.IsSet())
		{
			FormParams.Add(FString(TEXT("response_format=")) + ToUrlString(ResponseFormat.GetValue()));
		}
		if(User.IsSet())
		{
			FormParams.Add(FString(TEXT("user=")) + ToUrlString(User.GetValue()));
		}

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/x-www-form-urlencoded; charset=utf-8"));
		HttpRequest->SetContentAsString(FString::Join(FormParams, TEXT("&")));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIOpenAIApi::CreateImageEditResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::CreateImageEditResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIOpenAIApi::CreateImageVariationRequest::SizeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIOpenAIApi::CreateImageVariationRequest::SizeEnum::_256x256:
		return TEXT("256x256");
	case OpenAPIOpenAIApi::CreateImageVariationRequest::SizeEnum::_512x512:
		return TEXT("512x512");
	case OpenAPIOpenAIApi::CreateImageVariationRequest::SizeEnum::_1024x1024:
		return TEXT("1024x1024");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIOpenAIApi::CreateImageVariationRequest::SizeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIOpenAIApi::CreateImageVariationRequest::EnumToString(const OpenAPIOpenAIApi::CreateImageVariationRequest::SizeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIOpenAIApi::CreateImageVariationRequest::SizeEnum& Value)
{
	static TMap<FString, OpenAPIOpenAIApi::CreateImageVariationRequest::SizeEnum> StringToEnum = { 
		{ TEXT("256x256"), OpenAPIOpenAIApi::CreateImageVariationRequest::SizeEnum::_256x256 },
		{ TEXT("512x512"), OpenAPIOpenAIApi::CreateImageVariationRequest::SizeEnum::_512x512 },
		{ TEXT("1024x1024"), OpenAPIOpenAIApi::CreateImageVariationRequest::SizeEnum::_1024x1024 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIOpenAIApi::CreateImageVariationRequest::EnumFromString(const FString& EnumAsString, OpenAPIOpenAIApi::CreateImageVariationRequest::SizeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIOpenAIApi::CreateImageVariationRequest::SizeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIOpenAIApi::CreateImageVariationRequest::SizeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIOpenAIApi::CreateImageVariationRequest::ResponseFormatEnum& Value)
{
	switch (Value)
	{
	case OpenAPIOpenAIApi::CreateImageVariationRequest::ResponseFormatEnum::Url:
		return TEXT("url");
	case OpenAPIOpenAIApi::CreateImageVariationRequest::ResponseFormatEnum::B64Json:
		return TEXT("b64_json");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIOpenAIApi::CreateImageVariationRequest::ResponseFormatEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIOpenAIApi::CreateImageVariationRequest::EnumToString(const OpenAPIOpenAIApi::CreateImageVariationRequest::ResponseFormatEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIOpenAIApi::CreateImageVariationRequest::ResponseFormatEnum& Value)
{
	static TMap<FString, OpenAPIOpenAIApi::CreateImageVariationRequest::ResponseFormatEnum> StringToEnum = { 
		{ TEXT("url"), OpenAPIOpenAIApi::CreateImageVariationRequest::ResponseFormatEnum::Url },
		{ TEXT("b64_json"), OpenAPIOpenAIApi::CreateImageVariationRequest::ResponseFormatEnum::B64Json }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIOpenAIApi::CreateImageVariationRequest::EnumFromString(const FString& EnumAsString, OpenAPIOpenAIApi::CreateImageVariationRequest::ResponseFormatEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIOpenAIApi::CreateImageVariationRequest::ResponseFormatEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIOpenAIApi::CreateImageVariationRequest::ResponseFormatEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIOpenAIApi::CreateImageVariationRequest::ComputePath() const
{
	FString Path(TEXT("/images/variations"));
	return Path;
}

void OpenAPIOpenAIApi::CreateImageVariationRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("multipart/form-data") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Form parameters added to try to generate a json body when no body parameters are specified.
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);
		Writer->WriteObjectStart();
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (image) was ignored, Files are not supported in json body"));
		if (N.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("n"));
			WriteJsonValue(Writer, N.GetValue());
		}
		if (Size.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("size"));
			WriteJsonValue(Writer, Size.GetValue());
		}
		if (ResponseFormat.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("response_format"));
			WriteJsonValue(Writer, ResponseFormat.GetValue());
		}
		if (User.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("user"));
			WriteJsonValue(Writer, User.GetValue());
		}
		Writer->WriteObjectEnd();
		Writer->Close();
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		HttpMultipartFormData FormData;
		FormData.AddFilePart(TEXT("image"), Image);
		if(N.IsSet())
		{
			FormData.AddStringPart(TEXT("n"), *ToUrlString(N.GetValue()));
		}
		if(Size.IsSet())
		{
			FormData.AddStringPart(TEXT("size"), *ToUrlString(Size.GetValue()));
		}
		if(ResponseFormat.IsSet())
		{
			FormData.AddStringPart(TEXT("response_format"), *ToUrlString(ResponseFormat.GetValue()));
		}
		if(User.IsSet())
		{
			FormData.AddStringPart(TEXT("user"), *ToUrlString(User.GetValue()));
		}

		FormData.SetupHttpRequest(HttpRequest);
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		TArray<FString> FormParams;
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (image) was ignored, Files are not supported in urlencoded requests"));
		if(N.IsSet())
		{
			FormParams.Add(FString(TEXT("n=")) + ToUrlString(N.GetValue()));
		}
		if(Size.IsSet())
		{
			FormParams.Add(FString(TEXT("size=")) + ToUrlString(Size.GetValue()));
		}
		if(ResponseFormat.IsSet())
		{
			FormParams.Add(FString(TEXT("response_format=")) + ToUrlString(ResponseFormat.GetValue()));
		}
		if(User.IsSet())
		{
			FormParams.Add(FString(TEXT("user=")) + ToUrlString(User.GetValue()));
		}

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/x-www-form-urlencoded; charset=utf-8"));
		HttpRequest->SetContentAsString(FString::Join(FormParams, TEXT("&")));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIOpenAIApi::CreateImageVariationResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::CreateImageVariationResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::CreateModerationRequest::ComputePath() const
{
	FString Path(TEXT("/moderations"));
	return Path;
}

void OpenAPIOpenAIApi::CreateModerationRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPICreateModerationRequest);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICreateModerationRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICreateModerationRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIOpenAIApi::CreateModerationResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::CreateModerationResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::CreateTranscriptionRequest::ComputePath() const
{
	FString Path(TEXT("/audio/transcriptions"));
	return Path;
}

void OpenAPIOpenAIApi::CreateTranscriptionRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("multipart/form-data") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Form parameters added to try to generate a json body when no body parameters are specified.
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);
		Writer->WriteObjectStart();
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (file) was ignored, Files are not supported in json body"));
		Writer->WriteIdentifierPrefix(TEXT("model"));
		WriteJsonValue(Writer, Model);
		if (Prompt.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("prompt"));
			WriteJsonValue(Writer, Prompt.GetValue());
		}
		if (ResponseFormat.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("response_format"));
			WriteJsonValue(Writer, ResponseFormat.GetValue());
		}
		if (Temperature.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("temperature"));
			WriteJsonValue(Writer, Temperature.GetValue());
		}
		if (Language.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("language"));
			WriteJsonValue(Writer, Language.GetValue());
		}
		Writer->WriteObjectEnd();
		Writer->Close();
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		HttpMultipartFormData FormData;
		FormData.AddFilePart(TEXT("file"), File);
		FormData.AddStringPart(TEXT("model"), *ToUrlString(Model));
		if(Prompt.IsSet())
		{
			FormData.AddStringPart(TEXT("prompt"), *ToUrlString(Prompt.GetValue()));
		}
		if(ResponseFormat.IsSet())
		{
			FormData.AddStringPart(TEXT("response_format"), *ToUrlString(ResponseFormat.GetValue()));
		}
		if(Temperature.IsSet())
		{
			FormData.AddStringPart(TEXT("temperature"), *ToUrlString(Temperature.GetValue()));
		}
		if(Language.IsSet())
		{
			FormData.AddStringPart(TEXT("language"), *ToUrlString(Language.GetValue()));
		}

		FormData.SetupHttpRequest(HttpRequest);
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		TArray<FString> FormParams;
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (file) was ignored, Files are not supported in urlencoded requests"));
		FormParams.Add(FString(TEXT("model=")) + ToUrlString(Model));
		if(Prompt.IsSet())
		{
			FormParams.Add(FString(TEXT("prompt=")) + ToUrlString(Prompt.GetValue()));
		}
		if(ResponseFormat.IsSet())
		{
			FormParams.Add(FString(TEXT("response_format=")) + ToUrlString(ResponseFormat.GetValue()));
		}
		if(Temperature.IsSet())
		{
			FormParams.Add(FString(TEXT("temperature=")) + ToUrlString(Temperature.GetValue()));
		}
		if(Language.IsSet())
		{
			FormParams.Add(FString(TEXT("language=")) + ToUrlString(Language.GetValue()));
		}

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/x-www-form-urlencoded; charset=utf-8"));
		HttpRequest->SetContentAsString(FString::Join(FormParams, TEXT("&")));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIOpenAIApi::CreateTranscriptionResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::CreateTranscriptionResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::CreateTranslationRequest::ComputePath() const
{
	FString Path(TEXT("/audio/translations"));
	return Path;
}

void OpenAPIOpenAIApi::CreateTranslationRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("multipart/form-data") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Form parameters added to try to generate a json body when no body parameters are specified.
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);
		Writer->WriteObjectStart();
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (file) was ignored, Files are not supported in json body"));
		Writer->WriteIdentifierPrefix(TEXT("model"));
		WriteJsonValue(Writer, Model);
		if (Prompt.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("prompt"));
			WriteJsonValue(Writer, Prompt.GetValue());
		}
		if (ResponseFormat.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("response_format"));
			WriteJsonValue(Writer, ResponseFormat.GetValue());
		}
		if (Temperature.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("temperature"));
			WriteJsonValue(Writer, Temperature.GetValue());
		}
		Writer->WriteObjectEnd();
		Writer->Close();
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		HttpMultipartFormData FormData;
		FormData.AddFilePart(TEXT("file"), File);
		FormData.AddStringPart(TEXT("model"), *ToUrlString(Model));
		if(Prompt.IsSet())
		{
			FormData.AddStringPart(TEXT("prompt"), *ToUrlString(Prompt.GetValue()));
		}
		if(ResponseFormat.IsSet())
		{
			FormData.AddStringPart(TEXT("response_format"), *ToUrlString(ResponseFormat.GetValue()));
		}
		if(Temperature.IsSet())
		{
			FormData.AddStringPart(TEXT("temperature"), *ToUrlString(Temperature.GetValue()));
		}

		FormData.SetupHttpRequest(HttpRequest);
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		TArray<FString> FormParams;
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (file) was ignored, Files are not supported in urlencoded requests"));
		FormParams.Add(FString(TEXT("model=")) + ToUrlString(Model));
		if(Prompt.IsSet())
		{
			FormParams.Add(FString(TEXT("prompt=")) + ToUrlString(Prompt.GetValue()));
		}
		if(ResponseFormat.IsSet())
		{
			FormParams.Add(FString(TEXT("response_format=")) + ToUrlString(ResponseFormat.GetValue()));
		}
		if(Temperature.IsSet())
		{
			FormParams.Add(FString(TEXT("temperature=")) + ToUrlString(Temperature.GetValue()));
		}

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/x-www-form-urlencoded; charset=utf-8"));
		HttpRequest->SetContentAsString(FString::Join(FormParams, TEXT("&")));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIOpenAIApi::CreateTranslationResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::CreateTranslationResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::DeleteFileRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("file_id"), FStringFormatArg(ToUrlString(FileId)) } };

	FString Path = FString::Format(TEXT("/files/{file_id}"), PathParams);

	return Path;
}

void OpenAPIOpenAIApi::DeleteFileRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("DELETE"));

}

void OpenAPIOpenAIApi::DeleteFileResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::DeleteFileResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::DeleteModelRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("model"), FStringFormatArg(ToUrlString(Model)) } };

	FString Path = FString::Format(TEXT("/models/{model}"), PathParams);

	return Path;
}

void OpenAPIOpenAIApi::DeleteModelRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("DELETE"));

}

void OpenAPIOpenAIApi::DeleteModelResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::DeleteModelResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::DownloadFileRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("file_id"), FStringFormatArg(ToUrlString(FileId)) } };

	FString Path = FString::Format(TEXT("/files/{file_id}/content"), PathParams);

	return Path;
}

void OpenAPIOpenAIApi::DownloadFileRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIOpenAIApi::DownloadFileResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::DownloadFileResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::ListFilesRequest::ComputePath() const
{
	FString Path(TEXT("/files"));
	return Path;
}

void OpenAPIOpenAIApi::ListFilesRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIOpenAIApi::ListFilesResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::ListFilesResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::ListFineTuneEventsRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("fine_tune_id"), FStringFormatArg(ToUrlString(FineTuneId)) } };

	FString Path = FString::Format(TEXT("/fine-tunes/{fine_tune_id}/events"), PathParams);

	TArray<FString> QueryParams;
	if(Stream.IsSet())
	{
		QueryParams.Add(FString(TEXT("stream=")) + ToUrlString(Stream.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIOpenAIApi::ListFineTuneEventsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIOpenAIApi::ListFineTuneEventsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::ListFineTuneEventsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::ListFineTunesRequest::ComputePath() const
{
	FString Path(TEXT("/fine-tunes"));
	return Path;
}

void OpenAPIOpenAIApi::ListFineTunesRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIOpenAIApi::ListFineTunesResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::ListFineTunesResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::ListModelsRequest::ComputePath() const
{
	FString Path(TEXT("/models"));
	return Path;
}

void OpenAPIOpenAIApi::ListModelsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIOpenAIApi::ListModelsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::ListModelsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::RetrieveFileRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("file_id"), FStringFormatArg(ToUrlString(FileId)) } };

	FString Path = FString::Format(TEXT("/files/{file_id}"), PathParams);

	return Path;
}

void OpenAPIOpenAIApi::RetrieveFileRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIOpenAIApi::RetrieveFileResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::RetrieveFileResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::RetrieveFineTuneRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("fine_tune_id"), FStringFormatArg(ToUrlString(FineTuneId)) } };

	FString Path = FString::Format(TEXT("/fine-tunes/{fine_tune_id}"), PathParams);

	return Path;
}

void OpenAPIOpenAIApi::RetrieveFineTuneRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIOpenAIApi::RetrieveFineTuneResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::RetrieveFineTuneResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOpenAIApi::RetrieveModelRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("model"), FStringFormatArg(ToUrlString(Model)) } };

	FString Path = FString::Format(TEXT("/models/{model}"), PathParams);

	return Path;
}

void OpenAPIOpenAIApi::RetrieveModelRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIOpenAIApi::RetrieveModelResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	}
}

bool OpenAPIOpenAIApi::RetrieveModelResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
