/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIRunObject.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIRunObject::ObjectEnum& Value)
{
	switch (Value)
	{
	case OpenAPIRunObject::ObjectEnum::ThreadRun:
		return TEXT("thread.run");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIRunObject::ObjectEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIRunObject::EnumToString(const OpenAPIRunObject::ObjectEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIRunObject::ObjectEnum& Value)
{
	static TMap<FString, OpenAPIRunObject::ObjectEnum> StringToEnum = { 
		{ TEXT("thread.run"), OpenAPIRunObject::ObjectEnum::ThreadRun }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIRunObject::EnumFromString(const FString& EnumAsString, OpenAPIRunObject::ObjectEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIRunObject::ObjectEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIRunObject::ObjectEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIRunObject::StatusEnum& Value)
{
	switch (Value)
	{
	case OpenAPIRunObject::StatusEnum::Queued:
		return TEXT("queued");
	case OpenAPIRunObject::StatusEnum::InProgress:
		return TEXT("in_progress");
	case OpenAPIRunObject::StatusEnum::RequiresAction:
		return TEXT("requires_action");
	case OpenAPIRunObject::StatusEnum::Cancelling:
		return TEXT("cancelling");
	case OpenAPIRunObject::StatusEnum::Cancelled:
		return TEXT("cancelled");
	case OpenAPIRunObject::StatusEnum::Failed:
		return TEXT("failed");
	case OpenAPIRunObject::StatusEnum::Completed:
		return TEXT("completed");
	case OpenAPIRunObject::StatusEnum::Expired:
		return TEXT("expired");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIRunObject::StatusEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIRunObject::EnumToString(const OpenAPIRunObject::StatusEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIRunObject::StatusEnum& Value)
{
	static TMap<FString, OpenAPIRunObject::StatusEnum> StringToEnum = { 
		{ TEXT("queued"), OpenAPIRunObject::StatusEnum::Queued },
		{ TEXT("in_progress"), OpenAPIRunObject::StatusEnum::InProgress },
		{ TEXT("requires_action"), OpenAPIRunObject::StatusEnum::RequiresAction },
		{ TEXT("cancelling"), OpenAPIRunObject::StatusEnum::Cancelling },
		{ TEXT("cancelled"), OpenAPIRunObject::StatusEnum::Cancelled },
		{ TEXT("failed"), OpenAPIRunObject::StatusEnum::Failed },
		{ TEXT("completed"), OpenAPIRunObject::StatusEnum::Completed },
		{ TEXT("expired"), OpenAPIRunObject::StatusEnum::Expired }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIRunObject::EnumFromString(const FString& EnumAsString, OpenAPIRunObject::StatusEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIRunObject::StatusEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIRunObject::StatusEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIRunObject::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	Writer->WriteIdentifierPrefix(TEXT("object")); WriteJsonValue(Writer, Object);
	Writer->WriteIdentifierPrefix(TEXT("created_at")); WriteJsonValue(Writer, CreatedAt);
	Writer->WriteIdentifierPrefix(TEXT("thread_id")); WriteJsonValue(Writer, ThreadId);
	Writer->WriteIdentifierPrefix(TEXT("assistant_id")); WriteJsonValue(Writer, AssistantId);
	Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status);
	if (RequiredAction.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("required_action")); WriteJsonValue(Writer, RequiredAction.GetValue());
	}
	if (LastError.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("last_error")); WriteJsonValue(Writer, LastError.GetValue());
	}
	if (ExpiresAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("expires_at")); WriteJsonValue(Writer, ExpiresAt.GetValue());
	}
	if (StartedAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("started_at")); WriteJsonValue(Writer, StartedAt.GetValue());
	}
	if (CancelledAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("cancelled_at")); WriteJsonValue(Writer, CancelledAt.GetValue());
	}
	if (FailedAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("failed_at")); WriteJsonValue(Writer, FailedAt.GetValue());
	}
	if (CompletedAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("completed_at")); WriteJsonValue(Writer, CompletedAt.GetValue());
	}
	if (IncompleteDetails.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("incomplete_details")); WriteJsonValue(Writer, IncompleteDetails.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("model")); WriteJsonValue(Writer, Model);
	Writer->WriteIdentifierPrefix(TEXT("instructions")); WriteJsonValue(Writer, Instructions);
	Writer->WriteIdentifierPrefix(TEXT("tools")); WriteJsonValue(Writer, Tools);
	Writer->WriteIdentifierPrefix(TEXT("file_ids")); WriteJsonValue(Writer, FileIds);
	if (Metadata.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("metadata")); WriteJsonValue(Writer, Metadata.GetValue());
	}
	if (Usage.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("usage")); WriteJsonValue(Writer, Usage.GetValue());
	}
	if (Temperature.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("temperature")); WriteJsonValue(Writer, Temperature.GetValue());
	}
	if (MaxPromptTokens.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("max_prompt_tokens")); WriteJsonValue(Writer, MaxPromptTokens.GetValue());
	}
	if (MaxCompletionTokens.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("max_completion_tokens")); WriteJsonValue(Writer, MaxCompletionTokens.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("truncation_strategy")); WriteJsonValue(Writer, TruncationStrategy);
	Writer->WriteIdentifierPrefix(TEXT("tool_choice")); WriteJsonValue(Writer, ToolChoice);
	Writer->WriteIdentifierPrefix(TEXT("response_format")); WriteJsonValue(Writer, ResponseFormat);
	Writer->WriteObjectEnd();
}

bool OpenAPIRunObject::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("object"), Object);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("created_at"), CreatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("thread_id"), ThreadId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("assistant_id"), AssistantId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("required_action"), RequiredAction);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("last_error"), LastError);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("expires_at"), ExpiresAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("started_at"), StartedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("cancelled_at"), CancelledAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("failed_at"), FailedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("completed_at"), CompletedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("incomplete_details"), IncompleteDetails);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("model"), Model);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("instructions"), Instructions);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tools"), Tools);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("file_ids"), FileIds);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("metadata"), Metadata);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("usage"), Usage);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("temperature"), Temperature);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("max_prompt_tokens"), MaxPromptTokens);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("max_completion_tokens"), MaxCompletionTokens);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("truncation_strategy"), TruncationStrategy);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tool_choice"), ToolChoice);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("response_format"), ResponseFormat);

	return ParseSuccess;
}

}
