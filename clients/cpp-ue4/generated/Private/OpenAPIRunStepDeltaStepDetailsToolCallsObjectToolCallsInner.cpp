/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner::TypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner::TypeEnum::CodeInterpreter:
		return TEXT("code_interpreter");
	case OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner::TypeEnum::Retrieval:
		return TEXT("retrieval");
	case OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner::TypeEnum::Function:
		return TEXT("function");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner::TypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner::EnumToString(const OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner::TypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner::TypeEnum& Value)
{
	static TMap<FString, OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner::TypeEnum> StringToEnum = { 
		{ TEXT("code_interpreter"), OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner::TypeEnum::CodeInterpreter },
		{ TEXT("retrieval"), OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner::TypeEnum::Retrieval },
		{ TEXT("function"), OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner::TypeEnum::Function }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner::EnumFromString(const FString& EnumAsString, OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner::TypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner::TypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner::TypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("index")); WriteJsonValue(Writer, Index);
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type);
	if (CodeInterpreter.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("code_interpreter")); WriteJsonValue(Writer, CodeInterpreter.GetValue());
	}
	if (Retrieval.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("retrieval")); WriteJsonValue(Writer, Retrieval.GetValue());
	}
	if (Function.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("function")); WriteJsonValue(Writer, Function.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIRunStepDeltaStepDetailsToolCallsObjectToolCallsInner::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("index"), Index);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("code_interpreter"), CodeInterpreter);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("retrieval"), Retrieval);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("function"), Function);

	return ParseSuccess;
}

}
