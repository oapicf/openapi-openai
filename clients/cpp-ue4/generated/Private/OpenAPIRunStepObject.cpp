/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIRunStepObject.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIRunStepObject::ObjectEnum& Value)
{
	switch (Value)
	{
	case OpenAPIRunStepObject::ObjectEnum::ThreadRunStep:
		return TEXT("thread.run.step");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIRunStepObject::ObjectEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIRunStepObject::EnumToString(const OpenAPIRunStepObject::ObjectEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIRunStepObject::ObjectEnum& Value)
{
	static TMap<FString, OpenAPIRunStepObject::ObjectEnum> StringToEnum = { 
		{ TEXT("thread.run.step"), OpenAPIRunStepObject::ObjectEnum::ThreadRunStep }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIRunStepObject::EnumFromString(const FString& EnumAsString, OpenAPIRunStepObject::ObjectEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIRunStepObject::ObjectEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIRunStepObject::ObjectEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIRunStepObject::TypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIRunStepObject::TypeEnum::MessageCreation:
		return TEXT("message_creation");
	case OpenAPIRunStepObject::TypeEnum::ToolCalls:
		return TEXT("tool_calls");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIRunStepObject::TypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIRunStepObject::EnumToString(const OpenAPIRunStepObject::TypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIRunStepObject::TypeEnum& Value)
{
	static TMap<FString, OpenAPIRunStepObject::TypeEnum> StringToEnum = { 
		{ TEXT("message_creation"), OpenAPIRunStepObject::TypeEnum::MessageCreation },
		{ TEXT("tool_calls"), OpenAPIRunStepObject::TypeEnum::ToolCalls }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIRunStepObject::EnumFromString(const FString& EnumAsString, OpenAPIRunStepObject::TypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIRunStepObject::TypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIRunStepObject::TypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIRunStepObject::StatusEnum& Value)
{
	switch (Value)
	{
	case OpenAPIRunStepObject::StatusEnum::InProgress:
		return TEXT("in_progress");
	case OpenAPIRunStepObject::StatusEnum::Cancelled:
		return TEXT("cancelled");
	case OpenAPIRunStepObject::StatusEnum::Failed:
		return TEXT("failed");
	case OpenAPIRunStepObject::StatusEnum::Completed:
		return TEXT("completed");
	case OpenAPIRunStepObject::StatusEnum::Expired:
		return TEXT("expired");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIRunStepObject::StatusEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIRunStepObject::EnumToString(const OpenAPIRunStepObject::StatusEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIRunStepObject::StatusEnum& Value)
{
	static TMap<FString, OpenAPIRunStepObject::StatusEnum> StringToEnum = { 
		{ TEXT("in_progress"), OpenAPIRunStepObject::StatusEnum::InProgress },
		{ TEXT("cancelled"), OpenAPIRunStepObject::StatusEnum::Cancelled },
		{ TEXT("failed"), OpenAPIRunStepObject::StatusEnum::Failed },
		{ TEXT("completed"), OpenAPIRunStepObject::StatusEnum::Completed },
		{ TEXT("expired"), OpenAPIRunStepObject::StatusEnum::Expired }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIRunStepObject::EnumFromString(const FString& EnumAsString, OpenAPIRunStepObject::StatusEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIRunStepObject::StatusEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIRunStepObject::StatusEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIRunStepObject::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	Writer->WriteIdentifierPrefix(TEXT("object")); WriteJsonValue(Writer, Object);
	Writer->WriteIdentifierPrefix(TEXT("created_at")); WriteJsonValue(Writer, CreatedAt);
	Writer->WriteIdentifierPrefix(TEXT("assistant_id")); WriteJsonValue(Writer, AssistantId);
	Writer->WriteIdentifierPrefix(TEXT("thread_id")); WriteJsonValue(Writer, ThreadId);
	Writer->WriteIdentifierPrefix(TEXT("run_id")); WriteJsonValue(Writer, RunId);
	Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type);
	Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status);
	Writer->WriteIdentifierPrefix(TEXT("step_details")); WriteJsonValue(Writer, StepDetails);
	Writer->WriteIdentifierPrefix(TEXT("last_error")); WriteJsonValue(Writer, LastError);
	Writer->WriteIdentifierPrefix(TEXT("expired_at")); WriteJsonValue(Writer, ExpiredAt);
	Writer->WriteIdentifierPrefix(TEXT("cancelled_at")); WriteJsonValue(Writer, CancelledAt);
	Writer->WriteIdentifierPrefix(TEXT("failed_at")); WriteJsonValue(Writer, FailedAt);
	Writer->WriteIdentifierPrefix(TEXT("completed_at")); WriteJsonValue(Writer, CompletedAt);
	Writer->WriteIdentifierPrefix(TEXT("metadata")); WriteJsonValue(Writer, Metadata);
	Writer->WriteIdentifierPrefix(TEXT("usage")); WriteJsonValue(Writer, Usage);
	Writer->WriteObjectEnd();
}

bool OpenAPIRunStepObject::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("object"), Object);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("created_at"), CreatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("assistant_id"), AssistantId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("thread_id"), ThreadId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("run_id"), RunId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("step_details"), StepDetails);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("last_error"), LastError);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("expired_at"), ExpiredAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("cancelled_at"), CancelledAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("failed_at"), FailedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("completed_at"), CompletedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("metadata"), Metadata);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("usage"), Usage);

	return ParseSuccess;
}

}
