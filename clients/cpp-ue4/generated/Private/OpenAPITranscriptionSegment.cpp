/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPITranscriptionSegment.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPITranscriptionSegment::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	Writer->WriteIdentifierPrefix(TEXT("seek")); WriteJsonValue(Writer, Seek);
	Writer->WriteIdentifierPrefix(TEXT("start")); WriteJsonValue(Writer, Start);
	Writer->WriteIdentifierPrefix(TEXT("end")); WriteJsonValue(Writer, End);
	Writer->WriteIdentifierPrefix(TEXT("text")); WriteJsonValue(Writer, Text);
	Writer->WriteIdentifierPrefix(TEXT("tokens")); WriteJsonValue(Writer, Tokens);
	Writer->WriteIdentifierPrefix(TEXT("temperature")); WriteJsonValue(Writer, Temperature);
	Writer->WriteIdentifierPrefix(TEXT("avg_logprob")); WriteJsonValue(Writer, AvgLogprob);
	Writer->WriteIdentifierPrefix(TEXT("compression_ratio")); WriteJsonValue(Writer, CompressionRatio);
	Writer->WriteIdentifierPrefix(TEXT("no_speech_prob")); WriteJsonValue(Writer, NoSpeechProb);
	Writer->WriteObjectEnd();
}

bool OpenAPITranscriptionSegment::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("seek"), Seek);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("start"), Start);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("end"), End);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("text"), Text);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tokens"), Tokens);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("temperature"), Temperature);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("avg_logprob"), AvgLogprob);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("compression_ratio"), CompressionRatio);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("no_speech_prob"), NoSpeechProb);

	return ParseSuccess;
}

}
