/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIAudioApi.h"

#include "OpenAPIHelpers.h"
#include "OpenAPICreateSpeechRequest.h"
#include "OpenAPICreateTranscription200Response.h"
#include "OpenAPICreateTranscriptionRequestModel.h"
#include "OpenAPICreateTranslation200Response.h"

namespace OpenAPI
{

/* Generates audio from the input text.

*/
class OPENAPI_API OpenAPIAudioApi::CreateSpeechRequest : public Request
{
public:
    virtual ~CreateSpeechRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPICreateSpeechRequest OpenAPICreateSpeechRequest;
};

class OPENAPI_API OpenAPIAudioApi::CreateSpeechResponse : public Response
{
public:
    virtual ~CreateSpeechResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    HttpFileInput Content;
};

/* Transcribes audio into the input language.

*/
class OPENAPI_API OpenAPIAudioApi::CreateTranscriptionRequest : public Request
{
public:
    virtual ~CreateTranscriptionRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.  */
	HttpFileInput File;
	OpenAPICreateTranscriptionRequestModel Model;
	/* The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.  */
	TOptional<FString> Language;
	/* An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.  */
	TOptional<FString> Prompt;
	enum class ResponseFormatEnum
	{
		Json,
		Text,
		Srt,
		VerboseJson,
		Vtt,
  	};

	static FString EnumToString(const ResponseFormatEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, ResponseFormatEnum& EnumValue);
	/* The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.  */
	TOptional<ResponseFormatEnum> ResponseFormat;
	/* The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.  */
	TOptional<double> Temperature;
	enum class TimestampGranularitiesEnum
	{
		Word,
		Segment,
  	};

	static FString EnumToString(const TimestampGranularitiesEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, TimestampGranularitiesEnum& EnumValue);
	/* The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.  */
	TOptional<TArray<TimestampGranularitiesEnum>> TimestampGranularities;
};

class OPENAPI_API OpenAPIAudioApi::CreateTranscriptionResponse : public Response
{
public:
    virtual ~CreateTranscriptionResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPICreateTranscription200Response Content;
};

/* Translates audio into English.

*/
class OPENAPI_API OpenAPIAudioApi::CreateTranslationRequest : public Request
{
public:
    virtual ~CreateTranslationRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.  */
	HttpFileInput File;
	OpenAPICreateTranscriptionRequestModel Model;
	/* An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.  */
	TOptional<FString> Prompt;
	/* The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.  */
	TOptional<FString> ResponseFormat;
	/* The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.  */
	TOptional<double> Temperature;
};

class OPENAPI_API OpenAPIAudioApi::CreateTranslationResponse : public Response
{
public:
    virtual ~CreateTranslationResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPICreateTranslation200Response Content;
};

}
