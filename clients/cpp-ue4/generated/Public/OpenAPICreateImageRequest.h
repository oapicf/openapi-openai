/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

/*
 * OpenAPICreateImageRequest
 *
 * 
 */
class OPENAPI_API OpenAPICreateImageRequest : public Model
{
public:
    virtual ~OpenAPICreateImageRequest() {}
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
	void WriteJson(JsonWriter& Writer) const final;

	/* A text description of the desired image(s). The maximum length is 1000 characters. */
	FString Prompt;
	/* The number of images to generate. Must be between 1 and 10. */
	TOptional<int32> N;
	enum class SizeEnum
	{
		_256x256,
		_512x512,
		_1024x1024,
  	};

	static FString EnumToString(const SizeEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, SizeEnum& EnumValue);
	/* The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`. */
	TOptional<SizeEnum> Size;
	enum class ResponseFormatEnum
	{
		Url,
		B64Json,
  	};

	static FString EnumToString(const ResponseFormatEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, ResponseFormatEnum& EnumValue);
	/* The format in which the generated images are returned. Must be one of `url` or `b64_json`. */
	TOptional<ResponseFormatEnum> ResponseFormat;
	/* A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */
	TOptional<FString> User;
};

}
