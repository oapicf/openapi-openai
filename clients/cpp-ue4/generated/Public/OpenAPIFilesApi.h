/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIFilesApi
{
public:
	OpenAPIFilesApi();
	~OpenAPIFilesApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class CreateFileRequest;
	class CreateFileResponse;
	class DeleteFileRequest;
	class DeleteFileResponse;
	class DownloadFileRequest;
	class DownloadFileResponse;
	class ListFilesRequest;
	class ListFilesResponse;
	class RetrieveFileRequest;
	class RetrieveFileResponse;
	
    DECLARE_DELEGATE_OneParam(FCreateFileDelegate, const CreateFileResponse&);
    DECLARE_DELEGATE_OneParam(FDeleteFileDelegate, const DeleteFileResponse&);
    DECLARE_DELEGATE_OneParam(FDownloadFileDelegate, const DownloadFileResponse&);
    DECLARE_DELEGATE_OneParam(FListFilesDelegate, const ListFilesResponse&);
    DECLARE_DELEGATE_OneParam(FRetrieveFileDelegate, const RetrieveFileResponse&);
    
    FHttpRequestPtr CreateFile(const CreateFileRequest& Request, const FCreateFileDelegate& Delegate = FCreateFileDelegate()) const;
    FHttpRequestPtr DeleteFile(const DeleteFileRequest& Request, const FDeleteFileDelegate& Delegate = FDeleteFileDelegate()) const;
    FHttpRequestPtr DownloadFile(const DownloadFileRequest& Request, const FDownloadFileDelegate& Delegate = FDownloadFileDelegate()) const;
    FHttpRequestPtr ListFiles(const ListFilesRequest& Request, const FListFilesDelegate& Delegate = FListFilesDelegate()) const;
    FHttpRequestPtr RetrieveFile(const RetrieveFileRequest& Request, const FRetrieveFileDelegate& Delegate = FRetrieveFileDelegate()) const;
    
private:
    void OnCreateFileResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateFileDelegate Delegate) const;
    void OnDeleteFileResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteFileDelegate Delegate) const;
    void OnDownloadFileResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDownloadFileDelegate Delegate) const;
    void OnListFilesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListFilesDelegate Delegate) const;
    void OnRetrieveFileResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRetrieveFileDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
