/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIFilesApi.h"

#include "OpenAPIHelpers.h"
#include "OpenAPIDeleteFileResponse.h"
#include "OpenAPIListFilesResponse.h"
#include "OpenAPIOpenAIFile.h"

namespace OpenAPI
{

/* Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports &#x60;.jsonl&#x60; files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. 

*/
class OPENAPI_API OpenAPIFilesApi::CreateFileRequest : public Request
{
public:
    virtual ~CreateFileRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The File object (not file name) to be uploaded.  */
	HttpFileInput File;
	enum class PurposeEnum
	{
		FineTune,
		Assistants,
  	};

	static FString EnumToString(const PurposeEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, PurposeEnum& EnumValue);
	/* The intended purpose of the uploaded file.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tuning) and \\\"assistants\\\" for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning.  */
	PurposeEnum Purpose;
};

class OPENAPI_API OpenAPIFilesApi::CreateFileResponse : public Response
{
public:
    virtual ~CreateFileResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIOpenAIFile Content;
};

/* Delete a file.

*/
class OPENAPI_API OpenAPIFilesApi::DeleteFileRequest : public Request
{
public:
    virtual ~DeleteFileRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The ID of the file to use for this request. */
	FString FileId;
};

class OPENAPI_API OpenAPIFilesApi::DeleteFileResponse : public Response
{
public:
    virtual ~DeleteFileResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIDeleteFileResponse Content;
};

/* Returns the contents of the specified file.

*/
class OPENAPI_API OpenAPIFilesApi::DownloadFileRequest : public Request
{
public:
    virtual ~DownloadFileRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The ID of the file to use for this request. */
	FString FileId;
};

class OPENAPI_API OpenAPIFilesApi::DownloadFileResponse : public Response
{
public:
    virtual ~DownloadFileResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    FString Content;
};

/* Returns a list of files that belong to the user&#39;s organization.

*/
class OPENAPI_API OpenAPIFilesApi::ListFilesRequest : public Request
{
public:
    virtual ~ListFilesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Only return files with the given purpose. */
	TOptional<FString> Purpose;
};

class OPENAPI_API OpenAPIFilesApi::ListFilesResponse : public Response
{
public:
    virtual ~ListFilesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIListFilesResponse Content;
};

/* Returns information about a specific file.

*/
class OPENAPI_API OpenAPIFilesApi::RetrieveFileRequest : public Request
{
public:
    virtual ~RetrieveFileRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The ID of the file to use for this request. */
	FString FileId;
};

class OPENAPI_API OpenAPIFilesApi::RetrieveFileResponse : public Response
{
public:
    virtual ~RetrieveFileResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIOpenAIFile Content;
};

}
