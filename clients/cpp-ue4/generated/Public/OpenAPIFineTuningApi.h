/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIFineTuningApi
{
public:
	OpenAPIFineTuningApi();
	~OpenAPIFineTuningApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class CancelFineTuningJobRequest;
	class CancelFineTuningJobResponse;
	class CreateFineTuningJobRequest;
	class CreateFineTuningJobResponse;
	class ListFineTuningEventsRequest;
	class ListFineTuningEventsResponse;
	class ListFineTuningJobCheckpointsRequest;
	class ListFineTuningJobCheckpointsResponse;
	class ListPaginatedFineTuningJobsRequest;
	class ListPaginatedFineTuningJobsResponse;
	class RetrieveFineTuningJobRequest;
	class RetrieveFineTuningJobResponse;
	
    DECLARE_DELEGATE_OneParam(FCancelFineTuningJobDelegate, const CancelFineTuningJobResponse&);
    DECLARE_DELEGATE_OneParam(FCreateFineTuningJobDelegate, const CreateFineTuningJobResponse&);
    DECLARE_DELEGATE_OneParam(FListFineTuningEventsDelegate, const ListFineTuningEventsResponse&);
    DECLARE_DELEGATE_OneParam(FListFineTuningJobCheckpointsDelegate, const ListFineTuningJobCheckpointsResponse&);
    DECLARE_DELEGATE_OneParam(FListPaginatedFineTuningJobsDelegate, const ListPaginatedFineTuningJobsResponse&);
    DECLARE_DELEGATE_OneParam(FRetrieveFineTuningJobDelegate, const RetrieveFineTuningJobResponse&);
    
    FHttpRequestPtr CancelFineTuningJob(const CancelFineTuningJobRequest& Request, const FCancelFineTuningJobDelegate& Delegate = FCancelFineTuningJobDelegate()) const;
    FHttpRequestPtr CreateFineTuningJob(const CreateFineTuningJobRequest& Request, const FCreateFineTuningJobDelegate& Delegate = FCreateFineTuningJobDelegate()) const;
    FHttpRequestPtr ListFineTuningEvents(const ListFineTuningEventsRequest& Request, const FListFineTuningEventsDelegate& Delegate = FListFineTuningEventsDelegate()) const;
    FHttpRequestPtr ListFineTuningJobCheckpoints(const ListFineTuningJobCheckpointsRequest& Request, const FListFineTuningJobCheckpointsDelegate& Delegate = FListFineTuningJobCheckpointsDelegate()) const;
    FHttpRequestPtr ListPaginatedFineTuningJobs(const ListPaginatedFineTuningJobsRequest& Request, const FListPaginatedFineTuningJobsDelegate& Delegate = FListPaginatedFineTuningJobsDelegate()) const;
    FHttpRequestPtr RetrieveFineTuningJob(const RetrieveFineTuningJobRequest& Request, const FRetrieveFineTuningJobDelegate& Delegate = FRetrieveFineTuningJobDelegate()) const;
    
private:
    void OnCancelFineTuningJobResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCancelFineTuningJobDelegate Delegate) const;
    void OnCreateFineTuningJobResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateFineTuningJobDelegate Delegate) const;
    void OnListFineTuningEventsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListFineTuningEventsDelegate Delegate) const;
    void OnListFineTuningJobCheckpointsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListFineTuningJobCheckpointsDelegate Delegate) const;
    void OnListPaginatedFineTuningJobsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListPaginatedFineTuningJobsDelegate Delegate) const;
    void OnRetrieveFineTuningJobResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRetrieveFineTuningJobDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
