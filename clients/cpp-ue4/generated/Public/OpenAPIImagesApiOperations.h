/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIImagesApi.h"

#include "OpenAPIHelpers.h"
#include "OpenAPICreateImageEditRequestModel.h"
#include "OpenAPICreateImageRequest.h"
#include "OpenAPIImagesResponse.h"

namespace OpenAPI
{

/* Creates an image given a prompt.

*/
class OPENAPI_API OpenAPIImagesApi::CreateImageRequest : public Request
{
public:
    virtual ~CreateImageRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPICreateImageRequest OpenAPICreateImageRequest;
};

class OPENAPI_API OpenAPIImagesApi::CreateImageResponse : public Response
{
public:
    virtual ~CreateImageResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIImagesResponse Content;
};

/* Creates an edited or extended image given an original image and a prompt.

*/
class OPENAPI_API OpenAPIImagesApi::CreateImageEditRequest : public Request
{
public:
    virtual ~CreateImageEditRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask. */
	HttpFileInput Image;
	/* A text description of the desired image(s). The maximum length is 1000 characters. */
	FString Prompt;
	/* An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`. */
	TOptional<HttpFileInput> Mask;
	TOptional<OpenAPICreateImageEditRequestModel> Model;
	/* The number of images to generate. Must be between 1 and 10. */
	TOptional<int32> N;
	enum class SizeEnum
	{
		_256x256,
		_512x512,
		_1024x1024,
  	};

	static FString EnumToString(const SizeEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, SizeEnum& EnumValue);
	/* The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`. */
	TOptional<SizeEnum> Size;
	enum class ResponseFormatEnum
	{
		Url,
		B64Json,
  	};

	static FString EnumToString(const ResponseFormatEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, ResponseFormatEnum& EnumValue);
	/* The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. */
	TOptional<ResponseFormatEnum> ResponseFormat;
	/* A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */
	TOptional<FString> User;
};

class OPENAPI_API OpenAPIImagesApi::CreateImageEditResponse : public Response
{
public:
    virtual ~CreateImageEditResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIImagesResponse Content;
};

/* Creates a variation of a given image.

*/
class OPENAPI_API OpenAPIImagesApi::CreateImageVariationRequest : public Request
{
public:
    virtual ~CreateImageVariationRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square. */
	HttpFileInput Image;
	TOptional<OpenAPICreateImageEditRequestModel> Model;
	/* The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported. */
	TOptional<int32> N;
	enum class ResponseFormatEnum
	{
		Url,
		B64Json,
  	};

	static FString EnumToString(const ResponseFormatEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, ResponseFormatEnum& EnumValue);
	/* The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. */
	TOptional<ResponseFormatEnum> ResponseFormat;
	enum class SizeEnum
	{
		_256x256,
		_512x512,
		_1024x1024,
  	};

	static FString EnumToString(const SizeEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, SizeEnum& EnumValue);
	/* The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`. */
	TOptional<SizeEnum> Size;
	/* A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */
	TOptional<FString> User;
};

class OPENAPI_API OpenAPIImagesApi::CreateImageVariationResponse : public Response
{
public:
    virtual ~CreateImageVariationResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIImagesResponse Content;
};

}
