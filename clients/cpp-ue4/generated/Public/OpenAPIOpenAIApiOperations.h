/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIOpenAIApi.h"

#include "OpenAPIHelpers.h"
#include "OpenAPICreateChatCompletionRequest.h"
#include "OpenAPICreateChatCompletionResponse.h"
#include "OpenAPICreateCompletionRequest.h"
#include "OpenAPICreateCompletionResponse.h"
#include "OpenAPICreateEditRequest.h"
#include "OpenAPICreateEditResponse.h"
#include "OpenAPICreateEmbeddingRequest.h"
#include "OpenAPICreateEmbeddingResponse.h"
#include "OpenAPICreateFineTuneRequest.h"
#include "OpenAPICreateImageRequest.h"
#include "OpenAPICreateModerationRequest.h"
#include "OpenAPICreateModerationResponse.h"
#include "OpenAPICreateTranscriptionRequestModel.h"
#include "OpenAPICreateTranscriptionResponse.h"
#include "OpenAPICreateTranslationResponse.h"
#include "OpenAPIDeleteFileResponse.h"
#include "OpenAPIDeleteModelResponse.h"
#include "OpenAPIFineTune.h"
#include "OpenAPIImagesResponse.h"
#include "OpenAPIListFilesResponse.h"
#include "OpenAPIListFineTuneEventsResponse.h"
#include "OpenAPIListFineTunesResponse.h"
#include "OpenAPIListModelsResponse.h"
#include "OpenAPIModel.h"
#include "OpenAPIOpenAIFile.h"

namespace OpenAPI
{

/* Immediately cancel a fine-tune job. 

*/
class OPENAPI_API OpenAPIOpenAIApi::CancelFineTuneRequest : public Request
{
public:
    virtual ~CancelFineTuneRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The ID of the fine-tune job to cancel  */
	FString FineTuneId;
};

class OPENAPI_API OpenAPIOpenAIApi::CancelFineTuneResponse : public Response
{
public:
    virtual ~CancelFineTuneResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIFineTune Content;
};

/* Creates a model response for the given chat conversation.

*/
class OPENAPI_API OpenAPIOpenAIApi::CreateChatCompletionRequest : public Request
{
public:
    virtual ~CreateChatCompletionRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPICreateChatCompletionRequest OpenAPICreateChatCompletionRequest;
};

class OPENAPI_API OpenAPIOpenAIApi::CreateChatCompletionResponse : public Response
{
public:
    virtual ~CreateChatCompletionResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPICreateChatCompletionResponse Content;
};

/* Creates a completion for the provided prompt and parameters.

*/
class OPENAPI_API OpenAPIOpenAIApi::CreateCompletionRequest : public Request
{
public:
    virtual ~CreateCompletionRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPICreateCompletionRequest OpenAPICreateCompletionRequest;
};

class OPENAPI_API OpenAPIOpenAIApi::CreateCompletionResponse : public Response
{
public:
    virtual ~CreateCompletionResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPICreateCompletionResponse Content;
};

/* Creates a new edit for the provided input, instruction, and parameters.

*/
class OPENAPI_API OpenAPIOpenAIApi::CreateEditRequest : public Request
{
public:
    virtual ~CreateEditRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPICreateEditRequest OpenAPICreateEditRequest;
};

class OPENAPI_API OpenAPIOpenAIApi::CreateEditResponse : public Response
{
public:
    virtual ~CreateEditResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPICreateEditResponse Content;
};

/* Creates an embedding vector representing the input text.

*/
class OPENAPI_API OpenAPIOpenAIApi::CreateEmbeddingRequest : public Request
{
public:
    virtual ~CreateEmbeddingRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPICreateEmbeddingRequest OpenAPICreateEmbeddingRequest;
};

class OPENAPI_API OpenAPIOpenAIApi::CreateEmbeddingResponse : public Response
{
public:
    virtual ~CreateEmbeddingResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPICreateEmbeddingResponse Content;
};

/* Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. 

*/
class OPENAPI_API OpenAPIOpenAIApi::CreateFileRequest : public Request
{
public:
    virtual ~CreateFileRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the `purpose` is set to \\\"fine-tune\\\", each line is a JSON record with \\\"prompt\\\" and \\\"completion\\\" fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).  */
	HttpFileInput File;
	/* The intended purpose of the uploaded documents.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.  */
	FString Purpose;
};

class OPENAPI_API OpenAPIOpenAIApi::CreateFileResponse : public Response
{
public:
    virtual ~CreateFileResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIOpenAIFile Content;
};

/* Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 

*/
class OPENAPI_API OpenAPIOpenAIApi::CreateFineTuneRequest : public Request
{
public:
    virtual ~CreateFineTuneRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPICreateFineTuneRequest OpenAPICreateFineTuneRequest;
};

class OPENAPI_API OpenAPIOpenAIApi::CreateFineTuneResponse : public Response
{
public:
    virtual ~CreateFineTuneResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIFineTune Content;
};

/* Creates an image given a prompt.

*/
class OPENAPI_API OpenAPIOpenAIApi::CreateImageRequest : public Request
{
public:
    virtual ~CreateImageRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPICreateImageRequest OpenAPICreateImageRequest;
};

class OPENAPI_API OpenAPIOpenAIApi::CreateImageResponse : public Response
{
public:
    virtual ~CreateImageResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIImagesResponse Content;
};

/* Creates an edited or extended image given an original image and a prompt.

*/
class OPENAPI_API OpenAPIOpenAIApi::CreateImageEditRequest : public Request
{
public:
    virtual ~CreateImageEditRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask. */
	HttpFileInput Image;
	/* A text description of the desired image(s). The maximum length is 1000 characters. */
	FString Prompt;
	/* An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`. */
	TOptional<HttpFileInput> Mask;
	/* The number of images to generate. Must be between 1 and 10. */
	TOptional<int32> N;
	enum class SizeEnum
	{
		_256x256,
		_512x512,
		_1024x1024,
  	};

	static FString EnumToString(const SizeEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, SizeEnum& EnumValue);
	/* The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`. */
	TOptional<SizeEnum> Size;
	enum class ResponseFormatEnum
	{
		Url,
		B64Json,
  	};

	static FString EnumToString(const ResponseFormatEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, ResponseFormatEnum& EnumValue);
	/* The format in which the generated images are returned. Must be one of `url` or `b64_json`. */
	TOptional<ResponseFormatEnum> ResponseFormat;
	/* A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */
	TOptional<FString> User;
};

class OPENAPI_API OpenAPIOpenAIApi::CreateImageEditResponse : public Response
{
public:
    virtual ~CreateImageEditResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIImagesResponse Content;
};

/* Creates a variation of a given image.

*/
class OPENAPI_API OpenAPIOpenAIApi::CreateImageVariationRequest : public Request
{
public:
    virtual ~CreateImageVariationRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square. */
	HttpFileInput Image;
	/* The number of images to generate. Must be between 1 and 10. */
	TOptional<int32> N;
	enum class SizeEnum
	{
		_256x256,
		_512x512,
		_1024x1024,
  	};

	static FString EnumToString(const SizeEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, SizeEnum& EnumValue);
	/* The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`. */
	TOptional<SizeEnum> Size;
	enum class ResponseFormatEnum
	{
		Url,
		B64Json,
  	};

	static FString EnumToString(const ResponseFormatEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, ResponseFormatEnum& EnumValue);
	/* The format in which the generated images are returned. Must be one of `url` or `b64_json`. */
	TOptional<ResponseFormatEnum> ResponseFormat;
	/* A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */
	TOptional<FString> User;
};

class OPENAPI_API OpenAPIOpenAIApi::CreateImageVariationResponse : public Response
{
public:
    virtual ~CreateImageVariationResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIImagesResponse Content;
};

/* Classifies if text violates OpenAI&#39;s Content Policy

*/
class OPENAPI_API OpenAPIOpenAIApi::CreateModerationRequest : public Request
{
public:
    virtual ~CreateModerationRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPICreateModerationRequest OpenAPICreateModerationRequest;
};

class OPENAPI_API OpenAPIOpenAIApi::CreateModerationResponse : public Response
{
public:
    virtual ~CreateModerationResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPICreateModerationResponse Content;
};

/* Transcribes audio into the input language.

*/
class OPENAPI_API OpenAPIOpenAIApi::CreateTranscriptionRequest : public Request
{
public:
    virtual ~CreateTranscriptionRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.  */
	HttpFileInput File;
	OpenAPICreateTranscriptionRequestModel Model;
	/* An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.  */
	TOptional<FString> Prompt;
	/* The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.  */
	TOptional<FString> ResponseFormat;
	/* The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.  */
	TOptional<double> Temperature;
	/* The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.  */
	TOptional<FString> Language;
};

class OPENAPI_API OpenAPIOpenAIApi::CreateTranscriptionResponse : public Response
{
public:
    virtual ~CreateTranscriptionResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPICreateTranscriptionResponse Content;
};

/* Translates audio into English.

*/
class OPENAPI_API OpenAPIOpenAIApi::CreateTranslationRequest : public Request
{
public:
    virtual ~CreateTranslationRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.  */
	HttpFileInput File;
	OpenAPICreateTranscriptionRequestModel Model;
	/* An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.  */
	TOptional<FString> Prompt;
	/* The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.  */
	TOptional<FString> ResponseFormat;
	/* The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.  */
	TOptional<double> Temperature;
};

class OPENAPI_API OpenAPIOpenAIApi::CreateTranslationResponse : public Response
{
public:
    virtual ~CreateTranslationResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPICreateTranslationResponse Content;
};

/* Delete a file.

*/
class OPENAPI_API OpenAPIOpenAIApi::DeleteFileRequest : public Request
{
public:
    virtual ~DeleteFileRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The ID of the file to use for this request */
	FString FileId;
};

class OPENAPI_API OpenAPIOpenAIApi::DeleteFileResponse : public Response
{
public:
    virtual ~DeleteFileResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIDeleteFileResponse Content;
};

/* Delete a fine-tuned model. You must have the Owner role in your organization.

*/
class OPENAPI_API OpenAPIOpenAIApi::DeleteModelRequest : public Request
{
public:
    virtual ~DeleteModelRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The model to delete */
	FString Model;
};

class OPENAPI_API OpenAPIOpenAIApi::DeleteModelResponse : public Response
{
public:
    virtual ~DeleteModelResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIDeleteModelResponse Content;
};

/* Returns the contents of the specified file

*/
class OPENAPI_API OpenAPIOpenAIApi::DownloadFileRequest : public Request
{
public:
    virtual ~DownloadFileRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The ID of the file to use for this request */
	FString FileId;
};

class OPENAPI_API OpenAPIOpenAIApi::DownloadFileResponse : public Response
{
public:
    virtual ~DownloadFileResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    FString Content;
};

/* Returns a list of files that belong to the user&#39;s organization.

*/
class OPENAPI_API OpenAPIOpenAIApi::ListFilesRequest : public Request
{
public:
    virtual ~ListFilesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class OPENAPI_API OpenAPIOpenAIApi::ListFilesResponse : public Response
{
public:
    virtual ~ListFilesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIListFilesResponse Content;
};

/* Get fine-grained status updates for a fine-tune job. 

*/
class OPENAPI_API OpenAPIOpenAIApi::ListFineTuneEventsRequest : public Request
{
public:
    virtual ~ListFineTuneEventsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The ID of the fine-tune job to get events for.  */
	FString FineTuneId;
	/* Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a `data: [DONE]` message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.  */
	TOptional<bool> Stream;
};

class OPENAPI_API OpenAPIOpenAIApi::ListFineTuneEventsResponse : public Response
{
public:
    virtual ~ListFineTuneEventsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIListFineTuneEventsResponse Content;
};

/* List your organization&#39;s fine-tuning jobs 

*/
class OPENAPI_API OpenAPIOpenAIApi::ListFineTunesRequest : public Request
{
public:
    virtual ~ListFineTunesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class OPENAPI_API OpenAPIOpenAIApi::ListFineTunesResponse : public Response
{
public:
    virtual ~ListFineTunesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIListFineTunesResponse Content;
};

/* Lists the currently available models, and provides basic information about each one such as the owner and availability.

*/
class OPENAPI_API OpenAPIOpenAIApi::ListModelsRequest : public Request
{
public:
    virtual ~ListModelsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class OPENAPI_API OpenAPIOpenAIApi::ListModelsResponse : public Response
{
public:
    virtual ~ListModelsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIListModelsResponse Content;
};

/* Returns information about a specific file.

*/
class OPENAPI_API OpenAPIOpenAIApi::RetrieveFileRequest : public Request
{
public:
    virtual ~RetrieveFileRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The ID of the file to use for this request */
	FString FileId;
};

class OPENAPI_API OpenAPIOpenAIApi::RetrieveFileResponse : public Response
{
public:
    virtual ~RetrieveFileResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIOpenAIFile Content;
};

/* Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 

*/
class OPENAPI_API OpenAPIOpenAIApi::RetrieveFineTuneRequest : public Request
{
public:
    virtual ~RetrieveFineTuneRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The ID of the fine-tune job  */
	FString FineTuneId;
};

class OPENAPI_API OpenAPIOpenAIApi::RetrieveFineTuneResponse : public Response
{
public:
    virtual ~RetrieveFineTuneResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIFineTune Content;
};

/* Retrieves a model instance, providing basic information about the model such as the owner and permissioning.

*/
class OPENAPI_API OpenAPIOpenAIApi::RetrieveModelRequest : public Request
{
public:
    virtual ~RetrieveModelRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The ID of the model to use for this request */
	FString Model;
};

class OPENAPI_API OpenAPIOpenAIApi::RetrieveModelResponse : public Response
{
public:
    virtual ~RetrieveModelResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIModel Content;
};

}
