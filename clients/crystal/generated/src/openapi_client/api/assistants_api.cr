# #OpenAI API
#
##The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
#
#The version of the OpenAPI document: 2.0.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.4.0
#

require "uri"

module OpenAPIClient
  class AssistantsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancels a run that is `in_progress`.
    # @param thread_id [String] The ID of the thread to which this run belongs.
    # @param run_id [String] The ID of the run to cancel.
    # @return [RunObject]
    def cancel_run(thread_id : String, run_id : String)
      data, _status_code, _headers = cancel_run_with_http_info(thread_id, run_id)
      data
    end

    # Cancels a run that is &#x60;in_progress&#x60;.
    # @param thread_id [String] The ID of the thread to which this run belongs.
    # @param run_id [String] The ID of the run to cancel.
    # @return [Array<(RunObject, Integer, Hash)>] RunObject data, response status code and response headers
    def cancel_run_with_http_info(thread_id : String, run_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.cancel_run ..."}
      end
      # verify the required parameter "thread_id" is set
      if @api_client.config.client_side_validation && thread_id.nil?
        raise ArgumentError.new("Missing the required parameter 'thread_id' when calling AssistantsApi.cancel_run")
      end
      # verify the required parameter "run_id" is set
      if @api_client.config.client_side_validation && run_id.nil?
        raise ArgumentError.new("Missing the required parameter 'run_id' when calling AssistantsApi.cancel_run")
      end
      # resource path
      local_var_path = "/threads/{thread_id}/runs/{run_id}/cancel".sub("{" + "thread_id" + "}", URI.encode_path(thread_id.to_s)).sub("{" + "run_id" + "}", URI.encode_path(run_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "RunObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AssistantsApi.cancel_run",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#cancel_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return RunObject.from_json(data), status_code, headers
    end

    # Create an assistant with a model and instructions.
    # @param create_assistant_request [CreateAssistantRequest] 
    # @return [AssistantObject]
    def create_assistant(create_assistant_request : CreateAssistantRequest)
      data, _status_code, _headers = create_assistant_with_http_info(create_assistant_request)
      data
    end

    # Create an assistant with a model and instructions.
    # @param create_assistant_request [CreateAssistantRequest] 
    # @return [Array<(AssistantObject, Integer, Hash)>] AssistantObject data, response status code and response headers
    def create_assistant_with_http_info(create_assistant_request : CreateAssistantRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.create_assistant ..."}
      end
      # verify the required parameter "create_assistant_request" is set
      if @api_client.config.client_side_validation && create_assistant_request.nil?
        raise ArgumentError.new("Missing the required parameter 'create_assistant_request' when calling AssistantsApi.create_assistant")
      end
      # resource path
      local_var_path = "/assistants"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_assistant_request.to_json

      # return_type
      return_type = "AssistantObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AssistantsApi.create_assistant",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#create_assistant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AssistantObject.from_json(data), status_code, headers
    end

    # Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
    # @param assistant_id [String] The ID of the assistant for which to create a File. 
    # @param create_assistant_file_request [CreateAssistantFileRequest] 
    # @return [AssistantFileObject]
    def create_assistant_file(assistant_id : String, create_assistant_file_request : CreateAssistantFileRequest)
      data, _status_code, _headers = create_assistant_file_with_http_info(assistant_id, create_assistant_file_request)
      data
    end

    # Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
    # @param assistant_id [String] The ID of the assistant for which to create a File. 
    # @param create_assistant_file_request [CreateAssistantFileRequest] 
    # @return [Array<(AssistantFileObject, Integer, Hash)>] AssistantFileObject data, response status code and response headers
    def create_assistant_file_with_http_info(assistant_id : String, create_assistant_file_request : CreateAssistantFileRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.create_assistant_file ..."}
      end
      # verify the required parameter "assistant_id" is set
      if @api_client.config.client_side_validation && assistant_id.nil?
        raise ArgumentError.new("Missing the required parameter 'assistant_id' when calling AssistantsApi.create_assistant_file")
      end
      # verify the required parameter "create_assistant_file_request" is set
      if @api_client.config.client_side_validation && create_assistant_file_request.nil?
        raise ArgumentError.new("Missing the required parameter 'create_assistant_file_request' when calling AssistantsApi.create_assistant_file")
      end
      # resource path
      local_var_path = "/assistants/{assistant_id}/files".sub("{" + "assistant_id" + "}", URI.encode_path(assistant_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_assistant_file_request.to_json

      # return_type
      return_type = "AssistantFileObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AssistantsApi.create_assistant_file",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#create_assistant_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AssistantFileObject.from_json(data), status_code, headers
    end

    # Create a message.
    # @param thread_id [String] The ID of the [thread](/docs/api-reference/threads) to create a message for.
    # @param create_message_request [CreateMessageRequest] 
    # @return [MessageObject]
    def create_message(thread_id : String, create_message_request : CreateMessageRequest)
      data, _status_code, _headers = create_message_with_http_info(thread_id, create_message_request)
      data
    end

    # Create a message.
    # @param thread_id [String] The ID of the [thread](/docs/api-reference/threads) to create a message for.
    # @param create_message_request [CreateMessageRequest] 
    # @return [Array<(MessageObject, Integer, Hash)>] MessageObject data, response status code and response headers
    def create_message_with_http_info(thread_id : String, create_message_request : CreateMessageRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.create_message ..."}
      end
      # verify the required parameter "thread_id" is set
      if @api_client.config.client_side_validation && thread_id.nil?
        raise ArgumentError.new("Missing the required parameter 'thread_id' when calling AssistantsApi.create_message")
      end
      # verify the required parameter "create_message_request" is set
      if @api_client.config.client_side_validation && create_message_request.nil?
        raise ArgumentError.new("Missing the required parameter 'create_message_request' when calling AssistantsApi.create_message")
      end
      # resource path
      local_var_path = "/threads/{thread_id}/messages".sub("{" + "thread_id" + "}", URI.encode_path(thread_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_message_request.to_json

      # return_type
      return_type = "MessageObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AssistantsApi.create_message",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#create_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return MessageObject.from_json(data), status_code, headers
    end

    # Create a run.
    # @param thread_id [String] The ID of the thread to run.
    # @param create_run_request [CreateRunRequest] 
    # @return [RunObject]
    def create_run(thread_id : String, create_run_request : CreateRunRequest)
      data, _status_code, _headers = create_run_with_http_info(thread_id, create_run_request)
      data
    end

    # Create a run.
    # @param thread_id [String] The ID of the thread to run.
    # @param create_run_request [CreateRunRequest] 
    # @return [Array<(RunObject, Integer, Hash)>] RunObject data, response status code and response headers
    def create_run_with_http_info(thread_id : String, create_run_request : CreateRunRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.create_run ..."}
      end
      # verify the required parameter "thread_id" is set
      if @api_client.config.client_side_validation && thread_id.nil?
        raise ArgumentError.new("Missing the required parameter 'thread_id' when calling AssistantsApi.create_run")
      end
      # verify the required parameter "create_run_request" is set
      if @api_client.config.client_side_validation && create_run_request.nil?
        raise ArgumentError.new("Missing the required parameter 'create_run_request' when calling AssistantsApi.create_run")
      end
      # resource path
      local_var_path = "/threads/{thread_id}/runs".sub("{" + "thread_id" + "}", URI.encode_path(thread_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_run_request.to_json

      # return_type
      return_type = "RunObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AssistantsApi.create_run",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#create_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return RunObject.from_json(data), status_code, headers
    end

    # Create a thread.
    # @return [ThreadObject]
    def create_thread(create_thread_request : CreateThreadRequest?)
      data, _status_code, _headers = create_thread_with_http_info(create_thread_request)
      data
    end

    # Create a thread.
    # @return [Array<(ThreadObject, Integer, Hash)>] ThreadObject data, response status code and response headers
    def create_thread_with_http_info(create_thread_request : CreateThreadRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.create_thread ..."}
      end
      # resource path
      local_var_path = "/threads"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_thread_request.to_json

      # return_type
      return_type = "ThreadObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AssistantsApi.create_thread",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#create_thread\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ThreadObject.from_json(data), status_code, headers
    end

    # Create a thread and run it in one request.
    # @param create_thread_and_run_request [CreateThreadAndRunRequest] 
    # @return [RunObject]
    def create_thread_and_run(create_thread_and_run_request : CreateThreadAndRunRequest)
      data, _status_code, _headers = create_thread_and_run_with_http_info(create_thread_and_run_request)
      data
    end

    # Create a thread and run it in one request.
    # @param create_thread_and_run_request [CreateThreadAndRunRequest] 
    # @return [Array<(RunObject, Integer, Hash)>] RunObject data, response status code and response headers
    def create_thread_and_run_with_http_info(create_thread_and_run_request : CreateThreadAndRunRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.create_thread_and_run ..."}
      end
      # verify the required parameter "create_thread_and_run_request" is set
      if @api_client.config.client_side_validation && create_thread_and_run_request.nil?
        raise ArgumentError.new("Missing the required parameter 'create_thread_and_run_request' when calling AssistantsApi.create_thread_and_run")
      end
      # resource path
      local_var_path = "/threads/runs"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_thread_and_run_request.to_json

      # return_type
      return_type = "RunObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AssistantsApi.create_thread_and_run",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#create_thread_and_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return RunObject.from_json(data), status_code, headers
    end

    # Delete an assistant.
    # @param assistant_id [String] The ID of the assistant to delete.
    # @return [DeleteAssistantResponse]
    def delete_assistant(assistant_id : String)
      data, _status_code, _headers = delete_assistant_with_http_info(assistant_id)
      data
    end

    # Delete an assistant.
    # @param assistant_id [String] The ID of the assistant to delete.
    # @return [Array<(DeleteAssistantResponse, Integer, Hash)>] DeleteAssistantResponse data, response status code and response headers
    def delete_assistant_with_http_info(assistant_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.delete_assistant ..."}
      end
      # verify the required parameter "assistant_id" is set
      if @api_client.config.client_side_validation && assistant_id.nil?
        raise ArgumentError.new("Missing the required parameter 'assistant_id' when calling AssistantsApi.delete_assistant")
      end
      # resource path
      local_var_path = "/assistants/{assistant_id}".sub("{" + "assistant_id" + "}", URI.encode_path(assistant_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "DeleteAssistantResponse"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"AssistantsApi.delete_assistant",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#delete_assistant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeleteAssistantResponse.from_json(data), status_code, headers
    end

    # Delete an assistant file.
    # @param assistant_id [String] The ID of the assistant that the file belongs to.
    # @param file_id [String] The ID of the file to delete.
    # @return [DeleteAssistantFileResponse]
    def delete_assistant_file(assistant_id : String, file_id : String)
      data, _status_code, _headers = delete_assistant_file_with_http_info(assistant_id, file_id)
      data
    end

    # Delete an assistant file.
    # @param assistant_id [String] The ID of the assistant that the file belongs to.
    # @param file_id [String] The ID of the file to delete.
    # @return [Array<(DeleteAssistantFileResponse, Integer, Hash)>] DeleteAssistantFileResponse data, response status code and response headers
    def delete_assistant_file_with_http_info(assistant_id : String, file_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.delete_assistant_file ..."}
      end
      # verify the required parameter "assistant_id" is set
      if @api_client.config.client_side_validation && assistant_id.nil?
        raise ArgumentError.new("Missing the required parameter 'assistant_id' when calling AssistantsApi.delete_assistant_file")
      end
      # verify the required parameter "file_id" is set
      if @api_client.config.client_side_validation && file_id.nil?
        raise ArgumentError.new("Missing the required parameter 'file_id' when calling AssistantsApi.delete_assistant_file")
      end
      # resource path
      local_var_path = "/assistants/{assistant_id}/files/{file_id}".sub("{" + "assistant_id" + "}", URI.encode_path(assistant_id.to_s)).sub("{" + "file_id" + "}", URI.encode_path(file_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "DeleteAssistantFileResponse"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"AssistantsApi.delete_assistant_file",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#delete_assistant_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeleteAssistantFileResponse.from_json(data), status_code, headers
    end

    # Delete a thread.
    # @param thread_id [String] The ID of the thread to delete.
    # @return [DeleteThreadResponse]
    def delete_thread(thread_id : String)
      data, _status_code, _headers = delete_thread_with_http_info(thread_id)
      data
    end

    # Delete a thread.
    # @param thread_id [String] The ID of the thread to delete.
    # @return [Array<(DeleteThreadResponse, Integer, Hash)>] DeleteThreadResponse data, response status code and response headers
    def delete_thread_with_http_info(thread_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.delete_thread ..."}
      end
      # verify the required parameter "thread_id" is set
      if @api_client.config.client_side_validation && thread_id.nil?
        raise ArgumentError.new("Missing the required parameter 'thread_id' when calling AssistantsApi.delete_thread")
      end
      # resource path
      local_var_path = "/threads/{thread_id}".sub("{" + "thread_id" + "}", URI.encode_path(thread_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "DeleteThreadResponse"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"AssistantsApi.delete_thread",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#delete_thread\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeleteThreadResponse.from_json(data), status_code, headers
    end

    # Retrieves an assistant.
    # @param assistant_id [String] The ID of the assistant to retrieve.
    # @return [AssistantObject]
    def get_assistant(assistant_id : String)
      data, _status_code, _headers = get_assistant_with_http_info(assistant_id)
      data
    end

    # Retrieves an assistant.
    # @param assistant_id [String] The ID of the assistant to retrieve.
    # @return [Array<(AssistantObject, Integer, Hash)>] AssistantObject data, response status code and response headers
    def get_assistant_with_http_info(assistant_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.get_assistant ..."}
      end
      # verify the required parameter "assistant_id" is set
      if @api_client.config.client_side_validation && assistant_id.nil?
        raise ArgumentError.new("Missing the required parameter 'assistant_id' when calling AssistantsApi.get_assistant")
      end
      # resource path
      local_var_path = "/assistants/{assistant_id}".sub("{" + "assistant_id" + "}", URI.encode_path(assistant_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AssistantObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AssistantsApi.get_assistant",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#get_assistant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AssistantObject.from_json(data), status_code, headers
    end

    # Retrieves an AssistantFile.
    # @param assistant_id [String] The ID of the assistant who the file belongs to.
    # @param file_id [String] The ID of the file we&#39;re getting.
    # @return [AssistantFileObject]
    def get_assistant_file(assistant_id : String, file_id : String)
      data, _status_code, _headers = get_assistant_file_with_http_info(assistant_id, file_id)
      data
    end

    # Retrieves an AssistantFile.
    # @param assistant_id [String] The ID of the assistant who the file belongs to.
    # @param file_id [String] The ID of the file we&#39;re getting.
    # @return [Array<(AssistantFileObject, Integer, Hash)>] AssistantFileObject data, response status code and response headers
    def get_assistant_file_with_http_info(assistant_id : String, file_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.get_assistant_file ..."}
      end
      # verify the required parameter "assistant_id" is set
      if @api_client.config.client_side_validation && assistant_id.nil?
        raise ArgumentError.new("Missing the required parameter 'assistant_id' when calling AssistantsApi.get_assistant_file")
      end
      # verify the required parameter "file_id" is set
      if @api_client.config.client_side_validation && file_id.nil?
        raise ArgumentError.new("Missing the required parameter 'file_id' when calling AssistantsApi.get_assistant_file")
      end
      # resource path
      local_var_path = "/assistants/{assistant_id}/files/{file_id}".sub("{" + "assistant_id" + "}", URI.encode_path(assistant_id.to_s)).sub("{" + "file_id" + "}", URI.encode_path(file_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AssistantFileObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AssistantsApi.get_assistant_file",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#get_assistant_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AssistantFileObject.from_json(data), status_code, headers
    end

    # Retrieve a message.
    # @param thread_id [String] The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
    # @param message_id [String] The ID of the message to retrieve.
    # @return [MessageObject]
    def get_message(thread_id : String, message_id : String)
      data, _status_code, _headers = get_message_with_http_info(thread_id, message_id)
      data
    end

    # Retrieve a message.
    # @param thread_id [String] The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
    # @param message_id [String] The ID of the message to retrieve.
    # @return [Array<(MessageObject, Integer, Hash)>] MessageObject data, response status code and response headers
    def get_message_with_http_info(thread_id : String, message_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.get_message ..."}
      end
      # verify the required parameter "thread_id" is set
      if @api_client.config.client_side_validation && thread_id.nil?
        raise ArgumentError.new("Missing the required parameter 'thread_id' when calling AssistantsApi.get_message")
      end
      # verify the required parameter "message_id" is set
      if @api_client.config.client_side_validation && message_id.nil?
        raise ArgumentError.new("Missing the required parameter 'message_id' when calling AssistantsApi.get_message")
      end
      # resource path
      local_var_path = "/threads/{thread_id}/messages/{message_id}".sub("{" + "thread_id" + "}", URI.encode_path(thread_id.to_s)).sub("{" + "message_id" + "}", URI.encode_path(message_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "MessageObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AssistantsApi.get_message",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#get_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return MessageObject.from_json(data), status_code, headers
    end

    # Retrieves a message file.
    # @param thread_id [String] The ID of the thread to which the message and File belong.
    # @param message_id [String] The ID of the message the file belongs to.
    # @param file_id [String] The ID of the file being retrieved.
    # @return [MessageFileObject]
    def get_message_file(thread_id : String, message_id : String, file_id : String)
      data, _status_code, _headers = get_message_file_with_http_info(thread_id, message_id, file_id)
      data
    end

    # Retrieves a message file.
    # @param thread_id [String] The ID of the thread to which the message and File belong.
    # @param message_id [String] The ID of the message the file belongs to.
    # @param file_id [String] The ID of the file being retrieved.
    # @return [Array<(MessageFileObject, Integer, Hash)>] MessageFileObject data, response status code and response headers
    def get_message_file_with_http_info(thread_id : String, message_id : String, file_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.get_message_file ..."}
      end
      # verify the required parameter "thread_id" is set
      if @api_client.config.client_side_validation && thread_id.nil?
        raise ArgumentError.new("Missing the required parameter 'thread_id' when calling AssistantsApi.get_message_file")
      end
      # verify the required parameter "message_id" is set
      if @api_client.config.client_side_validation && message_id.nil?
        raise ArgumentError.new("Missing the required parameter 'message_id' when calling AssistantsApi.get_message_file")
      end
      # verify the required parameter "file_id" is set
      if @api_client.config.client_side_validation && file_id.nil?
        raise ArgumentError.new("Missing the required parameter 'file_id' when calling AssistantsApi.get_message_file")
      end
      # resource path
      local_var_path = "/threads/{thread_id}/messages/{message_id}/files/{file_id}".sub("{" + "thread_id" + "}", URI.encode_path(thread_id.to_s)).sub("{" + "message_id" + "}", URI.encode_path(message_id.to_s)).sub("{" + "file_id" + "}", URI.encode_path(file_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "MessageFileObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AssistantsApi.get_message_file",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#get_message_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return MessageFileObject.from_json(data), status_code, headers
    end

    # Retrieves a run.
    # @param thread_id [String] The ID of the [thread](/docs/api-reference/threads) that was run.
    # @param run_id [String] The ID of the run to retrieve.
    # @return [RunObject]
    def get_run(thread_id : String, run_id : String)
      data, _status_code, _headers = get_run_with_http_info(thread_id, run_id)
      data
    end

    # Retrieves a run.
    # @param thread_id [String] The ID of the [thread](/docs/api-reference/threads) that was run.
    # @param run_id [String] The ID of the run to retrieve.
    # @return [Array<(RunObject, Integer, Hash)>] RunObject data, response status code and response headers
    def get_run_with_http_info(thread_id : String, run_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.get_run ..."}
      end
      # verify the required parameter "thread_id" is set
      if @api_client.config.client_side_validation && thread_id.nil?
        raise ArgumentError.new("Missing the required parameter 'thread_id' when calling AssistantsApi.get_run")
      end
      # verify the required parameter "run_id" is set
      if @api_client.config.client_side_validation && run_id.nil?
        raise ArgumentError.new("Missing the required parameter 'run_id' when calling AssistantsApi.get_run")
      end
      # resource path
      local_var_path = "/threads/{thread_id}/runs/{run_id}".sub("{" + "thread_id" + "}", URI.encode_path(thread_id.to_s)).sub("{" + "run_id" + "}", URI.encode_path(run_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "RunObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AssistantsApi.get_run",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#get_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return RunObject.from_json(data), status_code, headers
    end

    # Retrieves a run step.
    # @param thread_id [String] The ID of the thread to which the run and run step belongs.
    # @param run_id [String] The ID of the run to which the run step belongs.
    # @param step_id [String] The ID of the run step to retrieve.
    # @return [RunStepObject]
    def get_run_step(thread_id : String, run_id : String, step_id : String)
      data, _status_code, _headers = get_run_step_with_http_info(thread_id, run_id, step_id)
      data
    end

    # Retrieves a run step.
    # @param thread_id [String] The ID of the thread to which the run and run step belongs.
    # @param run_id [String] The ID of the run to which the run step belongs.
    # @param step_id [String] The ID of the run step to retrieve.
    # @return [Array<(RunStepObject, Integer, Hash)>] RunStepObject data, response status code and response headers
    def get_run_step_with_http_info(thread_id : String, run_id : String, step_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.get_run_step ..."}
      end
      # verify the required parameter "thread_id" is set
      if @api_client.config.client_side_validation && thread_id.nil?
        raise ArgumentError.new("Missing the required parameter 'thread_id' when calling AssistantsApi.get_run_step")
      end
      # verify the required parameter "run_id" is set
      if @api_client.config.client_side_validation && run_id.nil?
        raise ArgumentError.new("Missing the required parameter 'run_id' when calling AssistantsApi.get_run_step")
      end
      # verify the required parameter "step_id" is set
      if @api_client.config.client_side_validation && step_id.nil?
        raise ArgumentError.new("Missing the required parameter 'step_id' when calling AssistantsApi.get_run_step")
      end
      # resource path
      local_var_path = "/threads/{thread_id}/runs/{run_id}/steps/{step_id}".sub("{" + "thread_id" + "}", URI.encode_path(thread_id.to_s)).sub("{" + "run_id" + "}", URI.encode_path(run_id.to_s)).sub("{" + "step_id" + "}", URI.encode_path(step_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "RunStepObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AssistantsApi.get_run_step",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#get_run_step\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return RunStepObject.from_json(data), status_code, headers
    end

    # Retrieves a thread.
    # @param thread_id [String] The ID of the thread to retrieve.
    # @return [ThreadObject]
    def get_thread(thread_id : String)
      data, _status_code, _headers = get_thread_with_http_info(thread_id)
      data
    end

    # Retrieves a thread.
    # @param thread_id [String] The ID of the thread to retrieve.
    # @return [Array<(ThreadObject, Integer, Hash)>] ThreadObject data, response status code and response headers
    def get_thread_with_http_info(thread_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.get_thread ..."}
      end
      # verify the required parameter "thread_id" is set
      if @api_client.config.client_side_validation && thread_id.nil?
        raise ArgumentError.new("Missing the required parameter 'thread_id' when calling AssistantsApi.get_thread")
      end
      # resource path
      local_var_path = "/threads/{thread_id}".sub("{" + "thread_id" + "}", URI.encode_path(thread_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ThreadObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AssistantsApi.get_thread",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#get_thread\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ThreadObject.from_json(data), status_code, headers
    end

    # Returns a list of assistant files.
    # @param assistant_id [String] The ID of the assistant the file belongs to.
    # @return [ListAssistantFilesResponse]
    def list_assistant_files(assistant_id : String, limit : Int32?, order : String?, after : String?, before : String?)
      data, _status_code, _headers = list_assistant_files_with_http_info(assistant_id, limit, order, after, before)
      data
    end

    # Returns a list of assistant files.
    # @param assistant_id [String] The ID of the assistant the file belongs to.
    # @return [Array<(ListAssistantFilesResponse, Integer, Hash)>] ListAssistantFilesResponse data, response status code and response headers
    def list_assistant_files_with_http_info(assistant_id : String, limit : Int32?, order : String?, after : String?, before : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.list_assistant_files ..."}
      end
      # verify the required parameter "assistant_id" is set
      if @api_client.config.client_side_validation && assistant_id.nil?
        raise ArgumentError.new("Missing the required parameter 'assistant_id' when calling AssistantsApi.list_assistant_files")
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && order && !allowable_values.includes?(order)
        raise ArgumentError.new("invalid value for \"order\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/assistants/{assistant_id}/files".sub("{" + "assistant_id" + "}", URI.encode_path(assistant_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["order"] = order.to_s unless order.nil?
      query_params["after"] = after.to_s unless after.nil?
      query_params["before"] = before.to_s unless before.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ListAssistantFilesResponse"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AssistantsApi.list_assistant_files",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#list_assistant_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ListAssistantFilesResponse.from_json(data), status_code, headers
    end

    # Returns a list of assistants.
    # @return [ListAssistantsResponse]
    def list_assistants(limit : Int32?, order : String?, after : String?, before : String?)
      data, _status_code, _headers = list_assistants_with_http_info(limit, order, after, before)
      data
    end

    # Returns a list of assistants.
    # @return [Array<(ListAssistantsResponse, Integer, Hash)>] ListAssistantsResponse data, response status code and response headers
    def list_assistants_with_http_info(limit : Int32?, order : String?, after : String?, before : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.list_assistants ..."}
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && order && !allowable_values.includes?(order)
        raise ArgumentError.new("invalid value for \"order\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/assistants"

      # query parameters
      query_params = Hash(String, String).new
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["order"] = order.to_s unless order.nil?
      query_params["after"] = after.to_s unless after.nil?
      query_params["before"] = before.to_s unless before.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ListAssistantsResponse"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AssistantsApi.list_assistants",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#list_assistants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ListAssistantsResponse.from_json(data), status_code, headers
    end

    # Returns a list of message files.
    # @param thread_id [String] The ID of the thread that the message and files belong to.
    # @param message_id [String] The ID of the message that the files belongs to.
    # @return [ListMessageFilesResponse]
    def list_message_files(thread_id : String, message_id : String, limit : Int32?, order : String?, after : String?, before : String?)
      data, _status_code, _headers = list_message_files_with_http_info(thread_id, message_id, limit, order, after, before)
      data
    end

    # Returns a list of message files.
    # @param thread_id [String] The ID of the thread that the message and files belong to.
    # @param message_id [String] The ID of the message that the files belongs to.
    # @return [Array<(ListMessageFilesResponse, Integer, Hash)>] ListMessageFilesResponse data, response status code and response headers
    def list_message_files_with_http_info(thread_id : String, message_id : String, limit : Int32?, order : String?, after : String?, before : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.list_message_files ..."}
      end
      # verify the required parameter "thread_id" is set
      if @api_client.config.client_side_validation && thread_id.nil?
        raise ArgumentError.new("Missing the required parameter 'thread_id' when calling AssistantsApi.list_message_files")
      end
      # verify the required parameter "message_id" is set
      if @api_client.config.client_side_validation && message_id.nil?
        raise ArgumentError.new("Missing the required parameter 'message_id' when calling AssistantsApi.list_message_files")
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && order && !allowable_values.includes?(order)
        raise ArgumentError.new("invalid value for \"order\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/threads/{thread_id}/messages/{message_id}/files".sub("{" + "thread_id" + "}", URI.encode_path(thread_id.to_s)).sub("{" + "message_id" + "}", URI.encode_path(message_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["order"] = order.to_s unless order.nil?
      query_params["after"] = after.to_s unless after.nil?
      query_params["before"] = before.to_s unless before.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ListMessageFilesResponse"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AssistantsApi.list_message_files",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#list_message_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ListMessageFilesResponse.from_json(data), status_code, headers
    end

    # Returns a list of messages for a given thread.
    # @param thread_id [String] The ID of the [thread](/docs/api-reference/threads) the messages belong to.
    # @return [ListMessagesResponse]
    def list_messages(thread_id : String, limit : Int32?, order : String?, after : String?, before : String?, run_id : String?)
      data, _status_code, _headers = list_messages_with_http_info(thread_id, limit, order, after, before, run_id)
      data
    end

    # Returns a list of messages for a given thread.
    # @param thread_id [String] The ID of the [thread](/docs/api-reference/threads) the messages belong to.
    # @return [Array<(ListMessagesResponse, Integer, Hash)>] ListMessagesResponse data, response status code and response headers
    def list_messages_with_http_info(thread_id : String, limit : Int32?, order : String?, after : String?, before : String?, run_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.list_messages ..."}
      end
      # verify the required parameter "thread_id" is set
      if @api_client.config.client_side_validation && thread_id.nil?
        raise ArgumentError.new("Missing the required parameter 'thread_id' when calling AssistantsApi.list_messages")
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && order && !allowable_values.includes?(order)
        raise ArgumentError.new("invalid value for \"order\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/threads/{thread_id}/messages".sub("{" + "thread_id" + "}", URI.encode_path(thread_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["order"] = order.to_s unless order.nil?
      query_params["after"] = after.to_s unless after.nil?
      query_params["before"] = before.to_s unless before.nil?
      query_params["run_id"] = run_id.to_s unless run_id.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ListMessagesResponse"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AssistantsApi.list_messages",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#list_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ListMessagesResponse.from_json(data), status_code, headers
    end

    # Returns a list of run steps belonging to a run.
    # @param thread_id [String] The ID of the thread the run and run steps belong to.
    # @param run_id [String] The ID of the run the run steps belong to.
    # @return [ListRunStepsResponse]
    def list_run_steps(thread_id : String, run_id : String, limit : Int32?, order : String?, after : String?, before : String?)
      data, _status_code, _headers = list_run_steps_with_http_info(thread_id, run_id, limit, order, after, before)
      data
    end

    # Returns a list of run steps belonging to a run.
    # @param thread_id [String] The ID of the thread the run and run steps belong to.
    # @param run_id [String] The ID of the run the run steps belong to.
    # @return [Array<(ListRunStepsResponse, Integer, Hash)>] ListRunStepsResponse data, response status code and response headers
    def list_run_steps_with_http_info(thread_id : String, run_id : String, limit : Int32?, order : String?, after : String?, before : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.list_run_steps ..."}
      end
      # verify the required parameter "thread_id" is set
      if @api_client.config.client_side_validation && thread_id.nil?
        raise ArgumentError.new("Missing the required parameter 'thread_id' when calling AssistantsApi.list_run_steps")
      end
      # verify the required parameter "run_id" is set
      if @api_client.config.client_side_validation && run_id.nil?
        raise ArgumentError.new("Missing the required parameter 'run_id' when calling AssistantsApi.list_run_steps")
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && order && !allowable_values.includes?(order)
        raise ArgumentError.new("invalid value for \"order\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/threads/{thread_id}/runs/{run_id}/steps".sub("{" + "thread_id" + "}", URI.encode_path(thread_id.to_s)).sub("{" + "run_id" + "}", URI.encode_path(run_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["order"] = order.to_s unless order.nil?
      query_params["after"] = after.to_s unless after.nil?
      query_params["before"] = before.to_s unless before.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ListRunStepsResponse"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AssistantsApi.list_run_steps",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#list_run_steps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ListRunStepsResponse.from_json(data), status_code, headers
    end

    # Returns a list of runs belonging to a thread.
    # @param thread_id [String] The ID of the thread the run belongs to.
    # @return [ListRunsResponse]
    def list_runs(thread_id : String, limit : Int32?, order : String?, after : String?, before : String?)
      data, _status_code, _headers = list_runs_with_http_info(thread_id, limit, order, after, before)
      data
    end

    # Returns a list of runs belonging to a thread.
    # @param thread_id [String] The ID of the thread the run belongs to.
    # @return [Array<(ListRunsResponse, Integer, Hash)>] ListRunsResponse data, response status code and response headers
    def list_runs_with_http_info(thread_id : String, limit : Int32?, order : String?, after : String?, before : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.list_runs ..."}
      end
      # verify the required parameter "thread_id" is set
      if @api_client.config.client_side_validation && thread_id.nil?
        raise ArgumentError.new("Missing the required parameter 'thread_id' when calling AssistantsApi.list_runs")
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && order && !allowable_values.includes?(order)
        raise ArgumentError.new("invalid value for \"order\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/threads/{thread_id}/runs".sub("{" + "thread_id" + "}", URI.encode_path(thread_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["order"] = order.to_s unless order.nil?
      query_params["after"] = after.to_s unless after.nil?
      query_params["before"] = before.to_s unless before.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ListRunsResponse"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AssistantsApi.list_runs",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#list_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ListRunsResponse.from_json(data), status_code, headers
    end

    # Modifies an assistant.
    # @param assistant_id [String] The ID of the assistant to modify.
    # @param modify_assistant_request [ModifyAssistantRequest] 
    # @return [AssistantObject]
    def modify_assistant(assistant_id : String, modify_assistant_request : ModifyAssistantRequest)
      data, _status_code, _headers = modify_assistant_with_http_info(assistant_id, modify_assistant_request)
      data
    end

    # Modifies an assistant.
    # @param assistant_id [String] The ID of the assistant to modify.
    # @param modify_assistant_request [ModifyAssistantRequest] 
    # @return [Array<(AssistantObject, Integer, Hash)>] AssistantObject data, response status code and response headers
    def modify_assistant_with_http_info(assistant_id : String, modify_assistant_request : ModifyAssistantRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.modify_assistant ..."}
      end
      # verify the required parameter "assistant_id" is set
      if @api_client.config.client_side_validation && assistant_id.nil?
        raise ArgumentError.new("Missing the required parameter 'assistant_id' when calling AssistantsApi.modify_assistant")
      end
      # verify the required parameter "modify_assistant_request" is set
      if @api_client.config.client_side_validation && modify_assistant_request.nil?
        raise ArgumentError.new("Missing the required parameter 'modify_assistant_request' when calling AssistantsApi.modify_assistant")
      end
      # resource path
      local_var_path = "/assistants/{assistant_id}".sub("{" + "assistant_id" + "}", URI.encode_path(assistant_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = modify_assistant_request.to_json

      # return_type
      return_type = "AssistantObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AssistantsApi.modify_assistant",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#modify_assistant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AssistantObject.from_json(data), status_code, headers
    end

    # Modifies a message.
    # @param thread_id [String] The ID of the thread to which this message belongs.
    # @param message_id [String] The ID of the message to modify.
    # @param modify_message_request [ModifyMessageRequest] 
    # @return [MessageObject]
    def modify_message(thread_id : String, message_id : String, modify_message_request : ModifyMessageRequest)
      data, _status_code, _headers = modify_message_with_http_info(thread_id, message_id, modify_message_request)
      data
    end

    # Modifies a message.
    # @param thread_id [String] The ID of the thread to which this message belongs.
    # @param message_id [String] The ID of the message to modify.
    # @param modify_message_request [ModifyMessageRequest] 
    # @return [Array<(MessageObject, Integer, Hash)>] MessageObject data, response status code and response headers
    def modify_message_with_http_info(thread_id : String, message_id : String, modify_message_request : ModifyMessageRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.modify_message ..."}
      end
      # verify the required parameter "thread_id" is set
      if @api_client.config.client_side_validation && thread_id.nil?
        raise ArgumentError.new("Missing the required parameter 'thread_id' when calling AssistantsApi.modify_message")
      end
      # verify the required parameter "message_id" is set
      if @api_client.config.client_side_validation && message_id.nil?
        raise ArgumentError.new("Missing the required parameter 'message_id' when calling AssistantsApi.modify_message")
      end
      # verify the required parameter "modify_message_request" is set
      if @api_client.config.client_side_validation && modify_message_request.nil?
        raise ArgumentError.new("Missing the required parameter 'modify_message_request' when calling AssistantsApi.modify_message")
      end
      # resource path
      local_var_path = "/threads/{thread_id}/messages/{message_id}".sub("{" + "thread_id" + "}", URI.encode_path(thread_id.to_s)).sub("{" + "message_id" + "}", URI.encode_path(message_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = modify_message_request.to_json

      # return_type
      return_type = "MessageObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AssistantsApi.modify_message",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#modify_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return MessageObject.from_json(data), status_code, headers
    end

    # Modifies a run.
    # @param thread_id [String] The ID of the [thread](/docs/api-reference/threads) that was run.
    # @param run_id [String] The ID of the run to modify.
    # @param modify_run_request [ModifyRunRequest] 
    # @return [RunObject]
    def modify_run(thread_id : String, run_id : String, modify_run_request : ModifyRunRequest)
      data, _status_code, _headers = modify_run_with_http_info(thread_id, run_id, modify_run_request)
      data
    end

    # Modifies a run.
    # @param thread_id [String] The ID of the [thread](/docs/api-reference/threads) that was run.
    # @param run_id [String] The ID of the run to modify.
    # @param modify_run_request [ModifyRunRequest] 
    # @return [Array<(RunObject, Integer, Hash)>] RunObject data, response status code and response headers
    def modify_run_with_http_info(thread_id : String, run_id : String, modify_run_request : ModifyRunRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.modify_run ..."}
      end
      # verify the required parameter "thread_id" is set
      if @api_client.config.client_side_validation && thread_id.nil?
        raise ArgumentError.new("Missing the required parameter 'thread_id' when calling AssistantsApi.modify_run")
      end
      # verify the required parameter "run_id" is set
      if @api_client.config.client_side_validation && run_id.nil?
        raise ArgumentError.new("Missing the required parameter 'run_id' when calling AssistantsApi.modify_run")
      end
      # verify the required parameter "modify_run_request" is set
      if @api_client.config.client_side_validation && modify_run_request.nil?
        raise ArgumentError.new("Missing the required parameter 'modify_run_request' when calling AssistantsApi.modify_run")
      end
      # resource path
      local_var_path = "/threads/{thread_id}/runs/{run_id}".sub("{" + "thread_id" + "}", URI.encode_path(thread_id.to_s)).sub("{" + "run_id" + "}", URI.encode_path(run_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = modify_run_request.to_json

      # return_type
      return_type = "RunObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AssistantsApi.modify_run",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#modify_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return RunObject.from_json(data), status_code, headers
    end

    # Modifies a thread.
    # @param thread_id [String] The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.
    # @param modify_thread_request [ModifyThreadRequest] 
    # @return [ThreadObject]
    def modify_thread(thread_id : String, modify_thread_request : ModifyThreadRequest)
      data, _status_code, _headers = modify_thread_with_http_info(thread_id, modify_thread_request)
      data
    end

    # Modifies a thread.
    # @param thread_id [String] The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.
    # @param modify_thread_request [ModifyThreadRequest] 
    # @return [Array<(ThreadObject, Integer, Hash)>] ThreadObject data, response status code and response headers
    def modify_thread_with_http_info(thread_id : String, modify_thread_request : ModifyThreadRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.modify_thread ..."}
      end
      # verify the required parameter "thread_id" is set
      if @api_client.config.client_side_validation && thread_id.nil?
        raise ArgumentError.new("Missing the required parameter 'thread_id' when calling AssistantsApi.modify_thread")
      end
      # verify the required parameter "modify_thread_request" is set
      if @api_client.config.client_side_validation && modify_thread_request.nil?
        raise ArgumentError.new("Missing the required parameter 'modify_thread_request' when calling AssistantsApi.modify_thread")
      end
      # resource path
      local_var_path = "/threads/{thread_id}".sub("{" + "thread_id" + "}", URI.encode_path(thread_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = modify_thread_request.to_json

      # return_type
      return_type = "ThreadObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AssistantsApi.modify_thread",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#modify_thread\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ThreadObject.from_json(data), status_code, headers
    end

    # When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request. 
    # @param thread_id [String] The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
    # @param run_id [String] The ID of the run that requires the tool output submission.
    # @param submit_tool_outputs_run_request [SubmitToolOutputsRunRequest] 
    # @return [RunObject]
    def submit_tool_ouputs_to_run(thread_id : String, run_id : String, submit_tool_outputs_run_request : SubmitToolOutputsRunRequest)
      data, _status_code, _headers = submit_tool_ouputs_to_run_with_http_info(thread_id, run_id, submit_tool_outputs_run_request)
      data
    end

    # When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
    # @param thread_id [String] The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
    # @param run_id [String] The ID of the run that requires the tool output submission.
    # @param submit_tool_outputs_run_request [SubmitToolOutputsRunRequest] 
    # @return [Array<(RunObject, Integer, Hash)>] RunObject data, response status code and response headers
    def submit_tool_ouputs_to_run_with_http_info(thread_id : String, run_id : String, submit_tool_outputs_run_request : SubmitToolOutputsRunRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AssistantsApi.submit_tool_ouputs_to_run ..."}
      end
      # verify the required parameter "thread_id" is set
      if @api_client.config.client_side_validation && thread_id.nil?
        raise ArgumentError.new("Missing the required parameter 'thread_id' when calling AssistantsApi.submit_tool_ouputs_to_run")
      end
      # verify the required parameter "run_id" is set
      if @api_client.config.client_side_validation && run_id.nil?
        raise ArgumentError.new("Missing the required parameter 'run_id' when calling AssistantsApi.submit_tool_ouputs_to_run")
      end
      # verify the required parameter "submit_tool_outputs_run_request" is set
      if @api_client.config.client_side_validation && submit_tool_outputs_run_request.nil?
        raise ArgumentError.new("Missing the required parameter 'submit_tool_outputs_run_request' when calling AssistantsApi.submit_tool_ouputs_to_run")
      end
      # resource path
      local_var_path = "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs".sub("{" + "thread_id" + "}", URI.encode_path(thread_id.to_s)).sub("{" + "run_id" + "}", URI.encode_path(run_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = submit_tool_outputs_run_request.to_json

      # return_type
      return_type = "RunObject"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AssistantsApi.submit_tool_ouputs_to_run",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AssistantsApi#submit_tool_ouputs_to_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return RunObject.from_json(data), status_code, headers
    end
  end
end
