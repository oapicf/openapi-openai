# #OpenAI API
#
##The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
#
#The version of the OpenAPI document: 2.0.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "uri"

module OpenAPIClient
  class AudioApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Generates audio from the input text.
    # @param create_speech_request [CreateSpeechRequest] 
    # @return [::File]
    def create_speech(create_speech_request : CreateSpeechRequest)
      data, _status_code, _headers = create_speech_with_http_info(create_speech_request)
      data
    end

    # Generates audio from the input text.
    # @param create_speech_request [CreateSpeechRequest] 
    # @return [Array<(::File, Integer, Hash)>] ::File data, response status code and response headers
    def create_speech_with_http_info(create_speech_request : CreateSpeechRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AudioApi.create_speech ..."}
      end
      # verify the required parameter "create_speech_request" is set
      if @api_client.config.client_side_validation && create_speech_request.nil?
        raise ArgumentError.new("Missing the required parameter 'create_speech_request' when calling AudioApi.create_speech")
      end
      # resource path
      local_var_path = "/audio/speech"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/octet-stream"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_speech_request.to_json

      # return_type
      return_type = "::File"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AudioApi.create_speech",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AudioApi#create_speech\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ::File.from_json(data), status_code, headers
    end

    # Transcribes audio into the input language.
    # @param file [::File] The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
    # @param model [CreateTranscriptionRequestModel] 
    # @return [CreateTranscription200Response]
    def create_transcription(file : ::File, model : CreateTranscriptionRequestModel, language : String?, prompt : String?, response_format : String?, temperature : Float64?, timestamp_granularities : Array(String)?)
      data, _status_code, _headers = create_transcription_with_http_info(file, model, language, prompt, response_format, temperature, timestamp_granularities)
      data
    end

    # Transcribes audio into the input language.
    # @param file [::File] The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
    # @param model [CreateTranscriptionRequestModel] 
    # @return [Array<(CreateTranscription200Response, Integer, Hash)>] CreateTranscription200Response data, response status code and response headers
    def create_transcription_with_http_info(file : ::File, model : CreateTranscriptionRequestModel, language : String?, prompt : String?, response_format : String?, temperature : Float64?, timestamp_granularities : Array(String)?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AudioApi.create_transcription ..."}
      end
      # verify the required parameter "file" is set
      if @api_client.config.client_side_validation && file.nil?
        raise ArgumentError.new("Missing the required parameter 'file' when calling AudioApi.create_transcription")
      end
      # verify the required parameter "model" is set
      if @api_client.config.client_side_validation && model.nil?
        raise ArgumentError.new("Missing the required parameter 'model' when calling AudioApi.create_transcription")
      end
      allowable_values = ["json", "text", "srt", "verbose_json", "vtt"]
      if @api_client.config.client_side_validation && response_format && !allowable_values.includes?(response_format)
        raise ArgumentError.new("invalid value for \"response_format\", must be one of #{allowable_values}")
      end
      allowable_values = ["word", "segment"]
      if @api_client.config.client_side_validation && timestamp_granularities && timestamp_granularities.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"timestamp_granularities\", must include one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/audio/transcriptions"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["multipart/form-data"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new
      form_params[:"file"] = file unless file.nil?
      form_params[:"model"] = model unless model.nil?
      form_params[:"language"] = language unless language.nil?
      form_params[:"prompt"] = prompt unless prompt.nil?
      form_params[:"response_format"] = response_format unless response_format.nil?
      form_params[:"temperature"] = temperature unless temperature.nil?
      form_params[:"timestamp_granularities[]"] = @api_client.build_collection_param(timestamp_granularities, :csv)

      # http body (model)
      post_body = nil

      # return_type
      return_type = "CreateTranscription200Response"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AudioApi.create_transcription",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AudioApi#create_transcription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CreateTranscription200Response.from_json(data), status_code, headers
    end

    # Translates audio into English.
    # @param file [::File] The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
    # @param model [CreateTranscriptionRequestModel] 
    # @return [CreateTranslation200Response]
    def create_translation(file : ::File, model : CreateTranscriptionRequestModel, prompt : String?, response_format : String?, temperature : Float64?)
      data, _status_code, _headers = create_translation_with_http_info(file, model, prompt, response_format, temperature)
      data
    end

    # Translates audio into English.
    # @param file [::File] The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
    # @param model [CreateTranscriptionRequestModel] 
    # @return [Array<(CreateTranslation200Response, Integer, Hash)>] CreateTranslation200Response data, response status code and response headers
    def create_translation_with_http_info(file : ::File, model : CreateTranscriptionRequestModel, prompt : String?, response_format : String?, temperature : Float64?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AudioApi.create_translation ..."}
      end
      # verify the required parameter "file" is set
      if @api_client.config.client_side_validation && file.nil?
        raise ArgumentError.new("Missing the required parameter 'file' when calling AudioApi.create_translation")
      end
      # verify the required parameter "model" is set
      if @api_client.config.client_side_validation && model.nil?
        raise ArgumentError.new("Missing the required parameter 'model' when calling AudioApi.create_translation")
      end
      # resource path
      local_var_path = "/audio/translations"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["multipart/form-data"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new
      form_params[:"file"] = file unless file.nil?
      form_params[:"model"] = model unless model.nil?
      form_params[:"prompt"] = prompt unless prompt.nil?
      form_params[:"response_format"] = response_format unless response_format.nil?
      form_params[:"temperature"] = temperature unless temperature.nil?

      # http body (model)
      post_body = nil

      # return_type
      return_type = "CreateTranslation200Response"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AudioApi.create_translation",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AudioApi#create_translation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CreateTranslation200Response.from_json(data), status_code, headers
    end
  end
end
