# #OpenAI API
#
##The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
#
#The version of the OpenAPI document: 2.0.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.4.0
#

require "uri"

module OpenAPIClient
  class ChatApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a model response for the given chat conversation.
    # @param create_chat_completion_request [CreateChatCompletionRequest] 
    # @return [CreateChatCompletionResponse]
    def create_chat_completion(create_chat_completion_request : CreateChatCompletionRequest)
      data, _status_code, _headers = create_chat_completion_with_http_info(create_chat_completion_request)
      data
    end

    # Creates a model response for the given chat conversation.
    # @param create_chat_completion_request [CreateChatCompletionRequest] 
    # @return [Array<(CreateChatCompletionResponse, Integer, Hash)>] CreateChatCompletionResponse data, response status code and response headers
    def create_chat_completion_with_http_info(create_chat_completion_request : CreateChatCompletionRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: ChatApi.create_chat_completion ..."}
      end
      # verify the required parameter "create_chat_completion_request" is set
      if @api_client.config.client_side_validation && create_chat_completion_request.nil?
        raise ArgumentError.new("Missing the required parameter 'create_chat_completion_request' when calling ChatApi.create_chat_completion")
      end
      # resource path
      local_var_path = "/chat/completions"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_chat_completion_request.to_json

      # return_type
      return_type = "CreateChatCompletionResponse"

      # auth_names
      auth_names = ["ApiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ChatApi.create_chat_completion",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ChatApi#create_chat_completion\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CreateChatCompletionResponse.from_json(data), status_code, headers
    end
  end
end
