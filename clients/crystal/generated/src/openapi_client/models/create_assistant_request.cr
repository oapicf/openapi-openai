# #OpenAI API
#
##The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
#
#The version of the OpenAPI document: 2.0.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  class CreateAssistantRequest
    include JSON::Serializable

    # Required properties
    @[JSON::Field(key: "model", type: CreateAssistantRequestModel, nillable: false, emit_null: false)]
    property model : CreateAssistantRequestModel

    # Optional properties
    # The name of the assistant. The maximum length is 256 characters. 
    @[JSON::Field(key: "name", type: String?, nillable: true, emit_null: false)]
    property name : String?

    # The description of the assistant. The maximum length is 512 characters. 
    @[JSON::Field(key: "description", type: String?, nillable: true, emit_null: false)]
    property description : String?

    # The system instructions that the assistant uses. The maximum length is 256,000 characters. 
    @[JSON::Field(key: "instructions", type: String?, nillable: true, emit_null: false)]
    property instructions : String?

    # A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`. 
    @[JSON::Field(key: "tools", type: Array(AssistantObjectToolsInner)?, nillable: true, emit_null: false)]
    property tools : Array(AssistantObjectToolsInner)?

    # A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. 
    @[JSON::Field(key: "file_ids", type: Array(String)?, nillable: true, emit_null: false)]
    property file_ids : Array(String)?

    # Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    @[JSON::Field(key: "metadata", type: Object?, nillable: true, emit_null: false)]
    property metadata : Object?

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@model : CreateAssistantRequestModel, @name : String?, @description : String?, @instructions : String?, @tools : Array(AssistantObjectToolsInner)?, @file_ids : Array(String)?, @metadata : Object?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@name.nil? && @name.to_s.size > 256
        invalid_properties.push("invalid value for \"name\", the character length must be smaller than or equal to 256.")
      end

      if !@description.nil? && @description.to_s.size > 512
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 512.")
      end

      if !@instructions.nil? && @instructions.to_s.size > 256000
        invalid_properties.push("invalid value for \"instructions\", the character length must be smaller than or equal to 256000.")
      end

      if !@tools.nil? && @tools.size > 128
        invalid_properties.push("invalid value for \"tools\", number of items must be less than or equal to 128."
      end

      if !@file_ids.nil? && @file_ids.size > 20
        invalid_properties.push("invalid value for \"file_ids\", number of items must be less than or equal to 20."
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@name.nil? && @name.to_s.size > 256
      return false if !@description.nil? && @description.to_s.size > 512
      return false if !@instructions.nil? && @instructions.to_s.size > 256000
      return false if !@tools.nil? && @tools.size > 128
      return false if !@file_ids.nil? && @file_ids.size > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.size > 256
        raise ArgumentError.new("invalid value for \"name\", the character length must be smaller than or equal to 256.")
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.size > 512
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 512.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] instructions Value to be assigned
    def instructions=(instructions)
      if !instructions.nil? && instructions.to_s.size > 256000
        raise ArgumentError.new("invalid value for \"instructions\", the character length must be smaller than or equal to 256000.")
      end

      @instructions = instructions
    end

    # Custom attribute writer method with validation
    # @param [Object] tools Value to be assigned
    def tools=(tools)
      if !tools.nil? && tools.size > 128
        raise ArgumentError.new("invalid value for \"tools\", number of items must be less than or equal to 128.")
      end

      @tools = tools
    end

    # Custom attribute writer method with validation
    # @param [Object] file_ids Value to be assigned
    def file_ids=(file_ids)
      if !file_ids.nil? && file_ids.size > 20
        raise ArgumentError.new("invalid value for \"file_ids\", number of items must be less than or equal to 20.")
      end

      @file_ids = file_ids
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          model == o.model &&
          name == o.name &&
          description == o.description &&
          instructions == o.instructions &&
          tools == o.tools &&
          file_ids == o.file_ids &&
          metadata == o.metadata
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [model, name, description, instructions, tools, file_ids, metadata].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
