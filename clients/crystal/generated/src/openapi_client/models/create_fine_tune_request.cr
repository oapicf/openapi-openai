# #OpenAI API
#
##APIs for sampling from and fine-tuning language models
#
#The version of the OpenAPI document: 2.0.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.4.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  class CreateFineTuneRequest
    include JSON::Serializable

    # Required properties
    # The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file, where each training example is a JSON object with the keys \"prompt\" and \"completion\". Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. 
    @[JSON::Field(key: "training_file", type: String, nillable: false, emit_null: false)]
    property training_file : String

    # Optional properties
    # The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model). Your train and validation data should be mutually exclusive.  Your dataset must be formatted as a JSONL file, where each validation example is a JSON object with the keys \"prompt\" and \"completion\". Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. 
    @[JSON::Field(key: "validation_file", type: String?, nillable: true, emit_null: false)]
    property validation_file : String?

    @[JSON::Field(key: "model", type: CreateFineTuneRequestModel?, nillable: true, emit_null: false)]
    property model : CreateFineTuneRequestModel?

    # The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. 
    @[JSON::Field(key: "n_epochs", type: Int32?, default: 4, nillable: true, emit_null: false)]
    property n_epochs : Int32?

    # The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass.  By default, the batch size will be dynamically configured to be ~0.2% of the number of examples in the training set, capped at 256 - in general, we've found that larger batch sizes tend to work better for larger datasets. 
    @[JSON::Field(key: "batch_size", type: Int32?, nillable: true, emit_null: false)]
    property batch_size : Int32?

    # The learning rate multiplier to use for training. The fine-tuning learning rate is the original learning rate used for pretraining multiplied by this value.  By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on final `batch_size` (larger learning rates tend to perform better with larger batch sizes). We recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best results. 
    @[JSON::Field(key: "learning_rate_multiplier", type: Float64?, nillable: true, emit_null: false)]
    property learning_rate_multiplier : Float64?

    # The weight to use for loss on the prompt tokens. This controls how much the model tries to learn to generate the prompt (as compared to the completion which always has a weight of 1.0), and can add a stabilizing effect to training when completions are short.  If prompts are extremely long (relative to completions), it may make sense to reduce this weight so as to avoid over-prioritizing learning the prompt. 
    @[JSON::Field(key: "prompt_loss_weight", type: Float64?, default: 0.01, nillable: true, emit_null: false)]
    property prompt_loss_weight : Float64?

    # If set, we calculate classification-specific metrics such as accuracy and F-1 score using the validation set at the end of every epoch. These metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).  In order to compute classification metrics, you must provide a `validation_file`. Additionally, you must specify `classification_n_classes` for multiclass classification or `classification_positive_class` for binary classification. 
    @[JSON::Field(key: "compute_classification_metrics", type: Bool?, default: false, nillable: true, emit_null: false)]
    property compute_classification_metrics : Bool?

    # The number of classes in a classification task.  This parameter is required for multiclass classification. 
    @[JSON::Field(key: "classification_n_classes", type: Int32?, nillable: true, emit_null: false)]
    property classification_n_classes : Int32?

    # The positive class in binary classification.  This parameter is needed to generate precision, recall, and F1 metrics when doing binary classification. 
    @[JSON::Field(key: "classification_positive_class", type: String?, nillable: true, emit_null: false)]
    property classification_positive_class : String?

    # If this is provided, we calculate F-beta scores at the specified beta values. The F-beta score is a generalization of F-1 score. This is only used for binary classification.  With a beta of 1 (i.e. the F-1 score), precision and recall are given the same weight. A larger beta score puts more weight on recall and less on precision. A smaller beta score puts more weight on precision and less on recall. 
    @[JSON::Field(key: "classification_betas", type: Array(Float64)?, nillable: true, emit_null: false)]
    property classification_betas : Array(Float64)?

    # A string of up to 40 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`. 
    @[JSON::Field(key: "suffix", type: String?, nillable: true, emit_null: false)]
    property suffix : String?

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@training_file : String, @validation_file : String?, @model : CreateFineTuneRequestModel?, @n_epochs : Int32?, @batch_size : Int32?, @learning_rate_multiplier : Float64?, @prompt_loss_weight : Float64?, @compute_classification_metrics : Bool?, @classification_n_classes : Int32?, @classification_positive_class : String?, @classification_betas : Array(Float64)?, @suffix : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@suffix.nil? && @suffix.to_s.size > 40
        invalid_properties.push("invalid value for \"suffix\", the character length must be smaller than or equal to 40.")
      end

      if !@suffix.nil? && @suffix.to_s.size < 1
        invalid_properties.push("invalid value for \"suffix\", the character length must be great than or equal to 1.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@suffix.nil? && @suffix.to_s.size > 40
      return false if !@suffix.nil? && @suffix.to_s.size < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] suffix Value to be assigned
    def suffix=(suffix)
      if !suffix.nil? && suffix.to_s.size > 40
        raise ArgumentError.new("invalid value for \"suffix\", the character length must be smaller than or equal to 40.")
      end

      if !suffix.nil? && suffix.to_s.size < 1
        raise ArgumentError.new("invalid value for \"suffix\", the character length must be great than or equal to 1.")
      end

      @suffix = suffix
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          training_file == o.training_file &&
          validation_file == o.validation_file &&
          model == o.model &&
          n_epochs == o.n_epochs &&
          batch_size == o.batch_size &&
          learning_rate_multiplier == o.learning_rate_multiplier &&
          prompt_loss_weight == o.prompt_loss_weight &&
          compute_classification_metrics == o.compute_classification_metrics &&
          classification_n_classes == o.classification_n_classes &&
          classification_positive_class == o.classification_positive_class &&
          classification_betas == o.classification_betas &&
          suffix == o.suffix
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [training_file, validation_file, model, n_epochs, batch_size, learning_rate_multiplier, prompt_loss_weight, compute_classification_metrics, classification_n_classes, classification_positive_class, classification_betas, suffix].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
