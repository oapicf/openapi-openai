# #OpenAI API
#
##The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
#
#The version of the OpenAPI document: 2.0.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.4.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  class CreateFineTuningJobRequest
    include JSON::Serializable

    # Required properties
    @[JSON::Field(key: "model", type: CreateFineTuningJobRequestModel, nillable: false, emit_null: false)]
    property model : CreateFineTuningJobRequestModel

    # The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
    @[JSON::Field(key: "training_file", type: String, nillable: false, emit_null: false)]
    property training_file : String

    # Optional properties
    @[JSON::Field(key: "hyperparameters", type: CreateFineTuningJobRequestHyperparameters?, nillable: true, emit_null: false)]
    property hyperparameters : CreateFineTuningJobRequestHyperparameters?

    # A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`. 
    @[JSON::Field(key: "suffix", type: String?, nillable: true, emit_null: false)]
    property suffix : String?

    # The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
    @[JSON::Field(key: "validation_file", type: String?, nillable: true, emit_null: false)]
    property validation_file : String?

    # A list of integrations to enable for your fine-tuning job.
    @[JSON::Field(key: "integrations", type: Array(CreateFineTuningJobRequestIntegrationsInner)?, nillable: true, emit_null: false)]
    property integrations : Array(CreateFineTuningJobRequestIntegrationsInner)?

    # The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases. If a seed is not specified, one will be generated for you. 
    @[JSON::Field(key: "seed", type: Int32?, nillable: true, emit_null: false)]
    property seed : Int32?

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@model : CreateFineTuningJobRequestModel, @training_file : String, @hyperparameters : CreateFineTuningJobRequestHyperparameters?, @suffix : String?, @validation_file : String?, @integrations : Array(CreateFineTuningJobRequestIntegrationsInner)?, @seed : Int32?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@suffix.nil? && @suffix.to_s.size > 40
        invalid_properties.push("invalid value for \"suffix\", the character length must be smaller than or equal to 40.")
      end

      if !@suffix.nil? && @suffix.to_s.size < 1
        invalid_properties.push("invalid value for \"suffix\", the character length must be great than or equal to 1.")
      end

      if !@seed.nil? && @seed > 2147483647
        invalid_properties.push("invalid value for \"seed\", must be smaller than or equal to 2147483647.")
      end

      if !@seed.nil? && @seed < 0
        invalid_properties.push("invalid value for \"seed\", must be greater than or equal to 0.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@suffix.nil? && @suffix.to_s.size > 40
      return false if !@suffix.nil? && @suffix.to_s.size < 1
      return false if !@seed.nil? && @seed > 2147483647
      return false if !@seed.nil? && @seed < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] suffix Value to be assigned
    def suffix=(suffix)
      if !suffix.nil? && suffix.to_s.size > 40
        raise ArgumentError.new("invalid value for \"suffix\", the character length must be smaller than or equal to 40.")
      end

      if !suffix.nil? && suffix.to_s.size < 1
        raise ArgumentError.new("invalid value for \"suffix\", the character length must be great than or equal to 1.")
      end

      @suffix = suffix
    end

    # Custom attribute writer method with validation
    # @param [Object] seed Value to be assigned
    def seed=(seed)
      if !seed.nil? && seed > 2147483647
        raise ArgumentError.new("invalid value for \"seed\", must be smaller than or equal to 2147483647.")
      end

      if !seed.nil? && seed < 0
        raise ArgumentError.new("invalid value for \"seed\", must be greater than or equal to 0.")
      end

      @seed = seed
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          model == o.model &&
          training_file == o.training_file &&
          hyperparameters == o.hyperparameters &&
          suffix == o.suffix &&
          validation_file == o.validation_file &&
          integrations == o.integrations &&
          seed == o.seed
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [model, training_file, hyperparameters, suffix, validation_file, integrations, seed].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
