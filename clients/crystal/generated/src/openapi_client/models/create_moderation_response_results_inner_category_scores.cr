# #OpenAI API
#
##The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
#
#The version of the OpenAPI document: 2.0.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.4.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  # A list of the categories along with their scores as predicted by model.
  class CreateModerationResponseResultsInnerCategoryScores
    include JSON::Serializable

    # Required properties
    # The score for the category 'hate'.
    @[JSON::Field(key: "hate", type: Float64, nillable: false, emit_null: false)]
    property hate : Float64

    # The score for the category 'hate/threatening'.
    @[JSON::Field(key: "hate/threatening", type: Float64, nillable: false, emit_null: false)]
    property hate_threatening : Float64

    # The score for the category 'harassment'.
    @[JSON::Field(key: "harassment", type: Float64, nillable: false, emit_null: false)]
    property harassment : Float64

    # The score for the category 'harassment/threatening'.
    @[JSON::Field(key: "harassment/threatening", type: Float64, nillable: false, emit_null: false)]
    property harassment_threatening : Float64

    # The score for the category 'self-harm'.
    @[JSON::Field(key: "self-harm", type: Float64, nillable: false, emit_null: false)]
    property self_harm : Float64

    # The score for the category 'self-harm/intent'.
    @[JSON::Field(key: "self-harm/intent", type: Float64, nillable: false, emit_null: false)]
    property self_harm_intent : Float64

    # The score for the category 'self-harm/instructions'.
    @[JSON::Field(key: "self-harm/instructions", type: Float64, nillable: false, emit_null: false)]
    property self_harm_instructions : Float64

    # The score for the category 'sexual'.
    @[JSON::Field(key: "sexual", type: Float64, nillable: false, emit_null: false)]
    property sexual : Float64

    # The score for the category 'sexual/minors'.
    @[JSON::Field(key: "sexual/minors", type: Float64, nillable: false, emit_null: false)]
    property sexual_minors : Float64

    # The score for the category 'violence'.
    @[JSON::Field(key: "violence", type: Float64, nillable: false, emit_null: false)]
    property violence : Float64

    # The score for the category 'violence/graphic'.
    @[JSON::Field(key: "violence/graphic", type: Float64, nillable: false, emit_null: false)]
    property violence_graphic : Float64

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@hate : Float64, @hate_threatening : Float64, @harassment : Float64, @harassment_threatening : Float64, @self_harm : Float64, @self_harm_intent : Float64, @self_harm_instructions : Float64, @sexual : Float64, @sexual_minors : Float64, @violence : Float64, @violence_graphic : Float64)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          hate == o.hate &&
          hate_threatening == o.hate_threatening &&
          harassment == o.harassment &&
          harassment_threatening == o.harassment_threatening &&
          self_harm == o.self_harm &&
          self_harm_intent == o.self_harm_intent &&
          self_harm_instructions == o.self_harm_instructions &&
          sexual == o.sexual &&
          sexual_minors == o.sexual_minors &&
          violence == o.violence &&
          violence_graphic == o.violence_graphic
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [hate, hate_threatening, harassment, harassment_threatening, self_harm, self_harm_intent, self_harm_instructions, sexual, sexual_minors, violence, violence_graphic].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
