# #OpenAI API
#
##The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
#
#The version of the OpenAPI document: 2.0.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.4.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  class CreateRunRequest
    include JSON::Serializable

    # Required properties
    # The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
    @[JSON::Field(key: "assistant_id", type: String, nillable: false, emit_null: false)]
    property assistant_id : String

    # Optional properties
    @[JSON::Field(key: "model", type: CreateRunRequestModel?, nillable: true, emit_null: false)]
    property model : CreateRunRequestModel?

    # Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
    @[JSON::Field(key: "instructions", type: String?, nillable: true, emit_null: false)]
    property instructions : String?

    # Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
    @[JSON::Field(key: "additional_instructions", type: String?, nillable: true, emit_null: false)]
    property additional_instructions : String?

    # Adds additional messages to the thread before creating the run.
    @[JSON::Field(key: "additional_messages", type: Array(CreateMessageRequest)?, nillable: true, emit_null: false)]
    property additional_messages : Array(CreateMessageRequest)?

    # Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
    @[JSON::Field(key: "tools", type: Array(AssistantObjectToolsInner)?, nillable: true, emit_null: false)]
    property tools : Array(AssistantObjectToolsInner)?

    # Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    @[JSON::Field(key: "metadata", type: Object?, nillable: true, emit_null: false)]
    property metadata : Object?

    # What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. 
    @[JSON::Field(key: "temperature", type: Float64?, default: 1, nillable: true, emit_null: false)]
    property temperature : Float64?

    # If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message. 
    @[JSON::Field(key: "stream", type: Bool?, nillable: true, emit_null: false)]
    property stream : Bool?

    # The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `complete`. See `incomplete_details` for more info. 
    @[JSON::Field(key: "max_prompt_tokens", type: Int32?, nillable: true, emit_null: false)]
    property max_prompt_tokens : Int32?

    # The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `complete`. See `incomplete_details` for more info. 
    @[JSON::Field(key: "max_completion_tokens", type: Int32?, nillable: true, emit_null: false)]
    property max_completion_tokens : Int32?

    @[JSON::Field(key: "truncation_strategy", type: TruncationObject?, nillable: true, emit_null: false)]
    property truncation_strategy : TruncationObject?

    @[JSON::Field(key: "tool_choice", type: AssistantsApiToolChoiceOption?, nillable: true, emit_null: false)]
    property tool_choice : AssistantsApiToolChoiceOption?

    @[JSON::Field(key: "response_format", type: AssistantsApiResponseFormatOption?, nillable: true, emit_null: false)]
    property response_format : AssistantsApiResponseFormatOption?

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@assistant_id : String, @model : CreateRunRequestModel?, @instructions : String?, @additional_instructions : String?, @additional_messages : Array(CreateMessageRequest)?, @tools : Array(AssistantObjectToolsInner)?, @metadata : Object?, @temperature : Float64?, @stream : Bool?, @max_prompt_tokens : Int32?, @max_completion_tokens : Int32?, @truncation_strategy : TruncationObject?, @tool_choice : AssistantsApiToolChoiceOption?, @response_format : AssistantsApiResponseFormatOption?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@tools.nil? && @tools.size > 20
        invalid_properties.push("invalid value for \"tools\", number of items must be less than or equal to 20."
      end

      if !@temperature.nil? && @temperature > 2
        invalid_properties.push("invalid value for \"temperature\", must be smaller than or equal to 2.")
      end

      if !@temperature.nil? && @temperature < 0
        invalid_properties.push("invalid value for \"temperature\", must be greater than or equal to 0.")
      end

      if !@max_prompt_tokens.nil? && @max_prompt_tokens < 256
        invalid_properties.push("invalid value for \"max_prompt_tokens\", must be greater than or equal to 256.")
      end

      if !@max_completion_tokens.nil? && @max_completion_tokens < 256
        invalid_properties.push("invalid value for \"max_completion_tokens\", must be greater than or equal to 256.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@tools.nil? && @tools.size > 20
      return false if !@temperature.nil? && @temperature > 2
      return false if !@temperature.nil? && @temperature < 0
      return false if !@max_prompt_tokens.nil? && @max_prompt_tokens < 256
      return false if !@max_completion_tokens.nil? && @max_completion_tokens < 256
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] tools Value to be assigned
    def tools=(tools)
      if !tools.nil? && tools.size > 20
        raise ArgumentError.new("invalid value for \"tools\", number of items must be less than or equal to 20.")
      end

      @tools = tools
    end

    # Custom attribute writer method with validation
    # @param [Object] temperature Value to be assigned
    def temperature=(temperature)
      if !temperature.nil? && temperature > 2
        raise ArgumentError.new("invalid value for \"temperature\", must be smaller than or equal to 2.")
      end

      if !temperature.nil? && temperature < 0
        raise ArgumentError.new("invalid value for \"temperature\", must be greater than or equal to 0.")
      end

      @temperature = temperature
    end

    # Custom attribute writer method with validation
    # @param [Object] max_prompt_tokens Value to be assigned
    def max_prompt_tokens=(max_prompt_tokens)
      if !max_prompt_tokens.nil? && max_prompt_tokens < 256
        raise ArgumentError.new("invalid value for \"max_prompt_tokens\", must be greater than or equal to 256.")
      end

      @max_prompt_tokens = max_prompt_tokens
    end

    # Custom attribute writer method with validation
    # @param [Object] max_completion_tokens Value to be assigned
    def max_completion_tokens=(max_completion_tokens)
      if !max_completion_tokens.nil? && max_completion_tokens < 256
        raise ArgumentError.new("invalid value for \"max_completion_tokens\", must be greater than or equal to 256.")
      end

      @max_completion_tokens = max_completion_tokens
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          assistant_id == o.assistant_id &&
          model == o.model &&
          instructions == o.instructions &&
          additional_instructions == o.additional_instructions &&
          additional_messages == o.additional_messages &&
          tools == o.tools &&
          metadata == o.metadata &&
          temperature == o.temperature &&
          stream == o.stream &&
          max_prompt_tokens == o.max_prompt_tokens &&
          max_completion_tokens == o.max_completion_tokens &&
          truncation_strategy == o.truncation_strategy &&
          tool_choice == o.tool_choice &&
          response_format == o.response_format
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [assistant_id, model, instructions, additional_instructions, additional_messages, tools, metadata, temperature, stream, max_prompt_tokens, max_completion_tokens, truncation_strategy, tool_choice, response_format].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
