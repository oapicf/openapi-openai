# #OpenAI API
#
##The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
#
#The version of the OpenAPI document: 2.0.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.4.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  # The `fine_tuning.job` object represents a fine-tuning job that has been created through the API. 
  class FineTuningJob
    include JSON::Serializable

    # Required properties
    # The object identifier, which can be referenced in the API endpoints.
    @[JSON::Field(key: "id", type: String, nillable: false, emit_null: false)]
    property id : String

    # The Unix timestamp (in seconds) for when the fine-tuning job was created.
    @[JSON::Field(key: "created_at", type: Int32, nillable: false, emit_null: false)]
    property created_at : Int32

    @[JSON::Field(key: "error", type: FineTuningJobError, nillable: false, emit_null: false)]
    property error : FineTuningJobError

    # The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
    @[JSON::Field(key: "fine_tuned_model", type: String, nillable: false, emit_null: false)]
    property fine_tuned_model : String

    # The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
    @[JSON::Field(key: "finished_at", type: Int32, nillable: false, emit_null: false)]
    property finished_at : Int32

    @[JSON::Field(key: "hyperparameters", type: FineTuningJobHyperparameters, nillable: false, emit_null: false)]
    property hyperparameters : FineTuningJobHyperparameters

    # The base model that is being fine-tuned.
    @[JSON::Field(key: "model", type: String, nillable: false, emit_null: false)]
    property model : String

    # The object type, which is always \"fine_tuning.job\".
    @[JSON::Field(key: "object", type: String, nillable: false, emit_null: false)]
    property object : String

    # The organization that owns the fine-tuning job.
    @[JSON::Field(key: "organization_id", type: String, nillable: false, emit_null: false)]
    property organization_id : String

    # The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
    @[JSON::Field(key: "result_files", type: Array(String), nillable: false, emit_null: false)]
    property result_files : Array(String)

    # The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
    @[JSON::Field(key: "status", type: String, nillable: false, emit_null: false)]
    property status : String

    # The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
    @[JSON::Field(key: "trained_tokens", type: Int32, nillable: false, emit_null: false)]
    property trained_tokens : Int32

    # The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
    @[JSON::Field(key: "training_file", type: String, nillable: false, emit_null: false)]
    property training_file : String

    # The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
    @[JSON::Field(key: "validation_file", type: String, nillable: false, emit_null: false)]
    property validation_file : String

    # The seed used for the fine-tuning job.
    @[JSON::Field(key: "seed", type: Int32, nillable: false, emit_null: false)]
    property seed : Int32

    # Optional properties
    # A list of integrations to enable for this fine-tuning job.
    @[JSON::Field(key: "integrations", type: Array(FineTuningJobIntegrationsInner)?, nillable: true, emit_null: false)]
    property integrations : Array(FineTuningJobIntegrationsInner)?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@id : String, @created_at : Int32, @error : FineTuningJobError, @fine_tuned_model : String, @finished_at : Int32, @hyperparameters : FineTuningJobHyperparameters, @model : String, @object : String, @organization_id : String, @result_files : Array(String), @status : String, @trained_tokens : Int32, @training_file : String, @validation_file : String, @seed : Int32, @integrations : Array(FineTuningJobIntegrationsInner)?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@integrations.nil? && @integrations.size > 5
        invalid_properties.push("invalid value for \"integrations\", number of items must be less than or equal to 5."
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      object_validator = EnumAttributeValidator.new("String", ["fine_tuning.job"])
      return false unless object_validator.valid?(@object)
      status_validator = EnumAttributeValidator.new("String", ["validating_files", "queued", "running", "succeeded", "failed", "cancelled"])
      return false unless status_validator.valid?(@status)
      return false if !@integrations.nil? && @integrations.size > 5
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["fine_tuning.job"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new("String", ["validating_files", "queued", "running", "succeeded", "failed", "cancelled"])
      unless validator.valid?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{validator.allowable_values}.")
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] integrations Value to be assigned
    def integrations=(integrations)
      if !integrations.nil? && integrations.size > 5
        raise ArgumentError.new("invalid value for \"integrations\", number of items must be less than or equal to 5.")
      end

      @integrations = integrations
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          id == o.id &&
          created_at == o.created_at &&
          error == o.error &&
          fine_tuned_model == o.fine_tuned_model &&
          finished_at == o.finished_at &&
          hyperparameters == o.hyperparameters &&
          model == o.model &&
          object == o.object &&
          organization_id == o.organization_id &&
          result_files == o.result_files &&
          status == o.status &&
          trained_tokens == o.trained_tokens &&
          training_file == o.training_file &&
          validation_file == o.validation_file &&
          integrations == o.integrations &&
          seed == o.seed
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, created_at, error, fine_tuned_model, finished_at, hyperparameters, model, object, organization_id, result_files, status, trained_tokens, training_file, validation_file, integrations, seed].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
