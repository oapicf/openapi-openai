# #OpenAI API
#
##The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
#
#The version of the OpenAPI document: 2.0.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  # Represents a message within a [thread](/docs/api-reference/threads).
  class MessageObject
    include JSON::Serializable

    # Required properties
    # The identifier, which can be referenced in API endpoints.
    @[JSON::Field(key: "id", type: String, nillable: false, emit_null: false)]
    property id : String

    # The object type, which is always `thread.message`.
    @[JSON::Field(key: "object", type: String, nillable: false, emit_null: false)]
    property object : String

    # The Unix timestamp (in seconds) for when the message was created.
    @[JSON::Field(key: "created_at", type: Int32, nillable: false, emit_null: false)]
    property created_at : Int32

    # The [thread](/docs/api-reference/threads) ID that this message belongs to.
    @[JSON::Field(key: "thread_id", type: String, nillable: false, emit_null: false)]
    property thread_id : String

    # The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
    @[JSON::Field(key: "status", type: String, nillable: false, emit_null: false)]
    property status : String

    @[JSON::Field(key: "incomplete_details", type: MessageObjectIncompleteDetails, nillable: false, emit_null: false)]
    property incomplete_details : MessageObjectIncompleteDetails

    # The Unix timestamp (in seconds) for when the message was completed.
    @[JSON::Field(key: "completed_at", type: Int32, nillable: false, emit_null: false)]
    property completed_at : Int32

    # The Unix timestamp (in seconds) for when the message was marked as incomplete.
    @[JSON::Field(key: "incomplete_at", type: Int32, nillable: false, emit_null: false)]
    property incomplete_at : Int32

    # The entity that produced the message. One of `user` or `assistant`.
    @[JSON::Field(key: "role", type: String, nillable: false, emit_null: false)]
    property role : String

    # The content of the message in array of text and/or images.
    @[JSON::Field(key: "content", type: Array(MessageObjectContentInner), nillable: false, emit_null: false)]
    property content : Array(MessageObjectContentInner)

    # If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
    @[JSON::Field(key: "assistant_id", type: String, nillable: false, emit_null: false)]
    property assistant_id : String

    # The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
    @[JSON::Field(key: "run_id", type: String, nillable: false, emit_null: false)]
    property run_id : String

    # A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
    @[JSON::Field(key: "file_ids", type: Array(String), nillable: false, emit_null: false)]
    property file_ids : Array(String)

    # Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    @[JSON::Field(key: "metadata", type: Object, nillable: false, emit_null: false)]
    property metadata : Object

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@id : String, @object : String, @created_at : Int32, @thread_id : String, @status : String, @incomplete_details : MessageObjectIncompleteDetails, @completed_at : Int32, @incomplete_at : Int32, @role : String, @content : Array(MessageObjectContentInner), @assistant_id : String, @run_id : String, @file_ids : Array(String), @metadata : Object)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if @file_ids.size > 10
        invalid_properties.push("invalid value for \"file_ids\", number of items must be less than or equal to 10."
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      object_validator = EnumAttributeValidator.new("String", ["thread.message"])
      return false unless object_validator.valid?(@object)
      status_validator = EnumAttributeValidator.new("String", ["in_progress", "incomplete", "completed"])
      return false unless status_validator.valid?(@status)
      role_validator = EnumAttributeValidator.new("String", ["user", "assistant"])
      return false unless role_validator.valid?(@role)
      return false if @file_ids.size > 10
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["thread.message"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new("String", ["in_progress", "incomplete", "completed"])
      unless validator.valid?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{validator.allowable_values}.")
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] role Object to be assigned
    def role=(role)
      validator = EnumAttributeValidator.new("String", ["user", "assistant"])
      unless validator.valid?(role)
        raise ArgumentError.new("invalid value for \"role\", must be one of #{validator.allowable_values}.")
      end
      @role = role
    end

    # Custom attribute writer method with validation
    # @param [Object] file_ids Value to be assigned
    def file_ids=(file_ids)
      if file_ids.size > 10
        raise ArgumentError.new("invalid value for \"file_ids\", number of items must be less than or equal to 10.")
      end

      @file_ids = file_ids
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          id == o.id &&
          object == o.object &&
          created_at == o.created_at &&
          thread_id == o.thread_id &&
          status == o.status &&
          incomplete_details == o.incomplete_details &&
          completed_at == o.completed_at &&
          incomplete_at == o.incomplete_at &&
          role == o.role &&
          content == o.content &&
          assistant_id == o.assistant_id &&
          run_id == o.run_id &&
          file_ids == o.file_ids &&
          metadata == o.metadata
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, object, created_at, thread_id, status, incomplete_details, completed_at, incomplete_at, role, content, assistant_id, run_id, file_ids, metadata].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
