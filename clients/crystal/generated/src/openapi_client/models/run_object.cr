# #OpenAI API
#
##The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
#
#The version of the OpenAPI document: 2.0.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  # Represents an execution run on a [thread](/docs/api-reference/threads).
  class RunObject
    include JSON::Serializable

    # Required properties
    # The identifier, which can be referenced in API endpoints.
    @[JSON::Field(key: "id", type: String, nillable: false, emit_null: false)]
    property id : String

    # The object type, which is always `thread.run`.
    @[JSON::Field(key: "object", type: String, nillable: false, emit_null: false)]
    property object : String

    # The Unix timestamp (in seconds) for when the run was created.
    @[JSON::Field(key: "created_at", type: Int32, nillable: false, emit_null: false)]
    property created_at : Int32

    # The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
    @[JSON::Field(key: "thread_id", type: String, nillable: false, emit_null: false)]
    property thread_id : String

    # The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
    @[JSON::Field(key: "assistant_id", type: String, nillable: false, emit_null: false)]
    property assistant_id : String

    # The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
    @[JSON::Field(key: "status", type: String, nillable: false, emit_null: false)]
    property status : String

    @[JSON::Field(key: "required_action", type: RunObjectRequiredAction, nillable: false, emit_null: false)]
    property required_action : RunObjectRequiredAction

    @[JSON::Field(key: "last_error", type: RunObjectLastError, nillable: false, emit_null: false)]
    property last_error : RunObjectLastError

    # The Unix timestamp (in seconds) for when the run will expire.
    @[JSON::Field(key: "expires_at", type: Int32, nillable: false, emit_null: false)]
    property expires_at : Int32

    # The Unix timestamp (in seconds) for when the run was started.
    @[JSON::Field(key: "started_at", type: Int32, nillable: false, emit_null: false)]
    property started_at : Int32

    # The Unix timestamp (in seconds) for when the run was cancelled.
    @[JSON::Field(key: "cancelled_at", type: Int32, nillable: false, emit_null: false)]
    property cancelled_at : Int32

    # The Unix timestamp (in seconds) for when the run failed.
    @[JSON::Field(key: "failed_at", type: Int32, nillable: false, emit_null: false)]
    property failed_at : Int32

    # The Unix timestamp (in seconds) for when the run was completed.
    @[JSON::Field(key: "completed_at", type: Int32, nillable: false, emit_null: false)]
    property completed_at : Int32

    @[JSON::Field(key: "incomplete_details", type: RunObjectIncompleteDetails, nillable: false, emit_null: false)]
    property incomplete_details : RunObjectIncompleteDetails

    # The model that the [assistant](/docs/api-reference/assistants) used for this run.
    @[JSON::Field(key: "model", type: String, nillable: false, emit_null: false)]
    property model : String

    # The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
    @[JSON::Field(key: "instructions", type: String, nillable: false, emit_null: false)]
    property instructions : String

    # The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
    @[JSON::Field(key: "tools", type: Array(AssistantObjectToolsInner), nillable: false, emit_null: false)]
    property tools : Array(AssistantObjectToolsInner)

    # The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
    @[JSON::Field(key: "file_ids", type: Array(String), nillable: false, emit_null: false)]
    property file_ids : Array(String)

    # Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    @[JSON::Field(key: "metadata", type: Object, nillable: false, emit_null: false)]
    property metadata : Object

    @[JSON::Field(key: "usage", type: RunCompletionUsage, nillable: false, emit_null: false)]
    property usage : RunCompletionUsage

    # The maximum number of prompt tokens specified to have been used over the course of the run. 
    @[JSON::Field(key: "max_prompt_tokens", type: Int32, nillable: false, emit_null: false)]
    property max_prompt_tokens : Int32

    # The maximum number of completion tokens specified to have been used over the course of the run. 
    @[JSON::Field(key: "max_completion_tokens", type: Int32, nillable: false, emit_null: false)]
    property max_completion_tokens : Int32

    @[JSON::Field(key: "truncation_strategy", type: TruncationObject, nillable: false, emit_null: false)]
    property truncation_strategy : TruncationObject

    @[JSON::Field(key: "tool_choice", type: AssistantsApiToolChoiceOption, nillable: false, emit_null: false)]
    property tool_choice : AssistantsApiToolChoiceOption

    @[JSON::Field(key: "response_format", type: AssistantsApiResponseFormatOption, nillable: false, emit_null: false)]
    property response_format : AssistantsApiResponseFormatOption

    # Optional properties
    # The sampling temperature used for this run. If not set, defaults to 1.
    @[JSON::Field(key: "temperature", type: Float64?, nillable: true, emit_null: false)]
    property temperature : Float64?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@id : String, @object : String, @created_at : Int32, @thread_id : String, @assistant_id : String, @status : String, @required_action : RunObjectRequiredAction, @last_error : RunObjectLastError, @expires_at : Int32, @started_at : Int32, @cancelled_at : Int32, @failed_at : Int32, @completed_at : Int32, @incomplete_details : RunObjectIncompleteDetails, @model : String, @instructions : String, @tools : Array(AssistantObjectToolsInner), @file_ids : Array(String), @metadata : Object, @usage : RunCompletionUsage, @max_prompt_tokens : Int32, @max_completion_tokens : Int32, @truncation_strategy : TruncationObject, @tool_choice : AssistantsApiToolChoiceOption, @response_format : AssistantsApiResponseFormatOption, @temperature : Float64?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if @tools.size > 20
        invalid_properties.push("invalid value for \"tools\", number of items must be less than or equal to 20."
      end

      if @max_prompt_tokens < 256
        invalid_properties.push("invalid value for \"max_prompt_tokens\", must be greater than or equal to 256.")
      end

      if @max_completion_tokens < 256
        invalid_properties.push("invalid value for \"max_completion_tokens\", must be greater than or equal to 256.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      object_validator = EnumAttributeValidator.new("String", ["thread.run"])
      return false unless object_validator.valid?(@object)
      status_validator = EnumAttributeValidator.new("String", ["queued", "in_progress", "requires_action", "cancelling", "cancelled", "failed", "completed", "expired"])
      return false unless status_validator.valid?(@status)
      return false if @tools.size > 20
      return false if @max_prompt_tokens < 256
      return false if @max_completion_tokens < 256
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["thread.run"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new("String", ["queued", "in_progress", "requires_action", "cancelling", "cancelled", "failed", "completed", "expired"])
      unless validator.valid?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{validator.allowable_values}.")
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] tools Value to be assigned
    def tools=(tools)
      if tools.size > 20
        raise ArgumentError.new("invalid value for \"tools\", number of items must be less than or equal to 20.")
      end

      @tools = tools
    end

    # Custom attribute writer method with validation
    # @param [Object] max_prompt_tokens Value to be assigned
    def max_prompt_tokens=(max_prompt_tokens)
      if max_prompt_tokens < 256
        raise ArgumentError.new("invalid value for \"max_prompt_tokens\", must be greater than or equal to 256.")
      end

      @max_prompt_tokens = max_prompt_tokens
    end

    # Custom attribute writer method with validation
    # @param [Object] max_completion_tokens Value to be assigned
    def max_completion_tokens=(max_completion_tokens)
      if max_completion_tokens < 256
        raise ArgumentError.new("invalid value for \"max_completion_tokens\", must be greater than or equal to 256.")
      end

      @max_completion_tokens = max_completion_tokens
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          id == o.id &&
          object == o.object &&
          created_at == o.created_at &&
          thread_id == o.thread_id &&
          assistant_id == o.assistant_id &&
          status == o.status &&
          required_action == o.required_action &&
          last_error == o.last_error &&
          expires_at == o.expires_at &&
          started_at == o.started_at &&
          cancelled_at == o.cancelled_at &&
          failed_at == o.failed_at &&
          completed_at == o.completed_at &&
          incomplete_details == o.incomplete_details &&
          model == o.model &&
          instructions == o.instructions &&
          tools == o.tools &&
          file_ids == o.file_ids &&
          metadata == o.metadata &&
          usage == o.usage &&
          temperature == o.temperature &&
          max_prompt_tokens == o.max_prompt_tokens &&
          max_completion_tokens == o.max_completion_tokens &&
          truncation_strategy == o.truncation_strategy &&
          tool_choice == o.tool_choice &&
          response_format == o.response_format
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, object, created_at, thread_id, assistant_id, status, required_action, last_error, expires_at, started_at, cancelled_at, failed_at, completed_at, incomplete_details, model, instructions, tools, file_ids, metadata, usage, temperature, max_prompt_tokens, max_completion_tokens, truncation_strategy, tool_choice, response_format].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
