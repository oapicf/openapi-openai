/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing AssistantsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AssistantsApiTests : IDisposable
    {
        private AssistantsApi instance;

        public AssistantsApiTests()
        {
            instance = new AssistantsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AssistantsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AssistantsApi
            //Assert.IsType<AssistantsApi>(instance);
        }

        /// <summary>
        /// Test CancelRun
        /// </summary>
        [Fact]
        public void CancelRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //string runId = null;
            //var response = instance.CancelRun(threadId, runId);
            //Assert.IsType<RunObject>(response);
        }

        /// <summary>
        /// Test CreateAssistant
        /// </summary>
        [Fact]
        public void CreateAssistantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateAssistantRequest createAssistantRequest = null;
            //var response = instance.CreateAssistant(createAssistantRequest);
            //Assert.IsType<AssistantObject>(response);
        }

        /// <summary>
        /// Test CreateAssistantFile
        /// </summary>
        [Fact]
        public void CreateAssistantFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assistantId = null;
            //CreateAssistantFileRequest createAssistantFileRequest = null;
            //var response = instance.CreateAssistantFile(assistantId, createAssistantFileRequest);
            //Assert.IsType<AssistantFileObject>(response);
        }

        /// <summary>
        /// Test CreateMessage
        /// </summary>
        [Fact]
        public void CreateMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //CreateMessageRequest createMessageRequest = null;
            //var response = instance.CreateMessage(threadId, createMessageRequest);
            //Assert.IsType<MessageObject>(response);
        }

        /// <summary>
        /// Test CreateRun
        /// </summary>
        [Fact]
        public void CreateRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //CreateRunRequest createRunRequest = null;
            //var response = instance.CreateRun(threadId, createRunRequest);
            //Assert.IsType<RunObject>(response);
        }

        /// <summary>
        /// Test CreateThread
        /// </summary>
        [Fact]
        public void CreateThreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateThreadRequest? createThreadRequest = null;
            //var response = instance.CreateThread(createThreadRequest);
            //Assert.IsType<ThreadObject>(response);
        }

        /// <summary>
        /// Test CreateThreadAndRun
        /// </summary>
        [Fact]
        public void CreateThreadAndRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateThreadAndRunRequest createThreadAndRunRequest = null;
            //var response = instance.CreateThreadAndRun(createThreadAndRunRequest);
            //Assert.IsType<RunObject>(response);
        }

        /// <summary>
        /// Test DeleteAssistant
        /// </summary>
        [Fact]
        public void DeleteAssistantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assistantId = null;
            //var response = instance.DeleteAssistant(assistantId);
            //Assert.IsType<DeleteAssistantResponse>(response);
        }

        /// <summary>
        /// Test DeleteAssistantFile
        /// </summary>
        [Fact]
        public void DeleteAssistantFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assistantId = null;
            //string fileId = null;
            //var response = instance.DeleteAssistantFile(assistantId, fileId);
            //Assert.IsType<DeleteAssistantFileResponse>(response);
        }

        /// <summary>
        /// Test DeleteThread
        /// </summary>
        [Fact]
        public void DeleteThreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //var response = instance.DeleteThread(threadId);
            //Assert.IsType<DeleteThreadResponse>(response);
        }

        /// <summary>
        /// Test GetAssistant
        /// </summary>
        [Fact]
        public void GetAssistantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assistantId = null;
            //var response = instance.GetAssistant(assistantId);
            //Assert.IsType<AssistantObject>(response);
        }

        /// <summary>
        /// Test GetAssistantFile
        /// </summary>
        [Fact]
        public void GetAssistantFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assistantId = null;
            //string fileId = null;
            //var response = instance.GetAssistantFile(assistantId, fileId);
            //Assert.IsType<AssistantFileObject>(response);
        }

        /// <summary>
        /// Test GetMessage
        /// </summary>
        [Fact]
        public void GetMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //string messageId = null;
            //var response = instance.GetMessage(threadId, messageId);
            //Assert.IsType<MessageObject>(response);
        }

        /// <summary>
        /// Test GetMessageFile
        /// </summary>
        [Fact]
        public void GetMessageFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //string messageId = null;
            //string fileId = null;
            //var response = instance.GetMessageFile(threadId, messageId, fileId);
            //Assert.IsType<MessageFileObject>(response);
        }

        /// <summary>
        /// Test GetRun
        /// </summary>
        [Fact]
        public void GetRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //string runId = null;
            //var response = instance.GetRun(threadId, runId);
            //Assert.IsType<RunObject>(response);
        }

        /// <summary>
        /// Test GetRunStep
        /// </summary>
        [Fact]
        public void GetRunStepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //string runId = null;
            //string stepId = null;
            //var response = instance.GetRunStep(threadId, runId, stepId);
            //Assert.IsType<RunStepObject>(response);
        }

        /// <summary>
        /// Test GetThread
        /// </summary>
        [Fact]
        public void GetThreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //var response = instance.GetThread(threadId);
            //Assert.IsType<ThreadObject>(response);
        }

        /// <summary>
        /// Test ListAssistantFiles
        /// </summary>
        [Fact]
        public void ListAssistantFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assistantId = null;
            //int? limit = null;
            //string? order = null;
            //string? after = null;
            //string? before = null;
            //var response = instance.ListAssistantFiles(assistantId, limit, order, after, before);
            //Assert.IsType<ListAssistantFilesResponse>(response);
        }

        /// <summary>
        /// Test ListAssistants
        /// </summary>
        [Fact]
        public void ListAssistantsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string? order = null;
            //string? after = null;
            //string? before = null;
            //var response = instance.ListAssistants(limit, order, after, before);
            //Assert.IsType<ListAssistantsResponse>(response);
        }

        /// <summary>
        /// Test ListMessageFiles
        /// </summary>
        [Fact]
        public void ListMessageFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //string messageId = null;
            //int? limit = null;
            //string? order = null;
            //string? after = null;
            //string? before = null;
            //var response = instance.ListMessageFiles(threadId, messageId, limit, order, after, before);
            //Assert.IsType<ListMessageFilesResponse>(response);
        }

        /// <summary>
        /// Test ListMessages
        /// </summary>
        [Fact]
        public void ListMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //int? limit = null;
            //string? order = null;
            //string? after = null;
            //string? before = null;
            //string? runId = null;
            //var response = instance.ListMessages(threadId, limit, order, after, before, runId);
            //Assert.IsType<ListMessagesResponse>(response);
        }

        /// <summary>
        /// Test ListRunSteps
        /// </summary>
        [Fact]
        public void ListRunStepsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //string runId = null;
            //int? limit = null;
            //string? order = null;
            //string? after = null;
            //string? before = null;
            //var response = instance.ListRunSteps(threadId, runId, limit, order, after, before);
            //Assert.IsType<ListRunStepsResponse>(response);
        }

        /// <summary>
        /// Test ListRuns
        /// </summary>
        [Fact]
        public void ListRunsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //int? limit = null;
            //string? order = null;
            //string? after = null;
            //string? before = null;
            //var response = instance.ListRuns(threadId, limit, order, after, before);
            //Assert.IsType<ListRunsResponse>(response);
        }

        /// <summary>
        /// Test ModifyAssistant
        /// </summary>
        [Fact]
        public void ModifyAssistantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assistantId = null;
            //ModifyAssistantRequest modifyAssistantRequest = null;
            //var response = instance.ModifyAssistant(assistantId, modifyAssistantRequest);
            //Assert.IsType<AssistantObject>(response);
        }

        /// <summary>
        /// Test ModifyMessage
        /// </summary>
        [Fact]
        public void ModifyMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //string messageId = null;
            //ModifyMessageRequest modifyMessageRequest = null;
            //var response = instance.ModifyMessage(threadId, messageId, modifyMessageRequest);
            //Assert.IsType<MessageObject>(response);
        }

        /// <summary>
        /// Test ModifyRun
        /// </summary>
        [Fact]
        public void ModifyRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //string runId = null;
            //ModifyRunRequest modifyRunRequest = null;
            //var response = instance.ModifyRun(threadId, runId, modifyRunRequest);
            //Assert.IsType<RunObject>(response);
        }

        /// <summary>
        /// Test ModifyThread
        /// </summary>
        [Fact]
        public void ModifyThreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //ModifyThreadRequest modifyThreadRequest = null;
            //var response = instance.ModifyThread(threadId, modifyThreadRequest);
            //Assert.IsType<ThreadObject>(response);
        }

        /// <summary>
        /// Test SubmitToolOuputsToRun
        /// </summary>
        [Fact]
        public void SubmitToolOuputsToRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //string runId = null;
            //SubmitToolOutputsRunRequest submitToolOutputsRunRequest = null;
            //var response = instance.SubmitToolOuputsToRun(threadId, runId, submitToolOutputsRunRequest);
            //Assert.IsType<RunObject>(response);
        }
    }
}
