/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssistantsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancels a run that is &#x60;in_progress&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this run belongs.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunObject</returns>
        RunObject CancelRun(string threadId, string runId, int operationIndex = 0);

        /// <summary>
        /// Cancels a run that is &#x60;in_progress&#x60;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this run belongs.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunObject</returns>
        ApiResponse<RunObject> CancelRunWithHttpInfo(string threadId, string runId, int operationIndex = 0);
        /// <summary>
        /// Create an assistant with a model and instructions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAssistantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssistantObject</returns>
        AssistantObject CreateAssistant(CreateAssistantRequest createAssistantRequest, int operationIndex = 0);

        /// <summary>
        /// Create an assistant with a model and instructions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAssistantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssistantObject</returns>
        ApiResponse<AssistantObject> CreateAssistantWithHttpInfo(CreateAssistantRequest createAssistantRequest, int operationIndex = 0);
        /// <summary>
        /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
        /// <param name="createAssistantFileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssistantFileObject</returns>
        AssistantFileObject CreateAssistantFile(string assistantId, CreateAssistantFileRequest createAssistantFileRequest, int operationIndex = 0);

        /// <summary>
        /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
        /// <param name="createAssistantFileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssistantFileObject</returns>
        ApiResponse<AssistantFileObject> CreateAssistantFileWithHttpInfo(string assistantId, CreateAssistantFileRequest createAssistantFileRequest, int operationIndex = 0);
        /// <summary>
        /// Create a message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
        /// <param name="createMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageObject</returns>
        MessageObject CreateMessage(string threadId, CreateMessageRequest createMessageRequest, int operationIndex = 0);

        /// <summary>
        /// Create a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
        /// <param name="createMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageObject</returns>
        ApiResponse<MessageObject> CreateMessageWithHttpInfo(string threadId, CreateMessageRequest createMessageRequest, int operationIndex = 0);
        /// <summary>
        /// Create a run.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to run.</param>
        /// <param name="createRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunObject</returns>
        RunObject CreateRun(string threadId, CreateRunRequest createRunRequest, int operationIndex = 0);

        /// <summary>
        /// Create a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to run.</param>
        /// <param name="createRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunObject</returns>
        ApiResponse<RunObject> CreateRunWithHttpInfo(string threadId, CreateRunRequest createRunRequest, int operationIndex = 0);
        /// <summary>
        /// Create a thread.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createThreadRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ThreadObject</returns>
        ThreadObject CreateThread(CreateThreadRequest? createThreadRequest = default(CreateThreadRequest?), int operationIndex = 0);

        /// <summary>
        /// Create a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createThreadRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ThreadObject</returns>
        ApiResponse<ThreadObject> CreateThreadWithHttpInfo(CreateThreadRequest? createThreadRequest = default(CreateThreadRequest?), int operationIndex = 0);
        /// <summary>
        /// Create a thread and run it in one request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createThreadAndRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunObject</returns>
        RunObject CreateThreadAndRun(CreateThreadAndRunRequest createThreadAndRunRequest, int operationIndex = 0);

        /// <summary>
        /// Create a thread and run it in one request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createThreadAndRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunObject</returns>
        ApiResponse<RunObject> CreateThreadAndRunWithHttpInfo(CreateThreadAndRunRequest createThreadAndRunRequest, int operationIndex = 0);
        /// <summary>
        /// Delete an assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteAssistantResponse</returns>
        DeleteAssistantResponse DeleteAssistant(string assistantId, int operationIndex = 0);

        /// <summary>
        /// Delete an assistant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteAssistantResponse</returns>
        ApiResponse<DeleteAssistantResponse> DeleteAssistantWithHttpInfo(string assistantId, int operationIndex = 0);
        /// <summary>
        /// Delete an assistant file.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
        /// <param name="fileId">The ID of the file to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteAssistantFileResponse</returns>
        DeleteAssistantFileResponse DeleteAssistantFile(string assistantId, string fileId, int operationIndex = 0);

        /// <summary>
        /// Delete an assistant file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
        /// <param name="fileId">The ID of the file to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteAssistantFileResponse</returns>
        ApiResponse<DeleteAssistantFileResponse> DeleteAssistantFileWithHttpInfo(string assistantId, string fileId, int operationIndex = 0);
        /// <summary>
        /// Delete a thread.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteThreadResponse</returns>
        DeleteThreadResponse DeleteThread(string threadId, int operationIndex = 0);

        /// <summary>
        /// Delete a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteThreadResponse</returns>
        ApiResponse<DeleteThreadResponse> DeleteThreadWithHttpInfo(string threadId, int operationIndex = 0);
        /// <summary>
        /// Retrieves an assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssistantObject</returns>
        AssistantObject GetAssistant(string assistantId, int operationIndex = 0);

        /// <summary>
        /// Retrieves an assistant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssistantObject</returns>
        ApiResponse<AssistantObject> GetAssistantWithHttpInfo(string assistantId, int operationIndex = 0);
        /// <summary>
        /// Retrieves an AssistantFile.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
        /// <param name="fileId">The ID of the file we&#39;re getting.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssistantFileObject</returns>
        AssistantFileObject GetAssistantFile(string assistantId, string fileId, int operationIndex = 0);

        /// <summary>
        /// Retrieves an AssistantFile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
        /// <param name="fileId">The ID of the file we&#39;re getting.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssistantFileObject</returns>
        ApiResponse<AssistantFileObject> GetAssistantFileWithHttpInfo(string assistantId, string fileId, int operationIndex = 0);
        /// <summary>
        /// Retrieve a message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageObject</returns>
        MessageObject GetMessage(string threadId, string messageId, int operationIndex = 0);

        /// <summary>
        /// Retrieve a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageObject</returns>
        ApiResponse<MessageObject> GetMessageWithHttpInfo(string threadId, string messageId, int operationIndex = 0);
        /// <summary>
        /// Retrieves a message file.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
        /// <param name="messageId">The ID of the message the file belongs to.</param>
        /// <param name="fileId">The ID of the file being retrieved.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageFileObject</returns>
        MessageFileObject GetMessageFile(string threadId, string messageId, string fileId, int operationIndex = 0);

        /// <summary>
        /// Retrieves a message file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
        /// <param name="messageId">The ID of the message the file belongs to.</param>
        /// <param name="fileId">The ID of the file being retrieved.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageFileObject</returns>
        ApiResponse<MessageFileObject> GetMessageFileWithHttpInfo(string threadId, string messageId, string fileId, int operationIndex = 0);
        /// <summary>
        /// Retrieves a run.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunObject</returns>
        RunObject GetRun(string threadId, string runId, int operationIndex = 0);

        /// <summary>
        /// Retrieves a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunObject</returns>
        ApiResponse<RunObject> GetRunWithHttpInfo(string threadId, string runId, int operationIndex = 0);
        /// <summary>
        /// Retrieves a run step.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
        /// <param name="runId">The ID of the run to which the run step belongs.</param>
        /// <param name="stepId">The ID of the run step to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunStepObject</returns>
        RunStepObject GetRunStep(string threadId, string runId, string stepId, int operationIndex = 0);

        /// <summary>
        /// Retrieves a run step.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
        /// <param name="runId">The ID of the run to which the run step belongs.</param>
        /// <param name="stepId">The ID of the run step to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunStepObject</returns>
        ApiResponse<RunStepObject> GetRunStepWithHttpInfo(string threadId, string runId, string stepId, int operationIndex = 0);
        /// <summary>
        /// Retrieves a thread.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ThreadObject</returns>
        ThreadObject GetThread(string threadId, int operationIndex = 0);

        /// <summary>
        /// Retrieves a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ThreadObject</returns>
        ApiResponse<ThreadObject> GetThreadWithHttpInfo(string threadId, int operationIndex = 0);
        /// <summary>
        /// Returns a list of assistant files.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAssistantFilesResponse</returns>
        ListAssistantFilesResponse ListAssistantFiles(string assistantId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0);

        /// <summary>
        /// Returns a list of assistant files.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAssistantFilesResponse</returns>
        ApiResponse<ListAssistantFilesResponse> ListAssistantFilesWithHttpInfo(string assistantId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0);
        /// <summary>
        /// Returns a list of assistants.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAssistantsResponse</returns>
        ListAssistantsResponse ListAssistants(int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0);

        /// <summary>
        /// Returns a list of assistants.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAssistantsResponse</returns>
        ApiResponse<ListAssistantsResponse> ListAssistantsWithHttpInfo(int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0);
        /// <summary>
        /// Returns a list of message files.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
        /// <param name="messageId">The ID of the message that the files belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListMessageFilesResponse</returns>
        ListMessageFilesResponse ListMessageFiles(string threadId, string messageId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0);

        /// <summary>
        /// Returns a list of message files.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
        /// <param name="messageId">The ID of the message that the files belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListMessageFilesResponse</returns>
        ApiResponse<ListMessageFilesResponse> ListMessageFilesWithHttpInfo(string threadId, string messageId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0);
        /// <summary>
        /// Returns a list of messages for a given thread.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="runId">Filter messages by the run ID that generated them.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListMessagesResponse</returns>
        ListMessagesResponse ListMessages(string threadId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), string? runId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Returns a list of messages for a given thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="runId">Filter messages by the run ID that generated them.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListMessagesResponse</returns>
        ApiResponse<ListMessagesResponse> ListMessagesWithHttpInfo(string threadId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), string? runId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Returns a list of run steps belonging to a run.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
        /// <param name="runId">The ID of the run the run steps belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListRunStepsResponse</returns>
        ListRunStepsResponse ListRunSteps(string threadId, string runId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0);

        /// <summary>
        /// Returns a list of run steps belonging to a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
        /// <param name="runId">The ID of the run the run steps belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListRunStepsResponse</returns>
        ApiResponse<ListRunStepsResponse> ListRunStepsWithHttpInfo(string threadId, string runId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0);
        /// <summary>
        /// Returns a list of runs belonging to a thread.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListRunsResponse</returns>
        ListRunsResponse ListRuns(string threadId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0);

        /// <summary>
        /// Returns a list of runs belonging to a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListRunsResponse</returns>
        ApiResponse<ListRunsResponse> ListRunsWithHttpInfo(string threadId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0);
        /// <summary>
        /// Modifies an assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to modify.</param>
        /// <param name="modifyAssistantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssistantObject</returns>
        AssistantObject ModifyAssistant(string assistantId, ModifyAssistantRequest modifyAssistantRequest, int operationIndex = 0);

        /// <summary>
        /// Modifies an assistant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to modify.</param>
        /// <param name="modifyAssistantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssistantObject</returns>
        ApiResponse<AssistantObject> ModifyAssistantWithHttpInfo(string assistantId, ModifyAssistantRequest modifyAssistantRequest, int operationIndex = 0);
        /// <summary>
        /// Modifies a message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to modify.</param>
        /// <param name="modifyMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageObject</returns>
        MessageObject ModifyMessage(string threadId, string messageId, ModifyMessageRequest modifyMessageRequest, int operationIndex = 0);

        /// <summary>
        /// Modifies a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to modify.</param>
        /// <param name="modifyMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageObject</returns>
        ApiResponse<MessageObject> ModifyMessageWithHttpInfo(string threadId, string messageId, ModifyMessageRequest modifyMessageRequest, int operationIndex = 0);
        /// <summary>
        /// Modifies a run.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to modify.</param>
        /// <param name="modifyRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunObject</returns>
        RunObject ModifyRun(string threadId, string runId, ModifyRunRequest modifyRunRequest, int operationIndex = 0);

        /// <summary>
        /// Modifies a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to modify.</param>
        /// <param name="modifyRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunObject</returns>
        ApiResponse<RunObject> ModifyRunWithHttpInfo(string threadId, string runId, ModifyRunRequest modifyRunRequest, int operationIndex = 0);
        /// <summary>
        /// Modifies a thread.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
        /// <param name="modifyThreadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ThreadObject</returns>
        ThreadObject ModifyThread(string threadId, ModifyThreadRequest modifyThreadRequest, int operationIndex = 0);

        /// <summary>
        /// Modifies a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
        /// <param name="modifyThreadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ThreadObject</returns>
        ApiResponse<ThreadObject> ModifyThreadWithHttpInfo(string threadId, ModifyThreadRequest modifyThreadRequest, int operationIndex = 0);
        /// <summary>
        /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
        /// <param name="runId">The ID of the run that requires the tool output submission.</param>
        /// <param name="submitToolOutputsRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunObject</returns>
        RunObject SubmitToolOuputsToRun(string threadId, string runId, SubmitToolOutputsRunRequest submitToolOutputsRunRequest, int operationIndex = 0);

        /// <summary>
        /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
        /// <param name="runId">The ID of the run that requires the tool output submission.</param>
        /// <param name="submitToolOutputsRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunObject</returns>
        ApiResponse<RunObject> SubmitToolOuputsToRunWithHttpInfo(string threadId, string runId, SubmitToolOutputsRunRequest submitToolOutputsRunRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssistantsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancels a run that is &#x60;in_progress&#x60;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this run belongs.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunObject</returns>
        System.Threading.Tasks.Task<RunObject> CancelRunAsync(string threadId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Cancels a run that is &#x60;in_progress&#x60;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this run belongs.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunObject>> CancelRunWithHttpInfoAsync(string threadId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create an assistant with a model and instructions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAssistantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssistantObject</returns>
        System.Threading.Tasks.Task<AssistantObject> CreateAssistantAsync(CreateAssistantRequest createAssistantRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create an assistant with a model and instructions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAssistantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssistantObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssistantObject>> CreateAssistantWithHttpInfoAsync(CreateAssistantRequest createAssistantRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
        /// <param name="createAssistantFileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssistantFileObject</returns>
        System.Threading.Tasks.Task<AssistantFileObject> CreateAssistantFileAsync(string assistantId, CreateAssistantFileRequest createAssistantFileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
        /// <param name="createAssistantFileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssistantFileObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssistantFileObject>> CreateAssistantFileWithHttpInfoAsync(string assistantId, CreateAssistantFileRequest createAssistantFileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
        /// <param name="createMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageObject</returns>
        System.Threading.Tasks.Task<MessageObject> CreateMessageAsync(string threadId, CreateMessageRequest createMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
        /// <param name="createMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageObject>> CreateMessageWithHttpInfoAsync(string threadId, CreateMessageRequest createMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to run.</param>
        /// <param name="createRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunObject</returns>
        System.Threading.Tasks.Task<RunObject> CreateRunAsync(string threadId, CreateRunRequest createRunRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to run.</param>
        /// <param name="createRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunObject>> CreateRunWithHttpInfoAsync(string threadId, CreateRunRequest createRunRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createThreadRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThreadObject</returns>
        System.Threading.Tasks.Task<ThreadObject> CreateThreadAsync(CreateThreadRequest? createThreadRequest = default(CreateThreadRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createThreadRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThreadObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThreadObject>> CreateThreadWithHttpInfoAsync(CreateThreadRequest? createThreadRequest = default(CreateThreadRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a thread and run it in one request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createThreadAndRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunObject</returns>
        System.Threading.Tasks.Task<RunObject> CreateThreadAndRunAsync(CreateThreadAndRunRequest createThreadAndRunRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a thread and run it in one request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createThreadAndRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunObject>> CreateThreadAndRunWithHttpInfoAsync(CreateThreadAndRunRequest createThreadAndRunRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an assistant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAssistantResponse</returns>
        System.Threading.Tasks.Task<DeleteAssistantResponse> DeleteAssistantAsync(string assistantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an assistant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAssistantResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAssistantResponse>> DeleteAssistantWithHttpInfoAsync(string assistantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an assistant file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
        /// <param name="fileId">The ID of the file to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAssistantFileResponse</returns>
        System.Threading.Tasks.Task<DeleteAssistantFileResponse> DeleteAssistantFileAsync(string assistantId, string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an assistant file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
        /// <param name="fileId">The ID of the file to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAssistantFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAssistantFileResponse>> DeleteAssistantFileWithHttpInfoAsync(string assistantId, string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteThreadResponse</returns>
        System.Threading.Tasks.Task<DeleteThreadResponse> DeleteThreadAsync(string threadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteThreadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteThreadResponse>> DeleteThreadWithHttpInfoAsync(string threadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves an assistant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssistantObject</returns>
        System.Threading.Tasks.Task<AssistantObject> GetAssistantAsync(string assistantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves an assistant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssistantObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssistantObject>> GetAssistantWithHttpInfoAsync(string assistantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves an AssistantFile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
        /// <param name="fileId">The ID of the file we&#39;re getting.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssistantFileObject</returns>
        System.Threading.Tasks.Task<AssistantFileObject> GetAssistantFileAsync(string assistantId, string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves an AssistantFile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
        /// <param name="fileId">The ID of the file we&#39;re getting.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssistantFileObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssistantFileObject>> GetAssistantFileWithHttpInfoAsync(string assistantId, string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageObject</returns>
        System.Threading.Tasks.Task<MessageObject> GetMessageAsync(string threadId, string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageObject>> GetMessageWithHttpInfoAsync(string threadId, string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a message file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
        /// <param name="messageId">The ID of the message the file belongs to.</param>
        /// <param name="fileId">The ID of the file being retrieved.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageFileObject</returns>
        System.Threading.Tasks.Task<MessageFileObject> GetMessageFileAsync(string threadId, string messageId, string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a message file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
        /// <param name="messageId">The ID of the message the file belongs to.</param>
        /// <param name="fileId">The ID of the file being retrieved.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageFileObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageFileObject>> GetMessageFileWithHttpInfoAsync(string threadId, string messageId, string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunObject</returns>
        System.Threading.Tasks.Task<RunObject> GetRunAsync(string threadId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunObject>> GetRunWithHttpInfoAsync(string threadId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a run step.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
        /// <param name="runId">The ID of the run to which the run step belongs.</param>
        /// <param name="stepId">The ID of the run step to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunStepObject</returns>
        System.Threading.Tasks.Task<RunStepObject> GetRunStepAsync(string threadId, string runId, string stepId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a run step.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
        /// <param name="runId">The ID of the run to which the run step belongs.</param>
        /// <param name="stepId">The ID of the run step to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunStepObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunStepObject>> GetRunStepWithHttpInfoAsync(string threadId, string runId, string stepId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThreadObject</returns>
        System.Threading.Tasks.Task<ThreadObject> GetThreadAsync(string threadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThreadObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThreadObject>> GetThreadWithHttpInfoAsync(string threadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of assistant files.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAssistantFilesResponse</returns>
        System.Threading.Tasks.Task<ListAssistantFilesResponse> ListAssistantFilesAsync(string assistantId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of assistant files.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAssistantFilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAssistantFilesResponse>> ListAssistantFilesWithHttpInfoAsync(string assistantId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of assistants.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAssistantsResponse</returns>
        System.Threading.Tasks.Task<ListAssistantsResponse> ListAssistantsAsync(int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of assistants.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAssistantsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAssistantsResponse>> ListAssistantsWithHttpInfoAsync(int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of message files.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
        /// <param name="messageId">The ID of the message that the files belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListMessageFilesResponse</returns>
        System.Threading.Tasks.Task<ListMessageFilesResponse> ListMessageFilesAsync(string threadId, string messageId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of message files.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
        /// <param name="messageId">The ID of the message that the files belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListMessageFilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListMessageFilesResponse>> ListMessageFilesWithHttpInfoAsync(string threadId, string messageId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of messages for a given thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="runId">Filter messages by the run ID that generated them.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListMessagesResponse</returns>
        System.Threading.Tasks.Task<ListMessagesResponse> ListMessagesAsync(string threadId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), string? runId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of messages for a given thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="runId">Filter messages by the run ID that generated them.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListMessagesResponse>> ListMessagesWithHttpInfoAsync(string threadId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), string? runId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of run steps belonging to a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
        /// <param name="runId">The ID of the run the run steps belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRunStepsResponse</returns>
        System.Threading.Tasks.Task<ListRunStepsResponse> ListRunStepsAsync(string threadId, string runId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of run steps belonging to a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
        /// <param name="runId">The ID of the run the run steps belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRunStepsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListRunStepsResponse>> ListRunStepsWithHttpInfoAsync(string threadId, string runId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of runs belonging to a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRunsResponse</returns>
        System.Threading.Tasks.Task<ListRunsResponse> ListRunsAsync(string threadId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of runs belonging to a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRunsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListRunsResponse>> ListRunsWithHttpInfoAsync(string threadId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Modifies an assistant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to modify.</param>
        /// <param name="modifyAssistantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssistantObject</returns>
        System.Threading.Tasks.Task<AssistantObject> ModifyAssistantAsync(string assistantId, ModifyAssistantRequest modifyAssistantRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Modifies an assistant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to modify.</param>
        /// <param name="modifyAssistantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssistantObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssistantObject>> ModifyAssistantWithHttpInfoAsync(string assistantId, ModifyAssistantRequest modifyAssistantRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Modifies a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to modify.</param>
        /// <param name="modifyMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageObject</returns>
        System.Threading.Tasks.Task<MessageObject> ModifyMessageAsync(string threadId, string messageId, ModifyMessageRequest modifyMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Modifies a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to modify.</param>
        /// <param name="modifyMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageObject>> ModifyMessageWithHttpInfoAsync(string threadId, string messageId, ModifyMessageRequest modifyMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Modifies a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to modify.</param>
        /// <param name="modifyRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunObject</returns>
        System.Threading.Tasks.Task<RunObject> ModifyRunAsync(string threadId, string runId, ModifyRunRequest modifyRunRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Modifies a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to modify.</param>
        /// <param name="modifyRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunObject>> ModifyRunWithHttpInfoAsync(string threadId, string runId, ModifyRunRequest modifyRunRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Modifies a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
        /// <param name="modifyThreadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThreadObject</returns>
        System.Threading.Tasks.Task<ThreadObject> ModifyThreadAsync(string threadId, ModifyThreadRequest modifyThreadRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Modifies a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
        /// <param name="modifyThreadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThreadObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThreadObject>> ModifyThreadWithHttpInfoAsync(string threadId, ModifyThreadRequest modifyThreadRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
        /// <param name="runId">The ID of the run that requires the tool output submission.</param>
        /// <param name="submitToolOutputsRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunObject</returns>
        System.Threading.Tasks.Task<RunObject> SubmitToolOuputsToRunAsync(string threadId, string runId, SubmitToolOutputsRunRequest submitToolOutputsRunRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
        /// <param name="runId">The ID of the run that requires the tool output submission.</param>
        /// <param name="submitToolOutputsRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunObject>> SubmitToolOuputsToRunWithHttpInfoAsync(string threadId, string runId, SubmitToolOutputsRunRequest submitToolOutputsRunRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssistantsApi : IAssistantsApiSync, IAssistantsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssistantsApi : IAssistantsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssistantsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssistantsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssistantsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AssistantsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancels a run that is &#x60;in_progress&#x60;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this run belongs.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunObject</returns>
        public RunObject CancelRun(string threadId, string runId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<RunObject> localVarResponse = CancelRunWithHttpInfo(threadId, runId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancels a run that is &#x60;in_progress&#x60;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this run belongs.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<RunObject> CancelRunWithHttpInfo(string threadId, string runId, int operationIndex = 0)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->CancelRun");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->CancelRun");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(runId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.CancelRun";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RunObject>("/threads/{thread_id}/runs/{run_id}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancels a run that is &#x60;in_progress&#x60;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this run belongs.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunObject</returns>
        public async System.Threading.Tasks.Task<RunObject> CancelRunAsync(string threadId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RunObject> localVarResponse = await CancelRunWithHttpInfoAsync(threadId, runId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancels a run that is &#x60;in_progress&#x60;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this run belongs.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RunObject>> CancelRunWithHttpInfoAsync(string threadId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->CancelRun");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->CancelRun");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(runId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.CancelRun";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RunObject>("/threads/{thread_id}/runs/{run_id}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an assistant with a model and instructions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAssistantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssistantObject</returns>
        public AssistantObject CreateAssistant(CreateAssistantRequest createAssistantRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AssistantObject> localVarResponse = CreateAssistantWithHttpInfo(createAssistantRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an assistant with a model and instructions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAssistantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssistantObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<AssistantObject> CreateAssistantWithHttpInfo(CreateAssistantRequest createAssistantRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createAssistantRequest' is set
            if (createAssistantRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createAssistantRequest' when calling AssistantsApi->CreateAssistant");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAssistantRequest;

            localVarRequestOptions.Operation = "AssistantsApi.CreateAssistant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AssistantObject>("/assistants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAssistant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an assistant with a model and instructions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAssistantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssistantObject</returns>
        public async System.Threading.Tasks.Task<AssistantObject> CreateAssistantAsync(CreateAssistantRequest createAssistantRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AssistantObject> localVarResponse = await CreateAssistantWithHttpInfoAsync(createAssistantRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an assistant with a model and instructions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAssistantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssistantObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AssistantObject>> CreateAssistantWithHttpInfoAsync(CreateAssistantRequest createAssistantRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createAssistantRequest' is set
            if (createAssistantRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createAssistantRequest' when calling AssistantsApi->CreateAssistant");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAssistantRequest;

            localVarRequestOptions.Operation = "AssistantsApi.CreateAssistant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AssistantObject>("/assistants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAssistant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
        /// <param name="createAssistantFileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssistantFileObject</returns>
        public AssistantFileObject CreateAssistantFile(string assistantId, CreateAssistantFileRequest createAssistantFileRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AssistantFileObject> localVarResponse = CreateAssistantFileWithHttpInfo(assistantId, createAssistantFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
        /// <param name="createAssistantFileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssistantFileObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<AssistantFileObject> CreateAssistantFileWithHttpInfo(string assistantId, CreateAssistantFileRequest createAssistantFileRequest, int operationIndex = 0)
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->CreateAssistantFile");
            }

            // verify the required parameter 'createAssistantFileRequest' is set
            if (createAssistantFileRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createAssistantFileRequest' when calling AssistantsApi->CreateAssistantFile");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assistant_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assistantId)); // path parameter
            localVarRequestOptions.Data = createAssistantFileRequest;

            localVarRequestOptions.Operation = "AssistantsApi.CreateAssistantFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AssistantFileObject>("/assistants/{assistant_id}/files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAssistantFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
        /// <param name="createAssistantFileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssistantFileObject</returns>
        public async System.Threading.Tasks.Task<AssistantFileObject> CreateAssistantFileAsync(string assistantId, CreateAssistantFileRequest createAssistantFileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AssistantFileObject> localVarResponse = await CreateAssistantFileWithHttpInfoAsync(assistantId, createAssistantFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
        /// <param name="createAssistantFileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssistantFileObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AssistantFileObject>> CreateAssistantFileWithHttpInfoAsync(string assistantId, CreateAssistantFileRequest createAssistantFileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->CreateAssistantFile");
            }

            // verify the required parameter 'createAssistantFileRequest' is set
            if (createAssistantFileRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createAssistantFileRequest' when calling AssistantsApi->CreateAssistantFile");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assistant_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assistantId)); // path parameter
            localVarRequestOptions.Data = createAssistantFileRequest;

            localVarRequestOptions.Operation = "AssistantsApi.CreateAssistantFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AssistantFileObject>("/assistants/{assistant_id}/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAssistantFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a message. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
        /// <param name="createMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageObject</returns>
        public MessageObject CreateMessage(string threadId, CreateMessageRequest createMessageRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<MessageObject> localVarResponse = CreateMessageWithHttpInfo(threadId, createMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a message. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
        /// <param name="createMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<MessageObject> CreateMessageWithHttpInfo(string threadId, CreateMessageRequest createMessageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->CreateMessage");
            }

            // verify the required parameter 'createMessageRequest' is set
            if (createMessageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createMessageRequest' when calling AssistantsApi->CreateMessage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.Data = createMessageRequest;

            localVarRequestOptions.Operation = "AssistantsApi.CreateMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MessageObject>("/threads/{thread_id}/messages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a message. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
        /// <param name="createMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageObject</returns>
        public async System.Threading.Tasks.Task<MessageObject> CreateMessageAsync(string threadId, CreateMessageRequest createMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<MessageObject> localVarResponse = await CreateMessageWithHttpInfoAsync(threadId, createMessageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a message. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
        /// <param name="createMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<MessageObject>> CreateMessageWithHttpInfoAsync(string threadId, CreateMessageRequest createMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->CreateMessage");
            }

            // verify the required parameter 'createMessageRequest' is set
            if (createMessageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createMessageRequest' when calling AssistantsApi->CreateMessage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.Data = createMessageRequest;

            localVarRequestOptions.Operation = "AssistantsApi.CreateMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MessageObject>("/threads/{thread_id}/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a run. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to run.</param>
        /// <param name="createRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunObject</returns>
        public RunObject CreateRun(string threadId, CreateRunRequest createRunRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<RunObject> localVarResponse = CreateRunWithHttpInfo(threadId, createRunRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a run. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to run.</param>
        /// <param name="createRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<RunObject> CreateRunWithHttpInfo(string threadId, CreateRunRequest createRunRequest, int operationIndex = 0)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->CreateRun");
            }

            // verify the required parameter 'createRunRequest' is set
            if (createRunRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createRunRequest' when calling AssistantsApi->CreateRun");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.Data = createRunRequest;

            localVarRequestOptions.Operation = "AssistantsApi.CreateRun";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RunObject>("/threads/{thread_id}/runs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a run. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to run.</param>
        /// <param name="createRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunObject</returns>
        public async System.Threading.Tasks.Task<RunObject> CreateRunAsync(string threadId, CreateRunRequest createRunRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RunObject> localVarResponse = await CreateRunWithHttpInfoAsync(threadId, createRunRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a run. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to run.</param>
        /// <param name="createRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RunObject>> CreateRunWithHttpInfoAsync(string threadId, CreateRunRequest createRunRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->CreateRun");
            }

            // verify the required parameter 'createRunRequest' is set
            if (createRunRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createRunRequest' when calling AssistantsApi->CreateRun");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.Data = createRunRequest;

            localVarRequestOptions.Operation = "AssistantsApi.CreateRun";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RunObject>("/threads/{thread_id}/runs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createThreadRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ThreadObject</returns>
        public ThreadObject CreateThread(CreateThreadRequest? createThreadRequest = default(CreateThreadRequest?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ThreadObject> localVarResponse = CreateThreadWithHttpInfo(createThreadRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createThreadRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ThreadObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<ThreadObject> CreateThreadWithHttpInfo(CreateThreadRequest? createThreadRequest = default(CreateThreadRequest?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createThreadRequest;

            localVarRequestOptions.Operation = "AssistantsApi.CreateThread";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ThreadObject>("/threads", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateThread", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createThreadRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThreadObject</returns>
        public async System.Threading.Tasks.Task<ThreadObject> CreateThreadAsync(CreateThreadRequest? createThreadRequest = default(CreateThreadRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ThreadObject> localVarResponse = await CreateThreadWithHttpInfoAsync(createThreadRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createThreadRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThreadObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ThreadObject>> CreateThreadWithHttpInfoAsync(CreateThreadRequest? createThreadRequest = default(CreateThreadRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createThreadRequest;

            localVarRequestOptions.Operation = "AssistantsApi.CreateThread";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ThreadObject>("/threads", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateThread", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a thread and run it in one request. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createThreadAndRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunObject</returns>
        public RunObject CreateThreadAndRun(CreateThreadAndRunRequest createThreadAndRunRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<RunObject> localVarResponse = CreateThreadAndRunWithHttpInfo(createThreadAndRunRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a thread and run it in one request. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createThreadAndRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<RunObject> CreateThreadAndRunWithHttpInfo(CreateThreadAndRunRequest createThreadAndRunRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createThreadAndRunRequest' is set
            if (createThreadAndRunRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createThreadAndRunRequest' when calling AssistantsApi->CreateThreadAndRun");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createThreadAndRunRequest;

            localVarRequestOptions.Operation = "AssistantsApi.CreateThreadAndRun";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RunObject>("/threads/runs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateThreadAndRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a thread and run it in one request. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createThreadAndRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunObject</returns>
        public async System.Threading.Tasks.Task<RunObject> CreateThreadAndRunAsync(CreateThreadAndRunRequest createThreadAndRunRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RunObject> localVarResponse = await CreateThreadAndRunWithHttpInfoAsync(createThreadAndRunRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a thread and run it in one request. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createThreadAndRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RunObject>> CreateThreadAndRunWithHttpInfoAsync(CreateThreadAndRunRequest createThreadAndRunRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createThreadAndRunRequest' is set
            if (createThreadAndRunRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createThreadAndRunRequest' when calling AssistantsApi->CreateThreadAndRun");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createThreadAndRunRequest;

            localVarRequestOptions.Operation = "AssistantsApi.CreateThreadAndRun";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RunObject>("/threads/runs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateThreadAndRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an assistant. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteAssistantResponse</returns>
        public DeleteAssistantResponse DeleteAssistant(string assistantId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteAssistantResponse> localVarResponse = DeleteAssistantWithHttpInfo(assistantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an assistant. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteAssistantResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeleteAssistantResponse> DeleteAssistantWithHttpInfo(string assistantId, int operationIndex = 0)
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->DeleteAssistant");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assistant_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assistantId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.DeleteAssistant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteAssistantResponse>("/assistants/{assistant_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAssistant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an assistant. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAssistantResponse</returns>
        public async System.Threading.Tasks.Task<DeleteAssistantResponse> DeleteAssistantAsync(string assistantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteAssistantResponse> localVarResponse = await DeleteAssistantWithHttpInfoAsync(assistantId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an assistant. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAssistantResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeleteAssistantResponse>> DeleteAssistantWithHttpInfoAsync(string assistantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->DeleteAssistant");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assistant_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assistantId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.DeleteAssistant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteAssistantResponse>("/assistants/{assistant_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAssistant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an assistant file. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
        /// <param name="fileId">The ID of the file to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteAssistantFileResponse</returns>
        public DeleteAssistantFileResponse DeleteAssistantFile(string assistantId, string fileId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteAssistantFileResponse> localVarResponse = DeleteAssistantFileWithHttpInfo(assistantId, fileId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an assistant file. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
        /// <param name="fileId">The ID of the file to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteAssistantFileResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeleteAssistantFileResponse> DeleteAssistantFileWithHttpInfo(string assistantId, string fileId, int operationIndex = 0)
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->DeleteAssistantFile");
            }

            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileId' when calling AssistantsApi->DeleteAssistantFile");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assistant_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assistantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.DeleteAssistantFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteAssistantFileResponse>("/assistants/{assistant_id}/files/{file_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAssistantFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an assistant file. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
        /// <param name="fileId">The ID of the file to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAssistantFileResponse</returns>
        public async System.Threading.Tasks.Task<DeleteAssistantFileResponse> DeleteAssistantFileAsync(string assistantId, string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteAssistantFileResponse> localVarResponse = await DeleteAssistantFileWithHttpInfoAsync(assistantId, fileId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an assistant file. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
        /// <param name="fileId">The ID of the file to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAssistantFileResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeleteAssistantFileResponse>> DeleteAssistantFileWithHttpInfoAsync(string assistantId, string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->DeleteAssistantFile");
            }

            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileId' when calling AssistantsApi->DeleteAssistantFile");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assistant_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assistantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.DeleteAssistantFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteAssistantFileResponse>("/assistants/{assistant_id}/files/{file_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAssistantFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteThreadResponse</returns>
        public DeleteThreadResponse DeleteThread(string threadId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteThreadResponse> localVarResponse = DeleteThreadWithHttpInfo(threadId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteThreadResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeleteThreadResponse> DeleteThreadWithHttpInfo(string threadId, int operationIndex = 0)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->DeleteThread");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.DeleteThread";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteThreadResponse>("/threads/{thread_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteThread", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteThreadResponse</returns>
        public async System.Threading.Tasks.Task<DeleteThreadResponse> DeleteThreadAsync(string threadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteThreadResponse> localVarResponse = await DeleteThreadWithHttpInfoAsync(threadId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteThreadResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeleteThreadResponse>> DeleteThreadWithHttpInfoAsync(string threadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->DeleteThread");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.DeleteThread";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteThreadResponse>("/threads/{thread_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteThread", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an assistant. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssistantObject</returns>
        public AssistantObject GetAssistant(string assistantId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AssistantObject> localVarResponse = GetAssistantWithHttpInfo(assistantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an assistant. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssistantObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<AssistantObject> GetAssistantWithHttpInfo(string assistantId, int operationIndex = 0)
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->GetAssistant");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assistant_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assistantId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.GetAssistant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AssistantObject>("/assistants/{assistant_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssistant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an assistant. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssistantObject</returns>
        public async System.Threading.Tasks.Task<AssistantObject> GetAssistantAsync(string assistantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AssistantObject> localVarResponse = await GetAssistantWithHttpInfoAsync(assistantId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an assistant. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssistantObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AssistantObject>> GetAssistantWithHttpInfoAsync(string assistantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->GetAssistant");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assistant_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assistantId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.GetAssistant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AssistantObject>("/assistants/{assistant_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssistant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an AssistantFile. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
        /// <param name="fileId">The ID of the file we&#39;re getting.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssistantFileObject</returns>
        public AssistantFileObject GetAssistantFile(string assistantId, string fileId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AssistantFileObject> localVarResponse = GetAssistantFileWithHttpInfo(assistantId, fileId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an AssistantFile. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
        /// <param name="fileId">The ID of the file we&#39;re getting.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssistantFileObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<AssistantFileObject> GetAssistantFileWithHttpInfo(string assistantId, string fileId, int operationIndex = 0)
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->GetAssistantFile");
            }

            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileId' when calling AssistantsApi->GetAssistantFile");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assistant_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assistantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.GetAssistantFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AssistantFileObject>("/assistants/{assistant_id}/files/{file_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssistantFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an AssistantFile. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
        /// <param name="fileId">The ID of the file we&#39;re getting.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssistantFileObject</returns>
        public async System.Threading.Tasks.Task<AssistantFileObject> GetAssistantFileAsync(string assistantId, string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AssistantFileObject> localVarResponse = await GetAssistantFileWithHttpInfoAsync(assistantId, fileId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an AssistantFile. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
        /// <param name="fileId">The ID of the file we&#39;re getting.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssistantFileObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AssistantFileObject>> GetAssistantFileWithHttpInfoAsync(string assistantId, string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->GetAssistantFile");
            }

            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileId' when calling AssistantsApi->GetAssistantFile");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assistant_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assistantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.GetAssistantFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AssistantFileObject>("/assistants/{assistant_id}/files/{file_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssistantFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a message. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageObject</returns>
        public MessageObject GetMessage(string threadId, string messageId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<MessageObject> localVarResponse = GetMessageWithHttpInfo(threadId, messageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a message. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<MessageObject> GetMessageWithHttpInfo(string threadId, string messageId, int operationIndex = 0)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetMessage");
            }

            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'messageId' when calling AssistantsApi->GetMessage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("message_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.GetMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MessageObject>("/threads/{thread_id}/messages/{message_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a message. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageObject</returns>
        public async System.Threading.Tasks.Task<MessageObject> GetMessageAsync(string threadId, string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<MessageObject> localVarResponse = await GetMessageWithHttpInfoAsync(threadId, messageId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a message. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<MessageObject>> GetMessageWithHttpInfoAsync(string threadId, string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetMessage");
            }

            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'messageId' when calling AssistantsApi->GetMessage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("message_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.GetMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MessageObject>("/threads/{thread_id}/messages/{message_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a message file. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
        /// <param name="messageId">The ID of the message the file belongs to.</param>
        /// <param name="fileId">The ID of the file being retrieved.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageFileObject</returns>
        public MessageFileObject GetMessageFile(string threadId, string messageId, string fileId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<MessageFileObject> localVarResponse = GetMessageFileWithHttpInfo(threadId, messageId, fileId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a message file. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
        /// <param name="messageId">The ID of the message the file belongs to.</param>
        /// <param name="fileId">The ID of the file being retrieved.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageFileObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<MessageFileObject> GetMessageFileWithHttpInfo(string threadId, string messageId, string fileId, int operationIndex = 0)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetMessageFile");
            }

            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'messageId' when calling AssistantsApi->GetMessageFile");
            }

            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileId' when calling AssistantsApi->GetMessageFile");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("message_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.GetMessageFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MessageFileObject>("/threads/{thread_id}/messages/{message_id}/files/{file_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a message file. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
        /// <param name="messageId">The ID of the message the file belongs to.</param>
        /// <param name="fileId">The ID of the file being retrieved.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageFileObject</returns>
        public async System.Threading.Tasks.Task<MessageFileObject> GetMessageFileAsync(string threadId, string messageId, string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<MessageFileObject> localVarResponse = await GetMessageFileWithHttpInfoAsync(threadId, messageId, fileId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a message file. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
        /// <param name="messageId">The ID of the message the file belongs to.</param>
        /// <param name="fileId">The ID of the file being retrieved.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageFileObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<MessageFileObject>> GetMessageFileWithHttpInfoAsync(string threadId, string messageId, string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetMessageFile");
            }

            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'messageId' when calling AssistantsApi->GetMessageFile");
            }

            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileId' when calling AssistantsApi->GetMessageFile");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("message_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.GetMessageFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MessageFileObject>("/threads/{thread_id}/messages/{message_id}/files/{file_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a run. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunObject</returns>
        public RunObject GetRun(string threadId, string runId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<RunObject> localVarResponse = GetRunWithHttpInfo(threadId, runId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a run. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<RunObject> GetRunWithHttpInfo(string threadId, string runId, int operationIndex = 0)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetRun");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->GetRun");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(runId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.GetRun";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RunObject>("/threads/{thread_id}/runs/{run_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a run. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunObject</returns>
        public async System.Threading.Tasks.Task<RunObject> GetRunAsync(string threadId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RunObject> localVarResponse = await GetRunWithHttpInfoAsync(threadId, runId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a run. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RunObject>> GetRunWithHttpInfoAsync(string threadId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetRun");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->GetRun");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(runId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.GetRun";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RunObject>("/threads/{thread_id}/runs/{run_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a run step. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
        /// <param name="runId">The ID of the run to which the run step belongs.</param>
        /// <param name="stepId">The ID of the run step to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunStepObject</returns>
        public RunStepObject GetRunStep(string threadId, string runId, string stepId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<RunStepObject> localVarResponse = GetRunStepWithHttpInfo(threadId, runId, stepId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a run step. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
        /// <param name="runId">The ID of the run to which the run step belongs.</param>
        /// <param name="stepId">The ID of the run step to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunStepObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<RunStepObject> GetRunStepWithHttpInfo(string threadId, string runId, string stepId, int operationIndex = 0)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetRunStep");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->GetRunStep");
            }

            // verify the required parameter 'stepId' is set
            if (stepId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'stepId' when calling AssistantsApi->GetRunStep");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(runId)); // path parameter
            localVarRequestOptions.PathParameters.Add("step_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(stepId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.GetRunStep";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RunStepObject>("/threads/{thread_id}/runs/{run_id}/steps/{step_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunStep", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a run step. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
        /// <param name="runId">The ID of the run to which the run step belongs.</param>
        /// <param name="stepId">The ID of the run step to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunStepObject</returns>
        public async System.Threading.Tasks.Task<RunStepObject> GetRunStepAsync(string threadId, string runId, string stepId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RunStepObject> localVarResponse = await GetRunStepWithHttpInfoAsync(threadId, runId, stepId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a run step. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
        /// <param name="runId">The ID of the run to which the run step belongs.</param>
        /// <param name="stepId">The ID of the run step to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunStepObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RunStepObject>> GetRunStepWithHttpInfoAsync(string threadId, string runId, string stepId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetRunStep");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->GetRunStep");
            }

            // verify the required parameter 'stepId' is set
            if (stepId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'stepId' when calling AssistantsApi->GetRunStep");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(runId)); // path parameter
            localVarRequestOptions.PathParameters.Add("step_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(stepId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.GetRunStep";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RunStepObject>("/threads/{thread_id}/runs/{run_id}/steps/{step_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunStep", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ThreadObject</returns>
        public ThreadObject GetThread(string threadId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ThreadObject> localVarResponse = GetThreadWithHttpInfo(threadId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ThreadObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<ThreadObject> GetThreadWithHttpInfo(string threadId, int operationIndex = 0)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetThread");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.GetThread";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ThreadObject>("/threads/{thread_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetThread", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThreadObject</returns>
        public async System.Threading.Tasks.Task<ThreadObject> GetThreadAsync(string threadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ThreadObject> localVarResponse = await GetThreadWithHttpInfoAsync(threadId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThreadObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ThreadObject>> GetThreadWithHttpInfoAsync(string threadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetThread");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter

            localVarRequestOptions.Operation = "AssistantsApi.GetThread";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ThreadObject>("/threads/{thread_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetThread", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of assistant files. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAssistantFilesResponse</returns>
        public ListAssistantFilesResponse ListAssistantFiles(string assistantId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ListAssistantFilesResponse> localVarResponse = ListAssistantFilesWithHttpInfo(assistantId, limit, order, after, before);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of assistant files. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAssistantFilesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ListAssistantFilesResponse> ListAssistantFilesWithHttpInfo(string assistantId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->ListAssistantFiles");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assistant_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assistantId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "AssistantsApi.ListAssistantFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAssistantFilesResponse>("/assistants/{assistant_id}/files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssistantFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of assistant files. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAssistantFilesResponse</returns>
        public async System.Threading.Tasks.Task<ListAssistantFilesResponse> ListAssistantFilesAsync(string assistantId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ListAssistantFilesResponse> localVarResponse = await ListAssistantFilesWithHttpInfoAsync(assistantId, limit, order, after, before, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of assistant files. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAssistantFilesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ListAssistantFilesResponse>> ListAssistantFilesWithHttpInfoAsync(string assistantId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->ListAssistantFiles");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assistant_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assistantId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "AssistantsApi.ListAssistantFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAssistantFilesResponse>("/assistants/{assistant_id}/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssistantFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of assistants. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAssistantsResponse</returns>
        public ListAssistantsResponse ListAssistants(int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ListAssistantsResponse> localVarResponse = ListAssistantsWithHttpInfo(limit, order, after, before);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of assistants. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAssistantsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ListAssistantsResponse> ListAssistantsWithHttpInfo(int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "AssistantsApi.ListAssistants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAssistantsResponse>("/assistants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssistants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of assistants. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAssistantsResponse</returns>
        public async System.Threading.Tasks.Task<ListAssistantsResponse> ListAssistantsAsync(int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ListAssistantsResponse> localVarResponse = await ListAssistantsWithHttpInfoAsync(limit, order, after, before, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of assistants. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAssistantsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ListAssistantsResponse>> ListAssistantsWithHttpInfoAsync(int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "AssistantsApi.ListAssistants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAssistantsResponse>("/assistants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssistants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of message files. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
        /// <param name="messageId">The ID of the message that the files belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListMessageFilesResponse</returns>
        public ListMessageFilesResponse ListMessageFiles(string threadId, string messageId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ListMessageFilesResponse> localVarResponse = ListMessageFilesWithHttpInfo(threadId, messageId, limit, order, after, before);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of message files. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
        /// <param name="messageId">The ID of the message that the files belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListMessageFilesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ListMessageFilesResponse> ListMessageFilesWithHttpInfo(string threadId, string messageId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ListMessageFiles");
            }

            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'messageId' when calling AssistantsApi->ListMessageFiles");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("message_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "AssistantsApi.ListMessageFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListMessageFilesResponse>("/threads/{thread_id}/messages/{message_id}/files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMessageFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of message files. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
        /// <param name="messageId">The ID of the message that the files belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListMessageFilesResponse</returns>
        public async System.Threading.Tasks.Task<ListMessageFilesResponse> ListMessageFilesAsync(string threadId, string messageId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ListMessageFilesResponse> localVarResponse = await ListMessageFilesWithHttpInfoAsync(threadId, messageId, limit, order, after, before, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of message files. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
        /// <param name="messageId">The ID of the message that the files belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListMessageFilesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ListMessageFilesResponse>> ListMessageFilesWithHttpInfoAsync(string threadId, string messageId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ListMessageFiles");
            }

            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'messageId' when calling AssistantsApi->ListMessageFiles");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("message_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "AssistantsApi.ListMessageFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListMessageFilesResponse>("/threads/{thread_id}/messages/{message_id}/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMessageFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of messages for a given thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="runId">Filter messages by the run ID that generated them.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListMessagesResponse</returns>
        public ListMessagesResponse ListMessages(string threadId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), string? runId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ListMessagesResponse> localVarResponse = ListMessagesWithHttpInfo(threadId, limit, order, after, before, runId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of messages for a given thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="runId">Filter messages by the run ID that generated them.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListMessagesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ListMessagesResponse> ListMessagesWithHttpInfo(string threadId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), string? runId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ListMessages");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (runId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "run_id", runId));
            }

            localVarRequestOptions.Operation = "AssistantsApi.ListMessages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListMessagesResponse>("/threads/{thread_id}/messages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of messages for a given thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="runId">Filter messages by the run ID that generated them.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListMessagesResponse</returns>
        public async System.Threading.Tasks.Task<ListMessagesResponse> ListMessagesAsync(string threadId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), string? runId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ListMessagesResponse> localVarResponse = await ListMessagesWithHttpInfoAsync(threadId, limit, order, after, before, runId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of messages for a given thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="runId">Filter messages by the run ID that generated them.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ListMessagesResponse>> ListMessagesWithHttpInfoAsync(string threadId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), string? runId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ListMessages");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (runId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "run_id", runId));
            }

            localVarRequestOptions.Operation = "AssistantsApi.ListMessages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListMessagesResponse>("/threads/{thread_id}/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of run steps belonging to a run. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
        /// <param name="runId">The ID of the run the run steps belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListRunStepsResponse</returns>
        public ListRunStepsResponse ListRunSteps(string threadId, string runId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ListRunStepsResponse> localVarResponse = ListRunStepsWithHttpInfo(threadId, runId, limit, order, after, before);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of run steps belonging to a run. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
        /// <param name="runId">The ID of the run the run steps belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListRunStepsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ListRunStepsResponse> ListRunStepsWithHttpInfo(string threadId, string runId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ListRunSteps");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->ListRunSteps");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(runId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "AssistantsApi.ListRunSteps";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListRunStepsResponse>("/threads/{thread_id}/runs/{run_id}/steps", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRunSteps", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of run steps belonging to a run. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
        /// <param name="runId">The ID of the run the run steps belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRunStepsResponse</returns>
        public async System.Threading.Tasks.Task<ListRunStepsResponse> ListRunStepsAsync(string threadId, string runId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ListRunStepsResponse> localVarResponse = await ListRunStepsWithHttpInfoAsync(threadId, runId, limit, order, after, before, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of run steps belonging to a run. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
        /// <param name="runId">The ID of the run the run steps belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRunStepsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ListRunStepsResponse>> ListRunStepsWithHttpInfoAsync(string threadId, string runId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ListRunSteps");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->ListRunSteps");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(runId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "AssistantsApi.ListRunSteps";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListRunStepsResponse>("/threads/{thread_id}/runs/{run_id}/steps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRunSteps", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of runs belonging to a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListRunsResponse</returns>
        public ListRunsResponse ListRuns(string threadId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ListRunsResponse> localVarResponse = ListRunsWithHttpInfo(threadId, limit, order, after, before);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of runs belonging to a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListRunsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ListRunsResponse> ListRunsWithHttpInfo(string threadId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ListRuns");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "AssistantsApi.ListRuns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListRunsResponse>("/threads/{thread_id}/runs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRuns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of runs belonging to a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRunsResponse</returns>
        public async System.Threading.Tasks.Task<ListRunsResponse> ListRunsAsync(string threadId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ListRunsResponse> localVarResponse = await ListRunsWithHttpInfoAsync(threadId, limit, order, after, before, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of runs belonging to a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRunsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ListRunsResponse>> ListRunsWithHttpInfoAsync(string threadId, int? limit = default(int?), string? order = default(string?), string? after = default(string?), string? before = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ListRuns");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "AssistantsApi.ListRuns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListRunsResponse>("/threads/{thread_id}/runs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRuns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modifies an assistant. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to modify.</param>
        /// <param name="modifyAssistantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssistantObject</returns>
        public AssistantObject ModifyAssistant(string assistantId, ModifyAssistantRequest modifyAssistantRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AssistantObject> localVarResponse = ModifyAssistantWithHttpInfo(assistantId, modifyAssistantRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies an assistant. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to modify.</param>
        /// <param name="modifyAssistantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssistantObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<AssistantObject> ModifyAssistantWithHttpInfo(string assistantId, ModifyAssistantRequest modifyAssistantRequest, int operationIndex = 0)
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->ModifyAssistant");
            }

            // verify the required parameter 'modifyAssistantRequest' is set
            if (modifyAssistantRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modifyAssistantRequest' when calling AssistantsApi->ModifyAssistant");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assistant_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assistantId)); // path parameter
            localVarRequestOptions.Data = modifyAssistantRequest;

            localVarRequestOptions.Operation = "AssistantsApi.ModifyAssistant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AssistantObject>("/assistants/{assistant_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyAssistant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modifies an assistant. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to modify.</param>
        /// <param name="modifyAssistantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssistantObject</returns>
        public async System.Threading.Tasks.Task<AssistantObject> ModifyAssistantAsync(string assistantId, ModifyAssistantRequest modifyAssistantRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AssistantObject> localVarResponse = await ModifyAssistantWithHttpInfoAsync(assistantId, modifyAssistantRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies an assistant. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to modify.</param>
        /// <param name="modifyAssistantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssistantObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AssistantObject>> ModifyAssistantWithHttpInfoAsync(string assistantId, ModifyAssistantRequest modifyAssistantRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->ModifyAssistant");
            }

            // verify the required parameter 'modifyAssistantRequest' is set
            if (modifyAssistantRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modifyAssistantRequest' when calling AssistantsApi->ModifyAssistant");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assistant_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assistantId)); // path parameter
            localVarRequestOptions.Data = modifyAssistantRequest;

            localVarRequestOptions.Operation = "AssistantsApi.ModifyAssistant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AssistantObject>("/assistants/{assistant_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyAssistant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modifies a message. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to modify.</param>
        /// <param name="modifyMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageObject</returns>
        public MessageObject ModifyMessage(string threadId, string messageId, ModifyMessageRequest modifyMessageRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<MessageObject> localVarResponse = ModifyMessageWithHttpInfo(threadId, messageId, modifyMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies a message. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to modify.</param>
        /// <param name="modifyMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<MessageObject> ModifyMessageWithHttpInfo(string threadId, string messageId, ModifyMessageRequest modifyMessageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ModifyMessage");
            }

            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'messageId' when calling AssistantsApi->ModifyMessage");
            }

            // verify the required parameter 'modifyMessageRequest' is set
            if (modifyMessageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modifyMessageRequest' when calling AssistantsApi->ModifyMessage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("message_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            localVarRequestOptions.Data = modifyMessageRequest;

            localVarRequestOptions.Operation = "AssistantsApi.ModifyMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MessageObject>("/threads/{thread_id}/messages/{message_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modifies a message. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to modify.</param>
        /// <param name="modifyMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageObject</returns>
        public async System.Threading.Tasks.Task<MessageObject> ModifyMessageAsync(string threadId, string messageId, ModifyMessageRequest modifyMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<MessageObject> localVarResponse = await ModifyMessageWithHttpInfoAsync(threadId, messageId, modifyMessageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies a message. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to modify.</param>
        /// <param name="modifyMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<MessageObject>> ModifyMessageWithHttpInfoAsync(string threadId, string messageId, ModifyMessageRequest modifyMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ModifyMessage");
            }

            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'messageId' when calling AssistantsApi->ModifyMessage");
            }

            // verify the required parameter 'modifyMessageRequest' is set
            if (modifyMessageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modifyMessageRequest' when calling AssistantsApi->ModifyMessage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("message_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            localVarRequestOptions.Data = modifyMessageRequest;

            localVarRequestOptions.Operation = "AssistantsApi.ModifyMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MessageObject>("/threads/{thread_id}/messages/{message_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modifies a run. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to modify.</param>
        /// <param name="modifyRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunObject</returns>
        public RunObject ModifyRun(string threadId, string runId, ModifyRunRequest modifyRunRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<RunObject> localVarResponse = ModifyRunWithHttpInfo(threadId, runId, modifyRunRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies a run. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to modify.</param>
        /// <param name="modifyRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<RunObject> ModifyRunWithHttpInfo(string threadId, string runId, ModifyRunRequest modifyRunRequest, int operationIndex = 0)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ModifyRun");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->ModifyRun");
            }

            // verify the required parameter 'modifyRunRequest' is set
            if (modifyRunRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modifyRunRequest' when calling AssistantsApi->ModifyRun");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(runId)); // path parameter
            localVarRequestOptions.Data = modifyRunRequest;

            localVarRequestOptions.Operation = "AssistantsApi.ModifyRun";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RunObject>("/threads/{thread_id}/runs/{run_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modifies a run. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to modify.</param>
        /// <param name="modifyRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunObject</returns>
        public async System.Threading.Tasks.Task<RunObject> ModifyRunAsync(string threadId, string runId, ModifyRunRequest modifyRunRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RunObject> localVarResponse = await ModifyRunWithHttpInfoAsync(threadId, runId, modifyRunRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies a run. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to modify.</param>
        /// <param name="modifyRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RunObject>> ModifyRunWithHttpInfoAsync(string threadId, string runId, ModifyRunRequest modifyRunRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ModifyRun");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->ModifyRun");
            }

            // verify the required parameter 'modifyRunRequest' is set
            if (modifyRunRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modifyRunRequest' when calling AssistantsApi->ModifyRun");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(runId)); // path parameter
            localVarRequestOptions.Data = modifyRunRequest;

            localVarRequestOptions.Operation = "AssistantsApi.ModifyRun";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RunObject>("/threads/{thread_id}/runs/{run_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modifies a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
        /// <param name="modifyThreadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ThreadObject</returns>
        public ThreadObject ModifyThread(string threadId, ModifyThreadRequest modifyThreadRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ThreadObject> localVarResponse = ModifyThreadWithHttpInfo(threadId, modifyThreadRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
        /// <param name="modifyThreadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ThreadObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<ThreadObject> ModifyThreadWithHttpInfo(string threadId, ModifyThreadRequest modifyThreadRequest, int operationIndex = 0)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ModifyThread");
            }

            // verify the required parameter 'modifyThreadRequest' is set
            if (modifyThreadRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modifyThreadRequest' when calling AssistantsApi->ModifyThread");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.Data = modifyThreadRequest;

            localVarRequestOptions.Operation = "AssistantsApi.ModifyThread";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ThreadObject>("/threads/{thread_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyThread", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modifies a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
        /// <param name="modifyThreadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThreadObject</returns>
        public async System.Threading.Tasks.Task<ThreadObject> ModifyThreadAsync(string threadId, ModifyThreadRequest modifyThreadRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ThreadObject> localVarResponse = await ModifyThreadWithHttpInfoAsync(threadId, modifyThreadRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies a thread. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
        /// <param name="modifyThreadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThreadObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ThreadObject>> ModifyThreadWithHttpInfoAsync(string threadId, ModifyThreadRequest modifyThreadRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ModifyThread");
            }

            // verify the required parameter 'modifyThreadRequest' is set
            if (modifyThreadRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modifyThreadRequest' when calling AssistantsApi->ModifyThread");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.Data = modifyThreadRequest;

            localVarRequestOptions.Operation = "AssistantsApi.ModifyThread";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ThreadObject>("/threads/{thread_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyThread", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
        /// <param name="runId">The ID of the run that requires the tool output submission.</param>
        /// <param name="submitToolOutputsRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunObject</returns>
        public RunObject SubmitToolOuputsToRun(string threadId, string runId, SubmitToolOutputsRunRequest submitToolOutputsRunRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<RunObject> localVarResponse = SubmitToolOuputsToRunWithHttpInfo(threadId, runId, submitToolOutputsRunRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
        /// <param name="runId">The ID of the run that requires the tool output submission.</param>
        /// <param name="submitToolOutputsRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<RunObject> SubmitToolOuputsToRunWithHttpInfo(string threadId, string runId, SubmitToolOutputsRunRequest submitToolOutputsRunRequest, int operationIndex = 0)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->SubmitToolOuputsToRun");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->SubmitToolOuputsToRun");
            }

            // verify the required parameter 'submitToolOutputsRunRequest' is set
            if (submitToolOutputsRunRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'submitToolOutputsRunRequest' when calling AssistantsApi->SubmitToolOuputsToRun");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(runId)); // path parameter
            localVarRequestOptions.Data = submitToolOutputsRunRequest;

            localVarRequestOptions.Operation = "AssistantsApi.SubmitToolOuputsToRun";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RunObject>("/threads/{thread_id}/runs/{run_id}/submit_tool_outputs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitToolOuputsToRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
        /// <param name="runId">The ID of the run that requires the tool output submission.</param>
        /// <param name="submitToolOutputsRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunObject</returns>
        public async System.Threading.Tasks.Task<RunObject> SubmitToolOuputsToRunAsync(string threadId, string runId, SubmitToolOutputsRunRequest submitToolOutputsRunRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RunObject> localVarResponse = await SubmitToolOuputsToRunWithHttpInfoAsync(threadId, runId, submitToolOutputsRunRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
        /// <param name="runId">The ID of the run that requires the tool output submission.</param>
        /// <param name="submitToolOutputsRunRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RunObject>> SubmitToolOuputsToRunWithHttpInfoAsync(string threadId, string runId, SubmitToolOutputsRunRequest submitToolOutputsRunRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->SubmitToolOuputsToRun");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->SubmitToolOuputsToRun");
            }

            // verify the required parameter 'submitToolOutputsRunRequest' is set
            if (submitToolOutputsRunRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'submitToolOutputsRunRequest' when calling AssistantsApi->SubmitToolOuputsToRun");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("thread_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(runId)); // path parameter
            localVarRequestOptions.Data = submitToolOutputsRunRequest;

            localVarRequestOptions.Operation = "AssistantsApi.SubmitToolOuputsToRun";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RunObject>("/threads/{thread_id}/runs/{run_id}/submit_tool_outputs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitToolOuputsToRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
