/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFineTuningApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Immediately cancel a fine-tune job. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to cancel. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FineTuningJob</returns>
        FineTuningJob CancelFineTuningJob(string fineTuningJobId, int operationIndex = 0);

        /// <summary>
        /// Immediately cancel a fine-tune job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to cancel. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FineTuningJob</returns>
        ApiResponse<FineTuningJob> CancelFineTuningJobWithHttpInfo(string fineTuningJobId, int operationIndex = 0);
        /// <summary>
        /// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFineTuningJobRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FineTuningJob</returns>
        FineTuningJob CreateFineTuningJob(CreateFineTuningJobRequest createFineTuningJobRequest, int operationIndex = 0);

        /// <summary>
        /// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFineTuningJobRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FineTuningJob</returns>
        ApiResponse<FineTuningJob> CreateFineTuningJobWithHttpInfo(CreateFineTuningJobRequest createFineTuningJobRequest, int operationIndex = 0);
        /// <summary>
        /// Get status updates for a fine-tuning job. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get events for. </param>
        /// <param name="after">Identifier for the last event from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of events to retrieve. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListFineTuningJobEventsResponse</returns>
        ListFineTuningJobEventsResponse ListFineTuningEvents(string fineTuningJobId, string? after = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get status updates for a fine-tuning job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get events for. </param>
        /// <param name="after">Identifier for the last event from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of events to retrieve. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListFineTuningJobEventsResponse</returns>
        ApiResponse<ListFineTuningJobEventsResponse> ListFineTuningEventsWithHttpInfo(string fineTuningJobId, string? after = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List checkpoints for a fine-tuning job. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get checkpoints for. </param>
        /// <param name="after">Identifier for the last checkpoint ID from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of checkpoints to retrieve. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListFineTuningJobCheckpointsResponse</returns>
        ListFineTuningJobCheckpointsResponse ListFineTuningJobCheckpoints(string fineTuningJobId, string? after = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List checkpoints for a fine-tuning job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get checkpoints for. </param>
        /// <param name="after">Identifier for the last checkpoint ID from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of checkpoints to retrieve. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListFineTuningJobCheckpointsResponse</returns>
        ApiResponse<ListFineTuningJobCheckpointsResponse> ListFineTuningJobCheckpointsWithHttpInfo(string fineTuningJobId, string? after = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List your organization&#39;s fine-tuning jobs 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Identifier for the last job from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of fine-tuning jobs to retrieve. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListPaginatedFineTuningJobsResponse</returns>
        ListPaginatedFineTuningJobsResponse ListPaginatedFineTuningJobs(string? after = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List your organization&#39;s fine-tuning jobs 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Identifier for the last job from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of fine-tuning jobs to retrieve. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListPaginatedFineTuningJobsResponse</returns>
        ApiResponse<ListPaginatedFineTuningJobsResponse> ListPaginatedFineTuningJobsWithHttpInfo(string? after = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FineTuningJob</returns>
        FineTuningJob RetrieveFineTuningJob(string fineTuningJobId, int operationIndex = 0);

        /// <summary>
        /// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FineTuningJob</returns>
        ApiResponse<FineTuningJob> RetrieveFineTuningJobWithHttpInfo(string fineTuningJobId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFineTuningApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Immediately cancel a fine-tune job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to cancel. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FineTuningJob</returns>
        System.Threading.Tasks.Task<FineTuningJob> CancelFineTuningJobAsync(string fineTuningJobId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Immediately cancel a fine-tune job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to cancel. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FineTuningJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<FineTuningJob>> CancelFineTuningJobWithHttpInfoAsync(string fineTuningJobId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFineTuningJobRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FineTuningJob</returns>
        System.Threading.Tasks.Task<FineTuningJob> CreateFineTuningJobAsync(CreateFineTuningJobRequest createFineTuningJobRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFineTuningJobRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FineTuningJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<FineTuningJob>> CreateFineTuningJobWithHttpInfoAsync(CreateFineTuningJobRequest createFineTuningJobRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get status updates for a fine-tuning job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get events for. </param>
        /// <param name="after">Identifier for the last event from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of events to retrieve. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFineTuningJobEventsResponse</returns>
        System.Threading.Tasks.Task<ListFineTuningJobEventsResponse> ListFineTuningEventsAsync(string fineTuningJobId, string? after = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get status updates for a fine-tuning job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get events for. </param>
        /// <param name="after">Identifier for the last event from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of events to retrieve. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFineTuningJobEventsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFineTuningJobEventsResponse>> ListFineTuningEventsWithHttpInfoAsync(string fineTuningJobId, string? after = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List checkpoints for a fine-tuning job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get checkpoints for. </param>
        /// <param name="after">Identifier for the last checkpoint ID from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of checkpoints to retrieve. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFineTuningJobCheckpointsResponse</returns>
        System.Threading.Tasks.Task<ListFineTuningJobCheckpointsResponse> ListFineTuningJobCheckpointsAsync(string fineTuningJobId, string? after = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List checkpoints for a fine-tuning job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get checkpoints for. </param>
        /// <param name="after">Identifier for the last checkpoint ID from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of checkpoints to retrieve. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFineTuningJobCheckpointsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFineTuningJobCheckpointsResponse>> ListFineTuningJobCheckpointsWithHttpInfoAsync(string fineTuningJobId, string? after = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List your organization&#39;s fine-tuning jobs 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Identifier for the last job from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of fine-tuning jobs to retrieve. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListPaginatedFineTuningJobsResponse</returns>
        System.Threading.Tasks.Task<ListPaginatedFineTuningJobsResponse> ListPaginatedFineTuningJobsAsync(string? after = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List your organization&#39;s fine-tuning jobs 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Identifier for the last job from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of fine-tuning jobs to retrieve. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListPaginatedFineTuningJobsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPaginatedFineTuningJobsResponse>> ListPaginatedFineTuningJobsWithHttpInfoAsync(string? after = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FineTuningJob</returns>
        System.Threading.Tasks.Task<FineTuningJob> RetrieveFineTuningJobAsync(string fineTuningJobId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FineTuningJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<FineTuningJob>> RetrieveFineTuningJobWithHttpInfoAsync(string fineTuningJobId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFineTuningApi : IFineTuningApiSync, IFineTuningApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FineTuningApi : IFineTuningApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FineTuningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FineTuningApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FineTuningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FineTuningApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FineTuningApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FineTuningApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FineTuningApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FineTuningApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Immediately cancel a fine-tune job.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to cancel. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FineTuningJob</returns>
        public FineTuningJob CancelFineTuningJob(string fineTuningJobId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<FineTuningJob> localVarResponse = CancelFineTuningJobWithHttpInfo(fineTuningJobId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Immediately cancel a fine-tune job.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to cancel. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FineTuningJob</returns>
        public Org.OpenAPITools.Client.ApiResponse<FineTuningJob> CancelFineTuningJobWithHttpInfo(string fineTuningJobId, int operationIndex = 0)
        {
            // verify the required parameter 'fineTuningJobId' is set
            if (fineTuningJobId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fineTuningJobId' when calling FineTuningApi->CancelFineTuningJob");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fine_tuning_job_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fineTuningJobId)); // path parameter

            localVarRequestOptions.Operation = "FineTuningApi.CancelFineTuningJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FineTuningJob>("/fine_tuning/jobs/{fine_tuning_job_id}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelFineTuningJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Immediately cancel a fine-tune job.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to cancel. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FineTuningJob</returns>
        public async System.Threading.Tasks.Task<FineTuningJob> CancelFineTuningJobAsync(string fineTuningJobId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<FineTuningJob> localVarResponse = await CancelFineTuningJobWithHttpInfoAsync(fineTuningJobId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Immediately cancel a fine-tune job.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to cancel. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FineTuningJob)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<FineTuningJob>> CancelFineTuningJobWithHttpInfoAsync(string fineTuningJobId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'fineTuningJobId' is set
            if (fineTuningJobId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fineTuningJobId' when calling FineTuningApi->CancelFineTuningJob");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fine_tuning_job_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fineTuningJobId)); // path parameter

            localVarRequestOptions.Operation = "FineTuningApi.CancelFineTuningJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FineTuningJob>("/fine_tuning/jobs/{fine_tuning_job_id}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelFineTuningJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning)  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFineTuningJobRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FineTuningJob</returns>
        public FineTuningJob CreateFineTuningJob(CreateFineTuningJobRequest createFineTuningJobRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<FineTuningJob> localVarResponse = CreateFineTuningJobWithHttpInfo(createFineTuningJobRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning)  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFineTuningJobRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FineTuningJob</returns>
        public Org.OpenAPITools.Client.ApiResponse<FineTuningJob> CreateFineTuningJobWithHttpInfo(CreateFineTuningJobRequest createFineTuningJobRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createFineTuningJobRequest' is set
            if (createFineTuningJobRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createFineTuningJobRequest' when calling FineTuningApi->CreateFineTuningJob");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFineTuningJobRequest;

            localVarRequestOptions.Operation = "FineTuningApi.CreateFineTuningJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FineTuningJob>("/fine_tuning/jobs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFineTuningJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning)  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFineTuningJobRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FineTuningJob</returns>
        public async System.Threading.Tasks.Task<FineTuningJob> CreateFineTuningJobAsync(CreateFineTuningJobRequest createFineTuningJobRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<FineTuningJob> localVarResponse = await CreateFineTuningJobWithHttpInfoAsync(createFineTuningJobRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning)  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFineTuningJobRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FineTuningJob)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<FineTuningJob>> CreateFineTuningJobWithHttpInfoAsync(CreateFineTuningJobRequest createFineTuningJobRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createFineTuningJobRequest' is set
            if (createFineTuningJobRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createFineTuningJobRequest' when calling FineTuningApi->CreateFineTuningJob");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFineTuningJobRequest;

            localVarRequestOptions.Operation = "FineTuningApi.CreateFineTuningJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FineTuningJob>("/fine_tuning/jobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFineTuningJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get status updates for a fine-tuning job.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get events for. </param>
        /// <param name="after">Identifier for the last event from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of events to retrieve. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListFineTuningJobEventsResponse</returns>
        public ListFineTuningJobEventsResponse ListFineTuningEvents(string fineTuningJobId, string? after = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ListFineTuningJobEventsResponse> localVarResponse = ListFineTuningEventsWithHttpInfo(fineTuningJobId, after, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get status updates for a fine-tuning job.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get events for. </param>
        /// <param name="after">Identifier for the last event from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of events to retrieve. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListFineTuningJobEventsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ListFineTuningJobEventsResponse> ListFineTuningEventsWithHttpInfo(string fineTuningJobId, string? after = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'fineTuningJobId' is set
            if (fineTuningJobId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fineTuningJobId' when calling FineTuningApi->ListFineTuningEvents");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fine_tuning_job_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fineTuningJobId)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "FineTuningApi.ListFineTuningEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListFineTuningJobEventsResponse>("/fine_tuning/jobs/{fine_tuning_job_id}/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFineTuningEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get status updates for a fine-tuning job.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get events for. </param>
        /// <param name="after">Identifier for the last event from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of events to retrieve. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFineTuningJobEventsResponse</returns>
        public async System.Threading.Tasks.Task<ListFineTuningJobEventsResponse> ListFineTuningEventsAsync(string fineTuningJobId, string? after = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ListFineTuningJobEventsResponse> localVarResponse = await ListFineTuningEventsWithHttpInfoAsync(fineTuningJobId, after, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get status updates for a fine-tuning job.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get events for. </param>
        /// <param name="after">Identifier for the last event from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of events to retrieve. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFineTuningJobEventsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ListFineTuningJobEventsResponse>> ListFineTuningEventsWithHttpInfoAsync(string fineTuningJobId, string? after = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'fineTuningJobId' is set
            if (fineTuningJobId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fineTuningJobId' when calling FineTuningApi->ListFineTuningEvents");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fine_tuning_job_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fineTuningJobId)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "FineTuningApi.ListFineTuningEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListFineTuningJobEventsResponse>("/fine_tuning/jobs/{fine_tuning_job_id}/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFineTuningEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List checkpoints for a fine-tuning job.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get checkpoints for. </param>
        /// <param name="after">Identifier for the last checkpoint ID from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of checkpoints to retrieve. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListFineTuningJobCheckpointsResponse</returns>
        public ListFineTuningJobCheckpointsResponse ListFineTuningJobCheckpoints(string fineTuningJobId, string? after = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ListFineTuningJobCheckpointsResponse> localVarResponse = ListFineTuningJobCheckpointsWithHttpInfo(fineTuningJobId, after, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List checkpoints for a fine-tuning job.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get checkpoints for. </param>
        /// <param name="after">Identifier for the last checkpoint ID from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of checkpoints to retrieve. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListFineTuningJobCheckpointsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ListFineTuningJobCheckpointsResponse> ListFineTuningJobCheckpointsWithHttpInfo(string fineTuningJobId, string? after = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'fineTuningJobId' is set
            if (fineTuningJobId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fineTuningJobId' when calling FineTuningApi->ListFineTuningJobCheckpoints");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fine_tuning_job_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fineTuningJobId)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "FineTuningApi.ListFineTuningJobCheckpoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListFineTuningJobCheckpointsResponse>("/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFineTuningJobCheckpoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List checkpoints for a fine-tuning job.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get checkpoints for. </param>
        /// <param name="after">Identifier for the last checkpoint ID from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of checkpoints to retrieve. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFineTuningJobCheckpointsResponse</returns>
        public async System.Threading.Tasks.Task<ListFineTuningJobCheckpointsResponse> ListFineTuningJobCheckpointsAsync(string fineTuningJobId, string? after = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ListFineTuningJobCheckpointsResponse> localVarResponse = await ListFineTuningJobCheckpointsWithHttpInfoAsync(fineTuningJobId, after, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List checkpoints for a fine-tuning job.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get checkpoints for. </param>
        /// <param name="after">Identifier for the last checkpoint ID from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of checkpoints to retrieve. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFineTuningJobCheckpointsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ListFineTuningJobCheckpointsResponse>> ListFineTuningJobCheckpointsWithHttpInfoAsync(string fineTuningJobId, string? after = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'fineTuningJobId' is set
            if (fineTuningJobId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fineTuningJobId' when calling FineTuningApi->ListFineTuningJobCheckpoints");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fine_tuning_job_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fineTuningJobId)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "FineTuningApi.ListFineTuningJobCheckpoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListFineTuningJobCheckpointsResponse>("/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFineTuningJobCheckpoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List your organization&#39;s fine-tuning jobs  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Identifier for the last job from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of fine-tuning jobs to retrieve. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListPaginatedFineTuningJobsResponse</returns>
        public ListPaginatedFineTuningJobsResponse ListPaginatedFineTuningJobs(string? after = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ListPaginatedFineTuningJobsResponse> localVarResponse = ListPaginatedFineTuningJobsWithHttpInfo(after, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List your organization&#39;s fine-tuning jobs  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Identifier for the last job from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of fine-tuning jobs to retrieve. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListPaginatedFineTuningJobsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ListPaginatedFineTuningJobsResponse> ListPaginatedFineTuningJobsWithHttpInfo(string? after = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "FineTuningApi.ListPaginatedFineTuningJobs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListPaginatedFineTuningJobsResponse>("/fine_tuning/jobs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPaginatedFineTuningJobs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List your organization&#39;s fine-tuning jobs  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Identifier for the last job from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of fine-tuning jobs to retrieve. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListPaginatedFineTuningJobsResponse</returns>
        public async System.Threading.Tasks.Task<ListPaginatedFineTuningJobsResponse> ListPaginatedFineTuningJobsAsync(string? after = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ListPaginatedFineTuningJobsResponse> localVarResponse = await ListPaginatedFineTuningJobsWithHttpInfoAsync(after, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List your organization&#39;s fine-tuning jobs  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Identifier for the last job from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of fine-tuning jobs to retrieve. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListPaginatedFineTuningJobsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ListPaginatedFineTuningJobsResponse>> ListPaginatedFineTuningJobsWithHttpInfoAsync(string? after = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "FineTuningApi.ListPaginatedFineTuningJobs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListPaginatedFineTuningJobsResponse>("/fine_tuning/jobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPaginatedFineTuningJobs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning)  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FineTuningJob</returns>
        public FineTuningJob RetrieveFineTuningJob(string fineTuningJobId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<FineTuningJob> localVarResponse = RetrieveFineTuningJobWithHttpInfo(fineTuningJobId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning)  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FineTuningJob</returns>
        public Org.OpenAPITools.Client.ApiResponse<FineTuningJob> RetrieveFineTuningJobWithHttpInfo(string fineTuningJobId, int operationIndex = 0)
        {
            // verify the required parameter 'fineTuningJobId' is set
            if (fineTuningJobId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fineTuningJobId' when calling FineTuningApi->RetrieveFineTuningJob");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fine_tuning_job_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fineTuningJobId)); // path parameter

            localVarRequestOptions.Operation = "FineTuningApi.RetrieveFineTuningJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FineTuningJob>("/fine_tuning/jobs/{fine_tuning_job_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveFineTuningJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning)  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FineTuningJob</returns>
        public async System.Threading.Tasks.Task<FineTuningJob> RetrieveFineTuningJobAsync(string fineTuningJobId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<FineTuningJob> localVarResponse = await RetrieveFineTuningJobWithHttpInfoAsync(fineTuningJobId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning)  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FineTuningJob)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<FineTuningJob>> RetrieveFineTuningJobWithHttpInfoAsync(string fineTuningJobId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'fineTuningJobId' is set
            if (fineTuningJobId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fineTuningJobId' when calling FineTuningApi->RetrieveFineTuningJob");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fine_tuning_job_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fineTuningJobId)); // path parameter

            localVarRequestOptions.Operation = "FineTuningApi.RetrieveFineTuningJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FineTuningJob>("/fine_tuning/jobs/{fine_tuning_job_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveFineTuningJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
