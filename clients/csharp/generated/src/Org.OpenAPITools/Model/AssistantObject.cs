/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents an &#x60;assistant&#x60; that can call the model and use tools.
    /// </summary>
    [DataContract(Name = "AssistantObject")]
    public partial class AssistantObject : IValidatableObject
    {
        /// <summary>
        /// The object type, which is always &#x60;assistant&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;assistant&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Assistant for value: assistant
            /// </summary>
            [EnumMember(Value = "assistant")]
            Assistant = 1
        }


        /// <summary>
        /// The object type, which is always &#x60;assistant&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;assistant&#x60;.</value>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = true)]
        public ObjectEnum Object { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssistantObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantObject" /> class.
        /// </summary>
        /// <param name="id">The identifier, which can be referenced in API endpoints. (required).</param>
        /// <param name="varObject">The object type, which is always &#x60;assistant&#x60;. (required).</param>
        /// <param name="createdAt">The Unix timestamp (in seconds) for when the assistant was created. (required).</param>
        /// <param name="name">The name of the assistant. The maximum length is 256 characters.  (required).</param>
        /// <param name="description">The description of the assistant. The maximum length is 512 characters.  (required).</param>
        /// <param name="model">ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.  (required).</param>
        /// <param name="instructions">The system instructions that the assistant uses. The maximum length is 256,000 characters.  (required).</param>
        /// <param name="tools">A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types &#x60;code_interpreter&#x60;, &#x60;retrieval&#x60;, or &#x60;function&#x60;.  (required).</param>
        /// <param name="fileIds">A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.  (required).</param>
        /// <param name="metadata">Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.  (required).</param>
        public AssistantObject(string id = default(string), ObjectEnum varObject = default(ObjectEnum), int createdAt = default(int), string name = default(string), string description = default(string), string model = default(string), string instructions = default(string), List<AssistantObjectToolsInner> tools = default(List<AssistantObjectToolsInner>), List<string> fileIds = default(List<string>), Object metadata = default(Object))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for AssistantObject and cannot be null");
            }
            this.Id = id;
            this.Object = varObject;
            this.CreatedAt = createdAt;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for AssistantObject and cannot be null");
            }
            this.Name = name;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for AssistantObject and cannot be null");
            }
            this.Description = description;
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new ArgumentNullException("model is a required property for AssistantObject and cannot be null");
            }
            this.Model = model;
            // to ensure "instructions" is required (not null)
            if (instructions == null)
            {
                throw new ArgumentNullException("instructions is a required property for AssistantObject and cannot be null");
            }
            this.Instructions = instructions;
            // to ensure "tools" is required (not null)
            if (tools == null)
            {
                throw new ArgumentNullException("tools is a required property for AssistantObject and cannot be null");
            }
            this.Tools = tools;
            // to ensure "fileIds" is required (not null)
            if (fileIds == null)
            {
                throw new ArgumentNullException("fileIds is a required property for AssistantObject and cannot be null");
            }
            this.FileIds = fileIds;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for AssistantObject and cannot be null");
            }
            this.Metadata = metadata;
        }

        /// <summary>
        /// The identifier, which can be referenced in API endpoints.
        /// </summary>
        /// <value>The identifier, which can be referenced in API endpoints.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the assistant was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the assistant was created.</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// The name of the assistant. The maximum length is 256 characters. 
        /// </summary>
        /// <value>The name of the assistant. The maximum length is 256 characters. </value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the assistant. The maximum length is 512 characters. 
        /// </summary>
        /// <value>The description of the assistant. The maximum length is 512 characters. </value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
        /// </summary>
        /// <value>ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. </value>
        [DataMember(Name = "model", IsRequired = true, EmitDefaultValue = true)]
        public string Model { get; set; }

        /// <summary>
        /// The system instructions that the assistant uses. The maximum length is 256,000 characters. 
        /// </summary>
        /// <value>The system instructions that the assistant uses. The maximum length is 256,000 characters. </value>
        [DataMember(Name = "instructions", IsRequired = true, EmitDefaultValue = true)]
        public string Instructions { get; set; }

        /// <summary>
        /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types &#x60;code_interpreter&#x60;, &#x60;retrieval&#x60;, or &#x60;function&#x60;. 
        /// </summary>
        /// <value>A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types &#x60;code_interpreter&#x60;, &#x60;retrieval&#x60;, or &#x60;function&#x60;. </value>
        [DataMember(Name = "tools", IsRequired = true, EmitDefaultValue = true)]
        public List<AssistantObjectToolsInner> Tools { get; set; }

        /// <summary>
        /// A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. 
        /// </summary>
        /// <value>A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. </value>
        [DataMember(Name = "file_ids", IsRequired = true, EmitDefaultValue = true)]
        public List<string> FileIds { get; set; }

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </value>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssistantObject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("  Tools: ").Append(Tools).Append("\n");
            sb.Append("  FileIds: ").Append(FileIds).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 256)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 256.", new [] { "Name" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 512)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 512.", new [] { "Description" });
            }

            // Instructions (string) maxLength
            if (this.Instructions != null && this.Instructions.Length > 256000)
            {
                yield return new ValidationResult("Invalid value for Instructions, length must be less than 256000.", new [] { "Instructions" });
            }

            yield break;
        }
    }

}
