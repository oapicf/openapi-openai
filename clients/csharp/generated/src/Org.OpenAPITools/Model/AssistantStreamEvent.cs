/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents an event emitted when streaming a Run.  Each event in a server-sent events stream has an &#x60;event&#x60; and &#x60;data&#x60; property:  &#x60;&#x60;&#x60; event: thread.created data: {\&quot;id\&quot;: \&quot;thread_123\&quot;, \&quot;object\&quot;: \&quot;thread\&quot;, ...} &#x60;&#x60;&#x60;  We emit events whenever a new object is created, transitions to a new state, or is being streamed in parts (deltas). For example, we emit &#x60;thread.run.created&#x60; when a new run is created, &#x60;thread.run.completed&#x60; when a run completes, and so on. When an Assistant chooses to create a message during a run, we emit a &#x60;thread.message.created event&#x60;, a &#x60;thread.message.in_progress&#x60; event, many &#x60;thread.message.delta&#x60; events, and finally a &#x60;thread.message.completed&#x60; event.  We may add additional events over time, so we recommend handling unknown events gracefully in your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to integrate the Assistants API with streaming. 
    /// </summary>
    [JsonConverter(typeof(AssistantStreamEventJsonConverter))]
    [DataContract(Name = "AssistantStreamEvent")]
    public partial class AssistantStreamEvent : AbstractOpenAPISchema, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantStreamEvent" /> class
        /// with the <see cref="ThreadStreamEvent" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ThreadStreamEvent.</param>
        public AssistantStreamEvent(ThreadStreamEvent actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantStreamEvent" /> class
        /// with the <see cref="RunStreamEvent" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RunStreamEvent.</param>
        public AssistantStreamEvent(RunStreamEvent actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantStreamEvent" /> class
        /// with the <see cref="RunStepStreamEvent" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RunStepStreamEvent.</param>
        public AssistantStreamEvent(RunStepStreamEvent actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantStreamEvent" /> class
        /// with the <see cref="MessageStreamEvent" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MessageStreamEvent.</param>
        public AssistantStreamEvent(MessageStreamEvent actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantStreamEvent" /> class
        /// with the <see cref="ErrorEvent" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ErrorEvent.</param>
        public AssistantStreamEvent(ErrorEvent actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantStreamEvent" /> class
        /// with the <see cref="DoneEvent" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DoneEvent.</param>
        public AssistantStreamEvent(DoneEvent actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(DoneEvent) || value is DoneEvent)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ErrorEvent) || value is ErrorEvent)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MessageStreamEvent) || value is MessageStreamEvent)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(RunStepStreamEvent) || value is RunStepStreamEvent)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(RunStreamEvent) || value is RunStreamEvent)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ThreadStreamEvent) || value is ThreadStreamEvent)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: DoneEvent, ErrorEvent, MessageStreamEvent, RunStepStreamEvent, RunStreamEvent, ThreadStreamEvent");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `ThreadStreamEvent`. If the actual instance is not `ThreadStreamEvent`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ThreadStreamEvent</returns>
        public ThreadStreamEvent GetThreadStreamEvent()
        {
            return (ThreadStreamEvent)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RunStreamEvent`. If the actual instance is not `RunStreamEvent`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RunStreamEvent</returns>
        public RunStreamEvent GetRunStreamEvent()
        {
            return (RunStreamEvent)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RunStepStreamEvent`. If the actual instance is not `RunStepStreamEvent`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RunStepStreamEvent</returns>
        public RunStepStreamEvent GetRunStepStreamEvent()
        {
            return (RunStepStreamEvent)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MessageStreamEvent`. If the actual instance is not `MessageStreamEvent`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MessageStreamEvent</returns>
        public MessageStreamEvent GetMessageStreamEvent()
        {
            return (MessageStreamEvent)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ErrorEvent`. If the actual instance is not `ErrorEvent`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ErrorEvent</returns>
        public ErrorEvent GetErrorEvent()
        {
            return (ErrorEvent)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DoneEvent`. If the actual instance is not `DoneEvent`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DoneEvent</returns>
        public DoneEvent GetDoneEvent()
        {
            return (DoneEvent)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssistantStreamEvent {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, AssistantStreamEvent.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of AssistantStreamEvent
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of AssistantStreamEvent</returns>
        public static AssistantStreamEvent FromJson(string jsonString)
        {
            AssistantStreamEvent newAssistantStreamEvent = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newAssistantStreamEvent;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DoneEvent).GetProperty("AdditionalProperties") == null)
                {
                    newAssistantStreamEvent = new AssistantStreamEvent(JsonConvert.DeserializeObject<DoneEvent>(jsonString, AssistantStreamEvent.SerializerSettings));
                }
                else
                {
                    newAssistantStreamEvent = new AssistantStreamEvent(JsonConvert.DeserializeObject<DoneEvent>(jsonString, AssistantStreamEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DoneEvent");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DoneEvent: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ErrorEvent).GetProperty("AdditionalProperties") == null)
                {
                    newAssistantStreamEvent = new AssistantStreamEvent(JsonConvert.DeserializeObject<ErrorEvent>(jsonString, AssistantStreamEvent.SerializerSettings));
                }
                else
                {
                    newAssistantStreamEvent = new AssistantStreamEvent(JsonConvert.DeserializeObject<ErrorEvent>(jsonString, AssistantStreamEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ErrorEvent");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ErrorEvent: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(MessageStreamEvent).GetProperty("AdditionalProperties") == null)
                {
                    newAssistantStreamEvent = new AssistantStreamEvent(JsonConvert.DeserializeObject<MessageStreamEvent>(jsonString, AssistantStreamEvent.SerializerSettings));
                }
                else
                {
                    newAssistantStreamEvent = new AssistantStreamEvent(JsonConvert.DeserializeObject<MessageStreamEvent>(jsonString, AssistantStreamEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("MessageStreamEvent");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MessageStreamEvent: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(RunStepStreamEvent).GetProperty("AdditionalProperties") == null)
                {
                    newAssistantStreamEvent = new AssistantStreamEvent(JsonConvert.DeserializeObject<RunStepStreamEvent>(jsonString, AssistantStreamEvent.SerializerSettings));
                }
                else
                {
                    newAssistantStreamEvent = new AssistantStreamEvent(JsonConvert.DeserializeObject<RunStepStreamEvent>(jsonString, AssistantStreamEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("RunStepStreamEvent");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RunStepStreamEvent: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(RunStreamEvent).GetProperty("AdditionalProperties") == null)
                {
                    newAssistantStreamEvent = new AssistantStreamEvent(JsonConvert.DeserializeObject<RunStreamEvent>(jsonString, AssistantStreamEvent.SerializerSettings));
                }
                else
                {
                    newAssistantStreamEvent = new AssistantStreamEvent(JsonConvert.DeserializeObject<RunStreamEvent>(jsonString, AssistantStreamEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("RunStreamEvent");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RunStreamEvent: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ThreadStreamEvent).GetProperty("AdditionalProperties") == null)
                {
                    newAssistantStreamEvent = new AssistantStreamEvent(JsonConvert.DeserializeObject<ThreadStreamEvent>(jsonString, AssistantStreamEvent.SerializerSettings));
                }
                else
                {
                    newAssistantStreamEvent = new AssistantStreamEvent(JsonConvert.DeserializeObject<ThreadStreamEvent>(jsonString, AssistantStreamEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ThreadStreamEvent");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ThreadStreamEvent: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newAssistantStreamEvent;
        }


        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for AssistantStreamEvent
    /// </summary>
    public class AssistantStreamEventJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(AssistantStreamEvent).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch(reader.TokenType) 
            {
                case JsonToken.StartObject:
                    return AssistantStreamEvent.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return AssistantStreamEvent.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
