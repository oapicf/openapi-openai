/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateEmbeddingRequest
    /// </summary>
    [DataContract(Name = "CreateEmbeddingRequest")]
    public partial class CreateEmbeddingRequest : IValidatableObject
    {
        /// <summary>
        /// The format to return the embeddings in. Can be either &#x60;float&#x60; or [&#x60;base64&#x60;](https://pypi.org/project/pybase64/).
        /// </summary>
        /// <value>The format to return the embeddings in. Can be either &#x60;float&#x60; or [&#x60;base64&#x60;](https://pypi.org/project/pybase64/).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EncodingFormatEnum
        {
            /// <summary>
            /// Enum Float for value: float
            /// </summary>
            [EnumMember(Value = "float")]
            Float = 1,

            /// <summary>
            /// Enum Base64 for value: base64
            /// </summary>
            [EnumMember(Value = "base64")]
            Base64 = 2
        }


        /// <summary>
        /// The format to return the embeddings in. Can be either &#x60;float&#x60; or [&#x60;base64&#x60;](https://pypi.org/project/pybase64/).
        /// </summary>
        /// <value>The format to return the embeddings in. Can be either &#x60;float&#x60; or [&#x60;base64&#x60;](https://pypi.org/project/pybase64/).</value>
        /*
        <example>float</example>
        */
        [DataMember(Name = "encoding_format", EmitDefaultValue = false)]
        public EncodingFormatEnum? EncodingFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateEmbeddingRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateEmbeddingRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateEmbeddingRequest" /> class.
        /// </summary>
        /// <param name="input">input (required).</param>
        /// <param name="model">model (required).</param>
        /// <param name="encodingFormat">The format to return the embeddings in. Can be either &#x60;float&#x60; or [&#x60;base64&#x60;](https://pypi.org/project/pybase64/). (default to EncodingFormatEnum.Float).</param>
        /// <param name="dimensions">The number of dimensions the resulting output embeddings should have. Only supported in &#x60;text-embedding-3&#x60; and later models. .</param>
        /// <param name="user">A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). .</param>
        public CreateEmbeddingRequest(CreateEmbeddingRequestInput input = default(CreateEmbeddingRequestInput), CreateEmbeddingRequestModel model = default(CreateEmbeddingRequestModel), EncodingFormatEnum? encodingFormat = EncodingFormatEnum.Float, int dimensions = default(int), string user = default(string))
        {
            // to ensure "input" is required (not null)
            if (input == null)
            {
                throw new ArgumentNullException("input is a required property for CreateEmbeddingRequest and cannot be null");
            }
            this.Input = input;
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new ArgumentNullException("model is a required property for CreateEmbeddingRequest and cannot be null");
            }
            this.Model = model;
            this.EncodingFormat = encodingFormat;
            this.Dimensions = dimensions;
            this.User = user;
        }

        /// <summary>
        /// Gets or Sets Input
        /// </summary>
        [DataMember(Name = "input", IsRequired = true, EmitDefaultValue = true)]
        public CreateEmbeddingRequestInput Input { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "model", IsRequired = true, EmitDefaultValue = true)]
        public CreateEmbeddingRequestModel Model { get; set; }

        /// <summary>
        /// The number of dimensions the resulting output embeddings should have. Only supported in &#x60;text-embedding-3&#x60; and later models. 
        /// </summary>
        /// <value>The number of dimensions the resulting output embeddings should have. Only supported in &#x60;text-embedding-3&#x60; and later models. </value>
        [DataMember(Name = "dimensions", EmitDefaultValue = false)]
        public int Dimensions { get; set; }

        /// <summary>
        /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
        /// </summary>
        /// <value>A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). </value>
        /*
        <example>user-1234</example>
        */
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public string User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateEmbeddingRequest {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  EncodingFormat: ").Append(EncodingFormat).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Dimensions (int) minimum
            if (this.Dimensions < (int)1)
            {
                yield return new ValidationResult("Invalid value for Dimensions, must be a value greater than or equal to 1.", new [] { "Dimensions" });
            }

            yield break;
        }
    }

}
