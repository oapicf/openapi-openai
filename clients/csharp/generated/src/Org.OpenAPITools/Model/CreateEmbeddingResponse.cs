/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateEmbeddingResponse
    /// </summary>
    [DataContract(Name = "CreateEmbeddingResponse")]
    public partial class CreateEmbeddingResponse : IValidatableObject
    {
        /// <summary>
        /// The object type, which is always \&quot;list\&quot;.
        /// </summary>
        /// <value>The object type, which is always \&quot;list\&quot;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum List for value: list
            /// </summary>
            [EnumMember(Value = "list")]
            List = 1
        }


        /// <summary>
        /// The object type, which is always \&quot;list\&quot;.
        /// </summary>
        /// <value>The object type, which is always \&quot;list\&quot;.</value>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = true)]
        public ObjectEnum VarObject { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateEmbeddingResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateEmbeddingResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateEmbeddingResponse" /> class.
        /// </summary>
        /// <param name="data">The list of embeddings generated by the model. (required).</param>
        /// <param name="model">The name of the model used to generate the embedding. (required).</param>
        /// <param name="varObject">The object type, which is always \&quot;list\&quot;. (required).</param>
        /// <param name="usage">usage (required).</param>
        public CreateEmbeddingResponse(List<Embedding> data = default(List<Embedding>), string model = default(string), ObjectEnum varObject = default(ObjectEnum), CreateEmbeddingResponseUsage usage = default(CreateEmbeddingResponseUsage))
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new ArgumentNullException("data is a required property for CreateEmbeddingResponse and cannot be null");
            }
            this.Data = data;
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new ArgumentNullException("model is a required property for CreateEmbeddingResponse and cannot be null");
            }
            this.Model = model;
            this.VarObject = varObject;
            // to ensure "usage" is required (not null)
            if (usage == null)
            {
                throw new ArgumentNullException("usage is a required property for CreateEmbeddingResponse and cannot be null");
            }
            this.Usage = usage;
        }

        /// <summary>
        /// The list of embeddings generated by the model.
        /// </summary>
        /// <value>The list of embeddings generated by the model.</value>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = true)]
        public List<Embedding> Data { get; set; }

        /// <summary>
        /// The name of the model used to generate the embedding.
        /// </summary>
        /// <value>The name of the model used to generate the embedding.</value>
        [DataMember(Name = "model", IsRequired = true, EmitDefaultValue = true)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name = "usage", IsRequired = true, EmitDefaultValue = true)]
        public CreateEmbeddingResponseUsage Usage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateEmbeddingResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  VarObject: ").Append(VarObject).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
