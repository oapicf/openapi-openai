/*
 * OpenAI API
 *
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateFineTuneRequest
    /// </summary>
    [DataContract(Name = "CreateFineTuneRequest")]
    public partial class CreateFineTuneRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFineTuneRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateFineTuneRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFineTuneRequest" /> class.
        /// </summary>
        /// <param name="trainingFile">The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file, where each training example is a JSON object with the keys \&quot;prompt\&quot; and \&quot;completion\&quot;. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.  (required).</param>
        /// <param name="validationFile">The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model). Your train and validation data should be mutually exclusive.  Your dataset must be formatted as a JSONL file, where each validation example is a JSON object with the keys \&quot;prompt\&quot; and \&quot;completion\&quot;. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. .</param>
        /// <param name="model">model.</param>
        /// <param name="nEpochs">The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.  (default to 4).</param>
        /// <param name="batchSize">The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass.  By default, the batch size will be dynamically configured to be ~0.2% of the number of examples in the training set, capped at 256 - in general, we&#39;ve found that larger batch sizes tend to work better for larger datasets. .</param>
        /// <param name="learningRateMultiplier">The learning rate multiplier to use for training. The fine-tuning learning rate is the original learning rate used for pretraining multiplied by this value.  By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on final &#x60;batch_size&#x60; (larger learning rates tend to perform better with larger batch sizes). We recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best results. .</param>
        /// <param name="promptLossWeight">The weight to use for loss on the prompt tokens. This controls how much the model tries to learn to generate the prompt (as compared to the completion which always has a weight of 1.0), and can add a stabilizing effect to training when completions are short.  If prompts are extremely long (relative to completions), it may make sense to reduce this weight so as to avoid over-prioritizing learning the prompt.  (default to 0.01M).</param>
        /// <param name="computeClassificationMetrics">If set, we calculate classification-specific metrics such as accuracy and F-1 score using the validation set at the end of every epoch. These metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).  In order to compute classification metrics, you must provide a &#x60;validation_file&#x60;. Additionally, you must specify &#x60;classification_n_classes&#x60; for multiclass classification or &#x60;classification_positive_class&#x60; for binary classification.  (default to false).</param>
        /// <param name="classificationNClasses">The number of classes in a classification task.  This parameter is required for multiclass classification. .</param>
        /// <param name="classificationPositiveClass">The positive class in binary classification.  This parameter is needed to generate precision, recall, and F1 metrics when doing binary classification. .</param>
        /// <param name="classificationBetas">If this is provided, we calculate F-beta scores at the specified beta values. The F-beta score is a generalization of F-1 score. This is only used for binary classification.  With a beta of 1 (i.e. the F-1 score), precision and recall are given the same weight. A larger beta score puts more weight on recall and less on precision. A smaller beta score puts more weight on precision and less on recall. .</param>
        /// <param name="suffix">A string of up to 40 characters that will be added to your fine-tuned model name.  For example, a &#x60;suffix&#x60; of \&quot;custom-model-name\&quot; would produce a model name like &#x60;ada:ft-your-org:custom-model-name-2022-02-15-04-21-04&#x60;. .</param>
        public CreateFineTuneRequest(string trainingFile = default(string), string validationFile = default(string), CreateFineTuneRequestModel model = default(CreateFineTuneRequestModel), int? nEpochs = 4, int? batchSize = default(int?), decimal? learningRateMultiplier = default(decimal?), decimal? promptLossWeight = 0.01M, bool? computeClassificationMetrics = false, int? classificationNClasses = default(int?), string classificationPositiveClass = default(string), List<decimal> classificationBetas = default(List<decimal>), string suffix = default(string))
        {
            // to ensure "trainingFile" is required (not null)
            if (trainingFile == null)
            {
                throw new ArgumentNullException("trainingFile is a required property for CreateFineTuneRequest and cannot be null");
            }
            this.TrainingFile = trainingFile;
            this.ValidationFile = validationFile;
            this.Model = model;
            // use default value if no "nEpochs" provided
            this.NEpochs = nEpochs ?? 4;
            this.BatchSize = batchSize;
            this.LearningRateMultiplier = learningRateMultiplier;
            // use default value if no "promptLossWeight" provided
            this.PromptLossWeight = promptLossWeight ?? 0.01M;
            // use default value if no "computeClassificationMetrics" provided
            this.ComputeClassificationMetrics = computeClassificationMetrics ?? false;
            this.ClassificationNClasses = classificationNClasses;
            this.ClassificationPositiveClass = classificationPositiveClass;
            this.ClassificationBetas = classificationBetas;
            this.Suffix = suffix;
        }

        /// <summary>
        /// The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file, where each training example is a JSON object with the keys \&quot;prompt\&quot; and \&quot;completion\&quot;. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. 
        /// </summary>
        /// <value>The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file, where each training example is a JSON object with the keys \&quot;prompt\&quot; and \&quot;completion\&quot;. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. </value>
        /// <example>file-ajSREls59WBbvgSzJSVWxMCB</example>
        [DataMember(Name = "training_file", IsRequired = true, EmitDefaultValue = true)]
        public string TrainingFile { get; set; }

        /// <summary>
        /// The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model). Your train and validation data should be mutually exclusive.  Your dataset must be formatted as a JSONL file, where each validation example is a JSON object with the keys \&quot;prompt\&quot; and \&quot;completion\&quot;. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. 
        /// </summary>
        /// <value>The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model). Your train and validation data should be mutually exclusive.  Your dataset must be formatted as a JSONL file, where each validation example is a JSON object with the keys \&quot;prompt\&quot; and \&quot;completion\&quot;. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. </value>
        /// <example>file-XjSREls59WBbvgSzJSVWxMCa</example>
        [DataMember(Name = "validation_file", EmitDefaultValue = true)]
        public string ValidationFile { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "model", EmitDefaultValue = true)]
        public CreateFineTuneRequestModel Model { get; set; }

        /// <summary>
        /// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. 
        /// </summary>
        /// <value>The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. </value>
        [DataMember(Name = "n_epochs", EmitDefaultValue = true)]
        public int? NEpochs { get; set; }

        /// <summary>
        /// The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass.  By default, the batch size will be dynamically configured to be ~0.2% of the number of examples in the training set, capped at 256 - in general, we&#39;ve found that larger batch sizes tend to work better for larger datasets. 
        /// </summary>
        /// <value>The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass.  By default, the batch size will be dynamically configured to be ~0.2% of the number of examples in the training set, capped at 256 - in general, we&#39;ve found that larger batch sizes tend to work better for larger datasets. </value>
        [DataMember(Name = "batch_size", EmitDefaultValue = true)]
        public int? BatchSize { get; set; }

        /// <summary>
        /// The learning rate multiplier to use for training. The fine-tuning learning rate is the original learning rate used for pretraining multiplied by this value.  By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on final &#x60;batch_size&#x60; (larger learning rates tend to perform better with larger batch sizes). We recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best results. 
        /// </summary>
        /// <value>The learning rate multiplier to use for training. The fine-tuning learning rate is the original learning rate used for pretraining multiplied by this value.  By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on final &#x60;batch_size&#x60; (larger learning rates tend to perform better with larger batch sizes). We recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best results. </value>
        [DataMember(Name = "learning_rate_multiplier", EmitDefaultValue = true)]
        public decimal? LearningRateMultiplier { get; set; }

        /// <summary>
        /// The weight to use for loss on the prompt tokens. This controls how much the model tries to learn to generate the prompt (as compared to the completion which always has a weight of 1.0), and can add a stabilizing effect to training when completions are short.  If prompts are extremely long (relative to completions), it may make sense to reduce this weight so as to avoid over-prioritizing learning the prompt. 
        /// </summary>
        /// <value>The weight to use for loss on the prompt tokens. This controls how much the model tries to learn to generate the prompt (as compared to the completion which always has a weight of 1.0), and can add a stabilizing effect to training when completions are short.  If prompts are extremely long (relative to completions), it may make sense to reduce this weight so as to avoid over-prioritizing learning the prompt. </value>
        [DataMember(Name = "prompt_loss_weight", EmitDefaultValue = true)]
        public decimal? PromptLossWeight { get; set; }

        /// <summary>
        /// If set, we calculate classification-specific metrics such as accuracy and F-1 score using the validation set at the end of every epoch. These metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).  In order to compute classification metrics, you must provide a &#x60;validation_file&#x60;. Additionally, you must specify &#x60;classification_n_classes&#x60; for multiclass classification or &#x60;classification_positive_class&#x60; for binary classification. 
        /// </summary>
        /// <value>If set, we calculate classification-specific metrics such as accuracy and F-1 score using the validation set at the end of every epoch. These metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).  In order to compute classification metrics, you must provide a &#x60;validation_file&#x60;. Additionally, you must specify &#x60;classification_n_classes&#x60; for multiclass classification or &#x60;classification_positive_class&#x60; for binary classification. </value>
        [DataMember(Name = "compute_classification_metrics", EmitDefaultValue = true)]
        public bool? ComputeClassificationMetrics { get; set; }

        /// <summary>
        /// The number of classes in a classification task.  This parameter is required for multiclass classification. 
        /// </summary>
        /// <value>The number of classes in a classification task.  This parameter is required for multiclass classification. </value>
        [DataMember(Name = "classification_n_classes", EmitDefaultValue = true)]
        public int? ClassificationNClasses { get; set; }

        /// <summary>
        /// The positive class in binary classification.  This parameter is needed to generate precision, recall, and F1 metrics when doing binary classification. 
        /// </summary>
        /// <value>The positive class in binary classification.  This parameter is needed to generate precision, recall, and F1 metrics when doing binary classification. </value>
        [DataMember(Name = "classification_positive_class", EmitDefaultValue = true)]
        public string ClassificationPositiveClass { get; set; }

        /// <summary>
        /// If this is provided, we calculate F-beta scores at the specified beta values. The F-beta score is a generalization of F-1 score. This is only used for binary classification.  With a beta of 1 (i.e. the F-1 score), precision and recall are given the same weight. A larger beta score puts more weight on recall and less on precision. A smaller beta score puts more weight on precision and less on recall. 
        /// </summary>
        /// <value>If this is provided, we calculate F-beta scores at the specified beta values. The F-beta score is a generalization of F-1 score. This is only used for binary classification.  With a beta of 1 (i.e. the F-1 score), precision and recall are given the same weight. A larger beta score puts more weight on recall and less on precision. A smaller beta score puts more weight on precision and less on recall. </value>
        /// <example>[0.6,1,1.5,2]</example>
        [DataMember(Name = "classification_betas", EmitDefaultValue = true)]
        public List<decimal> ClassificationBetas { get; set; }

        /// <summary>
        /// A string of up to 40 characters that will be added to your fine-tuned model name.  For example, a &#x60;suffix&#x60; of \&quot;custom-model-name\&quot; would produce a model name like &#x60;ada:ft-your-org:custom-model-name-2022-02-15-04-21-04&#x60;. 
        /// </summary>
        /// <value>A string of up to 40 characters that will be added to your fine-tuned model name.  For example, a &#x60;suffix&#x60; of \&quot;custom-model-name\&quot; would produce a model name like &#x60;ada:ft-your-org:custom-model-name-2022-02-15-04-21-04&#x60;. </value>
        [DataMember(Name = "suffix", EmitDefaultValue = true)]
        public string Suffix { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateFineTuneRequest {\n");
            sb.Append("  TrainingFile: ").Append(TrainingFile).Append("\n");
            sb.Append("  ValidationFile: ").Append(ValidationFile).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  NEpochs: ").Append(NEpochs).Append("\n");
            sb.Append("  BatchSize: ").Append(BatchSize).Append("\n");
            sb.Append("  LearningRateMultiplier: ").Append(LearningRateMultiplier).Append("\n");
            sb.Append("  PromptLossWeight: ").Append(PromptLossWeight).Append("\n");
            sb.Append("  ComputeClassificationMetrics: ").Append(ComputeClassificationMetrics).Append("\n");
            sb.Append("  ClassificationNClasses: ").Append(ClassificationNClasses).Append("\n");
            sb.Append("  ClassificationPositiveClass: ").Append(ClassificationPositiveClass).Append("\n");
            sb.Append("  ClassificationBetas: ").Append(ClassificationBetas).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Suffix (string) maxLength
            if (this.Suffix != null && this.Suffix.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Suffix, length must be less than 40.", new [] { "Suffix" });
            }

            // Suffix (string) minLength
            if (this.Suffix != null && this.Suffix.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Suffix, length must be greater than 1.", new [] { "Suffix" });
            }

            yield break;
        }
    }

}
