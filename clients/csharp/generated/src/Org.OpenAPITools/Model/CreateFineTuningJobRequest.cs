/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateFineTuningJobRequest
    /// </summary>
    [DataContract(Name = "CreateFineTuningJobRequest")]
    public partial class CreateFineTuningJobRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFineTuningJobRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateFineTuningJobRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFineTuningJobRequest" /> class.
        /// </summary>
        /// <param name="model">model (required).</param>
        /// <param name="trainingFile">The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.  (required).</param>
        /// <param name="hyperparameters">hyperparameters.</param>
        /// <param name="suffix">A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a &#x60;suffix&#x60; of \&quot;custom-model-name\&quot; would produce a model name like &#x60;ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel&#x60;. .</param>
        /// <param name="validationFile">The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. .</param>
        /// <param name="integrations">A list of integrations to enable for your fine-tuning job..</param>
        /// <param name="seed">The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases. If a seed is not specified, one will be generated for you. .</param>
        public CreateFineTuningJobRequest(CreateFineTuningJobRequestModel model = default(CreateFineTuningJobRequestModel), string trainingFile = default(string), CreateFineTuningJobRequestHyperparameters hyperparameters = default(CreateFineTuningJobRequestHyperparameters), string suffix = default(string), string validationFile = default(string), List<CreateFineTuningJobRequestIntegrationsInner> integrations = default(List<CreateFineTuningJobRequestIntegrationsInner>), int? seed = default(int?))
        {
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new ArgumentNullException("model is a required property for CreateFineTuningJobRequest and cannot be null");
            }
            this.Model = model;
            // to ensure "trainingFile" is required (not null)
            if (trainingFile == null)
            {
                throw new ArgumentNullException("trainingFile is a required property for CreateFineTuningJobRequest and cannot be null");
            }
            this.TrainingFile = trainingFile;
            this.Hyperparameters = hyperparameters;
            this.Suffix = suffix;
            this.ValidationFile = validationFile;
            this.Integrations = integrations;
            this.Seed = seed;
        }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "model", IsRequired = true, EmitDefaultValue = true)]
        public CreateFineTuningJobRequestModel Model { get; set; }

        /// <summary>
        /// The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
        /// </summary>
        /// <value>The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. </value>
        /*
        <example>file-abc123</example>
        */
        [DataMember(Name = "training_file", IsRequired = true, EmitDefaultValue = true)]
        public string TrainingFile { get; set; }

        /// <summary>
        /// Gets or Sets Hyperparameters
        /// </summary>
        [DataMember(Name = "hyperparameters", EmitDefaultValue = false)]
        public CreateFineTuningJobRequestHyperparameters Hyperparameters { get; set; }

        /// <summary>
        /// A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a &#x60;suffix&#x60; of \&quot;custom-model-name\&quot; would produce a model name like &#x60;ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel&#x60;. 
        /// </summary>
        /// <value>A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a &#x60;suffix&#x60; of \&quot;custom-model-name\&quot; would produce a model name like &#x60;ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel&#x60;. </value>
        [DataMember(Name = "suffix", EmitDefaultValue = true)]
        public string Suffix { get; set; }

        /// <summary>
        /// The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
        /// </summary>
        /// <value>The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. </value>
        /*
        <example>file-abc123</example>
        */
        [DataMember(Name = "validation_file", EmitDefaultValue = true)]
        public string ValidationFile { get; set; }

        /// <summary>
        /// A list of integrations to enable for your fine-tuning job.
        /// </summary>
        /// <value>A list of integrations to enable for your fine-tuning job.</value>
        [DataMember(Name = "integrations", EmitDefaultValue = true)]
        public List<CreateFineTuningJobRequestIntegrationsInner> Integrations { get; set; }

        /// <summary>
        /// The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases. If a seed is not specified, one will be generated for you. 
        /// </summary>
        /// <value>The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases. If a seed is not specified, one will be generated for you. </value>
        /*
        <example>42</example>
        */
        [DataMember(Name = "seed", EmitDefaultValue = true)]
        public int? Seed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateFineTuningJobRequest {\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  TrainingFile: ").Append(TrainingFile).Append("\n");
            sb.Append("  Hyperparameters: ").Append(Hyperparameters).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("  ValidationFile: ").Append(ValidationFile).Append("\n");
            sb.Append("  Integrations: ").Append(Integrations).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Suffix (string) maxLength
            if (this.Suffix != null && this.Suffix.Length > 40)
            {
                yield return new ValidationResult("Invalid value for Suffix, length must be less than 40.", new [] { "Suffix" });
            }

            // Suffix (string) minLength
            if (this.Suffix != null && this.Suffix.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Suffix, length must be greater than 1.", new [] { "Suffix" });
            }

            // Seed (int?) maximum
            if (this.Seed > (int?)2147483647)
            {
                yield return new ValidationResult("Invalid value for Seed, must be a value less than or equal to 2147483647.", new [] { "Seed" });
            }

            // Seed (int?) minimum
            if (this.Seed < (int?)0)
            {
                yield return new ValidationResult("Invalid value for Seed, must be a value greater than or equal to 0.", new [] { "Seed" });
            }

            yield break;
        }
    }

}
