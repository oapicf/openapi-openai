/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateImageRequest
    /// </summary>
    [DataContract(Name = "CreateImageRequest")]
    public partial class CreateImageRequest : IValidatableObject
    {
        /// <summary>
        /// The quality of the image that will be generated. &#x60;hd&#x60; creates images with finer details and greater consistency across the image. This param is only supported for &#x60;dall-e-3&#x60;.
        /// </summary>
        /// <value>The quality of the image that will be generated. &#x60;hd&#x60; creates images with finer details and greater consistency across the image. This param is only supported for &#x60;dall-e-3&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QualityEnum
        {
            /// <summary>
            /// Enum Standard for value: standard
            /// </summary>
            [EnumMember(Value = "standard")]
            Standard = 1,

            /// <summary>
            /// Enum Hd for value: hd
            /// </summary>
            [EnumMember(Value = "hd")]
            Hd = 2
        }


        /// <summary>
        /// The quality of the image that will be generated. &#x60;hd&#x60; creates images with finer details and greater consistency across the image. This param is only supported for &#x60;dall-e-3&#x60;.
        /// </summary>
        /// <value>The quality of the image that will be generated. &#x60;hd&#x60; creates images with finer details and greater consistency across the image. This param is only supported for &#x60;dall-e-3&#x60;.</value>
        /*
        <example>standard</example>
        */
        [DataMember(Name = "quality", EmitDefaultValue = false)]
        public QualityEnum? Quality { get; set; }
        /// <summary>
        /// The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated.
        /// </summary>
        /// <value>The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResponseFormatEnum
        {
            /// <summary>
            /// Enum Url for value: url
            /// </summary>
            [EnumMember(Value = "url")]
            Url = 1,

            /// <summary>
            /// Enum B64Json for value: b64_json
            /// </summary>
            [EnumMember(Value = "b64_json")]
            B64Json = 2
        }


        /// <summary>
        /// The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated.
        /// </summary>
        /// <value>The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated.</value>
        /*
        <example>url</example>
        */
        [DataMember(Name = "response_format", EmitDefaultValue = true)]
        public ResponseFormatEnum? ResponseFormat { get; set; }
        /// <summary>
        /// The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60; for &#x60;dall-e-2&#x60;. Must be one of &#x60;1024x1024&#x60;, &#x60;1792x1024&#x60;, or &#x60;1024x1792&#x60; for &#x60;dall-e-3&#x60; models.
        /// </summary>
        /// <value>The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60; for &#x60;dall-e-2&#x60;. Must be one of &#x60;1024x1024&#x60;, &#x60;1792x1024&#x60;, or &#x60;1024x1792&#x60; for &#x60;dall-e-3&#x60; models.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SizeEnum
        {
            /// <summary>
            /// Enum _256x256 for value: 256x256
            /// </summary>
            [EnumMember(Value = "256x256")]
            _256x256 = 1,

            /// <summary>
            /// Enum _512x512 for value: 512x512
            /// </summary>
            [EnumMember(Value = "512x512")]
            _512x512 = 2,

            /// <summary>
            /// Enum _1024x1024 for value: 1024x1024
            /// </summary>
            [EnumMember(Value = "1024x1024")]
            _1024x1024 = 3,

            /// <summary>
            /// Enum _1792x1024 for value: 1792x1024
            /// </summary>
            [EnumMember(Value = "1792x1024")]
            _1792x1024 = 4,

            /// <summary>
            /// Enum _1024x1792 for value: 1024x1792
            /// </summary>
            [EnumMember(Value = "1024x1792")]
            _1024x1792 = 5
        }


        /// <summary>
        /// The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60; for &#x60;dall-e-2&#x60;. Must be one of &#x60;1024x1024&#x60;, &#x60;1792x1024&#x60;, or &#x60;1024x1792&#x60; for &#x60;dall-e-3&#x60; models.
        /// </summary>
        /// <value>The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60; for &#x60;dall-e-2&#x60;. Must be one of &#x60;1024x1024&#x60;, &#x60;1792x1024&#x60;, or &#x60;1024x1792&#x60; for &#x60;dall-e-3&#x60; models.</value>
        /*
        <example>1024x1024</example>
        */
        [DataMember(Name = "size", EmitDefaultValue = true)]
        public SizeEnum? Size { get; set; }
        /// <summary>
        /// The style of the generated images. Must be one of &#x60;vivid&#x60; or &#x60;natural&#x60;. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for &#x60;dall-e-3&#x60;.
        /// </summary>
        /// <value>The style of the generated images. Must be one of &#x60;vivid&#x60; or &#x60;natural&#x60;. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for &#x60;dall-e-3&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StyleEnum
        {
            /// <summary>
            /// Enum Vivid for value: vivid
            /// </summary>
            [EnumMember(Value = "vivid")]
            Vivid = 1,

            /// <summary>
            /// Enum Natural for value: natural
            /// </summary>
            [EnumMember(Value = "natural")]
            Natural = 2
        }


        /// <summary>
        /// The style of the generated images. Must be one of &#x60;vivid&#x60; or &#x60;natural&#x60;. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for &#x60;dall-e-3&#x60;.
        /// </summary>
        /// <value>The style of the generated images. Must be one of &#x60;vivid&#x60; or &#x60;natural&#x60;. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for &#x60;dall-e-3&#x60;.</value>
        /*
        <example>vivid</example>
        */
        [DataMember(Name = "style", EmitDefaultValue = true)]
        public StyleEnum? Style { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateImageRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateImageRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateImageRequest" /> class.
        /// </summary>
        /// <param name="prompt">A text description of the desired image(s). The maximum length is 1000 characters for &#x60;dall-e-2&#x60; and 4000 characters for &#x60;dall-e-3&#x60;. (required).</param>
        /// <param name="model">model.</param>
        /// <param name="n">The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported. (default to 1).</param>
        /// <param name="quality">The quality of the image that will be generated. &#x60;hd&#x60; creates images with finer details and greater consistency across the image. This param is only supported for &#x60;dall-e-3&#x60;. (default to QualityEnum.Standard).</param>
        /// <param name="responseFormat">The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated. (default to ResponseFormatEnum.Url).</param>
        /// <param name="size">The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60; for &#x60;dall-e-2&#x60;. Must be one of &#x60;1024x1024&#x60;, &#x60;1792x1024&#x60;, or &#x60;1024x1792&#x60; for &#x60;dall-e-3&#x60; models. (default to SizeEnum._1024x1024).</param>
        /// <param name="style">The style of the generated images. Must be one of &#x60;vivid&#x60; or &#x60;natural&#x60;. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for &#x60;dall-e-3&#x60;. (default to StyleEnum.Vivid).</param>
        /// <param name="user">A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). .</param>
        public CreateImageRequest(string prompt = default(string), CreateImageRequestModel model = default(CreateImageRequestModel), int? n = 1, QualityEnum? quality = QualityEnum.Standard, ResponseFormatEnum? responseFormat = ResponseFormatEnum.Url, SizeEnum? size = SizeEnum._1024x1024, StyleEnum? style = StyleEnum.Vivid, string user = default(string))
        {
            // to ensure "prompt" is required (not null)
            if (prompt == null)
            {
                throw new ArgumentNullException("prompt is a required property for CreateImageRequest and cannot be null");
            }
            this.Prompt = prompt;
            this.Model = model;
            // use default value if no "n" provided
            this.N = n ?? 1;
            this.Quality = quality;
            this.ResponseFormat = responseFormat;
            this.Size = size;
            this.Style = style;
            this.User = user;
        }

        /// <summary>
        /// A text description of the desired image(s). The maximum length is 1000 characters for &#x60;dall-e-2&#x60; and 4000 characters for &#x60;dall-e-3&#x60;.
        /// </summary>
        /// <value>A text description of the desired image(s). The maximum length is 1000 characters for &#x60;dall-e-2&#x60; and 4000 characters for &#x60;dall-e-3&#x60;.</value>
        /*
        <example>A cute baby sea otter</example>
        */
        [DataMember(Name = "prompt", IsRequired = true, EmitDefaultValue = true)]
        public string Prompt { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "model", EmitDefaultValue = true)]
        public CreateImageRequestModel Model { get; set; }

        /// <summary>
        /// The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported.
        /// </summary>
        /// <value>The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported.</value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "n", EmitDefaultValue = true)]
        public int? N { get; set; }

        /// <summary>
        /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
        /// </summary>
        /// <value>A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). </value>
        /*
        <example>user-1234</example>
        */
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public string User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateImageRequest {\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  N: ").Append(N).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  ResponseFormat: ").Append(ResponseFormat).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // N (int?) maximum
            if (this.N > (int?)10)
            {
                yield return new ValidationResult("Invalid value for N, must be a value less than or equal to 10.", new [] { "N" });
            }

            // N (int?) minimum
            if (this.N < (int?)1)
            {
                yield return new ValidationResult("Invalid value for N, must be a value greater than or equal to 1.", new [] { "N" });
            }

            yield break;
        }
    }

}
