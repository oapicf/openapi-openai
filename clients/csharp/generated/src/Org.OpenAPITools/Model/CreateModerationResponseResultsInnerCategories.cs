/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A list of the categories, and whether they are flagged or not.
    /// </summary>
    [DataContract(Name = "CreateModerationResponse_results_inner_categories")]
    public partial class CreateModerationResponseResultsInnerCategories : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateModerationResponseResultsInnerCategories" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateModerationResponseResultsInnerCategories() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateModerationResponseResultsInnerCategories" /> class.
        /// </summary>
        /// <param name="hate">Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment. (required).</param>
        /// <param name="hateThreatening">Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. (required).</param>
        /// <param name="harassment">Content that expresses, incites, or promotes harassing language towards any target. (required).</param>
        /// <param name="harassmentThreatening">Harassment content that also includes violence or serious harm towards any target. (required).</param>
        /// <param name="selfHarm">Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders. (required).</param>
        /// <param name="selfHarmIntent">Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders. (required).</param>
        /// <param name="selfHarmInstructions">Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts. (required).</param>
        /// <param name="sexual">Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness). (required).</param>
        /// <param name="sexualMinors">Sexual content that includes an individual who is under 18 years old. (required).</param>
        /// <param name="violence">Content that depicts death, violence, or physical injury. (required).</param>
        /// <param name="violenceGraphic">Content that depicts death, violence, or physical injury in graphic detail. (required).</param>
        public CreateModerationResponseResultsInnerCategories(bool hate = default(bool), bool hateThreatening = default(bool), bool harassment = default(bool), bool harassmentThreatening = default(bool), bool selfHarm = default(bool), bool selfHarmIntent = default(bool), bool selfHarmInstructions = default(bool), bool sexual = default(bool), bool sexualMinors = default(bool), bool violence = default(bool), bool violenceGraphic = default(bool))
        {
            this.Hate = hate;
            this.HateThreatening = hateThreatening;
            this.Harassment = harassment;
            this.HarassmentThreatening = harassmentThreatening;
            this.SelfHarm = selfHarm;
            this.SelfHarmIntent = selfHarmIntent;
            this.SelfHarmInstructions = selfHarmInstructions;
            this.Sexual = sexual;
            this.SexualMinors = sexualMinors;
            this.Violence = violence;
            this.ViolenceGraphic = violenceGraphic;
        }

        /// <summary>
        /// Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.
        /// </summary>
        /// <value>Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.</value>
        [DataMember(Name = "hate", IsRequired = true, EmitDefaultValue = true)]
        public bool Hate { get; set; }

        /// <summary>
        /// Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
        /// </summary>
        /// <value>Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.</value>
        [DataMember(Name = "hate/threatening", IsRequired = true, EmitDefaultValue = true)]
        public bool HateThreatening { get; set; }

        /// <summary>
        /// Content that expresses, incites, or promotes harassing language towards any target.
        /// </summary>
        /// <value>Content that expresses, incites, or promotes harassing language towards any target.</value>
        [DataMember(Name = "harassment", IsRequired = true, EmitDefaultValue = true)]
        public bool Harassment { get; set; }

        /// <summary>
        /// Harassment content that also includes violence or serious harm towards any target.
        /// </summary>
        /// <value>Harassment content that also includes violence or serious harm towards any target.</value>
        [DataMember(Name = "harassment/threatening", IsRequired = true, EmitDefaultValue = true)]
        public bool HarassmentThreatening { get; set; }

        /// <summary>
        /// Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
        /// </summary>
        /// <value>Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.</value>
        [DataMember(Name = "self-harm", IsRequired = true, EmitDefaultValue = true)]
        public bool SelfHarm { get; set; }

        /// <summary>
        /// Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.
        /// </summary>
        /// <value>Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.</value>
        [DataMember(Name = "self-harm/intent", IsRequired = true, EmitDefaultValue = true)]
        public bool SelfHarmIntent { get; set; }

        /// <summary>
        /// Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
        /// </summary>
        /// <value>Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.</value>
        [DataMember(Name = "self-harm/instructions", IsRequired = true, EmitDefaultValue = true)]
        public bool SelfHarmInstructions { get; set; }

        /// <summary>
        /// Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).
        /// </summary>
        /// <value>Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).</value>
        [DataMember(Name = "sexual", IsRequired = true, EmitDefaultValue = true)]
        public bool Sexual { get; set; }

        /// <summary>
        /// Sexual content that includes an individual who is under 18 years old.
        /// </summary>
        /// <value>Sexual content that includes an individual who is under 18 years old.</value>
        [DataMember(Name = "sexual/minors", IsRequired = true, EmitDefaultValue = true)]
        public bool SexualMinors { get; set; }

        /// <summary>
        /// Content that depicts death, violence, or physical injury.
        /// </summary>
        /// <value>Content that depicts death, violence, or physical injury.</value>
        [DataMember(Name = "violence", IsRequired = true, EmitDefaultValue = true)]
        public bool Violence { get; set; }

        /// <summary>
        /// Content that depicts death, violence, or physical injury in graphic detail.
        /// </summary>
        /// <value>Content that depicts death, violence, or physical injury in graphic detail.</value>
        [DataMember(Name = "violence/graphic", IsRequired = true, EmitDefaultValue = true)]
        public bool ViolenceGraphic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateModerationResponseResultsInnerCategories {\n");
            sb.Append("  Hate: ").Append(Hate).Append("\n");
            sb.Append("  HateThreatening: ").Append(HateThreatening).Append("\n");
            sb.Append("  Harassment: ").Append(Harassment).Append("\n");
            sb.Append("  HarassmentThreatening: ").Append(HarassmentThreatening).Append("\n");
            sb.Append("  SelfHarm: ").Append(SelfHarm).Append("\n");
            sb.Append("  SelfHarmIntent: ").Append(SelfHarmIntent).Append("\n");
            sb.Append("  SelfHarmInstructions: ").Append(SelfHarmInstructions).Append("\n");
            sb.Append("  Sexual: ").Append(Sexual).Append("\n");
            sb.Append("  SexualMinors: ").Append(SexualMinors).Append("\n");
            sb.Append("  Violence: ").Append(Violence).Append("\n");
            sb.Append("  ViolenceGraphic: ").Append(ViolenceGraphic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
