/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateSpeechRequest
    /// </summary>
    [DataContract(Name = "CreateSpeechRequest")]
    public partial class CreateSpeechRequest : IValidatableObject
    {
        /// <summary>
        /// The voice to use when generating the audio. Supported voices are &#x60;alloy&#x60;, &#x60;echo&#x60;, &#x60;fable&#x60;, &#x60;onyx&#x60;, &#x60;nova&#x60;, and &#x60;shimmer&#x60;. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
        /// </summary>
        /// <value>The voice to use when generating the audio. Supported voices are &#x60;alloy&#x60;, &#x60;echo&#x60;, &#x60;fable&#x60;, &#x60;onyx&#x60;, &#x60;nova&#x60;, and &#x60;shimmer&#x60;. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VoiceEnum
        {
            /// <summary>
            /// Enum Alloy for value: alloy
            /// </summary>
            [EnumMember(Value = "alloy")]
            Alloy = 1,

            /// <summary>
            /// Enum Echo for value: echo
            /// </summary>
            [EnumMember(Value = "echo")]
            Echo = 2,

            /// <summary>
            /// Enum Fable for value: fable
            /// </summary>
            [EnumMember(Value = "fable")]
            Fable = 3,

            /// <summary>
            /// Enum Onyx for value: onyx
            /// </summary>
            [EnumMember(Value = "onyx")]
            Onyx = 4,

            /// <summary>
            /// Enum Nova for value: nova
            /// </summary>
            [EnumMember(Value = "nova")]
            Nova = 5,

            /// <summary>
            /// Enum Shimmer for value: shimmer
            /// </summary>
            [EnumMember(Value = "shimmer")]
            Shimmer = 6
        }


        /// <summary>
        /// The voice to use when generating the audio. Supported voices are &#x60;alloy&#x60;, &#x60;echo&#x60;, &#x60;fable&#x60;, &#x60;onyx&#x60;, &#x60;nova&#x60;, and &#x60;shimmer&#x60;. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
        /// </summary>
        /// <value>The voice to use when generating the audio. Supported voices are &#x60;alloy&#x60;, &#x60;echo&#x60;, &#x60;fable&#x60;, &#x60;onyx&#x60;, &#x60;nova&#x60;, and &#x60;shimmer&#x60;. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).</value>
        [DataMember(Name = "voice", IsRequired = true, EmitDefaultValue = true)]
        public VoiceEnum Voice { get; set; }
        /// <summary>
        /// The format to audio in. Supported formats are &#x60;mp3&#x60;, &#x60;opus&#x60;, &#x60;aac&#x60;, &#x60;flac&#x60;, &#x60;wav&#x60;, and &#x60;pcm&#x60;.
        /// </summary>
        /// <value>The format to audio in. Supported formats are &#x60;mp3&#x60;, &#x60;opus&#x60;, &#x60;aac&#x60;, &#x60;flac&#x60;, &#x60;wav&#x60;, and &#x60;pcm&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResponseFormatEnum
        {
            /// <summary>
            /// Enum Mp3 for value: mp3
            /// </summary>
            [EnumMember(Value = "mp3")]
            Mp3 = 1,

            /// <summary>
            /// Enum Opus for value: opus
            /// </summary>
            [EnumMember(Value = "opus")]
            Opus = 2,

            /// <summary>
            /// Enum Aac for value: aac
            /// </summary>
            [EnumMember(Value = "aac")]
            Aac = 3,

            /// <summary>
            /// Enum Flac for value: flac
            /// </summary>
            [EnumMember(Value = "flac")]
            Flac = 4,

            /// <summary>
            /// Enum Wav for value: wav
            /// </summary>
            [EnumMember(Value = "wav")]
            Wav = 5,

            /// <summary>
            /// Enum Pcm for value: pcm
            /// </summary>
            [EnumMember(Value = "pcm")]
            Pcm = 6
        }


        /// <summary>
        /// The format to audio in. Supported formats are &#x60;mp3&#x60;, &#x60;opus&#x60;, &#x60;aac&#x60;, &#x60;flac&#x60;, &#x60;wav&#x60;, and &#x60;pcm&#x60;.
        /// </summary>
        /// <value>The format to audio in. Supported formats are &#x60;mp3&#x60;, &#x60;opus&#x60;, &#x60;aac&#x60;, &#x60;flac&#x60;, &#x60;wav&#x60;, and &#x60;pcm&#x60;.</value>
        [DataMember(Name = "response_format", EmitDefaultValue = false)]
        public ResponseFormatEnum? ResponseFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSpeechRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSpeechRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSpeechRequest" /> class.
        /// </summary>
        /// <param name="model">model (required).</param>
        /// <param name="input">The text to generate audio for. The maximum length is 4096 characters. (required).</param>
        /// <param name="voice">The voice to use when generating the audio. Supported voices are &#x60;alloy&#x60;, &#x60;echo&#x60;, &#x60;fable&#x60;, &#x60;onyx&#x60;, &#x60;nova&#x60;, and &#x60;shimmer&#x60;. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options). (required).</param>
        /// <param name="responseFormat">The format to audio in. Supported formats are &#x60;mp3&#x60;, &#x60;opus&#x60;, &#x60;aac&#x60;, &#x60;flac&#x60;, &#x60;wav&#x60;, and &#x60;pcm&#x60;. (default to ResponseFormatEnum.Mp3).</param>
        /// <param name="speed">The speed of the generated audio. Select a value from &#x60;0.25&#x60; to &#x60;4.0&#x60;. &#x60;1.0&#x60; is the default. (default to 1.0M).</param>
        public CreateSpeechRequest(CreateSpeechRequestModel model = default(CreateSpeechRequestModel), string input = default(string), VoiceEnum voice = default(VoiceEnum), ResponseFormatEnum? responseFormat = ResponseFormatEnum.Mp3, decimal speed = 1.0M)
        {
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new ArgumentNullException("model is a required property for CreateSpeechRequest and cannot be null");
            }
            this.Model = model;
            // to ensure "input" is required (not null)
            if (input == null)
            {
                throw new ArgumentNullException("input is a required property for CreateSpeechRequest and cannot be null");
            }
            this.Input = input;
            this.Voice = voice;
            this.ResponseFormat = responseFormat;
            this.Speed = speed;
        }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "model", IsRequired = true, EmitDefaultValue = true)]
        public CreateSpeechRequestModel Model { get; set; }

        /// <summary>
        /// The text to generate audio for. The maximum length is 4096 characters.
        /// </summary>
        /// <value>The text to generate audio for. The maximum length is 4096 characters.</value>
        [DataMember(Name = "input", IsRequired = true, EmitDefaultValue = true)]
        public string Input { get; set; }

        /// <summary>
        /// The speed of the generated audio. Select a value from &#x60;0.25&#x60; to &#x60;4.0&#x60;. &#x60;1.0&#x60; is the default.
        /// </summary>
        /// <value>The speed of the generated audio. Select a value from &#x60;0.25&#x60; to &#x60;4.0&#x60;. &#x60;1.0&#x60; is the default.</value>
        [DataMember(Name = "speed", EmitDefaultValue = false)]
        public decimal Speed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateSpeechRequest {\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Voice: ").Append(Voice).Append("\n");
            sb.Append("  ResponseFormat: ").Append(ResponseFormat).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Input (string) maxLength
            if (this.Input != null && this.Input.Length > 4096)
            {
                yield return new ValidationResult("Invalid value for Input, length must be less than 4096.", new [] { "Input" });
            }

            // Speed (decimal) maximum
            if (this.Speed > (decimal)4.0)
            {
                yield return new ValidationResult("Invalid value for Speed, must be a value less than or equal to 4.0.", new [] { "Speed" });
            }

            // Speed (decimal) minimum
            if (this.Speed < (decimal)0.25)
            {
                yield return new ValidationResult("Invalid value for Speed, must be a value greater than or equal to 0.25.", new [] { "Speed" });
            }

            yield break;
        }
    }

}
