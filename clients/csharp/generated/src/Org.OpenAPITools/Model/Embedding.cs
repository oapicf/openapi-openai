/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents an embedding vector returned by embedding endpoint. 
    /// </summary>
    [DataContract(Name = "Embedding")]
    public partial class Embedding : IValidatableObject
    {
        /// <summary>
        /// The object type, which is always \&quot;embedding\&quot;.
        /// </summary>
        /// <value>The object type, which is always \&quot;embedding\&quot;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Embedding for value: embedding
            /// </summary>
            [EnumMember(Value = "embedding")]
            Embedding = 1
        }


        /// <summary>
        /// The object type, which is always \&quot;embedding\&quot;.
        /// </summary>
        /// <value>The object type, which is always \&quot;embedding\&quot;.</value>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = true)]
        public ObjectEnum VarObject { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Embedding" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Embedding() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Embedding" /> class.
        /// </summary>
        /// <param name="index">The index of the embedding in the list of embeddings. (required).</param>
        /// <param name="varEmbedding">The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).  (required).</param>
        /// <param name="varObject">The object type, which is always \&quot;embedding\&quot;. (required).</param>
        public Embedding(int index = default(int), List<decimal> varEmbedding = default(List<decimal>), ObjectEnum varObject = default(ObjectEnum))
        {
            this.Index = index;
            // to ensure "varEmbedding" is required (not null)
            if (varEmbedding == null)
            {
                throw new ArgumentNullException("varEmbedding is a required property for Embedding and cannot be null");
            }
            this.VarEmbedding = varEmbedding;
            this.VarObject = varObject;
        }

        /// <summary>
        /// The index of the embedding in the list of embeddings.
        /// </summary>
        /// <value>The index of the embedding in the list of embeddings.</value>
        [DataMember(Name = "index", IsRequired = true, EmitDefaultValue = true)]
        public int Index { get; set; }

        /// <summary>
        /// The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings). 
        /// </summary>
        /// <value>The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings). </value>
        [DataMember(Name = "embedding", IsRequired = true, EmitDefaultValue = true)]
        public List<decimal> VarEmbedding { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Embedding {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  VarEmbedding: ").Append(VarEmbedding).Append("\n");
            sb.Append("  VarObject: ").Append(VarObject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
