/*
 * OpenAI API
 *
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FineTune
    /// </summary>
    [DataContract(Name = "FineTune")]
    public partial class FineTune : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FineTune" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FineTune() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FineTune" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="varObject">varObject (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        /// <param name="model">model (required).</param>
        /// <param name="fineTunedModel">fineTunedModel (required).</param>
        /// <param name="organizationId">organizationId (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="hyperparams">hyperparams (required).</param>
        /// <param name="trainingFiles">trainingFiles (required).</param>
        /// <param name="validationFiles">validationFiles (required).</param>
        /// <param name="resultFiles">resultFiles (required).</param>
        /// <param name="events">events.</param>
        public FineTune(string id = default(string), string varObject = default(string), int createdAt = default(int), int updatedAt = default(int), string model = default(string), string fineTunedModel = default(string), string organizationId = default(string), string status = default(string), Object hyperparams = default(Object), List<OpenAIFile> trainingFiles = default(List<OpenAIFile>), List<OpenAIFile> validationFiles = default(List<OpenAIFile>), List<OpenAIFile> resultFiles = default(List<OpenAIFile>), List<FineTuneEvent> events = default(List<FineTuneEvent>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for FineTune and cannot be null");
            }
            this.Id = id;
            // to ensure "varObject" is required (not null)
            if (varObject == null)
            {
                throw new ArgumentNullException("varObject is a required property for FineTune and cannot be null");
            }
            this.VarObject = varObject;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new ArgumentNullException("model is a required property for FineTune and cannot be null");
            }
            this.Model = model;
            // to ensure "fineTunedModel" is required (not null)
            if (fineTunedModel == null)
            {
                throw new ArgumentNullException("fineTunedModel is a required property for FineTune and cannot be null");
            }
            this.FineTunedModel = fineTunedModel;
            // to ensure "organizationId" is required (not null)
            if (organizationId == null)
            {
                throw new ArgumentNullException("organizationId is a required property for FineTune and cannot be null");
            }
            this.OrganizationId = organizationId;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for FineTune and cannot be null");
            }
            this.Status = status;
            // to ensure "hyperparams" is required (not null)
            if (hyperparams == null)
            {
                throw new ArgumentNullException("hyperparams is a required property for FineTune and cannot be null");
            }
            this.Hyperparams = hyperparams;
            // to ensure "trainingFiles" is required (not null)
            if (trainingFiles == null)
            {
                throw new ArgumentNullException("trainingFiles is a required property for FineTune and cannot be null");
            }
            this.TrainingFiles = trainingFiles;
            // to ensure "validationFiles" is required (not null)
            if (validationFiles == null)
            {
                throw new ArgumentNullException("validationFiles is a required property for FineTune and cannot be null");
            }
            this.ValidationFiles = validationFiles;
            // to ensure "resultFiles" is required (not null)
            if (resultFiles == null)
            {
                throw new ArgumentNullException("resultFiles is a required property for FineTune and cannot be null");
            }
            this.ResultFiles = resultFiles;
            this.Events = events;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets VarObject
        /// </summary>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = true)]
        public string VarObject { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public int UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "model", IsRequired = true, EmitDefaultValue = true)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets FineTunedModel
        /// </summary>
        [DataMember(Name = "fine_tuned_model", IsRequired = true, EmitDefaultValue = true)]
        public string FineTunedModel { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name = "organization_id", IsRequired = true, EmitDefaultValue = true)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Hyperparams
        /// </summary>
        [DataMember(Name = "hyperparams", IsRequired = true, EmitDefaultValue = true)]
        public Object Hyperparams { get; set; }

        /// <summary>
        /// Gets or Sets TrainingFiles
        /// </summary>
        [DataMember(Name = "training_files", IsRequired = true, EmitDefaultValue = true)]
        public List<OpenAIFile> TrainingFiles { get; set; }

        /// <summary>
        /// Gets or Sets ValidationFiles
        /// </summary>
        [DataMember(Name = "validation_files", IsRequired = true, EmitDefaultValue = true)]
        public List<OpenAIFile> ValidationFiles { get; set; }

        /// <summary>
        /// Gets or Sets ResultFiles
        /// </summary>
        [DataMember(Name = "result_files", IsRequired = true, EmitDefaultValue = true)]
        public List<OpenAIFile> ResultFiles { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name = "events", EmitDefaultValue = false)]
        public List<FineTuneEvent> Events { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FineTune {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VarObject: ").Append(VarObject).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  FineTunedModel: ").Append(FineTunedModel).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Hyperparams: ").Append(Hyperparams).Append("\n");
            sb.Append("  TrainingFiles: ").Append(TrainingFiles).Append("\n");
            sb.Append("  ValidationFiles: ").Append(ValidationFiles).Append("\n");
            sb.Append("  ResultFiles: ").Append(ResultFiles).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
