/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The &#x60;fine_tuning.job&#x60; object represents a fine-tuning job that has been created through the API. 
    /// </summary>
    [DataContract(Name = "FineTuningJob")]
    public partial class FineTuningJob : IValidatableObject
    {
        /// <summary>
        /// The object type, which is always \&quot;fine_tuning.job\&quot;.
        /// </summary>
        /// <value>The object type, which is always \&quot;fine_tuning.job\&quot;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum FineTuningJob for value: fine_tuning.job
            /// </summary>
            [EnumMember(Value = "fine_tuning.job")]
            FineTuningJob = 1
        }


        /// <summary>
        /// The object type, which is always \&quot;fine_tuning.job\&quot;.
        /// </summary>
        /// <value>The object type, which is always \&quot;fine_tuning.job\&quot;.</value>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = true)]
        public ObjectEnum Object { get; set; }
        /// <summary>
        /// The current status of the fine-tuning job, which can be either &#x60;validating_files&#x60;, &#x60;queued&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.
        /// </summary>
        /// <value>The current status of the fine-tuning job, which can be either &#x60;validating_files&#x60;, &#x60;queued&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ValidatingFiles for value: validating_files
            /// </summary>
            [EnumMember(Value = "validating_files")]
            ValidatingFiles = 1,

            /// <summary>
            /// Enum Queued for value: queued
            /// </summary>
            [EnumMember(Value = "queued")]
            Queued = 2,

            /// <summary>
            /// Enum Running for value: running
            /// </summary>
            [EnumMember(Value = "running")]
            Running = 3,

            /// <summary>
            /// Enum Succeeded for value: succeeded
            /// </summary>
            [EnumMember(Value = "succeeded")]
            Succeeded = 4,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 5,

            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 6
        }


        /// <summary>
        /// The current status of the fine-tuning job, which can be either &#x60;validating_files&#x60;, &#x60;queued&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.
        /// </summary>
        /// <value>The current status of the fine-tuning job, which can be either &#x60;validating_files&#x60;, &#x60;queued&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FineTuningJob" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FineTuningJob() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FineTuningJob" /> class.
        /// </summary>
        /// <param name="id">The object identifier, which can be referenced in the API endpoints. (required).</param>
        /// <param name="createdAt">The Unix timestamp (in seconds) for when the fine-tuning job was created. (required).</param>
        /// <param name="error">error (required).</param>
        /// <param name="fineTunedModel">The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running. (required).</param>
        /// <param name="finishedAt">The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running. (required).</param>
        /// <param name="hyperparameters">hyperparameters (required).</param>
        /// <param name="model">The base model that is being fine-tuned. (required).</param>
        /// <param name="varObject">The object type, which is always \&quot;fine_tuning.job\&quot;. (required).</param>
        /// <param name="organizationId">The organization that owns the fine-tuning job. (required).</param>
        /// <param name="resultFiles">The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents). (required).</param>
        /// <param name="status">The current status of the fine-tuning job, which can be either &#x60;validating_files&#x60;, &#x60;queued&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;. (required).</param>
        /// <param name="trainedTokens">The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running. (required).</param>
        /// <param name="trainingFile">The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents). (required).</param>
        /// <param name="validationFile">The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents). (required).</param>
        /// <param name="integrations">A list of integrations to enable for this fine-tuning job..</param>
        /// <param name="seed">The seed used for the fine-tuning job. (required).</param>
        public FineTuningJob(string id = default(string), int createdAt = default(int), FineTuningJobError error = default(FineTuningJobError), string fineTunedModel = default(string), int? finishedAt = default(int?), FineTuningJobHyperparameters hyperparameters = default(FineTuningJobHyperparameters), string model = default(string), ObjectEnum varObject = default(ObjectEnum), string organizationId = default(string), List<string> resultFiles = default(List<string>), StatusEnum status = default(StatusEnum), int? trainedTokens = default(int?), string trainingFile = default(string), string validationFile = default(string), List<FineTuningJobIntegrationsInner> integrations = default(List<FineTuningJobIntegrationsInner>), int seed = default(int))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for FineTuningJob and cannot be null");
            }
            this.Id = id;
            this.CreatedAt = createdAt;
            // to ensure "error" is required (not null)
            if (error == null)
            {
                throw new ArgumentNullException("error is a required property for FineTuningJob and cannot be null");
            }
            this.Error = error;
            // to ensure "fineTunedModel" is required (not null)
            if (fineTunedModel == null)
            {
                throw new ArgumentNullException("fineTunedModel is a required property for FineTuningJob and cannot be null");
            }
            this.FineTunedModel = fineTunedModel;
            // to ensure "finishedAt" is required (not null)
            if (finishedAt == null)
            {
                throw new ArgumentNullException("finishedAt is a required property for FineTuningJob and cannot be null");
            }
            this.FinishedAt = finishedAt;
            // to ensure "hyperparameters" is required (not null)
            if (hyperparameters == null)
            {
                throw new ArgumentNullException("hyperparameters is a required property for FineTuningJob and cannot be null");
            }
            this.Hyperparameters = hyperparameters;
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new ArgumentNullException("model is a required property for FineTuningJob and cannot be null");
            }
            this.Model = model;
            this.Object = varObject;
            // to ensure "organizationId" is required (not null)
            if (organizationId == null)
            {
                throw new ArgumentNullException("organizationId is a required property for FineTuningJob and cannot be null");
            }
            this.OrganizationId = organizationId;
            // to ensure "resultFiles" is required (not null)
            if (resultFiles == null)
            {
                throw new ArgumentNullException("resultFiles is a required property for FineTuningJob and cannot be null");
            }
            this.ResultFiles = resultFiles;
            this.Status = status;
            // to ensure "trainedTokens" is required (not null)
            if (trainedTokens == null)
            {
                throw new ArgumentNullException("trainedTokens is a required property for FineTuningJob and cannot be null");
            }
            this.TrainedTokens = trainedTokens;
            // to ensure "trainingFile" is required (not null)
            if (trainingFile == null)
            {
                throw new ArgumentNullException("trainingFile is a required property for FineTuningJob and cannot be null");
            }
            this.TrainingFile = trainingFile;
            // to ensure "validationFile" is required (not null)
            if (validationFile == null)
            {
                throw new ArgumentNullException("validationFile is a required property for FineTuningJob and cannot be null");
            }
            this.ValidationFile = validationFile;
            this.Seed = seed;
            this.Integrations = integrations;
        }

        /// <summary>
        /// The object identifier, which can be referenced in the API endpoints.
        /// </summary>
        /// <value>The object identifier, which can be referenced in the API endpoints.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the fine-tuning job was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the fine-tuning job was created.</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", IsRequired = true, EmitDefaultValue = true)]
        public FineTuningJobError Error { get; set; }

        /// <summary>
        /// The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
        /// </summary>
        /// <value>The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.</value>
        [DataMember(Name = "fine_tuned_model", IsRequired = true, EmitDefaultValue = true)]
        public string FineTunedModel { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.</value>
        [DataMember(Name = "finished_at", IsRequired = true, EmitDefaultValue = true)]
        public int? FinishedAt { get; set; }

        /// <summary>
        /// Gets or Sets Hyperparameters
        /// </summary>
        [DataMember(Name = "hyperparameters", IsRequired = true, EmitDefaultValue = true)]
        public FineTuningJobHyperparameters Hyperparameters { get; set; }

        /// <summary>
        /// The base model that is being fine-tuned.
        /// </summary>
        /// <value>The base model that is being fine-tuned.</value>
        [DataMember(Name = "model", IsRequired = true, EmitDefaultValue = true)]
        public string Model { get; set; }

        /// <summary>
        /// The organization that owns the fine-tuning job.
        /// </summary>
        /// <value>The organization that owns the fine-tuning job.</value>
        [DataMember(Name = "organization_id", IsRequired = true, EmitDefaultValue = true)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
        /// </summary>
        /// <value>The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).</value>
        [DataMember(Name = "result_files", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ResultFiles { get; set; }

        /// <summary>
        /// The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
        /// </summary>
        /// <value>The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.</value>
        [DataMember(Name = "trained_tokens", IsRequired = true, EmitDefaultValue = true)]
        public int? TrainedTokens { get; set; }

        /// <summary>
        /// The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
        /// </summary>
        /// <value>The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).</value>
        [DataMember(Name = "training_file", IsRequired = true, EmitDefaultValue = true)]
        public string TrainingFile { get; set; }

        /// <summary>
        /// The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
        /// </summary>
        /// <value>The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).</value>
        [DataMember(Name = "validation_file", IsRequired = true, EmitDefaultValue = true)]
        public string ValidationFile { get; set; }

        /// <summary>
        /// A list of integrations to enable for this fine-tuning job.
        /// </summary>
        /// <value>A list of integrations to enable for this fine-tuning job.</value>
        [DataMember(Name = "integrations", EmitDefaultValue = true)]
        public List<FineTuningJobIntegrationsInner> Integrations { get; set; }

        /// <summary>
        /// The seed used for the fine-tuning job.
        /// </summary>
        /// <value>The seed used for the fine-tuning job.</value>
        [DataMember(Name = "seed", IsRequired = true, EmitDefaultValue = true)]
        public int Seed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FineTuningJob {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  FineTunedModel: ").Append(FineTunedModel).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  Hyperparameters: ").Append(Hyperparameters).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  ResultFiles: ").Append(ResultFiles).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TrainedTokens: ").Append(TrainedTokens).Append("\n");
            sb.Append("  TrainingFile: ").Append(TrainingFile).Append("\n");
            sb.Append("  ValidationFile: ").Append(ValidationFile).Append("\n");
            sb.Append("  Integrations: ").Append(Integrations).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
