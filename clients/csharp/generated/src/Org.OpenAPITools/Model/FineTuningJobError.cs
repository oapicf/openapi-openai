/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// For fine-tuning jobs that have &#x60;failed&#x60;, this will contain more information on the cause of the failure.
    /// </summary>
    [DataContract(Name = "FineTuningJob_error")]
    public partial class FineTuningJobError : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FineTuningJobError" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FineTuningJobError() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FineTuningJobError" /> class.
        /// </summary>
        /// <param name="code">A machine-readable error code. (required).</param>
        /// <param name="message">A human-readable error message. (required).</param>
        /// <param name="param">The parameter that was invalid, usually &#x60;training_file&#x60; or &#x60;validation_file&#x60;. This field will be null if the failure was not parameter-specific. (required).</param>
        public FineTuningJobError(string code = default(string), string message = default(string), string param = default(string))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for FineTuningJobError and cannot be null");
            }
            this.Code = code;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for FineTuningJobError and cannot be null");
            }
            this.Message = message;
            // to ensure "param" is required (not null)
            if (param == null)
            {
                throw new ArgumentNullException("param is a required property for FineTuningJobError and cannot be null");
            }
            this.Param = param;
        }

        /// <summary>
        /// A machine-readable error code.
        /// </summary>
        /// <value>A machine-readable error code.</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// A human-readable error message.
        /// </summary>
        /// <value>A human-readable error message.</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// The parameter that was invalid, usually &#x60;training_file&#x60; or &#x60;validation_file&#x60;. This field will be null if the failure was not parameter-specific.
        /// </summary>
        /// <value>The parameter that was invalid, usually &#x60;training_file&#x60; or &#x60;validation_file&#x60;. This field will be null if the failure was not parameter-specific.</value>
        [DataMember(Name = "param", IsRequired = true, EmitDefaultValue = true)]
        public string Param { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FineTuningJobError {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Param: ").Append(Param).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
