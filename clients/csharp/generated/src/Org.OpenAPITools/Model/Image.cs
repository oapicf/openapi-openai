/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents the url or the content of an image generated by the OpenAI API.
    /// </summary>
    [DataContract(Name = "Image")]
    public partial class Image : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Image" /> class.
        /// </summary>
        /// <param name="b64Json">The base64-encoded JSON of the generated image, if &#x60;response_format&#x60; is &#x60;b64_json&#x60;..</param>
        /// <param name="url">The URL of the generated image, if &#x60;response_format&#x60; is &#x60;url&#x60; (default)..</param>
        /// <param name="revisedPrompt">The prompt that was used to generate the image, if there was any revision to the prompt..</param>
        public Image(string b64Json = default(string), string url = default(string), string revisedPrompt = default(string))
        {
            this.B64Json = b64Json;
            this.Url = url;
            this.RevisedPrompt = revisedPrompt;
        }

        /// <summary>
        /// The base64-encoded JSON of the generated image, if &#x60;response_format&#x60; is &#x60;b64_json&#x60;.
        /// </summary>
        /// <value>The base64-encoded JSON of the generated image, if &#x60;response_format&#x60; is &#x60;b64_json&#x60;.</value>
        [DataMember(Name = "b64_json", EmitDefaultValue = false)]
        public string B64Json { get; set; }

        /// <summary>
        /// The URL of the generated image, if &#x60;response_format&#x60; is &#x60;url&#x60; (default).
        /// </summary>
        /// <value>The URL of the generated image, if &#x60;response_format&#x60; is &#x60;url&#x60; (default).</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// The prompt that was used to generate the image, if there was any revision to the prompt.
        /// </summary>
        /// <value>The prompt that was used to generate the image, if there was any revision to the prompt.</value>
        [DataMember(Name = "revised_prompt", EmitDefaultValue = false)]
        public string RevisedPrompt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Image {\n");
            sb.Append("  B64Json: ").Append(B64Json).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  RevisedPrompt: ").Append(RevisedPrompt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
