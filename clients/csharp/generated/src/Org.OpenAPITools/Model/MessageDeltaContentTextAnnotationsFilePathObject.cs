/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A URL for the file that&#39;s generated when the assistant used the &#x60;code_interpreter&#x60; tool to generate a file.
    /// </summary>
    [DataContract(Name = "MessageDeltaContentTextAnnotationsFilePathObject")]
    public partial class MessageDeltaContentTextAnnotationsFilePathObject : IValidatableObject
    {
        /// <summary>
        /// Always &#x60;file_path&#x60;.
        /// </summary>
        /// <value>Always &#x60;file_path&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum FilePath for value: file_path
            /// </summary>
            [EnumMember(Value = "file_path")]
            FilePath = 1
        }


        /// <summary>
        /// Always &#x60;file_path&#x60;.
        /// </summary>
        /// <value>Always &#x60;file_path&#x60;.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageDeltaContentTextAnnotationsFilePathObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageDeltaContentTextAnnotationsFilePathObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageDeltaContentTextAnnotationsFilePathObject" /> class.
        /// </summary>
        /// <param name="index">The index of the annotation in the text content part. (required).</param>
        /// <param name="type">Always &#x60;file_path&#x60;. (required).</param>
        /// <param name="text">The text in the message content that needs to be replaced..</param>
        /// <param name="filePath">filePath.</param>
        /// <param name="startIndex">startIndex.</param>
        /// <param name="endIndex">endIndex.</param>
        public MessageDeltaContentTextAnnotationsFilePathObject(int index = default(int), TypeEnum type = default(TypeEnum), string text = default(string), MessageDeltaContentTextAnnotationsFilePathObjectFilePath filePath = default(MessageDeltaContentTextAnnotationsFilePathObjectFilePath), int startIndex = default(int), int endIndex = default(int))
        {
            this.Index = index;
            this.Type = type;
            this.Text = text;
            this.FilePath = filePath;
            this.StartIndex = startIndex;
            this.EndIndex = endIndex;
        }

        /// <summary>
        /// The index of the annotation in the text content part.
        /// </summary>
        /// <value>The index of the annotation in the text content part.</value>
        [DataMember(Name = "index", IsRequired = true, EmitDefaultValue = true)]
        public int Index { get; set; }

        /// <summary>
        /// The text in the message content that needs to be replaced.
        /// </summary>
        /// <value>The text in the message content that needs to be replaced.</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets FilePath
        /// </summary>
        [DataMember(Name = "file_path", EmitDefaultValue = false)]
        public MessageDeltaContentTextAnnotationsFilePathObjectFilePath FilePath { get; set; }

        /// <summary>
        /// Gets or Sets StartIndex
        /// </summary>
        [DataMember(Name = "start_index", EmitDefaultValue = false)]
        public int StartIndex { get; set; }

        /// <summary>
        /// Gets or Sets EndIndex
        /// </summary>
        [DataMember(Name = "end_index", EmitDefaultValue = false)]
        public int EndIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageDeltaContentTextAnnotationsFilePathObject {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  FilePath: ").Append(FilePath).Append("\n");
            sb.Append("  StartIndex: ").Append(StartIndex).Append("\n");
            sb.Append("  EndIndex: ").Append(EndIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StartIndex (int) minimum
            if (this.StartIndex < (int)0)
            {
                yield return new ValidationResult("Invalid value for StartIndex, must be a value greater than or equal to 0.", new [] { "StartIndex" });
            }

            // EndIndex (int) minimum
            if (this.EndIndex < (int)0)
            {
                yield return new ValidationResult("Invalid value for EndIndex, must be a value greater than or equal to 0.", new [] { "EndIndex" });
            }

            yield break;
        }
    }

}
