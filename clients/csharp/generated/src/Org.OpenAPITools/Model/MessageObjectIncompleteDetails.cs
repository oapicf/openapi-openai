/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// On an incomplete message, details about why the message is incomplete.
    /// </summary>
    [DataContract(Name = "MessageObject_incomplete_details")]
    public partial class MessageObjectIncompleteDetails : IValidatableObject
    {
        /// <summary>
        /// The reason the message is incomplete.
        /// </summary>
        /// <value>The reason the message is incomplete.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonEnum
        {
            /// <summary>
            /// Enum ContentFilter for value: content_filter
            /// </summary>
            [EnumMember(Value = "content_filter")]
            ContentFilter = 1,

            /// <summary>
            /// Enum MaxTokens for value: max_tokens
            /// </summary>
            [EnumMember(Value = "max_tokens")]
            MaxTokens = 2,

            /// <summary>
            /// Enum RunCancelled for value: run_cancelled
            /// </summary>
            [EnumMember(Value = "run_cancelled")]
            RunCancelled = 3,

            /// <summary>
            /// Enum RunExpired for value: run_expired
            /// </summary>
            [EnumMember(Value = "run_expired")]
            RunExpired = 4,

            /// <summary>
            /// Enum RunFailed for value: run_failed
            /// </summary>
            [EnumMember(Value = "run_failed")]
            RunFailed = 5
        }


        /// <summary>
        /// The reason the message is incomplete.
        /// </summary>
        /// <value>The reason the message is incomplete.</value>
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = true)]
        public ReasonEnum Reason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageObjectIncompleteDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageObjectIncompleteDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageObjectIncompleteDetails" /> class.
        /// </summary>
        /// <param name="reason">The reason the message is incomplete. (required).</param>
        public MessageObjectIncompleteDetails(ReasonEnum reason = default(ReasonEnum))
        {
            this.Reason = reason;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageObjectIncompleteDetails {\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
