/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents an execution run on a [thread](/docs/api-reference/threads).
    /// </summary>
    [DataContract(Name = "RunObject")]
    public partial class RunObject : IValidatableObject
    {
        /// <summary>
        /// The object type, which is always &#x60;thread.run&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;thread.run&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum ThreadRun for value: thread.run
            /// </summary>
            [EnumMember(Value = "thread.run")]
            ThreadRun = 1
        }


        /// <summary>
        /// The object type, which is always &#x60;thread.run&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;thread.run&#x60;.</value>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = true)]
        public ObjectEnum Object { get; set; }
        /// <summary>
        /// The status of the run, which can be either &#x60;queued&#x60;, &#x60;in_progress&#x60;, &#x60;requires_action&#x60;, &#x60;cancelling&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.
        /// </summary>
        /// <value>The status of the run, which can be either &#x60;queued&#x60;, &#x60;in_progress&#x60;, &#x60;requires_action&#x60;, &#x60;cancelling&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Queued for value: queued
            /// </summary>
            [EnumMember(Value = "queued")]
            Queued = 1,

            /// <summary>
            /// Enum InProgress for value: in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgress = 2,

            /// <summary>
            /// Enum RequiresAction for value: requires_action
            /// </summary>
            [EnumMember(Value = "requires_action")]
            RequiresAction = 3,

            /// <summary>
            /// Enum Cancelling for value: cancelling
            /// </summary>
            [EnumMember(Value = "cancelling")]
            Cancelling = 4,

            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 5,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 6,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 7,

            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired = 8
        }


        /// <summary>
        /// The status of the run, which can be either &#x60;queued&#x60;, &#x60;in_progress&#x60;, &#x60;requires_action&#x60;, &#x60;cancelling&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.
        /// </summary>
        /// <value>The status of the run, which can be either &#x60;queued&#x60;, &#x60;in_progress&#x60;, &#x60;requires_action&#x60;, &#x60;cancelling&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RunObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RunObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RunObject" /> class.
        /// </summary>
        /// <param name="id">The identifier, which can be referenced in API endpoints. (required).</param>
        /// <param name="varObject">The object type, which is always &#x60;thread.run&#x60;. (required).</param>
        /// <param name="createdAt">The Unix timestamp (in seconds) for when the run was created. (required).</param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run. (required).</param>
        /// <param name="assistantId">The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run. (required).</param>
        /// <param name="status">The status of the run, which can be either &#x60;queued&#x60;, &#x60;in_progress&#x60;, &#x60;requires_action&#x60;, &#x60;cancelling&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;. (required).</param>
        /// <param name="requiredAction">requiredAction (required).</param>
        /// <param name="lastError">lastError (required).</param>
        /// <param name="expiresAt">The Unix timestamp (in seconds) for when the run will expire. (required).</param>
        /// <param name="startedAt">The Unix timestamp (in seconds) for when the run was started. (required).</param>
        /// <param name="cancelledAt">The Unix timestamp (in seconds) for when the run was cancelled. (required).</param>
        /// <param name="failedAt">The Unix timestamp (in seconds) for when the run failed. (required).</param>
        /// <param name="completedAt">The Unix timestamp (in seconds) for when the run was completed. (required).</param>
        /// <param name="incompleteDetails">incompleteDetails (required).</param>
        /// <param name="model">The model that the [assistant](/docs/api-reference/assistants) used for this run. (required).</param>
        /// <param name="instructions">The instructions that the [assistant](/docs/api-reference/assistants) used for this run. (required).</param>
        /// <param name="tools">The list of tools that the [assistant](/docs/api-reference/assistants) used for this run. (required).</param>
        /// <param name="fileIds">The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run. (required).</param>
        /// <param name="metadata">Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.  (required).</param>
        /// <param name="usage">usage (required).</param>
        /// <param name="temperature">The sampling temperature used for this run. If not set, defaults to 1..</param>
        /// <param name="maxPromptTokens">The maximum number of prompt tokens specified to have been used over the course of the run.  (required).</param>
        /// <param name="maxCompletionTokens">The maximum number of completion tokens specified to have been used over the course of the run.  (required).</param>
        /// <param name="truncationStrategy">truncationStrategy (required).</param>
        /// <param name="toolChoice">toolChoice (required).</param>
        /// <param name="responseFormat">responseFormat (required).</param>
        public RunObject(string id = default(string), ObjectEnum varObject = default(ObjectEnum), int createdAt = default(int), string threadId = default(string), string assistantId = default(string), StatusEnum status = default(StatusEnum), RunObjectRequiredAction requiredAction = default(RunObjectRequiredAction), RunObjectLastError lastError = default(RunObjectLastError), int? expiresAt = default(int?), int? startedAt = default(int?), int? cancelledAt = default(int?), int? failedAt = default(int?), int? completedAt = default(int?), RunObjectIncompleteDetails incompleteDetails = default(RunObjectIncompleteDetails), string model = default(string), string instructions = default(string), List<AssistantObjectToolsInner> tools = default(List<AssistantObjectToolsInner>), List<string> fileIds = default(List<string>), Object metadata = default(Object), RunCompletionUsage usage = default(RunCompletionUsage), decimal? temperature = default(decimal?), int? maxPromptTokens = default(int?), int? maxCompletionTokens = default(int?), TruncationObject truncationStrategy = default(TruncationObject), AssistantsApiToolChoiceOption toolChoice = default(AssistantsApiToolChoiceOption), AssistantsApiResponseFormatOption responseFormat = default(AssistantsApiResponseFormatOption))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for RunObject and cannot be null");
            }
            this.Id = id;
            this.Object = varObject;
            this.CreatedAt = createdAt;
            // to ensure "threadId" is required (not null)
            if (threadId == null)
            {
                throw new ArgumentNullException("threadId is a required property for RunObject and cannot be null");
            }
            this.ThreadId = threadId;
            // to ensure "assistantId" is required (not null)
            if (assistantId == null)
            {
                throw new ArgumentNullException("assistantId is a required property for RunObject and cannot be null");
            }
            this.AssistantId = assistantId;
            this.Status = status;
            // to ensure "requiredAction" is required (not null)
            if (requiredAction == null)
            {
                throw new ArgumentNullException("requiredAction is a required property for RunObject and cannot be null");
            }
            this.RequiredAction = requiredAction;
            // to ensure "lastError" is required (not null)
            if (lastError == null)
            {
                throw new ArgumentNullException("lastError is a required property for RunObject and cannot be null");
            }
            this.LastError = lastError;
            // to ensure "expiresAt" is required (not null)
            if (expiresAt == null)
            {
                throw new ArgumentNullException("expiresAt is a required property for RunObject and cannot be null");
            }
            this.ExpiresAt = expiresAt;
            // to ensure "startedAt" is required (not null)
            if (startedAt == null)
            {
                throw new ArgumentNullException("startedAt is a required property for RunObject and cannot be null");
            }
            this.StartedAt = startedAt;
            // to ensure "cancelledAt" is required (not null)
            if (cancelledAt == null)
            {
                throw new ArgumentNullException("cancelledAt is a required property for RunObject and cannot be null");
            }
            this.CancelledAt = cancelledAt;
            // to ensure "failedAt" is required (not null)
            if (failedAt == null)
            {
                throw new ArgumentNullException("failedAt is a required property for RunObject and cannot be null");
            }
            this.FailedAt = failedAt;
            // to ensure "completedAt" is required (not null)
            if (completedAt == null)
            {
                throw new ArgumentNullException("completedAt is a required property for RunObject and cannot be null");
            }
            this.CompletedAt = completedAt;
            // to ensure "incompleteDetails" is required (not null)
            if (incompleteDetails == null)
            {
                throw new ArgumentNullException("incompleteDetails is a required property for RunObject and cannot be null");
            }
            this.IncompleteDetails = incompleteDetails;
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new ArgumentNullException("model is a required property for RunObject and cannot be null");
            }
            this.Model = model;
            // to ensure "instructions" is required (not null)
            if (instructions == null)
            {
                throw new ArgumentNullException("instructions is a required property for RunObject and cannot be null");
            }
            this.Instructions = instructions;
            // to ensure "tools" is required (not null)
            if (tools == null)
            {
                throw new ArgumentNullException("tools is a required property for RunObject and cannot be null");
            }
            this.Tools = tools;
            // to ensure "fileIds" is required (not null)
            if (fileIds == null)
            {
                throw new ArgumentNullException("fileIds is a required property for RunObject and cannot be null");
            }
            this.FileIds = fileIds;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for RunObject and cannot be null");
            }
            this.Metadata = metadata;
            // to ensure "usage" is required (not null)
            if (usage == null)
            {
                throw new ArgumentNullException("usage is a required property for RunObject and cannot be null");
            }
            this.Usage = usage;
            // to ensure "maxPromptTokens" is required (not null)
            if (maxPromptTokens == null)
            {
                throw new ArgumentNullException("maxPromptTokens is a required property for RunObject and cannot be null");
            }
            this.MaxPromptTokens = maxPromptTokens;
            // to ensure "maxCompletionTokens" is required (not null)
            if (maxCompletionTokens == null)
            {
                throw new ArgumentNullException("maxCompletionTokens is a required property for RunObject and cannot be null");
            }
            this.MaxCompletionTokens = maxCompletionTokens;
            // to ensure "truncationStrategy" is required (not null)
            if (truncationStrategy == null)
            {
                throw new ArgumentNullException("truncationStrategy is a required property for RunObject and cannot be null");
            }
            this.TruncationStrategy = truncationStrategy;
            // to ensure "toolChoice" is required (not null)
            if (toolChoice == null)
            {
                throw new ArgumentNullException("toolChoice is a required property for RunObject and cannot be null");
            }
            this.ToolChoice = toolChoice;
            // to ensure "responseFormat" is required (not null)
            if (responseFormat == null)
            {
                throw new ArgumentNullException("responseFormat is a required property for RunObject and cannot be null");
            }
            this.ResponseFormat = responseFormat;
            this.Temperature = temperature;
        }

        /// <summary>
        /// The identifier, which can be referenced in API endpoints.
        /// </summary>
        /// <value>The identifier, which can be referenced in API endpoints.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run was created.</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
        /// </summary>
        /// <value>The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.</value>
        [DataMember(Name = "thread_id", IsRequired = true, EmitDefaultValue = true)]
        public string ThreadId { get; set; }

        /// <summary>
        /// The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
        /// </summary>
        /// <value>The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.</value>
        [DataMember(Name = "assistant_id", IsRequired = true, EmitDefaultValue = true)]
        public string AssistantId { get; set; }

        /// <summary>
        /// Gets or Sets RequiredAction
        /// </summary>
        [DataMember(Name = "required_action", IsRequired = true, EmitDefaultValue = true)]
        public RunObjectRequiredAction RequiredAction { get; set; }

        /// <summary>
        /// Gets or Sets LastError
        /// </summary>
        [DataMember(Name = "last_error", IsRequired = true, EmitDefaultValue = true)]
        public RunObjectLastError LastError { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run will expire.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run will expire.</value>
        [DataMember(Name = "expires_at", IsRequired = true, EmitDefaultValue = true)]
        public int? ExpiresAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run was started.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run was started.</value>
        [DataMember(Name = "started_at", IsRequired = true, EmitDefaultValue = true)]
        public int? StartedAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run was cancelled.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run was cancelled.</value>
        [DataMember(Name = "cancelled_at", IsRequired = true, EmitDefaultValue = true)]
        public int? CancelledAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run failed.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run failed.</value>
        [DataMember(Name = "failed_at", IsRequired = true, EmitDefaultValue = true)]
        public int? FailedAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run was completed.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run was completed.</value>
        [DataMember(Name = "completed_at", IsRequired = true, EmitDefaultValue = true)]
        public int? CompletedAt { get; set; }

        /// <summary>
        /// Gets or Sets IncompleteDetails
        /// </summary>
        [DataMember(Name = "incomplete_details", IsRequired = true, EmitDefaultValue = true)]
        public RunObjectIncompleteDetails IncompleteDetails { get; set; }

        /// <summary>
        /// The model that the [assistant](/docs/api-reference/assistants) used for this run.
        /// </summary>
        /// <value>The model that the [assistant](/docs/api-reference/assistants) used for this run.</value>
        [DataMember(Name = "model", IsRequired = true, EmitDefaultValue = true)]
        public string Model { get; set; }

        /// <summary>
        /// The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
        /// </summary>
        /// <value>The instructions that the [assistant](/docs/api-reference/assistants) used for this run.</value>
        [DataMember(Name = "instructions", IsRequired = true, EmitDefaultValue = true)]
        public string Instructions { get; set; }

        /// <summary>
        /// The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
        /// </summary>
        /// <value>The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.</value>
        [DataMember(Name = "tools", IsRequired = true, EmitDefaultValue = true)]
        public List<AssistantObjectToolsInner> Tools { get; set; }

        /// <summary>
        /// The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
        /// </summary>
        /// <value>The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.</value>
        [DataMember(Name = "file_ids", IsRequired = true, EmitDefaultValue = true)]
        public List<string> FileIds { get; set; }

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </value>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name = "usage", IsRequired = true, EmitDefaultValue = true)]
        public RunCompletionUsage Usage { get; set; }

        /// <summary>
        /// The sampling temperature used for this run. If not set, defaults to 1.
        /// </summary>
        /// <value>The sampling temperature used for this run. If not set, defaults to 1.</value>
        [DataMember(Name = "temperature", EmitDefaultValue = true)]
        public decimal? Temperature { get; set; }

        /// <summary>
        /// The maximum number of prompt tokens specified to have been used over the course of the run. 
        /// </summary>
        /// <value>The maximum number of prompt tokens specified to have been used over the course of the run. </value>
        [DataMember(Name = "max_prompt_tokens", IsRequired = true, EmitDefaultValue = true)]
        public int? MaxPromptTokens { get; set; }

        /// <summary>
        /// The maximum number of completion tokens specified to have been used over the course of the run. 
        /// </summary>
        /// <value>The maximum number of completion tokens specified to have been used over the course of the run. </value>
        [DataMember(Name = "max_completion_tokens", IsRequired = true, EmitDefaultValue = true)]
        public int? MaxCompletionTokens { get; set; }

        /// <summary>
        /// Gets or Sets TruncationStrategy
        /// </summary>
        [DataMember(Name = "truncation_strategy", IsRequired = true, EmitDefaultValue = true)]
        public TruncationObject TruncationStrategy { get; set; }

        /// <summary>
        /// Gets or Sets ToolChoice
        /// </summary>
        [DataMember(Name = "tool_choice", IsRequired = true, EmitDefaultValue = true)]
        public AssistantsApiToolChoiceOption ToolChoice { get; set; }

        /// <summary>
        /// Gets or Sets ResponseFormat
        /// </summary>
        [DataMember(Name = "response_format", IsRequired = true, EmitDefaultValue = true)]
        public AssistantsApiResponseFormatOption ResponseFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RunObject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("  AssistantId: ").Append(AssistantId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  RequiredAction: ").Append(RequiredAction).Append("\n");
            sb.Append("  LastError: ").Append(LastError).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  CancelledAt: ").Append(CancelledAt).Append("\n");
            sb.Append("  FailedAt: ").Append(FailedAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  IncompleteDetails: ").Append(IncompleteDetails).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("  Tools: ").Append(Tools).Append("\n");
            sb.Append("  FileIds: ").Append(FileIds).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  MaxPromptTokens: ").Append(MaxPromptTokens).Append("\n");
            sb.Append("  MaxCompletionTokens: ").Append(MaxCompletionTokens).Append("\n");
            sb.Append("  TruncationStrategy: ").Append(TruncationStrategy).Append("\n");
            sb.Append("  ToolChoice: ").Append(ToolChoice).Append("\n");
            sb.Append("  ResponseFormat: ").Append(ResponseFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MaxPromptTokens (int?) minimum
            if (this.MaxPromptTokens < (int?)256)
            {
                yield return new ValidationResult("Invalid value for MaxPromptTokens, must be a value greater than or equal to 256.", new [] { "MaxPromptTokens" });
            }

            // MaxCompletionTokens (int?) minimum
            if (this.MaxCompletionTokens < (int?)256)
            {
                yield return new ValidationResult("Invalid value for MaxCompletionTokens, must be a value greater than or equal to 256.", new [] { "MaxCompletionTokens" });
            }

            yield break;
        }
    }

}
