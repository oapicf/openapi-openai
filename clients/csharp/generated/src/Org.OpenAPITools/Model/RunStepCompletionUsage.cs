/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Usage statistics related to the run step. This value will be &#x60;null&#x60; while the run step&#39;s status is &#x60;in_progress&#x60;.
    /// </summary>
    [DataContract(Name = "RunStepCompletionUsage")]
    public partial class RunStepCompletionUsage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RunStepCompletionUsage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RunStepCompletionUsage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RunStepCompletionUsage" /> class.
        /// </summary>
        /// <param name="completionTokens">Number of completion tokens used over the course of the run step. (required).</param>
        /// <param name="promptTokens">Number of prompt tokens used over the course of the run step. (required).</param>
        /// <param name="totalTokens">Total number of tokens used (prompt + completion). (required).</param>
        public RunStepCompletionUsage(int completionTokens = default(int), int promptTokens = default(int), int totalTokens = default(int))
        {
            this.CompletionTokens = completionTokens;
            this.PromptTokens = promptTokens;
            this.TotalTokens = totalTokens;
        }

        /// <summary>
        /// Number of completion tokens used over the course of the run step.
        /// </summary>
        /// <value>Number of completion tokens used over the course of the run step.</value>
        [DataMember(Name = "completion_tokens", IsRequired = true, EmitDefaultValue = true)]
        public int CompletionTokens { get; set; }

        /// <summary>
        /// Number of prompt tokens used over the course of the run step.
        /// </summary>
        /// <value>Number of prompt tokens used over the course of the run step.</value>
        [DataMember(Name = "prompt_tokens", IsRequired = true, EmitDefaultValue = true)]
        public int PromptTokens { get; set; }

        /// <summary>
        /// Total number of tokens used (prompt + completion).
        /// </summary>
        /// <value>Total number of tokens used (prompt + completion).</value>
        [DataMember(Name = "total_tokens", IsRequired = true, EmitDefaultValue = true)]
        public int TotalTokens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RunStepCompletionUsage {\n");
            sb.Append("  CompletionTokens: ").Append(CompletionTokens).Append("\n");
            sb.Append("  PromptTokens: ").Append(PromptTokens).Append("\n");
            sb.Append("  TotalTokens: ").Append(TotalTokens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
