/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a step in execution of a run. 
    /// </summary>
    [DataContract(Name = "RunStepObject")]
    public partial class RunStepObject : IValidatableObject
    {
        /// <summary>
        /// The object type, which is always &#x60;thread.run.step&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;thread.run.step&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum ThreadRunStep for value: thread.run.step
            /// </summary>
            [EnumMember(Value = "thread.run.step")]
            ThreadRunStep = 1
        }


        /// <summary>
        /// The object type, which is always &#x60;thread.run.step&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;thread.run.step&#x60;.</value>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = true)]
        public ObjectEnum VarObject { get; set; }
        /// <summary>
        /// The type of run step, which can be either &#x60;message_creation&#x60; or &#x60;tool_calls&#x60;.
        /// </summary>
        /// <value>The type of run step, which can be either &#x60;message_creation&#x60; or &#x60;tool_calls&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum MessageCreation for value: message_creation
            /// </summary>
            [EnumMember(Value = "message_creation")]
            MessageCreation = 1,

            /// <summary>
            /// Enum ToolCalls for value: tool_calls
            /// </summary>
            [EnumMember(Value = "tool_calls")]
            ToolCalls = 2
        }


        /// <summary>
        /// The type of run step, which can be either &#x60;message_creation&#x60; or &#x60;tool_calls&#x60;.
        /// </summary>
        /// <value>The type of run step, which can be either &#x60;message_creation&#x60; or &#x60;tool_calls&#x60;.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// The status of the run step, which can be either &#x60;in_progress&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.
        /// </summary>
        /// <value>The status of the run step, which can be either &#x60;in_progress&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum InProgress for value: in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgress = 1,

            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 2,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 3,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 4,

            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired = 5
        }


        /// <summary>
        /// The status of the run step, which can be either &#x60;in_progress&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.
        /// </summary>
        /// <value>The status of the run step, which can be either &#x60;in_progress&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RunStepObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RunStepObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RunStepObject" /> class.
        /// </summary>
        /// <param name="id">The identifier of the run step, which can be referenced in API endpoints. (required).</param>
        /// <param name="varObject">The object type, which is always &#x60;thread.run.step&#x60;. (required).</param>
        /// <param name="createdAt">The Unix timestamp (in seconds) for when the run step was created. (required).</param>
        /// <param name="assistantId">The ID of the [assistant](/docs/api-reference/assistants) associated with the run step. (required).</param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run. (required).</param>
        /// <param name="runId">The ID of the [run](/docs/api-reference/runs) that this run step is a part of. (required).</param>
        /// <param name="type">The type of run step, which can be either &#x60;message_creation&#x60; or &#x60;tool_calls&#x60;. (required).</param>
        /// <param name="status">The status of the run step, which can be either &#x60;in_progress&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;. (required).</param>
        /// <param name="stepDetails">stepDetails (required).</param>
        /// <param name="lastError">lastError (required).</param>
        /// <param name="expiredAt">The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired. (required).</param>
        /// <param name="cancelledAt">The Unix timestamp (in seconds) for when the run step was cancelled. (required).</param>
        /// <param name="failedAt">The Unix timestamp (in seconds) for when the run step failed. (required).</param>
        /// <param name="completedAt">The Unix timestamp (in seconds) for when the run step completed. (required).</param>
        /// <param name="metadata">Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.  (required).</param>
        /// <param name="usage">usage (required).</param>
        public RunStepObject(string id = default(string), ObjectEnum varObject = default(ObjectEnum), int createdAt = default(int), string assistantId = default(string), string threadId = default(string), string runId = default(string), TypeEnum type = default(TypeEnum), StatusEnum status = default(StatusEnum), RunStepObjectStepDetails stepDetails = default(RunStepObjectStepDetails), RunStepObjectLastError lastError = default(RunStepObjectLastError), int? expiredAt = default(int?), int? cancelledAt = default(int?), int? failedAt = default(int?), int? completedAt = default(int?), Object metadata = default(Object), RunStepCompletionUsage usage = default(RunStepCompletionUsage))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for RunStepObject and cannot be null");
            }
            this.Id = id;
            this.VarObject = varObject;
            this.CreatedAt = createdAt;
            // to ensure "assistantId" is required (not null)
            if (assistantId == null)
            {
                throw new ArgumentNullException("assistantId is a required property for RunStepObject and cannot be null");
            }
            this.AssistantId = assistantId;
            // to ensure "threadId" is required (not null)
            if (threadId == null)
            {
                throw new ArgumentNullException("threadId is a required property for RunStepObject and cannot be null");
            }
            this.ThreadId = threadId;
            // to ensure "runId" is required (not null)
            if (runId == null)
            {
                throw new ArgumentNullException("runId is a required property for RunStepObject and cannot be null");
            }
            this.RunId = runId;
            this.Type = type;
            this.Status = status;
            // to ensure "stepDetails" is required (not null)
            if (stepDetails == null)
            {
                throw new ArgumentNullException("stepDetails is a required property for RunStepObject and cannot be null");
            }
            this.StepDetails = stepDetails;
            // to ensure "lastError" is required (not null)
            if (lastError == null)
            {
                throw new ArgumentNullException("lastError is a required property for RunStepObject and cannot be null");
            }
            this.LastError = lastError;
            // to ensure "expiredAt" is required (not null)
            if (expiredAt == null)
            {
                throw new ArgumentNullException("expiredAt is a required property for RunStepObject and cannot be null");
            }
            this.ExpiredAt = expiredAt;
            // to ensure "cancelledAt" is required (not null)
            if (cancelledAt == null)
            {
                throw new ArgumentNullException("cancelledAt is a required property for RunStepObject and cannot be null");
            }
            this.CancelledAt = cancelledAt;
            // to ensure "failedAt" is required (not null)
            if (failedAt == null)
            {
                throw new ArgumentNullException("failedAt is a required property for RunStepObject and cannot be null");
            }
            this.FailedAt = failedAt;
            // to ensure "completedAt" is required (not null)
            if (completedAt == null)
            {
                throw new ArgumentNullException("completedAt is a required property for RunStepObject and cannot be null");
            }
            this.CompletedAt = completedAt;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for RunStepObject and cannot be null");
            }
            this.Metadata = metadata;
            // to ensure "usage" is required (not null)
            if (usage == null)
            {
                throw new ArgumentNullException("usage is a required property for RunStepObject and cannot be null");
            }
            this.Usage = usage;
        }

        /// <summary>
        /// The identifier of the run step, which can be referenced in API endpoints.
        /// </summary>
        /// <value>The identifier of the run step, which can be referenced in API endpoints.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run step was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run step was created.</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
        /// </summary>
        /// <value>The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.</value>
        [DataMember(Name = "assistant_id", IsRequired = true, EmitDefaultValue = true)]
        public string AssistantId { get; set; }

        /// <summary>
        /// The ID of the [thread](/docs/api-reference/threads) that was run.
        /// </summary>
        /// <value>The ID of the [thread](/docs/api-reference/threads) that was run.</value>
        [DataMember(Name = "thread_id", IsRequired = true, EmitDefaultValue = true)]
        public string ThreadId { get; set; }

        /// <summary>
        /// The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
        /// </summary>
        /// <value>The ID of the [run](/docs/api-reference/runs) that this run step is a part of.</value>
        [DataMember(Name = "run_id", IsRequired = true, EmitDefaultValue = true)]
        public string RunId { get; set; }

        /// <summary>
        /// Gets or Sets StepDetails
        /// </summary>
        [DataMember(Name = "step_details", IsRequired = true, EmitDefaultValue = true)]
        public RunStepObjectStepDetails StepDetails { get; set; }

        /// <summary>
        /// Gets or Sets LastError
        /// </summary>
        [DataMember(Name = "last_error", IsRequired = true, EmitDefaultValue = true)]
        public RunStepObjectLastError LastError { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.</value>
        [DataMember(Name = "expired_at", IsRequired = true, EmitDefaultValue = true)]
        public int? ExpiredAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run step was cancelled.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run step was cancelled.</value>
        [DataMember(Name = "cancelled_at", IsRequired = true, EmitDefaultValue = true)]
        public int? CancelledAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run step failed.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run step failed.</value>
        [DataMember(Name = "failed_at", IsRequired = true, EmitDefaultValue = true)]
        public int? FailedAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run step completed.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run step completed.</value>
        [DataMember(Name = "completed_at", IsRequired = true, EmitDefaultValue = true)]
        public int? CompletedAt { get; set; }

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </value>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name = "usage", IsRequired = true, EmitDefaultValue = true)]
        public RunStepCompletionUsage Usage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RunStepObject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VarObject: ").Append(VarObject).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  AssistantId: ").Append(AssistantId).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("  RunId: ").Append(RunId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StepDetails: ").Append(StepDetails).Append("\n");
            sb.Append("  LastError: ").Append(LastError).Append("\n");
            sb.Append("  ExpiredAt: ").Append(ExpiredAt).Append("\n");
            sb.Append("  CancelledAt: ").Append(CancelledAt).Append("\n");
            sb.Append("  FailedAt: ").Append(FailedAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
