/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RunStreamEvent
    /// </summary>
    [JsonConverter(typeof(RunStreamEventJsonConverter))]
    [DataContract(Name = "RunStreamEvent")]
    public partial class RunStreamEvent : AbstractOpenAPISchema, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RunStreamEvent" /> class
        /// with the <see cref="RunStreamEventOneOf" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RunStreamEventOneOf.</param>
        public RunStreamEvent(RunStreamEventOneOf actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunStreamEvent" /> class
        /// with the <see cref="RunStreamEventOneOf1" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RunStreamEventOneOf1.</param>
        public RunStreamEvent(RunStreamEventOneOf1 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunStreamEvent" /> class
        /// with the <see cref="RunStreamEventOneOf2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RunStreamEventOneOf2.</param>
        public RunStreamEvent(RunStreamEventOneOf2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunStreamEvent" /> class
        /// with the <see cref="RunStreamEventOneOf3" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RunStreamEventOneOf3.</param>
        public RunStreamEvent(RunStreamEventOneOf3 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunStreamEvent" /> class
        /// with the <see cref="RunStreamEventOneOf4" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RunStreamEventOneOf4.</param>
        public RunStreamEvent(RunStreamEventOneOf4 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunStreamEvent" /> class
        /// with the <see cref="RunStreamEventOneOf5" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RunStreamEventOneOf5.</param>
        public RunStreamEvent(RunStreamEventOneOf5 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunStreamEvent" /> class
        /// with the <see cref="RunStreamEventOneOf6" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RunStreamEventOneOf6.</param>
        public RunStreamEvent(RunStreamEventOneOf6 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunStreamEvent" /> class
        /// with the <see cref="RunStreamEventOneOf7" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RunStreamEventOneOf7.</param>
        public RunStreamEvent(RunStreamEventOneOf7 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunStreamEvent" /> class
        /// with the <see cref="RunStreamEventOneOf8" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RunStreamEventOneOf8.</param>
        public RunStreamEvent(RunStreamEventOneOf8 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(RunStreamEventOneOf) || value is RunStreamEventOneOf)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(RunStreamEventOneOf1) || value is RunStreamEventOneOf1)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(RunStreamEventOneOf2) || value is RunStreamEventOneOf2)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(RunStreamEventOneOf3) || value is RunStreamEventOneOf3)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(RunStreamEventOneOf4) || value is RunStreamEventOneOf4)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(RunStreamEventOneOf5) || value is RunStreamEventOneOf5)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(RunStreamEventOneOf6) || value is RunStreamEventOneOf6)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(RunStreamEventOneOf7) || value is RunStreamEventOneOf7)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(RunStreamEventOneOf8) || value is RunStreamEventOneOf8)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: RunStreamEventOneOf, RunStreamEventOneOf1, RunStreamEventOneOf2, RunStreamEventOneOf3, RunStreamEventOneOf4, RunStreamEventOneOf5, RunStreamEventOneOf6, RunStreamEventOneOf7, RunStreamEventOneOf8");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `RunStreamEventOneOf`. If the actual instance is not `RunStreamEventOneOf`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RunStreamEventOneOf</returns>
        public RunStreamEventOneOf GetRunStreamEventOneOf()
        {
            return (RunStreamEventOneOf)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RunStreamEventOneOf1`. If the actual instance is not `RunStreamEventOneOf1`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RunStreamEventOneOf1</returns>
        public RunStreamEventOneOf1 GetRunStreamEventOneOf1()
        {
            return (RunStreamEventOneOf1)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RunStreamEventOneOf2`. If the actual instance is not `RunStreamEventOneOf2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RunStreamEventOneOf2</returns>
        public RunStreamEventOneOf2 GetRunStreamEventOneOf2()
        {
            return (RunStreamEventOneOf2)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RunStreamEventOneOf3`. If the actual instance is not `RunStreamEventOneOf3`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RunStreamEventOneOf3</returns>
        public RunStreamEventOneOf3 GetRunStreamEventOneOf3()
        {
            return (RunStreamEventOneOf3)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RunStreamEventOneOf4`. If the actual instance is not `RunStreamEventOneOf4`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RunStreamEventOneOf4</returns>
        public RunStreamEventOneOf4 GetRunStreamEventOneOf4()
        {
            return (RunStreamEventOneOf4)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RunStreamEventOneOf5`. If the actual instance is not `RunStreamEventOneOf5`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RunStreamEventOneOf5</returns>
        public RunStreamEventOneOf5 GetRunStreamEventOneOf5()
        {
            return (RunStreamEventOneOf5)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RunStreamEventOneOf6`. If the actual instance is not `RunStreamEventOneOf6`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RunStreamEventOneOf6</returns>
        public RunStreamEventOneOf6 GetRunStreamEventOneOf6()
        {
            return (RunStreamEventOneOf6)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RunStreamEventOneOf7`. If the actual instance is not `RunStreamEventOneOf7`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RunStreamEventOneOf7</returns>
        public RunStreamEventOneOf7 GetRunStreamEventOneOf7()
        {
            return (RunStreamEventOneOf7)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RunStreamEventOneOf8`. If the actual instance is not `RunStreamEventOneOf8`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RunStreamEventOneOf8</returns>
        public RunStreamEventOneOf8 GetRunStreamEventOneOf8()
        {
            return (RunStreamEventOneOf8)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RunStreamEvent {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, RunStreamEvent.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of RunStreamEvent
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of RunStreamEvent</returns>
        public static RunStreamEvent FromJson(string jsonString)
        {
            RunStreamEvent newRunStreamEvent = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newRunStreamEvent;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(RunStreamEventOneOf).GetProperty("AdditionalProperties") == null)
                {
                    newRunStreamEvent = new RunStreamEvent(JsonConvert.DeserializeObject<RunStreamEventOneOf>(jsonString, RunStreamEvent.SerializerSettings));
                }
                else
                {
                    newRunStreamEvent = new RunStreamEvent(JsonConvert.DeserializeObject<RunStreamEventOneOf>(jsonString, RunStreamEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("RunStreamEventOneOf");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RunStreamEventOneOf: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(RunStreamEventOneOf1).GetProperty("AdditionalProperties") == null)
                {
                    newRunStreamEvent = new RunStreamEvent(JsonConvert.DeserializeObject<RunStreamEventOneOf1>(jsonString, RunStreamEvent.SerializerSettings));
                }
                else
                {
                    newRunStreamEvent = new RunStreamEvent(JsonConvert.DeserializeObject<RunStreamEventOneOf1>(jsonString, RunStreamEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("RunStreamEventOneOf1");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RunStreamEventOneOf1: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(RunStreamEventOneOf2).GetProperty("AdditionalProperties") == null)
                {
                    newRunStreamEvent = new RunStreamEvent(JsonConvert.DeserializeObject<RunStreamEventOneOf2>(jsonString, RunStreamEvent.SerializerSettings));
                }
                else
                {
                    newRunStreamEvent = new RunStreamEvent(JsonConvert.DeserializeObject<RunStreamEventOneOf2>(jsonString, RunStreamEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("RunStreamEventOneOf2");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RunStreamEventOneOf2: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(RunStreamEventOneOf3).GetProperty("AdditionalProperties") == null)
                {
                    newRunStreamEvent = new RunStreamEvent(JsonConvert.DeserializeObject<RunStreamEventOneOf3>(jsonString, RunStreamEvent.SerializerSettings));
                }
                else
                {
                    newRunStreamEvent = new RunStreamEvent(JsonConvert.DeserializeObject<RunStreamEventOneOf3>(jsonString, RunStreamEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("RunStreamEventOneOf3");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RunStreamEventOneOf3: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(RunStreamEventOneOf4).GetProperty("AdditionalProperties") == null)
                {
                    newRunStreamEvent = new RunStreamEvent(JsonConvert.DeserializeObject<RunStreamEventOneOf4>(jsonString, RunStreamEvent.SerializerSettings));
                }
                else
                {
                    newRunStreamEvent = new RunStreamEvent(JsonConvert.DeserializeObject<RunStreamEventOneOf4>(jsonString, RunStreamEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("RunStreamEventOneOf4");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RunStreamEventOneOf4: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(RunStreamEventOneOf5).GetProperty("AdditionalProperties") == null)
                {
                    newRunStreamEvent = new RunStreamEvent(JsonConvert.DeserializeObject<RunStreamEventOneOf5>(jsonString, RunStreamEvent.SerializerSettings));
                }
                else
                {
                    newRunStreamEvent = new RunStreamEvent(JsonConvert.DeserializeObject<RunStreamEventOneOf5>(jsonString, RunStreamEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("RunStreamEventOneOf5");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RunStreamEventOneOf5: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(RunStreamEventOneOf6).GetProperty("AdditionalProperties") == null)
                {
                    newRunStreamEvent = new RunStreamEvent(JsonConvert.DeserializeObject<RunStreamEventOneOf6>(jsonString, RunStreamEvent.SerializerSettings));
                }
                else
                {
                    newRunStreamEvent = new RunStreamEvent(JsonConvert.DeserializeObject<RunStreamEventOneOf6>(jsonString, RunStreamEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("RunStreamEventOneOf6");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RunStreamEventOneOf6: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(RunStreamEventOneOf7).GetProperty("AdditionalProperties") == null)
                {
                    newRunStreamEvent = new RunStreamEvent(JsonConvert.DeserializeObject<RunStreamEventOneOf7>(jsonString, RunStreamEvent.SerializerSettings));
                }
                else
                {
                    newRunStreamEvent = new RunStreamEvent(JsonConvert.DeserializeObject<RunStreamEventOneOf7>(jsonString, RunStreamEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("RunStreamEventOneOf7");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RunStreamEventOneOf7: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(RunStreamEventOneOf8).GetProperty("AdditionalProperties") == null)
                {
                    newRunStreamEvent = new RunStreamEvent(JsonConvert.DeserializeObject<RunStreamEventOneOf8>(jsonString, RunStreamEvent.SerializerSettings));
                }
                else
                {
                    newRunStreamEvent = new RunStreamEvent(JsonConvert.DeserializeObject<RunStreamEventOneOf8>(jsonString, RunStreamEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("RunStreamEventOneOf8");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RunStreamEventOneOf8: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newRunStreamEvent;
        }


        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for RunStreamEvent
    /// </summary>
    public class RunStreamEventJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(RunStreamEvent).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch(reader.TokenType) 
            {
                case JsonToken.StartObject:
                    return RunStreamEvent.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return RunStreamEvent.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
