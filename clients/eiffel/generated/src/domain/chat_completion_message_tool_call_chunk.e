note
 description:"[
		OpenAI API
 		The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
  		The version of the OpenAPI document: 2.0.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CHAT_COMPLETION_MESSAGE_TOOL_CALL_CHUNK




feature --Access

    index: INTEGER_32
      
    id: detachable STRING_32
      -- The ID of the tool call.
    type: detachable STRING_32
      -- The type of the tool. Currently, only `function` is supported.
    function: detachable CHAT_COMPLETION_MESSAGE_TOOL_CALL_CHUNK_FUNCTION
      

feature -- Change Element

    set_index (a_name: like index)
        -- Set 'index' with 'a_name'.
      do
        index := a_name
      ensure
        index_set: index = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_type (a_name: like type)
        -- Set 'type' with 'a_name'.
      do
        type := a_name
      ensure
        type_set: type = a_name
      end

    set_function (a_name: like function)
        -- Set 'function' with 'a_name'.
      do
        function := a_name
      ensure
        function_set: function = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CHAT_COMPLETION_MESSAGE_TOOL_CALL_CHUNK%N")
        if attached index as l_index then
          Result.append ("%Nindex:")
          Result.append (l_index.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached type as l_type then
          Result.append ("%Ntype:")
          Result.append (l_type.out)
          Result.append ("%N")
        end
        if attached function as l_function then
          Result.append ("%Nfunction:")
          Result.append (l_function.out)
          Result.append ("%N")
        end
      end
end

