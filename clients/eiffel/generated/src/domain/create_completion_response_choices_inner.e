note
 description:"[
		OpenAI API
 		The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
  		The version of the OpenAPI document: 2.0.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CREATE_COMPLETION_RESPONSE_CHOICES_INNER




feature --Access

    finish_reason: detachable STRING_32
      -- The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, or `content_filter` if content was omitted due to a flag from our content filters. 
    index: INTEGER_32
      
    logprobs: detachable CREATE_COMPLETION_RESPONSE_CHOICES_INNER_LOGPROBS
      
    text: detachable STRING_32
      

feature -- Change Element

    set_finish_reason (a_name: like finish_reason)
        -- Set 'finish_reason' with 'a_name'.
      do
        finish_reason := a_name
      ensure
        finish_reason_set: finish_reason = a_name
      end

    set_index (a_name: like index)
        -- Set 'index' with 'a_name'.
      do
        index := a_name
      ensure
        index_set: index = a_name
      end

    set_logprobs (a_name: like logprobs)
        -- Set 'logprobs' with 'a_name'.
      do
        logprobs := a_name
      ensure
        logprobs_set: logprobs = a_name
      end

    set_text (a_name: like text)
        -- Set 'text' with 'a_name'.
      do
        text := a_name
      ensure
        text_set: text = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CREATE_COMPLETION_RESPONSE_CHOICES_INNER%N")
        if attached finish_reason as l_finish_reason then
          Result.append ("%Nfinish_reason:")
          Result.append (l_finish_reason.out)
          Result.append ("%N")
        end
        if attached index as l_index then
          Result.append ("%Nindex:")
          Result.append (l_index.out)
          Result.append ("%N")
        end
        if attached logprobs as l_logprobs then
          Result.append ("%Nlogprobs:")
          Result.append (l_logprobs.out)
          Result.append ("%N")
        end
        if attached text as l_text then
          Result.append ("%Ntext:")
          Result.append (l_text.out)
          Result.append ("%N")
        end
      end
end

