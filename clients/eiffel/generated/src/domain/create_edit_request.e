note
 description:"[
		OpenAI API
 		APIs for sampling from and fine-tuning language models
  		The version of the OpenAPI document: 2.0.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CREATE_EDIT_REQUEST




feature --Access

    model: detachable CREATE_EDIT_REQUEST_MODEL
      
    input: detachable STRING_32
      -- The input text to use as a starting point for the edit.
    instruction: detachable STRING_32
      -- The instruction that tells the model how to edit the prompt.
    n: INTEGER_32
      -- How many edits to generate for the input and instruction.
    temperature: REAL_32
      -- What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
    top_p: REAL_32
      -- An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 

feature -- Change Element

    set_model (a_name: like model)
        -- Set 'model' with 'a_name'.
      do
        model := a_name
      ensure
        model_set: model = a_name
      end

    set_input (a_name: like input)
        -- Set 'input' with 'a_name'.
      do
        input := a_name
      ensure
        input_set: input = a_name
      end

    set_instruction (a_name: like instruction)
        -- Set 'instruction' with 'a_name'.
      do
        instruction := a_name
      ensure
        instruction_set: instruction = a_name
      end

    set_n (a_name: like n)
        -- Set 'n' with 'a_name'.
      do
        n := a_name
      ensure
        n_set: n = a_name
      end

    set_temperature (a_name: like temperature)
        -- Set 'temperature' with 'a_name'.
      do
        temperature := a_name
      ensure
        temperature_set: temperature = a_name
      end

    set_top_p (a_name: like top_p)
        -- Set 'top_p' with 'a_name'.
      do
        top_p := a_name
      ensure
        top_p_set: top_p = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CREATE_EDIT_REQUEST%N")
        if attached model as l_model then
          Result.append ("%Nmodel:")
          Result.append (l_model.out)
          Result.append ("%N")
        end
        if attached input as l_input then
          Result.append ("%Ninput:")
          Result.append (l_input.out)
          Result.append ("%N")
        end
        if attached instruction as l_instruction then
          Result.append ("%Ninstruction:")
          Result.append (l_instruction.out)
          Result.append ("%N")
        end
        if attached n as l_n then
          Result.append ("%Nn:")
          Result.append (l_n.out)
          Result.append ("%N")
        end
        if attached temperature as l_temperature then
          Result.append ("%Ntemperature:")
          Result.append (l_temperature.out)
          Result.append ("%N")
        end
        if attached top_p as l_top_p then
          Result.append ("%Ntop_p:")
          Result.append (l_top_p.out)
          Result.append ("%N")
        end
      end
end

