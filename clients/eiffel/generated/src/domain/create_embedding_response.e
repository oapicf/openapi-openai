note
 description:"[
		OpenAI API
 		The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
  		The version of the OpenAPI document: 2.0.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CREATE_EMBEDDING_RESPONSE




feature --Access

    data: detachable LIST [EMBEDDING]
      -- The list of embeddings generated by the model.
    model: detachable STRING_32
      -- The name of the model used to generate the embedding.
    object: detachable STRING_32
      -- The object type, which is always \"list\".
    usage: detachable CREATE_EMBEDDING_RESPONSE_USAGE
      

feature -- Change Element

    set_data (a_name: like data)
        -- Set 'data' with 'a_name'.
      do
        data := a_name
      ensure
        data_set: data = a_name
      end

    set_model (a_name: like model)
        -- Set 'model' with 'a_name'.
      do
        model := a_name
      ensure
        model_set: model = a_name
      end

    set_object (a_name: like object)
        -- Set 'object' with 'a_name'.
      do
        object := a_name
      ensure
        object_set: object = a_name
      end

    set_usage (a_name: like usage)
        -- Set 'usage' with 'a_name'.
      do
        usage := a_name
      ensure
        usage_set: usage = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CREATE_EMBEDDING_RESPONSE%N")
        if attached data as l_data then
          across l_data as ic loop
            Result.append ("%N data:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached model as l_model then
          Result.append ("%Nmodel:")
          Result.append (l_model.out)
          Result.append ("%N")
        end
        if attached object as l_object then
          Result.append ("%Nobject:")
          Result.append (l_object.out)
          Result.append ("%N")
        end
        if attached usage as l_usage then
          Result.append ("%Nusage:")
          Result.append (l_usage.out)
          Result.append ("%N")
        end
      end
end

