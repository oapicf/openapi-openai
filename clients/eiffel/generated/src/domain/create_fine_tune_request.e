note
 description:"[
		OpenAI API
 		APIs for sampling from and fine-tuning language models
  		The version of the OpenAPI document: 2.0.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CREATE_FINE_TUNE_REQUEST




feature --Access

    training_file: detachable STRING_32
      -- The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file, where each training example is a JSON object with the keys \"prompt\" and \"completion\". Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. 
    validation_file: detachable STRING_32
      -- The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model). Your train and validation data should be mutually exclusive.  Your dataset must be formatted as a JSONL file, where each validation example is a JSON object with the keys \"prompt\" and \"completion\". Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. 
    model: detachable CREATE_FINE_TUNE_REQUEST_MODEL
      
    n_epochs: INTEGER_32
      -- The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. 
    batch_size: INTEGER_32
      -- The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass.  By default, the batch size will be dynamically configured to be ~0.2% of the number of examples in the training set, capped at 256 - in general, we've found that larger batch sizes tend to work better for larger datasets. 
    learning_rate_multiplier: REAL_32
      -- The learning rate multiplier to use for training. The fine-tuning learning rate is the original learning rate used for pretraining multiplied by this value.  By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on final `batch_size` (larger learning rates tend to perform better with larger batch sizes). We recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best results. 
    prompt_loss_weight: REAL_32
      -- The weight to use for loss on the prompt tokens. This controls how much the model tries to learn to generate the prompt (as compared to the completion which always has a weight of 1.0), and can add a stabilizing effect to training when completions are short.  If prompts are extremely long (relative to completions), it may make sense to reduce this weight so as to avoid over-prioritizing learning the prompt. 
    compute_classification_metrics: BOOLEAN
      -- If set, we calculate classification-specific metrics such as accuracy and F-1 score using the validation set at the end of every epoch. These metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).  In order to compute classification metrics, you must provide a `validation_file`. Additionally, you must specify `classification_n_classes` for multiclass classification or `classification_positive_class` for binary classification. 
    classification_n_classes: INTEGER_32
      -- The number of classes in a classification task.  This parameter is required for multiclass classification. 
    classification_positive_class: detachable STRING_32
      -- The positive class in binary classification.  This parameter is needed to generate precision, recall, and F1 metrics when doing binary classification. 
    classification_betas: detachable LIST [REAL_32]
      -- If this is provided, we calculate F-beta scores at the specified beta values. The F-beta score is a generalization of F-1 score. This is only used for binary classification.  With a beta of 1 (i.e. the F-1 score), precision and recall are given the same weight. A larger beta score puts more weight on recall and less on precision. A smaller beta score puts more weight on precision and less on recall. 
    suffix: detachable STRING_32
      -- A string of up to 40 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`. 

feature -- Change Element

    set_training_file (a_name: like training_file)
        -- Set 'training_file' with 'a_name'.
      do
        training_file := a_name
      ensure
        training_file_set: training_file = a_name
      end

    set_validation_file (a_name: like validation_file)
        -- Set 'validation_file' with 'a_name'.
      do
        validation_file := a_name
      ensure
        validation_file_set: validation_file = a_name
      end

    set_model (a_name: like model)
        -- Set 'model' with 'a_name'.
      do
        model := a_name
      ensure
        model_set: model = a_name
      end

    set_n_epochs (a_name: like n_epochs)
        -- Set 'n_epochs' with 'a_name'.
      do
        n_epochs := a_name
      ensure
        n_epochs_set: n_epochs = a_name
      end

    set_batch_size (a_name: like batch_size)
        -- Set 'batch_size' with 'a_name'.
      do
        batch_size := a_name
      ensure
        batch_size_set: batch_size = a_name
      end

    set_learning_rate_multiplier (a_name: like learning_rate_multiplier)
        -- Set 'learning_rate_multiplier' with 'a_name'.
      do
        learning_rate_multiplier := a_name
      ensure
        learning_rate_multiplier_set: learning_rate_multiplier = a_name
      end

    set_prompt_loss_weight (a_name: like prompt_loss_weight)
        -- Set 'prompt_loss_weight' with 'a_name'.
      do
        prompt_loss_weight := a_name
      ensure
        prompt_loss_weight_set: prompt_loss_weight = a_name
      end

    set_compute_classification_metrics (a_name: like compute_classification_metrics)
        -- Set 'compute_classification_metrics' with 'a_name'.
      do
        compute_classification_metrics := a_name
      ensure
        compute_classification_metrics_set: compute_classification_metrics = a_name
      end

    set_classification_n_classes (a_name: like classification_n_classes)
        -- Set 'classification_n_classes' with 'a_name'.
      do
        classification_n_classes := a_name
      ensure
        classification_n_classes_set: classification_n_classes = a_name
      end

    set_classification_positive_class (a_name: like classification_positive_class)
        -- Set 'classification_positive_class' with 'a_name'.
      do
        classification_positive_class := a_name
      ensure
        classification_positive_class_set: classification_positive_class = a_name
      end

    set_classification_betas (a_name: like classification_betas)
        -- Set 'classification_betas' with 'a_name'.
      do
        classification_betas := a_name
      ensure
        classification_betas_set: classification_betas = a_name
      end

    set_suffix (a_name: like suffix)
        -- Set 'suffix' with 'a_name'.
      do
        suffix := a_name
      ensure
        suffix_set: suffix = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CREATE_FINE_TUNE_REQUEST%N")
        if attached training_file as l_training_file then
          Result.append ("%Ntraining_file:")
          Result.append (l_training_file.out)
          Result.append ("%N")
        end
        if attached validation_file as l_validation_file then
          Result.append ("%Nvalidation_file:")
          Result.append (l_validation_file.out)
          Result.append ("%N")
        end
        if attached model as l_model then
          Result.append ("%Nmodel:")
          Result.append (l_model.out)
          Result.append ("%N")
        end
        if attached n_epochs as l_n_epochs then
          Result.append ("%Nn_epochs:")
          Result.append (l_n_epochs.out)
          Result.append ("%N")
        end
        if attached batch_size as l_batch_size then
          Result.append ("%Nbatch_size:")
          Result.append (l_batch_size.out)
          Result.append ("%N")
        end
        if attached learning_rate_multiplier as l_learning_rate_multiplier then
          Result.append ("%Nlearning_rate_multiplier:")
          Result.append (l_learning_rate_multiplier.out)
          Result.append ("%N")
        end
        if attached prompt_loss_weight as l_prompt_loss_weight then
          Result.append ("%Nprompt_loss_weight:")
          Result.append (l_prompt_loss_weight.out)
          Result.append ("%N")
        end
        if attached compute_classification_metrics as l_compute_classification_metrics then
          Result.append ("%Ncompute_classification_metrics:")
          Result.append (l_compute_classification_metrics.out)
          Result.append ("%N")
        end
        if attached classification_n_classes as l_classification_n_classes then
          Result.append ("%Nclassification_n_classes:")
          Result.append (l_classification_n_classes.out)
          Result.append ("%N")
        end
        if attached classification_positive_class as l_classification_positive_class then
          Result.append ("%Nclassification_positive_class:")
          Result.append (l_classification_positive_class.out)
          Result.append ("%N")
        end
        if attached classification_betas as l_classification_betas then
          across l_classification_betas as ic loop
            Result.append ("%N classification_betas:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached suffix as l_suffix then
          Result.append ("%Nsuffix:")
          Result.append (l_suffix.out)
          Result.append ("%N")
        end
      end
end

