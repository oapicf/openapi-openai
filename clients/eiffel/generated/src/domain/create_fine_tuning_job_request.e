note
 description:"[
		OpenAI API
 		The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
  		The version of the OpenAPI document: 2.0.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CREATE_FINE_TUNING_JOB_REQUEST




feature --Access

    model: detachable CREATE_FINE_TUNING_JOB_REQUEST_MODEL
      
    training_file: detachable STRING_32
      -- The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
    hyperparameters: detachable CREATE_FINE_TUNING_JOB_REQUEST_HYPERPARAMETERS
      
    suffix: detachable STRING_32
      -- A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`. 
    validation_file: detachable STRING_32
      -- The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
    integrations: detachable LIST [CREATE_FINE_TUNING_JOB_REQUEST_INTEGRATIONS_INNER]
      -- A list of integrations to enable for your fine-tuning job.
    seed: INTEGER_32
      -- The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases. If a seed is not specified, one will be generated for you. 

feature -- Change Element

    set_model (a_name: like model)
        -- Set 'model' with 'a_name'.
      do
        model := a_name
      ensure
        model_set: model = a_name
      end

    set_training_file (a_name: like training_file)
        -- Set 'training_file' with 'a_name'.
      do
        training_file := a_name
      ensure
        training_file_set: training_file = a_name
      end

    set_hyperparameters (a_name: like hyperparameters)
        -- Set 'hyperparameters' with 'a_name'.
      do
        hyperparameters := a_name
      ensure
        hyperparameters_set: hyperparameters = a_name
      end

    set_suffix (a_name: like suffix)
        -- Set 'suffix' with 'a_name'.
      do
        suffix := a_name
      ensure
        suffix_set: suffix = a_name
      end

    set_validation_file (a_name: like validation_file)
        -- Set 'validation_file' with 'a_name'.
      do
        validation_file := a_name
      ensure
        validation_file_set: validation_file = a_name
      end

    set_integrations (a_name: like integrations)
        -- Set 'integrations' with 'a_name'.
      do
        integrations := a_name
      ensure
        integrations_set: integrations = a_name
      end

    set_seed (a_name: like seed)
        -- Set 'seed' with 'a_name'.
      do
        seed := a_name
      ensure
        seed_set: seed = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CREATE_FINE_TUNING_JOB_REQUEST%N")
        if attached model as l_model then
          Result.append ("%Nmodel:")
          Result.append (l_model.out)
          Result.append ("%N")
        end
        if attached training_file as l_training_file then
          Result.append ("%Ntraining_file:")
          Result.append (l_training_file.out)
          Result.append ("%N")
        end
        if attached hyperparameters as l_hyperparameters then
          Result.append ("%Nhyperparameters:")
          Result.append (l_hyperparameters.out)
          Result.append ("%N")
        end
        if attached suffix as l_suffix then
          Result.append ("%Nsuffix:")
          Result.append (l_suffix.out)
          Result.append ("%N")
        end
        if attached validation_file as l_validation_file then
          Result.append ("%Nvalidation_file:")
          Result.append (l_validation_file.out)
          Result.append ("%N")
        end
        if attached integrations as l_integrations then
          across l_integrations as ic loop
            Result.append ("%N integrations:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached seed as l_seed then
          Result.append ("%Nseed:")
          Result.append (l_seed.out)
          Result.append ("%N")
        end
      end
end

