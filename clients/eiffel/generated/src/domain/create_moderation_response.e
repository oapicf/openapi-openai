note
 description:"[
		OpenAI API
 		The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
  		The version of the OpenAPI document: 2.0.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CREATE_MODERATION_RESPONSE




feature --Access

    id: detachable STRING_32
      -- The unique identifier for the moderation request.
    model: detachable STRING_32
      -- The model used to generate the moderation results.
    results: detachable LIST [CREATE_MODERATION_RESPONSE_RESULTS_INNER]
      -- A list of moderation objects.

feature -- Change Element

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_model (a_name: like model)
        -- Set 'model' with 'a_name'.
      do
        model := a_name
      ensure
        model_set: model = a_name
      end

    set_results (a_name: like results)
        -- Set 'results' with 'a_name'.
      do
        results := a_name
      ensure
        results_set: results = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CREATE_MODERATION_RESPONSE%N")
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached model as l_model then
          Result.append ("%Nmodel:")
          Result.append (l_model.out)
          Result.append ("%N")
        end
        if attached results as l_results then
          across l_results as ic loop
            Result.append ("%N results:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

