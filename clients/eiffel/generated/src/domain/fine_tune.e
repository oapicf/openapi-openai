note
 description:"[
		OpenAI API
 		APIs for sampling from and fine-tuning language models
  		The version of the OpenAPI document: 2.0.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class FINE_TUNE




feature --Access

    id: detachable STRING_32
      
    object: detachable STRING_32
      
    created_at: INTEGER_32
      
    updated_at: INTEGER_32
      
    model: detachable STRING_32
      
    fine_tuned_model: detachable STRING_32
      
    organization_id: detachable STRING_32
      
    status: detachable STRING_32
      
    hyperparams: detachable ANY
      
    training_files: detachable LIST [OPEN_AI_FILE]
      
    validation_files: detachable LIST [OPEN_AI_FILE]
      
    result_files: detachable LIST [OPEN_AI_FILE]
      
    events: detachable LIST [FINE_TUNE_EVENT]
      

feature -- Change Element

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_object (a_name: like object)
        -- Set 'object' with 'a_name'.
      do
        object := a_name
      ensure
        object_set: object = a_name
      end

    set_created_at (a_name: like created_at)
        -- Set 'created_at' with 'a_name'.
      do
        created_at := a_name
      ensure
        created_at_set: created_at = a_name
      end

    set_updated_at (a_name: like updated_at)
        -- Set 'updated_at' with 'a_name'.
      do
        updated_at := a_name
      ensure
        updated_at_set: updated_at = a_name
      end

    set_model (a_name: like model)
        -- Set 'model' with 'a_name'.
      do
        model := a_name
      ensure
        model_set: model = a_name
      end

    set_fine_tuned_model (a_name: like fine_tuned_model)
        -- Set 'fine_tuned_model' with 'a_name'.
      do
        fine_tuned_model := a_name
      ensure
        fine_tuned_model_set: fine_tuned_model = a_name
      end

    set_organization_id (a_name: like organization_id)
        -- Set 'organization_id' with 'a_name'.
      do
        organization_id := a_name
      ensure
        organization_id_set: organization_id = a_name
      end

    set_status (a_name: like status)
        -- Set 'status' with 'a_name'.
      do
        status := a_name
      ensure
        status_set: status = a_name
      end

    set_hyperparams (a_name: like hyperparams)
        -- Set 'hyperparams' with 'a_name'.
      do
        hyperparams := a_name
      ensure
        hyperparams_set: hyperparams = a_name
      end

    set_training_files (a_name: like training_files)
        -- Set 'training_files' with 'a_name'.
      do
        training_files := a_name
      ensure
        training_files_set: training_files = a_name
      end

    set_validation_files (a_name: like validation_files)
        -- Set 'validation_files' with 'a_name'.
      do
        validation_files := a_name
      ensure
        validation_files_set: validation_files = a_name
      end

    set_result_files (a_name: like result_files)
        -- Set 'result_files' with 'a_name'.
      do
        result_files := a_name
      ensure
        result_files_set: result_files = a_name
      end

    set_events (a_name: like events)
        -- Set 'events' with 'a_name'.
      do
        events := a_name
      ensure
        events_set: events = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass FINE_TUNE%N")
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached object as l_object then
          Result.append ("%Nobject:")
          Result.append (l_object.out)
          Result.append ("%N")
        end
        if attached created_at as l_created_at then
          Result.append ("%Ncreated_at:")
          Result.append (l_created_at.out)
          Result.append ("%N")
        end
        if attached updated_at as l_updated_at then
          Result.append ("%Nupdated_at:")
          Result.append (l_updated_at.out)
          Result.append ("%N")
        end
        if attached model as l_model then
          Result.append ("%Nmodel:")
          Result.append (l_model.out)
          Result.append ("%N")
        end
        if attached fine_tuned_model as l_fine_tuned_model then
          Result.append ("%Nfine_tuned_model:")
          Result.append (l_fine_tuned_model.out)
          Result.append ("%N")
        end
        if attached organization_id as l_organization_id then
          Result.append ("%Norganization_id:")
          Result.append (l_organization_id.out)
          Result.append ("%N")
        end
        if attached status as l_status then
          Result.append ("%Nstatus:")
          Result.append (l_status.out)
          Result.append ("%N")
        end
        if attached hyperparams as l_hyperparams then
          Result.append ("%Nhyperparams:")
          Result.append (l_hyperparams.out)
          Result.append ("%N")
        end
        if attached training_files as l_training_files then
          across l_training_files as ic loop
            Result.append ("%N training_files:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached validation_files as l_validation_files then
          across l_validation_files as ic loop
            Result.append ("%N validation_files:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached result_files as l_result_files then
          across l_result_files as ic loop
            Result.append ("%N result_files:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached events as l_events then
          across l_events as ic loop
            Result.append ("%N events:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

