note
 description:"[
		OpenAI API
 		The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
  		The version of the OpenAPI document: 2.0.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class MESSAGE_DELTA_OBJECT_DELTA




feature --Access

    role: detachable STRING_32
      -- The entity that produced the message. One of `user` or `assistant`.
    content: detachable LIST [MESSAGE_DELTA_OBJECT_DELTA_CONTENT_INNER]
      -- The content of the message in array of text and/or images.
    file_ids: detachable LIST [STRING_32]
      -- A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.

feature -- Change Element

    set_role (a_name: like role)
        -- Set 'role' with 'a_name'.
      do
        role := a_name
      ensure
        role_set: role = a_name
      end

    set_content (a_name: like content)
        -- Set 'content' with 'a_name'.
      do
        content := a_name
      ensure
        content_set: content = a_name
      end

    set_file_ids (a_name: like file_ids)
        -- Set 'file_ids' with 'a_name'.
      do
        file_ids := a_name
      ensure
        file_ids_set: file_ids = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass MESSAGE_DELTA_OBJECT_DELTA%N")
        if attached role as l_role then
          Result.append ("%Nrole:")
          Result.append (l_role.out)
          Result.append ("%N")
        end
        if attached content as l_content then
          across l_content as ic loop
            Result.append ("%N content:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached file_ids as l_file_ids then
          across l_file_ids as ic loop
            Result.append ("%N file_ids:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

