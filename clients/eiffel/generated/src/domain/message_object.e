note
 description:"[
		OpenAI API
 		The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
  		The version of the OpenAPI document: 2.0.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class MESSAGE_OBJECT




feature --Access

    id: detachable STRING_32
      -- The identifier, which can be referenced in API endpoints.
    object: detachable STRING_32
      -- The object type, which is always `thread.message`.
    created_at: INTEGER_32
      -- The Unix timestamp (in seconds) for when the message was created.
    thread_id: detachable STRING_32
      -- The [thread](/docs/api-reference/threads) ID that this message belongs to.
    status: detachable STRING_32
      -- The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
    incomplete_details: detachable MESSAGE_OBJECT_INCOMPLETE_DETAILS
      
    completed_at: INTEGER_32
      -- The Unix timestamp (in seconds) for when the message was completed.
    incomplete_at: INTEGER_32
      -- The Unix timestamp (in seconds) for when the message was marked as incomplete.
    role: detachable STRING_32
      -- The entity that produced the message. One of `user` or `assistant`.
    content: detachable LIST [MESSAGE_OBJECT_CONTENT_INNER]
      -- The content of the message in array of text and/or images.
    assistant_id: detachable STRING_32
      -- If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
    run_id: detachable STRING_32
      -- The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
    file_ids: detachable LIST [STRING_32]
      -- A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
    metadata: detachable ANY
      -- Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 

feature -- Change Element

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_object (a_name: like object)
        -- Set 'object' with 'a_name'.
      do
        object := a_name
      ensure
        object_set: object = a_name
      end

    set_created_at (a_name: like created_at)
        -- Set 'created_at' with 'a_name'.
      do
        created_at := a_name
      ensure
        created_at_set: created_at = a_name
      end

    set_thread_id (a_name: like thread_id)
        -- Set 'thread_id' with 'a_name'.
      do
        thread_id := a_name
      ensure
        thread_id_set: thread_id = a_name
      end

    set_status (a_name: like status)
        -- Set 'status' with 'a_name'.
      do
        status := a_name
      ensure
        status_set: status = a_name
      end

    set_incomplete_details (a_name: like incomplete_details)
        -- Set 'incomplete_details' with 'a_name'.
      do
        incomplete_details := a_name
      ensure
        incomplete_details_set: incomplete_details = a_name
      end

    set_completed_at (a_name: like completed_at)
        -- Set 'completed_at' with 'a_name'.
      do
        completed_at := a_name
      ensure
        completed_at_set: completed_at = a_name
      end

    set_incomplete_at (a_name: like incomplete_at)
        -- Set 'incomplete_at' with 'a_name'.
      do
        incomplete_at := a_name
      ensure
        incomplete_at_set: incomplete_at = a_name
      end

    set_role (a_name: like role)
        -- Set 'role' with 'a_name'.
      do
        role := a_name
      ensure
        role_set: role = a_name
      end

    set_content (a_name: like content)
        -- Set 'content' with 'a_name'.
      do
        content := a_name
      ensure
        content_set: content = a_name
      end

    set_assistant_id (a_name: like assistant_id)
        -- Set 'assistant_id' with 'a_name'.
      do
        assistant_id := a_name
      ensure
        assistant_id_set: assistant_id = a_name
      end

    set_run_id (a_name: like run_id)
        -- Set 'run_id' with 'a_name'.
      do
        run_id := a_name
      ensure
        run_id_set: run_id = a_name
      end

    set_file_ids (a_name: like file_ids)
        -- Set 'file_ids' with 'a_name'.
      do
        file_ids := a_name
      ensure
        file_ids_set: file_ids = a_name
      end

    set_metadata (a_name: like metadata)
        -- Set 'metadata' with 'a_name'.
      do
        metadata := a_name
      ensure
        metadata_set: metadata = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass MESSAGE_OBJECT%N")
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached object as l_object then
          Result.append ("%Nobject:")
          Result.append (l_object.out)
          Result.append ("%N")
        end
        if attached created_at as l_created_at then
          Result.append ("%Ncreated_at:")
          Result.append (l_created_at.out)
          Result.append ("%N")
        end
        if attached thread_id as l_thread_id then
          Result.append ("%Nthread_id:")
          Result.append (l_thread_id.out)
          Result.append ("%N")
        end
        if attached status as l_status then
          Result.append ("%Nstatus:")
          Result.append (l_status.out)
          Result.append ("%N")
        end
        if attached incomplete_details as l_incomplete_details then
          Result.append ("%Nincomplete_details:")
          Result.append (l_incomplete_details.out)
          Result.append ("%N")
        end
        if attached completed_at as l_completed_at then
          Result.append ("%Ncompleted_at:")
          Result.append (l_completed_at.out)
          Result.append ("%N")
        end
        if attached incomplete_at as l_incomplete_at then
          Result.append ("%Nincomplete_at:")
          Result.append (l_incomplete_at.out)
          Result.append ("%N")
        end
        if attached role as l_role then
          Result.append ("%Nrole:")
          Result.append (l_role.out)
          Result.append ("%N")
        end
        if attached content as l_content then
          across l_content as ic loop
            Result.append ("%N content:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached assistant_id as l_assistant_id then
          Result.append ("%Nassistant_id:")
          Result.append (l_assistant_id.out)
          Result.append ("%N")
        end
        if attached run_id as l_run_id then
          Result.append ("%Nrun_id:")
          Result.append (l_run_id.out)
          Result.append ("%N")
        end
        if attached file_ids as l_file_ids then
          across l_file_ids as ic loop
            Result.append ("%N file_ids:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached metadata as l_metadata then
          Result.append ("%Nmetadata:")
          Result.append (l_metadata.out)
          Result.append ("%N")
        end
      end
end

