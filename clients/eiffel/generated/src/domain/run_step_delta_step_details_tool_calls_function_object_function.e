note
 description:"[
		OpenAI API
 		The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
  		The version of the OpenAPI document: 2.0.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class RUN_STEP_DELTA_STEP_DETAILS_TOOL_CALLS_FUNCTION_OBJECT_FUNCTION




feature --Access

    name: detachable STRING_32
      -- The name of the function.
    arguments: detachable STRING_32
      -- The arguments passed to the function.
    output: detachable STRING_32
      -- The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.

feature -- Change Element

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name
      end

    set_arguments (a_name: like arguments)
        -- Set 'arguments' with 'a_name'.
      do
        arguments := a_name
      ensure
        arguments_set: arguments = a_name
      end

    set_output (a_name: like output)
        -- Set 'output' with 'a_name'.
      do
        output := a_name
      ensure
        output_set: output = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass RUN_STEP_DELTA_STEP_DETAILS_TOOL_CALLS_FUNCTION_OBJECT_FUNCTION%N")
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")
        end
        if attached arguments as l_arguments then
          Result.append ("%Narguments:")
          Result.append (l_arguments.out)
          Result.append ("%N")
        end
        if attached output as l_output then
          Result.append ("%Noutput:")
          Result.append (l_output.out)
          Result.append ("%N")
        end
      end
end

