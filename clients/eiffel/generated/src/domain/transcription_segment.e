note
 description:"[
		OpenAI API
 		The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
  		The version of the OpenAPI document: 2.0.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class TRANSCRIPTION_SEGMENT




feature --Access

    id: INTEGER_32
      -- Unique identifier of the segment.
    seek: INTEGER_32
      -- Seek offset of the segment.
    start: REAL_32
      -- Start time of the segment in seconds.
    var_end: REAL_32
      -- End time of the segment in seconds.
    text: detachable STRING_32
      -- Text content of the segment.
    tokens: detachable LIST [INTEGER_32]
      -- Array of token IDs for the text content.
    temperature: REAL_32
      -- Temperature parameter used for generating the segment.
    avg_logprob: REAL_32
      -- Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
    compression_ratio: REAL_32
      -- Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
    no_speech_prob: REAL_32
      -- Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.

feature -- Change Element

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_seek (a_name: like seek)
        -- Set 'seek' with 'a_name'.
      do
        seek := a_name
      ensure
        seek_set: seek = a_name
      end

    set_start (a_name: like start)
        -- Set 'start' with 'a_name'.
      do
        start := a_name
      ensure
        start_set: start = a_name
      end

    set_var_end (a_name: like var_end)
        -- Set 'var_end' with 'a_name'.
      do
        var_end := a_name
      ensure
        var_end_set: var_end = a_name
      end

    set_text (a_name: like text)
        -- Set 'text' with 'a_name'.
      do
        text := a_name
      ensure
        text_set: text = a_name
      end

    set_tokens (a_name: like tokens)
        -- Set 'tokens' with 'a_name'.
      do
        tokens := a_name
      ensure
        tokens_set: tokens = a_name
      end

    set_temperature (a_name: like temperature)
        -- Set 'temperature' with 'a_name'.
      do
        temperature := a_name
      ensure
        temperature_set: temperature = a_name
      end

    set_avg_logprob (a_name: like avg_logprob)
        -- Set 'avg_logprob' with 'a_name'.
      do
        avg_logprob := a_name
      ensure
        avg_logprob_set: avg_logprob = a_name
      end

    set_compression_ratio (a_name: like compression_ratio)
        -- Set 'compression_ratio' with 'a_name'.
      do
        compression_ratio := a_name
      ensure
        compression_ratio_set: compression_ratio = a_name
      end

    set_no_speech_prob (a_name: like no_speech_prob)
        -- Set 'no_speech_prob' with 'a_name'.
      do
        no_speech_prob := a_name
      ensure
        no_speech_prob_set: no_speech_prob = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass TRANSCRIPTION_SEGMENT%N")
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached seek as l_seek then
          Result.append ("%Nseek:")
          Result.append (l_seek.out)
          Result.append ("%N")
        end
        if attached start as l_start then
          Result.append ("%Nstart:")
          Result.append (l_start.out)
          Result.append ("%N")
        end
        if attached var_end as l_var_end then
          Result.append ("%Nvar_end:")
          Result.append (l_var_end.out)
          Result.append ("%N")
        end
        if attached text as l_text then
          Result.append ("%Ntext:")
          Result.append (l_text.out)
          Result.append ("%N")
        end
        if attached tokens as l_tokens then
          across l_tokens as ic loop
            Result.append ("%N tokens:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached temperature as l_temperature then
          Result.append ("%Ntemperature:")
          Result.append (l_temperature.out)
          Result.append ("%N")
        end
        if attached avg_logprob as l_avg_logprob then
          Result.append ("%Navg_logprob:")
          Result.append (l_avg_logprob.out)
          Result.append ("%N")
        end
        if attached compression_ratio as l_compression_ratio then
          Result.append ("%Ncompression_ratio:")
          Result.append (l_compression_ratio.out)
          Result.append ("%N")
        end
        if attached no_speech_prob as l_no_speech_prob then
          Result.append ("%Nno_speech_prob:")
          Result.append (l_no_speech_prob.out)
          Result.append ("%N")
        end
      end
end

