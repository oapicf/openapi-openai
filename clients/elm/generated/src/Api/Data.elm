{-
   OpenAI API
   APIs for sampling from and fine-tuning language models

   The version of the OpenAPI document: 2.0.0
   Contact: blah+oapicf@cliffano.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( ChatCompletionFunctions
    , ChatCompletionRequestMessage, ChatCompletionRequestMessageRole(..), chatCompletionRequestMessageRoleVariants
    , ChatCompletionRequestMessageFunctionCall
    , ChatCompletionResponseMessage, ChatCompletionResponseMessageRole(..), chatCompletionResponseMessageRoleVariants
    , ChatCompletionStreamResponseDelta, ChatCompletionStreamResponseDeltaRole(..), chatCompletionStreamResponseDeltaRoleVariants
    , CreateChatCompletionRequest
    , CreateChatCompletionRequestFunctionCall(..)
    , CreateChatCompletionRequestFunctionCallOneOf
    , CreateChatCompletionRequestModel(..)
    , CreateChatCompletionRequestStop(..)
    , CreateChatCompletionResponse
    , CreateChatCompletionResponseChoicesInner, CreateChatCompletionResponseChoicesInnerFinishReason(..), createChatCompletionResponseChoicesInnerFinishReasonVariants
    , CreateChatCompletionStreamResponse
    , CreateChatCompletionStreamResponseChoicesInner, CreateChatCompletionStreamResponseChoicesInnerFinishReason(..), createChatCompletionStreamResponseChoicesInnerFinishReasonVariants
    , CreateCompletionRequest
    , CreateCompletionRequestModel(..)
    , CreateCompletionRequestPrompt(..)
    , CreateCompletionRequestStop(..)
    , CreateCompletionResponse
    , CreateCompletionResponseChoicesInner, CreateCompletionResponseChoicesInnerFinishReason(..), createCompletionResponseChoicesInnerFinishReasonVariants
    , CreateCompletionResponseChoicesInnerLogprobs
    , CreateCompletionResponseUsage
    , CreateEditRequest
    , CreateEditRequestModel(..)
    , CreateEditResponse
    , CreateEditResponseChoicesInner, CreateEditResponseChoicesInnerFinishReason(..), createEditResponseChoicesInnerFinishReasonVariants
    , CreateEmbeddingRequest
    , CreateEmbeddingRequestInput(..)
    , CreateEmbeddingRequestModel(..)
    , CreateEmbeddingResponse
    , CreateEmbeddingResponseDataInner
    , CreateEmbeddingResponseUsage
    , CreateFineTuneRequest
    , CreateFineTuneRequestModel(..)
    , CreateImageRequest, CreateImageRequestSize(..), createImageRequestSizeVariants, CreateImageRequestResponseFormat(..), createImageRequestResponseFormatVariants
    , CreateModerationRequest
    , CreateModerationRequestInput(..)
    , CreateModerationRequestModel(..)
    , CreateModerationResponse
    , CreateModerationResponseResultsInner
    , CreateModerationResponseResultsInnerCategories
    , CreateModerationResponseResultsInnerCategoryScores
    , CreateTranscriptionRequestModel(..)
    , CreateTranscriptionResponse
    , CreateTranslationResponse
    , DeleteFileResponse
    , DeleteModelResponse
    , Error
    , ErrorResponse
    , FineTune
    , FineTuneEvent
    , ImagesResponse
    , ImagesResponseDataInner
    , ListFilesResponse
    , ListFineTuneEventsResponse
    , ListFineTunesResponse
    , ListModelsResponse
    , Model
    , OpenAIFile
    , encodeChatCompletionFunctions
    , encodeChatCompletionRequestMessage
    , encodeChatCompletionRequestMessageFunctionCall
    , encodeChatCompletionResponseMessage
    , encodeChatCompletionStreamResponseDelta
    , encodeCreateChatCompletionRequest
    , encodeCreateChatCompletionRequestFunctionCall
    , encodeCreateChatCompletionRequestFunctionCallOneOf
    , encodeCreateChatCompletionRequestModel
    , encodeCreateChatCompletionRequestStop
    , encodeCreateChatCompletionResponse
    , encodeCreateChatCompletionResponseChoicesInner
    , encodeCreateChatCompletionStreamResponse
    , encodeCreateChatCompletionStreamResponseChoicesInner
    , encodeCreateCompletionRequest
    , encodeCreateCompletionRequestModel
    , encodeCreateCompletionRequestPrompt
    , encodeCreateCompletionRequestStop
    , encodeCreateCompletionResponse
    , encodeCreateCompletionResponseChoicesInner
    , encodeCreateCompletionResponseChoicesInnerLogprobs
    , encodeCreateCompletionResponseUsage
    , encodeCreateEditRequest
    , encodeCreateEditRequestModel
    , encodeCreateEditResponse
    , encodeCreateEditResponseChoicesInner
    , encodeCreateEmbeddingRequest
    , encodeCreateEmbeddingRequestInput
    , encodeCreateEmbeddingRequestModel
    , encodeCreateEmbeddingResponse
    , encodeCreateEmbeddingResponseDataInner
    , encodeCreateEmbeddingResponseUsage
    , encodeCreateFineTuneRequest
    , encodeCreateFineTuneRequestModel
    , encodeCreateImageRequest
    , encodeCreateModerationRequest
    , encodeCreateModerationRequestInput
    , encodeCreateModerationRequestModel
    , encodeCreateModerationResponse
    , encodeCreateModerationResponseResultsInner
    , encodeCreateModerationResponseResultsInnerCategories
    , encodeCreateModerationResponseResultsInnerCategoryScores
    , encodeCreateTranscriptionRequestModel
    , encodeCreateTranscriptionResponse
    , encodeCreateTranslationResponse
    , encodeDeleteFileResponse
    , encodeDeleteModelResponse
    , encodeError
    , encodeErrorResponse
    , encodeFineTune
    , encodeFineTuneEvent
    , encodeImagesResponse
    , encodeImagesResponseDataInner
    , encodeListFilesResponse
    , encodeListFineTuneEventsResponse
    , encodeListFineTunesResponse
    , encodeListModelsResponse
    , encodeModel
    , encodeOpenAIFile
    , chatCompletionFunctionsDecoder
    , chatCompletionRequestMessageDecoder
    , chatCompletionRequestMessageFunctionCallDecoder
    , chatCompletionResponseMessageDecoder
    , chatCompletionStreamResponseDeltaDecoder
    , createChatCompletionRequestDecoder
    , createChatCompletionRequestFunctionCallDecoder
    , createChatCompletionRequestFunctionCallOneOfDecoder
    , createChatCompletionRequestModelDecoder
    , createChatCompletionRequestStopDecoder
    , createChatCompletionResponseDecoder
    , createChatCompletionResponseChoicesInnerDecoder
    , createChatCompletionStreamResponseDecoder
    , createChatCompletionStreamResponseChoicesInnerDecoder
    , createCompletionRequestDecoder
    , createCompletionRequestModelDecoder
    , createCompletionRequestPromptDecoder
    , createCompletionRequestStopDecoder
    , createCompletionResponseDecoder
    , createCompletionResponseChoicesInnerDecoder
    , createCompletionResponseChoicesInnerLogprobsDecoder
    , createCompletionResponseUsageDecoder
    , createEditRequestDecoder
    , createEditRequestModelDecoder
    , createEditResponseDecoder
    , createEditResponseChoicesInnerDecoder
    , createEmbeddingRequestDecoder
    , createEmbeddingRequestInputDecoder
    , createEmbeddingRequestModelDecoder
    , createEmbeddingResponseDecoder
    , createEmbeddingResponseDataInnerDecoder
    , createEmbeddingResponseUsageDecoder
    , createFineTuneRequestDecoder
    , createFineTuneRequestModelDecoder
    , createImageRequestDecoder
    , createModerationRequestDecoder
    , createModerationRequestInputDecoder
    , createModerationRequestModelDecoder
    , createModerationResponseDecoder
    , createModerationResponseResultsInnerDecoder
    , createModerationResponseResultsInnerCategoriesDecoder
    , createModerationResponseResultsInnerCategoryScoresDecoder
    , createTranscriptionRequestModelDecoder
    , createTranscriptionResponseDecoder
    , createTranslationResponseDecoder
    , deleteFileResponseDecoder
    , deleteModelResponseDecoder
    , errorDecoder
    , errorResponseDecoder
    , fineTuneDecoder
    , fineTuneEventDecoder
    , imagesResponseDecoder
    , imagesResponseDataInnerDecoder
    , listFilesResponseDecoder
    , listFineTuneEventsResponseDecoder
    , listFineTunesResponseDecoder
    , listModelsResponseDecoder
    , modelDecoder
    , openAIFileDecoder
    )

import Api
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type alias ChatCompletionFunctions =
    { name : String
    , description : Maybe String
    , parameters : Maybe ( Dict.Dict String Maybe AnyType )
    }


type alias ChatCompletionRequestMessage =
    { role : ChatCompletionRequestMessageRole
    , content : Maybe String
    , name : Maybe String
    , functionCall : Maybe ChatCompletionRequestMessageFunctionCall
    }


type ChatCompletionRequestMessageRole
    = ChatCompletionRequestMessageRoleSystem
    | ChatCompletionRequestMessageRoleUser
    | ChatCompletionRequestMessageRoleAssistant
    | ChatCompletionRequestMessageRoleFunction


chatCompletionRequestMessageRoleVariants : List ChatCompletionRequestMessageRole
chatCompletionRequestMessageRoleVariants =
    [ ChatCompletionRequestMessageRoleSystem
    , ChatCompletionRequestMessageRoleUser
    , ChatCompletionRequestMessageRoleAssistant
    , ChatCompletionRequestMessageRoleFunction
    ]


{-| The name and arguments of a function that should be called, as generated by the model.
-}
type alias ChatCompletionRequestMessageFunctionCall =
    { name : Maybe String
    , arguments : Maybe String
    }


type alias ChatCompletionResponseMessage =
    { role : ChatCompletionResponseMessageRole
    , content : Maybe String
    , functionCall : Maybe ChatCompletionRequestMessageFunctionCall
    }


type ChatCompletionResponseMessageRole
    = ChatCompletionResponseMessageRoleSystem
    | ChatCompletionResponseMessageRoleUser
    | ChatCompletionResponseMessageRoleAssistant
    | ChatCompletionResponseMessageRoleFunction


chatCompletionResponseMessageRoleVariants : List ChatCompletionResponseMessageRole
chatCompletionResponseMessageRoleVariants =
    [ ChatCompletionResponseMessageRoleSystem
    , ChatCompletionResponseMessageRoleUser
    , ChatCompletionResponseMessageRoleAssistant
    , ChatCompletionResponseMessageRoleFunction
    ]


type alias ChatCompletionStreamResponseDelta =
    { role : Maybe ChatCompletionStreamResponseDeltaRole
    , content : Maybe String
    , functionCall : Maybe ChatCompletionRequestMessageFunctionCall
    }


type ChatCompletionStreamResponseDeltaRole
    = ChatCompletionStreamResponseDeltaRoleSystem
    | ChatCompletionStreamResponseDeltaRoleUser
    | ChatCompletionStreamResponseDeltaRoleAssistant
    | ChatCompletionStreamResponseDeltaRoleFunction


chatCompletionStreamResponseDeltaRoleVariants : List ChatCompletionStreamResponseDeltaRole
chatCompletionStreamResponseDeltaRoleVariants =
    [ ChatCompletionStreamResponseDeltaRoleSystem
    , ChatCompletionStreamResponseDeltaRoleUser
    , ChatCompletionStreamResponseDeltaRoleAssistant
    , ChatCompletionStreamResponseDeltaRoleFunction
    ]


type alias CreateChatCompletionRequest =
    { model : CreateChatCompletionRequestModel
    , messages : List ChatCompletionRequestMessage
    , functions : Maybe ( List ChatCompletionFunctions )
    , functionCall : Maybe CreateChatCompletionRequestFunctionCall
    , temperature : Maybe Float
    , topP : Maybe Float
    , n : Maybe Int
    , stream : Maybe Bool
    , stop : Maybe CreateChatCompletionRequestStop
    , maxTokens : Maybe Int
    , presencePenalty : Maybe Float
    , frequencyPenalty : Maybe Float
    , logitBias : Maybe Object
    , user : Maybe String
    }


{-| Controls how the model responds to function calls. \"none\" means the model does not call a function, and responds to the end-user. \"auto\" means the model can pick between an end-user or calling a function.  Specifying a particular function via `{\"name\":\\ \"my_function\"}` forces the model to call that function. \"none\" is the default when no functions are present. \"auto\" is the default if functions are present.
-}
type CreateChatCompletionRequestFunctionCall
    = CreateChatCompletionRequestFunctionCallCreateChatCompletionRequestFunctionCallOneOf CreateChatCompletionRequestFunctionCallOneOf
    | CreateChatCompletionRequestFunctionCallString String



type alias CreateChatCompletionRequestFunctionCallOneOf =
    { name : String
    }


{-| ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
-}
type CreateChatCompletionRequestModel
    = CreateChatCompletionRequestModelString String



{-| Up to 4 sequences where the API will stop generating further tokens. 
-}
type CreateChatCompletionRequestStop
    = CreateChatCompletionRequestStopString String



type alias CreateChatCompletionResponse =
    { id : String
    , object : String
    , created : Int
    , model : String
    , choices : List CreateChatCompletionResponseChoicesInner
    , usage : Maybe CreateCompletionResponseUsage
    }


type alias CreateChatCompletionResponseChoicesInner =
    { index : Maybe Int
    , message : Maybe ChatCompletionResponseMessage
    , finishReason : Maybe CreateChatCompletionResponseChoicesInnerFinishReason
    }


type CreateChatCompletionResponseChoicesInnerFinishReason
    = CreateChatCompletionResponseChoicesInnerFinishReasonStop
    | CreateChatCompletionResponseChoicesInnerFinishReasonLength
    | CreateChatCompletionResponseChoicesInnerFinishReasonFunctionCall


createChatCompletionResponseChoicesInnerFinishReasonVariants : List CreateChatCompletionResponseChoicesInnerFinishReason
createChatCompletionResponseChoicesInnerFinishReasonVariants =
    [ CreateChatCompletionResponseChoicesInnerFinishReasonStop
    , CreateChatCompletionResponseChoicesInnerFinishReasonLength
    , CreateChatCompletionResponseChoicesInnerFinishReasonFunctionCall
    ]


type alias CreateChatCompletionStreamResponse =
    { id : String
    , object : String
    , created : Int
    , model : String
    , choices : List CreateChatCompletionStreamResponseChoicesInner
    }


type alias CreateChatCompletionStreamResponseChoicesInner =
    { index : Maybe Int
    , delta : Maybe ChatCompletionStreamResponseDelta
    , finishReason : Maybe CreateChatCompletionStreamResponseChoicesInnerFinishReason
    }


type CreateChatCompletionStreamResponseChoicesInnerFinishReason
    = CreateChatCompletionStreamResponseChoicesInnerFinishReasonStop
    | CreateChatCompletionStreamResponseChoicesInnerFinishReasonLength
    | CreateChatCompletionStreamResponseChoicesInnerFinishReasonFunctionCall


createChatCompletionStreamResponseChoicesInnerFinishReasonVariants : List CreateChatCompletionStreamResponseChoicesInnerFinishReason
createChatCompletionStreamResponseChoicesInnerFinishReasonVariants =
    [ CreateChatCompletionStreamResponseChoicesInnerFinishReasonStop
    , CreateChatCompletionStreamResponseChoicesInnerFinishReasonLength
    , CreateChatCompletionStreamResponseChoicesInnerFinishReasonFunctionCall
    ]


type alias CreateCompletionRequest =
    { model : CreateCompletionRequestModel
    , prompt : Maybe CreateCompletionRequestPrompt
    , suffix : Maybe String
    , maxTokens : Maybe Int
    , temperature : Maybe Float
    , topP : Maybe Float
    , n : Maybe Int
    , stream : Maybe Bool
    , logprobs : Maybe Int
    , echo : Maybe Bool
    , stop : Maybe CreateCompletionRequestStop
    , presencePenalty : Maybe Float
    , frequencyPenalty : Maybe Float
    , bestOf : Maybe Int
    , logitBias : Maybe Object
    , user : Maybe String
    }


{-| ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
-}
type CreateCompletionRequestModel
    = CreateCompletionRequestModelString String



{-| The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.  Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document. 
-}
type CreateCompletionRequestPrompt
    = CreateCompletionRequestPromptInt Int
    | CreateCompletionRequestPromptString String



{-| Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence. 
-}
type CreateCompletionRequestStop
    = CreateCompletionRequestStopString String



type alias CreateCompletionResponse =
    { id : String
    , object : String
    , created : Int
    , model : String
    , choices : List CreateCompletionResponseChoicesInner
    , usage : Maybe CreateCompletionResponseUsage
    }


type alias CreateCompletionResponseChoicesInner =
    { text : String
    , index : Int
    , logprobs : Maybe CreateCompletionResponseChoicesInnerLogprobs
    , finishReason : CreateCompletionResponseChoicesInnerFinishReason
    }


type CreateCompletionResponseChoicesInnerFinishReason
    = CreateCompletionResponseChoicesInnerFinishReasonStop
    | CreateCompletionResponseChoicesInnerFinishReasonLength


createCompletionResponseChoicesInnerFinishReasonVariants : List CreateCompletionResponseChoicesInnerFinishReason
createCompletionResponseChoicesInnerFinishReasonVariants =
    [ CreateCompletionResponseChoicesInnerFinishReasonStop
    , CreateCompletionResponseChoicesInnerFinishReasonLength
    ]


type alias CreateCompletionResponseChoicesInnerLogprobs =
    { tokens : Maybe ( List String )
    , tokenLogprobs : Maybe ( List Float )
    , topLogprobs : Maybe ( List Object )
    , textOffset : Maybe ( List Int )
    }


type alias CreateCompletionResponseUsage =
    { promptTokens : Int
    , completionTokens : Int
    , totalTokens : Int
    }


type alias CreateEditRequest =
    { model : CreateEditRequestModel
    , input : Maybe String
    , instruction : String
    , n : Maybe Int
    , temperature : Maybe Float
    , topP : Maybe Float
    }


{-| ID of the model to use. You can use the `text-davinci-edit-001` or `code-davinci-edit-001` model with this endpoint.
-}
type CreateEditRequestModel
    = CreateEditRequestModelString String



type alias CreateEditResponse =
    { object : String
    , created : Int
    , choices : List CreateEditResponseChoicesInner
    , usage : CreateCompletionResponseUsage
    }


type alias CreateEditResponseChoicesInner =
    { text : Maybe String
    , index : Maybe Int
    , logprobs : Maybe CreateCompletionResponseChoicesInnerLogprobs
    , finishReason : Maybe CreateEditResponseChoicesInnerFinishReason
    }


type CreateEditResponseChoicesInnerFinishReason
    = CreateEditResponseChoicesInnerFinishReasonStop
    | CreateEditResponseChoicesInnerFinishReasonLength


createEditResponseChoicesInnerFinishReasonVariants : List CreateEditResponseChoicesInnerFinishReason
createEditResponseChoicesInnerFinishReasonVariants =
    [ CreateEditResponseChoicesInnerFinishReasonStop
    , CreateEditResponseChoicesInnerFinishReasonLength
    ]


type alias CreateEmbeddingRequest =
    { model : CreateEmbeddingRequestModel
    , input : CreateEmbeddingRequestInput
    , user : Maybe String
    }


{-| Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. Each input must not exceed the max input tokens for the model (8191 tokens for `text-embedding-ada-002`). [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens. 
-}
type CreateEmbeddingRequestInput
    = CreateEmbeddingRequestInputInt Int
    | CreateEmbeddingRequestInputString String



{-| ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
-}
type CreateEmbeddingRequestModel
    = CreateEmbeddingRequestModelString String



type alias CreateEmbeddingResponse =
    { object : String
    , model : String
    , data : List CreateEmbeddingResponseDataInner
    , usage : CreateEmbeddingResponseUsage
    }


type alias CreateEmbeddingResponseDataInner =
    { index : Int
    , object : String
    , embedding : List Float
    }


type alias CreateEmbeddingResponseUsage =
    { promptTokens : Int
    , totalTokens : Int
    }


type alias CreateFineTuneRequest =
    { trainingFile : String
    , validationFile : Maybe String
    , model : Maybe CreateFineTuneRequestModel
    , nEpochs : Maybe Int
    , batchSize : Maybe Int
    , learningRateMultiplier : Maybe Float
    , promptLossWeight : Maybe Float
    , computeClassificationMetrics : Maybe Bool
    , classificationNClasses : Maybe Int
    , classificationPositiveClass : Maybe String
    , classificationBetas : Maybe ( List Float )
    , suffix : Maybe String
    }


{-| The name of the base model to fine-tune. You can select one of \"ada\", \"babbage\", \"curie\", \"davinci\", or a fine-tuned model created after 2022-04-21. To learn more about these models, see the [Models](https://platform.openai.com/docs/models) documentation. 
-}
type CreateFineTuneRequestModel
    = CreateFineTuneRequestModelString String



type alias CreateImageRequest =
    { prompt : String
    , n : Maybe Int
    , size : Maybe CreateImageRequestSize
    , responseFormat : Maybe CreateImageRequestResponseFormat
    , user : Maybe String
    }


type CreateImageRequestSize
    = CreateImageRequestSize256x256
    | CreateImageRequestSize512x512
    | CreateImageRequestSize1024x1024


createImageRequestSizeVariants : List CreateImageRequestSize
createImageRequestSizeVariants =
    [ CreateImageRequestSize256x256
    , CreateImageRequestSize512x512
    , CreateImageRequestSize1024x1024
    ]


type CreateImageRequestResponseFormat
    = CreateImageRequestResponseFormatUrl
    | CreateImageRequestResponseFormatB64Json


createImageRequestResponseFormatVariants : List CreateImageRequestResponseFormat
createImageRequestResponseFormatVariants =
    [ CreateImageRequestResponseFormatUrl
    , CreateImageRequestResponseFormatB64Json
    ]


type alias CreateModerationRequest =
    { input : CreateModerationRequestInput
    , model : Maybe CreateModerationRequestModel
    }


{-| The input text to classify
-}
type CreateModerationRequestInput
    = CreateModerationRequestInputString String



{-| Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.  The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`. 
-}
type CreateModerationRequestModel
    = CreateModerationRequestModelString String



type alias CreateModerationResponse =
    { id : String
    , model : String
    , results : List CreateModerationResponseResultsInner
    }


type alias CreateModerationResponseResultsInner =
    { flagged : Bool
    , categories : CreateModerationResponseResultsInnerCategories
    , categoryScores : CreateModerationResponseResultsInnerCategoryScores
    }


type alias CreateModerationResponseResultsInnerCategories =
    { hate : Bool
    , hatethreatening : Bool
    , selfharm : Bool
    , sexual : Bool
    , sexualminors : Bool
    , violence : Bool
    , violencegraphic : Bool
    }


type alias CreateModerationResponseResultsInnerCategoryScores =
    { hate : Float
    , hatethreatening : Float
    , selfharm : Float
    , sexual : Float
    , sexualminors : Float
    , violence : Float
    , violencegraphic : Float
    }


{-| ID of the model to use. Only `whisper-1` is currently available. 
-}
type CreateTranscriptionRequestModel
    = CreateTranscriptionRequestModelString String



type alias CreateTranscriptionResponse =
    { text : String
    }


type alias CreateTranslationResponse =
    { text : String
    }


type alias DeleteFileResponse =
    { id : String
    , object : String
    , deleted : Bool
    }


type alias DeleteModelResponse =
    { id : String
    , object : String
    , deleted : Bool
    }


type alias Error =
    { type_ : String
    , message : String
    , param : Maybe String
    , code : Maybe String
    }


type alias ErrorResponse =
    { error : Error
    }


type alias FineTune =
    { id : String
    , object : String
    , createdAt : Int
    , updatedAt : Int
    , model : String
    , fineTunedModel : Maybe String
    , organizationId : String
    , status : String
    , hyperparams : Object
    , trainingFiles : List OpenAIFile
    , validationFiles : List OpenAIFile
    , resultFiles : List OpenAIFile
    , events : Maybe ( List FineTuneEvent )
    }


type alias FineTuneEvent =
    { object : String
    , createdAt : Int
    , level : String
    , message : String
    }


type alias ImagesResponse =
    { created : Int
    , data : List ImagesResponseDataInner
    }


type alias ImagesResponseDataInner =
    { url : Maybe String
    , b64Json : Maybe String
    }


type alias ListFilesResponse =
    { object : String
    , data : List OpenAIFile
    }


type alias ListFineTuneEventsResponse =
    { object : String
    , data : List FineTuneEvent
    }


type alias ListFineTunesResponse =
    { object : String
    , data : List FineTune
    }


type alias ListModelsResponse =
    { object : String
    , data : List Model
    }


type alias Model =
    { id : String
    , object : String
    , created : Int
    , ownedBy : String
    }


type alias OpenAIFile =
    { id : String
    , object : String
    , bytes : Int
    , createdAt : Int
    , filename : String
    , purpose : String
    , status : Maybe String
    , statusDetails : Maybe Object
    }


-- ENCODER


encodeChatCompletionFunctions : ChatCompletionFunctions -> Json.Encode.Value
encodeChatCompletionFunctions =
    encodeObject << encodeChatCompletionFunctionsPairs


encodeChatCompletionFunctionsWithTag : ( String, String ) -> ChatCompletionFunctions -> Json.Encode.Value
encodeChatCompletionFunctionsWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionFunctionsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionFunctionsPairs : ChatCompletionFunctions -> List EncodedField
encodeChatCompletionFunctionsPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "parameters" (Json.Encode.dict identity encodeAnyType) model.parameters
            ]
    in
    pairs


encodeChatCompletionRequestMessage : ChatCompletionRequestMessage -> Json.Encode.Value
encodeChatCompletionRequestMessage =
    encodeObject << encodeChatCompletionRequestMessagePairs


encodeChatCompletionRequestMessageWithTag : ( String, String ) -> ChatCompletionRequestMessage -> Json.Encode.Value
encodeChatCompletionRequestMessageWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionRequestMessagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionRequestMessagePairs : ChatCompletionRequestMessage -> List EncodedField
encodeChatCompletionRequestMessagePairs model =
    let
        pairs =
            [ encode "role" encodeChatCompletionRequestMessageRole model.role
            , maybeEncode "content" Json.Encode.string model.content
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "function_call" encodeChatCompletionRequestMessageFunctionCall model.functionCall
            ]
    in
    pairs

stringFromChatCompletionRequestMessageRole : ChatCompletionRequestMessageRole -> String
stringFromChatCompletionRequestMessageRole model =
    case model of
        ChatCompletionRequestMessageRoleSystem ->
            "system"

        ChatCompletionRequestMessageRoleUser ->
            "user"

        ChatCompletionRequestMessageRoleAssistant ->
            "assistant"

        ChatCompletionRequestMessageRoleFunction ->
            "function"


encodeChatCompletionRequestMessageRole : ChatCompletionRequestMessageRole -> Json.Encode.Value
encodeChatCompletionRequestMessageRole =
    Json.Encode.string << stringFromChatCompletionRequestMessageRole



encodeChatCompletionRequestMessageFunctionCall : ChatCompletionRequestMessageFunctionCall -> Json.Encode.Value
encodeChatCompletionRequestMessageFunctionCall =
    encodeObject << encodeChatCompletionRequestMessageFunctionCallPairs


encodeChatCompletionRequestMessageFunctionCallWithTag : ( String, String ) -> ChatCompletionRequestMessageFunctionCall -> Json.Encode.Value
encodeChatCompletionRequestMessageFunctionCallWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionRequestMessageFunctionCallPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionRequestMessageFunctionCallPairs : ChatCompletionRequestMessageFunctionCall -> List EncodedField
encodeChatCompletionRequestMessageFunctionCallPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "arguments" Json.Encode.string model.arguments
            ]
    in
    pairs


encodeChatCompletionResponseMessage : ChatCompletionResponseMessage -> Json.Encode.Value
encodeChatCompletionResponseMessage =
    encodeObject << encodeChatCompletionResponseMessagePairs


encodeChatCompletionResponseMessageWithTag : ( String, String ) -> ChatCompletionResponseMessage -> Json.Encode.Value
encodeChatCompletionResponseMessageWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionResponseMessagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionResponseMessagePairs : ChatCompletionResponseMessage -> List EncodedField
encodeChatCompletionResponseMessagePairs model =
    let
        pairs =
            [ encode "role" encodeChatCompletionResponseMessageRole model.role
            , maybeEncodeNullable "content" Json.Encode.string model.content
            , maybeEncode "function_call" encodeChatCompletionRequestMessageFunctionCall model.functionCall
            ]
    in
    pairs

stringFromChatCompletionResponseMessageRole : ChatCompletionResponseMessageRole -> String
stringFromChatCompletionResponseMessageRole model =
    case model of
        ChatCompletionResponseMessageRoleSystem ->
            "system"

        ChatCompletionResponseMessageRoleUser ->
            "user"

        ChatCompletionResponseMessageRoleAssistant ->
            "assistant"

        ChatCompletionResponseMessageRoleFunction ->
            "function"


encodeChatCompletionResponseMessageRole : ChatCompletionResponseMessageRole -> Json.Encode.Value
encodeChatCompletionResponseMessageRole =
    Json.Encode.string << stringFromChatCompletionResponseMessageRole



encodeChatCompletionStreamResponseDelta : ChatCompletionStreamResponseDelta -> Json.Encode.Value
encodeChatCompletionStreamResponseDelta =
    encodeObject << encodeChatCompletionStreamResponseDeltaPairs


encodeChatCompletionStreamResponseDeltaWithTag : ( String, String ) -> ChatCompletionStreamResponseDelta -> Json.Encode.Value
encodeChatCompletionStreamResponseDeltaWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionStreamResponseDeltaPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionStreamResponseDeltaPairs : ChatCompletionStreamResponseDelta -> List EncodedField
encodeChatCompletionStreamResponseDeltaPairs model =
    let
        pairs =
            [ maybeEncode "role" encodeChatCompletionStreamResponseDeltaRole model.role
            , maybeEncodeNullable "content" Json.Encode.string model.content
            , maybeEncode "function_call" encodeChatCompletionRequestMessageFunctionCall model.functionCall
            ]
    in
    pairs

stringFromChatCompletionStreamResponseDeltaRole : ChatCompletionStreamResponseDeltaRole -> String
stringFromChatCompletionStreamResponseDeltaRole model =
    case model of
        ChatCompletionStreamResponseDeltaRoleSystem ->
            "system"

        ChatCompletionStreamResponseDeltaRoleUser ->
            "user"

        ChatCompletionStreamResponseDeltaRoleAssistant ->
            "assistant"

        ChatCompletionStreamResponseDeltaRoleFunction ->
            "function"


encodeChatCompletionStreamResponseDeltaRole : ChatCompletionStreamResponseDeltaRole -> Json.Encode.Value
encodeChatCompletionStreamResponseDeltaRole =
    Json.Encode.string << stringFromChatCompletionStreamResponseDeltaRole



encodeCreateChatCompletionRequest : CreateChatCompletionRequest -> Json.Encode.Value
encodeCreateChatCompletionRequest =
    encodeObject << encodeCreateChatCompletionRequestPairs


encodeCreateChatCompletionRequestWithTag : ( String, String ) -> CreateChatCompletionRequest -> Json.Encode.Value
encodeCreateChatCompletionRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatCompletionRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatCompletionRequestPairs : CreateChatCompletionRequest -> List EncodedField
encodeCreateChatCompletionRequestPairs model =
    let
        pairs =
            [ encode "model" encodeCreateChatCompletionRequestModel model.model
            , encode "messages" (Json.Encode.list encodeChatCompletionRequestMessage) model.messages
            , maybeEncode "functions" (Json.Encode.list encodeChatCompletionFunctions) model.functions
            , maybeEncode "function_call" encodeCreateChatCompletionRequestFunctionCall model.functionCall
            , maybeEncodeNullable "temperature" Json.Encode.float model.temperature
            , maybeEncodeNullable "top_p" Json.Encode.float model.topP
            , maybeEncodeNullable "n" Json.Encode.int model.n
            , maybeEncodeNullable "stream" Json.Encode.bool model.stream
            , maybeEncode "stop" encodeCreateChatCompletionRequestStop model.stop
            , maybeEncode "max_tokens" Json.Encode.int model.maxTokens
            , maybeEncodeNullable "presence_penalty" Json.Encode.float model.presencePenalty
            , maybeEncodeNullable "frequency_penalty" Json.Encode.float model.frequencyPenalty
            , maybeEncodeNullable "logit_bias" encodeObject model.logitBias
            , maybeEncode "user" Json.Encode.string model.user
            ]
    in
    pairs


encodeCreateChatCompletionRequestFunctionCall : CreateChatCompletionRequestFunctionCall -> Json.Encode.Value
encodeCreateChatCompletionRequestFunctionCall model =
    case model of
        CreateChatCompletionRequestFunctionCallCreateChatCompletionRequestFunctionCallOneOf subModel ->
            encodeCreateChatCompletionRequestFunctionCallOneOf subModel


        CreateChatCompletionRequestFunctionCallString subModel ->
            encodeString subModel




encodeCreateChatCompletionRequestFunctionCallOneOf : CreateChatCompletionRequestFunctionCallOneOf -> Json.Encode.Value
encodeCreateChatCompletionRequestFunctionCallOneOf =
    encodeObject << encodeCreateChatCompletionRequestFunctionCallOneOfPairs


encodeCreateChatCompletionRequestFunctionCallOneOfWithTag : ( String, String ) -> CreateChatCompletionRequestFunctionCallOneOf -> Json.Encode.Value
encodeCreateChatCompletionRequestFunctionCallOneOfWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatCompletionRequestFunctionCallOneOfPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatCompletionRequestFunctionCallOneOfPairs : CreateChatCompletionRequestFunctionCallOneOf -> List EncodedField
encodeCreateChatCompletionRequestFunctionCallOneOfPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeCreateChatCompletionRequestModel : CreateChatCompletionRequestModel -> Json.Encode.Value
encodeCreateChatCompletionRequestModel model =
    case model of
        CreateChatCompletionRequestModelString subModel ->
            encodeString subModel




encodeCreateChatCompletionRequestStop : CreateChatCompletionRequestStop -> Json.Encode.Value
encodeCreateChatCompletionRequestStop model =
    case model of
        CreateChatCompletionRequestStopString subModel ->
            encodeString subModel




encodeCreateChatCompletionResponse : CreateChatCompletionResponse -> Json.Encode.Value
encodeCreateChatCompletionResponse =
    encodeObject << encodeCreateChatCompletionResponsePairs


encodeCreateChatCompletionResponseWithTag : ( String, String ) -> CreateChatCompletionResponse -> Json.Encode.Value
encodeCreateChatCompletionResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatCompletionResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatCompletionResponsePairs : CreateChatCompletionResponse -> List EncodedField
encodeCreateChatCompletionResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "object" Json.Encode.string model.object
            , encode "created" Json.Encode.int model.created
            , encode "model" Json.Encode.string model.model
            , encode "choices" (Json.Encode.list encodeCreateChatCompletionResponseChoicesInner) model.choices
            , maybeEncode "usage" encodeCreateCompletionResponseUsage model.usage
            ]
    in
    pairs


encodeCreateChatCompletionResponseChoicesInner : CreateChatCompletionResponseChoicesInner -> Json.Encode.Value
encodeCreateChatCompletionResponseChoicesInner =
    encodeObject << encodeCreateChatCompletionResponseChoicesInnerPairs


encodeCreateChatCompletionResponseChoicesInnerWithTag : ( String, String ) -> CreateChatCompletionResponseChoicesInner -> Json.Encode.Value
encodeCreateChatCompletionResponseChoicesInnerWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatCompletionResponseChoicesInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatCompletionResponseChoicesInnerPairs : CreateChatCompletionResponseChoicesInner -> List EncodedField
encodeCreateChatCompletionResponseChoicesInnerPairs model =
    let
        pairs =
            [ maybeEncode "index" Json.Encode.int model.index
            , maybeEncode "message" encodeChatCompletionResponseMessage model.message
            , maybeEncode "finish_reason" encodeCreateChatCompletionResponseChoicesInnerFinishReason model.finishReason
            ]
    in
    pairs

stringFromCreateChatCompletionResponseChoicesInnerFinishReason : CreateChatCompletionResponseChoicesInnerFinishReason -> String
stringFromCreateChatCompletionResponseChoicesInnerFinishReason model =
    case model of
        CreateChatCompletionResponseChoicesInnerFinishReasonStop ->
            "stop"

        CreateChatCompletionResponseChoicesInnerFinishReasonLength ->
            "length"

        CreateChatCompletionResponseChoicesInnerFinishReasonFunctionCall ->
            "function_call"


encodeCreateChatCompletionResponseChoicesInnerFinishReason : CreateChatCompletionResponseChoicesInnerFinishReason -> Json.Encode.Value
encodeCreateChatCompletionResponseChoicesInnerFinishReason =
    Json.Encode.string << stringFromCreateChatCompletionResponseChoicesInnerFinishReason



encodeCreateChatCompletionStreamResponse : CreateChatCompletionStreamResponse -> Json.Encode.Value
encodeCreateChatCompletionStreamResponse =
    encodeObject << encodeCreateChatCompletionStreamResponsePairs


encodeCreateChatCompletionStreamResponseWithTag : ( String, String ) -> CreateChatCompletionStreamResponse -> Json.Encode.Value
encodeCreateChatCompletionStreamResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatCompletionStreamResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatCompletionStreamResponsePairs : CreateChatCompletionStreamResponse -> List EncodedField
encodeCreateChatCompletionStreamResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "object" Json.Encode.string model.object
            , encode "created" Json.Encode.int model.created
            , encode "model" Json.Encode.string model.model
            , encode "choices" (Json.Encode.list encodeCreateChatCompletionStreamResponseChoicesInner) model.choices
            ]
    in
    pairs


encodeCreateChatCompletionStreamResponseChoicesInner : CreateChatCompletionStreamResponseChoicesInner -> Json.Encode.Value
encodeCreateChatCompletionStreamResponseChoicesInner =
    encodeObject << encodeCreateChatCompletionStreamResponseChoicesInnerPairs


encodeCreateChatCompletionStreamResponseChoicesInnerWithTag : ( String, String ) -> CreateChatCompletionStreamResponseChoicesInner -> Json.Encode.Value
encodeCreateChatCompletionStreamResponseChoicesInnerWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatCompletionStreamResponseChoicesInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatCompletionStreamResponseChoicesInnerPairs : CreateChatCompletionStreamResponseChoicesInner -> List EncodedField
encodeCreateChatCompletionStreamResponseChoicesInnerPairs model =
    let
        pairs =
            [ maybeEncode "index" Json.Encode.int model.index
            , maybeEncode "delta" encodeChatCompletionStreamResponseDelta model.delta
            , maybeEncode "finish_reason" encodeCreateChatCompletionStreamResponseChoicesInnerFinishReason model.finishReason
            ]
    in
    pairs

stringFromCreateChatCompletionStreamResponseChoicesInnerFinishReason : CreateChatCompletionStreamResponseChoicesInnerFinishReason -> String
stringFromCreateChatCompletionStreamResponseChoicesInnerFinishReason model =
    case model of
        CreateChatCompletionStreamResponseChoicesInnerFinishReasonStop ->
            "stop"

        CreateChatCompletionStreamResponseChoicesInnerFinishReasonLength ->
            "length"

        CreateChatCompletionStreamResponseChoicesInnerFinishReasonFunctionCall ->
            "function_call"


encodeCreateChatCompletionStreamResponseChoicesInnerFinishReason : CreateChatCompletionStreamResponseChoicesInnerFinishReason -> Json.Encode.Value
encodeCreateChatCompletionStreamResponseChoicesInnerFinishReason =
    Json.Encode.string << stringFromCreateChatCompletionStreamResponseChoicesInnerFinishReason



encodeCreateCompletionRequest : CreateCompletionRequest -> Json.Encode.Value
encodeCreateCompletionRequest =
    encodeObject << encodeCreateCompletionRequestPairs


encodeCreateCompletionRequestWithTag : ( String, String ) -> CreateCompletionRequest -> Json.Encode.Value
encodeCreateCompletionRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateCompletionRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateCompletionRequestPairs : CreateCompletionRequest -> List EncodedField
encodeCreateCompletionRequestPairs model =
    let
        pairs =
            [ encode "model" encodeCreateCompletionRequestModel model.model
            , encodeNullable "prompt" encodeCreateCompletionRequestPrompt model.prompt
            , maybeEncodeNullable "suffix" Json.Encode.string model.suffix
            , maybeEncodeNullable "max_tokens" Json.Encode.int model.maxTokens
            , maybeEncodeNullable "temperature" Json.Encode.float model.temperature
            , maybeEncodeNullable "top_p" Json.Encode.float model.topP
            , maybeEncodeNullable "n" Json.Encode.int model.n
            , maybeEncodeNullable "stream" Json.Encode.bool model.stream
            , maybeEncodeNullable "logprobs" Json.Encode.int model.logprobs
            , maybeEncodeNullable "echo" Json.Encode.bool model.echo
            , maybeEncodeNullable "stop" encodeCreateCompletionRequestStop model.stop
            , maybeEncodeNullable "presence_penalty" Json.Encode.float model.presencePenalty
            , maybeEncodeNullable "frequency_penalty" Json.Encode.float model.frequencyPenalty
            , maybeEncodeNullable "best_of" Json.Encode.int model.bestOf
            , maybeEncodeNullable "logit_bias" encodeObject model.logitBias
            , maybeEncode "user" Json.Encode.string model.user
            ]
    in
    pairs


encodeCreateCompletionRequestModel : CreateCompletionRequestModel -> Json.Encode.Value
encodeCreateCompletionRequestModel model =
    case model of
        CreateCompletionRequestModelString subModel ->
            encodeString subModel




encodeCreateCompletionRequestPrompt : CreateCompletionRequestPrompt -> Json.Encode.Value
encodeCreateCompletionRequestPrompt model =
    case model of
        CreateCompletionRequestPromptInt subModel ->
            encodeInt subModel


        CreateCompletionRequestPromptString subModel ->
            encodeString subModel




encodeCreateCompletionRequestStop : CreateCompletionRequestStop -> Json.Encode.Value
encodeCreateCompletionRequestStop model =
    case model of
        CreateCompletionRequestStopString subModel ->
            encodeString subModel




encodeCreateCompletionResponse : CreateCompletionResponse -> Json.Encode.Value
encodeCreateCompletionResponse =
    encodeObject << encodeCreateCompletionResponsePairs


encodeCreateCompletionResponseWithTag : ( String, String ) -> CreateCompletionResponse -> Json.Encode.Value
encodeCreateCompletionResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateCompletionResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateCompletionResponsePairs : CreateCompletionResponse -> List EncodedField
encodeCreateCompletionResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "object" Json.Encode.string model.object
            , encode "created" Json.Encode.int model.created
            , encode "model" Json.Encode.string model.model
            , encode "choices" (Json.Encode.list encodeCreateCompletionResponseChoicesInner) model.choices
            , maybeEncode "usage" encodeCreateCompletionResponseUsage model.usage
            ]
    in
    pairs


encodeCreateCompletionResponseChoicesInner : CreateCompletionResponseChoicesInner -> Json.Encode.Value
encodeCreateCompletionResponseChoicesInner =
    encodeObject << encodeCreateCompletionResponseChoicesInnerPairs


encodeCreateCompletionResponseChoicesInnerWithTag : ( String, String ) -> CreateCompletionResponseChoicesInner -> Json.Encode.Value
encodeCreateCompletionResponseChoicesInnerWithTag (tagField, tag) model =
    encodeObject (encodeCreateCompletionResponseChoicesInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateCompletionResponseChoicesInnerPairs : CreateCompletionResponseChoicesInner -> List EncodedField
encodeCreateCompletionResponseChoicesInnerPairs model =
    let
        pairs =
            [ encode "text" Json.Encode.string model.text
            , encode "index" Json.Encode.int model.index
            , encodeNullable "logprobs" encodeCreateCompletionResponseChoicesInnerLogprobs model.logprobs
            , encode "finish_reason" encodeCreateCompletionResponseChoicesInnerFinishReason model.finishReason
            ]
    in
    pairs

stringFromCreateCompletionResponseChoicesInnerFinishReason : CreateCompletionResponseChoicesInnerFinishReason -> String
stringFromCreateCompletionResponseChoicesInnerFinishReason model =
    case model of
        CreateCompletionResponseChoicesInnerFinishReasonStop ->
            "stop"

        CreateCompletionResponseChoicesInnerFinishReasonLength ->
            "length"


encodeCreateCompletionResponseChoicesInnerFinishReason : CreateCompletionResponseChoicesInnerFinishReason -> Json.Encode.Value
encodeCreateCompletionResponseChoicesInnerFinishReason =
    Json.Encode.string << stringFromCreateCompletionResponseChoicesInnerFinishReason



encodeCreateCompletionResponseChoicesInnerLogprobs : CreateCompletionResponseChoicesInnerLogprobs -> Json.Encode.Value
encodeCreateCompletionResponseChoicesInnerLogprobs =
    encodeObject << encodeCreateCompletionResponseChoicesInnerLogprobsPairs


encodeCreateCompletionResponseChoicesInnerLogprobsWithTag : ( String, String ) -> CreateCompletionResponseChoicesInnerLogprobs -> Json.Encode.Value
encodeCreateCompletionResponseChoicesInnerLogprobsWithTag (tagField, tag) model =
    encodeObject (encodeCreateCompletionResponseChoicesInnerLogprobsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateCompletionResponseChoicesInnerLogprobsPairs : CreateCompletionResponseChoicesInnerLogprobs -> List EncodedField
encodeCreateCompletionResponseChoicesInnerLogprobsPairs model =
    let
        pairs =
            [ maybeEncode "tokens" (Json.Encode.list Json.Encode.string) model.tokens
            , maybeEncode "token_logprobs" (Json.Encode.list Json.Encode.float) model.tokenLogprobs
            , maybeEncode "top_logprobs" (Json.Encode.list encodeObject) model.topLogprobs
            , maybeEncode "text_offset" (Json.Encode.list Json.Encode.int) model.textOffset
            ]
    in
    pairs


encodeCreateCompletionResponseUsage : CreateCompletionResponseUsage -> Json.Encode.Value
encodeCreateCompletionResponseUsage =
    encodeObject << encodeCreateCompletionResponseUsagePairs


encodeCreateCompletionResponseUsageWithTag : ( String, String ) -> CreateCompletionResponseUsage -> Json.Encode.Value
encodeCreateCompletionResponseUsageWithTag (tagField, tag) model =
    encodeObject (encodeCreateCompletionResponseUsagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateCompletionResponseUsagePairs : CreateCompletionResponseUsage -> List EncodedField
encodeCreateCompletionResponseUsagePairs model =
    let
        pairs =
            [ encode "prompt_tokens" Json.Encode.int model.promptTokens
            , encode "completion_tokens" Json.Encode.int model.completionTokens
            , encode "total_tokens" Json.Encode.int model.totalTokens
            ]
    in
    pairs


encodeCreateEditRequest : CreateEditRequest -> Json.Encode.Value
encodeCreateEditRequest =
    encodeObject << encodeCreateEditRequestPairs


encodeCreateEditRequestWithTag : ( String, String ) -> CreateEditRequest -> Json.Encode.Value
encodeCreateEditRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateEditRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateEditRequestPairs : CreateEditRequest -> List EncodedField
encodeCreateEditRequestPairs model =
    let
        pairs =
            [ encode "model" encodeCreateEditRequestModel model.model
            , maybeEncodeNullable "input" Json.Encode.string model.input
            , encode "instruction" Json.Encode.string model.instruction
            , maybeEncodeNullable "n" Json.Encode.int model.n
            , maybeEncodeNullable "temperature" Json.Encode.float model.temperature
            , maybeEncodeNullable "top_p" Json.Encode.float model.topP
            ]
    in
    pairs


encodeCreateEditRequestModel : CreateEditRequestModel -> Json.Encode.Value
encodeCreateEditRequestModel model =
    case model of
        CreateEditRequestModelString subModel ->
            encodeString subModel




encodeCreateEditResponse : CreateEditResponse -> Json.Encode.Value
encodeCreateEditResponse =
    encodeObject << encodeCreateEditResponsePairs


encodeCreateEditResponseWithTag : ( String, String ) -> CreateEditResponse -> Json.Encode.Value
encodeCreateEditResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateEditResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateEditResponsePairs : CreateEditResponse -> List EncodedField
encodeCreateEditResponsePairs model =
    let
        pairs =
            [ encode "object" Json.Encode.string model.object
            , encode "created" Json.Encode.int model.created
            , encode "choices" (Json.Encode.list encodeCreateEditResponseChoicesInner) model.choices
            , encode "usage" encodeCreateCompletionResponseUsage model.usage
            ]
    in
    pairs


encodeCreateEditResponseChoicesInner : CreateEditResponseChoicesInner -> Json.Encode.Value
encodeCreateEditResponseChoicesInner =
    encodeObject << encodeCreateEditResponseChoicesInnerPairs


encodeCreateEditResponseChoicesInnerWithTag : ( String, String ) -> CreateEditResponseChoicesInner -> Json.Encode.Value
encodeCreateEditResponseChoicesInnerWithTag (tagField, tag) model =
    encodeObject (encodeCreateEditResponseChoicesInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateEditResponseChoicesInnerPairs : CreateEditResponseChoicesInner -> List EncodedField
encodeCreateEditResponseChoicesInnerPairs model =
    let
        pairs =
            [ maybeEncode "text" Json.Encode.string model.text
            , maybeEncode "index" Json.Encode.int model.index
            , maybeEncodeNullable "logprobs" encodeCreateCompletionResponseChoicesInnerLogprobs model.logprobs
            , maybeEncode "finish_reason" encodeCreateEditResponseChoicesInnerFinishReason model.finishReason
            ]
    in
    pairs

stringFromCreateEditResponseChoicesInnerFinishReason : CreateEditResponseChoicesInnerFinishReason -> String
stringFromCreateEditResponseChoicesInnerFinishReason model =
    case model of
        CreateEditResponseChoicesInnerFinishReasonStop ->
            "stop"

        CreateEditResponseChoicesInnerFinishReasonLength ->
            "length"


encodeCreateEditResponseChoicesInnerFinishReason : CreateEditResponseChoicesInnerFinishReason -> Json.Encode.Value
encodeCreateEditResponseChoicesInnerFinishReason =
    Json.Encode.string << stringFromCreateEditResponseChoicesInnerFinishReason



encodeCreateEmbeddingRequest : CreateEmbeddingRequest -> Json.Encode.Value
encodeCreateEmbeddingRequest =
    encodeObject << encodeCreateEmbeddingRequestPairs


encodeCreateEmbeddingRequestWithTag : ( String, String ) -> CreateEmbeddingRequest -> Json.Encode.Value
encodeCreateEmbeddingRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateEmbeddingRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateEmbeddingRequestPairs : CreateEmbeddingRequest -> List EncodedField
encodeCreateEmbeddingRequestPairs model =
    let
        pairs =
            [ encode "model" encodeCreateEmbeddingRequestModel model.model
            , encode "input" encodeCreateEmbeddingRequestInput model.input
            , maybeEncode "user" Json.Encode.string model.user
            ]
    in
    pairs


encodeCreateEmbeddingRequestInput : CreateEmbeddingRequestInput -> Json.Encode.Value
encodeCreateEmbeddingRequestInput model =
    case model of
        CreateEmbeddingRequestInputInt subModel ->
            encodeInt subModel


        CreateEmbeddingRequestInputString subModel ->
            encodeString subModel




encodeCreateEmbeddingRequestModel : CreateEmbeddingRequestModel -> Json.Encode.Value
encodeCreateEmbeddingRequestModel model =
    case model of
        CreateEmbeddingRequestModelString subModel ->
            encodeString subModel




encodeCreateEmbeddingResponse : CreateEmbeddingResponse -> Json.Encode.Value
encodeCreateEmbeddingResponse =
    encodeObject << encodeCreateEmbeddingResponsePairs


encodeCreateEmbeddingResponseWithTag : ( String, String ) -> CreateEmbeddingResponse -> Json.Encode.Value
encodeCreateEmbeddingResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateEmbeddingResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateEmbeddingResponsePairs : CreateEmbeddingResponse -> List EncodedField
encodeCreateEmbeddingResponsePairs model =
    let
        pairs =
            [ encode "object" Json.Encode.string model.object
            , encode "model" Json.Encode.string model.model
            , encode "data" (Json.Encode.list encodeCreateEmbeddingResponseDataInner) model.data
            , encode "usage" encodeCreateEmbeddingResponseUsage model.usage
            ]
    in
    pairs


encodeCreateEmbeddingResponseDataInner : CreateEmbeddingResponseDataInner -> Json.Encode.Value
encodeCreateEmbeddingResponseDataInner =
    encodeObject << encodeCreateEmbeddingResponseDataInnerPairs


encodeCreateEmbeddingResponseDataInnerWithTag : ( String, String ) -> CreateEmbeddingResponseDataInner -> Json.Encode.Value
encodeCreateEmbeddingResponseDataInnerWithTag (tagField, tag) model =
    encodeObject (encodeCreateEmbeddingResponseDataInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateEmbeddingResponseDataInnerPairs : CreateEmbeddingResponseDataInner -> List EncodedField
encodeCreateEmbeddingResponseDataInnerPairs model =
    let
        pairs =
            [ encode "index" Json.Encode.int model.index
            , encode "object" Json.Encode.string model.object
            , encode "embedding" (Json.Encode.list Json.Encode.float) model.embedding
            ]
    in
    pairs


encodeCreateEmbeddingResponseUsage : CreateEmbeddingResponseUsage -> Json.Encode.Value
encodeCreateEmbeddingResponseUsage =
    encodeObject << encodeCreateEmbeddingResponseUsagePairs


encodeCreateEmbeddingResponseUsageWithTag : ( String, String ) -> CreateEmbeddingResponseUsage -> Json.Encode.Value
encodeCreateEmbeddingResponseUsageWithTag (tagField, tag) model =
    encodeObject (encodeCreateEmbeddingResponseUsagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateEmbeddingResponseUsagePairs : CreateEmbeddingResponseUsage -> List EncodedField
encodeCreateEmbeddingResponseUsagePairs model =
    let
        pairs =
            [ encode "prompt_tokens" Json.Encode.int model.promptTokens
            , encode "total_tokens" Json.Encode.int model.totalTokens
            ]
    in
    pairs


encodeCreateFineTuneRequest : CreateFineTuneRequest -> Json.Encode.Value
encodeCreateFineTuneRequest =
    encodeObject << encodeCreateFineTuneRequestPairs


encodeCreateFineTuneRequestWithTag : ( String, String ) -> CreateFineTuneRequest -> Json.Encode.Value
encodeCreateFineTuneRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateFineTuneRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateFineTuneRequestPairs : CreateFineTuneRequest -> List EncodedField
encodeCreateFineTuneRequestPairs model =
    let
        pairs =
            [ encode "training_file" Json.Encode.string model.trainingFile
            , maybeEncodeNullable "validation_file" Json.Encode.string model.validationFile
            , maybeEncodeNullable "model" encodeCreateFineTuneRequestModel model.model
            , maybeEncodeNullable "n_epochs" Json.Encode.int model.nEpochs
            , maybeEncodeNullable "batch_size" Json.Encode.int model.batchSize
            , maybeEncodeNullable "learning_rate_multiplier" Json.Encode.float model.learningRateMultiplier
            , maybeEncodeNullable "prompt_loss_weight" Json.Encode.float model.promptLossWeight
            , maybeEncodeNullable "compute_classification_metrics" Json.Encode.bool model.computeClassificationMetrics
            , maybeEncodeNullable "classification_n_classes" Json.Encode.int model.classificationNClasses
            , maybeEncodeNullable "classification_positive_class" Json.Encode.string model.classificationPositiveClass
            , maybeEncodeNullable "classification_betas" (Json.Encode.list Json.Encode.float) model.classificationBetas
            , maybeEncodeNullable "suffix" Json.Encode.string model.suffix
            ]
    in
    pairs


encodeCreateFineTuneRequestModel : CreateFineTuneRequestModel -> Json.Encode.Value
encodeCreateFineTuneRequestModel model =
    case model of
        CreateFineTuneRequestModelString subModel ->
            encodeString subModel




encodeCreateImageRequest : CreateImageRequest -> Json.Encode.Value
encodeCreateImageRequest =
    encodeObject << encodeCreateImageRequestPairs


encodeCreateImageRequestWithTag : ( String, String ) -> CreateImageRequest -> Json.Encode.Value
encodeCreateImageRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateImageRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateImageRequestPairs : CreateImageRequest -> List EncodedField
encodeCreateImageRequestPairs model =
    let
        pairs =
            [ encode "prompt" Json.Encode.string model.prompt
            , maybeEncodeNullable "n" Json.Encode.int model.n
            , maybeEncodeNullable "size" encodeCreateImageRequestSize model.size
            , maybeEncodeNullable "response_format" encodeCreateImageRequestResponseFormat model.responseFormat
            , maybeEncode "user" Json.Encode.string model.user
            ]
    in
    pairs

stringFromCreateImageRequestSize : CreateImageRequestSize -> String
stringFromCreateImageRequestSize model =
    case model of
        CreateImageRequestSize256x256 ->
            "256x256"

        CreateImageRequestSize512x512 ->
            "512x512"

        CreateImageRequestSize1024x1024 ->
            "1024x1024"


encodeCreateImageRequestSize : CreateImageRequestSize -> Json.Encode.Value
encodeCreateImageRequestSize =
    Json.Encode.string << stringFromCreateImageRequestSize


stringFromCreateImageRequestResponseFormat : CreateImageRequestResponseFormat -> String
stringFromCreateImageRequestResponseFormat model =
    case model of
        CreateImageRequestResponseFormatUrl ->
            "url"

        CreateImageRequestResponseFormatB64Json ->
            "b64_json"


encodeCreateImageRequestResponseFormat : CreateImageRequestResponseFormat -> Json.Encode.Value
encodeCreateImageRequestResponseFormat =
    Json.Encode.string << stringFromCreateImageRequestResponseFormat



encodeCreateModerationRequest : CreateModerationRequest -> Json.Encode.Value
encodeCreateModerationRequest =
    encodeObject << encodeCreateModerationRequestPairs


encodeCreateModerationRequestWithTag : ( String, String ) -> CreateModerationRequest -> Json.Encode.Value
encodeCreateModerationRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateModerationRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateModerationRequestPairs : CreateModerationRequest -> List EncodedField
encodeCreateModerationRequestPairs model =
    let
        pairs =
            [ encode "input" encodeCreateModerationRequestInput model.input
            , maybeEncode "model" encodeCreateModerationRequestModel model.model
            ]
    in
    pairs


encodeCreateModerationRequestInput : CreateModerationRequestInput -> Json.Encode.Value
encodeCreateModerationRequestInput model =
    case model of
        CreateModerationRequestInputString subModel ->
            encodeString subModel




encodeCreateModerationRequestModel : CreateModerationRequestModel -> Json.Encode.Value
encodeCreateModerationRequestModel model =
    case model of
        CreateModerationRequestModelString subModel ->
            encodeString subModel




encodeCreateModerationResponse : CreateModerationResponse -> Json.Encode.Value
encodeCreateModerationResponse =
    encodeObject << encodeCreateModerationResponsePairs


encodeCreateModerationResponseWithTag : ( String, String ) -> CreateModerationResponse -> Json.Encode.Value
encodeCreateModerationResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateModerationResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateModerationResponsePairs : CreateModerationResponse -> List EncodedField
encodeCreateModerationResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "model" Json.Encode.string model.model
            , encode "results" (Json.Encode.list encodeCreateModerationResponseResultsInner) model.results
            ]
    in
    pairs


encodeCreateModerationResponseResultsInner : CreateModerationResponseResultsInner -> Json.Encode.Value
encodeCreateModerationResponseResultsInner =
    encodeObject << encodeCreateModerationResponseResultsInnerPairs


encodeCreateModerationResponseResultsInnerWithTag : ( String, String ) -> CreateModerationResponseResultsInner -> Json.Encode.Value
encodeCreateModerationResponseResultsInnerWithTag (tagField, tag) model =
    encodeObject (encodeCreateModerationResponseResultsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateModerationResponseResultsInnerPairs : CreateModerationResponseResultsInner -> List EncodedField
encodeCreateModerationResponseResultsInnerPairs model =
    let
        pairs =
            [ encode "flagged" Json.Encode.bool model.flagged
            , encode "categories" encodeCreateModerationResponseResultsInnerCategories model.categories
            , encode "category_scores" encodeCreateModerationResponseResultsInnerCategoryScores model.categoryScores
            ]
    in
    pairs


encodeCreateModerationResponseResultsInnerCategories : CreateModerationResponseResultsInnerCategories -> Json.Encode.Value
encodeCreateModerationResponseResultsInnerCategories =
    encodeObject << encodeCreateModerationResponseResultsInnerCategoriesPairs


encodeCreateModerationResponseResultsInnerCategoriesWithTag : ( String, String ) -> CreateModerationResponseResultsInnerCategories -> Json.Encode.Value
encodeCreateModerationResponseResultsInnerCategoriesWithTag (tagField, tag) model =
    encodeObject (encodeCreateModerationResponseResultsInnerCategoriesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateModerationResponseResultsInnerCategoriesPairs : CreateModerationResponseResultsInnerCategories -> List EncodedField
encodeCreateModerationResponseResultsInnerCategoriesPairs model =
    let
        pairs =
            [ encode "hate" Json.Encode.bool model.hate
            , encode "hate/threatening" Json.Encode.bool model.hatethreatening
            , encode "self-harm" Json.Encode.bool model.selfharm
            , encode "sexual" Json.Encode.bool model.sexual
            , encode "sexual/minors" Json.Encode.bool model.sexualminors
            , encode "violence" Json.Encode.bool model.violence
            , encode "violence/graphic" Json.Encode.bool model.violencegraphic
            ]
    in
    pairs


encodeCreateModerationResponseResultsInnerCategoryScores : CreateModerationResponseResultsInnerCategoryScores -> Json.Encode.Value
encodeCreateModerationResponseResultsInnerCategoryScores =
    encodeObject << encodeCreateModerationResponseResultsInnerCategoryScoresPairs


encodeCreateModerationResponseResultsInnerCategoryScoresWithTag : ( String, String ) -> CreateModerationResponseResultsInnerCategoryScores -> Json.Encode.Value
encodeCreateModerationResponseResultsInnerCategoryScoresWithTag (tagField, tag) model =
    encodeObject (encodeCreateModerationResponseResultsInnerCategoryScoresPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateModerationResponseResultsInnerCategoryScoresPairs : CreateModerationResponseResultsInnerCategoryScores -> List EncodedField
encodeCreateModerationResponseResultsInnerCategoryScoresPairs model =
    let
        pairs =
            [ encode "hate" Json.Encode.float model.hate
            , encode "hate/threatening" Json.Encode.float model.hatethreatening
            , encode "self-harm" Json.Encode.float model.selfharm
            , encode "sexual" Json.Encode.float model.sexual
            , encode "sexual/minors" Json.Encode.float model.sexualminors
            , encode "violence" Json.Encode.float model.violence
            , encode "violence/graphic" Json.Encode.float model.violencegraphic
            ]
    in
    pairs


encodeCreateTranscriptionRequestModel : CreateTranscriptionRequestModel -> Json.Encode.Value
encodeCreateTranscriptionRequestModel model =
    case model of
        CreateTranscriptionRequestModelString subModel ->
            encodeString subModel




encodeCreateTranscriptionResponse : CreateTranscriptionResponse -> Json.Encode.Value
encodeCreateTranscriptionResponse =
    encodeObject << encodeCreateTranscriptionResponsePairs


encodeCreateTranscriptionResponseWithTag : ( String, String ) -> CreateTranscriptionResponse -> Json.Encode.Value
encodeCreateTranscriptionResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateTranscriptionResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateTranscriptionResponsePairs : CreateTranscriptionResponse -> List EncodedField
encodeCreateTranscriptionResponsePairs model =
    let
        pairs =
            [ encode "text" Json.Encode.string model.text
            ]
    in
    pairs


encodeCreateTranslationResponse : CreateTranslationResponse -> Json.Encode.Value
encodeCreateTranslationResponse =
    encodeObject << encodeCreateTranslationResponsePairs


encodeCreateTranslationResponseWithTag : ( String, String ) -> CreateTranslationResponse -> Json.Encode.Value
encodeCreateTranslationResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateTranslationResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateTranslationResponsePairs : CreateTranslationResponse -> List EncodedField
encodeCreateTranslationResponsePairs model =
    let
        pairs =
            [ encode "text" Json.Encode.string model.text
            ]
    in
    pairs


encodeDeleteFileResponse : DeleteFileResponse -> Json.Encode.Value
encodeDeleteFileResponse =
    encodeObject << encodeDeleteFileResponsePairs


encodeDeleteFileResponseWithTag : ( String, String ) -> DeleteFileResponse -> Json.Encode.Value
encodeDeleteFileResponseWithTag (tagField, tag) model =
    encodeObject (encodeDeleteFileResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteFileResponsePairs : DeleteFileResponse -> List EncodedField
encodeDeleteFileResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "object" Json.Encode.string model.object
            , encode "deleted" Json.Encode.bool model.deleted
            ]
    in
    pairs


encodeDeleteModelResponse : DeleteModelResponse -> Json.Encode.Value
encodeDeleteModelResponse =
    encodeObject << encodeDeleteModelResponsePairs


encodeDeleteModelResponseWithTag : ( String, String ) -> DeleteModelResponse -> Json.Encode.Value
encodeDeleteModelResponseWithTag (tagField, tag) model =
    encodeObject (encodeDeleteModelResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteModelResponsePairs : DeleteModelResponse -> List EncodedField
encodeDeleteModelResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "object" Json.Encode.string model.object
            , encode "deleted" Json.Encode.bool model.deleted
            ]
    in
    pairs


encodeError : Error -> Json.Encode.Value
encodeError =
    encodeObject << encodeErrorPairs


encodeErrorWithTag : ( String, String ) -> Error -> Json.Encode.Value
encodeErrorWithTag (tagField, tag) model =
    encodeObject (encodeErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeErrorPairs : Error -> List EncodedField
encodeErrorPairs model =
    let
        pairs =
            [ encode "type" Json.Encode.string model.type_
            , encode "message" Json.Encode.string model.message
            , encodeNullable "param" Json.Encode.string model.param
            , encodeNullable "code" Json.Encode.string model.code
            ]
    in
    pairs


encodeErrorResponse : ErrorResponse -> Json.Encode.Value
encodeErrorResponse =
    encodeObject << encodeErrorResponsePairs


encodeErrorResponseWithTag : ( String, String ) -> ErrorResponse -> Json.Encode.Value
encodeErrorResponseWithTag (tagField, tag) model =
    encodeObject (encodeErrorResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeErrorResponsePairs : ErrorResponse -> List EncodedField
encodeErrorResponsePairs model =
    let
        pairs =
            [ encode "error" encodeError model.error
            ]
    in
    pairs


encodeFineTune : FineTune -> Json.Encode.Value
encodeFineTune =
    encodeObject << encodeFineTunePairs


encodeFineTuneWithTag : ( String, String ) -> FineTune -> Json.Encode.Value
encodeFineTuneWithTag (tagField, tag) model =
    encodeObject (encodeFineTunePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFineTunePairs : FineTune -> List EncodedField
encodeFineTunePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "object" Json.Encode.string model.object
            , encode "created_at" Json.Encode.int model.createdAt
            , encode "updated_at" Json.Encode.int model.updatedAt
            , encode "model" Json.Encode.string model.model
            , encodeNullable "fine_tuned_model" Json.Encode.string model.fineTunedModel
            , encode "organization_id" Json.Encode.string model.organizationId
            , encode "status" Json.Encode.string model.status
            , encode "hyperparams" encodeObject model.hyperparams
            , encode "training_files" (Json.Encode.list encodeOpenAIFile) model.trainingFiles
            , encode "validation_files" (Json.Encode.list encodeOpenAIFile) model.validationFiles
            , encode "result_files" (Json.Encode.list encodeOpenAIFile) model.resultFiles
            , maybeEncode "events" (Json.Encode.list encodeFineTuneEvent) model.events
            ]
    in
    pairs


encodeFineTuneEvent : FineTuneEvent -> Json.Encode.Value
encodeFineTuneEvent =
    encodeObject << encodeFineTuneEventPairs


encodeFineTuneEventWithTag : ( String, String ) -> FineTuneEvent -> Json.Encode.Value
encodeFineTuneEventWithTag (tagField, tag) model =
    encodeObject (encodeFineTuneEventPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFineTuneEventPairs : FineTuneEvent -> List EncodedField
encodeFineTuneEventPairs model =
    let
        pairs =
            [ encode "object" Json.Encode.string model.object
            , encode "created_at" Json.Encode.int model.createdAt
            , encode "level" Json.Encode.string model.level
            , encode "message" Json.Encode.string model.message
            ]
    in
    pairs


encodeImagesResponse : ImagesResponse -> Json.Encode.Value
encodeImagesResponse =
    encodeObject << encodeImagesResponsePairs


encodeImagesResponseWithTag : ( String, String ) -> ImagesResponse -> Json.Encode.Value
encodeImagesResponseWithTag (tagField, tag) model =
    encodeObject (encodeImagesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeImagesResponsePairs : ImagesResponse -> List EncodedField
encodeImagesResponsePairs model =
    let
        pairs =
            [ encode "created" Json.Encode.int model.created
            , encode "data" (Json.Encode.list encodeImagesResponseDataInner) model.data
            ]
    in
    pairs


encodeImagesResponseDataInner : ImagesResponseDataInner -> Json.Encode.Value
encodeImagesResponseDataInner =
    encodeObject << encodeImagesResponseDataInnerPairs


encodeImagesResponseDataInnerWithTag : ( String, String ) -> ImagesResponseDataInner -> Json.Encode.Value
encodeImagesResponseDataInnerWithTag (tagField, tag) model =
    encodeObject (encodeImagesResponseDataInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeImagesResponseDataInnerPairs : ImagesResponseDataInner -> List EncodedField
encodeImagesResponseDataInnerPairs model =
    let
        pairs =
            [ maybeEncode "url" Json.Encode.string model.url
            , maybeEncode "b64_json" Json.Encode.string model.b64Json
            ]
    in
    pairs


encodeListFilesResponse : ListFilesResponse -> Json.Encode.Value
encodeListFilesResponse =
    encodeObject << encodeListFilesResponsePairs


encodeListFilesResponseWithTag : ( String, String ) -> ListFilesResponse -> Json.Encode.Value
encodeListFilesResponseWithTag (tagField, tag) model =
    encodeObject (encodeListFilesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeListFilesResponsePairs : ListFilesResponse -> List EncodedField
encodeListFilesResponsePairs model =
    let
        pairs =
            [ encode "object" Json.Encode.string model.object
            , encode "data" (Json.Encode.list encodeOpenAIFile) model.data
            ]
    in
    pairs


encodeListFineTuneEventsResponse : ListFineTuneEventsResponse -> Json.Encode.Value
encodeListFineTuneEventsResponse =
    encodeObject << encodeListFineTuneEventsResponsePairs


encodeListFineTuneEventsResponseWithTag : ( String, String ) -> ListFineTuneEventsResponse -> Json.Encode.Value
encodeListFineTuneEventsResponseWithTag (tagField, tag) model =
    encodeObject (encodeListFineTuneEventsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeListFineTuneEventsResponsePairs : ListFineTuneEventsResponse -> List EncodedField
encodeListFineTuneEventsResponsePairs model =
    let
        pairs =
            [ encode "object" Json.Encode.string model.object
            , encode "data" (Json.Encode.list encodeFineTuneEvent) model.data
            ]
    in
    pairs


encodeListFineTunesResponse : ListFineTunesResponse -> Json.Encode.Value
encodeListFineTunesResponse =
    encodeObject << encodeListFineTunesResponsePairs


encodeListFineTunesResponseWithTag : ( String, String ) -> ListFineTunesResponse -> Json.Encode.Value
encodeListFineTunesResponseWithTag (tagField, tag) model =
    encodeObject (encodeListFineTunesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeListFineTunesResponsePairs : ListFineTunesResponse -> List EncodedField
encodeListFineTunesResponsePairs model =
    let
        pairs =
            [ encode "object" Json.Encode.string model.object
            , encode "data" (Json.Encode.list encodeFineTune) model.data
            ]
    in
    pairs


encodeListModelsResponse : ListModelsResponse -> Json.Encode.Value
encodeListModelsResponse =
    encodeObject << encodeListModelsResponsePairs


encodeListModelsResponseWithTag : ( String, String ) -> ListModelsResponse -> Json.Encode.Value
encodeListModelsResponseWithTag (tagField, tag) model =
    encodeObject (encodeListModelsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeListModelsResponsePairs : ListModelsResponse -> List EncodedField
encodeListModelsResponsePairs model =
    let
        pairs =
            [ encode "object" Json.Encode.string model.object
            , encode "data" (Json.Encode.list encodeModel) model.data
            ]
    in
    pairs


encodeModel : Model -> Json.Encode.Value
encodeModel =
    encodeObject << encodeModelPairs


encodeModelWithTag : ( String, String ) -> Model -> Json.Encode.Value
encodeModelWithTag (tagField, tag) model =
    encodeObject (encodeModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeModelPairs : Model -> List EncodedField
encodeModelPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "object" Json.Encode.string model.object
            , encode "created" Json.Encode.int model.created
            , encode "owned_by" Json.Encode.string model.ownedBy
            ]
    in
    pairs


encodeOpenAIFile : OpenAIFile -> Json.Encode.Value
encodeOpenAIFile =
    encodeObject << encodeOpenAIFilePairs


encodeOpenAIFileWithTag : ( String, String ) -> OpenAIFile -> Json.Encode.Value
encodeOpenAIFileWithTag (tagField, tag) model =
    encodeObject (encodeOpenAIFilePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOpenAIFilePairs : OpenAIFile -> List EncodedField
encodeOpenAIFilePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "object" Json.Encode.string model.object
            , encode "bytes" Json.Encode.int model.bytes
            , encode "created_at" Json.Encode.int model.createdAt
            , encode "filename" Json.Encode.string model.filename
            , encode "purpose" Json.Encode.string model.purpose
            , maybeEncode "status" Json.Encode.string model.status
            , maybeEncodeNullable "status_details" encodeObject model.statusDetails
            ]
    in
    pairs


-- DECODER


chatCompletionFunctionsDecoder : Json.Decode.Decoder ChatCompletionFunctions
chatCompletionFunctionsDecoder =
    Json.Decode.succeed ChatCompletionFunctions
        |> decode "name" Json.Decode.string 
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "parameters" (Json.Decode.dict anyTypeDecoder) Nothing


chatCompletionRequestMessageDecoder : Json.Decode.Decoder ChatCompletionRequestMessage
chatCompletionRequestMessageDecoder =
    Json.Decode.succeed ChatCompletionRequestMessage
        |> decode "role" chatCompletionRequestMessageRoleDecoder 
        |> maybeDecode "content" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "function_call" chatCompletionRequestMessageFunctionCallDecoder Nothing


chatCompletionRequestMessageRoleDecoder : Json.Decode.Decoder ChatCompletionRequestMessageRole
chatCompletionRequestMessageRoleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "system" ->
                        Json.Decode.succeed ChatCompletionRequestMessageRoleSystem

                    "user" ->
                        Json.Decode.succeed ChatCompletionRequestMessageRoleUser

                    "assistant" ->
                        Json.Decode.succeed ChatCompletionRequestMessageRoleAssistant

                    "function" ->
                        Json.Decode.succeed ChatCompletionRequestMessageRoleFunction

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



chatCompletionRequestMessageFunctionCallDecoder : Json.Decode.Decoder ChatCompletionRequestMessageFunctionCall
chatCompletionRequestMessageFunctionCallDecoder =
    Json.Decode.succeed ChatCompletionRequestMessageFunctionCall
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "arguments" Json.Decode.string Nothing


chatCompletionResponseMessageDecoder : Json.Decode.Decoder ChatCompletionResponseMessage
chatCompletionResponseMessageDecoder =
    Json.Decode.succeed ChatCompletionResponseMessage
        |> decode "role" chatCompletionResponseMessageRoleDecoder 
        |> maybeDecodeNullable "content" Json.Decode.string Nothing
        |> maybeDecode "function_call" chatCompletionRequestMessageFunctionCallDecoder Nothing


chatCompletionResponseMessageRoleDecoder : Json.Decode.Decoder ChatCompletionResponseMessageRole
chatCompletionResponseMessageRoleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "system" ->
                        Json.Decode.succeed ChatCompletionResponseMessageRoleSystem

                    "user" ->
                        Json.Decode.succeed ChatCompletionResponseMessageRoleUser

                    "assistant" ->
                        Json.Decode.succeed ChatCompletionResponseMessageRoleAssistant

                    "function" ->
                        Json.Decode.succeed ChatCompletionResponseMessageRoleFunction

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



chatCompletionStreamResponseDeltaDecoder : Json.Decode.Decoder ChatCompletionStreamResponseDelta
chatCompletionStreamResponseDeltaDecoder =
    Json.Decode.succeed ChatCompletionStreamResponseDelta
        |> maybeDecode "role" chatCompletionStreamResponseDeltaRoleDecoder Nothing
        |> maybeDecodeNullable "content" Json.Decode.string Nothing
        |> maybeDecode "function_call" chatCompletionRequestMessageFunctionCallDecoder Nothing


chatCompletionStreamResponseDeltaRoleDecoder : Json.Decode.Decoder ChatCompletionStreamResponseDeltaRole
chatCompletionStreamResponseDeltaRoleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "system" ->
                        Json.Decode.succeed ChatCompletionStreamResponseDeltaRoleSystem

                    "user" ->
                        Json.Decode.succeed ChatCompletionStreamResponseDeltaRoleUser

                    "assistant" ->
                        Json.Decode.succeed ChatCompletionStreamResponseDeltaRoleAssistant

                    "function" ->
                        Json.Decode.succeed ChatCompletionStreamResponseDeltaRoleFunction

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createChatCompletionRequestDecoder : Json.Decode.Decoder CreateChatCompletionRequest
createChatCompletionRequestDecoder =
    Json.Decode.succeed CreateChatCompletionRequest
        |> decode "model" createChatCompletionRequestModelDecoder 
        |> decode "messages" (Json.Decode.list chatCompletionRequestMessageDecoder) 
        |> maybeDecode "functions" (Json.Decode.list chatCompletionFunctionsDecoder) Nothing
        |> maybeDecode "function_call" createChatCompletionRequestFunctionCallDecoder Nothing
        |> maybeDecodeNullable "temperature" Json.Decode.float (Just 1)
        |> maybeDecodeNullable "top_p" Json.Decode.float (Just 1)
        |> maybeDecodeNullable "n" Json.Decode.int (Just 1)
        |> maybeDecodeNullable "stream" Json.Decode.bool (Just False)
        |> maybeDecode "stop" createChatCompletionRequestStopDecoder Nothing
        |> maybeDecode "max_tokens" Json.Decode.int Nothing
        |> maybeDecodeNullable "presence_penalty" Json.Decode.float (Just 0)
        |> maybeDecodeNullable "frequency_penalty" Json.Decode.float (Just 0)
        |> maybeDecodeNullable "logit_bias" objectDecoder Nothing
        |> maybeDecode "user" Json.Decode.string Nothing


createChatCompletionRequestFunctionCallDecoder : Json.Decode.Decoder CreateChatCompletionRequestFunctionCall
createChatCompletionRequestFunctionCallDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateChatCompletionRequestFunctionCallCreateChatCompletionRequestFunctionCallOneOf createChatCompletionRequestFunctionCallOneOfDecoder
        , Json.Decode.map CreateChatCompletionRequestFunctionCallString stringDecoder
        ]



createChatCompletionRequestFunctionCallOneOfDecoder : Json.Decode.Decoder CreateChatCompletionRequestFunctionCallOneOf
createChatCompletionRequestFunctionCallOneOfDecoder =
    Json.Decode.succeed CreateChatCompletionRequestFunctionCallOneOf
        |> decode "name" Json.Decode.string 


createChatCompletionRequestModelDecoder : Json.Decode.Decoder CreateChatCompletionRequestModel
createChatCompletionRequestModelDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateChatCompletionRequestModelString stringDecoder
        ]



createChatCompletionRequestStopDecoder : Json.Decode.Decoder CreateChatCompletionRequestStop
createChatCompletionRequestStopDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateChatCompletionRequestStopString stringDecoder
        ]



createChatCompletionResponseDecoder : Json.Decode.Decoder CreateChatCompletionResponse
createChatCompletionResponseDecoder =
    Json.Decode.succeed CreateChatCompletionResponse
        |> decode "id" Json.Decode.string 
        |> decode "object" Json.Decode.string 
        |> decode "created" Json.Decode.int 
        |> decode "model" Json.Decode.string 
        |> decode "choices" (Json.Decode.list createChatCompletionResponseChoicesInnerDecoder) 
        |> maybeDecode "usage" createCompletionResponseUsageDecoder Nothing


createChatCompletionResponseChoicesInnerDecoder : Json.Decode.Decoder CreateChatCompletionResponseChoicesInner
createChatCompletionResponseChoicesInnerDecoder =
    Json.Decode.succeed CreateChatCompletionResponseChoicesInner
        |> maybeDecode "index" Json.Decode.int Nothing
        |> maybeDecode "message" chatCompletionResponseMessageDecoder Nothing
        |> maybeDecode "finish_reason" createChatCompletionResponseChoicesInnerFinishReasonDecoder Nothing


createChatCompletionResponseChoicesInnerFinishReasonDecoder : Json.Decode.Decoder CreateChatCompletionResponseChoicesInnerFinishReason
createChatCompletionResponseChoicesInnerFinishReasonDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "stop" ->
                        Json.Decode.succeed CreateChatCompletionResponseChoicesInnerFinishReasonStop

                    "length" ->
                        Json.Decode.succeed CreateChatCompletionResponseChoicesInnerFinishReasonLength

                    "function_call" ->
                        Json.Decode.succeed CreateChatCompletionResponseChoicesInnerFinishReasonFunctionCall

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createChatCompletionStreamResponseDecoder : Json.Decode.Decoder CreateChatCompletionStreamResponse
createChatCompletionStreamResponseDecoder =
    Json.Decode.succeed CreateChatCompletionStreamResponse
        |> decode "id" Json.Decode.string 
        |> decode "object" Json.Decode.string 
        |> decode "created" Json.Decode.int 
        |> decode "model" Json.Decode.string 
        |> decode "choices" (Json.Decode.list createChatCompletionStreamResponseChoicesInnerDecoder) 


createChatCompletionStreamResponseChoicesInnerDecoder : Json.Decode.Decoder CreateChatCompletionStreamResponseChoicesInner
createChatCompletionStreamResponseChoicesInnerDecoder =
    Json.Decode.succeed CreateChatCompletionStreamResponseChoicesInner
        |> maybeDecode "index" Json.Decode.int Nothing
        |> maybeDecode "delta" chatCompletionStreamResponseDeltaDecoder Nothing
        |> maybeDecode "finish_reason" createChatCompletionStreamResponseChoicesInnerFinishReasonDecoder Nothing


createChatCompletionStreamResponseChoicesInnerFinishReasonDecoder : Json.Decode.Decoder CreateChatCompletionStreamResponseChoicesInnerFinishReason
createChatCompletionStreamResponseChoicesInnerFinishReasonDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "stop" ->
                        Json.Decode.succeed CreateChatCompletionStreamResponseChoicesInnerFinishReasonStop

                    "length" ->
                        Json.Decode.succeed CreateChatCompletionStreamResponseChoicesInnerFinishReasonLength

                    "function_call" ->
                        Json.Decode.succeed CreateChatCompletionStreamResponseChoicesInnerFinishReasonFunctionCall

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createCompletionRequestDecoder : Json.Decode.Decoder CreateCompletionRequest
createCompletionRequestDecoder =
    Json.Decode.succeed CreateCompletionRequest
        |> decode "model" createCompletionRequestModelDecoder 
        |> decodeNullable "prompt" createCompletionRequestPromptDecoder 
        |> maybeDecodeNullable "suffix" Json.Decode.string Nothing
        |> maybeDecodeNullable "max_tokens" Json.Decode.int (Just 16)
        |> maybeDecodeNullable "temperature" Json.Decode.float (Just 1)
        |> maybeDecodeNullable "top_p" Json.Decode.float (Just 1)
        |> maybeDecodeNullable "n" Json.Decode.int (Just 1)
        |> maybeDecodeNullable "stream" Json.Decode.bool (Just False)
        |> maybeDecodeNullable "logprobs" Json.Decode.int Nothing
        |> maybeDecodeNullable "echo" Json.Decode.bool (Just False)
        |> maybeDecodeNullable "stop" createCompletionRequestStopDecoder Nothing
        |> maybeDecodeNullable "presence_penalty" Json.Decode.float (Just 0)
        |> maybeDecodeNullable "frequency_penalty" Json.Decode.float (Just 0)
        |> maybeDecodeNullable "best_of" Json.Decode.int (Just 1)
        |> maybeDecodeNullable "logit_bias" objectDecoder Nothing
        |> maybeDecode "user" Json.Decode.string Nothing


createCompletionRequestModelDecoder : Json.Decode.Decoder CreateCompletionRequestModel
createCompletionRequestModelDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateCompletionRequestModelString stringDecoder
        ]



createCompletionRequestPromptDecoder : Json.Decode.Decoder CreateCompletionRequestPrompt
createCompletionRequestPromptDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateCompletionRequestPromptInt intDecoder
        , Json.Decode.map CreateCompletionRequestPromptString stringDecoder
        ]



createCompletionRequestStopDecoder : Json.Decode.Decoder CreateCompletionRequestStop
createCompletionRequestStopDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateCompletionRequestStopString stringDecoder
        ]



createCompletionResponseDecoder : Json.Decode.Decoder CreateCompletionResponse
createCompletionResponseDecoder =
    Json.Decode.succeed CreateCompletionResponse
        |> decode "id" Json.Decode.string 
        |> decode "object" Json.Decode.string 
        |> decode "created" Json.Decode.int 
        |> decode "model" Json.Decode.string 
        |> decode "choices" (Json.Decode.list createCompletionResponseChoicesInnerDecoder) 
        |> maybeDecode "usage" createCompletionResponseUsageDecoder Nothing


createCompletionResponseChoicesInnerDecoder : Json.Decode.Decoder CreateCompletionResponseChoicesInner
createCompletionResponseChoicesInnerDecoder =
    Json.Decode.succeed CreateCompletionResponseChoicesInner
        |> decode "text" Json.Decode.string 
        |> decode "index" Json.Decode.int 
        |> decodeNullable "logprobs" createCompletionResponseChoicesInnerLogprobsDecoder 
        |> decode "finish_reason" createCompletionResponseChoicesInnerFinishReasonDecoder 


createCompletionResponseChoicesInnerFinishReasonDecoder : Json.Decode.Decoder CreateCompletionResponseChoicesInnerFinishReason
createCompletionResponseChoicesInnerFinishReasonDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "stop" ->
                        Json.Decode.succeed CreateCompletionResponseChoicesInnerFinishReasonStop

                    "length" ->
                        Json.Decode.succeed CreateCompletionResponseChoicesInnerFinishReasonLength

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createCompletionResponseChoicesInnerLogprobsDecoder : Json.Decode.Decoder CreateCompletionResponseChoicesInnerLogprobs
createCompletionResponseChoicesInnerLogprobsDecoder =
    Json.Decode.succeed CreateCompletionResponseChoicesInnerLogprobs
        |> maybeDecode "tokens" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "token_logprobs" (Json.Decode.list Json.Decode.float) Nothing
        |> maybeDecode "top_logprobs" (Json.Decode.list objectDecoder) Nothing
        |> maybeDecode "text_offset" (Json.Decode.list Json.Decode.int) Nothing


createCompletionResponseUsageDecoder : Json.Decode.Decoder CreateCompletionResponseUsage
createCompletionResponseUsageDecoder =
    Json.Decode.succeed CreateCompletionResponseUsage
        |> decode "prompt_tokens" Json.Decode.int 
        |> decode "completion_tokens" Json.Decode.int 
        |> decode "total_tokens" Json.Decode.int 


createEditRequestDecoder : Json.Decode.Decoder CreateEditRequest
createEditRequestDecoder =
    Json.Decode.succeed CreateEditRequest
        |> decode "model" createEditRequestModelDecoder 
        |> maybeDecodeNullable "input" Json.Decode.string (Just "")
        |> decode "instruction" Json.Decode.string 
        |> maybeDecodeNullable "n" Json.Decode.int (Just 1)
        |> maybeDecodeNullable "temperature" Json.Decode.float (Just 1)
        |> maybeDecodeNullable "top_p" Json.Decode.float (Just 1)


createEditRequestModelDecoder : Json.Decode.Decoder CreateEditRequestModel
createEditRequestModelDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateEditRequestModelString stringDecoder
        ]



createEditResponseDecoder : Json.Decode.Decoder CreateEditResponse
createEditResponseDecoder =
    Json.Decode.succeed CreateEditResponse
        |> decode "object" Json.Decode.string 
        |> decode "created" Json.Decode.int 
        |> decode "choices" (Json.Decode.list createEditResponseChoicesInnerDecoder) 
        |> decode "usage" createCompletionResponseUsageDecoder 


createEditResponseChoicesInnerDecoder : Json.Decode.Decoder CreateEditResponseChoicesInner
createEditResponseChoicesInnerDecoder =
    Json.Decode.succeed CreateEditResponseChoicesInner
        |> maybeDecode "text" Json.Decode.string Nothing
        |> maybeDecode "index" Json.Decode.int Nothing
        |> maybeDecodeNullable "logprobs" createCompletionResponseChoicesInnerLogprobsDecoder Nothing
        |> maybeDecode "finish_reason" createEditResponseChoicesInnerFinishReasonDecoder Nothing


createEditResponseChoicesInnerFinishReasonDecoder : Json.Decode.Decoder CreateEditResponseChoicesInnerFinishReason
createEditResponseChoicesInnerFinishReasonDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "stop" ->
                        Json.Decode.succeed CreateEditResponseChoicesInnerFinishReasonStop

                    "length" ->
                        Json.Decode.succeed CreateEditResponseChoicesInnerFinishReasonLength

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createEmbeddingRequestDecoder : Json.Decode.Decoder CreateEmbeddingRequest
createEmbeddingRequestDecoder =
    Json.Decode.succeed CreateEmbeddingRequest
        |> decode "model" createEmbeddingRequestModelDecoder 
        |> decode "input" createEmbeddingRequestInputDecoder 
        |> maybeDecode "user" Json.Decode.string Nothing


createEmbeddingRequestInputDecoder : Json.Decode.Decoder CreateEmbeddingRequestInput
createEmbeddingRequestInputDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateEmbeddingRequestInputInt intDecoder
        , Json.Decode.map CreateEmbeddingRequestInputString stringDecoder
        ]



createEmbeddingRequestModelDecoder : Json.Decode.Decoder CreateEmbeddingRequestModel
createEmbeddingRequestModelDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateEmbeddingRequestModelString stringDecoder
        ]



createEmbeddingResponseDecoder : Json.Decode.Decoder CreateEmbeddingResponse
createEmbeddingResponseDecoder =
    Json.Decode.succeed CreateEmbeddingResponse
        |> decode "object" Json.Decode.string 
        |> decode "model" Json.Decode.string 
        |> decode "data" (Json.Decode.list createEmbeddingResponseDataInnerDecoder) 
        |> decode "usage" createEmbeddingResponseUsageDecoder 


createEmbeddingResponseDataInnerDecoder : Json.Decode.Decoder CreateEmbeddingResponseDataInner
createEmbeddingResponseDataInnerDecoder =
    Json.Decode.succeed CreateEmbeddingResponseDataInner
        |> decode "index" Json.Decode.int 
        |> decode "object" Json.Decode.string 
        |> decode "embedding" (Json.Decode.list Json.Decode.float) 


createEmbeddingResponseUsageDecoder : Json.Decode.Decoder CreateEmbeddingResponseUsage
createEmbeddingResponseUsageDecoder =
    Json.Decode.succeed CreateEmbeddingResponseUsage
        |> decode "prompt_tokens" Json.Decode.int 
        |> decode "total_tokens" Json.Decode.int 


createFineTuneRequestDecoder : Json.Decode.Decoder CreateFineTuneRequest
createFineTuneRequestDecoder =
    Json.Decode.succeed CreateFineTuneRequest
        |> decode "training_file" Json.Decode.string 
        |> maybeDecodeNullable "validation_file" Json.Decode.string Nothing
        |> maybeDecodeNullable "model" createFineTuneRequestModelDecoder Nothing
        |> maybeDecodeNullable "n_epochs" Json.Decode.int (Just 4)
        |> maybeDecodeNullable "batch_size" Json.Decode.int Nothing
        |> maybeDecodeNullable "learning_rate_multiplier" Json.Decode.float Nothing
        |> maybeDecodeNullable "prompt_loss_weight" Json.Decode.float (Just 0.01)
        |> maybeDecodeNullable "compute_classification_metrics" Json.Decode.bool (Just False)
        |> maybeDecodeNullable "classification_n_classes" Json.Decode.int Nothing
        |> maybeDecodeNullable "classification_positive_class" Json.Decode.string Nothing
        |> maybeDecodeNullable "classification_betas" (Json.Decode.list Json.Decode.float) Nothing
        |> maybeDecodeNullable "suffix" Json.Decode.string Nothing


createFineTuneRequestModelDecoder : Json.Decode.Decoder CreateFineTuneRequestModel
createFineTuneRequestModelDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateFineTuneRequestModelString stringDecoder
        ]



createImageRequestDecoder : Json.Decode.Decoder CreateImageRequest
createImageRequestDecoder =
    Json.Decode.succeed CreateImageRequest
        |> decode "prompt" Json.Decode.string 
        |> maybeDecodeNullable "n" Json.Decode.int (Just 1)
        |> maybeDecodeNullable "size" createImageRequestSizeDecoder (Just "1024x1024")
        |> maybeDecodeNullable "response_format" createImageRequestResponseFormatDecoder (Just "url")
        |> maybeDecode "user" Json.Decode.string Nothing


createImageRequestSizeDecoder : Json.Decode.Decoder CreateImageRequestSize
createImageRequestSizeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "256x256" ->
                        Json.Decode.succeed CreateImageRequestSize256x256

                    "512x512" ->
                        Json.Decode.succeed CreateImageRequestSize512x512

                    "1024x1024" ->
                        Json.Decode.succeed CreateImageRequestSize1024x1024

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createImageRequestResponseFormatDecoder : Json.Decode.Decoder CreateImageRequestResponseFormat
createImageRequestResponseFormatDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "url" ->
                        Json.Decode.succeed CreateImageRequestResponseFormatUrl

                    "b64_json" ->
                        Json.Decode.succeed CreateImageRequestResponseFormatB64Json

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createModerationRequestDecoder : Json.Decode.Decoder CreateModerationRequest
createModerationRequestDecoder =
    Json.Decode.succeed CreateModerationRequest
        |> decode "input" createModerationRequestInputDecoder 
        |> maybeDecode "model" createModerationRequestModelDecoder Nothing


createModerationRequestInputDecoder : Json.Decode.Decoder CreateModerationRequestInput
createModerationRequestInputDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateModerationRequestInputString stringDecoder
        ]



createModerationRequestModelDecoder : Json.Decode.Decoder CreateModerationRequestModel
createModerationRequestModelDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateModerationRequestModelString stringDecoder
        ]



createModerationResponseDecoder : Json.Decode.Decoder CreateModerationResponse
createModerationResponseDecoder =
    Json.Decode.succeed CreateModerationResponse
        |> decode "id" Json.Decode.string 
        |> decode "model" Json.Decode.string 
        |> decode "results" (Json.Decode.list createModerationResponseResultsInnerDecoder) 


createModerationResponseResultsInnerDecoder : Json.Decode.Decoder CreateModerationResponseResultsInner
createModerationResponseResultsInnerDecoder =
    Json.Decode.succeed CreateModerationResponseResultsInner
        |> decode "flagged" Json.Decode.bool 
        |> decode "categories" createModerationResponseResultsInnerCategoriesDecoder 
        |> decode "category_scores" createModerationResponseResultsInnerCategoryScoresDecoder 


createModerationResponseResultsInnerCategoriesDecoder : Json.Decode.Decoder CreateModerationResponseResultsInnerCategories
createModerationResponseResultsInnerCategoriesDecoder =
    Json.Decode.succeed CreateModerationResponseResultsInnerCategories
        |> decode "hate" Json.Decode.bool 
        |> decode "hate/threatening" Json.Decode.bool 
        |> decode "self-harm" Json.Decode.bool 
        |> decode "sexual" Json.Decode.bool 
        |> decode "sexual/minors" Json.Decode.bool 
        |> decode "violence" Json.Decode.bool 
        |> decode "violence/graphic" Json.Decode.bool 


createModerationResponseResultsInnerCategoryScoresDecoder : Json.Decode.Decoder CreateModerationResponseResultsInnerCategoryScores
createModerationResponseResultsInnerCategoryScoresDecoder =
    Json.Decode.succeed CreateModerationResponseResultsInnerCategoryScores
        |> decode "hate" Json.Decode.float 
        |> decode "hate/threatening" Json.Decode.float 
        |> decode "self-harm" Json.Decode.float 
        |> decode "sexual" Json.Decode.float 
        |> decode "sexual/minors" Json.Decode.float 
        |> decode "violence" Json.Decode.float 
        |> decode "violence/graphic" Json.Decode.float 


createTranscriptionRequestModelDecoder : Json.Decode.Decoder CreateTranscriptionRequestModel
createTranscriptionRequestModelDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateTranscriptionRequestModelString stringDecoder
        ]



createTranscriptionResponseDecoder : Json.Decode.Decoder CreateTranscriptionResponse
createTranscriptionResponseDecoder =
    Json.Decode.succeed CreateTranscriptionResponse
        |> decode "text" Json.Decode.string 


createTranslationResponseDecoder : Json.Decode.Decoder CreateTranslationResponse
createTranslationResponseDecoder =
    Json.Decode.succeed CreateTranslationResponse
        |> decode "text" Json.Decode.string 


deleteFileResponseDecoder : Json.Decode.Decoder DeleteFileResponse
deleteFileResponseDecoder =
    Json.Decode.succeed DeleteFileResponse
        |> decode "id" Json.Decode.string 
        |> decode "object" Json.Decode.string 
        |> decode "deleted" Json.Decode.bool 


deleteModelResponseDecoder : Json.Decode.Decoder DeleteModelResponse
deleteModelResponseDecoder =
    Json.Decode.succeed DeleteModelResponse
        |> decode "id" Json.Decode.string 
        |> decode "object" Json.Decode.string 
        |> decode "deleted" Json.Decode.bool 


errorDecoder : Json.Decode.Decoder Error
errorDecoder =
    Json.Decode.succeed Error
        |> decode "type" Json.Decode.string 
        |> decode "message" Json.Decode.string 
        |> decodeNullable "param" Json.Decode.string 
        |> decodeNullable "code" Json.Decode.string 


errorResponseDecoder : Json.Decode.Decoder ErrorResponse
errorResponseDecoder =
    Json.Decode.succeed ErrorResponse
        |> decode "error" errorDecoder 


fineTuneDecoder : Json.Decode.Decoder FineTune
fineTuneDecoder =
    Json.Decode.succeed FineTune
        |> decode "id" Json.Decode.string 
        |> decode "object" Json.Decode.string 
        |> decode "created_at" Json.Decode.int 
        |> decode "updated_at" Json.Decode.int 
        |> decode "model" Json.Decode.string 
        |> decodeNullable "fine_tuned_model" Json.Decode.string 
        |> decode "organization_id" Json.Decode.string 
        |> decode "status" Json.Decode.string 
        |> decode "hyperparams" objectDecoder 
        |> decode "training_files" (Json.Decode.list openAIFileDecoder) 
        |> decode "validation_files" (Json.Decode.list openAIFileDecoder) 
        |> decode "result_files" (Json.Decode.list openAIFileDecoder) 
        |> maybeDecode "events" (Json.Decode.list fineTuneEventDecoder) Nothing


fineTuneEventDecoder : Json.Decode.Decoder FineTuneEvent
fineTuneEventDecoder =
    Json.Decode.succeed FineTuneEvent
        |> decode "object" Json.Decode.string 
        |> decode "created_at" Json.Decode.int 
        |> decode "level" Json.Decode.string 
        |> decode "message" Json.Decode.string 


imagesResponseDecoder : Json.Decode.Decoder ImagesResponse
imagesResponseDecoder =
    Json.Decode.succeed ImagesResponse
        |> decode "created" Json.Decode.int 
        |> decode "data" (Json.Decode.list imagesResponseDataInnerDecoder) 


imagesResponseDataInnerDecoder : Json.Decode.Decoder ImagesResponseDataInner
imagesResponseDataInnerDecoder =
    Json.Decode.succeed ImagesResponseDataInner
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecode "b64_json" Json.Decode.string Nothing


listFilesResponseDecoder : Json.Decode.Decoder ListFilesResponse
listFilesResponseDecoder =
    Json.Decode.succeed ListFilesResponse
        |> decode "object" Json.Decode.string 
        |> decode "data" (Json.Decode.list openAIFileDecoder) 


listFineTuneEventsResponseDecoder : Json.Decode.Decoder ListFineTuneEventsResponse
listFineTuneEventsResponseDecoder =
    Json.Decode.succeed ListFineTuneEventsResponse
        |> decode "object" Json.Decode.string 
        |> decode "data" (Json.Decode.list fineTuneEventDecoder) 


listFineTunesResponseDecoder : Json.Decode.Decoder ListFineTunesResponse
listFineTunesResponseDecoder =
    Json.Decode.succeed ListFineTunesResponse
        |> decode "object" Json.Decode.string 
        |> decode "data" (Json.Decode.list fineTuneDecoder) 


listModelsResponseDecoder : Json.Decode.Decoder ListModelsResponse
listModelsResponseDecoder =
    Json.Decode.succeed ListModelsResponse
        |> decode "object" Json.Decode.string 
        |> decode "data" (Json.Decode.list modelDecoder) 


modelDecoder : Json.Decode.Decoder Model
modelDecoder =
    Json.Decode.succeed Model
        |> decode "id" Json.Decode.string 
        |> decode "object" Json.Decode.string 
        |> decode "created" Json.Decode.int 
        |> decode "owned_by" Json.Decode.string 


openAIFileDecoder : Json.Decode.Decoder OpenAIFile
openAIFileDecoder =
    Json.Decode.succeed OpenAIFile
        |> decode "id" Json.Decode.string 
        |> decode "object" Json.Decode.string 
        |> decode "bytes" Json.Decode.int 
        |> decode "created_at" Json.Decode.int 
        |> decode "filename" Json.Decode.string 
        |> decode "purpose" Json.Decode.string 
        |> maybeDecode "status" Json.Decode.string Nothing
        |> maybeDecodeNullable "status_details" objectDecoder Nothing




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f