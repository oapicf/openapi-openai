{-
   OpenAI API
   The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

   The version of the OpenAPI document: 2.0.0
   Contact: blah+oapicf@cliffano.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( AssistantFileObject, AssistantFileObjectObject(..), assistantFileObjectObjectVariants
    , AssistantObject, AssistantObjectObject(..), assistantObjectObjectVariants
    , AssistantObjectToolsInner(..), AssistantObjectToolsInnerType(..), assistantObjectToolsInnerTypeVariants
    , AssistantStreamEvent(..), AssistantStreamEventEvent(..), assistantStreamEventEventVariants, AssistantStreamEventData(..), assistantStreamEventDataVariants
    , AssistantToolsCode, AssistantToolsCodeType(..), assistantToolsCodeTypeVariants
    , AssistantToolsFunction, AssistantToolsFunctionType(..), assistantToolsFunctionTypeVariants
    , AssistantToolsRetrieval, AssistantToolsRetrievalType(..), assistantToolsRetrievalTypeVariants
    , AssistantsApiNamedToolChoice, AssistantsApiNamedToolChoiceType(..), assistantsApiNamedToolChoiceTypeVariants
    , AssistantsApiResponseFormat, AssistantsApiResponseFormatType(..), assistantsApiResponseFormatTypeVariants
    , AssistantsApiResponseFormatOption(..), AssistantsApiResponseFormatOptionType(..), assistantsApiResponseFormatOptionTypeVariants
    , AssistantsApiToolChoiceOption(..), AssistantsApiToolChoiceOptionType(..), assistantsApiToolChoiceOptionTypeVariants
    , ChatCompletionFunctionCallOption
    , ChatCompletionFunctions
    , ChatCompletionMessageToolCall, ChatCompletionMessageToolCallType(..), chatCompletionMessageToolCallTypeVariants
    , ChatCompletionMessageToolCallChunk, ChatCompletionMessageToolCallChunkType(..), chatCompletionMessageToolCallChunkTypeVariants
    , ChatCompletionMessageToolCallChunkFunction
    , ChatCompletionMessageToolCallFunction
    , ChatCompletionNamedToolChoice, ChatCompletionNamedToolChoiceType(..), chatCompletionNamedToolChoiceTypeVariants
    , ChatCompletionNamedToolChoiceFunction
    , ChatCompletionRequestAssistantMessage, ChatCompletionRequestAssistantMessageRole(..), chatCompletionRequestAssistantMessageRoleVariants
    , ChatCompletionRequestAssistantMessageFunctionCall
    , ChatCompletionRequestFunctionMessage, ChatCompletionRequestFunctionMessageRole(..), chatCompletionRequestFunctionMessageRoleVariants
    , ChatCompletionRequestMessage(..), ChatCompletionRequestMessageRole(..), chatCompletionRequestMessageRoleVariants
    , ChatCompletionRequestMessageContentPart(..), ChatCompletionRequestMessageContentPartType(..), chatCompletionRequestMessageContentPartTypeVariants
    , ChatCompletionRequestMessageContentPartImage, ChatCompletionRequestMessageContentPartImageType(..), chatCompletionRequestMessageContentPartImageTypeVariants
    , ChatCompletionRequestMessageContentPartImageImageUrl, ChatCompletionRequestMessageContentPartImageImageUrlDetail(..), chatCompletionRequestMessageContentPartImageImageUrlDetailVariants
    , ChatCompletionRequestMessageContentPartText, ChatCompletionRequestMessageContentPartTextType(..), chatCompletionRequestMessageContentPartTextTypeVariants
    , ChatCompletionRequestSystemMessage, ChatCompletionRequestSystemMessageRole(..), chatCompletionRequestSystemMessageRoleVariants
    , ChatCompletionRequestToolMessage, ChatCompletionRequestToolMessageRole(..), chatCompletionRequestToolMessageRoleVariants
    , ChatCompletionRequestUserMessage, ChatCompletionRequestUserMessageRole(..), chatCompletionRequestUserMessageRoleVariants
    , ChatCompletionRequestUserMessageContent(..)
    , ChatCompletionResponseMessage, ChatCompletionResponseMessageRole(..), chatCompletionResponseMessageRoleVariants
    , ChatCompletionRole(..), chatCompletionRoleVariants
    , ChatCompletionStreamResponseDelta, ChatCompletionStreamResponseDeltaRole(..), chatCompletionStreamResponseDeltaRoleVariants
    , ChatCompletionStreamResponseDeltaFunctionCall
    , ChatCompletionTokenLogprob
    , ChatCompletionTokenLogprobTopLogprobsInner
    , ChatCompletionTool, ChatCompletionToolType(..), chatCompletionToolTypeVariants
    , ChatCompletionToolChoiceOption(..), ChatCompletionToolChoiceOptionType(..), chatCompletionToolChoiceOptionTypeVariants
    , CompletionUsage
    , CreateAssistantFileRequest
    , CreateAssistantRequest
    , CreateAssistantRequestModel
    , CreateChatCompletionFunctionResponse, CreateChatCompletionFunctionResponseObject(..), createChatCompletionFunctionResponseObjectVariants
    , CreateChatCompletionFunctionResponseChoicesInner, CreateChatCompletionFunctionResponseChoicesInnerFinishReason(..), createChatCompletionFunctionResponseChoicesInnerFinishReasonVariants
    , CreateChatCompletionRequest
    , CreateChatCompletionRequestFunctionCall(..)
    , CreateChatCompletionRequestModel
    , CreateChatCompletionRequestResponseFormat, CreateChatCompletionRequestResponseFormatType(..), createChatCompletionRequestResponseFormatTypeVariants
    , CreateChatCompletionRequestStop(..)
    , CreateChatCompletionResponse, CreateChatCompletionResponseObject(..), createChatCompletionResponseObjectVariants
    , CreateChatCompletionResponseChoicesInner, CreateChatCompletionResponseChoicesInnerFinishReason(..), createChatCompletionResponseChoicesInnerFinishReasonVariants
    , CreateChatCompletionResponseChoicesInnerLogprobs
    , CreateChatCompletionStreamResponse, CreateChatCompletionStreamResponseObject(..), createChatCompletionStreamResponseObjectVariants
    , CreateChatCompletionStreamResponseChoicesInner, CreateChatCompletionStreamResponseChoicesInnerFinishReason(..), createChatCompletionStreamResponseChoicesInnerFinishReasonVariants
    , CreateCompletionRequest
    , CreateCompletionRequestModel
    , CreateCompletionRequestPrompt(..)
    , CreateCompletionRequestStop(..)
    , CreateCompletionResponse, CreateCompletionResponseObject(..), createCompletionResponseObjectVariants
    , CreateCompletionResponseChoicesInner, CreateCompletionResponseChoicesInnerFinishReason(..), createCompletionResponseChoicesInnerFinishReasonVariants
    , CreateCompletionResponseChoicesInnerLogprobs
    , CreateEmbeddingRequest, CreateEmbeddingRequestEncodingFormat(..), createEmbeddingRequestEncodingFormatVariants
    , CreateEmbeddingRequestInput(..)
    , CreateEmbeddingRequestModel
    , CreateEmbeddingResponse, CreateEmbeddingResponseObject(..), createEmbeddingResponseObjectVariants
    , CreateEmbeddingResponseUsage
    , CreateFineTuningJobRequest
    , CreateFineTuningJobRequestHyperparameters
    , CreateFineTuningJobRequestHyperparametersBatchSize(..)
    , CreateFineTuningJobRequestHyperparametersLearningRateMultiplier(..)
    , CreateFineTuningJobRequestHyperparametersNEpochs(..)
    , CreateFineTuningJobRequestIntegrationsInner
    , CreateFineTuningJobRequestIntegrationsInnerType(..)
    , CreateFineTuningJobRequestIntegrationsInnerWandb
    , CreateFineTuningJobRequestModel
    , CreateImageEditRequestModel
    , CreateImageRequest, CreateImageRequestQuality(..), createImageRequestQualityVariants, CreateImageRequestResponseFormat(..), createImageRequestResponseFormatVariants, CreateImageRequestSize(..), createImageRequestSizeVariants, CreateImageRequestStyle(..), createImageRequestStyleVariants
    , CreateImageRequestModel
    , CreateMessageRequest, CreateMessageRequestRole(..), createMessageRequestRoleVariants
    , CreateModerationRequest
    , CreateModerationRequestInput(..)
    , CreateModerationRequestModel
    , CreateModerationResponse
    , CreateModerationResponseResultsInner
    , CreateModerationResponseResultsInnerCategories
    , CreateModerationResponseResultsInnerCategoryScores
    , CreateRunRequest
    , CreateRunRequestModel
    , CreateSpeechRequest, CreateSpeechRequestVoice(..), createSpeechRequestVoiceVariants, CreateSpeechRequestResponseFormat(..), createSpeechRequestResponseFormatVariants
    , CreateSpeechRequestModel
    , CreateThreadAndRunRequest
    , CreateThreadAndRunRequestToolsInner(..), CreateThreadAndRunRequestToolsInnerType(..), createThreadAndRunRequestToolsInnerTypeVariants
    , CreateThreadRequest
    , CreateTranscription200Response(..)
    , CreateTranscriptionRequestModel
    , CreateTranscriptionResponseJson
    , CreateTranscriptionResponseVerboseJson
    , CreateTranslation200Response(..)
    , CreateTranslationResponseJson
    , CreateTranslationResponseVerboseJson
    , DeleteAssistantFileResponse, DeleteAssistantFileResponseObject(..), deleteAssistantFileResponseObjectVariants
    , DeleteAssistantResponse, DeleteAssistantResponseObject(..), deleteAssistantResponseObjectVariants
    , DeleteFileResponse, DeleteFileResponseObject(..), deleteFileResponseObjectVariants
    , DeleteMessageResponse, DeleteMessageResponseObject(..), deleteMessageResponseObjectVariants
    , DeleteModelResponse
    , DeleteThreadResponse, DeleteThreadResponseObject(..), deleteThreadResponseObjectVariants
    , DoneEvent, DoneEventEvent(..), doneEventEventVariants, DoneEventData(..), doneEventDataVariants
    , Embedding, EmbeddingObject(..), embeddingObjectVariants
    , Error
    , ErrorEvent, ErrorEventEvent(..), errorEventEventVariants
    , ErrorResponse
    , FineTuningIntegration, FineTuningIntegrationType(..), fineTuningIntegrationTypeVariants
    , FineTuningJob, FineTuningJobObject(..), fineTuningJobObjectVariants, FineTuningJobStatus(..), fineTuningJobStatusVariants
    , FineTuningJobCheckpoint, FineTuningJobCheckpointObject(..), fineTuningJobCheckpointObjectVariants
    , FineTuningJobCheckpointMetrics
    , FineTuningJobError
    , FineTuningJobEvent, FineTuningJobEventLevel(..), fineTuningJobEventLevelVariants, FineTuningJobEventObject(..), fineTuningJobEventObjectVariants
    , FineTuningJobHyperparameters
    , FineTuningJobHyperparametersNEpochs(..)
    , FineTuningJobIntegrationsInner(..), FineTuningJobIntegrationsInnerType(..), fineTuningJobIntegrationsInnerTypeVariants
    , FunctionObject
    , Image
    , ImagesResponse
    , ListAssistantFilesResponse
    , ListAssistantsResponse
    , ListFilesResponse, ListFilesResponseObject(..), listFilesResponseObjectVariants
    , ListFineTuningJobCheckpointsResponse, ListFineTuningJobCheckpointsResponseObject(..), listFineTuningJobCheckpointsResponseObjectVariants
    , ListFineTuningJobEventsResponse, ListFineTuningJobEventsResponseObject(..), listFineTuningJobEventsResponseObjectVariants
    , ListMessageFilesResponse
    , ListMessagesResponse
    , ListModelsResponse, ListModelsResponseObject(..), listModelsResponseObjectVariants
    , ListPaginatedFineTuningJobsResponse, ListPaginatedFineTuningJobsResponseObject(..), listPaginatedFineTuningJobsResponseObjectVariants
    , ListRunStepsResponse
    , ListRunsResponse
    , ListThreadsResponse
    , MessageContentImageFileObject, MessageContentImageFileObjectType(..), messageContentImageFileObjectTypeVariants
    , MessageContentImageFileObjectImageFile
    , MessageContentTextAnnotationsFileCitationObject, MessageContentTextAnnotationsFileCitationObjectType(..), messageContentTextAnnotationsFileCitationObjectTypeVariants
    , MessageContentTextAnnotationsFileCitationObjectFileCitation
    , MessageContentTextAnnotationsFilePathObject, MessageContentTextAnnotationsFilePathObjectType(..), messageContentTextAnnotationsFilePathObjectTypeVariants
    , MessageContentTextAnnotationsFilePathObjectFilePath
    , MessageContentTextObject, MessageContentTextObjectType(..), messageContentTextObjectTypeVariants
    , MessageContentTextObjectText
    , MessageContentTextObjectTextAnnotationsInner(..), MessageContentTextObjectTextAnnotationsInnerType(..), messageContentTextObjectTextAnnotationsInnerTypeVariants
    , MessageDeltaContentImageFileObject, MessageDeltaContentImageFileObjectType(..), messageDeltaContentImageFileObjectTypeVariants
    , MessageDeltaContentImageFileObjectImageFile
    , MessageDeltaContentTextAnnotationsFileCitationObject, MessageDeltaContentTextAnnotationsFileCitationObjectType(..), messageDeltaContentTextAnnotationsFileCitationObjectTypeVariants
    , MessageDeltaContentTextAnnotationsFileCitationObjectFileCitation
    , MessageDeltaContentTextAnnotationsFilePathObject, MessageDeltaContentTextAnnotationsFilePathObjectType(..), messageDeltaContentTextAnnotationsFilePathObjectTypeVariants
    , MessageDeltaContentTextAnnotationsFilePathObjectFilePath
    , MessageDeltaContentTextObject, MessageDeltaContentTextObjectType(..), messageDeltaContentTextObjectTypeVariants
    , MessageDeltaContentTextObjectText
    , MessageDeltaContentTextObjectTextAnnotationsInner(..), MessageDeltaContentTextObjectTextAnnotationsInnerType(..), messageDeltaContentTextObjectTextAnnotationsInnerTypeVariants
    , MessageDeltaObject, MessageDeltaObjectObject(..), messageDeltaObjectObjectVariants
    , MessageDeltaObjectDelta, MessageDeltaObjectDeltaRole(..), messageDeltaObjectDeltaRoleVariants
    , MessageDeltaObjectDeltaContentInner(..), MessageDeltaObjectDeltaContentInnerType(..), messageDeltaObjectDeltaContentInnerTypeVariants
    , MessageFileObject, MessageFileObjectObject(..), messageFileObjectObjectVariants
    , MessageObject, MessageObjectObject(..), messageObjectObjectVariants, MessageObjectStatus(..), messageObjectStatusVariants, MessageObjectRole(..), messageObjectRoleVariants
    , MessageObjectContentInner(..), MessageObjectContentInnerType(..), messageObjectContentInnerTypeVariants
    , MessageObjectIncompleteDetails, MessageObjectIncompleteDetailsReason(..), messageObjectIncompleteDetailsReasonVariants
    , MessageStreamEvent(..), MessageStreamEventEvent(..), messageStreamEventEventVariants
    , MessageStreamEventOneOf, MessageStreamEventOneOfEvent(..), messageStreamEventOneOfEventVariants
    , MessageStreamEventOneOf1, MessageStreamEventOneOf1Event(..), messageStreamEventOneOf1EventVariants
    , MessageStreamEventOneOf2, MessageStreamEventOneOf2Event(..), messageStreamEventOneOf2EventVariants
    , MessageStreamEventOneOf3, MessageStreamEventOneOf3Event(..), messageStreamEventOneOf3EventVariants
    , MessageStreamEventOneOf4, MessageStreamEventOneOf4Event(..), messageStreamEventOneOf4EventVariants
    , Model, ModelObject(..), modelObjectVariants
    , ModifyAssistantRequest
    , ModifyMessageRequest
    , ModifyRunRequest
    , ModifyThreadRequest
    , OpenAIFile, OpenAIFileObject(..), openAIFileObjectVariants, OpenAIFilePurpose(..), openAIFilePurposeVariants, OpenAIFileStatus(..), openAIFileStatusVariants
    , RunCompletionUsage
    , RunObject, RunObjectObject(..), runObjectObjectVariants, RunObjectStatus(..), runObjectStatusVariants
    , RunObjectIncompleteDetails, RunObjectIncompleteDetailsReason(..), runObjectIncompleteDetailsReasonVariants
    , RunObjectLastError, RunObjectLastErrorCode(..), runObjectLastErrorCodeVariants
    , RunObjectRequiredAction, RunObjectRequiredActionType(..), runObjectRequiredActionTypeVariants
    , RunObjectRequiredActionSubmitToolOutputs
    , RunStepCompletionUsage
    , RunStepDeltaObject, RunStepDeltaObjectObject(..), runStepDeltaObjectObjectVariants
    , RunStepDeltaObjectDelta
    , RunStepDeltaObjectDeltaStepDetails(..), RunStepDeltaObjectDeltaStepDetailsType(..), runStepDeltaObjectDeltaStepDetailsTypeVariants
    , RunStepDeltaStepDetailsMessageCreationObject, RunStepDeltaStepDetailsMessageCreationObjectType(..), runStepDeltaStepDetailsMessageCreationObjectTypeVariants
    , RunStepDeltaStepDetailsMessageCreationObjectMessageCreation
    , RunStepDeltaStepDetailsToolCallsCodeObject, RunStepDeltaStepDetailsToolCallsCodeObjectType(..), runStepDeltaStepDetailsToolCallsCodeObjectTypeVariants
    , RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter
    , RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner(..), RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerType(..), runStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerTypeVariants
    , RunStepDeltaStepDetailsToolCallsCodeOutputImageObject, RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType(..), runStepDeltaStepDetailsToolCallsCodeOutputImageObjectTypeVariants
    , RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImage
    , RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject, RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType(..), runStepDeltaStepDetailsToolCallsCodeOutputLogsObjectTypeVariants
    , RunStepDeltaStepDetailsToolCallsFunctionObject, RunStepDeltaStepDetailsToolCallsFunctionObjectType(..), runStepDeltaStepDetailsToolCallsFunctionObjectTypeVariants
    , RunStepDeltaStepDetailsToolCallsFunctionObjectFunction
    , RunStepDeltaStepDetailsToolCallsObject, RunStepDeltaStepDetailsToolCallsObjectType(..), runStepDeltaStepDetailsToolCallsObjectTypeVariants
    , RunStepDeltaStepDetailsToolCallsObjectToolCallsInner(..), RunStepDeltaStepDetailsToolCallsObjectToolCallsInnerType(..), runStepDeltaStepDetailsToolCallsObjectToolCallsInnerTypeVariants
    , RunStepDeltaStepDetailsToolCallsRetrievalObject, RunStepDeltaStepDetailsToolCallsRetrievalObjectType(..), runStepDeltaStepDetailsToolCallsRetrievalObjectTypeVariants
    , RunStepDetailsMessageCreationObject, RunStepDetailsMessageCreationObjectType(..), runStepDetailsMessageCreationObjectTypeVariants
    , RunStepDetailsMessageCreationObjectMessageCreation
    , RunStepDetailsToolCallsCodeObject, RunStepDetailsToolCallsCodeObjectType(..), runStepDetailsToolCallsCodeObjectTypeVariants
    , RunStepDetailsToolCallsCodeObjectCodeInterpreter
    , RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner(..), RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerType(..), runStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerTypeVariants
    , RunStepDetailsToolCallsCodeOutputImageObject, RunStepDetailsToolCallsCodeOutputImageObjectType(..), runStepDetailsToolCallsCodeOutputImageObjectTypeVariants
    , RunStepDetailsToolCallsCodeOutputImageObjectImage
    , RunStepDetailsToolCallsCodeOutputLogsObject, RunStepDetailsToolCallsCodeOutputLogsObjectType(..), runStepDetailsToolCallsCodeOutputLogsObjectTypeVariants
    , RunStepDetailsToolCallsFunctionObject, RunStepDetailsToolCallsFunctionObjectType(..), runStepDetailsToolCallsFunctionObjectTypeVariants
    , RunStepDetailsToolCallsFunctionObjectFunction
    , RunStepDetailsToolCallsObject, RunStepDetailsToolCallsObjectType(..), runStepDetailsToolCallsObjectTypeVariants
    , RunStepDetailsToolCallsObjectToolCallsInner(..), RunStepDetailsToolCallsObjectToolCallsInnerType(..), runStepDetailsToolCallsObjectToolCallsInnerTypeVariants
    , RunStepDetailsToolCallsRetrievalObject, RunStepDetailsToolCallsRetrievalObjectType(..), runStepDetailsToolCallsRetrievalObjectTypeVariants
    , RunStepObject, RunStepObjectObject(..), runStepObjectObjectVariants, RunStepObjectType(..), runStepObjectTypeVariants, RunStepObjectStatus(..), runStepObjectStatusVariants
    , RunStepObjectLastError, RunStepObjectLastErrorCode(..), runStepObjectLastErrorCodeVariants
    , RunStepObjectStepDetails(..), RunStepObjectStepDetailsType(..), runStepObjectStepDetailsTypeVariants
    , RunStepStreamEvent(..), RunStepStreamEventEvent(..), runStepStreamEventEventVariants
    , RunStepStreamEventOneOf, RunStepStreamEventOneOfEvent(..), runStepStreamEventOneOfEventVariants
    , RunStepStreamEventOneOf1, RunStepStreamEventOneOf1Event(..), runStepStreamEventOneOf1EventVariants
    , RunStepStreamEventOneOf2, RunStepStreamEventOneOf2Event(..), runStepStreamEventOneOf2EventVariants
    , RunStepStreamEventOneOf3, RunStepStreamEventOneOf3Event(..), runStepStreamEventOneOf3EventVariants
    , RunStepStreamEventOneOf4, RunStepStreamEventOneOf4Event(..), runStepStreamEventOneOf4EventVariants
    , RunStepStreamEventOneOf5, RunStepStreamEventOneOf5Event(..), runStepStreamEventOneOf5EventVariants
    , RunStepStreamEventOneOf6, RunStepStreamEventOneOf6Event(..), runStepStreamEventOneOf6EventVariants
    , RunStreamEvent(..), RunStreamEventEvent(..), runStreamEventEventVariants
    , RunStreamEventOneOf, RunStreamEventOneOfEvent(..), runStreamEventOneOfEventVariants
    , RunStreamEventOneOf1, RunStreamEventOneOf1Event(..), runStreamEventOneOf1EventVariants
    , RunStreamEventOneOf2, RunStreamEventOneOf2Event(..), runStreamEventOneOf2EventVariants
    , RunStreamEventOneOf3, RunStreamEventOneOf3Event(..), runStreamEventOneOf3EventVariants
    , RunStreamEventOneOf4, RunStreamEventOneOf4Event(..), runStreamEventOneOf4EventVariants
    , RunStreamEventOneOf5, RunStreamEventOneOf5Event(..), runStreamEventOneOf5EventVariants
    , RunStreamEventOneOf6, RunStreamEventOneOf6Event(..), runStreamEventOneOf6EventVariants
    , RunStreamEventOneOf7, RunStreamEventOneOf7Event(..), runStreamEventOneOf7EventVariants
    , RunStreamEventOneOf8, RunStreamEventOneOf8Event(..), runStreamEventOneOf8EventVariants
    , RunToolCallObject, RunToolCallObjectType(..), runToolCallObjectTypeVariants
    , RunToolCallObjectFunction
    , SubmitToolOutputsRunRequest
    , SubmitToolOutputsRunRequestToolOutputsInner
    , ThreadObject, ThreadObjectObject(..), threadObjectObjectVariants
    , ThreadStreamEvent(..), ThreadStreamEventEvent(..), threadStreamEventEventVariants
    , ThreadStreamEventOneOf, ThreadStreamEventOneOfEvent(..), threadStreamEventOneOfEventVariants
    , TranscriptionSegment
    , TranscriptionWord
    , TruncationObject, TruncationObjectType(..), truncationObjectTypeVariants
    , encodeAssistantFileObject
    , encodeAssistantObject
    , encodeAssistantObjectToolsInner
    , encodeAssistantStreamEvent
    , encodeAssistantToolsCode
    , encodeAssistantToolsFunction
    , encodeAssistantToolsRetrieval
    , encodeAssistantsApiNamedToolChoice
    , encodeAssistantsApiResponseFormat
    , encodeAssistantsApiResponseFormatOption
    , encodeAssistantsApiToolChoiceOption
    , encodeChatCompletionFunctionCallOption
    , encodeChatCompletionFunctions
    , encodeChatCompletionMessageToolCall
    , encodeChatCompletionMessageToolCallChunk
    , encodeChatCompletionMessageToolCallChunkFunction
    , encodeChatCompletionMessageToolCallFunction
    , encodeChatCompletionNamedToolChoice
    , encodeChatCompletionNamedToolChoiceFunction
    , encodeChatCompletionRequestAssistantMessage
    , encodeChatCompletionRequestAssistantMessageFunctionCall
    , encodeChatCompletionRequestFunctionMessage
    , encodeChatCompletionRequestMessage
    , encodeChatCompletionRequestMessageContentPart
    , encodeChatCompletionRequestMessageContentPartImage
    , encodeChatCompletionRequestMessageContentPartImageImageUrl
    , encodeChatCompletionRequestMessageContentPartText
    , encodeChatCompletionRequestSystemMessage
    , encodeChatCompletionRequestToolMessage
    , encodeChatCompletionRequestUserMessage
    , encodeChatCompletionRequestUserMessageContent
    , encodeChatCompletionResponseMessage
    , encodeChatCompletionRole
    , encodeChatCompletionStreamResponseDelta
    , encodeChatCompletionStreamResponseDeltaFunctionCall
    , encodeChatCompletionTokenLogprob
    , encodeChatCompletionTokenLogprobTopLogprobsInner
    , encodeChatCompletionTool
    , encodeChatCompletionToolChoiceOption
    , encodeCompletionUsage
    , encodeCreateAssistantFileRequest
    , encodeCreateAssistantRequest
    , encodeCreateAssistantRequestModel
    , encodeCreateChatCompletionFunctionResponse
    , encodeCreateChatCompletionFunctionResponseChoicesInner
    , encodeCreateChatCompletionRequest
    , encodeCreateChatCompletionRequestFunctionCall
    , encodeCreateChatCompletionRequestModel
    , encodeCreateChatCompletionRequestResponseFormat
    , encodeCreateChatCompletionRequestStop
    , encodeCreateChatCompletionResponse
    , encodeCreateChatCompletionResponseChoicesInner
    , encodeCreateChatCompletionResponseChoicesInnerLogprobs
    , encodeCreateChatCompletionStreamResponse
    , encodeCreateChatCompletionStreamResponseChoicesInner
    , encodeCreateCompletionRequest
    , encodeCreateCompletionRequestModel
    , encodeCreateCompletionRequestPrompt
    , encodeCreateCompletionRequestStop
    , encodeCreateCompletionResponse
    , encodeCreateCompletionResponseChoicesInner
    , encodeCreateCompletionResponseChoicesInnerLogprobs
    , encodeCreateEmbeddingRequest
    , encodeCreateEmbeddingRequestInput
    , encodeCreateEmbeddingRequestModel
    , encodeCreateEmbeddingResponse
    , encodeCreateEmbeddingResponseUsage
    , encodeCreateFineTuningJobRequest
    , encodeCreateFineTuningJobRequestHyperparameters
    , encodeCreateFineTuningJobRequestHyperparametersBatchSize
    , encodeCreateFineTuningJobRequestHyperparametersLearningRateMultiplier
    , encodeCreateFineTuningJobRequestHyperparametersNEpochs
    , encodeCreateFineTuningJobRequestIntegrationsInner
    , encodeCreateFineTuningJobRequestIntegrationsInnerType
    , encodeCreateFineTuningJobRequestIntegrationsInnerWandb
    , encodeCreateFineTuningJobRequestModel
    , encodeCreateImageEditRequestModel
    , encodeCreateImageRequest
    , encodeCreateImageRequestModel
    , encodeCreateMessageRequest
    , encodeCreateModerationRequest
    , encodeCreateModerationRequestInput
    , encodeCreateModerationRequestModel
    , encodeCreateModerationResponse
    , encodeCreateModerationResponseResultsInner
    , encodeCreateModerationResponseResultsInnerCategories
    , encodeCreateModerationResponseResultsInnerCategoryScores
    , encodeCreateRunRequest
    , encodeCreateRunRequestModel
    , encodeCreateSpeechRequest
    , encodeCreateSpeechRequestModel
    , encodeCreateThreadAndRunRequest
    , encodeCreateThreadAndRunRequestToolsInner
    , encodeCreateThreadRequest
    , encodeCreateTranscription200Response
    , encodeCreateTranscriptionRequestModel
    , encodeCreateTranscriptionResponseJson
    , encodeCreateTranscriptionResponseVerboseJson
    , encodeCreateTranslation200Response
    , encodeCreateTranslationResponseJson
    , encodeCreateTranslationResponseVerboseJson
    , encodeDeleteAssistantFileResponse
    , encodeDeleteAssistantResponse
    , encodeDeleteFileResponse
    , encodeDeleteMessageResponse
    , encodeDeleteModelResponse
    , encodeDeleteThreadResponse
    , encodeDoneEvent
    , encodeEmbedding
    , encodeError
    , encodeErrorEvent
    , encodeErrorResponse
    , encodeFineTuningIntegration
    , encodeFineTuningJob
    , encodeFineTuningJobCheckpoint
    , encodeFineTuningJobCheckpointMetrics
    , encodeFineTuningJobError
    , encodeFineTuningJobEvent
    , encodeFineTuningJobHyperparameters
    , encodeFineTuningJobHyperparametersNEpochs
    , encodeFineTuningJobIntegrationsInner
    , encodeFunctionObject
    , encodeImage
    , encodeImagesResponse
    , encodeListAssistantFilesResponse
    , encodeListAssistantsResponse
    , encodeListFilesResponse
    , encodeListFineTuningJobCheckpointsResponse
    , encodeListFineTuningJobEventsResponse
    , encodeListMessageFilesResponse
    , encodeListMessagesResponse
    , encodeListModelsResponse
    , encodeListPaginatedFineTuningJobsResponse
    , encodeListRunStepsResponse
    , encodeListRunsResponse
    , encodeListThreadsResponse
    , encodeMessageContentImageFileObject
    , encodeMessageContentImageFileObjectImageFile
    , encodeMessageContentTextAnnotationsFileCitationObject
    , encodeMessageContentTextAnnotationsFileCitationObjectFileCitation
    , encodeMessageContentTextAnnotationsFilePathObject
    , encodeMessageContentTextAnnotationsFilePathObjectFilePath
    , encodeMessageContentTextObject
    , encodeMessageContentTextObjectText
    , encodeMessageContentTextObjectTextAnnotationsInner
    , encodeMessageDeltaContentImageFileObject
    , encodeMessageDeltaContentImageFileObjectImageFile
    , encodeMessageDeltaContentTextAnnotationsFileCitationObject
    , encodeMessageDeltaContentTextAnnotationsFileCitationObjectFileCitation
    , encodeMessageDeltaContentTextAnnotationsFilePathObject
    , encodeMessageDeltaContentTextAnnotationsFilePathObjectFilePath
    , encodeMessageDeltaContentTextObject
    , encodeMessageDeltaContentTextObjectText
    , encodeMessageDeltaContentTextObjectTextAnnotationsInner
    , encodeMessageDeltaObject
    , encodeMessageDeltaObjectDelta
    , encodeMessageDeltaObjectDeltaContentInner
    , encodeMessageFileObject
    , encodeMessageObject
    , encodeMessageObjectContentInner
    , encodeMessageObjectIncompleteDetails
    , encodeMessageStreamEvent
    , encodeMessageStreamEventOneOf
    , encodeMessageStreamEventOneOf1
    , encodeMessageStreamEventOneOf2
    , encodeMessageStreamEventOneOf3
    , encodeMessageStreamEventOneOf4
    , encodeModel
    , encodeModifyAssistantRequest
    , encodeModifyMessageRequest
    , encodeModifyRunRequest
    , encodeModifyThreadRequest
    , encodeOpenAIFile
    , encodeRunCompletionUsage
    , encodeRunObject
    , encodeRunObjectIncompleteDetails
    , encodeRunObjectLastError
    , encodeRunObjectRequiredAction
    , encodeRunObjectRequiredActionSubmitToolOutputs
    , encodeRunStepCompletionUsage
    , encodeRunStepDeltaObject
    , encodeRunStepDeltaObjectDelta
    , encodeRunStepDeltaObjectDeltaStepDetails
    , encodeRunStepDeltaStepDetailsMessageCreationObject
    , encodeRunStepDeltaStepDetailsMessageCreationObjectMessageCreation
    , encodeRunStepDeltaStepDetailsToolCallsCodeObject
    , encodeRunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter
    , encodeRunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner
    , encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObject
    , encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImage
    , encodeRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject
    , encodeRunStepDeltaStepDetailsToolCallsFunctionObject
    , encodeRunStepDeltaStepDetailsToolCallsFunctionObjectFunction
    , encodeRunStepDeltaStepDetailsToolCallsObject
    , encodeRunStepDeltaStepDetailsToolCallsObjectToolCallsInner
    , encodeRunStepDeltaStepDetailsToolCallsRetrievalObject
    , encodeRunStepDetailsMessageCreationObject
    , encodeRunStepDetailsMessageCreationObjectMessageCreation
    , encodeRunStepDetailsToolCallsCodeObject
    , encodeRunStepDetailsToolCallsCodeObjectCodeInterpreter
    , encodeRunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner
    , encodeRunStepDetailsToolCallsCodeOutputImageObject
    , encodeRunStepDetailsToolCallsCodeOutputImageObjectImage
    , encodeRunStepDetailsToolCallsCodeOutputLogsObject
    , encodeRunStepDetailsToolCallsFunctionObject
    , encodeRunStepDetailsToolCallsFunctionObjectFunction
    , encodeRunStepDetailsToolCallsObject
    , encodeRunStepDetailsToolCallsObjectToolCallsInner
    , encodeRunStepDetailsToolCallsRetrievalObject
    , encodeRunStepObject
    , encodeRunStepObjectLastError
    , encodeRunStepObjectStepDetails
    , encodeRunStepStreamEvent
    , encodeRunStepStreamEventOneOf
    , encodeRunStepStreamEventOneOf1
    , encodeRunStepStreamEventOneOf2
    , encodeRunStepStreamEventOneOf3
    , encodeRunStepStreamEventOneOf4
    , encodeRunStepStreamEventOneOf5
    , encodeRunStepStreamEventOneOf6
    , encodeRunStreamEvent
    , encodeRunStreamEventOneOf
    , encodeRunStreamEventOneOf1
    , encodeRunStreamEventOneOf2
    , encodeRunStreamEventOneOf3
    , encodeRunStreamEventOneOf4
    , encodeRunStreamEventOneOf5
    , encodeRunStreamEventOneOf6
    , encodeRunStreamEventOneOf7
    , encodeRunStreamEventOneOf8
    , encodeRunToolCallObject
    , encodeRunToolCallObjectFunction
    , encodeSubmitToolOutputsRunRequest
    , encodeSubmitToolOutputsRunRequestToolOutputsInner
    , encodeThreadObject
    , encodeThreadStreamEvent
    , encodeThreadStreamEventOneOf
    , encodeTranscriptionSegment
    , encodeTranscriptionWord
    , encodeTruncationObject
    , stringFromChatCompletionRole
    , assistantFileObjectDecoder
    , assistantObjectDecoder
    , assistantObjectToolsInnerDecoder
    , assistantStreamEventDecoder
    , assistantToolsCodeDecoder
    , assistantToolsFunctionDecoder
    , assistantToolsRetrievalDecoder
    , assistantsApiNamedToolChoiceDecoder
    , assistantsApiResponseFormatDecoder
    , assistantsApiResponseFormatOptionDecoder
    , assistantsApiToolChoiceOptionDecoder
    , chatCompletionFunctionCallOptionDecoder
    , chatCompletionFunctionsDecoder
    , chatCompletionMessageToolCallDecoder
    , chatCompletionMessageToolCallChunkDecoder
    , chatCompletionMessageToolCallChunkFunctionDecoder
    , chatCompletionMessageToolCallFunctionDecoder
    , chatCompletionNamedToolChoiceDecoder
    , chatCompletionNamedToolChoiceFunctionDecoder
    , chatCompletionRequestAssistantMessageDecoder
    , chatCompletionRequestAssistantMessageFunctionCallDecoder
    , chatCompletionRequestFunctionMessageDecoder
    , chatCompletionRequestMessageDecoder
    , chatCompletionRequestMessageContentPartDecoder
    , chatCompletionRequestMessageContentPartImageDecoder
    , chatCompletionRequestMessageContentPartImageImageUrlDecoder
    , chatCompletionRequestMessageContentPartTextDecoder
    , chatCompletionRequestSystemMessageDecoder
    , chatCompletionRequestToolMessageDecoder
    , chatCompletionRequestUserMessageDecoder
    , chatCompletionRequestUserMessageContentDecoder
    , chatCompletionResponseMessageDecoder
    , chatCompletionRoleDecoder
    , chatCompletionStreamResponseDeltaDecoder
    , chatCompletionStreamResponseDeltaFunctionCallDecoder
    , chatCompletionTokenLogprobDecoder
    , chatCompletionTokenLogprobTopLogprobsInnerDecoder
    , chatCompletionToolDecoder
    , chatCompletionToolChoiceOptionDecoder
    , completionUsageDecoder
    , createAssistantFileRequestDecoder
    , createAssistantRequestDecoder
    , createAssistantRequestModelDecoder
    , createChatCompletionFunctionResponseDecoder
    , createChatCompletionFunctionResponseChoicesInnerDecoder
    , createChatCompletionRequestDecoder
    , createChatCompletionRequestFunctionCallDecoder
    , createChatCompletionRequestModelDecoder
    , createChatCompletionRequestResponseFormatDecoder
    , createChatCompletionRequestStopDecoder
    , createChatCompletionResponseDecoder
    , createChatCompletionResponseChoicesInnerDecoder
    , createChatCompletionResponseChoicesInnerLogprobsDecoder
    , createChatCompletionStreamResponseDecoder
    , createChatCompletionStreamResponseChoicesInnerDecoder
    , createCompletionRequestDecoder
    , createCompletionRequestModelDecoder
    , createCompletionRequestPromptDecoder
    , createCompletionRequestStopDecoder
    , createCompletionResponseDecoder
    , createCompletionResponseChoicesInnerDecoder
    , createCompletionResponseChoicesInnerLogprobsDecoder
    , createEmbeddingRequestDecoder
    , createEmbeddingRequestInputDecoder
    , createEmbeddingRequestModelDecoder
    , createEmbeddingResponseDecoder
    , createEmbeddingResponseUsageDecoder
    , createFineTuningJobRequestDecoder
    , createFineTuningJobRequestHyperparametersDecoder
    , createFineTuningJobRequestHyperparametersBatchSizeDecoder
    , createFineTuningJobRequestHyperparametersLearningRateMultiplierDecoder
    , createFineTuningJobRequestHyperparametersNEpochsDecoder
    , createFineTuningJobRequestIntegrationsInnerDecoder
    , createFineTuningJobRequestIntegrationsInnerTypeDecoder
    , createFineTuningJobRequestIntegrationsInnerWandbDecoder
    , createFineTuningJobRequestModelDecoder
    , createImageEditRequestModelDecoder
    , createImageRequestDecoder
    , createImageRequestModelDecoder
    , createMessageRequestDecoder
    , createModerationRequestDecoder
    , createModerationRequestInputDecoder
    , createModerationRequestModelDecoder
    , createModerationResponseDecoder
    , createModerationResponseResultsInnerDecoder
    , createModerationResponseResultsInnerCategoriesDecoder
    , createModerationResponseResultsInnerCategoryScoresDecoder
    , createRunRequestDecoder
    , createRunRequestModelDecoder
    , createSpeechRequestDecoder
    , createSpeechRequestModelDecoder
    , createThreadAndRunRequestDecoder
    , createThreadAndRunRequestToolsInnerDecoder
    , createThreadRequestDecoder
    , createTranscription200ResponseDecoder
    , createTranscriptionRequestModelDecoder
    , createTranscriptionResponseJsonDecoder
    , createTranscriptionResponseVerboseJsonDecoder
    , createTranslation200ResponseDecoder
    , createTranslationResponseJsonDecoder
    , createTranslationResponseVerboseJsonDecoder
    , deleteAssistantFileResponseDecoder
    , deleteAssistantResponseDecoder
    , deleteFileResponseDecoder
    , deleteMessageResponseDecoder
    , deleteModelResponseDecoder
    , deleteThreadResponseDecoder
    , doneEventDecoder
    , embeddingDecoder
    , errorDecoder
    , errorEventDecoder
    , errorResponseDecoder
    , fineTuningIntegrationDecoder
    , fineTuningJobDecoder
    , fineTuningJobCheckpointDecoder
    , fineTuningJobCheckpointMetricsDecoder
    , fineTuningJobErrorDecoder
    , fineTuningJobEventDecoder
    , fineTuningJobHyperparametersDecoder
    , fineTuningJobHyperparametersNEpochsDecoder
    , fineTuningJobIntegrationsInnerDecoder
    , functionObjectDecoder
    , imageDecoder
    , imagesResponseDecoder
    , listAssistantFilesResponseDecoder
    , listAssistantsResponseDecoder
    , listFilesResponseDecoder
    , listFineTuningJobCheckpointsResponseDecoder
    , listFineTuningJobEventsResponseDecoder
    , listMessageFilesResponseDecoder
    , listMessagesResponseDecoder
    , listModelsResponseDecoder
    , listPaginatedFineTuningJobsResponseDecoder
    , listRunStepsResponseDecoder
    , listRunsResponseDecoder
    , listThreadsResponseDecoder
    , messageContentImageFileObjectDecoder
    , messageContentImageFileObjectImageFileDecoder
    , messageContentTextAnnotationsFileCitationObjectDecoder
    , messageContentTextAnnotationsFileCitationObjectFileCitationDecoder
    , messageContentTextAnnotationsFilePathObjectDecoder
    , messageContentTextAnnotationsFilePathObjectFilePathDecoder
    , messageContentTextObjectDecoder
    , messageContentTextObjectTextDecoder
    , messageContentTextObjectTextAnnotationsInnerDecoder
    , messageDeltaContentImageFileObjectDecoder
    , messageDeltaContentImageFileObjectImageFileDecoder
    , messageDeltaContentTextAnnotationsFileCitationObjectDecoder
    , messageDeltaContentTextAnnotationsFileCitationObjectFileCitationDecoder
    , messageDeltaContentTextAnnotationsFilePathObjectDecoder
    , messageDeltaContentTextAnnotationsFilePathObjectFilePathDecoder
    , messageDeltaContentTextObjectDecoder
    , messageDeltaContentTextObjectTextDecoder
    , messageDeltaContentTextObjectTextAnnotationsInnerDecoder
    , messageDeltaObjectDecoder
    , messageDeltaObjectDeltaDecoder
    , messageDeltaObjectDeltaContentInnerDecoder
    , messageFileObjectDecoder
    , messageObjectDecoder
    , messageObjectContentInnerDecoder
    , messageObjectIncompleteDetailsDecoder
    , messageStreamEventDecoder
    , messageStreamEventOneOfDecoder
    , messageStreamEventOneOf1Decoder
    , messageStreamEventOneOf2Decoder
    , messageStreamEventOneOf3Decoder
    , messageStreamEventOneOf4Decoder
    , modelDecoder
    , modifyAssistantRequestDecoder
    , modifyMessageRequestDecoder
    , modifyRunRequestDecoder
    , modifyThreadRequestDecoder
    , openAIFileDecoder
    , runCompletionUsageDecoder
    , runObjectDecoder
    , runObjectIncompleteDetailsDecoder
    , runObjectLastErrorDecoder
    , runObjectRequiredActionDecoder
    , runObjectRequiredActionSubmitToolOutputsDecoder
    , runStepCompletionUsageDecoder
    , runStepDeltaObjectDecoder
    , runStepDeltaObjectDeltaDecoder
    , runStepDeltaObjectDeltaStepDetailsDecoder
    , runStepDeltaStepDetailsMessageCreationObjectDecoder
    , runStepDeltaStepDetailsMessageCreationObjectMessageCreationDecoder
    , runStepDeltaStepDetailsToolCallsCodeObjectDecoder
    , runStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterDecoder
    , runStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerDecoder
    , runStepDeltaStepDetailsToolCallsCodeOutputImageObjectDecoder
    , runStepDeltaStepDetailsToolCallsCodeOutputImageObjectImageDecoder
    , runStepDeltaStepDetailsToolCallsCodeOutputLogsObjectDecoder
    , runStepDeltaStepDetailsToolCallsFunctionObjectDecoder
    , runStepDeltaStepDetailsToolCallsFunctionObjectFunctionDecoder
    , runStepDeltaStepDetailsToolCallsObjectDecoder
    , runStepDeltaStepDetailsToolCallsObjectToolCallsInnerDecoder
    , runStepDeltaStepDetailsToolCallsRetrievalObjectDecoder
    , runStepDetailsMessageCreationObjectDecoder
    , runStepDetailsMessageCreationObjectMessageCreationDecoder
    , runStepDetailsToolCallsCodeObjectDecoder
    , runStepDetailsToolCallsCodeObjectCodeInterpreterDecoder
    , runStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerDecoder
    , runStepDetailsToolCallsCodeOutputImageObjectDecoder
    , runStepDetailsToolCallsCodeOutputImageObjectImageDecoder
    , runStepDetailsToolCallsCodeOutputLogsObjectDecoder
    , runStepDetailsToolCallsFunctionObjectDecoder
    , runStepDetailsToolCallsFunctionObjectFunctionDecoder
    , runStepDetailsToolCallsObjectDecoder
    , runStepDetailsToolCallsObjectToolCallsInnerDecoder
    , runStepDetailsToolCallsRetrievalObjectDecoder
    , runStepObjectDecoder
    , runStepObjectLastErrorDecoder
    , runStepObjectStepDetailsDecoder
    , runStepStreamEventDecoder
    , runStepStreamEventOneOfDecoder
    , runStepStreamEventOneOf1Decoder
    , runStepStreamEventOneOf2Decoder
    , runStepStreamEventOneOf3Decoder
    , runStepStreamEventOneOf4Decoder
    , runStepStreamEventOneOf5Decoder
    , runStepStreamEventOneOf6Decoder
    , runStreamEventDecoder
    , runStreamEventOneOfDecoder
    , runStreamEventOneOf1Decoder
    , runStreamEventOneOf2Decoder
    , runStreamEventOneOf3Decoder
    , runStreamEventOneOf4Decoder
    , runStreamEventOneOf5Decoder
    , runStreamEventOneOf6Decoder
    , runStreamEventOneOf7Decoder
    , runStreamEventOneOf8Decoder
    , runToolCallObjectDecoder
    , runToolCallObjectFunctionDecoder
    , submitToolOutputsRunRequestDecoder
    , submitToolOutputsRunRequestToolOutputsInnerDecoder
    , threadObjectDecoder
    , threadStreamEventDecoder
    , threadStreamEventOneOfDecoder
    , transcriptionSegmentDecoder
    , transcriptionWordDecoder
    , truncationObjectDecoder
    )

import Api
import Dict
import Json.Decode
import Json.Encode


-- MODEL


{-| A list of [Files](/docs/api-reference/files) attached to an `assistant`.
-}
type alias AssistantFileObject =
    { id : String
    , object : AssistantFileObjectObject
    , createdAt : Int
    , assistantId : String
    }


type AssistantFileObjectObject
    = AssistantFileObjectObjectAssistantFile


assistantFileObjectObjectVariants : List AssistantFileObjectObject
assistantFileObjectObjectVariants =
    [ AssistantFileObjectObjectAssistantFile
    ]


{-| Represents an `assistant` that can call the model and use tools.
-}
type alias AssistantObject =
    { id : String
    , object : AssistantObjectObject
    , createdAt : Int
    , name : Maybe String
    , description : Maybe String
    , model : String
    , instructions : Maybe String
    , tools : List AssistantObjectToolsInner
    , fileIds : List String
    , metadata : Maybe Object
    }


type AssistantObjectObject
    = AssistantObjectObjectAssistant


assistantObjectObjectVariants : List AssistantObjectObject
assistantObjectObjectVariants =
    [ AssistantObjectObjectAssistant
    ]


type AssistantObjectToolsInner
    = AssistantObjectToolsInnerAssistantToolsCode AssistantToolsCode
    | AssistantObjectToolsInnerAssistantToolsFunction AssistantToolsFunction
    | AssistantObjectToolsInnerAssistantToolsRetrieval AssistantToolsRetrieval



{-| Represents an event emitted when streaming a Run.  Each event in a server-sent events stream has an `event` and `data` property:  ``` event: thread.created data: {\"id\": \"thread_123\", \"object\": \"thread\", ...} ```  We emit events whenever a new object is created, transitions to a new state, or is being streamed in parts (deltas). For example, we emit `thread.run.created` when a new run is created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses to create a message during a run, we emit a `thread.message.created event`, a `thread.message.in_progress` event, many `thread.message.delta` events, and finally a `thread.message.completed` event.  We may add additional events over time, so we recommend handling unknown events gracefully in your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to integrate the Assistants API with streaming. 
-}
type AssistantStreamEvent
    = AssistantStreamEventDoneEvent DoneEvent
    | AssistantStreamEventErrorEvent ErrorEvent
    | AssistantStreamEventMessageStreamEvent MessageStreamEvent
    | AssistantStreamEventRunStepStreamEvent RunStepStreamEvent
    | AssistantStreamEventRunStreamEvent RunStreamEvent
    | AssistantStreamEventThreadStreamEvent ThreadStreamEvent



type alias AssistantToolsCode =
    { type_ : AssistantToolsCodeType
    }


type AssistantToolsCodeType
    = AssistantToolsCodeTypeCodeInterpreter


assistantToolsCodeTypeVariants : List AssistantToolsCodeType
assistantToolsCodeTypeVariants =
    [ AssistantToolsCodeTypeCodeInterpreter
    ]


type alias AssistantToolsFunction =
    { type_ : AssistantToolsFunctionType
    , function : FunctionObject
    }


type AssistantToolsFunctionType
    = AssistantToolsFunctionTypeFunction


assistantToolsFunctionTypeVariants : List AssistantToolsFunctionType
assistantToolsFunctionTypeVariants =
    [ AssistantToolsFunctionTypeFunction
    ]


type alias AssistantToolsRetrieval =
    { type_ : AssistantToolsRetrievalType
    }


type AssistantToolsRetrievalType
    = AssistantToolsRetrievalTypeRetrieval


assistantToolsRetrievalTypeVariants : List AssistantToolsRetrievalType
assistantToolsRetrievalTypeVariants =
    [ AssistantToolsRetrievalTypeRetrieval
    ]


{-| Specifies a tool the model should use. Use to force the model to call a specific tool.
-}
type alias AssistantsApiNamedToolChoice =
    { type_ : AssistantsApiNamedToolChoiceType
    , function : Maybe ChatCompletionNamedToolChoiceFunction
    }


type AssistantsApiNamedToolChoiceType
    = AssistantsApiNamedToolChoiceTypeFunction
    | AssistantsApiNamedToolChoiceTypeCodeInterpreter
    | AssistantsApiNamedToolChoiceTypeRetrieval


assistantsApiNamedToolChoiceTypeVariants : List AssistantsApiNamedToolChoiceType
assistantsApiNamedToolChoiceTypeVariants =
    [ AssistantsApiNamedToolChoiceTypeFunction
    , AssistantsApiNamedToolChoiceTypeCodeInterpreter
    , AssistantsApiNamedToolChoiceTypeRetrieval
    ]


{-| An object describing the expected output of the model. If `json_object` only `function` type `tools` are allowed to be passed to the Run. If `text` the model can return text or any value needed. 
-}
type alias AssistantsApiResponseFormat =
    { type_ : Maybe AssistantsApiResponseFormatType
    }


type AssistantsApiResponseFormatType
    = AssistantsApiResponseFormatTypeText
    | AssistantsApiResponseFormatTypeJsonObject


assistantsApiResponseFormatTypeVariants : List AssistantsApiResponseFormatType
assistantsApiResponseFormatTypeVariants =
    [ AssistantsApiResponseFormatTypeText
    , AssistantsApiResponseFormatTypeJsonObject
    ]


{-| Specifies the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.  Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length. 
-}
type AssistantsApiResponseFormatOption
    = AssistantsApiResponseFormatOptionAssistantsApiResponseFormat AssistantsApiResponseFormat
    | AssistantsApiResponseFormatOptionString String



{-| Controls which (if any) tool is called by the model. `none` means the model will not call any tools and instead generates a message. `auto` is the default value and means the model can pick between generating a message or calling a tool. Specifying a particular tool like `{\"type\": \"TOOL_TYPE\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool. 
-}
type AssistantsApiToolChoiceOption
    = AssistantsApiToolChoiceOptionAssistantsApiNamedToolChoice AssistantsApiNamedToolChoice
    | AssistantsApiToolChoiceOptionString String



{-| Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function. 
-}
type alias ChatCompletionFunctionCallOption =
    { name : String
    }


type alias ChatCompletionFunctions =
    { description : Maybe String
    , name : String
    , parameters : Maybe ( Dict.Dict String Maybe AnyType )
    }


type alias ChatCompletionMessageToolCall =
    { id : String
    , type_ : ChatCompletionMessageToolCallType
    , function : ChatCompletionMessageToolCallFunction
    }


type ChatCompletionMessageToolCallType
    = ChatCompletionMessageToolCallTypeFunction


chatCompletionMessageToolCallTypeVariants : List ChatCompletionMessageToolCallType
chatCompletionMessageToolCallTypeVariants =
    [ ChatCompletionMessageToolCallTypeFunction
    ]


type alias ChatCompletionMessageToolCallChunk =
    { index : Int
    , id : Maybe String
    , type_ : Maybe ChatCompletionMessageToolCallChunkType
    , function : Maybe ChatCompletionMessageToolCallChunkFunction
    }


type ChatCompletionMessageToolCallChunkType
    = ChatCompletionMessageToolCallChunkTypeFunction


chatCompletionMessageToolCallChunkTypeVariants : List ChatCompletionMessageToolCallChunkType
chatCompletionMessageToolCallChunkTypeVariants =
    [ ChatCompletionMessageToolCallChunkTypeFunction
    ]


type alias ChatCompletionMessageToolCallChunkFunction =
    { name : Maybe String
    , arguments : Maybe String
    }


{-| The function that the model called.
-}
type alias ChatCompletionMessageToolCallFunction =
    { name : String
    , arguments : String
    }


{-| Specifies a tool the model should use. Use to force the model to call a specific function.
-}
type alias ChatCompletionNamedToolChoice =
    { type_ : ChatCompletionNamedToolChoiceType
    , function : ChatCompletionNamedToolChoiceFunction
    }


type ChatCompletionNamedToolChoiceType
    = ChatCompletionNamedToolChoiceTypeFunction


chatCompletionNamedToolChoiceTypeVariants : List ChatCompletionNamedToolChoiceType
chatCompletionNamedToolChoiceTypeVariants =
    [ ChatCompletionNamedToolChoiceTypeFunction
    ]


type alias ChatCompletionNamedToolChoiceFunction =
    { name : String
    }


type alias ChatCompletionRequestAssistantMessage =
    { content : Maybe String
    , role : ChatCompletionRequestAssistantMessageRole
    , name : Maybe String
    , toolCalls : Maybe ( List ChatCompletionMessageToolCall )
    , functionCall : Maybe ChatCompletionRequestAssistantMessageFunctionCall
    }


type ChatCompletionRequestAssistantMessageRole
    = ChatCompletionRequestAssistantMessageRoleAssistant


chatCompletionRequestAssistantMessageRoleVariants : List ChatCompletionRequestAssistantMessageRole
chatCompletionRequestAssistantMessageRoleVariants =
    [ ChatCompletionRequestAssistantMessageRoleAssistant
    ]


{-| Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
-}
type alias ChatCompletionRequestAssistantMessageFunctionCall =
    { arguments : String
    , name : String
    }


type alias ChatCompletionRequestFunctionMessage =
    { role : ChatCompletionRequestFunctionMessageRole
    , content : Maybe String
    , name : String
    }


type ChatCompletionRequestFunctionMessageRole
    = ChatCompletionRequestFunctionMessageRoleFunction


chatCompletionRequestFunctionMessageRoleVariants : List ChatCompletionRequestFunctionMessageRole
chatCompletionRequestFunctionMessageRoleVariants =
    [ ChatCompletionRequestFunctionMessageRoleFunction
    ]


type ChatCompletionRequestMessage
    = ChatCompletionRequestMessageChatCompletionRequestAssistantMessage ChatCompletionRequestAssistantMessage
    | ChatCompletionRequestMessageChatCompletionRequestFunctionMessage ChatCompletionRequestFunctionMessage
    | ChatCompletionRequestMessageChatCompletionRequestSystemMessage ChatCompletionRequestSystemMessage
    | ChatCompletionRequestMessageChatCompletionRequestToolMessage ChatCompletionRequestToolMessage
    | ChatCompletionRequestMessageChatCompletionRequestUserMessage ChatCompletionRequestUserMessage



type ChatCompletionRequestMessageContentPart
    = ChatCompletionRequestMessageContentPartChatCompletionRequestMessageContentPartImage ChatCompletionRequestMessageContentPartImage
    | ChatCompletionRequestMessageContentPartChatCompletionRequestMessageContentPartText ChatCompletionRequestMessageContentPartText



type alias ChatCompletionRequestMessageContentPartImage =
    { type_ : ChatCompletionRequestMessageContentPartImageType
    , imageUrl : ChatCompletionRequestMessageContentPartImageImageUrl
    }


type ChatCompletionRequestMessageContentPartImageType
    = ChatCompletionRequestMessageContentPartImageTypeImageUrl


chatCompletionRequestMessageContentPartImageTypeVariants : List ChatCompletionRequestMessageContentPartImageType
chatCompletionRequestMessageContentPartImageTypeVariants =
    [ ChatCompletionRequestMessageContentPartImageTypeImageUrl
    ]


type alias ChatCompletionRequestMessageContentPartImageImageUrl =
    { url : String
    , detail : Maybe ChatCompletionRequestMessageContentPartImageImageUrlDetail
    }


type ChatCompletionRequestMessageContentPartImageImageUrlDetail
    = ChatCompletionRequestMessageContentPartImageImageUrlDetailAuto
    | ChatCompletionRequestMessageContentPartImageImageUrlDetailLow
    | ChatCompletionRequestMessageContentPartImageImageUrlDetailHigh


chatCompletionRequestMessageContentPartImageImageUrlDetailVariants : List ChatCompletionRequestMessageContentPartImageImageUrlDetail
chatCompletionRequestMessageContentPartImageImageUrlDetailVariants =
    [ ChatCompletionRequestMessageContentPartImageImageUrlDetailAuto
    , ChatCompletionRequestMessageContentPartImageImageUrlDetailLow
    , ChatCompletionRequestMessageContentPartImageImageUrlDetailHigh
    ]


type alias ChatCompletionRequestMessageContentPartText =
    { type_ : ChatCompletionRequestMessageContentPartTextType
    , text : String
    }


type ChatCompletionRequestMessageContentPartTextType
    = ChatCompletionRequestMessageContentPartTextTypeText


chatCompletionRequestMessageContentPartTextTypeVariants : List ChatCompletionRequestMessageContentPartTextType
chatCompletionRequestMessageContentPartTextTypeVariants =
    [ ChatCompletionRequestMessageContentPartTextTypeText
    ]


type alias ChatCompletionRequestSystemMessage =
    { content : String
    , role : ChatCompletionRequestSystemMessageRole
    , name : Maybe String
    }


type ChatCompletionRequestSystemMessageRole
    = ChatCompletionRequestSystemMessageRoleSystem


chatCompletionRequestSystemMessageRoleVariants : List ChatCompletionRequestSystemMessageRole
chatCompletionRequestSystemMessageRoleVariants =
    [ ChatCompletionRequestSystemMessageRoleSystem
    ]


type alias ChatCompletionRequestToolMessage =
    { role : ChatCompletionRequestToolMessageRole
    , content : String
    , toolCallId : String
    }


type ChatCompletionRequestToolMessageRole
    = ChatCompletionRequestToolMessageRoleTool


chatCompletionRequestToolMessageRoleVariants : List ChatCompletionRequestToolMessageRole
chatCompletionRequestToolMessageRoleVariants =
    [ ChatCompletionRequestToolMessageRoleTool
    ]


type alias ChatCompletionRequestUserMessage =
    { content : ChatCompletionRequestUserMessageContent
    , role : ChatCompletionRequestUserMessageRole
    , name : Maybe String
    }


type ChatCompletionRequestUserMessageRole
    = ChatCompletionRequestUserMessageRoleUser


chatCompletionRequestUserMessageRoleVariants : List ChatCompletionRequestUserMessageRole
chatCompletionRequestUserMessageRoleVariants =
    [ ChatCompletionRequestUserMessageRoleUser
    ]


{-| The contents of the user message. 
-}
type ChatCompletionRequestUserMessageContent
    = ChatCompletionRequestUserMessageContentChatCompletionRequestMessageContentPart ChatCompletionRequestMessageContentPart
    | ChatCompletionRequestUserMessageContentString String



{-| A chat completion message generated by the model.
-}
type alias ChatCompletionResponseMessage =
    { content : Maybe String
    , toolCalls : Maybe ( List ChatCompletionMessageToolCall )
    , role : ChatCompletionResponseMessageRole
    , functionCall : Maybe ChatCompletionRequestAssistantMessageFunctionCall
    }


type ChatCompletionResponseMessageRole
    = ChatCompletionResponseMessageRoleAssistant


chatCompletionResponseMessageRoleVariants : List ChatCompletionResponseMessageRole
chatCompletionResponseMessageRoleVariants =
    [ ChatCompletionResponseMessageRoleAssistant
    ]


{-| The role of the author of a message
-}
type ChatCompletionRole
    = ChatCompletionRoleSystem
    | ChatCompletionRoleUser
    | ChatCompletionRoleAssistant
    | ChatCompletionRoleTool
    | ChatCompletionRoleFunction


chatCompletionRoleVariants : List ChatCompletionRole
chatCompletionRoleVariants =
    [ ChatCompletionRoleSystem
    , ChatCompletionRoleUser
    , ChatCompletionRoleAssistant
    , ChatCompletionRoleTool
    , ChatCompletionRoleFunction
    ]


{-| A chat completion delta generated by streamed model responses.
-}
type alias ChatCompletionStreamResponseDelta =
    { content : Maybe String
    , functionCall : Maybe ChatCompletionStreamResponseDeltaFunctionCall
    , toolCalls : Maybe ( List ChatCompletionMessageToolCallChunk )
    , role : Maybe ChatCompletionStreamResponseDeltaRole
    }


type ChatCompletionStreamResponseDeltaRole
    = ChatCompletionStreamResponseDeltaRoleSystem
    | ChatCompletionStreamResponseDeltaRoleUser
    | ChatCompletionStreamResponseDeltaRoleAssistant
    | ChatCompletionStreamResponseDeltaRoleTool


chatCompletionStreamResponseDeltaRoleVariants : List ChatCompletionStreamResponseDeltaRole
chatCompletionStreamResponseDeltaRoleVariants =
    [ ChatCompletionStreamResponseDeltaRoleSystem
    , ChatCompletionStreamResponseDeltaRoleUser
    , ChatCompletionStreamResponseDeltaRoleAssistant
    , ChatCompletionStreamResponseDeltaRoleTool
    ]


{-| Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
-}
type alias ChatCompletionStreamResponseDeltaFunctionCall =
    { arguments : Maybe String
    , name : Maybe String
    }


type alias ChatCompletionTokenLogprob =
    { token : String
    , logprob : Float
    , bytes : Maybe ( List Int )
    , topLogprobs : List ChatCompletionTokenLogprobTopLogprobsInner
    }


type alias ChatCompletionTokenLogprobTopLogprobsInner =
    { token : String
    , logprob : Float
    , bytes : Maybe ( List Int )
    }


type alias ChatCompletionTool =
    { type_ : ChatCompletionToolType
    , function : FunctionObject
    }


type ChatCompletionToolType
    = ChatCompletionToolTypeFunction


chatCompletionToolTypeVariants : List ChatCompletionToolType
chatCompletionToolTypeVariants =
    [ ChatCompletionToolTypeFunction
    ]


{-| Controls which (if any) function is called by the model. `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function. Specifying a particular function via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that function.  `none` is the default when no functions are present. `auto` is the default if functions are present. 
-}
type ChatCompletionToolChoiceOption
    = ChatCompletionToolChoiceOptionChatCompletionNamedToolChoice ChatCompletionNamedToolChoice
    | ChatCompletionToolChoiceOptionString String



{-| Usage statistics for the completion request.
-}
type alias CompletionUsage =
    { completionTokens : Int
    , promptTokens : Int
    , totalTokens : Int
    }


type alias CreateAssistantFileRequest =
    { fileId : String
    }


type alias CreateAssistantRequest =
    { model : CreateAssistantRequestModel
    , name : Maybe String
    , description : Maybe String
    , instructions : Maybe String
    , tools : Maybe ( List AssistantObjectToolsInner )
    , fileIds : Maybe ( List String )
    , metadata : Maybe Object
    }


{-| ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
-}
type alias CreateAssistantRequestModel =
    { }


{-| Represents a chat completion response returned by model, based on the provided input.
-}
type alias CreateChatCompletionFunctionResponse =
    { id : String
    , choices : List CreateChatCompletionFunctionResponseChoicesInner
    , created : Int
    , model : String
    , systemFingerprint : Maybe String
    , object : CreateChatCompletionFunctionResponseObject
    , usage : Maybe CompletionUsage
    }


type CreateChatCompletionFunctionResponseObject
    = CreateChatCompletionFunctionResponseObjectChatCompletion


createChatCompletionFunctionResponseObjectVariants : List CreateChatCompletionFunctionResponseObject
createChatCompletionFunctionResponseObjectVariants =
    [ CreateChatCompletionFunctionResponseObjectChatCompletion
    ]


type alias CreateChatCompletionFunctionResponseChoicesInner =
    { finishReason : CreateChatCompletionFunctionResponseChoicesInnerFinishReason
    , index : Int
    , message : ChatCompletionResponseMessage
    }


type CreateChatCompletionFunctionResponseChoicesInnerFinishReason
    = CreateChatCompletionFunctionResponseChoicesInnerFinishReasonStop
    | CreateChatCompletionFunctionResponseChoicesInnerFinishReasonLength
    | CreateChatCompletionFunctionResponseChoicesInnerFinishReasonFunctionCall
    | CreateChatCompletionFunctionResponseChoicesInnerFinishReasonContentFilter


createChatCompletionFunctionResponseChoicesInnerFinishReasonVariants : List CreateChatCompletionFunctionResponseChoicesInnerFinishReason
createChatCompletionFunctionResponseChoicesInnerFinishReasonVariants =
    [ CreateChatCompletionFunctionResponseChoicesInnerFinishReasonStop
    , CreateChatCompletionFunctionResponseChoicesInnerFinishReasonLength
    , CreateChatCompletionFunctionResponseChoicesInnerFinishReasonFunctionCall
    , CreateChatCompletionFunctionResponseChoicesInnerFinishReasonContentFilter
    ]


type alias CreateChatCompletionRequest =
    { messages : List ChatCompletionRequestMessage
    , model : CreateChatCompletionRequestModel
    , frequencyPenalty : Maybe Float
    , logitBias : Maybe ( Dict.Dict String Int )
    , logprobs : Maybe Bool
    , topLogprobs : Maybe Int
    , maxTokens : Maybe Int
    , n : Maybe Int
    , presencePenalty : Maybe Float
    , responseFormat : Maybe CreateChatCompletionRequestResponseFormat
    , seed : Maybe Int
    , stop : Maybe CreateChatCompletionRequestStop
    , stream : Maybe Bool
    , temperature : Maybe Float
    , topP : Maybe Float
    , tools : Maybe ( List ChatCompletionTool )
    , toolChoice : Maybe ChatCompletionToolChoiceOption
    , user : Maybe String
    , functionCall : Maybe CreateChatCompletionRequestFunctionCall
    , functions : Maybe ( List ChatCompletionFunctions )
    }


{-| Deprecated in favor of `tool_choice`.  Controls which (if any) function is called by the model. `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function. Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.  `none` is the default when no functions are present. `auto` is the default if functions are present. 
-}
type CreateChatCompletionRequestFunctionCall
    = CreateChatCompletionRequestFunctionCallChatCompletionFunctionCallOption ChatCompletionFunctionCallOption
    | CreateChatCompletionRequestFunctionCallString String



{-| ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
-}
type alias CreateChatCompletionRequestModel =
    { }


{-| An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.  Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length. 
-}
type alias CreateChatCompletionRequestResponseFormat =
    { type_ : Maybe CreateChatCompletionRequestResponseFormatType
    }


type CreateChatCompletionRequestResponseFormatType
    = CreateChatCompletionRequestResponseFormatTypeText
    | CreateChatCompletionRequestResponseFormatTypeJsonObject


createChatCompletionRequestResponseFormatTypeVariants : List CreateChatCompletionRequestResponseFormatType
createChatCompletionRequestResponseFormatTypeVariants =
    [ CreateChatCompletionRequestResponseFormatTypeText
    , CreateChatCompletionRequestResponseFormatTypeJsonObject
    ]


{-| Up to 4 sequences where the API will stop generating further tokens. 
-}
type CreateChatCompletionRequestStop
    = CreateChatCompletionRequestStopString String



{-| Represents a chat completion response returned by model, based on the provided input.
-}
type alias CreateChatCompletionResponse =
    { id : String
    , choices : List CreateChatCompletionResponseChoicesInner
    , created : Int
    , model : String
    , systemFingerprint : Maybe String
    , object : CreateChatCompletionResponseObject
    , usage : Maybe CompletionUsage
    }


type CreateChatCompletionResponseObject
    = CreateChatCompletionResponseObjectChatCompletion


createChatCompletionResponseObjectVariants : List CreateChatCompletionResponseObject
createChatCompletionResponseObjectVariants =
    [ CreateChatCompletionResponseObjectChatCompletion
    ]


type alias CreateChatCompletionResponseChoicesInner =
    { finishReason : CreateChatCompletionResponseChoicesInnerFinishReason
    , index : Int
    , message : ChatCompletionResponseMessage
    , logprobs : Maybe CreateChatCompletionResponseChoicesInnerLogprobs
    }


type CreateChatCompletionResponseChoicesInnerFinishReason
    = CreateChatCompletionResponseChoicesInnerFinishReasonStop
    | CreateChatCompletionResponseChoicesInnerFinishReasonLength
    | CreateChatCompletionResponseChoicesInnerFinishReasonToolCalls
    | CreateChatCompletionResponseChoicesInnerFinishReasonContentFilter
    | CreateChatCompletionResponseChoicesInnerFinishReasonFunctionCall


createChatCompletionResponseChoicesInnerFinishReasonVariants : List CreateChatCompletionResponseChoicesInnerFinishReason
createChatCompletionResponseChoicesInnerFinishReasonVariants =
    [ CreateChatCompletionResponseChoicesInnerFinishReasonStop
    , CreateChatCompletionResponseChoicesInnerFinishReasonLength
    , CreateChatCompletionResponseChoicesInnerFinishReasonToolCalls
    , CreateChatCompletionResponseChoicesInnerFinishReasonContentFilter
    , CreateChatCompletionResponseChoicesInnerFinishReasonFunctionCall
    ]


{-| Log probability information for the choice.
-}
type alias CreateChatCompletionResponseChoicesInnerLogprobs =
    { content : Maybe ( List ChatCompletionTokenLogprob )
    }


{-| Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
-}
type alias CreateChatCompletionStreamResponse =
    { id : String
    , choices : List CreateChatCompletionStreamResponseChoicesInner
    , created : Int
    , model : String
    , systemFingerprint : Maybe String
    , object : CreateChatCompletionStreamResponseObject
    }


type CreateChatCompletionStreamResponseObject
    = CreateChatCompletionStreamResponseObjectChatCompletionChunk


createChatCompletionStreamResponseObjectVariants : List CreateChatCompletionStreamResponseObject
createChatCompletionStreamResponseObjectVariants =
    [ CreateChatCompletionStreamResponseObjectChatCompletionChunk
    ]


type alias CreateChatCompletionStreamResponseChoicesInner =
    { delta : ChatCompletionStreamResponseDelta
    , logprobs : Maybe CreateChatCompletionResponseChoicesInnerLogprobs
    , finishReason : Maybe CreateChatCompletionStreamResponseChoicesInnerFinishReason
    , index : Int
    }


type CreateChatCompletionStreamResponseChoicesInnerFinishReason
    = CreateChatCompletionStreamResponseChoicesInnerFinishReasonStop
    | CreateChatCompletionStreamResponseChoicesInnerFinishReasonLength
    | CreateChatCompletionStreamResponseChoicesInnerFinishReasonToolCalls
    | CreateChatCompletionStreamResponseChoicesInnerFinishReasonContentFilter
    | CreateChatCompletionStreamResponseChoicesInnerFinishReasonFunctionCall


createChatCompletionStreamResponseChoicesInnerFinishReasonVariants : List CreateChatCompletionStreamResponseChoicesInnerFinishReason
createChatCompletionStreamResponseChoicesInnerFinishReasonVariants =
    [ CreateChatCompletionStreamResponseChoicesInnerFinishReasonStop
    , CreateChatCompletionStreamResponseChoicesInnerFinishReasonLength
    , CreateChatCompletionStreamResponseChoicesInnerFinishReasonToolCalls
    , CreateChatCompletionStreamResponseChoicesInnerFinishReasonContentFilter
    , CreateChatCompletionStreamResponseChoicesInnerFinishReasonFunctionCall
    ]


type alias CreateCompletionRequest =
    { model : CreateCompletionRequestModel
    , prompt : Maybe CreateCompletionRequestPrompt
    , bestOf : Maybe Int
    , echo : Maybe Bool
    , frequencyPenalty : Maybe Float
    , logitBias : Maybe ( Dict.Dict String Int )
    , logprobs : Maybe Int
    , maxTokens : Maybe Int
    , n : Maybe Int
    , presencePenalty : Maybe Float
    , seed : Maybe Int
    , stop : Maybe CreateCompletionRequestStop
    , stream : Maybe Bool
    , suffix : Maybe String
    , temperature : Maybe Float
    , topP : Maybe Float
    , user : Maybe String
    }


{-| ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
-}
type alias CreateCompletionRequestModel =
    { }


{-| The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.  Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document. 
-}
type CreateCompletionRequestPrompt
    = CreateCompletionRequestPromptInt Int
    | CreateCompletionRequestPromptString String



{-| Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence. 
-}
type CreateCompletionRequestStop
    = CreateCompletionRequestStopString String



{-| Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint). 
-}
type alias CreateCompletionResponse =
    { id : String
    , choices : List CreateCompletionResponseChoicesInner
    , created : Int
    , model : String
    , systemFingerprint : Maybe String
    , object : CreateCompletionResponseObject
    , usage : Maybe CompletionUsage
    }


type CreateCompletionResponseObject
    = CreateCompletionResponseObjectTextCompletion


createCompletionResponseObjectVariants : List CreateCompletionResponseObject
createCompletionResponseObjectVariants =
    [ CreateCompletionResponseObjectTextCompletion
    ]


type alias CreateCompletionResponseChoicesInner =
    { finishReason : CreateCompletionResponseChoicesInnerFinishReason
    , index : Int
    , logprobs : Maybe CreateCompletionResponseChoicesInnerLogprobs
    , text : String
    }


type CreateCompletionResponseChoicesInnerFinishReason
    = CreateCompletionResponseChoicesInnerFinishReasonStop
    | CreateCompletionResponseChoicesInnerFinishReasonLength
    | CreateCompletionResponseChoicesInnerFinishReasonContentFilter


createCompletionResponseChoicesInnerFinishReasonVariants : List CreateCompletionResponseChoicesInnerFinishReason
createCompletionResponseChoicesInnerFinishReasonVariants =
    [ CreateCompletionResponseChoicesInnerFinishReasonStop
    , CreateCompletionResponseChoicesInnerFinishReasonLength
    , CreateCompletionResponseChoicesInnerFinishReasonContentFilter
    ]


type alias CreateCompletionResponseChoicesInnerLogprobs =
    { textOffset : Maybe ( List Int )
    , tokenLogprobs : Maybe ( List Float )
    , tokens : Maybe ( List String )
    , topLogprobs : Maybe ( List (Dict.Dict String Float) )
    }


type alias CreateEmbeddingRequest =
    { input : CreateEmbeddingRequestInput
    , model : CreateEmbeddingRequestModel
    , encodingFormat : Maybe CreateEmbeddingRequestEncodingFormat
    , dimensions : Maybe Int
    , user : Maybe String
    }


type CreateEmbeddingRequestEncodingFormat
    = CreateEmbeddingRequestEncodingFormatFloat
    | CreateEmbeddingRequestEncodingFormatBase64


createEmbeddingRequestEncodingFormatVariants : List CreateEmbeddingRequestEncodingFormat
createEmbeddingRequestEncodingFormatVariants =
    [ CreateEmbeddingRequestEncodingFormatFloat
    , CreateEmbeddingRequestEncodingFormatBase64
    ]


{-| Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. 
-}
type CreateEmbeddingRequestInput
    = CreateEmbeddingRequestInputInt Int
    | CreateEmbeddingRequestInputString String



{-| ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
-}
type alias CreateEmbeddingRequestModel =
    { }


type alias CreateEmbeddingResponse =
    { data : List Embedding
    , model : String
    , object : CreateEmbeddingResponseObject
    , usage : CreateEmbeddingResponseUsage
    }


type CreateEmbeddingResponseObject
    = CreateEmbeddingResponseObjectList


createEmbeddingResponseObjectVariants : List CreateEmbeddingResponseObject
createEmbeddingResponseObjectVariants =
    [ CreateEmbeddingResponseObjectList
    ]


{-| The usage information for the request.
-}
type alias CreateEmbeddingResponseUsage =
    { promptTokens : Int
    , totalTokens : Int
    }


type alias CreateFineTuningJobRequest =
    { model : CreateFineTuningJobRequestModel
    , trainingFile : String
    , hyperparameters : Maybe CreateFineTuningJobRequestHyperparameters
    , suffix : Maybe String
    , validationFile : Maybe String
    , integrations : Maybe ( List CreateFineTuningJobRequestIntegrationsInner )
    , seed : Maybe Int
    }


{-| The hyperparameters used for the fine-tuning job.
-}
type alias CreateFineTuningJobRequestHyperparameters =
    { batchSize : Maybe CreateFineTuningJobRequestHyperparametersBatchSize
    , learningRateMultiplier : Maybe CreateFineTuningJobRequestHyperparametersLearningRateMultiplier
    , nEpochs : Maybe CreateFineTuningJobRequestHyperparametersNEpochs
    }


{-| Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance. 
-}
type CreateFineTuningJobRequestHyperparametersBatchSize
    = CreateFineTuningJobRequestHyperparametersBatchSizeInt Int
    | CreateFineTuningJobRequestHyperparametersBatchSizeString String



{-| Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting. 
-}
type CreateFineTuningJobRequestHyperparametersLearningRateMultiplier
    = CreateFineTuningJobRequestHyperparametersLearningRateMultiplierFloat Float
    | CreateFineTuningJobRequestHyperparametersLearningRateMultiplierString String



{-| The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. 
-}
type CreateFineTuningJobRequestHyperparametersNEpochs
    = CreateFineTuningJobRequestHyperparametersNEpochsInt Int
    | CreateFineTuningJobRequestHyperparametersNEpochsString String



type alias CreateFineTuningJobRequestIntegrationsInner =
    { type_ : CreateFineTuningJobRequestIntegrationsInnerType
    , wandb : CreateFineTuningJobRequestIntegrationsInnerWandb
    }


{-| The type of integration to enable. Currently, only \"wandb\" (Weights and Biases) is supported. 
-}
type CreateFineTuningJobRequestIntegrationsInnerType
    = CreateFineTuningJobRequestIntegrationsInnerTypeString String



{-| The settings for your integration with Weights and Biases. This payload specifies the project that metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags to your run, and set a default entity (team, username, etc) to be associated with your run. 
-}
type alias CreateFineTuningJobRequestIntegrationsInnerWandb =
    { project : String
    , name : Maybe String
    , entity : Maybe String
    , tags : Maybe ( List String )
    }


{-| The name of the model to fine-tune. You can select one of the [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned). 
-}
type alias CreateFineTuningJobRequestModel =
    { }


{-| The model to use for image generation. Only `dall-e-2` is supported at this time.
-}
type alias CreateImageEditRequestModel =
    { }


type alias CreateImageRequest =
    { prompt : String
    , model : Maybe CreateImageRequestModel
    , n : Maybe Int
    , quality : Maybe CreateImageRequestQuality
    , responseFormat : Maybe CreateImageRequestResponseFormat
    , size : Maybe CreateImageRequestSize
    , style : Maybe CreateImageRequestStyle
    , user : Maybe String
    }


type CreateImageRequestQuality
    = CreateImageRequestQualityStandard
    | CreateImageRequestQualityHd


createImageRequestQualityVariants : List CreateImageRequestQuality
createImageRequestQualityVariants =
    [ CreateImageRequestQualityStandard
    , CreateImageRequestQualityHd
    ]


type CreateImageRequestResponseFormat
    = CreateImageRequestResponseFormatUrl
    | CreateImageRequestResponseFormatB64Json


createImageRequestResponseFormatVariants : List CreateImageRequestResponseFormat
createImageRequestResponseFormatVariants =
    [ CreateImageRequestResponseFormatUrl
    , CreateImageRequestResponseFormatB64Json
    ]


type CreateImageRequestSize
    = CreateImageRequestSize256x256
    | CreateImageRequestSize512x512
    | CreateImageRequestSize1024x1024
    | CreateImageRequestSize1792x1024
    | CreateImageRequestSize1024x1792


createImageRequestSizeVariants : List CreateImageRequestSize
createImageRequestSizeVariants =
    [ CreateImageRequestSize256x256
    , CreateImageRequestSize512x512
    , CreateImageRequestSize1024x1024
    , CreateImageRequestSize1792x1024
    , CreateImageRequestSize1024x1792
    ]


type CreateImageRequestStyle
    = CreateImageRequestStyleVivid
    | CreateImageRequestStyleNatural


createImageRequestStyleVariants : List CreateImageRequestStyle
createImageRequestStyleVariants =
    [ CreateImageRequestStyleVivid
    , CreateImageRequestStyleNatural
    ]


{-| The model to use for image generation.
-}
type alias CreateImageRequestModel =
    { }


type alias CreateMessageRequest =
    { role : CreateMessageRequestRole
    , content : String
    , fileIds : Maybe ( List String )
    , metadata : Maybe Object
    }


type CreateMessageRequestRole
    = CreateMessageRequestRoleUser
    | CreateMessageRequestRoleAssistant


createMessageRequestRoleVariants : List CreateMessageRequestRole
createMessageRequestRoleVariants =
    [ CreateMessageRequestRoleUser
    , CreateMessageRequestRoleAssistant
    ]


type alias CreateModerationRequest =
    { input : CreateModerationRequestInput
    , model : Maybe CreateModerationRequestModel
    }


{-| The input text to classify
-}
type CreateModerationRequestInput
    = CreateModerationRequestInputString String



{-| Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.  The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`. 
-}
type alias CreateModerationRequestModel =
    { }


{-| Represents if a given text input is potentially harmful.
-}
type alias CreateModerationResponse =
    { id : String
    , model : String
    , results : List CreateModerationResponseResultsInner
    }


type alias CreateModerationResponseResultsInner =
    { flagged : Bool
    , categories : CreateModerationResponseResultsInnerCategories
    , categoryScores : CreateModerationResponseResultsInnerCategoryScores
    }


{-| A list of the categories, and whether they are flagged or not.
-}
type alias CreateModerationResponseResultsInnerCategories =
    { hate : Bool
    , hatethreatening : Bool
    , harassment : Bool
    , harassmentthreatening : Bool
    , selfharm : Bool
    , selfharmintent : Bool
    , selfharminstructions : Bool
    , sexual : Bool
    , sexualminors : Bool
    , violence : Bool
    , violencegraphic : Bool
    }


{-| A list of the categories along with their scores as predicted by model.
-}
type alias CreateModerationResponseResultsInnerCategoryScores =
    { hate : Float
    , hatethreatening : Float
    , harassment : Float
    , harassmentthreatening : Float
    , selfharm : Float
    , selfharmintent : Float
    , selfharminstructions : Float
    , sexual : Float
    , sexualminors : Float
    , violence : Float
    , violencegraphic : Float
    }


type alias CreateRunRequest =
    { assistantId : String
    , model : Maybe CreateRunRequestModel
    , instructions : Maybe String
    , additionalInstructions : Maybe String
    , additionalMessages : Maybe ( List CreateMessageRequest )
    , tools : Maybe ( List AssistantObjectToolsInner )
    , metadata : Maybe Object
    , temperature : Maybe Float
    , stream : Maybe Bool
    , maxPromptTokens : Maybe Int
    , maxCompletionTokens : Maybe Int
    , truncationStrategy : Maybe TruncationObject
    , toolChoice : Maybe AssistantsApiToolChoiceOption
    , responseFormat : Maybe AssistantsApiResponseFormatOption
    }


{-| The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
-}
type alias CreateRunRequestModel =
    { }


type alias CreateSpeechRequest =
    { model : CreateSpeechRequestModel
    , input : String
    , voice : CreateSpeechRequestVoice
    , responseFormat : Maybe CreateSpeechRequestResponseFormat
    , speed : Maybe Float
    }


type CreateSpeechRequestVoice
    = CreateSpeechRequestVoiceAlloy
    | CreateSpeechRequestVoiceEcho
    | CreateSpeechRequestVoiceFable
    | CreateSpeechRequestVoiceOnyx
    | CreateSpeechRequestVoiceNova
    | CreateSpeechRequestVoiceShimmer


createSpeechRequestVoiceVariants : List CreateSpeechRequestVoice
createSpeechRequestVoiceVariants =
    [ CreateSpeechRequestVoiceAlloy
    , CreateSpeechRequestVoiceEcho
    , CreateSpeechRequestVoiceFable
    , CreateSpeechRequestVoiceOnyx
    , CreateSpeechRequestVoiceNova
    , CreateSpeechRequestVoiceShimmer
    ]


type CreateSpeechRequestResponseFormat
    = CreateSpeechRequestResponseFormatMp3
    | CreateSpeechRequestResponseFormatOpus
    | CreateSpeechRequestResponseFormatAac
    | CreateSpeechRequestResponseFormatFlac
    | CreateSpeechRequestResponseFormatWav
    | CreateSpeechRequestResponseFormatPcm


createSpeechRequestResponseFormatVariants : List CreateSpeechRequestResponseFormat
createSpeechRequestResponseFormatVariants =
    [ CreateSpeechRequestResponseFormatMp3
    , CreateSpeechRequestResponseFormatOpus
    , CreateSpeechRequestResponseFormatAac
    , CreateSpeechRequestResponseFormatFlac
    , CreateSpeechRequestResponseFormatWav
    , CreateSpeechRequestResponseFormatPcm
    ]


{-| One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd` 
-}
type alias CreateSpeechRequestModel =
    { }


type alias CreateThreadAndRunRequest =
    { assistantId : String
    , thread : Maybe CreateThreadRequest
    , model : Maybe CreateRunRequestModel
    , instructions : Maybe String
    , tools : Maybe ( List CreateThreadAndRunRequestToolsInner )
    , metadata : Maybe Object
    , temperature : Maybe Float
    , stream : Maybe Bool
    , maxPromptTokens : Maybe Int
    , maxCompletionTokens : Maybe Int
    , truncationStrategy : Maybe TruncationObject
    , toolChoice : Maybe AssistantsApiToolChoiceOption
    , responseFormat : Maybe AssistantsApiResponseFormatOption
    }


type CreateThreadAndRunRequestToolsInner
    = CreateThreadAndRunRequestToolsInnerAssistantToolsCode AssistantToolsCode
    | CreateThreadAndRunRequestToolsInnerAssistantToolsFunction AssistantToolsFunction
    | CreateThreadAndRunRequestToolsInnerAssistantToolsRetrieval AssistantToolsRetrieval



type alias CreateThreadRequest =
    { messages : Maybe ( List CreateMessageRequest )
    , metadata : Maybe Object
    }


type CreateTranscription200Response
    = CreateTranscription200ResponseCreateTranscriptionResponseJson CreateTranscriptionResponseJson
    | CreateTranscription200ResponseCreateTranscriptionResponseVerboseJson CreateTranscriptionResponseVerboseJson



{-| ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available. 
-}
type alias CreateTranscriptionRequestModel =
    { }


{-| Represents a transcription response returned by model, based on the provided input.
-}
type alias CreateTranscriptionResponseJson =
    { text : String
    }


{-| Represents a verbose json transcription response returned by model, based on the provided input.
-}
type alias CreateTranscriptionResponseVerboseJson =
    { language : String
    , duration : String
    , text : String
    , words : Maybe ( List TranscriptionWord )
    , segments : Maybe ( List TranscriptionSegment )
    }


type CreateTranslation200Response
    = CreateTranslation200ResponseCreateTranslationResponseJson CreateTranslationResponseJson
    | CreateTranslation200ResponseCreateTranslationResponseVerboseJson CreateTranslationResponseVerboseJson



type alias CreateTranslationResponseJson =
    { text : String
    }


type alias CreateTranslationResponseVerboseJson =
    { language : String
    , duration : String
    , text : String
    , segments : Maybe ( List TranscriptionSegment )
    }


{-| Deletes the association between the assistant and the file, but does not delete the [File](/docs/api-reference/files) object itself.
-}
type alias DeleteAssistantFileResponse =
    { id : String
    , deleted : Bool
    , object : DeleteAssistantFileResponseObject
    }


type DeleteAssistantFileResponseObject
    = DeleteAssistantFileResponseObjectAssistantFileDeleted


deleteAssistantFileResponseObjectVariants : List DeleteAssistantFileResponseObject
deleteAssistantFileResponseObjectVariants =
    [ DeleteAssistantFileResponseObjectAssistantFileDeleted
    ]


type alias DeleteAssistantResponse =
    { id : String
    , deleted : Bool
    , object : DeleteAssistantResponseObject
    }


type DeleteAssistantResponseObject
    = DeleteAssistantResponseObjectAssistantDeleted


deleteAssistantResponseObjectVariants : List DeleteAssistantResponseObject
deleteAssistantResponseObjectVariants =
    [ DeleteAssistantResponseObjectAssistantDeleted
    ]


type alias DeleteFileResponse =
    { id : String
    , object : DeleteFileResponseObject
    , deleted : Bool
    }


type DeleteFileResponseObject
    = DeleteFileResponseObjectFile


deleteFileResponseObjectVariants : List DeleteFileResponseObject
deleteFileResponseObjectVariants =
    [ DeleteFileResponseObjectFile
    ]


type alias DeleteMessageResponse =
    { id : String
    , deleted : Bool
    , object : DeleteMessageResponseObject
    }


type DeleteMessageResponseObject
    = DeleteMessageResponseObjectThreadMessageDeleted


deleteMessageResponseObjectVariants : List DeleteMessageResponseObject
deleteMessageResponseObjectVariants =
    [ DeleteMessageResponseObjectThreadMessageDeleted
    ]


type alias DeleteModelResponse =
    { id : String
    , deleted : Bool
    , object : String
    }


type alias DeleteThreadResponse =
    { id : String
    , deleted : Bool
    , object : DeleteThreadResponseObject
    }


type DeleteThreadResponseObject
    = DeleteThreadResponseObjectThreadDeleted


deleteThreadResponseObjectVariants : List DeleteThreadResponseObject
deleteThreadResponseObjectVariants =
    [ DeleteThreadResponseObjectThreadDeleted
    ]


{-| Occurs when a stream ends.
-}
type alias DoneEvent =
    { event : DoneEventEvent
    , data : DoneEventData
    }


type DoneEventEvent
    = DoneEventEventDone


doneEventEventVariants : List DoneEventEvent
doneEventEventVariants =
    [ DoneEventEventDone
    ]


type DoneEventData
    = DoneEventData[DONE]


doneEventDataVariants : List DoneEventData
doneEventDataVariants =
    [ DoneEventData[DONE]
    ]


{-| Represents an embedding vector returned by embedding endpoint. 
-}
type alias Embedding =
    { index : Int
    , embedding : List Float
    , object : EmbeddingObject
    }


type EmbeddingObject
    = EmbeddingObjectEmbedding


embeddingObjectVariants : List EmbeddingObject
embeddingObjectVariants =
    [ EmbeddingObjectEmbedding
    ]


type alias Error =
    { code : Maybe String
    , message : String
    , param : Maybe String
    , type_ : String
    }


{-| Occurs when an [error](/docs/guides/error-codes/api-errors) occurs. This can happen due to an internal server error or a timeout.
-}
type alias ErrorEvent =
    { event : ErrorEventEvent
    , data : Error
    }


type ErrorEventEvent
    = ErrorEventEventError


errorEventEventVariants : List ErrorEventEvent
errorEventEventVariants =
    [ ErrorEventEventError
    ]


type alias ErrorResponse =
    { error : Error
    }


type alias FineTuningIntegration =
    { type_ : FineTuningIntegrationType
    , wandb : CreateFineTuningJobRequestIntegrationsInnerWandb
    }


type FineTuningIntegrationType
    = FineTuningIntegrationTypeWandb


fineTuningIntegrationTypeVariants : List FineTuningIntegrationType
fineTuningIntegrationTypeVariants =
    [ FineTuningIntegrationTypeWandb
    ]


{-| The `fine_tuning.job` object represents a fine-tuning job that has been created through the API. 
-}
type alias FineTuningJob =
    { id : String
    , createdAt : Int
    , error : Maybe FineTuningJobError
    , fineTunedModel : Maybe String
    , finishedAt : Maybe Int
    , hyperparameters : FineTuningJobHyperparameters
    , model : String
    , object : FineTuningJobObject
    , organizationId : String
    , resultFiles : List String
    , status : FineTuningJobStatus
    , trainedTokens : Maybe Int
    , trainingFile : String
    , validationFile : Maybe String
    , integrations : Maybe ( List FineTuningJobIntegrationsInner )
    , seed : Int
    }


type FineTuningJobObject
    = FineTuningJobObjectFineTuningJob


fineTuningJobObjectVariants : List FineTuningJobObject
fineTuningJobObjectVariants =
    [ FineTuningJobObjectFineTuningJob
    ]


type FineTuningJobStatus
    = FineTuningJobStatusValidatingFiles
    | FineTuningJobStatusQueued
    | FineTuningJobStatusRunning
    | FineTuningJobStatusSucceeded
    | FineTuningJobStatusFailed
    | FineTuningJobStatusCancelled


fineTuningJobStatusVariants : List FineTuningJobStatus
fineTuningJobStatusVariants =
    [ FineTuningJobStatusValidatingFiles
    , FineTuningJobStatusQueued
    , FineTuningJobStatusRunning
    , FineTuningJobStatusSucceeded
    , FineTuningJobStatusFailed
    , FineTuningJobStatusCancelled
    ]


{-| The `fine_tuning.job.checkpoint` object represents a model checkpoint for a fine-tuning job that is ready to use. 
-}
type alias FineTuningJobCheckpoint =
    { id : String
    , createdAt : Int
    , fineTunedModelCheckpoint : String
    , stepNumber : Int
    , metrics : FineTuningJobCheckpointMetrics
    , fineTuningJobId : String
    , object : FineTuningJobCheckpointObject
    }


type FineTuningJobCheckpointObject
    = FineTuningJobCheckpointObjectFineTuningJobCheckpoint


fineTuningJobCheckpointObjectVariants : List FineTuningJobCheckpointObject
fineTuningJobCheckpointObjectVariants =
    [ FineTuningJobCheckpointObjectFineTuningJobCheckpoint
    ]


{-| Metrics at the step number during the fine-tuning job.
-}
type alias FineTuningJobCheckpointMetrics =
    { step : Maybe Float
    , trainLoss : Maybe Float
    , trainMeanTokenAccuracy : Maybe Float
    , validLoss : Maybe Float
    , validMeanTokenAccuracy : Maybe Float
    , fullValidLoss : Maybe Float
    , fullValidMeanTokenAccuracy : Maybe Float
    }


{-| For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
-}
type alias FineTuningJobError =
    { code : String
    , message : String
    , param : Maybe String
    }


{-| Fine-tuning job event object
-}
type alias FineTuningJobEvent =
    { id : String
    , createdAt : Int
    , level : FineTuningJobEventLevel
    , message : String
    , object : FineTuningJobEventObject
    }


type FineTuningJobEventLevel
    = FineTuningJobEventLevelInfo
    | FineTuningJobEventLevelWarn
    | FineTuningJobEventLevelError


fineTuningJobEventLevelVariants : List FineTuningJobEventLevel
fineTuningJobEventLevelVariants =
    [ FineTuningJobEventLevelInfo
    , FineTuningJobEventLevelWarn
    , FineTuningJobEventLevelError
    ]


type FineTuningJobEventObject
    = FineTuningJobEventObjectFineTuningJobEvent


fineTuningJobEventObjectVariants : List FineTuningJobEventObject
fineTuningJobEventObjectVariants =
    [ FineTuningJobEventObjectFineTuningJobEvent
    ]


{-| The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
-}
type alias FineTuningJobHyperparameters =
    { nEpochs : FineTuningJobHyperparametersNEpochs
    }


{-| The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. \"auto\" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
-}
type FineTuningJobHyperparametersNEpochs
    = FineTuningJobHyperparametersNEpochsInt Int
    | FineTuningJobHyperparametersNEpochsString String



type FineTuningJobIntegrationsInner
    = FineTuningJobIntegrationsInnerFineTuningIntegration FineTuningIntegration



type alias FunctionObject =
    { description : Maybe String
    , name : String
    , parameters : Maybe ( Dict.Dict String Maybe AnyType )
    }


{-| Represents the url or the content of an image generated by the OpenAI API.
-}
type alias Image =
    { b64Json : Maybe String
    , url : Maybe String
    , revisedPrompt : Maybe String
    }


type alias ImagesResponse =
    { created : Int
    , data : List Image
    }


type alias ListAssistantFilesResponse =
    { object : String
    , data : List AssistantFileObject
    , firstId : String
    , lastId : String
    , hasMore : Bool
    }


type alias ListAssistantsResponse =
    { object : String
    , data : List AssistantObject
    , firstId : String
    , lastId : String
    , hasMore : Bool
    }


type alias ListFilesResponse =
    { data : List OpenAIFile
    , object : ListFilesResponseObject
    }


type ListFilesResponseObject
    = ListFilesResponseObjectList


listFilesResponseObjectVariants : List ListFilesResponseObject
listFilesResponseObjectVariants =
    [ ListFilesResponseObjectList
    ]


type alias ListFineTuningJobCheckpointsResponse =
    { data : List FineTuningJobCheckpoint
    , object : ListFineTuningJobCheckpointsResponseObject
    , firstId : Maybe String
    , lastId : Maybe String
    , hasMore : Bool
    }


type ListFineTuningJobCheckpointsResponseObject
    = ListFineTuningJobCheckpointsResponseObjectList


listFineTuningJobCheckpointsResponseObjectVariants : List ListFineTuningJobCheckpointsResponseObject
listFineTuningJobCheckpointsResponseObjectVariants =
    [ ListFineTuningJobCheckpointsResponseObjectList
    ]


type alias ListFineTuningJobEventsResponse =
    { data : List FineTuningJobEvent
    , object : ListFineTuningJobEventsResponseObject
    }


type ListFineTuningJobEventsResponseObject
    = ListFineTuningJobEventsResponseObjectList


listFineTuningJobEventsResponseObjectVariants : List ListFineTuningJobEventsResponseObject
listFineTuningJobEventsResponseObjectVariants =
    [ ListFineTuningJobEventsResponseObjectList
    ]


type alias ListMessageFilesResponse =
    { object : String
    , data : List MessageFileObject
    , firstId : String
    , lastId : String
    , hasMore : Bool
    }


type alias ListMessagesResponse =
    { object : String
    , data : List MessageObject
    , firstId : String
    , lastId : String
    , hasMore : Bool
    }


type alias ListModelsResponse =
    { object : ListModelsResponseObject
    , data : List Model
    }


type ListModelsResponseObject
    = ListModelsResponseObjectList


listModelsResponseObjectVariants : List ListModelsResponseObject
listModelsResponseObjectVariants =
    [ ListModelsResponseObjectList
    ]


type alias ListPaginatedFineTuningJobsResponse =
    { data : List FineTuningJob
    , hasMore : Bool
    , object : ListPaginatedFineTuningJobsResponseObject
    }


type ListPaginatedFineTuningJobsResponseObject
    = ListPaginatedFineTuningJobsResponseObjectList


listPaginatedFineTuningJobsResponseObjectVariants : List ListPaginatedFineTuningJobsResponseObject
listPaginatedFineTuningJobsResponseObjectVariants =
    [ ListPaginatedFineTuningJobsResponseObjectList
    ]


type alias ListRunStepsResponse =
    { object : String
    , data : List RunStepObject
    , firstId : String
    , lastId : String
    , hasMore : Bool
    }


type alias ListRunsResponse =
    { object : String
    , data : List RunObject
    , firstId : String
    , lastId : String
    , hasMore : Bool
    }


type alias ListThreadsResponse =
    { object : String
    , data : List ThreadObject
    , firstId : String
    , lastId : String
    , hasMore : Bool
    }


{-| References an image [File](/docs/api-reference/files) in the content of a message.
-}
type alias MessageContentImageFileObject =
    { type_ : MessageContentImageFileObjectType
    , imageFile : MessageContentImageFileObjectImageFile
    }


type MessageContentImageFileObjectType
    = MessageContentImageFileObjectTypeImageFile


messageContentImageFileObjectTypeVariants : List MessageContentImageFileObjectType
messageContentImageFileObjectTypeVariants =
    [ MessageContentImageFileObjectTypeImageFile
    ]


type alias MessageContentImageFileObjectImageFile =
    { fileId : String
    }


{-| A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \"retrieval\" tool to search files.
-}
type alias MessageContentTextAnnotationsFileCitationObject =
    { type_ : MessageContentTextAnnotationsFileCitationObjectType
    , text : String
    , fileCitation : MessageContentTextAnnotationsFileCitationObjectFileCitation
    , startIndex : Int
    , endIndex : Int
    }


type MessageContentTextAnnotationsFileCitationObjectType
    = MessageContentTextAnnotationsFileCitationObjectTypeFileCitation


messageContentTextAnnotationsFileCitationObjectTypeVariants : List MessageContentTextAnnotationsFileCitationObjectType
messageContentTextAnnotationsFileCitationObjectTypeVariants =
    [ MessageContentTextAnnotationsFileCitationObjectTypeFileCitation
    ]


type alias MessageContentTextAnnotationsFileCitationObjectFileCitation =
    { fileId : String
    , quote : String
    }


{-| A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
-}
type alias MessageContentTextAnnotationsFilePathObject =
    { type_ : MessageContentTextAnnotationsFilePathObjectType
    , text : String
    , filePath : MessageContentTextAnnotationsFilePathObjectFilePath
    , startIndex : Int
    , endIndex : Int
    }


type MessageContentTextAnnotationsFilePathObjectType
    = MessageContentTextAnnotationsFilePathObjectTypeFilePath


messageContentTextAnnotationsFilePathObjectTypeVariants : List MessageContentTextAnnotationsFilePathObjectType
messageContentTextAnnotationsFilePathObjectTypeVariants =
    [ MessageContentTextAnnotationsFilePathObjectTypeFilePath
    ]


type alias MessageContentTextAnnotationsFilePathObjectFilePath =
    { fileId : String
    }


{-| The text content that is part of a message.
-}
type alias MessageContentTextObject =
    { type_ : MessageContentTextObjectType
    , text : MessageContentTextObjectText
    }


type MessageContentTextObjectType
    = MessageContentTextObjectTypeText


messageContentTextObjectTypeVariants : List MessageContentTextObjectType
messageContentTextObjectTypeVariants =
    [ MessageContentTextObjectTypeText
    ]


type alias MessageContentTextObjectText =
    { value : String
    , annotations : List MessageContentTextObjectTextAnnotationsInner
    }


type MessageContentTextObjectTextAnnotationsInner
    = MessageContentTextObjectTextAnnotationsInnerMessageContentTextAnnotationsFileCitationObject MessageContentTextAnnotationsFileCitationObject
    | MessageContentTextObjectTextAnnotationsInnerMessageContentTextAnnotationsFilePathObject MessageContentTextAnnotationsFilePathObject



{-| References an image [File](/docs/api-reference/files) in the content of a message.
-}
type alias MessageDeltaContentImageFileObject =
    { index : Int
    , type_ : MessageDeltaContentImageFileObjectType
    , imageFile : Maybe MessageDeltaContentImageFileObjectImageFile
    }


type MessageDeltaContentImageFileObjectType
    = MessageDeltaContentImageFileObjectTypeImageFile


messageDeltaContentImageFileObjectTypeVariants : List MessageDeltaContentImageFileObjectType
messageDeltaContentImageFileObjectTypeVariants =
    [ MessageDeltaContentImageFileObjectTypeImageFile
    ]


type alias MessageDeltaContentImageFileObjectImageFile =
    { fileId : Maybe String
    }


{-| A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \"retrieval\" tool to search files.
-}
type alias MessageDeltaContentTextAnnotationsFileCitationObject =
    { index : Int
    , type_ : MessageDeltaContentTextAnnotationsFileCitationObjectType
    , text : Maybe String
    , fileCitation : Maybe MessageDeltaContentTextAnnotationsFileCitationObjectFileCitation
    , startIndex : Maybe Int
    , endIndex : Maybe Int
    }


type MessageDeltaContentTextAnnotationsFileCitationObjectType
    = MessageDeltaContentTextAnnotationsFileCitationObjectTypeFileCitation


messageDeltaContentTextAnnotationsFileCitationObjectTypeVariants : List MessageDeltaContentTextAnnotationsFileCitationObjectType
messageDeltaContentTextAnnotationsFileCitationObjectTypeVariants =
    [ MessageDeltaContentTextAnnotationsFileCitationObjectTypeFileCitation
    ]


type alias MessageDeltaContentTextAnnotationsFileCitationObjectFileCitation =
    { fileId : Maybe String
    , quote : Maybe String
    }


{-| A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
-}
type alias MessageDeltaContentTextAnnotationsFilePathObject =
    { index : Int
    , type_ : MessageDeltaContentTextAnnotationsFilePathObjectType
    , text : Maybe String
    , filePath : Maybe MessageDeltaContentTextAnnotationsFilePathObjectFilePath
    , startIndex : Maybe Int
    , endIndex : Maybe Int
    }


type MessageDeltaContentTextAnnotationsFilePathObjectType
    = MessageDeltaContentTextAnnotationsFilePathObjectTypeFilePath


messageDeltaContentTextAnnotationsFilePathObjectTypeVariants : List MessageDeltaContentTextAnnotationsFilePathObjectType
messageDeltaContentTextAnnotationsFilePathObjectTypeVariants =
    [ MessageDeltaContentTextAnnotationsFilePathObjectTypeFilePath
    ]


type alias MessageDeltaContentTextAnnotationsFilePathObjectFilePath =
    { fileId : Maybe String
    }


{-| The text content that is part of a message.
-}
type alias MessageDeltaContentTextObject =
    { index : Int
    , type_ : MessageDeltaContentTextObjectType
    , text : Maybe MessageDeltaContentTextObjectText
    }


type MessageDeltaContentTextObjectType
    = MessageDeltaContentTextObjectTypeText


messageDeltaContentTextObjectTypeVariants : List MessageDeltaContentTextObjectType
messageDeltaContentTextObjectTypeVariants =
    [ MessageDeltaContentTextObjectTypeText
    ]


type alias MessageDeltaContentTextObjectText =
    { value : Maybe String
    , annotations : Maybe ( List MessageDeltaContentTextObjectTextAnnotationsInner )
    }


type MessageDeltaContentTextObjectTextAnnotationsInner
    = MessageDeltaContentTextObjectTextAnnotationsInnerMessageDeltaContentTextAnnotationsFileCitationObject MessageDeltaContentTextAnnotationsFileCitationObject
    | MessageDeltaContentTextObjectTextAnnotationsInnerMessageDeltaContentTextAnnotationsFilePathObject MessageDeltaContentTextAnnotationsFilePathObject



{-| Represents a message delta i.e. any changed fields on a message during streaming. 
-}
type alias MessageDeltaObject =
    { id : String
    , object : MessageDeltaObjectObject
    , delta : MessageDeltaObjectDelta
    }


type MessageDeltaObjectObject
    = MessageDeltaObjectObjectThreadMessageDelta


messageDeltaObjectObjectVariants : List MessageDeltaObjectObject
messageDeltaObjectObjectVariants =
    [ MessageDeltaObjectObjectThreadMessageDelta
    ]


{-| The delta containing the fields that have changed on the Message.
-}
type alias MessageDeltaObjectDelta =
    { role : Maybe MessageDeltaObjectDeltaRole
    , content : Maybe ( List MessageDeltaObjectDeltaContentInner )
    , fileIds : Maybe ( List String )
    }


type MessageDeltaObjectDeltaRole
    = MessageDeltaObjectDeltaRoleUser
    | MessageDeltaObjectDeltaRoleAssistant


messageDeltaObjectDeltaRoleVariants : List MessageDeltaObjectDeltaRole
messageDeltaObjectDeltaRoleVariants =
    [ MessageDeltaObjectDeltaRoleUser
    , MessageDeltaObjectDeltaRoleAssistant
    ]


type MessageDeltaObjectDeltaContentInner
    = MessageDeltaObjectDeltaContentInnerMessageDeltaContentImageFileObject MessageDeltaContentImageFileObject
    | MessageDeltaObjectDeltaContentInnerMessageDeltaContentTextObject MessageDeltaContentTextObject



{-| A list of files attached to a `message`.
-}
type alias MessageFileObject =
    { id : String
    , object : MessageFileObjectObject
    , createdAt : Int
    , messageId : String
    }


type MessageFileObjectObject
    = MessageFileObjectObjectThreadMessageFile


messageFileObjectObjectVariants : List MessageFileObjectObject
messageFileObjectObjectVariants =
    [ MessageFileObjectObjectThreadMessageFile
    ]


{-| Represents a message within a [thread](/docs/api-reference/threads).
-}
type alias MessageObject =
    { id : String
    , object : MessageObjectObject
    , createdAt : Int
    , threadId : String
    , status : MessageObjectStatus
    , incompleteDetails : Maybe MessageObjectIncompleteDetails
    , completedAt : Maybe Int
    , incompleteAt : Maybe Int
    , role : MessageObjectRole
    , content : List MessageObjectContentInner
    , assistantId : Maybe String
    , runId : Maybe String
    , fileIds : List String
    , metadata : Maybe Object
    }


type MessageObjectObject
    = MessageObjectObjectThreadMessage


messageObjectObjectVariants : List MessageObjectObject
messageObjectObjectVariants =
    [ MessageObjectObjectThreadMessage
    ]


type MessageObjectStatus
    = MessageObjectStatusInProgress
    | MessageObjectStatusIncomplete
    | MessageObjectStatusCompleted


messageObjectStatusVariants : List MessageObjectStatus
messageObjectStatusVariants =
    [ MessageObjectStatusInProgress
    , MessageObjectStatusIncomplete
    , MessageObjectStatusCompleted
    ]


type MessageObjectRole
    = MessageObjectRoleUser
    | MessageObjectRoleAssistant


messageObjectRoleVariants : List MessageObjectRole
messageObjectRoleVariants =
    [ MessageObjectRoleUser
    , MessageObjectRoleAssistant
    ]


type MessageObjectContentInner
    = MessageObjectContentInnerMessageContentImageFileObject MessageContentImageFileObject
    | MessageObjectContentInnerMessageContentTextObject MessageContentTextObject



{-| On an incomplete message, details about why the message is incomplete.
-}
type alias MessageObjectIncompleteDetails =
    { reason : MessageObjectIncompleteDetailsReason
    }


type MessageObjectIncompleteDetailsReason
    = MessageObjectIncompleteDetailsReasonContentFilter
    | MessageObjectIncompleteDetailsReasonMaxTokens
    | MessageObjectIncompleteDetailsReasonRunCancelled
    | MessageObjectIncompleteDetailsReasonRunExpired
    | MessageObjectIncompleteDetailsReasonRunFailed


messageObjectIncompleteDetailsReasonVariants : List MessageObjectIncompleteDetailsReason
messageObjectIncompleteDetailsReasonVariants =
    [ MessageObjectIncompleteDetailsReasonContentFilter
    , MessageObjectIncompleteDetailsReasonMaxTokens
    , MessageObjectIncompleteDetailsReasonRunCancelled
    , MessageObjectIncompleteDetailsReasonRunExpired
    , MessageObjectIncompleteDetailsReasonRunFailed
    ]


type MessageStreamEvent
    = MessageStreamEventMessageStreamEventOneOf MessageStreamEventOneOf
    | MessageStreamEventMessageStreamEventOneOf1 MessageStreamEventOneOf1
    | MessageStreamEventMessageStreamEventOneOf2 MessageStreamEventOneOf2
    | MessageStreamEventMessageStreamEventOneOf3 MessageStreamEventOneOf3
    | MessageStreamEventMessageStreamEventOneOf4 MessageStreamEventOneOf4



{-| Occurs when a [message](/docs/api-reference/messages/object) is created.
-}
type alias MessageStreamEventOneOf =
    { event : MessageStreamEventOneOfEvent
    , data : MessageObject
    }


type MessageStreamEventOneOfEvent
    = MessageStreamEventOneOfEventThreadMessageCreated


messageStreamEventOneOfEventVariants : List MessageStreamEventOneOfEvent
messageStreamEventOneOfEventVariants =
    [ MessageStreamEventOneOfEventThreadMessageCreated
    ]


{-| Occurs when a [message](/docs/api-reference/messages/object) moves to an `in_progress` state.
-}
type alias MessageStreamEventOneOf1 =
    { event : MessageStreamEventOneOf1Event
    , data : MessageObject
    }


type MessageStreamEventOneOf1Event
    = MessageStreamEventOneOf1EventThreadMessageInProgress


messageStreamEventOneOf1EventVariants : List MessageStreamEventOneOf1Event
messageStreamEventOneOf1EventVariants =
    [ MessageStreamEventOneOf1EventThreadMessageInProgress
    ]


{-| Occurs when parts of a [Message](/docs/api-reference/messages/object) are being streamed.
-}
type alias MessageStreamEventOneOf2 =
    { event : MessageStreamEventOneOf2Event
    , data : MessageDeltaObject
    }


type MessageStreamEventOneOf2Event
    = MessageStreamEventOneOf2EventThreadMessageDelta


messageStreamEventOneOf2EventVariants : List MessageStreamEventOneOf2Event
messageStreamEventOneOf2EventVariants =
    [ MessageStreamEventOneOf2EventThreadMessageDelta
    ]


{-| Occurs when a [message](/docs/api-reference/messages/object) is completed.
-}
type alias MessageStreamEventOneOf3 =
    { event : MessageStreamEventOneOf3Event
    , data : MessageObject
    }


type MessageStreamEventOneOf3Event
    = MessageStreamEventOneOf3EventThreadMessageCompleted


messageStreamEventOneOf3EventVariants : List MessageStreamEventOneOf3Event
messageStreamEventOneOf3EventVariants =
    [ MessageStreamEventOneOf3EventThreadMessageCompleted
    ]


{-| Occurs when a [message](/docs/api-reference/messages/object) ends before it is completed.
-}
type alias MessageStreamEventOneOf4 =
    { event : MessageStreamEventOneOf4Event
    , data : MessageObject
    }


type MessageStreamEventOneOf4Event
    = MessageStreamEventOneOf4EventThreadMessageIncomplete


messageStreamEventOneOf4EventVariants : List MessageStreamEventOneOf4Event
messageStreamEventOneOf4EventVariants =
    [ MessageStreamEventOneOf4EventThreadMessageIncomplete
    ]


{-| Describes an OpenAI model offering that can be used with the API.
-}
type alias Model =
    { id : String
    , created : Int
    , object : ModelObject
    , ownedBy : String
    }


type ModelObject
    = ModelObjectModel


modelObjectVariants : List ModelObject
modelObjectVariants =
    [ ModelObjectModel
    ]


type alias ModifyAssistantRequest =
    { model : Maybe String
    , name : Maybe String
    , description : Maybe String
    , instructions : Maybe String
    , tools : Maybe ( List AssistantObjectToolsInner )
    , fileIds : Maybe ( List String )
    , metadata : Maybe Object
    }


type alias ModifyMessageRequest =
    { metadata : Maybe Object
    }


type alias ModifyRunRequest =
    { metadata : Maybe Object
    }


type alias ModifyThreadRequest =
    { metadata : Maybe Object
    }


{-| The `File` object represents a document that has been uploaded to OpenAI.
-}
type alias OpenAIFile =
    { id : String
    , bytes : Int
    , createdAt : Int
    , filename : String
    , object : OpenAIFileObject
    , purpose : OpenAIFilePurpose
    , status : OpenAIFileStatus
    , statusDetails : Maybe String
    }


type OpenAIFileObject
    = OpenAIFileObjectFile


openAIFileObjectVariants : List OpenAIFileObject
openAIFileObjectVariants =
    [ OpenAIFileObjectFile
    ]


type OpenAIFilePurpose
    = OpenAIFilePurposeFineTune
    | OpenAIFilePurposeFineTuneResults
    | OpenAIFilePurposeAssistants
    | OpenAIFilePurposeAssistantsOutput


openAIFilePurposeVariants : List OpenAIFilePurpose
openAIFilePurposeVariants =
    [ OpenAIFilePurposeFineTune
    , OpenAIFilePurposeFineTuneResults
    , OpenAIFilePurposeAssistants
    , OpenAIFilePurposeAssistantsOutput
    ]


type OpenAIFileStatus
    = OpenAIFileStatusUploaded
    | OpenAIFileStatusProcessed
    | OpenAIFileStatusError


openAIFileStatusVariants : List OpenAIFileStatus
openAIFileStatusVariants =
    [ OpenAIFileStatusUploaded
    , OpenAIFileStatusProcessed
    , OpenAIFileStatusError
    ]


{-| Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
-}
type alias RunCompletionUsage =
    { completionTokens : Int
    , promptTokens : Int
    , totalTokens : Int
    }


{-| Represents an execution run on a [thread](/docs/api-reference/threads).
-}
type alias RunObject =
    { id : String
    , object : RunObjectObject
    , createdAt : Int
    , threadId : String
    , assistantId : String
    , status : RunObjectStatus
    , requiredAction : Maybe RunObjectRequiredAction
    , lastError : Maybe RunObjectLastError
    , expiresAt : Maybe Int
    , startedAt : Maybe Int
    , cancelledAt : Maybe Int
    , failedAt : Maybe Int
    , completedAt : Maybe Int
    , incompleteDetails : Maybe RunObjectIncompleteDetails
    , model : String
    , instructions : String
    , tools : List AssistantObjectToolsInner
    , fileIds : List String
    , metadata : Maybe Object
    , usage : Maybe RunCompletionUsage
    , temperature : Maybe Float
    , maxPromptTokens : Maybe Int
    , maxCompletionTokens : Maybe Int
    , truncationStrategy : TruncationObject
    , toolChoice : AssistantsApiToolChoiceOption
    , responseFormat : AssistantsApiResponseFormatOption
    }


type RunObjectObject
    = RunObjectObjectThreadRun


runObjectObjectVariants : List RunObjectObject
runObjectObjectVariants =
    [ RunObjectObjectThreadRun
    ]


type RunObjectStatus
    = RunObjectStatusQueued
    | RunObjectStatusInProgress
    | RunObjectStatusRequiresAction
    | RunObjectStatusCancelling
    | RunObjectStatusCancelled
    | RunObjectStatusFailed
    | RunObjectStatusCompleted
    | RunObjectStatusExpired


runObjectStatusVariants : List RunObjectStatus
runObjectStatusVariants =
    [ RunObjectStatusQueued
    , RunObjectStatusInProgress
    , RunObjectStatusRequiresAction
    , RunObjectStatusCancelling
    , RunObjectStatusCancelled
    , RunObjectStatusFailed
    , RunObjectStatusCompleted
    , RunObjectStatusExpired
    ]


{-| Details on why the run is incomplete. Will be `null` if the run is not incomplete.
-}
type alias RunObjectIncompleteDetails =
    { reason : Maybe RunObjectIncompleteDetailsReason
    }


type RunObjectIncompleteDetailsReason
    = RunObjectIncompleteDetailsReasonCompletionTokens
    | RunObjectIncompleteDetailsReasonPromptTokens


runObjectIncompleteDetailsReasonVariants : List RunObjectIncompleteDetailsReason
runObjectIncompleteDetailsReasonVariants =
    [ RunObjectIncompleteDetailsReasonCompletionTokens
    , RunObjectIncompleteDetailsReasonPromptTokens
    ]


{-| The last error associated with this run. Will be `null` if there are no errors.
-}
type alias RunObjectLastError =
    { code : RunObjectLastErrorCode
    , message : String
    }


type RunObjectLastErrorCode
    = RunObjectLastErrorCodeServerError
    | RunObjectLastErrorCodeRateLimitExceeded
    | RunObjectLastErrorCodeInvalidPrompt


runObjectLastErrorCodeVariants : List RunObjectLastErrorCode
runObjectLastErrorCodeVariants =
    [ RunObjectLastErrorCodeServerError
    , RunObjectLastErrorCodeRateLimitExceeded
    , RunObjectLastErrorCodeInvalidPrompt
    ]


{-| Details on the action required to continue the run. Will be `null` if no action is required.
-}
type alias RunObjectRequiredAction =
    { type_ : RunObjectRequiredActionType
    , submitToolOutputs : RunObjectRequiredActionSubmitToolOutputs
    }


type RunObjectRequiredActionType
    = RunObjectRequiredActionTypeSubmitToolOutputs


runObjectRequiredActionTypeVariants : List RunObjectRequiredActionType
runObjectRequiredActionTypeVariants =
    [ RunObjectRequiredActionTypeSubmitToolOutputs
    ]


{-| Details on the tool outputs needed for this run to continue.
-}
type alias RunObjectRequiredActionSubmitToolOutputs =
    { toolCalls : List RunToolCallObject
    }


{-| Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.
-}
type alias RunStepCompletionUsage =
    { completionTokens : Int
    , promptTokens : Int
    , totalTokens : Int
    }


{-| Represents a run step delta i.e. any changed fields on a run step during streaming. 
-}
type alias RunStepDeltaObject =
    { id : String
    , object : RunStepDeltaObjectObject
    , delta : RunStepDeltaObjectDelta
    }


type RunStepDeltaObjectObject
    = RunStepDeltaObjectObjectThreadRunStepDelta


runStepDeltaObjectObjectVariants : List RunStepDeltaObjectObject
runStepDeltaObjectObjectVariants =
    [ RunStepDeltaObjectObjectThreadRunStepDelta
    ]


{-| The delta containing the fields that have changed on the run step.
-}
type alias RunStepDeltaObjectDelta =
    { stepDetails : Maybe RunStepDeltaObjectDeltaStepDetails
    }


{-| The details of the run step.
-}
type RunStepDeltaObjectDeltaStepDetails
    = RunStepDeltaObjectDeltaStepDetailsRunStepDeltaStepDetailsMessageCreationObject RunStepDeltaStepDetailsMessageCreationObject
    | RunStepDeltaObjectDeltaStepDetailsRunStepDeltaStepDetailsToolCallsObject RunStepDeltaStepDetailsToolCallsObject



{-| Details of the message creation by the run step.
-}
type alias RunStepDeltaStepDetailsMessageCreationObject =
    { type_ : RunStepDeltaStepDetailsMessageCreationObjectType
    , messageCreation : Maybe RunStepDeltaStepDetailsMessageCreationObjectMessageCreation
    }


type RunStepDeltaStepDetailsMessageCreationObjectType
    = RunStepDeltaStepDetailsMessageCreationObjectTypeMessageCreation


runStepDeltaStepDetailsMessageCreationObjectTypeVariants : List RunStepDeltaStepDetailsMessageCreationObjectType
runStepDeltaStepDetailsMessageCreationObjectTypeVariants =
    [ RunStepDeltaStepDetailsMessageCreationObjectTypeMessageCreation
    ]


type alias RunStepDeltaStepDetailsMessageCreationObjectMessageCreation =
    { messageId : Maybe String
    }


{-| Details of the Code Interpreter tool call the run step was involved in.
-}
type alias RunStepDeltaStepDetailsToolCallsCodeObject =
    { index : Int
    , id : Maybe String
    , type_ : RunStepDeltaStepDetailsToolCallsCodeObjectType
    , codeInterpreter : Maybe RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter
    }


type RunStepDeltaStepDetailsToolCallsCodeObjectType
    = RunStepDeltaStepDetailsToolCallsCodeObjectTypeCodeInterpreter


runStepDeltaStepDetailsToolCallsCodeObjectTypeVariants : List RunStepDeltaStepDetailsToolCallsCodeObjectType
runStepDeltaStepDetailsToolCallsCodeObjectTypeVariants =
    [ RunStepDeltaStepDetailsToolCallsCodeObjectTypeCodeInterpreter
    ]


{-| The Code Interpreter tool call definition.
-}
type alias RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter =
    { input : Maybe String
    , outputs : Maybe ( List RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner )
    }


type RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner
    = RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerRunStepDeltaStepDetailsToolCallsCodeOutputImageObject RunStepDeltaStepDetailsToolCallsCodeOutputImageObject
    | RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject



type alias RunStepDeltaStepDetailsToolCallsCodeOutputImageObject =
    { index : Int
    , type_ : RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType
    , image : Maybe RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImage
    }


type RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType
    = RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectTypeImage


runStepDeltaStepDetailsToolCallsCodeOutputImageObjectTypeVariants : List RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType
runStepDeltaStepDetailsToolCallsCodeOutputImageObjectTypeVariants =
    [ RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectTypeImage
    ]


type alias RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImage =
    { fileId : Maybe String
    }


{-| Text output from the Code Interpreter tool call as part of a run step.
-}
type alias RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject =
    { index : Int
    , type_ : RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType
    , logs : Maybe String
    }


type RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType
    = RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectTypeLogs


runStepDeltaStepDetailsToolCallsCodeOutputLogsObjectTypeVariants : List RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType
runStepDeltaStepDetailsToolCallsCodeOutputLogsObjectTypeVariants =
    [ RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectTypeLogs
    ]


type alias RunStepDeltaStepDetailsToolCallsFunctionObject =
    { index : Int
    , id : Maybe String
    , type_ : RunStepDeltaStepDetailsToolCallsFunctionObjectType
    , function : Maybe RunStepDeltaStepDetailsToolCallsFunctionObjectFunction
    }


type RunStepDeltaStepDetailsToolCallsFunctionObjectType
    = RunStepDeltaStepDetailsToolCallsFunctionObjectTypeFunction


runStepDeltaStepDetailsToolCallsFunctionObjectTypeVariants : List RunStepDeltaStepDetailsToolCallsFunctionObjectType
runStepDeltaStepDetailsToolCallsFunctionObjectTypeVariants =
    [ RunStepDeltaStepDetailsToolCallsFunctionObjectTypeFunction
    ]


{-| The definition of the function that was called.
-}
type alias RunStepDeltaStepDetailsToolCallsFunctionObjectFunction =
    { name : Maybe String
    , arguments : Maybe String
    , output : Maybe String
    }


{-| Details of the tool call.
-}
type alias RunStepDeltaStepDetailsToolCallsObject =
    { type_ : RunStepDeltaStepDetailsToolCallsObjectType
    , toolCalls : Maybe ( List RunStepDeltaStepDetailsToolCallsObjectToolCallsInner )
    }


type RunStepDeltaStepDetailsToolCallsObjectType
    = RunStepDeltaStepDetailsToolCallsObjectTypeToolCalls


runStepDeltaStepDetailsToolCallsObjectTypeVariants : List RunStepDeltaStepDetailsToolCallsObjectType
runStepDeltaStepDetailsToolCallsObjectTypeVariants =
    [ RunStepDeltaStepDetailsToolCallsObjectTypeToolCalls
    ]


type RunStepDeltaStepDetailsToolCallsObjectToolCallsInner
    = RunStepDeltaStepDetailsToolCallsObjectToolCallsInnerRunStepDeltaStepDetailsToolCallsCodeObject RunStepDeltaStepDetailsToolCallsCodeObject
    | RunStepDeltaStepDetailsToolCallsObjectToolCallsInnerRunStepDeltaStepDetailsToolCallsFunctionObject RunStepDeltaStepDetailsToolCallsFunctionObject
    | RunStepDeltaStepDetailsToolCallsObjectToolCallsInnerRunStepDeltaStepDetailsToolCallsRetrievalObject RunStepDeltaStepDetailsToolCallsRetrievalObject



type alias RunStepDeltaStepDetailsToolCallsRetrievalObject =
    { index : Int
    , id : Maybe String
    , type_ : RunStepDeltaStepDetailsToolCallsRetrievalObjectType
    , retrieval : Maybe Object
    }


type RunStepDeltaStepDetailsToolCallsRetrievalObjectType
    = RunStepDeltaStepDetailsToolCallsRetrievalObjectTypeRetrieval


runStepDeltaStepDetailsToolCallsRetrievalObjectTypeVariants : List RunStepDeltaStepDetailsToolCallsRetrievalObjectType
runStepDeltaStepDetailsToolCallsRetrievalObjectTypeVariants =
    [ RunStepDeltaStepDetailsToolCallsRetrievalObjectTypeRetrieval
    ]


{-| Details of the message creation by the run step.
-}
type alias RunStepDetailsMessageCreationObject =
    { type_ : RunStepDetailsMessageCreationObjectType
    , messageCreation : RunStepDetailsMessageCreationObjectMessageCreation
    }


type RunStepDetailsMessageCreationObjectType
    = RunStepDetailsMessageCreationObjectTypeMessageCreation


runStepDetailsMessageCreationObjectTypeVariants : List RunStepDetailsMessageCreationObjectType
runStepDetailsMessageCreationObjectTypeVariants =
    [ RunStepDetailsMessageCreationObjectTypeMessageCreation
    ]


type alias RunStepDetailsMessageCreationObjectMessageCreation =
    { messageId : String
    }


{-| Details of the Code Interpreter tool call the run step was involved in.
-}
type alias RunStepDetailsToolCallsCodeObject =
    { id : String
    , type_ : RunStepDetailsToolCallsCodeObjectType
    , codeInterpreter : RunStepDetailsToolCallsCodeObjectCodeInterpreter
    }


type RunStepDetailsToolCallsCodeObjectType
    = RunStepDetailsToolCallsCodeObjectTypeCodeInterpreter


runStepDetailsToolCallsCodeObjectTypeVariants : List RunStepDetailsToolCallsCodeObjectType
runStepDetailsToolCallsCodeObjectTypeVariants =
    [ RunStepDetailsToolCallsCodeObjectTypeCodeInterpreter
    ]


{-| The Code Interpreter tool call definition.
-}
type alias RunStepDetailsToolCallsCodeObjectCodeInterpreter =
    { input : String
    , outputs : List RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner
    }


type RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner
    = RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerRunStepDetailsToolCallsCodeOutputImageObject RunStepDetailsToolCallsCodeOutputImageObject
    | RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerRunStepDetailsToolCallsCodeOutputLogsObject RunStepDetailsToolCallsCodeOutputLogsObject



type alias RunStepDetailsToolCallsCodeOutputImageObject =
    { type_ : RunStepDetailsToolCallsCodeOutputImageObjectType
    , image : RunStepDetailsToolCallsCodeOutputImageObjectImage
    }


type RunStepDetailsToolCallsCodeOutputImageObjectType
    = RunStepDetailsToolCallsCodeOutputImageObjectTypeImage


runStepDetailsToolCallsCodeOutputImageObjectTypeVariants : List RunStepDetailsToolCallsCodeOutputImageObjectType
runStepDetailsToolCallsCodeOutputImageObjectTypeVariants =
    [ RunStepDetailsToolCallsCodeOutputImageObjectTypeImage
    ]


type alias RunStepDetailsToolCallsCodeOutputImageObjectImage =
    { fileId : String
    }


{-| Text output from the Code Interpreter tool call as part of a run step.
-}
type alias RunStepDetailsToolCallsCodeOutputLogsObject =
    { type_ : RunStepDetailsToolCallsCodeOutputLogsObjectType
    , logs : String
    }


type RunStepDetailsToolCallsCodeOutputLogsObjectType
    = RunStepDetailsToolCallsCodeOutputLogsObjectTypeLogs


runStepDetailsToolCallsCodeOutputLogsObjectTypeVariants : List RunStepDetailsToolCallsCodeOutputLogsObjectType
runStepDetailsToolCallsCodeOutputLogsObjectTypeVariants =
    [ RunStepDetailsToolCallsCodeOutputLogsObjectTypeLogs
    ]


type alias RunStepDetailsToolCallsFunctionObject =
    { id : String
    , type_ : RunStepDetailsToolCallsFunctionObjectType
    , function : RunStepDetailsToolCallsFunctionObjectFunction
    }


type RunStepDetailsToolCallsFunctionObjectType
    = RunStepDetailsToolCallsFunctionObjectTypeFunction


runStepDetailsToolCallsFunctionObjectTypeVariants : List RunStepDetailsToolCallsFunctionObjectType
runStepDetailsToolCallsFunctionObjectTypeVariants =
    [ RunStepDetailsToolCallsFunctionObjectTypeFunction
    ]


{-| The definition of the function that was called.
-}
type alias RunStepDetailsToolCallsFunctionObjectFunction =
    { name : String
    , arguments : String
    , output : Maybe String
    }


{-| Details of the tool call.
-}
type alias RunStepDetailsToolCallsObject =
    { type_ : RunStepDetailsToolCallsObjectType
    , toolCalls : List RunStepDetailsToolCallsObjectToolCallsInner
    }


type RunStepDetailsToolCallsObjectType
    = RunStepDetailsToolCallsObjectTypeToolCalls


runStepDetailsToolCallsObjectTypeVariants : List RunStepDetailsToolCallsObjectType
runStepDetailsToolCallsObjectTypeVariants =
    [ RunStepDetailsToolCallsObjectTypeToolCalls
    ]


type RunStepDetailsToolCallsObjectToolCallsInner
    = RunStepDetailsToolCallsObjectToolCallsInnerRunStepDetailsToolCallsCodeObject RunStepDetailsToolCallsCodeObject
    | RunStepDetailsToolCallsObjectToolCallsInnerRunStepDetailsToolCallsFunctionObject RunStepDetailsToolCallsFunctionObject
    | RunStepDetailsToolCallsObjectToolCallsInnerRunStepDetailsToolCallsRetrievalObject RunStepDetailsToolCallsRetrievalObject



type alias RunStepDetailsToolCallsRetrievalObject =
    { id : String
    , type_ : RunStepDetailsToolCallsRetrievalObjectType
    , retrieval : Object
    }


type RunStepDetailsToolCallsRetrievalObjectType
    = RunStepDetailsToolCallsRetrievalObjectTypeRetrieval


runStepDetailsToolCallsRetrievalObjectTypeVariants : List RunStepDetailsToolCallsRetrievalObjectType
runStepDetailsToolCallsRetrievalObjectTypeVariants =
    [ RunStepDetailsToolCallsRetrievalObjectTypeRetrieval
    ]


{-| Represents a step in execution of a run. 
-}
type alias RunStepObject =
    { id : String
    , object : RunStepObjectObject
    , createdAt : Int
    , assistantId : String
    , threadId : String
    , runId : String
    , type_ : RunStepObjectType
    , status : RunStepObjectStatus
    , stepDetails : RunStepObjectStepDetails
    , lastError : Maybe RunStepObjectLastError
    , expiredAt : Maybe Int
    , cancelledAt : Maybe Int
    , failedAt : Maybe Int
    , completedAt : Maybe Int
    , metadata : Maybe Object
    , usage : Maybe RunStepCompletionUsage
    }


type RunStepObjectObject
    = RunStepObjectObjectThreadRunStep


runStepObjectObjectVariants : List RunStepObjectObject
runStepObjectObjectVariants =
    [ RunStepObjectObjectThreadRunStep
    ]


type RunStepObjectType
    = RunStepObjectTypeMessageCreation
    | RunStepObjectTypeToolCalls


runStepObjectTypeVariants : List RunStepObjectType
runStepObjectTypeVariants =
    [ RunStepObjectTypeMessageCreation
    , RunStepObjectTypeToolCalls
    ]


type RunStepObjectStatus
    = RunStepObjectStatusInProgress
    | RunStepObjectStatusCancelled
    | RunStepObjectStatusFailed
    | RunStepObjectStatusCompleted
    | RunStepObjectStatusExpired


runStepObjectStatusVariants : List RunStepObjectStatus
runStepObjectStatusVariants =
    [ RunStepObjectStatusInProgress
    , RunStepObjectStatusCancelled
    , RunStepObjectStatusFailed
    , RunStepObjectStatusCompleted
    , RunStepObjectStatusExpired
    ]


{-| The last error associated with this run step. Will be `null` if there are no errors.
-}
type alias RunStepObjectLastError =
    { code : RunStepObjectLastErrorCode
    , message : String
    }


type RunStepObjectLastErrorCode
    = RunStepObjectLastErrorCodeServerError
    | RunStepObjectLastErrorCodeRateLimitExceeded


runStepObjectLastErrorCodeVariants : List RunStepObjectLastErrorCode
runStepObjectLastErrorCodeVariants =
    [ RunStepObjectLastErrorCodeServerError
    , RunStepObjectLastErrorCodeRateLimitExceeded
    ]


{-| The details of the run step.
-}
type RunStepObjectStepDetails
    = RunStepObjectStepDetailsRunStepDetailsMessageCreationObject RunStepDetailsMessageCreationObject
    | RunStepObjectStepDetailsRunStepDetailsToolCallsObject RunStepDetailsToolCallsObject



type RunStepStreamEvent
    = RunStepStreamEventRunStepStreamEventOneOf RunStepStreamEventOneOf
    | RunStepStreamEventRunStepStreamEventOneOf1 RunStepStreamEventOneOf1
    | RunStepStreamEventRunStepStreamEventOneOf2 RunStepStreamEventOneOf2
    | RunStepStreamEventRunStepStreamEventOneOf3 RunStepStreamEventOneOf3
    | RunStepStreamEventRunStepStreamEventOneOf4 RunStepStreamEventOneOf4
    | RunStepStreamEventRunStepStreamEventOneOf5 RunStepStreamEventOneOf5
    | RunStepStreamEventRunStepStreamEventOneOf6 RunStepStreamEventOneOf6



{-| Occurs when a [run step](/docs/api-reference/runs/step-object) is created.
-}
type alias RunStepStreamEventOneOf =
    { event : RunStepStreamEventOneOfEvent
    , data : RunStepObject
    }


type RunStepStreamEventOneOfEvent
    = RunStepStreamEventOneOfEventThreadRunStepCreated


runStepStreamEventOneOfEventVariants : List RunStepStreamEventOneOfEvent
runStepStreamEventOneOfEventVariants =
    [ RunStepStreamEventOneOfEventThreadRunStepCreated
    ]


{-| Occurs when a [run step](/docs/api-reference/runs/step-object) moves to an `in_progress` state.
-}
type alias RunStepStreamEventOneOf1 =
    { event : RunStepStreamEventOneOf1Event
    , data : RunStepObject
    }


type RunStepStreamEventOneOf1Event
    = RunStepStreamEventOneOf1EventThreadRunStepInProgress


runStepStreamEventOneOf1EventVariants : List RunStepStreamEventOneOf1Event
runStepStreamEventOneOf1EventVariants =
    [ RunStepStreamEventOneOf1EventThreadRunStepInProgress
    ]


{-| Occurs when parts of a [run step](/docs/api-reference/runs/step-object) are being streamed.
-}
type alias RunStepStreamEventOneOf2 =
    { event : RunStepStreamEventOneOf2Event
    , data : RunStepDeltaObject
    }


type RunStepStreamEventOneOf2Event
    = RunStepStreamEventOneOf2EventThreadRunStepDelta


runStepStreamEventOneOf2EventVariants : List RunStepStreamEventOneOf2Event
runStepStreamEventOneOf2EventVariants =
    [ RunStepStreamEventOneOf2EventThreadRunStepDelta
    ]


{-| Occurs when a [run step](/docs/api-reference/runs/step-object) is completed.
-}
type alias RunStepStreamEventOneOf3 =
    { event : RunStepStreamEventOneOf3Event
    , data : RunStepObject
    }


type RunStepStreamEventOneOf3Event
    = RunStepStreamEventOneOf3EventThreadRunStepCompleted


runStepStreamEventOneOf3EventVariants : List RunStepStreamEventOneOf3Event
runStepStreamEventOneOf3EventVariants =
    [ RunStepStreamEventOneOf3EventThreadRunStepCompleted
    ]


{-| Occurs when a [run step](/docs/api-reference/runs/step-object) fails.
-}
type alias RunStepStreamEventOneOf4 =
    { event : RunStepStreamEventOneOf4Event
    , data : RunStepObject
    }


type RunStepStreamEventOneOf4Event
    = RunStepStreamEventOneOf4EventThreadRunStepFailed


runStepStreamEventOneOf4EventVariants : List RunStepStreamEventOneOf4Event
runStepStreamEventOneOf4EventVariants =
    [ RunStepStreamEventOneOf4EventThreadRunStepFailed
    ]


{-| Occurs when a [run step](/docs/api-reference/runs/step-object) is cancelled.
-}
type alias RunStepStreamEventOneOf5 =
    { event : RunStepStreamEventOneOf5Event
    , data : RunStepObject
    }


type RunStepStreamEventOneOf5Event
    = RunStepStreamEventOneOf5EventThreadRunStepCancelled


runStepStreamEventOneOf5EventVariants : List RunStepStreamEventOneOf5Event
runStepStreamEventOneOf5EventVariants =
    [ RunStepStreamEventOneOf5EventThreadRunStepCancelled
    ]


{-| Occurs when a [run step](/docs/api-reference/runs/step-object) expires.
-}
type alias RunStepStreamEventOneOf6 =
    { event : RunStepStreamEventOneOf6Event
    , data : RunStepObject
    }


type RunStepStreamEventOneOf6Event
    = RunStepStreamEventOneOf6EventThreadRunStepExpired


runStepStreamEventOneOf6EventVariants : List RunStepStreamEventOneOf6Event
runStepStreamEventOneOf6EventVariants =
    [ RunStepStreamEventOneOf6EventThreadRunStepExpired
    ]


type RunStreamEvent
    = RunStreamEventRunStreamEventOneOf RunStreamEventOneOf
    | RunStreamEventRunStreamEventOneOf1 RunStreamEventOneOf1
    | RunStreamEventRunStreamEventOneOf2 RunStreamEventOneOf2
    | RunStreamEventRunStreamEventOneOf3 RunStreamEventOneOf3
    | RunStreamEventRunStreamEventOneOf4 RunStreamEventOneOf4
    | RunStreamEventRunStreamEventOneOf5 RunStreamEventOneOf5
    | RunStreamEventRunStreamEventOneOf6 RunStreamEventOneOf6
    | RunStreamEventRunStreamEventOneOf7 RunStreamEventOneOf7
    | RunStreamEventRunStreamEventOneOf8 RunStreamEventOneOf8



{-| Occurs when a new [run](/docs/api-reference/runs/object) is created.
-}
type alias RunStreamEventOneOf =
    { event : RunStreamEventOneOfEvent
    , data : RunObject
    }


type RunStreamEventOneOfEvent
    = RunStreamEventOneOfEventThreadRunCreated


runStreamEventOneOfEventVariants : List RunStreamEventOneOfEvent
runStreamEventOneOfEventVariants =
    [ RunStreamEventOneOfEventThreadRunCreated
    ]


{-| Occurs when a [run](/docs/api-reference/runs/object) moves to a `queued` status.
-}
type alias RunStreamEventOneOf1 =
    { event : RunStreamEventOneOf1Event
    , data : RunObject
    }


type RunStreamEventOneOf1Event
    = RunStreamEventOneOf1EventThreadRunQueued


runStreamEventOneOf1EventVariants : List RunStreamEventOneOf1Event
runStreamEventOneOf1EventVariants =
    [ RunStreamEventOneOf1EventThreadRunQueued
    ]


{-| Occurs when a [run](/docs/api-reference/runs/object) moves to an `in_progress` status.
-}
type alias RunStreamEventOneOf2 =
    { event : RunStreamEventOneOf2Event
    , data : RunObject
    }


type RunStreamEventOneOf2Event
    = RunStreamEventOneOf2EventThreadRunInProgress


runStreamEventOneOf2EventVariants : List RunStreamEventOneOf2Event
runStreamEventOneOf2EventVariants =
    [ RunStreamEventOneOf2EventThreadRunInProgress
    ]


{-| Occurs when a [run](/docs/api-reference/runs/object) moves to a `requires_action` status.
-}
type alias RunStreamEventOneOf3 =
    { event : RunStreamEventOneOf3Event
    , data : RunObject
    }


type RunStreamEventOneOf3Event
    = RunStreamEventOneOf3EventThreadRunRequiresAction


runStreamEventOneOf3EventVariants : List RunStreamEventOneOf3Event
runStreamEventOneOf3EventVariants =
    [ RunStreamEventOneOf3EventThreadRunRequiresAction
    ]


{-| Occurs when a [run](/docs/api-reference/runs/object) is completed.
-}
type alias RunStreamEventOneOf4 =
    { event : RunStreamEventOneOf4Event
    , data : RunObject
    }


type RunStreamEventOneOf4Event
    = RunStreamEventOneOf4EventThreadRunCompleted


runStreamEventOneOf4EventVariants : List RunStreamEventOneOf4Event
runStreamEventOneOf4EventVariants =
    [ RunStreamEventOneOf4EventThreadRunCompleted
    ]


{-| Occurs when a [run](/docs/api-reference/runs/object) fails.
-}
type alias RunStreamEventOneOf5 =
    { event : RunStreamEventOneOf5Event
    , data : RunObject
    }


type RunStreamEventOneOf5Event
    = RunStreamEventOneOf5EventThreadRunFailed


runStreamEventOneOf5EventVariants : List RunStreamEventOneOf5Event
runStreamEventOneOf5EventVariants =
    [ RunStreamEventOneOf5EventThreadRunFailed
    ]


{-| Occurs when a [run](/docs/api-reference/runs/object) moves to a `cancelling` status.
-}
type alias RunStreamEventOneOf6 =
    { event : RunStreamEventOneOf6Event
    , data : RunObject
    }


type RunStreamEventOneOf6Event
    = RunStreamEventOneOf6EventThreadRunCancelling


runStreamEventOneOf6EventVariants : List RunStreamEventOneOf6Event
runStreamEventOneOf6EventVariants =
    [ RunStreamEventOneOf6EventThreadRunCancelling
    ]


{-| Occurs when a [run](/docs/api-reference/runs/object) is cancelled.
-}
type alias RunStreamEventOneOf7 =
    { event : RunStreamEventOneOf7Event
    , data : RunObject
    }


type RunStreamEventOneOf7Event
    = RunStreamEventOneOf7EventThreadRunCancelled


runStreamEventOneOf7EventVariants : List RunStreamEventOneOf7Event
runStreamEventOneOf7EventVariants =
    [ RunStreamEventOneOf7EventThreadRunCancelled
    ]


{-| Occurs when a [run](/docs/api-reference/runs/object) expires.
-}
type alias RunStreamEventOneOf8 =
    { event : RunStreamEventOneOf8Event
    , data : RunObject
    }


type RunStreamEventOneOf8Event
    = RunStreamEventOneOf8EventThreadRunExpired


runStreamEventOneOf8EventVariants : List RunStreamEventOneOf8Event
runStreamEventOneOf8EventVariants =
    [ RunStreamEventOneOf8EventThreadRunExpired
    ]


{-| Tool call objects
-}
type alias RunToolCallObject =
    { id : String
    , type_ : RunToolCallObjectType
    , function : RunToolCallObjectFunction
    }


type RunToolCallObjectType
    = RunToolCallObjectTypeFunction


runToolCallObjectTypeVariants : List RunToolCallObjectType
runToolCallObjectTypeVariants =
    [ RunToolCallObjectTypeFunction
    ]


{-| The function definition.
-}
type alias RunToolCallObjectFunction =
    { name : String
    , arguments : String
    }


type alias SubmitToolOutputsRunRequest =
    { toolOutputs : List SubmitToolOutputsRunRequestToolOutputsInner
    , stream : Maybe Bool
    }


type alias SubmitToolOutputsRunRequestToolOutputsInner =
    { toolCallId : Maybe String
    , output : Maybe String
    }


{-| Represents a thread that contains [messages](/docs/api-reference/messages).
-}
type alias ThreadObject =
    { id : String
    , object : ThreadObjectObject
    , createdAt : Int
    , metadata : Maybe Object
    }


type ThreadObjectObject
    = ThreadObjectObjectThread


threadObjectObjectVariants : List ThreadObjectObject
threadObjectObjectVariants =
    [ ThreadObjectObjectThread
    ]


type ThreadStreamEvent
    = ThreadStreamEventThreadStreamEventOneOf ThreadStreamEventOneOf



{-| Occurs when a new [thread](/docs/api-reference/threads/object) is created.
-}
type alias ThreadStreamEventOneOf =
    { event : ThreadStreamEventOneOfEvent
    , data : ThreadObject
    }


type ThreadStreamEventOneOfEvent
    = ThreadStreamEventOneOfEventThreadCreated


threadStreamEventOneOfEventVariants : List ThreadStreamEventOneOfEvent
threadStreamEventOneOfEventVariants =
    [ ThreadStreamEventOneOfEventThreadCreated
    ]


type alias TranscriptionSegment =
    { id : Int
    , seek : Int
    , start : Float
    , end : Float
    , text : String
    , tokens : List Int
    , temperature : Float
    , avgLogprob : Float
    , compressionRatio : Float
    , noSpeechProb : Float
    }


type alias TranscriptionWord =
    { word : String
    , start : Float
    , end : Float
    }


type alias TruncationObject =
    { type_ : Maybe TruncationObjectType
    , lastMessages : Maybe Int
    }


type TruncationObjectType
    = TruncationObjectTypeAuto
    | TruncationObjectTypeLastMessages


truncationObjectTypeVariants : List TruncationObjectType
truncationObjectTypeVariants =
    [ TruncationObjectTypeAuto
    , TruncationObjectTypeLastMessages
    ]


-- ENCODER


encodeAssistantFileObject : AssistantFileObject -> Json.Encode.Value
encodeAssistantFileObject =
    encodeObject << encodeAssistantFileObjectPairs


encodeAssistantFileObjectWithTag : ( String, String ) -> AssistantFileObject -> Json.Encode.Value
encodeAssistantFileObjectWithTag (tagField, tag) model =
    encodeObject (encodeAssistantFileObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAssistantFileObjectPairs : AssistantFileObject -> List EncodedField
encodeAssistantFileObjectPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "object" encodeAssistantFileObjectObject model.object
            , encode "created_at" Json.Encode.int model.createdAt
            , encode "assistant_id" Json.Encode.string model.assistantId
            ]
    in
    pairs

stringFromAssistantFileObjectObject : AssistantFileObjectObject -> String
stringFromAssistantFileObjectObject model =
    case model of
        AssistantFileObjectObjectAssistantFile ->
            "assistant.file"


encodeAssistantFileObjectObject : AssistantFileObjectObject -> Json.Encode.Value
encodeAssistantFileObjectObject =
    Json.Encode.string << stringFromAssistantFileObjectObject



encodeAssistantObject : AssistantObject -> Json.Encode.Value
encodeAssistantObject =
    encodeObject << encodeAssistantObjectPairs


encodeAssistantObjectWithTag : ( String, String ) -> AssistantObject -> Json.Encode.Value
encodeAssistantObjectWithTag (tagField, tag) model =
    encodeObject (encodeAssistantObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAssistantObjectPairs : AssistantObject -> List EncodedField
encodeAssistantObjectPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "object" encodeAssistantObjectObject model.object
            , encode "created_at" Json.Encode.int model.createdAt
            , encodeNullable "name" Json.Encode.string model.name
            , encodeNullable "description" Json.Encode.string model.description
            , encode "model" Json.Encode.string model.model
            , encodeNullable "instructions" Json.Encode.string model.instructions
            , encode "tools" (Json.Encode.list encodeAssistantObjectToolsInner) model.tools
            , encode "file_ids" (Json.Encode.list Json.Encode.string) model.fileIds
            , encodeNullable "metadata" encodeObject model.metadata
            ]
    in
    pairs

stringFromAssistantObjectObject : AssistantObjectObject -> String
stringFromAssistantObjectObject model =
    case model of
        AssistantObjectObjectAssistant ->
            "assistant"


encodeAssistantObjectObject : AssistantObjectObject -> Json.Encode.Value
encodeAssistantObjectObject =
    Json.Encode.string << stringFromAssistantObjectObject



encodeAssistantObjectToolsInner : AssistantObjectToolsInner -> Json.Encode.Value
encodeAssistantObjectToolsInner model =
    case model of
        AssistantObjectToolsInnerAssistantToolsCode subModel ->
            encodeAssistantToolsCode subModel


        AssistantObjectToolsInnerAssistantToolsFunction subModel ->
            encodeAssistantToolsFunction subModel


        AssistantObjectToolsInnerAssistantToolsRetrieval subModel ->
            encodeAssistantToolsRetrieval subModel




encodeAssistantStreamEvent : AssistantStreamEvent -> Json.Encode.Value
encodeAssistantStreamEvent model =
    case model of
        AssistantStreamEventDoneEvent subModel ->
            encodeDoneEvent subModel


        AssistantStreamEventErrorEvent subModel ->
            encodeErrorEvent subModel


        AssistantStreamEventMessageStreamEvent subModel ->
            encodeMessageStreamEvent subModel


        AssistantStreamEventRunStepStreamEvent subModel ->
            encodeRunStepStreamEvent subModel


        AssistantStreamEventRunStreamEvent subModel ->
            encodeRunStreamEvent subModel


        AssistantStreamEventThreadStreamEvent subModel ->
            encodeThreadStreamEvent subModel




encodeAssistantToolsCode : AssistantToolsCode -> Json.Encode.Value
encodeAssistantToolsCode =
    encodeObject << encodeAssistantToolsCodePairs


encodeAssistantToolsCodeWithTag : ( String, String ) -> AssistantToolsCode -> Json.Encode.Value
encodeAssistantToolsCodeWithTag (tagField, tag) model =
    encodeObject (encodeAssistantToolsCodePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAssistantToolsCodePairs : AssistantToolsCode -> List EncodedField
encodeAssistantToolsCodePairs model =
    let
        pairs =
            [ encode "type" encodeAssistantToolsCodeType model.type_
            ]
    in
    pairs

stringFromAssistantToolsCodeType : AssistantToolsCodeType -> String
stringFromAssistantToolsCodeType model =
    case model of
        AssistantToolsCodeTypeCodeInterpreter ->
            "code_interpreter"


encodeAssistantToolsCodeType : AssistantToolsCodeType -> Json.Encode.Value
encodeAssistantToolsCodeType =
    Json.Encode.string << stringFromAssistantToolsCodeType



encodeAssistantToolsFunction : AssistantToolsFunction -> Json.Encode.Value
encodeAssistantToolsFunction =
    encodeObject << encodeAssistantToolsFunctionPairs


encodeAssistantToolsFunctionWithTag : ( String, String ) -> AssistantToolsFunction -> Json.Encode.Value
encodeAssistantToolsFunctionWithTag (tagField, tag) model =
    encodeObject (encodeAssistantToolsFunctionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAssistantToolsFunctionPairs : AssistantToolsFunction -> List EncodedField
encodeAssistantToolsFunctionPairs model =
    let
        pairs =
            [ encode "type" encodeAssistantToolsFunctionType model.type_
            , encode "function" encodeFunctionObject model.function
            ]
    in
    pairs

stringFromAssistantToolsFunctionType : AssistantToolsFunctionType -> String
stringFromAssistantToolsFunctionType model =
    case model of
        AssistantToolsFunctionTypeFunction ->
            "function"


encodeAssistantToolsFunctionType : AssistantToolsFunctionType -> Json.Encode.Value
encodeAssistantToolsFunctionType =
    Json.Encode.string << stringFromAssistantToolsFunctionType



encodeAssistantToolsRetrieval : AssistantToolsRetrieval -> Json.Encode.Value
encodeAssistantToolsRetrieval =
    encodeObject << encodeAssistantToolsRetrievalPairs


encodeAssistantToolsRetrievalWithTag : ( String, String ) -> AssistantToolsRetrieval -> Json.Encode.Value
encodeAssistantToolsRetrievalWithTag (tagField, tag) model =
    encodeObject (encodeAssistantToolsRetrievalPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAssistantToolsRetrievalPairs : AssistantToolsRetrieval -> List EncodedField
encodeAssistantToolsRetrievalPairs model =
    let
        pairs =
            [ encode "type" encodeAssistantToolsRetrievalType model.type_
            ]
    in
    pairs

stringFromAssistantToolsRetrievalType : AssistantToolsRetrievalType -> String
stringFromAssistantToolsRetrievalType model =
    case model of
        AssistantToolsRetrievalTypeRetrieval ->
            "retrieval"


encodeAssistantToolsRetrievalType : AssistantToolsRetrievalType -> Json.Encode.Value
encodeAssistantToolsRetrievalType =
    Json.Encode.string << stringFromAssistantToolsRetrievalType



encodeAssistantsApiNamedToolChoice : AssistantsApiNamedToolChoice -> Json.Encode.Value
encodeAssistantsApiNamedToolChoice =
    encodeObject << encodeAssistantsApiNamedToolChoicePairs


encodeAssistantsApiNamedToolChoiceWithTag : ( String, String ) -> AssistantsApiNamedToolChoice -> Json.Encode.Value
encodeAssistantsApiNamedToolChoiceWithTag (tagField, tag) model =
    encodeObject (encodeAssistantsApiNamedToolChoicePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAssistantsApiNamedToolChoicePairs : AssistantsApiNamedToolChoice -> List EncodedField
encodeAssistantsApiNamedToolChoicePairs model =
    let
        pairs =
            [ encode "type" encodeAssistantsApiNamedToolChoiceType model.type_
            , maybeEncode "function" encodeChatCompletionNamedToolChoiceFunction model.function
            ]
    in
    pairs

stringFromAssistantsApiNamedToolChoiceType : AssistantsApiNamedToolChoiceType -> String
stringFromAssistantsApiNamedToolChoiceType model =
    case model of
        AssistantsApiNamedToolChoiceTypeFunction ->
            "function"

        AssistantsApiNamedToolChoiceTypeCodeInterpreter ->
            "code_interpreter"

        AssistantsApiNamedToolChoiceTypeRetrieval ->
            "retrieval"


encodeAssistantsApiNamedToolChoiceType : AssistantsApiNamedToolChoiceType -> Json.Encode.Value
encodeAssistantsApiNamedToolChoiceType =
    Json.Encode.string << stringFromAssistantsApiNamedToolChoiceType



encodeAssistantsApiResponseFormat : AssistantsApiResponseFormat -> Json.Encode.Value
encodeAssistantsApiResponseFormat =
    encodeObject << encodeAssistantsApiResponseFormatPairs


encodeAssistantsApiResponseFormatWithTag : ( String, String ) -> AssistantsApiResponseFormat -> Json.Encode.Value
encodeAssistantsApiResponseFormatWithTag (tagField, tag) model =
    encodeObject (encodeAssistantsApiResponseFormatPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAssistantsApiResponseFormatPairs : AssistantsApiResponseFormat -> List EncodedField
encodeAssistantsApiResponseFormatPairs model =
    let
        pairs =
            [ maybeEncode "type" encodeAssistantsApiResponseFormatType model.type_
            ]
    in
    pairs

stringFromAssistantsApiResponseFormatType : AssistantsApiResponseFormatType -> String
stringFromAssistantsApiResponseFormatType model =
    case model of
        AssistantsApiResponseFormatTypeText ->
            "text"

        AssistantsApiResponseFormatTypeJsonObject ->
            "json_object"


encodeAssistantsApiResponseFormatType : AssistantsApiResponseFormatType -> Json.Encode.Value
encodeAssistantsApiResponseFormatType =
    Json.Encode.string << stringFromAssistantsApiResponseFormatType



encodeAssistantsApiResponseFormatOption : AssistantsApiResponseFormatOption -> Json.Encode.Value
encodeAssistantsApiResponseFormatOption model =
    case model of
        AssistantsApiResponseFormatOptionAssistantsApiResponseFormat subModel ->
            encodeAssistantsApiResponseFormat subModel


        AssistantsApiResponseFormatOptionString subModel ->
            encodeString subModel




encodeAssistantsApiToolChoiceOption : AssistantsApiToolChoiceOption -> Json.Encode.Value
encodeAssistantsApiToolChoiceOption model =
    case model of
        AssistantsApiToolChoiceOptionAssistantsApiNamedToolChoice subModel ->
            encodeAssistantsApiNamedToolChoice subModel


        AssistantsApiToolChoiceOptionString subModel ->
            encodeString subModel




encodeChatCompletionFunctionCallOption : ChatCompletionFunctionCallOption -> Json.Encode.Value
encodeChatCompletionFunctionCallOption =
    encodeObject << encodeChatCompletionFunctionCallOptionPairs


encodeChatCompletionFunctionCallOptionWithTag : ( String, String ) -> ChatCompletionFunctionCallOption -> Json.Encode.Value
encodeChatCompletionFunctionCallOptionWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionFunctionCallOptionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionFunctionCallOptionPairs : ChatCompletionFunctionCallOption -> List EncodedField
encodeChatCompletionFunctionCallOptionPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeChatCompletionFunctions : ChatCompletionFunctions -> Json.Encode.Value
encodeChatCompletionFunctions =
    encodeObject << encodeChatCompletionFunctionsPairs


encodeChatCompletionFunctionsWithTag : ( String, String ) -> ChatCompletionFunctions -> Json.Encode.Value
encodeChatCompletionFunctionsWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionFunctionsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionFunctionsPairs : ChatCompletionFunctions -> List EncodedField
encodeChatCompletionFunctionsPairs model =
    let
        pairs =
            [ maybeEncode "description" Json.Encode.string model.description
            , encode "name" Json.Encode.string model.name
            , maybeEncode "parameters" (Json.Encode.dict identity encodeAnyType) model.parameters
            ]
    in
    pairs


encodeChatCompletionMessageToolCall : ChatCompletionMessageToolCall -> Json.Encode.Value
encodeChatCompletionMessageToolCall =
    encodeObject << encodeChatCompletionMessageToolCallPairs


encodeChatCompletionMessageToolCallWithTag : ( String, String ) -> ChatCompletionMessageToolCall -> Json.Encode.Value
encodeChatCompletionMessageToolCallWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionMessageToolCallPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionMessageToolCallPairs : ChatCompletionMessageToolCall -> List EncodedField
encodeChatCompletionMessageToolCallPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "type" encodeChatCompletionMessageToolCallType model.type_
            , encode "function" encodeChatCompletionMessageToolCallFunction model.function
            ]
    in
    pairs

stringFromChatCompletionMessageToolCallType : ChatCompletionMessageToolCallType -> String
stringFromChatCompletionMessageToolCallType model =
    case model of
        ChatCompletionMessageToolCallTypeFunction ->
            "function"


encodeChatCompletionMessageToolCallType : ChatCompletionMessageToolCallType -> Json.Encode.Value
encodeChatCompletionMessageToolCallType =
    Json.Encode.string << stringFromChatCompletionMessageToolCallType



encodeChatCompletionMessageToolCallChunk : ChatCompletionMessageToolCallChunk -> Json.Encode.Value
encodeChatCompletionMessageToolCallChunk =
    encodeObject << encodeChatCompletionMessageToolCallChunkPairs


encodeChatCompletionMessageToolCallChunkWithTag : ( String, String ) -> ChatCompletionMessageToolCallChunk -> Json.Encode.Value
encodeChatCompletionMessageToolCallChunkWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionMessageToolCallChunkPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionMessageToolCallChunkPairs : ChatCompletionMessageToolCallChunk -> List EncodedField
encodeChatCompletionMessageToolCallChunkPairs model =
    let
        pairs =
            [ encode "index" Json.Encode.int model.index
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "type" encodeChatCompletionMessageToolCallChunkType model.type_
            , maybeEncode "function" encodeChatCompletionMessageToolCallChunkFunction model.function
            ]
    in
    pairs

stringFromChatCompletionMessageToolCallChunkType : ChatCompletionMessageToolCallChunkType -> String
stringFromChatCompletionMessageToolCallChunkType model =
    case model of
        ChatCompletionMessageToolCallChunkTypeFunction ->
            "function"


encodeChatCompletionMessageToolCallChunkType : ChatCompletionMessageToolCallChunkType -> Json.Encode.Value
encodeChatCompletionMessageToolCallChunkType =
    Json.Encode.string << stringFromChatCompletionMessageToolCallChunkType



encodeChatCompletionMessageToolCallChunkFunction : ChatCompletionMessageToolCallChunkFunction -> Json.Encode.Value
encodeChatCompletionMessageToolCallChunkFunction =
    encodeObject << encodeChatCompletionMessageToolCallChunkFunctionPairs


encodeChatCompletionMessageToolCallChunkFunctionWithTag : ( String, String ) -> ChatCompletionMessageToolCallChunkFunction -> Json.Encode.Value
encodeChatCompletionMessageToolCallChunkFunctionWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionMessageToolCallChunkFunctionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionMessageToolCallChunkFunctionPairs : ChatCompletionMessageToolCallChunkFunction -> List EncodedField
encodeChatCompletionMessageToolCallChunkFunctionPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "arguments" Json.Encode.string model.arguments
            ]
    in
    pairs


encodeChatCompletionMessageToolCallFunction : ChatCompletionMessageToolCallFunction -> Json.Encode.Value
encodeChatCompletionMessageToolCallFunction =
    encodeObject << encodeChatCompletionMessageToolCallFunctionPairs


encodeChatCompletionMessageToolCallFunctionWithTag : ( String, String ) -> ChatCompletionMessageToolCallFunction -> Json.Encode.Value
encodeChatCompletionMessageToolCallFunctionWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionMessageToolCallFunctionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionMessageToolCallFunctionPairs : ChatCompletionMessageToolCallFunction -> List EncodedField
encodeChatCompletionMessageToolCallFunctionPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "arguments" Json.Encode.string model.arguments
            ]
    in
    pairs


encodeChatCompletionNamedToolChoice : ChatCompletionNamedToolChoice -> Json.Encode.Value
encodeChatCompletionNamedToolChoice =
    encodeObject << encodeChatCompletionNamedToolChoicePairs


encodeChatCompletionNamedToolChoiceWithTag : ( String, String ) -> ChatCompletionNamedToolChoice -> Json.Encode.Value
encodeChatCompletionNamedToolChoiceWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionNamedToolChoicePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionNamedToolChoicePairs : ChatCompletionNamedToolChoice -> List EncodedField
encodeChatCompletionNamedToolChoicePairs model =
    let
        pairs =
            [ encode "type" encodeChatCompletionNamedToolChoiceType model.type_
            , encode "function" encodeChatCompletionNamedToolChoiceFunction model.function
            ]
    in
    pairs

stringFromChatCompletionNamedToolChoiceType : ChatCompletionNamedToolChoiceType -> String
stringFromChatCompletionNamedToolChoiceType model =
    case model of
        ChatCompletionNamedToolChoiceTypeFunction ->
            "function"


encodeChatCompletionNamedToolChoiceType : ChatCompletionNamedToolChoiceType -> Json.Encode.Value
encodeChatCompletionNamedToolChoiceType =
    Json.Encode.string << stringFromChatCompletionNamedToolChoiceType



encodeChatCompletionNamedToolChoiceFunction : ChatCompletionNamedToolChoiceFunction -> Json.Encode.Value
encodeChatCompletionNamedToolChoiceFunction =
    encodeObject << encodeChatCompletionNamedToolChoiceFunctionPairs


encodeChatCompletionNamedToolChoiceFunctionWithTag : ( String, String ) -> ChatCompletionNamedToolChoiceFunction -> Json.Encode.Value
encodeChatCompletionNamedToolChoiceFunctionWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionNamedToolChoiceFunctionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionNamedToolChoiceFunctionPairs : ChatCompletionNamedToolChoiceFunction -> List EncodedField
encodeChatCompletionNamedToolChoiceFunctionPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeChatCompletionRequestAssistantMessage : ChatCompletionRequestAssistantMessage -> Json.Encode.Value
encodeChatCompletionRequestAssistantMessage =
    encodeObject << encodeChatCompletionRequestAssistantMessagePairs


encodeChatCompletionRequestAssistantMessageWithTag : ( String, String ) -> ChatCompletionRequestAssistantMessage -> Json.Encode.Value
encodeChatCompletionRequestAssistantMessageWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionRequestAssistantMessagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionRequestAssistantMessagePairs : ChatCompletionRequestAssistantMessage -> List EncodedField
encodeChatCompletionRequestAssistantMessagePairs model =
    let
        pairs =
            [ maybeEncodeNullable "content" Json.Encode.string model.content
            , encode "role" encodeChatCompletionRequestAssistantMessageRole model.role
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "tool_calls" (Json.Encode.list encodeChatCompletionMessageToolCall) model.toolCalls
            , maybeEncode "function_call" encodeChatCompletionRequestAssistantMessageFunctionCall model.functionCall
            ]
    in
    pairs

stringFromChatCompletionRequestAssistantMessageRole : ChatCompletionRequestAssistantMessageRole -> String
stringFromChatCompletionRequestAssistantMessageRole model =
    case model of
        ChatCompletionRequestAssistantMessageRoleAssistant ->
            "assistant"


encodeChatCompletionRequestAssistantMessageRole : ChatCompletionRequestAssistantMessageRole -> Json.Encode.Value
encodeChatCompletionRequestAssistantMessageRole =
    Json.Encode.string << stringFromChatCompletionRequestAssistantMessageRole



encodeChatCompletionRequestAssistantMessageFunctionCall : ChatCompletionRequestAssistantMessageFunctionCall -> Json.Encode.Value
encodeChatCompletionRequestAssistantMessageFunctionCall =
    encodeObject << encodeChatCompletionRequestAssistantMessageFunctionCallPairs


encodeChatCompletionRequestAssistantMessageFunctionCallWithTag : ( String, String ) -> ChatCompletionRequestAssistantMessageFunctionCall -> Json.Encode.Value
encodeChatCompletionRequestAssistantMessageFunctionCallWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionRequestAssistantMessageFunctionCallPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionRequestAssistantMessageFunctionCallPairs : ChatCompletionRequestAssistantMessageFunctionCall -> List EncodedField
encodeChatCompletionRequestAssistantMessageFunctionCallPairs model =
    let
        pairs =
            [ encode "arguments" Json.Encode.string model.arguments
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeChatCompletionRequestFunctionMessage : ChatCompletionRequestFunctionMessage -> Json.Encode.Value
encodeChatCompletionRequestFunctionMessage =
    encodeObject << encodeChatCompletionRequestFunctionMessagePairs


encodeChatCompletionRequestFunctionMessageWithTag : ( String, String ) -> ChatCompletionRequestFunctionMessage -> Json.Encode.Value
encodeChatCompletionRequestFunctionMessageWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionRequestFunctionMessagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionRequestFunctionMessagePairs : ChatCompletionRequestFunctionMessage -> List EncodedField
encodeChatCompletionRequestFunctionMessagePairs model =
    let
        pairs =
            [ encode "role" encodeChatCompletionRequestFunctionMessageRole model.role
            , encodeNullable "content" Json.Encode.string model.content
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs

stringFromChatCompletionRequestFunctionMessageRole : ChatCompletionRequestFunctionMessageRole -> String
stringFromChatCompletionRequestFunctionMessageRole model =
    case model of
        ChatCompletionRequestFunctionMessageRoleFunction ->
            "function"


encodeChatCompletionRequestFunctionMessageRole : ChatCompletionRequestFunctionMessageRole -> Json.Encode.Value
encodeChatCompletionRequestFunctionMessageRole =
    Json.Encode.string << stringFromChatCompletionRequestFunctionMessageRole



encodeChatCompletionRequestMessage : ChatCompletionRequestMessage -> Json.Encode.Value
encodeChatCompletionRequestMessage model =
    case model of
        ChatCompletionRequestMessageChatCompletionRequestAssistantMessage subModel ->
            encodeChatCompletionRequestAssistantMessage subModel


        ChatCompletionRequestMessageChatCompletionRequestFunctionMessage subModel ->
            encodeChatCompletionRequestFunctionMessage subModel


        ChatCompletionRequestMessageChatCompletionRequestSystemMessage subModel ->
            encodeChatCompletionRequestSystemMessage subModel


        ChatCompletionRequestMessageChatCompletionRequestToolMessage subModel ->
            encodeChatCompletionRequestToolMessage subModel


        ChatCompletionRequestMessageChatCompletionRequestUserMessage subModel ->
            encodeChatCompletionRequestUserMessage subModel




encodeChatCompletionRequestMessageContentPart : ChatCompletionRequestMessageContentPart -> Json.Encode.Value
encodeChatCompletionRequestMessageContentPart model =
    case model of
        ChatCompletionRequestMessageContentPartChatCompletionRequestMessageContentPartImage subModel ->
            encodeChatCompletionRequestMessageContentPartImage subModel


        ChatCompletionRequestMessageContentPartChatCompletionRequestMessageContentPartText subModel ->
            encodeChatCompletionRequestMessageContentPartText subModel




encodeChatCompletionRequestMessageContentPartImage : ChatCompletionRequestMessageContentPartImage -> Json.Encode.Value
encodeChatCompletionRequestMessageContentPartImage =
    encodeObject << encodeChatCompletionRequestMessageContentPartImagePairs


encodeChatCompletionRequestMessageContentPartImageWithTag : ( String, String ) -> ChatCompletionRequestMessageContentPartImage -> Json.Encode.Value
encodeChatCompletionRequestMessageContentPartImageWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionRequestMessageContentPartImagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionRequestMessageContentPartImagePairs : ChatCompletionRequestMessageContentPartImage -> List EncodedField
encodeChatCompletionRequestMessageContentPartImagePairs model =
    let
        pairs =
            [ encode "type" encodeChatCompletionRequestMessageContentPartImageType model.type_
            , encode "image_url" encodeChatCompletionRequestMessageContentPartImageImageUrl model.imageUrl
            ]
    in
    pairs

stringFromChatCompletionRequestMessageContentPartImageType : ChatCompletionRequestMessageContentPartImageType -> String
stringFromChatCompletionRequestMessageContentPartImageType model =
    case model of
        ChatCompletionRequestMessageContentPartImageTypeImageUrl ->
            "image_url"


encodeChatCompletionRequestMessageContentPartImageType : ChatCompletionRequestMessageContentPartImageType -> Json.Encode.Value
encodeChatCompletionRequestMessageContentPartImageType =
    Json.Encode.string << stringFromChatCompletionRequestMessageContentPartImageType



encodeChatCompletionRequestMessageContentPartImageImageUrl : ChatCompletionRequestMessageContentPartImageImageUrl -> Json.Encode.Value
encodeChatCompletionRequestMessageContentPartImageImageUrl =
    encodeObject << encodeChatCompletionRequestMessageContentPartImageImageUrlPairs


encodeChatCompletionRequestMessageContentPartImageImageUrlWithTag : ( String, String ) -> ChatCompletionRequestMessageContentPartImageImageUrl -> Json.Encode.Value
encodeChatCompletionRequestMessageContentPartImageImageUrlWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionRequestMessageContentPartImageImageUrlPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionRequestMessageContentPartImageImageUrlPairs : ChatCompletionRequestMessageContentPartImageImageUrl -> List EncodedField
encodeChatCompletionRequestMessageContentPartImageImageUrlPairs model =
    let
        pairs =
            [ encode "url" Json.Encode.string model.url
            , maybeEncode "detail" encodeChatCompletionRequestMessageContentPartImageImageUrlDetail model.detail
            ]
    in
    pairs

stringFromChatCompletionRequestMessageContentPartImageImageUrlDetail : ChatCompletionRequestMessageContentPartImageImageUrlDetail -> String
stringFromChatCompletionRequestMessageContentPartImageImageUrlDetail model =
    case model of
        ChatCompletionRequestMessageContentPartImageImageUrlDetailAuto ->
            "auto"

        ChatCompletionRequestMessageContentPartImageImageUrlDetailLow ->
            "low"

        ChatCompletionRequestMessageContentPartImageImageUrlDetailHigh ->
            "high"


encodeChatCompletionRequestMessageContentPartImageImageUrlDetail : ChatCompletionRequestMessageContentPartImageImageUrlDetail -> Json.Encode.Value
encodeChatCompletionRequestMessageContentPartImageImageUrlDetail =
    Json.Encode.string << stringFromChatCompletionRequestMessageContentPartImageImageUrlDetail



encodeChatCompletionRequestMessageContentPartText : ChatCompletionRequestMessageContentPartText -> Json.Encode.Value
encodeChatCompletionRequestMessageContentPartText =
    encodeObject << encodeChatCompletionRequestMessageContentPartTextPairs


encodeChatCompletionRequestMessageContentPartTextWithTag : ( String, String ) -> ChatCompletionRequestMessageContentPartText -> Json.Encode.Value
encodeChatCompletionRequestMessageContentPartTextWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionRequestMessageContentPartTextPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionRequestMessageContentPartTextPairs : ChatCompletionRequestMessageContentPartText -> List EncodedField
encodeChatCompletionRequestMessageContentPartTextPairs model =
    let
        pairs =
            [ encode "type" encodeChatCompletionRequestMessageContentPartTextType model.type_
            , encode "text" Json.Encode.string model.text
            ]
    in
    pairs

stringFromChatCompletionRequestMessageContentPartTextType : ChatCompletionRequestMessageContentPartTextType -> String
stringFromChatCompletionRequestMessageContentPartTextType model =
    case model of
        ChatCompletionRequestMessageContentPartTextTypeText ->
            "text"


encodeChatCompletionRequestMessageContentPartTextType : ChatCompletionRequestMessageContentPartTextType -> Json.Encode.Value
encodeChatCompletionRequestMessageContentPartTextType =
    Json.Encode.string << stringFromChatCompletionRequestMessageContentPartTextType



encodeChatCompletionRequestSystemMessage : ChatCompletionRequestSystemMessage -> Json.Encode.Value
encodeChatCompletionRequestSystemMessage =
    encodeObject << encodeChatCompletionRequestSystemMessagePairs


encodeChatCompletionRequestSystemMessageWithTag : ( String, String ) -> ChatCompletionRequestSystemMessage -> Json.Encode.Value
encodeChatCompletionRequestSystemMessageWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionRequestSystemMessagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionRequestSystemMessagePairs : ChatCompletionRequestSystemMessage -> List EncodedField
encodeChatCompletionRequestSystemMessagePairs model =
    let
        pairs =
            [ encode "content" Json.Encode.string model.content
            , encode "role" encodeChatCompletionRequestSystemMessageRole model.role
            , maybeEncode "name" Json.Encode.string model.name
            ]
    in
    pairs

stringFromChatCompletionRequestSystemMessageRole : ChatCompletionRequestSystemMessageRole -> String
stringFromChatCompletionRequestSystemMessageRole model =
    case model of
        ChatCompletionRequestSystemMessageRoleSystem ->
            "system"


encodeChatCompletionRequestSystemMessageRole : ChatCompletionRequestSystemMessageRole -> Json.Encode.Value
encodeChatCompletionRequestSystemMessageRole =
    Json.Encode.string << stringFromChatCompletionRequestSystemMessageRole



encodeChatCompletionRequestToolMessage : ChatCompletionRequestToolMessage -> Json.Encode.Value
encodeChatCompletionRequestToolMessage =
    encodeObject << encodeChatCompletionRequestToolMessagePairs


encodeChatCompletionRequestToolMessageWithTag : ( String, String ) -> ChatCompletionRequestToolMessage -> Json.Encode.Value
encodeChatCompletionRequestToolMessageWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionRequestToolMessagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionRequestToolMessagePairs : ChatCompletionRequestToolMessage -> List EncodedField
encodeChatCompletionRequestToolMessagePairs model =
    let
        pairs =
            [ encode "role" encodeChatCompletionRequestToolMessageRole model.role
            , encode "content" Json.Encode.string model.content
            , encode "tool_call_id" Json.Encode.string model.toolCallId
            ]
    in
    pairs

stringFromChatCompletionRequestToolMessageRole : ChatCompletionRequestToolMessageRole -> String
stringFromChatCompletionRequestToolMessageRole model =
    case model of
        ChatCompletionRequestToolMessageRoleTool ->
            "tool"


encodeChatCompletionRequestToolMessageRole : ChatCompletionRequestToolMessageRole -> Json.Encode.Value
encodeChatCompletionRequestToolMessageRole =
    Json.Encode.string << stringFromChatCompletionRequestToolMessageRole



encodeChatCompletionRequestUserMessage : ChatCompletionRequestUserMessage -> Json.Encode.Value
encodeChatCompletionRequestUserMessage =
    encodeObject << encodeChatCompletionRequestUserMessagePairs


encodeChatCompletionRequestUserMessageWithTag : ( String, String ) -> ChatCompletionRequestUserMessage -> Json.Encode.Value
encodeChatCompletionRequestUserMessageWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionRequestUserMessagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionRequestUserMessagePairs : ChatCompletionRequestUserMessage -> List EncodedField
encodeChatCompletionRequestUserMessagePairs model =
    let
        pairs =
            [ encode "content" encodeChatCompletionRequestUserMessageContent model.content
            , encode "role" encodeChatCompletionRequestUserMessageRole model.role
            , maybeEncode "name" Json.Encode.string model.name
            ]
    in
    pairs

stringFromChatCompletionRequestUserMessageRole : ChatCompletionRequestUserMessageRole -> String
stringFromChatCompletionRequestUserMessageRole model =
    case model of
        ChatCompletionRequestUserMessageRoleUser ->
            "user"


encodeChatCompletionRequestUserMessageRole : ChatCompletionRequestUserMessageRole -> Json.Encode.Value
encodeChatCompletionRequestUserMessageRole =
    Json.Encode.string << stringFromChatCompletionRequestUserMessageRole



encodeChatCompletionRequestUserMessageContent : ChatCompletionRequestUserMessageContent -> Json.Encode.Value
encodeChatCompletionRequestUserMessageContent model =
    case model of
        ChatCompletionRequestUserMessageContentChatCompletionRequestMessageContentPart subModel ->
            encodeChatCompletionRequestMessageContentPart subModel


        ChatCompletionRequestUserMessageContentString subModel ->
            encodeString subModel




encodeChatCompletionResponseMessage : ChatCompletionResponseMessage -> Json.Encode.Value
encodeChatCompletionResponseMessage =
    encodeObject << encodeChatCompletionResponseMessagePairs


encodeChatCompletionResponseMessageWithTag : ( String, String ) -> ChatCompletionResponseMessage -> Json.Encode.Value
encodeChatCompletionResponseMessageWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionResponseMessagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionResponseMessagePairs : ChatCompletionResponseMessage -> List EncodedField
encodeChatCompletionResponseMessagePairs model =
    let
        pairs =
            [ encodeNullable "content" Json.Encode.string model.content
            , maybeEncode "tool_calls" (Json.Encode.list encodeChatCompletionMessageToolCall) model.toolCalls
            , encode "role" encodeChatCompletionResponseMessageRole model.role
            , maybeEncode "function_call" encodeChatCompletionRequestAssistantMessageFunctionCall model.functionCall
            ]
    in
    pairs

stringFromChatCompletionResponseMessageRole : ChatCompletionResponseMessageRole -> String
stringFromChatCompletionResponseMessageRole model =
    case model of
        ChatCompletionResponseMessageRoleAssistant ->
            "assistant"


encodeChatCompletionResponseMessageRole : ChatCompletionResponseMessageRole -> Json.Encode.Value
encodeChatCompletionResponseMessageRole =
    Json.Encode.string << stringFromChatCompletionResponseMessageRole



stringFromChatCompletionRole : ChatCompletionRole -> String
stringFromChatCompletionRole model =
    case model of
        ChatCompletionRoleSystem ->
            "system"

        ChatCompletionRoleUser ->
            "user"

        ChatCompletionRoleAssistant ->
            "assistant"

        ChatCompletionRoleTool ->
            "tool"

        ChatCompletionRoleFunction ->
            "function"


encodeChatCompletionRole : ChatCompletionRole -> Json.Encode.Value
encodeChatCompletionRole =
    Json.Encode.string << stringFromChatCompletionRole


encodeChatCompletionStreamResponseDelta : ChatCompletionStreamResponseDelta -> Json.Encode.Value
encodeChatCompletionStreamResponseDelta =
    encodeObject << encodeChatCompletionStreamResponseDeltaPairs


encodeChatCompletionStreamResponseDeltaWithTag : ( String, String ) -> ChatCompletionStreamResponseDelta -> Json.Encode.Value
encodeChatCompletionStreamResponseDeltaWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionStreamResponseDeltaPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionStreamResponseDeltaPairs : ChatCompletionStreamResponseDelta -> List EncodedField
encodeChatCompletionStreamResponseDeltaPairs model =
    let
        pairs =
            [ maybeEncodeNullable "content" Json.Encode.string model.content
            , maybeEncode "function_call" encodeChatCompletionStreamResponseDeltaFunctionCall model.functionCall
            , maybeEncode "tool_calls" (Json.Encode.list encodeChatCompletionMessageToolCallChunk) model.toolCalls
            , maybeEncode "role" encodeChatCompletionStreamResponseDeltaRole model.role
            ]
    in
    pairs

stringFromChatCompletionStreamResponseDeltaRole : ChatCompletionStreamResponseDeltaRole -> String
stringFromChatCompletionStreamResponseDeltaRole model =
    case model of
        ChatCompletionStreamResponseDeltaRoleSystem ->
            "system"

        ChatCompletionStreamResponseDeltaRoleUser ->
            "user"

        ChatCompletionStreamResponseDeltaRoleAssistant ->
            "assistant"

        ChatCompletionStreamResponseDeltaRoleTool ->
            "tool"


encodeChatCompletionStreamResponseDeltaRole : ChatCompletionStreamResponseDeltaRole -> Json.Encode.Value
encodeChatCompletionStreamResponseDeltaRole =
    Json.Encode.string << stringFromChatCompletionStreamResponseDeltaRole



encodeChatCompletionStreamResponseDeltaFunctionCall : ChatCompletionStreamResponseDeltaFunctionCall -> Json.Encode.Value
encodeChatCompletionStreamResponseDeltaFunctionCall =
    encodeObject << encodeChatCompletionStreamResponseDeltaFunctionCallPairs


encodeChatCompletionStreamResponseDeltaFunctionCallWithTag : ( String, String ) -> ChatCompletionStreamResponseDeltaFunctionCall -> Json.Encode.Value
encodeChatCompletionStreamResponseDeltaFunctionCallWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionStreamResponseDeltaFunctionCallPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionStreamResponseDeltaFunctionCallPairs : ChatCompletionStreamResponseDeltaFunctionCall -> List EncodedField
encodeChatCompletionStreamResponseDeltaFunctionCallPairs model =
    let
        pairs =
            [ maybeEncode "arguments" Json.Encode.string model.arguments
            , maybeEncode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeChatCompletionTokenLogprob : ChatCompletionTokenLogprob -> Json.Encode.Value
encodeChatCompletionTokenLogprob =
    encodeObject << encodeChatCompletionTokenLogprobPairs


encodeChatCompletionTokenLogprobWithTag : ( String, String ) -> ChatCompletionTokenLogprob -> Json.Encode.Value
encodeChatCompletionTokenLogprobWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionTokenLogprobPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionTokenLogprobPairs : ChatCompletionTokenLogprob -> List EncodedField
encodeChatCompletionTokenLogprobPairs model =
    let
        pairs =
            [ encode "token" Json.Encode.string model.token
            , encode "logprob" Json.Encode.float model.logprob
            , encodeNullable "bytes" (Json.Encode.list Json.Encode.int) model.bytes
            , encode "top_logprobs" (Json.Encode.list encodeChatCompletionTokenLogprobTopLogprobsInner) model.topLogprobs
            ]
    in
    pairs


encodeChatCompletionTokenLogprobTopLogprobsInner : ChatCompletionTokenLogprobTopLogprobsInner -> Json.Encode.Value
encodeChatCompletionTokenLogprobTopLogprobsInner =
    encodeObject << encodeChatCompletionTokenLogprobTopLogprobsInnerPairs


encodeChatCompletionTokenLogprobTopLogprobsInnerWithTag : ( String, String ) -> ChatCompletionTokenLogprobTopLogprobsInner -> Json.Encode.Value
encodeChatCompletionTokenLogprobTopLogprobsInnerWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionTokenLogprobTopLogprobsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionTokenLogprobTopLogprobsInnerPairs : ChatCompletionTokenLogprobTopLogprobsInner -> List EncodedField
encodeChatCompletionTokenLogprobTopLogprobsInnerPairs model =
    let
        pairs =
            [ encode "token" Json.Encode.string model.token
            , encode "logprob" Json.Encode.float model.logprob
            , encodeNullable "bytes" (Json.Encode.list Json.Encode.int) model.bytes
            ]
    in
    pairs


encodeChatCompletionTool : ChatCompletionTool -> Json.Encode.Value
encodeChatCompletionTool =
    encodeObject << encodeChatCompletionToolPairs


encodeChatCompletionToolWithTag : ( String, String ) -> ChatCompletionTool -> Json.Encode.Value
encodeChatCompletionToolWithTag (tagField, tag) model =
    encodeObject (encodeChatCompletionToolPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatCompletionToolPairs : ChatCompletionTool -> List EncodedField
encodeChatCompletionToolPairs model =
    let
        pairs =
            [ encode "type" encodeChatCompletionToolType model.type_
            , encode "function" encodeFunctionObject model.function
            ]
    in
    pairs

stringFromChatCompletionToolType : ChatCompletionToolType -> String
stringFromChatCompletionToolType model =
    case model of
        ChatCompletionToolTypeFunction ->
            "function"


encodeChatCompletionToolType : ChatCompletionToolType -> Json.Encode.Value
encodeChatCompletionToolType =
    Json.Encode.string << stringFromChatCompletionToolType



encodeChatCompletionToolChoiceOption : ChatCompletionToolChoiceOption -> Json.Encode.Value
encodeChatCompletionToolChoiceOption model =
    case model of
        ChatCompletionToolChoiceOptionChatCompletionNamedToolChoice subModel ->
            encodeChatCompletionNamedToolChoice subModel


        ChatCompletionToolChoiceOptionString subModel ->
            encodeString subModel




encodeCompletionUsage : CompletionUsage -> Json.Encode.Value
encodeCompletionUsage =
    encodeObject << encodeCompletionUsagePairs


encodeCompletionUsageWithTag : ( String, String ) -> CompletionUsage -> Json.Encode.Value
encodeCompletionUsageWithTag (tagField, tag) model =
    encodeObject (encodeCompletionUsagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCompletionUsagePairs : CompletionUsage -> List EncodedField
encodeCompletionUsagePairs model =
    let
        pairs =
            [ encode "completion_tokens" Json.Encode.int model.completionTokens
            , encode "prompt_tokens" Json.Encode.int model.promptTokens
            , encode "total_tokens" Json.Encode.int model.totalTokens
            ]
    in
    pairs


encodeCreateAssistantFileRequest : CreateAssistantFileRequest -> Json.Encode.Value
encodeCreateAssistantFileRequest =
    encodeObject << encodeCreateAssistantFileRequestPairs


encodeCreateAssistantFileRequestWithTag : ( String, String ) -> CreateAssistantFileRequest -> Json.Encode.Value
encodeCreateAssistantFileRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateAssistantFileRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateAssistantFileRequestPairs : CreateAssistantFileRequest -> List EncodedField
encodeCreateAssistantFileRequestPairs model =
    let
        pairs =
            [ encode "file_id" Json.Encode.string model.fileId
            ]
    in
    pairs


encodeCreateAssistantRequest : CreateAssistantRequest -> Json.Encode.Value
encodeCreateAssistantRequest =
    encodeObject << encodeCreateAssistantRequestPairs


encodeCreateAssistantRequestWithTag : ( String, String ) -> CreateAssistantRequest -> Json.Encode.Value
encodeCreateAssistantRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateAssistantRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateAssistantRequestPairs : CreateAssistantRequest -> List EncodedField
encodeCreateAssistantRequestPairs model =
    let
        pairs =
            [ encode "model" encodeCreateAssistantRequestModel model.model
            , maybeEncodeNullable "name" Json.Encode.string model.name
            , maybeEncodeNullable "description" Json.Encode.string model.description
            , maybeEncodeNullable "instructions" Json.Encode.string model.instructions
            , maybeEncode "tools" (Json.Encode.list encodeAssistantObjectToolsInner) model.tools
            , maybeEncode "file_ids" (Json.Encode.list Json.Encode.string) model.fileIds
            , maybeEncodeNullable "metadata" encodeObject model.metadata
            ]
    in
    pairs


encodeCreateAssistantRequestModel : CreateAssistantRequestModel -> Json.Encode.Value
encodeCreateAssistantRequestModel =
    encodeObject << encodeCreateAssistantRequestModelPairs


encodeCreateAssistantRequestModelWithTag : ( String, String ) -> CreateAssistantRequestModel -> Json.Encode.Value
encodeCreateAssistantRequestModelWithTag (tagField, tag) model =
    encodeObject (encodeCreateAssistantRequestModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateAssistantRequestModelPairs : CreateAssistantRequestModel -> List EncodedField
encodeCreateAssistantRequestModelPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeCreateChatCompletionFunctionResponse : CreateChatCompletionFunctionResponse -> Json.Encode.Value
encodeCreateChatCompletionFunctionResponse =
    encodeObject << encodeCreateChatCompletionFunctionResponsePairs


encodeCreateChatCompletionFunctionResponseWithTag : ( String, String ) -> CreateChatCompletionFunctionResponse -> Json.Encode.Value
encodeCreateChatCompletionFunctionResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatCompletionFunctionResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatCompletionFunctionResponsePairs : CreateChatCompletionFunctionResponse -> List EncodedField
encodeCreateChatCompletionFunctionResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "choices" (Json.Encode.list encodeCreateChatCompletionFunctionResponseChoicesInner) model.choices
            , encode "created" Json.Encode.int model.created
            , encode "model" Json.Encode.string model.model
            , maybeEncode "system_fingerprint" Json.Encode.string model.systemFingerprint
            , encode "object" encodeCreateChatCompletionFunctionResponseObject model.object
            , maybeEncode "usage" encodeCompletionUsage model.usage
            ]
    in
    pairs

stringFromCreateChatCompletionFunctionResponseObject : CreateChatCompletionFunctionResponseObject -> String
stringFromCreateChatCompletionFunctionResponseObject model =
    case model of
        CreateChatCompletionFunctionResponseObjectChatCompletion ->
            "chat.completion"


encodeCreateChatCompletionFunctionResponseObject : CreateChatCompletionFunctionResponseObject -> Json.Encode.Value
encodeCreateChatCompletionFunctionResponseObject =
    Json.Encode.string << stringFromCreateChatCompletionFunctionResponseObject



encodeCreateChatCompletionFunctionResponseChoicesInner : CreateChatCompletionFunctionResponseChoicesInner -> Json.Encode.Value
encodeCreateChatCompletionFunctionResponseChoicesInner =
    encodeObject << encodeCreateChatCompletionFunctionResponseChoicesInnerPairs


encodeCreateChatCompletionFunctionResponseChoicesInnerWithTag : ( String, String ) -> CreateChatCompletionFunctionResponseChoicesInner -> Json.Encode.Value
encodeCreateChatCompletionFunctionResponseChoicesInnerWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatCompletionFunctionResponseChoicesInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatCompletionFunctionResponseChoicesInnerPairs : CreateChatCompletionFunctionResponseChoicesInner -> List EncodedField
encodeCreateChatCompletionFunctionResponseChoicesInnerPairs model =
    let
        pairs =
            [ encode "finish_reason" encodeCreateChatCompletionFunctionResponseChoicesInnerFinishReason model.finishReason
            , encode "index" Json.Encode.int model.index
            , encode "message" encodeChatCompletionResponseMessage model.message
            ]
    in
    pairs

stringFromCreateChatCompletionFunctionResponseChoicesInnerFinishReason : CreateChatCompletionFunctionResponseChoicesInnerFinishReason -> String
stringFromCreateChatCompletionFunctionResponseChoicesInnerFinishReason model =
    case model of
        CreateChatCompletionFunctionResponseChoicesInnerFinishReasonStop ->
            "stop"

        CreateChatCompletionFunctionResponseChoicesInnerFinishReasonLength ->
            "length"

        CreateChatCompletionFunctionResponseChoicesInnerFinishReasonFunctionCall ->
            "function_call"

        CreateChatCompletionFunctionResponseChoicesInnerFinishReasonContentFilter ->
            "content_filter"


encodeCreateChatCompletionFunctionResponseChoicesInnerFinishReason : CreateChatCompletionFunctionResponseChoicesInnerFinishReason -> Json.Encode.Value
encodeCreateChatCompletionFunctionResponseChoicesInnerFinishReason =
    Json.Encode.string << stringFromCreateChatCompletionFunctionResponseChoicesInnerFinishReason



encodeCreateChatCompletionRequest : CreateChatCompletionRequest -> Json.Encode.Value
encodeCreateChatCompletionRequest =
    encodeObject << encodeCreateChatCompletionRequestPairs


encodeCreateChatCompletionRequestWithTag : ( String, String ) -> CreateChatCompletionRequest -> Json.Encode.Value
encodeCreateChatCompletionRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatCompletionRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatCompletionRequestPairs : CreateChatCompletionRequest -> List EncodedField
encodeCreateChatCompletionRequestPairs model =
    let
        pairs =
            [ encode "messages" (Json.Encode.list encodeChatCompletionRequestMessage) model.messages
            , encode "model" encodeCreateChatCompletionRequestModel model.model
            , maybeEncodeNullable "frequency_penalty" Json.Encode.float model.frequencyPenalty
            , maybeEncodeNullable "logit_bias" (Json.Encode.dict identity Json.Encode.int) model.logitBias
            , maybeEncodeNullable "logprobs" Json.Encode.bool model.logprobs
            , maybeEncodeNullable "top_logprobs" Json.Encode.int model.topLogprobs
            , maybeEncodeNullable "max_tokens" Json.Encode.int model.maxTokens
            , maybeEncodeNullable "n" Json.Encode.int model.n
            , maybeEncodeNullable "presence_penalty" Json.Encode.float model.presencePenalty
            , maybeEncode "response_format" encodeCreateChatCompletionRequestResponseFormat model.responseFormat
            , maybeEncodeNullable "seed" Json.Encode.int model.seed
            , maybeEncode "stop" encodeCreateChatCompletionRequestStop model.stop
            , maybeEncodeNullable "stream" Json.Encode.bool model.stream
            , maybeEncodeNullable "temperature" Json.Encode.float model.temperature
            , maybeEncodeNullable "top_p" Json.Encode.float model.topP
            , maybeEncode "tools" (Json.Encode.list encodeChatCompletionTool) model.tools
            , maybeEncode "tool_choice" encodeChatCompletionToolChoiceOption model.toolChoice
            , maybeEncode "user" Json.Encode.string model.user
            , maybeEncode "function_call" encodeCreateChatCompletionRequestFunctionCall model.functionCall
            , maybeEncode "functions" (Json.Encode.list encodeChatCompletionFunctions) model.functions
            ]
    in
    pairs


encodeCreateChatCompletionRequestFunctionCall : CreateChatCompletionRequestFunctionCall -> Json.Encode.Value
encodeCreateChatCompletionRequestFunctionCall model =
    case model of
        CreateChatCompletionRequestFunctionCallChatCompletionFunctionCallOption subModel ->
            encodeChatCompletionFunctionCallOption subModel


        CreateChatCompletionRequestFunctionCallString subModel ->
            encodeString subModel




encodeCreateChatCompletionRequestModel : CreateChatCompletionRequestModel -> Json.Encode.Value
encodeCreateChatCompletionRequestModel =
    encodeObject << encodeCreateChatCompletionRequestModelPairs


encodeCreateChatCompletionRequestModelWithTag : ( String, String ) -> CreateChatCompletionRequestModel -> Json.Encode.Value
encodeCreateChatCompletionRequestModelWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatCompletionRequestModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatCompletionRequestModelPairs : CreateChatCompletionRequestModel -> List EncodedField
encodeCreateChatCompletionRequestModelPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeCreateChatCompletionRequestResponseFormat : CreateChatCompletionRequestResponseFormat -> Json.Encode.Value
encodeCreateChatCompletionRequestResponseFormat =
    encodeObject << encodeCreateChatCompletionRequestResponseFormatPairs


encodeCreateChatCompletionRequestResponseFormatWithTag : ( String, String ) -> CreateChatCompletionRequestResponseFormat -> Json.Encode.Value
encodeCreateChatCompletionRequestResponseFormatWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatCompletionRequestResponseFormatPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatCompletionRequestResponseFormatPairs : CreateChatCompletionRequestResponseFormat -> List EncodedField
encodeCreateChatCompletionRequestResponseFormatPairs model =
    let
        pairs =
            [ maybeEncode "type" encodeCreateChatCompletionRequestResponseFormatType model.type_
            ]
    in
    pairs

stringFromCreateChatCompletionRequestResponseFormatType : CreateChatCompletionRequestResponseFormatType -> String
stringFromCreateChatCompletionRequestResponseFormatType model =
    case model of
        CreateChatCompletionRequestResponseFormatTypeText ->
            "text"

        CreateChatCompletionRequestResponseFormatTypeJsonObject ->
            "json_object"


encodeCreateChatCompletionRequestResponseFormatType : CreateChatCompletionRequestResponseFormatType -> Json.Encode.Value
encodeCreateChatCompletionRequestResponseFormatType =
    Json.Encode.string << stringFromCreateChatCompletionRequestResponseFormatType



encodeCreateChatCompletionRequestStop : CreateChatCompletionRequestStop -> Json.Encode.Value
encodeCreateChatCompletionRequestStop model =
    case model of
        CreateChatCompletionRequestStopString subModel ->
            encodeString subModel




encodeCreateChatCompletionResponse : CreateChatCompletionResponse -> Json.Encode.Value
encodeCreateChatCompletionResponse =
    encodeObject << encodeCreateChatCompletionResponsePairs


encodeCreateChatCompletionResponseWithTag : ( String, String ) -> CreateChatCompletionResponse -> Json.Encode.Value
encodeCreateChatCompletionResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatCompletionResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatCompletionResponsePairs : CreateChatCompletionResponse -> List EncodedField
encodeCreateChatCompletionResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "choices" (Json.Encode.list encodeCreateChatCompletionResponseChoicesInner) model.choices
            , encode "created" Json.Encode.int model.created
            , encode "model" Json.Encode.string model.model
            , maybeEncode "system_fingerprint" Json.Encode.string model.systemFingerprint
            , encode "object" encodeCreateChatCompletionResponseObject model.object
            , maybeEncode "usage" encodeCompletionUsage model.usage
            ]
    in
    pairs

stringFromCreateChatCompletionResponseObject : CreateChatCompletionResponseObject -> String
stringFromCreateChatCompletionResponseObject model =
    case model of
        CreateChatCompletionResponseObjectChatCompletion ->
            "chat.completion"


encodeCreateChatCompletionResponseObject : CreateChatCompletionResponseObject -> Json.Encode.Value
encodeCreateChatCompletionResponseObject =
    Json.Encode.string << stringFromCreateChatCompletionResponseObject



encodeCreateChatCompletionResponseChoicesInner : CreateChatCompletionResponseChoicesInner -> Json.Encode.Value
encodeCreateChatCompletionResponseChoicesInner =
    encodeObject << encodeCreateChatCompletionResponseChoicesInnerPairs


encodeCreateChatCompletionResponseChoicesInnerWithTag : ( String, String ) -> CreateChatCompletionResponseChoicesInner -> Json.Encode.Value
encodeCreateChatCompletionResponseChoicesInnerWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatCompletionResponseChoicesInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatCompletionResponseChoicesInnerPairs : CreateChatCompletionResponseChoicesInner -> List EncodedField
encodeCreateChatCompletionResponseChoicesInnerPairs model =
    let
        pairs =
            [ encode "finish_reason" encodeCreateChatCompletionResponseChoicesInnerFinishReason model.finishReason
            , encode "index" Json.Encode.int model.index
            , encode "message" encodeChatCompletionResponseMessage model.message
            , encodeNullable "logprobs" encodeCreateChatCompletionResponseChoicesInnerLogprobs model.logprobs
            ]
    in
    pairs

stringFromCreateChatCompletionResponseChoicesInnerFinishReason : CreateChatCompletionResponseChoicesInnerFinishReason -> String
stringFromCreateChatCompletionResponseChoicesInnerFinishReason model =
    case model of
        CreateChatCompletionResponseChoicesInnerFinishReasonStop ->
            "stop"

        CreateChatCompletionResponseChoicesInnerFinishReasonLength ->
            "length"

        CreateChatCompletionResponseChoicesInnerFinishReasonToolCalls ->
            "tool_calls"

        CreateChatCompletionResponseChoicesInnerFinishReasonContentFilter ->
            "content_filter"

        CreateChatCompletionResponseChoicesInnerFinishReasonFunctionCall ->
            "function_call"


encodeCreateChatCompletionResponseChoicesInnerFinishReason : CreateChatCompletionResponseChoicesInnerFinishReason -> Json.Encode.Value
encodeCreateChatCompletionResponseChoicesInnerFinishReason =
    Json.Encode.string << stringFromCreateChatCompletionResponseChoicesInnerFinishReason



encodeCreateChatCompletionResponseChoicesInnerLogprobs : CreateChatCompletionResponseChoicesInnerLogprobs -> Json.Encode.Value
encodeCreateChatCompletionResponseChoicesInnerLogprobs =
    encodeObject << encodeCreateChatCompletionResponseChoicesInnerLogprobsPairs


encodeCreateChatCompletionResponseChoicesInnerLogprobsWithTag : ( String, String ) -> CreateChatCompletionResponseChoicesInnerLogprobs -> Json.Encode.Value
encodeCreateChatCompletionResponseChoicesInnerLogprobsWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatCompletionResponseChoicesInnerLogprobsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatCompletionResponseChoicesInnerLogprobsPairs : CreateChatCompletionResponseChoicesInnerLogprobs -> List EncodedField
encodeCreateChatCompletionResponseChoicesInnerLogprobsPairs model =
    let
        pairs =
            [ encodeNullable "content" (Json.Encode.list encodeChatCompletionTokenLogprob) model.content
            ]
    in
    pairs


encodeCreateChatCompletionStreamResponse : CreateChatCompletionStreamResponse -> Json.Encode.Value
encodeCreateChatCompletionStreamResponse =
    encodeObject << encodeCreateChatCompletionStreamResponsePairs


encodeCreateChatCompletionStreamResponseWithTag : ( String, String ) -> CreateChatCompletionStreamResponse -> Json.Encode.Value
encodeCreateChatCompletionStreamResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatCompletionStreamResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatCompletionStreamResponsePairs : CreateChatCompletionStreamResponse -> List EncodedField
encodeCreateChatCompletionStreamResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "choices" (Json.Encode.list encodeCreateChatCompletionStreamResponseChoicesInner) model.choices
            , encode "created" Json.Encode.int model.created
            , encode "model" Json.Encode.string model.model
            , maybeEncode "system_fingerprint" Json.Encode.string model.systemFingerprint
            , encode "object" encodeCreateChatCompletionStreamResponseObject model.object
            ]
    in
    pairs

stringFromCreateChatCompletionStreamResponseObject : CreateChatCompletionStreamResponseObject -> String
stringFromCreateChatCompletionStreamResponseObject model =
    case model of
        CreateChatCompletionStreamResponseObjectChatCompletionChunk ->
            "chat.completion.chunk"


encodeCreateChatCompletionStreamResponseObject : CreateChatCompletionStreamResponseObject -> Json.Encode.Value
encodeCreateChatCompletionStreamResponseObject =
    Json.Encode.string << stringFromCreateChatCompletionStreamResponseObject



encodeCreateChatCompletionStreamResponseChoicesInner : CreateChatCompletionStreamResponseChoicesInner -> Json.Encode.Value
encodeCreateChatCompletionStreamResponseChoicesInner =
    encodeObject << encodeCreateChatCompletionStreamResponseChoicesInnerPairs


encodeCreateChatCompletionStreamResponseChoicesInnerWithTag : ( String, String ) -> CreateChatCompletionStreamResponseChoicesInner -> Json.Encode.Value
encodeCreateChatCompletionStreamResponseChoicesInnerWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatCompletionStreamResponseChoicesInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatCompletionStreamResponseChoicesInnerPairs : CreateChatCompletionStreamResponseChoicesInner -> List EncodedField
encodeCreateChatCompletionStreamResponseChoicesInnerPairs model =
    let
        pairs =
            [ encode "delta" encodeChatCompletionStreamResponseDelta model.delta
            , maybeEncodeNullable "logprobs" encodeCreateChatCompletionResponseChoicesInnerLogprobs model.logprobs
            , encodeNullable "finish_reason" encodeCreateChatCompletionStreamResponseChoicesInnerFinishReason model.finishReason
            , encode "index" Json.Encode.int model.index
            ]
    in
    pairs

stringFromCreateChatCompletionStreamResponseChoicesInnerFinishReason : CreateChatCompletionStreamResponseChoicesInnerFinishReason -> String
stringFromCreateChatCompletionStreamResponseChoicesInnerFinishReason model =
    case model of
        CreateChatCompletionStreamResponseChoicesInnerFinishReasonStop ->
            "stop"

        CreateChatCompletionStreamResponseChoicesInnerFinishReasonLength ->
            "length"

        CreateChatCompletionStreamResponseChoicesInnerFinishReasonToolCalls ->
            "tool_calls"

        CreateChatCompletionStreamResponseChoicesInnerFinishReasonContentFilter ->
            "content_filter"

        CreateChatCompletionStreamResponseChoicesInnerFinishReasonFunctionCall ->
            "function_call"


encodeCreateChatCompletionStreamResponseChoicesInnerFinishReason : CreateChatCompletionStreamResponseChoicesInnerFinishReason -> Json.Encode.Value
encodeCreateChatCompletionStreamResponseChoicesInnerFinishReason =
    Json.Encode.string << stringFromCreateChatCompletionStreamResponseChoicesInnerFinishReason



encodeCreateCompletionRequest : CreateCompletionRequest -> Json.Encode.Value
encodeCreateCompletionRequest =
    encodeObject << encodeCreateCompletionRequestPairs


encodeCreateCompletionRequestWithTag : ( String, String ) -> CreateCompletionRequest -> Json.Encode.Value
encodeCreateCompletionRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateCompletionRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateCompletionRequestPairs : CreateCompletionRequest -> List EncodedField
encodeCreateCompletionRequestPairs model =
    let
        pairs =
            [ encode "model" encodeCreateCompletionRequestModel model.model
            , encodeNullable "prompt" encodeCreateCompletionRequestPrompt model.prompt
            , maybeEncodeNullable "best_of" Json.Encode.int model.bestOf
            , maybeEncodeNullable "echo" Json.Encode.bool model.echo
            , maybeEncodeNullable "frequency_penalty" Json.Encode.float model.frequencyPenalty
            , maybeEncodeNullable "logit_bias" (Json.Encode.dict identity Json.Encode.int) model.logitBias
            , maybeEncodeNullable "logprobs" Json.Encode.int model.logprobs
            , maybeEncodeNullable "max_tokens" Json.Encode.int model.maxTokens
            , maybeEncodeNullable "n" Json.Encode.int model.n
            , maybeEncodeNullable "presence_penalty" Json.Encode.float model.presencePenalty
            , maybeEncodeNullable "seed" Json.Encode.int model.seed
            , maybeEncodeNullable "stop" encodeCreateCompletionRequestStop model.stop
            , maybeEncodeNullable "stream" Json.Encode.bool model.stream
            , maybeEncodeNullable "suffix" Json.Encode.string model.suffix
            , maybeEncodeNullable "temperature" Json.Encode.float model.temperature
            , maybeEncodeNullable "top_p" Json.Encode.float model.topP
            , maybeEncode "user" Json.Encode.string model.user
            ]
    in
    pairs


encodeCreateCompletionRequestModel : CreateCompletionRequestModel -> Json.Encode.Value
encodeCreateCompletionRequestModel =
    encodeObject << encodeCreateCompletionRequestModelPairs


encodeCreateCompletionRequestModelWithTag : ( String, String ) -> CreateCompletionRequestModel -> Json.Encode.Value
encodeCreateCompletionRequestModelWithTag (tagField, tag) model =
    encodeObject (encodeCreateCompletionRequestModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateCompletionRequestModelPairs : CreateCompletionRequestModel -> List EncodedField
encodeCreateCompletionRequestModelPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeCreateCompletionRequestPrompt : CreateCompletionRequestPrompt -> Json.Encode.Value
encodeCreateCompletionRequestPrompt model =
    case model of
        CreateCompletionRequestPromptInt subModel ->
            encodeInt subModel


        CreateCompletionRequestPromptString subModel ->
            encodeString subModel




encodeCreateCompletionRequestStop : CreateCompletionRequestStop -> Json.Encode.Value
encodeCreateCompletionRequestStop model =
    case model of
        CreateCompletionRequestStopString subModel ->
            encodeString subModel




encodeCreateCompletionResponse : CreateCompletionResponse -> Json.Encode.Value
encodeCreateCompletionResponse =
    encodeObject << encodeCreateCompletionResponsePairs


encodeCreateCompletionResponseWithTag : ( String, String ) -> CreateCompletionResponse -> Json.Encode.Value
encodeCreateCompletionResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateCompletionResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateCompletionResponsePairs : CreateCompletionResponse -> List EncodedField
encodeCreateCompletionResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "choices" (Json.Encode.list encodeCreateCompletionResponseChoicesInner) model.choices
            , encode "created" Json.Encode.int model.created
            , encode "model" Json.Encode.string model.model
            , maybeEncode "system_fingerprint" Json.Encode.string model.systemFingerprint
            , encode "object" encodeCreateCompletionResponseObject model.object
            , maybeEncode "usage" encodeCompletionUsage model.usage
            ]
    in
    pairs

stringFromCreateCompletionResponseObject : CreateCompletionResponseObject -> String
stringFromCreateCompletionResponseObject model =
    case model of
        CreateCompletionResponseObjectTextCompletion ->
            "text_completion"


encodeCreateCompletionResponseObject : CreateCompletionResponseObject -> Json.Encode.Value
encodeCreateCompletionResponseObject =
    Json.Encode.string << stringFromCreateCompletionResponseObject



encodeCreateCompletionResponseChoicesInner : CreateCompletionResponseChoicesInner -> Json.Encode.Value
encodeCreateCompletionResponseChoicesInner =
    encodeObject << encodeCreateCompletionResponseChoicesInnerPairs


encodeCreateCompletionResponseChoicesInnerWithTag : ( String, String ) -> CreateCompletionResponseChoicesInner -> Json.Encode.Value
encodeCreateCompletionResponseChoicesInnerWithTag (tagField, tag) model =
    encodeObject (encodeCreateCompletionResponseChoicesInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateCompletionResponseChoicesInnerPairs : CreateCompletionResponseChoicesInner -> List EncodedField
encodeCreateCompletionResponseChoicesInnerPairs model =
    let
        pairs =
            [ encode "finish_reason" encodeCreateCompletionResponseChoicesInnerFinishReason model.finishReason
            , encode "index" Json.Encode.int model.index
            , encodeNullable "logprobs" encodeCreateCompletionResponseChoicesInnerLogprobs model.logprobs
            , encode "text" Json.Encode.string model.text
            ]
    in
    pairs

stringFromCreateCompletionResponseChoicesInnerFinishReason : CreateCompletionResponseChoicesInnerFinishReason -> String
stringFromCreateCompletionResponseChoicesInnerFinishReason model =
    case model of
        CreateCompletionResponseChoicesInnerFinishReasonStop ->
            "stop"

        CreateCompletionResponseChoicesInnerFinishReasonLength ->
            "length"

        CreateCompletionResponseChoicesInnerFinishReasonContentFilter ->
            "content_filter"


encodeCreateCompletionResponseChoicesInnerFinishReason : CreateCompletionResponseChoicesInnerFinishReason -> Json.Encode.Value
encodeCreateCompletionResponseChoicesInnerFinishReason =
    Json.Encode.string << stringFromCreateCompletionResponseChoicesInnerFinishReason



encodeCreateCompletionResponseChoicesInnerLogprobs : CreateCompletionResponseChoicesInnerLogprobs -> Json.Encode.Value
encodeCreateCompletionResponseChoicesInnerLogprobs =
    encodeObject << encodeCreateCompletionResponseChoicesInnerLogprobsPairs


encodeCreateCompletionResponseChoicesInnerLogprobsWithTag : ( String, String ) -> CreateCompletionResponseChoicesInnerLogprobs -> Json.Encode.Value
encodeCreateCompletionResponseChoicesInnerLogprobsWithTag (tagField, tag) model =
    encodeObject (encodeCreateCompletionResponseChoicesInnerLogprobsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateCompletionResponseChoicesInnerLogprobsPairs : CreateCompletionResponseChoicesInnerLogprobs -> List EncodedField
encodeCreateCompletionResponseChoicesInnerLogprobsPairs model =
    let
        pairs =
            [ maybeEncode "text_offset" (Json.Encode.list Json.Encode.int) model.textOffset
            , maybeEncode "token_logprobs" (Json.Encode.list Json.Encode.float) model.tokenLogprobs
            , maybeEncode "tokens" (Json.Encode.list Json.Encode.string) model.tokens
            , maybeEncode "top_logprobs" (Json.Encode.list (Json.Encode.dict identity Json.Encode.float)) model.topLogprobs
            ]
    in
    pairs


encodeCreateEmbeddingRequest : CreateEmbeddingRequest -> Json.Encode.Value
encodeCreateEmbeddingRequest =
    encodeObject << encodeCreateEmbeddingRequestPairs


encodeCreateEmbeddingRequestWithTag : ( String, String ) -> CreateEmbeddingRequest -> Json.Encode.Value
encodeCreateEmbeddingRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateEmbeddingRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateEmbeddingRequestPairs : CreateEmbeddingRequest -> List EncodedField
encodeCreateEmbeddingRequestPairs model =
    let
        pairs =
            [ encode "input" encodeCreateEmbeddingRequestInput model.input
            , encode "model" encodeCreateEmbeddingRequestModel model.model
            , maybeEncode "encoding_format" encodeCreateEmbeddingRequestEncodingFormat model.encodingFormat
            , maybeEncode "dimensions" Json.Encode.int model.dimensions
            , maybeEncode "user" Json.Encode.string model.user
            ]
    in
    pairs

stringFromCreateEmbeddingRequestEncodingFormat : CreateEmbeddingRequestEncodingFormat -> String
stringFromCreateEmbeddingRequestEncodingFormat model =
    case model of
        CreateEmbeddingRequestEncodingFormatFloat ->
            "float"

        CreateEmbeddingRequestEncodingFormatBase64 ->
            "base64"


encodeCreateEmbeddingRequestEncodingFormat : CreateEmbeddingRequestEncodingFormat -> Json.Encode.Value
encodeCreateEmbeddingRequestEncodingFormat =
    Json.Encode.string << stringFromCreateEmbeddingRequestEncodingFormat



encodeCreateEmbeddingRequestInput : CreateEmbeddingRequestInput -> Json.Encode.Value
encodeCreateEmbeddingRequestInput model =
    case model of
        CreateEmbeddingRequestInputInt subModel ->
            encodeInt subModel


        CreateEmbeddingRequestInputString subModel ->
            encodeString subModel




encodeCreateEmbeddingRequestModel : CreateEmbeddingRequestModel -> Json.Encode.Value
encodeCreateEmbeddingRequestModel =
    encodeObject << encodeCreateEmbeddingRequestModelPairs


encodeCreateEmbeddingRequestModelWithTag : ( String, String ) -> CreateEmbeddingRequestModel -> Json.Encode.Value
encodeCreateEmbeddingRequestModelWithTag (tagField, tag) model =
    encodeObject (encodeCreateEmbeddingRequestModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateEmbeddingRequestModelPairs : CreateEmbeddingRequestModel -> List EncodedField
encodeCreateEmbeddingRequestModelPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeCreateEmbeddingResponse : CreateEmbeddingResponse -> Json.Encode.Value
encodeCreateEmbeddingResponse =
    encodeObject << encodeCreateEmbeddingResponsePairs


encodeCreateEmbeddingResponseWithTag : ( String, String ) -> CreateEmbeddingResponse -> Json.Encode.Value
encodeCreateEmbeddingResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateEmbeddingResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateEmbeddingResponsePairs : CreateEmbeddingResponse -> List EncodedField
encodeCreateEmbeddingResponsePairs model =
    let
        pairs =
            [ encode "data" (Json.Encode.list encodeEmbedding) model.data
            , encode "model" Json.Encode.string model.model
            , encode "object" encodeCreateEmbeddingResponseObject model.object
            , encode "usage" encodeCreateEmbeddingResponseUsage model.usage
            ]
    in
    pairs

stringFromCreateEmbeddingResponseObject : CreateEmbeddingResponseObject -> String
stringFromCreateEmbeddingResponseObject model =
    case model of
        CreateEmbeddingResponseObjectList ->
            "list"


encodeCreateEmbeddingResponseObject : CreateEmbeddingResponseObject -> Json.Encode.Value
encodeCreateEmbeddingResponseObject =
    Json.Encode.string << stringFromCreateEmbeddingResponseObject



encodeCreateEmbeddingResponseUsage : CreateEmbeddingResponseUsage -> Json.Encode.Value
encodeCreateEmbeddingResponseUsage =
    encodeObject << encodeCreateEmbeddingResponseUsagePairs


encodeCreateEmbeddingResponseUsageWithTag : ( String, String ) -> CreateEmbeddingResponseUsage -> Json.Encode.Value
encodeCreateEmbeddingResponseUsageWithTag (tagField, tag) model =
    encodeObject (encodeCreateEmbeddingResponseUsagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateEmbeddingResponseUsagePairs : CreateEmbeddingResponseUsage -> List EncodedField
encodeCreateEmbeddingResponseUsagePairs model =
    let
        pairs =
            [ encode "prompt_tokens" Json.Encode.int model.promptTokens
            , encode "total_tokens" Json.Encode.int model.totalTokens
            ]
    in
    pairs


encodeCreateFineTuningJobRequest : CreateFineTuningJobRequest -> Json.Encode.Value
encodeCreateFineTuningJobRequest =
    encodeObject << encodeCreateFineTuningJobRequestPairs


encodeCreateFineTuningJobRequestWithTag : ( String, String ) -> CreateFineTuningJobRequest -> Json.Encode.Value
encodeCreateFineTuningJobRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateFineTuningJobRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateFineTuningJobRequestPairs : CreateFineTuningJobRequest -> List EncodedField
encodeCreateFineTuningJobRequestPairs model =
    let
        pairs =
            [ encode "model" encodeCreateFineTuningJobRequestModel model.model
            , encode "training_file" Json.Encode.string model.trainingFile
            , maybeEncode "hyperparameters" encodeCreateFineTuningJobRequestHyperparameters model.hyperparameters
            , maybeEncodeNullable "suffix" Json.Encode.string model.suffix
            , maybeEncodeNullable "validation_file" Json.Encode.string model.validationFile
            , maybeEncodeNullable "integrations" (Json.Encode.list encodeCreateFineTuningJobRequestIntegrationsInner) model.integrations
            , maybeEncodeNullable "seed" Json.Encode.int model.seed
            ]
    in
    pairs


encodeCreateFineTuningJobRequestHyperparameters : CreateFineTuningJobRequestHyperparameters -> Json.Encode.Value
encodeCreateFineTuningJobRequestHyperparameters =
    encodeObject << encodeCreateFineTuningJobRequestHyperparametersPairs


encodeCreateFineTuningJobRequestHyperparametersWithTag : ( String, String ) -> CreateFineTuningJobRequestHyperparameters -> Json.Encode.Value
encodeCreateFineTuningJobRequestHyperparametersWithTag (tagField, tag) model =
    encodeObject (encodeCreateFineTuningJobRequestHyperparametersPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateFineTuningJobRequestHyperparametersPairs : CreateFineTuningJobRequestHyperparameters -> List EncodedField
encodeCreateFineTuningJobRequestHyperparametersPairs model =
    let
        pairs =
            [ maybeEncode "batch_size" encodeCreateFineTuningJobRequestHyperparametersBatchSize model.batchSize
            , maybeEncode "learning_rate_multiplier" encodeCreateFineTuningJobRequestHyperparametersLearningRateMultiplier model.learningRateMultiplier
            , maybeEncode "n_epochs" encodeCreateFineTuningJobRequestHyperparametersNEpochs model.nEpochs
            ]
    in
    pairs


encodeCreateFineTuningJobRequestHyperparametersBatchSize : CreateFineTuningJobRequestHyperparametersBatchSize -> Json.Encode.Value
encodeCreateFineTuningJobRequestHyperparametersBatchSize model =
    case model of
        CreateFineTuningJobRequestHyperparametersBatchSizeInt subModel ->
            encodeInt subModel


        CreateFineTuningJobRequestHyperparametersBatchSizeString subModel ->
            encodeString subModel




encodeCreateFineTuningJobRequestHyperparametersLearningRateMultiplier : CreateFineTuningJobRequestHyperparametersLearningRateMultiplier -> Json.Encode.Value
encodeCreateFineTuningJobRequestHyperparametersLearningRateMultiplier model =
    case model of
        CreateFineTuningJobRequestHyperparametersLearningRateMultiplierFloat subModel ->
            encodeFloat subModel


        CreateFineTuningJobRequestHyperparametersLearningRateMultiplierString subModel ->
            encodeString subModel




encodeCreateFineTuningJobRequestHyperparametersNEpochs : CreateFineTuningJobRequestHyperparametersNEpochs -> Json.Encode.Value
encodeCreateFineTuningJobRequestHyperparametersNEpochs model =
    case model of
        CreateFineTuningJobRequestHyperparametersNEpochsInt subModel ->
            encodeInt subModel


        CreateFineTuningJobRequestHyperparametersNEpochsString subModel ->
            encodeString subModel




encodeCreateFineTuningJobRequestIntegrationsInner : CreateFineTuningJobRequestIntegrationsInner -> Json.Encode.Value
encodeCreateFineTuningJobRequestIntegrationsInner =
    encodeObject << encodeCreateFineTuningJobRequestIntegrationsInnerPairs


encodeCreateFineTuningJobRequestIntegrationsInnerWithTag : ( String, String ) -> CreateFineTuningJobRequestIntegrationsInner -> Json.Encode.Value
encodeCreateFineTuningJobRequestIntegrationsInnerWithTag (tagField, tag) model =
    encodeObject (encodeCreateFineTuningJobRequestIntegrationsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateFineTuningJobRequestIntegrationsInnerPairs : CreateFineTuningJobRequestIntegrationsInner -> List EncodedField
encodeCreateFineTuningJobRequestIntegrationsInnerPairs model =
    let
        pairs =
            [ encode "type" encodeCreateFineTuningJobRequestIntegrationsInnerType model.type_
            , encode "wandb" encodeCreateFineTuningJobRequestIntegrationsInnerWandb model.wandb
            ]
    in
    pairs


encodeCreateFineTuningJobRequestIntegrationsInnerType : CreateFineTuningJobRequestIntegrationsInnerType -> Json.Encode.Value
encodeCreateFineTuningJobRequestIntegrationsInnerType model =
    case model of
        CreateFineTuningJobRequestIntegrationsInnerTypeString subModel ->
            encodeString subModel




encodeCreateFineTuningJobRequestIntegrationsInnerWandb : CreateFineTuningJobRequestIntegrationsInnerWandb -> Json.Encode.Value
encodeCreateFineTuningJobRequestIntegrationsInnerWandb =
    encodeObject << encodeCreateFineTuningJobRequestIntegrationsInnerWandbPairs


encodeCreateFineTuningJobRequestIntegrationsInnerWandbWithTag : ( String, String ) -> CreateFineTuningJobRequestIntegrationsInnerWandb -> Json.Encode.Value
encodeCreateFineTuningJobRequestIntegrationsInnerWandbWithTag (tagField, tag) model =
    encodeObject (encodeCreateFineTuningJobRequestIntegrationsInnerWandbPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateFineTuningJobRequestIntegrationsInnerWandbPairs : CreateFineTuningJobRequestIntegrationsInnerWandb -> List EncodedField
encodeCreateFineTuningJobRequestIntegrationsInnerWandbPairs model =
    let
        pairs =
            [ encode "project" Json.Encode.string model.project
            , maybeEncodeNullable "name" Json.Encode.string model.name
            , maybeEncodeNullable "entity" Json.Encode.string model.entity
            , maybeEncode "tags" (Json.Encode.list Json.Encode.string) model.tags
            ]
    in
    pairs


encodeCreateFineTuningJobRequestModel : CreateFineTuningJobRequestModel -> Json.Encode.Value
encodeCreateFineTuningJobRequestModel =
    encodeObject << encodeCreateFineTuningJobRequestModelPairs


encodeCreateFineTuningJobRequestModelWithTag : ( String, String ) -> CreateFineTuningJobRequestModel -> Json.Encode.Value
encodeCreateFineTuningJobRequestModelWithTag (tagField, tag) model =
    encodeObject (encodeCreateFineTuningJobRequestModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateFineTuningJobRequestModelPairs : CreateFineTuningJobRequestModel -> List EncodedField
encodeCreateFineTuningJobRequestModelPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeCreateImageEditRequestModel : CreateImageEditRequestModel -> Json.Encode.Value
encodeCreateImageEditRequestModel =
    encodeObject << encodeCreateImageEditRequestModelPairs


encodeCreateImageEditRequestModelWithTag : ( String, String ) -> CreateImageEditRequestModel -> Json.Encode.Value
encodeCreateImageEditRequestModelWithTag (tagField, tag) model =
    encodeObject (encodeCreateImageEditRequestModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateImageEditRequestModelPairs : CreateImageEditRequestModel -> List EncodedField
encodeCreateImageEditRequestModelPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeCreateImageRequest : CreateImageRequest -> Json.Encode.Value
encodeCreateImageRequest =
    encodeObject << encodeCreateImageRequestPairs


encodeCreateImageRequestWithTag : ( String, String ) -> CreateImageRequest -> Json.Encode.Value
encodeCreateImageRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateImageRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateImageRequestPairs : CreateImageRequest -> List EncodedField
encodeCreateImageRequestPairs model =
    let
        pairs =
            [ encode "prompt" Json.Encode.string model.prompt
            , maybeEncodeNullable "model" encodeCreateImageRequestModel model.model
            , maybeEncodeNullable "n" Json.Encode.int model.n
            , maybeEncode "quality" encodeCreateImageRequestQuality model.quality
            , maybeEncodeNullable "response_format" encodeCreateImageRequestResponseFormat model.responseFormat
            , maybeEncodeNullable "size" encodeCreateImageRequestSize model.size
            , maybeEncodeNullable "style" encodeCreateImageRequestStyle model.style
            , maybeEncode "user" Json.Encode.string model.user
            ]
    in
    pairs

stringFromCreateImageRequestQuality : CreateImageRequestQuality -> String
stringFromCreateImageRequestQuality model =
    case model of
        CreateImageRequestQualityStandard ->
            "standard"

        CreateImageRequestQualityHd ->
            "hd"


encodeCreateImageRequestQuality : CreateImageRequestQuality -> Json.Encode.Value
encodeCreateImageRequestQuality =
    Json.Encode.string << stringFromCreateImageRequestQuality


stringFromCreateImageRequestResponseFormat : CreateImageRequestResponseFormat -> String
stringFromCreateImageRequestResponseFormat model =
    case model of
        CreateImageRequestResponseFormatUrl ->
            "url"

        CreateImageRequestResponseFormatB64Json ->
            "b64_json"


encodeCreateImageRequestResponseFormat : CreateImageRequestResponseFormat -> Json.Encode.Value
encodeCreateImageRequestResponseFormat =
    Json.Encode.string << stringFromCreateImageRequestResponseFormat


stringFromCreateImageRequestSize : CreateImageRequestSize -> String
stringFromCreateImageRequestSize model =
    case model of
        CreateImageRequestSize256x256 ->
            "256x256"

        CreateImageRequestSize512x512 ->
            "512x512"

        CreateImageRequestSize1024x1024 ->
            "1024x1024"

        CreateImageRequestSize1792x1024 ->
            "1792x1024"

        CreateImageRequestSize1024x1792 ->
            "1024x1792"


encodeCreateImageRequestSize : CreateImageRequestSize -> Json.Encode.Value
encodeCreateImageRequestSize =
    Json.Encode.string << stringFromCreateImageRequestSize


stringFromCreateImageRequestStyle : CreateImageRequestStyle -> String
stringFromCreateImageRequestStyle model =
    case model of
        CreateImageRequestStyleVivid ->
            "vivid"

        CreateImageRequestStyleNatural ->
            "natural"


encodeCreateImageRequestStyle : CreateImageRequestStyle -> Json.Encode.Value
encodeCreateImageRequestStyle =
    Json.Encode.string << stringFromCreateImageRequestStyle



encodeCreateImageRequestModel : CreateImageRequestModel -> Json.Encode.Value
encodeCreateImageRequestModel =
    encodeObject << encodeCreateImageRequestModelPairs


encodeCreateImageRequestModelWithTag : ( String, String ) -> CreateImageRequestModel -> Json.Encode.Value
encodeCreateImageRequestModelWithTag (tagField, tag) model =
    encodeObject (encodeCreateImageRequestModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateImageRequestModelPairs : CreateImageRequestModel -> List EncodedField
encodeCreateImageRequestModelPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeCreateMessageRequest : CreateMessageRequest -> Json.Encode.Value
encodeCreateMessageRequest =
    encodeObject << encodeCreateMessageRequestPairs


encodeCreateMessageRequestWithTag : ( String, String ) -> CreateMessageRequest -> Json.Encode.Value
encodeCreateMessageRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateMessageRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateMessageRequestPairs : CreateMessageRequest -> List EncodedField
encodeCreateMessageRequestPairs model =
    let
        pairs =
            [ encode "role" encodeCreateMessageRequestRole model.role
            , encode "content" Json.Encode.string model.content
            , maybeEncode "file_ids" (Json.Encode.list Json.Encode.string) model.fileIds
            , maybeEncodeNullable "metadata" encodeObject model.metadata
            ]
    in
    pairs

stringFromCreateMessageRequestRole : CreateMessageRequestRole -> String
stringFromCreateMessageRequestRole model =
    case model of
        CreateMessageRequestRoleUser ->
            "user"

        CreateMessageRequestRoleAssistant ->
            "assistant"


encodeCreateMessageRequestRole : CreateMessageRequestRole -> Json.Encode.Value
encodeCreateMessageRequestRole =
    Json.Encode.string << stringFromCreateMessageRequestRole



encodeCreateModerationRequest : CreateModerationRequest -> Json.Encode.Value
encodeCreateModerationRequest =
    encodeObject << encodeCreateModerationRequestPairs


encodeCreateModerationRequestWithTag : ( String, String ) -> CreateModerationRequest -> Json.Encode.Value
encodeCreateModerationRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateModerationRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateModerationRequestPairs : CreateModerationRequest -> List EncodedField
encodeCreateModerationRequestPairs model =
    let
        pairs =
            [ encode "input" encodeCreateModerationRequestInput model.input
            , maybeEncode "model" encodeCreateModerationRequestModel model.model
            ]
    in
    pairs


encodeCreateModerationRequestInput : CreateModerationRequestInput -> Json.Encode.Value
encodeCreateModerationRequestInput model =
    case model of
        CreateModerationRequestInputString subModel ->
            encodeString subModel




encodeCreateModerationRequestModel : CreateModerationRequestModel -> Json.Encode.Value
encodeCreateModerationRequestModel =
    encodeObject << encodeCreateModerationRequestModelPairs


encodeCreateModerationRequestModelWithTag : ( String, String ) -> CreateModerationRequestModel -> Json.Encode.Value
encodeCreateModerationRequestModelWithTag (tagField, tag) model =
    encodeObject (encodeCreateModerationRequestModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateModerationRequestModelPairs : CreateModerationRequestModel -> List EncodedField
encodeCreateModerationRequestModelPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeCreateModerationResponse : CreateModerationResponse -> Json.Encode.Value
encodeCreateModerationResponse =
    encodeObject << encodeCreateModerationResponsePairs


encodeCreateModerationResponseWithTag : ( String, String ) -> CreateModerationResponse -> Json.Encode.Value
encodeCreateModerationResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateModerationResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateModerationResponsePairs : CreateModerationResponse -> List EncodedField
encodeCreateModerationResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "model" Json.Encode.string model.model
            , encode "results" (Json.Encode.list encodeCreateModerationResponseResultsInner) model.results
            ]
    in
    pairs


encodeCreateModerationResponseResultsInner : CreateModerationResponseResultsInner -> Json.Encode.Value
encodeCreateModerationResponseResultsInner =
    encodeObject << encodeCreateModerationResponseResultsInnerPairs


encodeCreateModerationResponseResultsInnerWithTag : ( String, String ) -> CreateModerationResponseResultsInner -> Json.Encode.Value
encodeCreateModerationResponseResultsInnerWithTag (tagField, tag) model =
    encodeObject (encodeCreateModerationResponseResultsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateModerationResponseResultsInnerPairs : CreateModerationResponseResultsInner -> List EncodedField
encodeCreateModerationResponseResultsInnerPairs model =
    let
        pairs =
            [ encode "flagged" Json.Encode.bool model.flagged
            , encode "categories" encodeCreateModerationResponseResultsInnerCategories model.categories
            , encode "category_scores" encodeCreateModerationResponseResultsInnerCategoryScores model.categoryScores
            ]
    in
    pairs


encodeCreateModerationResponseResultsInnerCategories : CreateModerationResponseResultsInnerCategories -> Json.Encode.Value
encodeCreateModerationResponseResultsInnerCategories =
    encodeObject << encodeCreateModerationResponseResultsInnerCategoriesPairs


encodeCreateModerationResponseResultsInnerCategoriesWithTag : ( String, String ) -> CreateModerationResponseResultsInnerCategories -> Json.Encode.Value
encodeCreateModerationResponseResultsInnerCategoriesWithTag (tagField, tag) model =
    encodeObject (encodeCreateModerationResponseResultsInnerCategoriesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateModerationResponseResultsInnerCategoriesPairs : CreateModerationResponseResultsInnerCategories -> List EncodedField
encodeCreateModerationResponseResultsInnerCategoriesPairs model =
    let
        pairs =
            [ encode "hate" Json.Encode.bool model.hate
            , encode "hate/threatening" Json.Encode.bool model.hatethreatening
            , encode "harassment" Json.Encode.bool model.harassment
            , encode "harassment/threatening" Json.Encode.bool model.harassmentthreatening
            , encode "self-harm" Json.Encode.bool model.selfharm
            , encode "self-harm/intent" Json.Encode.bool model.selfharmintent
            , encode "self-harm/instructions" Json.Encode.bool model.selfharminstructions
            , encode "sexual" Json.Encode.bool model.sexual
            , encode "sexual/minors" Json.Encode.bool model.sexualminors
            , encode "violence" Json.Encode.bool model.violence
            , encode "violence/graphic" Json.Encode.bool model.violencegraphic
            ]
    in
    pairs


encodeCreateModerationResponseResultsInnerCategoryScores : CreateModerationResponseResultsInnerCategoryScores -> Json.Encode.Value
encodeCreateModerationResponseResultsInnerCategoryScores =
    encodeObject << encodeCreateModerationResponseResultsInnerCategoryScoresPairs


encodeCreateModerationResponseResultsInnerCategoryScoresWithTag : ( String, String ) -> CreateModerationResponseResultsInnerCategoryScores -> Json.Encode.Value
encodeCreateModerationResponseResultsInnerCategoryScoresWithTag (tagField, tag) model =
    encodeObject (encodeCreateModerationResponseResultsInnerCategoryScoresPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateModerationResponseResultsInnerCategoryScoresPairs : CreateModerationResponseResultsInnerCategoryScores -> List EncodedField
encodeCreateModerationResponseResultsInnerCategoryScoresPairs model =
    let
        pairs =
            [ encode "hate" Json.Encode.float model.hate
            , encode "hate/threatening" Json.Encode.float model.hatethreatening
            , encode "harassment" Json.Encode.float model.harassment
            , encode "harassment/threatening" Json.Encode.float model.harassmentthreatening
            , encode "self-harm" Json.Encode.float model.selfharm
            , encode "self-harm/intent" Json.Encode.float model.selfharmintent
            , encode "self-harm/instructions" Json.Encode.float model.selfharminstructions
            , encode "sexual" Json.Encode.float model.sexual
            , encode "sexual/minors" Json.Encode.float model.sexualminors
            , encode "violence" Json.Encode.float model.violence
            , encode "violence/graphic" Json.Encode.float model.violencegraphic
            ]
    in
    pairs


encodeCreateRunRequest : CreateRunRequest -> Json.Encode.Value
encodeCreateRunRequest =
    encodeObject << encodeCreateRunRequestPairs


encodeCreateRunRequestWithTag : ( String, String ) -> CreateRunRequest -> Json.Encode.Value
encodeCreateRunRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateRunRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateRunRequestPairs : CreateRunRequest -> List EncodedField
encodeCreateRunRequestPairs model =
    let
        pairs =
            [ encode "assistant_id" Json.Encode.string model.assistantId
            , maybeEncodeNullable "model" encodeCreateRunRequestModel model.model
            , maybeEncodeNullable "instructions" Json.Encode.string model.instructions
            , maybeEncodeNullable "additional_instructions" Json.Encode.string model.additionalInstructions
            , maybeEncodeNullable "additional_messages" (Json.Encode.list encodeCreateMessageRequest) model.additionalMessages
            , maybeEncodeNullable "tools" (Json.Encode.list encodeAssistantObjectToolsInner) model.tools
            , maybeEncodeNullable "metadata" encodeObject model.metadata
            , maybeEncodeNullable "temperature" Json.Encode.float model.temperature
            , maybeEncodeNullable "stream" Json.Encode.bool model.stream
            , maybeEncodeNullable "max_prompt_tokens" Json.Encode.int model.maxPromptTokens
            , maybeEncodeNullable "max_completion_tokens" Json.Encode.int model.maxCompletionTokens
            , maybeEncode "truncation_strategy" encodeTruncationObject model.truncationStrategy
            , maybeEncode "tool_choice" encodeAssistantsApiToolChoiceOption model.toolChoice
            , maybeEncode "response_format" encodeAssistantsApiResponseFormatOption model.responseFormat
            ]
    in
    pairs


encodeCreateRunRequestModel : CreateRunRequestModel -> Json.Encode.Value
encodeCreateRunRequestModel =
    encodeObject << encodeCreateRunRequestModelPairs


encodeCreateRunRequestModelWithTag : ( String, String ) -> CreateRunRequestModel -> Json.Encode.Value
encodeCreateRunRequestModelWithTag (tagField, tag) model =
    encodeObject (encodeCreateRunRequestModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateRunRequestModelPairs : CreateRunRequestModel -> List EncodedField
encodeCreateRunRequestModelPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeCreateSpeechRequest : CreateSpeechRequest -> Json.Encode.Value
encodeCreateSpeechRequest =
    encodeObject << encodeCreateSpeechRequestPairs


encodeCreateSpeechRequestWithTag : ( String, String ) -> CreateSpeechRequest -> Json.Encode.Value
encodeCreateSpeechRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateSpeechRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateSpeechRequestPairs : CreateSpeechRequest -> List EncodedField
encodeCreateSpeechRequestPairs model =
    let
        pairs =
            [ encode "model" encodeCreateSpeechRequestModel model.model
            , encode "input" Json.Encode.string model.input
            , encode "voice" encodeCreateSpeechRequestVoice model.voice
            , maybeEncode "response_format" encodeCreateSpeechRequestResponseFormat model.responseFormat
            , maybeEncode "speed" Json.Encode.float model.speed
            ]
    in
    pairs

stringFromCreateSpeechRequestVoice : CreateSpeechRequestVoice -> String
stringFromCreateSpeechRequestVoice model =
    case model of
        CreateSpeechRequestVoiceAlloy ->
            "alloy"

        CreateSpeechRequestVoiceEcho ->
            "echo"

        CreateSpeechRequestVoiceFable ->
            "fable"

        CreateSpeechRequestVoiceOnyx ->
            "onyx"

        CreateSpeechRequestVoiceNova ->
            "nova"

        CreateSpeechRequestVoiceShimmer ->
            "shimmer"


encodeCreateSpeechRequestVoice : CreateSpeechRequestVoice -> Json.Encode.Value
encodeCreateSpeechRequestVoice =
    Json.Encode.string << stringFromCreateSpeechRequestVoice


stringFromCreateSpeechRequestResponseFormat : CreateSpeechRequestResponseFormat -> String
stringFromCreateSpeechRequestResponseFormat model =
    case model of
        CreateSpeechRequestResponseFormatMp3 ->
            "mp3"

        CreateSpeechRequestResponseFormatOpus ->
            "opus"

        CreateSpeechRequestResponseFormatAac ->
            "aac"

        CreateSpeechRequestResponseFormatFlac ->
            "flac"

        CreateSpeechRequestResponseFormatWav ->
            "wav"

        CreateSpeechRequestResponseFormatPcm ->
            "pcm"


encodeCreateSpeechRequestResponseFormat : CreateSpeechRequestResponseFormat -> Json.Encode.Value
encodeCreateSpeechRequestResponseFormat =
    Json.Encode.string << stringFromCreateSpeechRequestResponseFormat



encodeCreateSpeechRequestModel : CreateSpeechRequestModel -> Json.Encode.Value
encodeCreateSpeechRequestModel =
    encodeObject << encodeCreateSpeechRequestModelPairs


encodeCreateSpeechRequestModelWithTag : ( String, String ) -> CreateSpeechRequestModel -> Json.Encode.Value
encodeCreateSpeechRequestModelWithTag (tagField, tag) model =
    encodeObject (encodeCreateSpeechRequestModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateSpeechRequestModelPairs : CreateSpeechRequestModel -> List EncodedField
encodeCreateSpeechRequestModelPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeCreateThreadAndRunRequest : CreateThreadAndRunRequest -> Json.Encode.Value
encodeCreateThreadAndRunRequest =
    encodeObject << encodeCreateThreadAndRunRequestPairs


encodeCreateThreadAndRunRequestWithTag : ( String, String ) -> CreateThreadAndRunRequest -> Json.Encode.Value
encodeCreateThreadAndRunRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateThreadAndRunRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateThreadAndRunRequestPairs : CreateThreadAndRunRequest -> List EncodedField
encodeCreateThreadAndRunRequestPairs model =
    let
        pairs =
            [ encode "assistant_id" Json.Encode.string model.assistantId
            , maybeEncode "thread" encodeCreateThreadRequest model.thread
            , maybeEncodeNullable "model" encodeCreateRunRequestModel model.model
            , maybeEncodeNullable "instructions" Json.Encode.string model.instructions
            , maybeEncodeNullable "tools" (Json.Encode.list encodeCreateThreadAndRunRequestToolsInner) model.tools
            , maybeEncodeNullable "metadata" encodeObject model.metadata
            , maybeEncodeNullable "temperature" Json.Encode.float model.temperature
            , maybeEncodeNullable "stream" Json.Encode.bool model.stream
            , maybeEncodeNullable "max_prompt_tokens" Json.Encode.int model.maxPromptTokens
            , maybeEncodeNullable "max_completion_tokens" Json.Encode.int model.maxCompletionTokens
            , maybeEncode "truncation_strategy" encodeTruncationObject model.truncationStrategy
            , maybeEncode "tool_choice" encodeAssistantsApiToolChoiceOption model.toolChoice
            , maybeEncode "response_format" encodeAssistantsApiResponseFormatOption model.responseFormat
            ]
    in
    pairs


encodeCreateThreadAndRunRequestToolsInner : CreateThreadAndRunRequestToolsInner -> Json.Encode.Value
encodeCreateThreadAndRunRequestToolsInner model =
    case model of
        CreateThreadAndRunRequestToolsInnerAssistantToolsCode subModel ->
            encodeAssistantToolsCode subModel


        CreateThreadAndRunRequestToolsInnerAssistantToolsFunction subModel ->
            encodeAssistantToolsFunction subModel


        CreateThreadAndRunRequestToolsInnerAssistantToolsRetrieval subModel ->
            encodeAssistantToolsRetrieval subModel




encodeCreateThreadRequest : CreateThreadRequest -> Json.Encode.Value
encodeCreateThreadRequest =
    encodeObject << encodeCreateThreadRequestPairs


encodeCreateThreadRequestWithTag : ( String, String ) -> CreateThreadRequest -> Json.Encode.Value
encodeCreateThreadRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateThreadRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateThreadRequestPairs : CreateThreadRequest -> List EncodedField
encodeCreateThreadRequestPairs model =
    let
        pairs =
            [ maybeEncode "messages" (Json.Encode.list encodeCreateMessageRequest) model.messages
            , maybeEncodeNullable "metadata" encodeObject model.metadata
            ]
    in
    pairs


encodeCreateTranscription200Response : CreateTranscription200Response -> Json.Encode.Value
encodeCreateTranscription200Response model =
    case model of
        CreateTranscription200ResponseCreateTranscriptionResponseJson subModel ->
            encodeCreateTranscriptionResponseJson subModel


        CreateTranscription200ResponseCreateTranscriptionResponseVerboseJson subModel ->
            encodeCreateTranscriptionResponseVerboseJson subModel




encodeCreateTranscriptionRequestModel : CreateTranscriptionRequestModel -> Json.Encode.Value
encodeCreateTranscriptionRequestModel =
    encodeObject << encodeCreateTranscriptionRequestModelPairs


encodeCreateTranscriptionRequestModelWithTag : ( String, String ) -> CreateTranscriptionRequestModel -> Json.Encode.Value
encodeCreateTranscriptionRequestModelWithTag (tagField, tag) model =
    encodeObject (encodeCreateTranscriptionRequestModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateTranscriptionRequestModelPairs : CreateTranscriptionRequestModel -> List EncodedField
encodeCreateTranscriptionRequestModelPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeCreateTranscriptionResponseJson : CreateTranscriptionResponseJson -> Json.Encode.Value
encodeCreateTranscriptionResponseJson =
    encodeObject << encodeCreateTranscriptionResponseJsonPairs


encodeCreateTranscriptionResponseJsonWithTag : ( String, String ) -> CreateTranscriptionResponseJson -> Json.Encode.Value
encodeCreateTranscriptionResponseJsonWithTag (tagField, tag) model =
    encodeObject (encodeCreateTranscriptionResponseJsonPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateTranscriptionResponseJsonPairs : CreateTranscriptionResponseJson -> List EncodedField
encodeCreateTranscriptionResponseJsonPairs model =
    let
        pairs =
            [ encode "text" Json.Encode.string model.text
            ]
    in
    pairs


encodeCreateTranscriptionResponseVerboseJson : CreateTranscriptionResponseVerboseJson -> Json.Encode.Value
encodeCreateTranscriptionResponseVerboseJson =
    encodeObject << encodeCreateTranscriptionResponseVerboseJsonPairs


encodeCreateTranscriptionResponseVerboseJsonWithTag : ( String, String ) -> CreateTranscriptionResponseVerboseJson -> Json.Encode.Value
encodeCreateTranscriptionResponseVerboseJsonWithTag (tagField, tag) model =
    encodeObject (encodeCreateTranscriptionResponseVerboseJsonPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateTranscriptionResponseVerboseJsonPairs : CreateTranscriptionResponseVerboseJson -> List EncodedField
encodeCreateTranscriptionResponseVerboseJsonPairs model =
    let
        pairs =
            [ encode "language" Json.Encode.string model.language
            , encode "duration" Json.Encode.string model.duration
            , encode "text" Json.Encode.string model.text
            , maybeEncode "words" (Json.Encode.list encodeTranscriptionWord) model.words
            , maybeEncode "segments" (Json.Encode.list encodeTranscriptionSegment) model.segments
            ]
    in
    pairs


encodeCreateTranslation200Response : CreateTranslation200Response -> Json.Encode.Value
encodeCreateTranslation200Response model =
    case model of
        CreateTranslation200ResponseCreateTranslationResponseJson subModel ->
            encodeCreateTranslationResponseJson subModel


        CreateTranslation200ResponseCreateTranslationResponseVerboseJson subModel ->
            encodeCreateTranslationResponseVerboseJson subModel




encodeCreateTranslationResponseJson : CreateTranslationResponseJson -> Json.Encode.Value
encodeCreateTranslationResponseJson =
    encodeObject << encodeCreateTranslationResponseJsonPairs


encodeCreateTranslationResponseJsonWithTag : ( String, String ) -> CreateTranslationResponseJson -> Json.Encode.Value
encodeCreateTranslationResponseJsonWithTag (tagField, tag) model =
    encodeObject (encodeCreateTranslationResponseJsonPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateTranslationResponseJsonPairs : CreateTranslationResponseJson -> List EncodedField
encodeCreateTranslationResponseJsonPairs model =
    let
        pairs =
            [ encode "text" Json.Encode.string model.text
            ]
    in
    pairs


encodeCreateTranslationResponseVerboseJson : CreateTranslationResponseVerboseJson -> Json.Encode.Value
encodeCreateTranslationResponseVerboseJson =
    encodeObject << encodeCreateTranslationResponseVerboseJsonPairs


encodeCreateTranslationResponseVerboseJsonWithTag : ( String, String ) -> CreateTranslationResponseVerboseJson -> Json.Encode.Value
encodeCreateTranslationResponseVerboseJsonWithTag (tagField, tag) model =
    encodeObject (encodeCreateTranslationResponseVerboseJsonPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateTranslationResponseVerboseJsonPairs : CreateTranslationResponseVerboseJson -> List EncodedField
encodeCreateTranslationResponseVerboseJsonPairs model =
    let
        pairs =
            [ encode "language" Json.Encode.string model.language
            , encode "duration" Json.Encode.string model.duration
            , encode "text" Json.Encode.string model.text
            , maybeEncode "segments" (Json.Encode.list encodeTranscriptionSegment) model.segments
            ]
    in
    pairs


encodeDeleteAssistantFileResponse : DeleteAssistantFileResponse -> Json.Encode.Value
encodeDeleteAssistantFileResponse =
    encodeObject << encodeDeleteAssistantFileResponsePairs


encodeDeleteAssistantFileResponseWithTag : ( String, String ) -> DeleteAssistantFileResponse -> Json.Encode.Value
encodeDeleteAssistantFileResponseWithTag (tagField, tag) model =
    encodeObject (encodeDeleteAssistantFileResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteAssistantFileResponsePairs : DeleteAssistantFileResponse -> List EncodedField
encodeDeleteAssistantFileResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "deleted" Json.Encode.bool model.deleted
            , encode "object" encodeDeleteAssistantFileResponseObject model.object
            ]
    in
    pairs

stringFromDeleteAssistantFileResponseObject : DeleteAssistantFileResponseObject -> String
stringFromDeleteAssistantFileResponseObject model =
    case model of
        DeleteAssistantFileResponseObjectAssistantFileDeleted ->
            "assistant.file.deleted"


encodeDeleteAssistantFileResponseObject : DeleteAssistantFileResponseObject -> Json.Encode.Value
encodeDeleteAssistantFileResponseObject =
    Json.Encode.string << stringFromDeleteAssistantFileResponseObject



encodeDeleteAssistantResponse : DeleteAssistantResponse -> Json.Encode.Value
encodeDeleteAssistantResponse =
    encodeObject << encodeDeleteAssistantResponsePairs


encodeDeleteAssistantResponseWithTag : ( String, String ) -> DeleteAssistantResponse -> Json.Encode.Value
encodeDeleteAssistantResponseWithTag (tagField, tag) model =
    encodeObject (encodeDeleteAssistantResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteAssistantResponsePairs : DeleteAssistantResponse -> List EncodedField
encodeDeleteAssistantResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "deleted" Json.Encode.bool model.deleted
            , encode "object" encodeDeleteAssistantResponseObject model.object
            ]
    in
    pairs

stringFromDeleteAssistantResponseObject : DeleteAssistantResponseObject -> String
stringFromDeleteAssistantResponseObject model =
    case model of
        DeleteAssistantResponseObjectAssistantDeleted ->
            "assistant.deleted"


encodeDeleteAssistantResponseObject : DeleteAssistantResponseObject -> Json.Encode.Value
encodeDeleteAssistantResponseObject =
    Json.Encode.string << stringFromDeleteAssistantResponseObject



encodeDeleteFileResponse : DeleteFileResponse -> Json.Encode.Value
encodeDeleteFileResponse =
    encodeObject << encodeDeleteFileResponsePairs


encodeDeleteFileResponseWithTag : ( String, String ) -> DeleteFileResponse -> Json.Encode.Value
encodeDeleteFileResponseWithTag (tagField, tag) model =
    encodeObject (encodeDeleteFileResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteFileResponsePairs : DeleteFileResponse -> List EncodedField
encodeDeleteFileResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "object" encodeDeleteFileResponseObject model.object
            , encode "deleted" Json.Encode.bool model.deleted
            ]
    in
    pairs

stringFromDeleteFileResponseObject : DeleteFileResponseObject -> String
stringFromDeleteFileResponseObject model =
    case model of
        DeleteFileResponseObjectFile ->
            "file"


encodeDeleteFileResponseObject : DeleteFileResponseObject -> Json.Encode.Value
encodeDeleteFileResponseObject =
    Json.Encode.string << stringFromDeleteFileResponseObject



encodeDeleteMessageResponse : DeleteMessageResponse -> Json.Encode.Value
encodeDeleteMessageResponse =
    encodeObject << encodeDeleteMessageResponsePairs


encodeDeleteMessageResponseWithTag : ( String, String ) -> DeleteMessageResponse -> Json.Encode.Value
encodeDeleteMessageResponseWithTag (tagField, tag) model =
    encodeObject (encodeDeleteMessageResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteMessageResponsePairs : DeleteMessageResponse -> List EncodedField
encodeDeleteMessageResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "deleted" Json.Encode.bool model.deleted
            , encode "object" encodeDeleteMessageResponseObject model.object
            ]
    in
    pairs

stringFromDeleteMessageResponseObject : DeleteMessageResponseObject -> String
stringFromDeleteMessageResponseObject model =
    case model of
        DeleteMessageResponseObjectThreadMessageDeleted ->
            "thread.message.deleted"


encodeDeleteMessageResponseObject : DeleteMessageResponseObject -> Json.Encode.Value
encodeDeleteMessageResponseObject =
    Json.Encode.string << stringFromDeleteMessageResponseObject



encodeDeleteModelResponse : DeleteModelResponse -> Json.Encode.Value
encodeDeleteModelResponse =
    encodeObject << encodeDeleteModelResponsePairs


encodeDeleteModelResponseWithTag : ( String, String ) -> DeleteModelResponse -> Json.Encode.Value
encodeDeleteModelResponseWithTag (tagField, tag) model =
    encodeObject (encodeDeleteModelResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteModelResponsePairs : DeleteModelResponse -> List EncodedField
encodeDeleteModelResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "deleted" Json.Encode.bool model.deleted
            , encode "object" Json.Encode.string model.object
            ]
    in
    pairs


encodeDeleteThreadResponse : DeleteThreadResponse -> Json.Encode.Value
encodeDeleteThreadResponse =
    encodeObject << encodeDeleteThreadResponsePairs


encodeDeleteThreadResponseWithTag : ( String, String ) -> DeleteThreadResponse -> Json.Encode.Value
encodeDeleteThreadResponseWithTag (tagField, tag) model =
    encodeObject (encodeDeleteThreadResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteThreadResponsePairs : DeleteThreadResponse -> List EncodedField
encodeDeleteThreadResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "deleted" Json.Encode.bool model.deleted
            , encode "object" encodeDeleteThreadResponseObject model.object
            ]
    in
    pairs

stringFromDeleteThreadResponseObject : DeleteThreadResponseObject -> String
stringFromDeleteThreadResponseObject model =
    case model of
        DeleteThreadResponseObjectThreadDeleted ->
            "thread.deleted"


encodeDeleteThreadResponseObject : DeleteThreadResponseObject -> Json.Encode.Value
encodeDeleteThreadResponseObject =
    Json.Encode.string << stringFromDeleteThreadResponseObject



encodeDoneEvent : DoneEvent -> Json.Encode.Value
encodeDoneEvent =
    encodeObject << encodeDoneEventPairs


encodeDoneEventWithTag : ( String, String ) -> DoneEvent -> Json.Encode.Value
encodeDoneEventWithTag (tagField, tag) model =
    encodeObject (encodeDoneEventPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDoneEventPairs : DoneEvent -> List EncodedField
encodeDoneEventPairs model =
    let
        pairs =
            [ encode "event" encodeDoneEventEvent model.event
            , encode "data" encodeDoneEventData model.data
            ]
    in
    pairs

stringFromDoneEventEvent : DoneEventEvent -> String
stringFromDoneEventEvent model =
    case model of
        DoneEventEventDone ->
            "done"


encodeDoneEventEvent : DoneEventEvent -> Json.Encode.Value
encodeDoneEventEvent =
    Json.Encode.string << stringFromDoneEventEvent


stringFromDoneEventData : DoneEventData -> String
stringFromDoneEventData model =
    case model of
        DoneEventData[DONE] ->
            "[DONE]"


encodeDoneEventData : DoneEventData -> Json.Encode.Value
encodeDoneEventData =
    Json.Encode.string << stringFromDoneEventData



encodeEmbedding : Embedding -> Json.Encode.Value
encodeEmbedding =
    encodeObject << encodeEmbeddingPairs


encodeEmbeddingWithTag : ( String, String ) -> Embedding -> Json.Encode.Value
encodeEmbeddingWithTag (tagField, tag) model =
    encodeObject (encodeEmbeddingPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeEmbeddingPairs : Embedding -> List EncodedField
encodeEmbeddingPairs model =
    let
        pairs =
            [ encode "index" Json.Encode.int model.index
            , encode "embedding" (Json.Encode.list Json.Encode.float) model.embedding
            , encode "object" encodeEmbeddingObject model.object
            ]
    in
    pairs

stringFromEmbeddingObject : EmbeddingObject -> String
stringFromEmbeddingObject model =
    case model of
        EmbeddingObjectEmbedding ->
            "embedding"


encodeEmbeddingObject : EmbeddingObject -> Json.Encode.Value
encodeEmbeddingObject =
    Json.Encode.string << stringFromEmbeddingObject



encodeError : Error -> Json.Encode.Value
encodeError =
    encodeObject << encodeErrorPairs


encodeErrorWithTag : ( String, String ) -> Error -> Json.Encode.Value
encodeErrorWithTag (tagField, tag) model =
    encodeObject (encodeErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeErrorPairs : Error -> List EncodedField
encodeErrorPairs model =
    let
        pairs =
            [ encodeNullable "code" Json.Encode.string model.code
            , encode "message" Json.Encode.string model.message
            , encodeNullable "param" Json.Encode.string model.param
            , encode "type" Json.Encode.string model.type_
            ]
    in
    pairs


encodeErrorEvent : ErrorEvent -> Json.Encode.Value
encodeErrorEvent =
    encodeObject << encodeErrorEventPairs


encodeErrorEventWithTag : ( String, String ) -> ErrorEvent -> Json.Encode.Value
encodeErrorEventWithTag (tagField, tag) model =
    encodeObject (encodeErrorEventPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeErrorEventPairs : ErrorEvent -> List EncodedField
encodeErrorEventPairs model =
    let
        pairs =
            [ encode "event" encodeErrorEventEvent model.event
            , encode "data" encodeError model.data
            ]
    in
    pairs

stringFromErrorEventEvent : ErrorEventEvent -> String
stringFromErrorEventEvent model =
    case model of
        ErrorEventEventError ->
            "error"


encodeErrorEventEvent : ErrorEventEvent -> Json.Encode.Value
encodeErrorEventEvent =
    Json.Encode.string << stringFromErrorEventEvent



encodeErrorResponse : ErrorResponse -> Json.Encode.Value
encodeErrorResponse =
    encodeObject << encodeErrorResponsePairs


encodeErrorResponseWithTag : ( String, String ) -> ErrorResponse -> Json.Encode.Value
encodeErrorResponseWithTag (tagField, tag) model =
    encodeObject (encodeErrorResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeErrorResponsePairs : ErrorResponse -> List EncodedField
encodeErrorResponsePairs model =
    let
        pairs =
            [ encode "error" encodeError model.error
            ]
    in
    pairs


encodeFineTuningIntegration : FineTuningIntegration -> Json.Encode.Value
encodeFineTuningIntegration =
    encodeObject << encodeFineTuningIntegrationPairs


encodeFineTuningIntegrationWithTag : ( String, String ) -> FineTuningIntegration -> Json.Encode.Value
encodeFineTuningIntegrationWithTag (tagField, tag) model =
    encodeObject (encodeFineTuningIntegrationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFineTuningIntegrationPairs : FineTuningIntegration -> List EncodedField
encodeFineTuningIntegrationPairs model =
    let
        pairs =
            [ encode "type" encodeFineTuningIntegrationType model.type_
            , encode "wandb" encodeCreateFineTuningJobRequestIntegrationsInnerWandb model.wandb
            ]
    in
    pairs

stringFromFineTuningIntegrationType : FineTuningIntegrationType -> String
stringFromFineTuningIntegrationType model =
    case model of
        FineTuningIntegrationTypeWandb ->
            "wandb"


encodeFineTuningIntegrationType : FineTuningIntegrationType -> Json.Encode.Value
encodeFineTuningIntegrationType =
    Json.Encode.string << stringFromFineTuningIntegrationType



encodeFineTuningJob : FineTuningJob -> Json.Encode.Value
encodeFineTuningJob =
    encodeObject << encodeFineTuningJobPairs


encodeFineTuningJobWithTag : ( String, String ) -> FineTuningJob -> Json.Encode.Value
encodeFineTuningJobWithTag (tagField, tag) model =
    encodeObject (encodeFineTuningJobPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFineTuningJobPairs : FineTuningJob -> List EncodedField
encodeFineTuningJobPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "created_at" Json.Encode.int model.createdAt
            , encodeNullable "error" encodeFineTuningJobError model.error
            , encodeNullable "fine_tuned_model" Json.Encode.string model.fineTunedModel
            , encodeNullable "finished_at" Json.Encode.int model.finishedAt
            , encode "hyperparameters" encodeFineTuningJobHyperparameters model.hyperparameters
            , encode "model" Json.Encode.string model.model
            , encode "object" encodeFineTuningJobObject model.object
            , encode "organization_id" Json.Encode.string model.organizationId
            , encode "result_files" (Json.Encode.list Json.Encode.string) model.resultFiles
            , encode "status" encodeFineTuningJobStatus model.status
            , encodeNullable "trained_tokens" Json.Encode.int model.trainedTokens
            , encode "training_file" Json.Encode.string model.trainingFile
            , encodeNullable "validation_file" Json.Encode.string model.validationFile
            , maybeEncodeNullable "integrations" (Json.Encode.list encodeFineTuningJobIntegrationsInner) model.integrations
            , encode "seed" Json.Encode.int model.seed
            ]
    in
    pairs

stringFromFineTuningJobObject : FineTuningJobObject -> String
stringFromFineTuningJobObject model =
    case model of
        FineTuningJobObjectFineTuningJob ->
            "fine_tuning.job"


encodeFineTuningJobObject : FineTuningJobObject -> Json.Encode.Value
encodeFineTuningJobObject =
    Json.Encode.string << stringFromFineTuningJobObject


stringFromFineTuningJobStatus : FineTuningJobStatus -> String
stringFromFineTuningJobStatus model =
    case model of
        FineTuningJobStatusValidatingFiles ->
            "validating_files"

        FineTuningJobStatusQueued ->
            "queued"

        FineTuningJobStatusRunning ->
            "running"

        FineTuningJobStatusSucceeded ->
            "succeeded"

        FineTuningJobStatusFailed ->
            "failed"

        FineTuningJobStatusCancelled ->
            "cancelled"


encodeFineTuningJobStatus : FineTuningJobStatus -> Json.Encode.Value
encodeFineTuningJobStatus =
    Json.Encode.string << stringFromFineTuningJobStatus



encodeFineTuningJobCheckpoint : FineTuningJobCheckpoint -> Json.Encode.Value
encodeFineTuningJobCheckpoint =
    encodeObject << encodeFineTuningJobCheckpointPairs


encodeFineTuningJobCheckpointWithTag : ( String, String ) -> FineTuningJobCheckpoint -> Json.Encode.Value
encodeFineTuningJobCheckpointWithTag (tagField, tag) model =
    encodeObject (encodeFineTuningJobCheckpointPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFineTuningJobCheckpointPairs : FineTuningJobCheckpoint -> List EncodedField
encodeFineTuningJobCheckpointPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "created_at" Json.Encode.int model.createdAt
            , encode "fine_tuned_model_checkpoint" Json.Encode.string model.fineTunedModelCheckpoint
            , encode "step_number" Json.Encode.int model.stepNumber
            , encode "metrics" encodeFineTuningJobCheckpointMetrics model.metrics
            , encode "fine_tuning_job_id" Json.Encode.string model.fineTuningJobId
            , encode "object" encodeFineTuningJobCheckpointObject model.object
            ]
    in
    pairs

stringFromFineTuningJobCheckpointObject : FineTuningJobCheckpointObject -> String
stringFromFineTuningJobCheckpointObject model =
    case model of
        FineTuningJobCheckpointObjectFineTuningJobCheckpoint ->
            "fine_tuning.job.checkpoint"


encodeFineTuningJobCheckpointObject : FineTuningJobCheckpointObject -> Json.Encode.Value
encodeFineTuningJobCheckpointObject =
    Json.Encode.string << stringFromFineTuningJobCheckpointObject



encodeFineTuningJobCheckpointMetrics : FineTuningJobCheckpointMetrics -> Json.Encode.Value
encodeFineTuningJobCheckpointMetrics =
    encodeObject << encodeFineTuningJobCheckpointMetricsPairs


encodeFineTuningJobCheckpointMetricsWithTag : ( String, String ) -> FineTuningJobCheckpointMetrics -> Json.Encode.Value
encodeFineTuningJobCheckpointMetricsWithTag (tagField, tag) model =
    encodeObject (encodeFineTuningJobCheckpointMetricsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFineTuningJobCheckpointMetricsPairs : FineTuningJobCheckpointMetrics -> List EncodedField
encodeFineTuningJobCheckpointMetricsPairs model =
    let
        pairs =
            [ maybeEncode "step" Json.Encode.float model.step
            , maybeEncode "train_loss" Json.Encode.float model.trainLoss
            , maybeEncode "train_mean_token_accuracy" Json.Encode.float model.trainMeanTokenAccuracy
            , maybeEncode "valid_loss" Json.Encode.float model.validLoss
            , maybeEncode "valid_mean_token_accuracy" Json.Encode.float model.validMeanTokenAccuracy
            , maybeEncode "full_valid_loss" Json.Encode.float model.fullValidLoss
            , maybeEncode "full_valid_mean_token_accuracy" Json.Encode.float model.fullValidMeanTokenAccuracy
            ]
    in
    pairs


encodeFineTuningJobError : FineTuningJobError -> Json.Encode.Value
encodeFineTuningJobError =
    encodeObject << encodeFineTuningJobErrorPairs


encodeFineTuningJobErrorWithTag : ( String, String ) -> FineTuningJobError -> Json.Encode.Value
encodeFineTuningJobErrorWithTag (tagField, tag) model =
    encodeObject (encodeFineTuningJobErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFineTuningJobErrorPairs : FineTuningJobError -> List EncodedField
encodeFineTuningJobErrorPairs model =
    let
        pairs =
            [ encode "code" Json.Encode.string model.code
            , encode "message" Json.Encode.string model.message
            , encodeNullable "param" Json.Encode.string model.param
            ]
    in
    pairs


encodeFineTuningJobEvent : FineTuningJobEvent -> Json.Encode.Value
encodeFineTuningJobEvent =
    encodeObject << encodeFineTuningJobEventPairs


encodeFineTuningJobEventWithTag : ( String, String ) -> FineTuningJobEvent -> Json.Encode.Value
encodeFineTuningJobEventWithTag (tagField, tag) model =
    encodeObject (encodeFineTuningJobEventPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFineTuningJobEventPairs : FineTuningJobEvent -> List EncodedField
encodeFineTuningJobEventPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "created_at" Json.Encode.int model.createdAt
            , encode "level" encodeFineTuningJobEventLevel model.level
            , encode "message" Json.Encode.string model.message
            , encode "object" encodeFineTuningJobEventObject model.object
            ]
    in
    pairs

stringFromFineTuningJobEventLevel : FineTuningJobEventLevel -> String
stringFromFineTuningJobEventLevel model =
    case model of
        FineTuningJobEventLevelInfo ->
            "info"

        FineTuningJobEventLevelWarn ->
            "warn"

        FineTuningJobEventLevelError ->
            "error"


encodeFineTuningJobEventLevel : FineTuningJobEventLevel -> Json.Encode.Value
encodeFineTuningJobEventLevel =
    Json.Encode.string << stringFromFineTuningJobEventLevel


stringFromFineTuningJobEventObject : FineTuningJobEventObject -> String
stringFromFineTuningJobEventObject model =
    case model of
        FineTuningJobEventObjectFineTuningJobEvent ->
            "fine_tuning.job.event"


encodeFineTuningJobEventObject : FineTuningJobEventObject -> Json.Encode.Value
encodeFineTuningJobEventObject =
    Json.Encode.string << stringFromFineTuningJobEventObject



encodeFineTuningJobHyperparameters : FineTuningJobHyperparameters -> Json.Encode.Value
encodeFineTuningJobHyperparameters =
    encodeObject << encodeFineTuningJobHyperparametersPairs


encodeFineTuningJobHyperparametersWithTag : ( String, String ) -> FineTuningJobHyperparameters -> Json.Encode.Value
encodeFineTuningJobHyperparametersWithTag (tagField, tag) model =
    encodeObject (encodeFineTuningJobHyperparametersPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFineTuningJobHyperparametersPairs : FineTuningJobHyperparameters -> List EncodedField
encodeFineTuningJobHyperparametersPairs model =
    let
        pairs =
            [ encode "n_epochs" encodeFineTuningJobHyperparametersNEpochs model.nEpochs
            ]
    in
    pairs


encodeFineTuningJobHyperparametersNEpochs : FineTuningJobHyperparametersNEpochs -> Json.Encode.Value
encodeFineTuningJobHyperparametersNEpochs model =
    case model of
        FineTuningJobHyperparametersNEpochsInt subModel ->
            encodeInt subModel


        FineTuningJobHyperparametersNEpochsString subModel ->
            encodeString subModel




encodeFineTuningJobIntegrationsInner : FineTuningJobIntegrationsInner -> Json.Encode.Value
encodeFineTuningJobIntegrationsInner model =
    case model of
        FineTuningJobIntegrationsInnerFineTuningIntegration subModel ->
            encodeFineTuningIntegration subModel




encodeFunctionObject : FunctionObject -> Json.Encode.Value
encodeFunctionObject =
    encodeObject << encodeFunctionObjectPairs


encodeFunctionObjectWithTag : ( String, String ) -> FunctionObject -> Json.Encode.Value
encodeFunctionObjectWithTag (tagField, tag) model =
    encodeObject (encodeFunctionObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFunctionObjectPairs : FunctionObject -> List EncodedField
encodeFunctionObjectPairs model =
    let
        pairs =
            [ maybeEncode "description" Json.Encode.string model.description
            , encode "name" Json.Encode.string model.name
            , maybeEncode "parameters" (Json.Encode.dict identity encodeAnyType) model.parameters
            ]
    in
    pairs


encodeImage : Image -> Json.Encode.Value
encodeImage =
    encodeObject << encodeImagePairs


encodeImageWithTag : ( String, String ) -> Image -> Json.Encode.Value
encodeImageWithTag (tagField, tag) model =
    encodeObject (encodeImagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeImagePairs : Image -> List EncodedField
encodeImagePairs model =
    let
        pairs =
            [ maybeEncode "b64_json" Json.Encode.string model.b64Json
            , maybeEncode "url" Json.Encode.string model.url
            , maybeEncode "revised_prompt" Json.Encode.string model.revisedPrompt
            ]
    in
    pairs


encodeImagesResponse : ImagesResponse -> Json.Encode.Value
encodeImagesResponse =
    encodeObject << encodeImagesResponsePairs


encodeImagesResponseWithTag : ( String, String ) -> ImagesResponse -> Json.Encode.Value
encodeImagesResponseWithTag (tagField, tag) model =
    encodeObject (encodeImagesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeImagesResponsePairs : ImagesResponse -> List EncodedField
encodeImagesResponsePairs model =
    let
        pairs =
            [ encode "created" Json.Encode.int model.created
            , encode "data" (Json.Encode.list encodeImage) model.data
            ]
    in
    pairs


encodeListAssistantFilesResponse : ListAssistantFilesResponse -> Json.Encode.Value
encodeListAssistantFilesResponse =
    encodeObject << encodeListAssistantFilesResponsePairs


encodeListAssistantFilesResponseWithTag : ( String, String ) -> ListAssistantFilesResponse -> Json.Encode.Value
encodeListAssistantFilesResponseWithTag (tagField, tag) model =
    encodeObject (encodeListAssistantFilesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeListAssistantFilesResponsePairs : ListAssistantFilesResponse -> List EncodedField
encodeListAssistantFilesResponsePairs model =
    let
        pairs =
            [ encode "object" Json.Encode.string model.object
            , encode "data" (Json.Encode.list encodeAssistantFileObject) model.data
            , encode "first_id" Json.Encode.string model.firstId
            , encode "last_id" Json.Encode.string model.lastId
            , encode "has_more" Json.Encode.bool model.hasMore
            ]
    in
    pairs


encodeListAssistantsResponse : ListAssistantsResponse -> Json.Encode.Value
encodeListAssistantsResponse =
    encodeObject << encodeListAssistantsResponsePairs


encodeListAssistantsResponseWithTag : ( String, String ) -> ListAssistantsResponse -> Json.Encode.Value
encodeListAssistantsResponseWithTag (tagField, tag) model =
    encodeObject (encodeListAssistantsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeListAssistantsResponsePairs : ListAssistantsResponse -> List EncodedField
encodeListAssistantsResponsePairs model =
    let
        pairs =
            [ encode "object" Json.Encode.string model.object
            , encode "data" (Json.Encode.list encodeAssistantObject) model.data
            , encode "first_id" Json.Encode.string model.firstId
            , encode "last_id" Json.Encode.string model.lastId
            , encode "has_more" Json.Encode.bool model.hasMore
            ]
    in
    pairs


encodeListFilesResponse : ListFilesResponse -> Json.Encode.Value
encodeListFilesResponse =
    encodeObject << encodeListFilesResponsePairs


encodeListFilesResponseWithTag : ( String, String ) -> ListFilesResponse -> Json.Encode.Value
encodeListFilesResponseWithTag (tagField, tag) model =
    encodeObject (encodeListFilesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeListFilesResponsePairs : ListFilesResponse -> List EncodedField
encodeListFilesResponsePairs model =
    let
        pairs =
            [ encode "data" (Json.Encode.list encodeOpenAIFile) model.data
            , encode "object" encodeListFilesResponseObject model.object
            ]
    in
    pairs

stringFromListFilesResponseObject : ListFilesResponseObject -> String
stringFromListFilesResponseObject model =
    case model of
        ListFilesResponseObjectList ->
            "list"


encodeListFilesResponseObject : ListFilesResponseObject -> Json.Encode.Value
encodeListFilesResponseObject =
    Json.Encode.string << stringFromListFilesResponseObject



encodeListFineTuningJobCheckpointsResponse : ListFineTuningJobCheckpointsResponse -> Json.Encode.Value
encodeListFineTuningJobCheckpointsResponse =
    encodeObject << encodeListFineTuningJobCheckpointsResponsePairs


encodeListFineTuningJobCheckpointsResponseWithTag : ( String, String ) -> ListFineTuningJobCheckpointsResponse -> Json.Encode.Value
encodeListFineTuningJobCheckpointsResponseWithTag (tagField, tag) model =
    encodeObject (encodeListFineTuningJobCheckpointsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeListFineTuningJobCheckpointsResponsePairs : ListFineTuningJobCheckpointsResponse -> List EncodedField
encodeListFineTuningJobCheckpointsResponsePairs model =
    let
        pairs =
            [ encode "data" (Json.Encode.list encodeFineTuningJobCheckpoint) model.data
            , encode "object" encodeListFineTuningJobCheckpointsResponseObject model.object
            , maybeEncodeNullable "first_id" Json.Encode.string model.firstId
            , maybeEncodeNullable "last_id" Json.Encode.string model.lastId
            , encode "has_more" Json.Encode.bool model.hasMore
            ]
    in
    pairs

stringFromListFineTuningJobCheckpointsResponseObject : ListFineTuningJobCheckpointsResponseObject -> String
stringFromListFineTuningJobCheckpointsResponseObject model =
    case model of
        ListFineTuningJobCheckpointsResponseObjectList ->
            "list"


encodeListFineTuningJobCheckpointsResponseObject : ListFineTuningJobCheckpointsResponseObject -> Json.Encode.Value
encodeListFineTuningJobCheckpointsResponseObject =
    Json.Encode.string << stringFromListFineTuningJobCheckpointsResponseObject



encodeListFineTuningJobEventsResponse : ListFineTuningJobEventsResponse -> Json.Encode.Value
encodeListFineTuningJobEventsResponse =
    encodeObject << encodeListFineTuningJobEventsResponsePairs


encodeListFineTuningJobEventsResponseWithTag : ( String, String ) -> ListFineTuningJobEventsResponse -> Json.Encode.Value
encodeListFineTuningJobEventsResponseWithTag (tagField, tag) model =
    encodeObject (encodeListFineTuningJobEventsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeListFineTuningJobEventsResponsePairs : ListFineTuningJobEventsResponse -> List EncodedField
encodeListFineTuningJobEventsResponsePairs model =
    let
        pairs =
            [ encode "data" (Json.Encode.list encodeFineTuningJobEvent) model.data
            , encode "object" encodeListFineTuningJobEventsResponseObject model.object
            ]
    in
    pairs

stringFromListFineTuningJobEventsResponseObject : ListFineTuningJobEventsResponseObject -> String
stringFromListFineTuningJobEventsResponseObject model =
    case model of
        ListFineTuningJobEventsResponseObjectList ->
            "list"


encodeListFineTuningJobEventsResponseObject : ListFineTuningJobEventsResponseObject -> Json.Encode.Value
encodeListFineTuningJobEventsResponseObject =
    Json.Encode.string << stringFromListFineTuningJobEventsResponseObject



encodeListMessageFilesResponse : ListMessageFilesResponse -> Json.Encode.Value
encodeListMessageFilesResponse =
    encodeObject << encodeListMessageFilesResponsePairs


encodeListMessageFilesResponseWithTag : ( String, String ) -> ListMessageFilesResponse -> Json.Encode.Value
encodeListMessageFilesResponseWithTag (tagField, tag) model =
    encodeObject (encodeListMessageFilesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeListMessageFilesResponsePairs : ListMessageFilesResponse -> List EncodedField
encodeListMessageFilesResponsePairs model =
    let
        pairs =
            [ encode "object" Json.Encode.string model.object
            , encode "data" (Json.Encode.list encodeMessageFileObject) model.data
            , encode "first_id" Json.Encode.string model.firstId
            , encode "last_id" Json.Encode.string model.lastId
            , encode "has_more" Json.Encode.bool model.hasMore
            ]
    in
    pairs


encodeListMessagesResponse : ListMessagesResponse -> Json.Encode.Value
encodeListMessagesResponse =
    encodeObject << encodeListMessagesResponsePairs


encodeListMessagesResponseWithTag : ( String, String ) -> ListMessagesResponse -> Json.Encode.Value
encodeListMessagesResponseWithTag (tagField, tag) model =
    encodeObject (encodeListMessagesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeListMessagesResponsePairs : ListMessagesResponse -> List EncodedField
encodeListMessagesResponsePairs model =
    let
        pairs =
            [ encode "object" Json.Encode.string model.object
            , encode "data" (Json.Encode.list encodeMessageObject) model.data
            , encode "first_id" Json.Encode.string model.firstId
            , encode "last_id" Json.Encode.string model.lastId
            , encode "has_more" Json.Encode.bool model.hasMore
            ]
    in
    pairs


encodeListModelsResponse : ListModelsResponse -> Json.Encode.Value
encodeListModelsResponse =
    encodeObject << encodeListModelsResponsePairs


encodeListModelsResponseWithTag : ( String, String ) -> ListModelsResponse -> Json.Encode.Value
encodeListModelsResponseWithTag (tagField, tag) model =
    encodeObject (encodeListModelsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeListModelsResponsePairs : ListModelsResponse -> List EncodedField
encodeListModelsResponsePairs model =
    let
        pairs =
            [ encode "object" encodeListModelsResponseObject model.object
            , encode "data" (Json.Encode.list encodeModel) model.data
            ]
    in
    pairs

stringFromListModelsResponseObject : ListModelsResponseObject -> String
stringFromListModelsResponseObject model =
    case model of
        ListModelsResponseObjectList ->
            "list"


encodeListModelsResponseObject : ListModelsResponseObject -> Json.Encode.Value
encodeListModelsResponseObject =
    Json.Encode.string << stringFromListModelsResponseObject



encodeListPaginatedFineTuningJobsResponse : ListPaginatedFineTuningJobsResponse -> Json.Encode.Value
encodeListPaginatedFineTuningJobsResponse =
    encodeObject << encodeListPaginatedFineTuningJobsResponsePairs


encodeListPaginatedFineTuningJobsResponseWithTag : ( String, String ) -> ListPaginatedFineTuningJobsResponse -> Json.Encode.Value
encodeListPaginatedFineTuningJobsResponseWithTag (tagField, tag) model =
    encodeObject (encodeListPaginatedFineTuningJobsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeListPaginatedFineTuningJobsResponsePairs : ListPaginatedFineTuningJobsResponse -> List EncodedField
encodeListPaginatedFineTuningJobsResponsePairs model =
    let
        pairs =
            [ encode "data" (Json.Encode.list encodeFineTuningJob) model.data
            , encode "has_more" Json.Encode.bool model.hasMore
            , encode "object" encodeListPaginatedFineTuningJobsResponseObject model.object
            ]
    in
    pairs

stringFromListPaginatedFineTuningJobsResponseObject : ListPaginatedFineTuningJobsResponseObject -> String
stringFromListPaginatedFineTuningJobsResponseObject model =
    case model of
        ListPaginatedFineTuningJobsResponseObjectList ->
            "list"


encodeListPaginatedFineTuningJobsResponseObject : ListPaginatedFineTuningJobsResponseObject -> Json.Encode.Value
encodeListPaginatedFineTuningJobsResponseObject =
    Json.Encode.string << stringFromListPaginatedFineTuningJobsResponseObject



encodeListRunStepsResponse : ListRunStepsResponse -> Json.Encode.Value
encodeListRunStepsResponse =
    encodeObject << encodeListRunStepsResponsePairs


encodeListRunStepsResponseWithTag : ( String, String ) -> ListRunStepsResponse -> Json.Encode.Value
encodeListRunStepsResponseWithTag (tagField, tag) model =
    encodeObject (encodeListRunStepsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeListRunStepsResponsePairs : ListRunStepsResponse -> List EncodedField
encodeListRunStepsResponsePairs model =
    let
        pairs =
            [ encode "object" Json.Encode.string model.object
            , encode "data" (Json.Encode.list encodeRunStepObject) model.data
            , encode "first_id" Json.Encode.string model.firstId
            , encode "last_id" Json.Encode.string model.lastId
            , encode "has_more" Json.Encode.bool model.hasMore
            ]
    in
    pairs


encodeListRunsResponse : ListRunsResponse -> Json.Encode.Value
encodeListRunsResponse =
    encodeObject << encodeListRunsResponsePairs


encodeListRunsResponseWithTag : ( String, String ) -> ListRunsResponse -> Json.Encode.Value
encodeListRunsResponseWithTag (tagField, tag) model =
    encodeObject (encodeListRunsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeListRunsResponsePairs : ListRunsResponse -> List EncodedField
encodeListRunsResponsePairs model =
    let
        pairs =
            [ encode "object" Json.Encode.string model.object
            , encode "data" (Json.Encode.list encodeRunObject) model.data
            , encode "first_id" Json.Encode.string model.firstId
            , encode "last_id" Json.Encode.string model.lastId
            , encode "has_more" Json.Encode.bool model.hasMore
            ]
    in
    pairs


encodeListThreadsResponse : ListThreadsResponse -> Json.Encode.Value
encodeListThreadsResponse =
    encodeObject << encodeListThreadsResponsePairs


encodeListThreadsResponseWithTag : ( String, String ) -> ListThreadsResponse -> Json.Encode.Value
encodeListThreadsResponseWithTag (tagField, tag) model =
    encodeObject (encodeListThreadsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeListThreadsResponsePairs : ListThreadsResponse -> List EncodedField
encodeListThreadsResponsePairs model =
    let
        pairs =
            [ encode "object" Json.Encode.string model.object
            , encode "data" (Json.Encode.list encodeThreadObject) model.data
            , encode "first_id" Json.Encode.string model.firstId
            , encode "last_id" Json.Encode.string model.lastId
            , encode "has_more" Json.Encode.bool model.hasMore
            ]
    in
    pairs


encodeMessageContentImageFileObject : MessageContentImageFileObject -> Json.Encode.Value
encodeMessageContentImageFileObject =
    encodeObject << encodeMessageContentImageFileObjectPairs


encodeMessageContentImageFileObjectWithTag : ( String, String ) -> MessageContentImageFileObject -> Json.Encode.Value
encodeMessageContentImageFileObjectWithTag (tagField, tag) model =
    encodeObject (encodeMessageContentImageFileObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageContentImageFileObjectPairs : MessageContentImageFileObject -> List EncodedField
encodeMessageContentImageFileObjectPairs model =
    let
        pairs =
            [ encode "type" encodeMessageContentImageFileObjectType model.type_
            , encode "image_file" encodeMessageContentImageFileObjectImageFile model.imageFile
            ]
    in
    pairs

stringFromMessageContentImageFileObjectType : MessageContentImageFileObjectType -> String
stringFromMessageContentImageFileObjectType model =
    case model of
        MessageContentImageFileObjectTypeImageFile ->
            "image_file"


encodeMessageContentImageFileObjectType : MessageContentImageFileObjectType -> Json.Encode.Value
encodeMessageContentImageFileObjectType =
    Json.Encode.string << stringFromMessageContentImageFileObjectType



encodeMessageContentImageFileObjectImageFile : MessageContentImageFileObjectImageFile -> Json.Encode.Value
encodeMessageContentImageFileObjectImageFile =
    encodeObject << encodeMessageContentImageFileObjectImageFilePairs


encodeMessageContentImageFileObjectImageFileWithTag : ( String, String ) -> MessageContentImageFileObjectImageFile -> Json.Encode.Value
encodeMessageContentImageFileObjectImageFileWithTag (tagField, tag) model =
    encodeObject (encodeMessageContentImageFileObjectImageFilePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageContentImageFileObjectImageFilePairs : MessageContentImageFileObjectImageFile -> List EncodedField
encodeMessageContentImageFileObjectImageFilePairs model =
    let
        pairs =
            [ encode "file_id" Json.Encode.string model.fileId
            ]
    in
    pairs


encodeMessageContentTextAnnotationsFileCitationObject : MessageContentTextAnnotationsFileCitationObject -> Json.Encode.Value
encodeMessageContentTextAnnotationsFileCitationObject =
    encodeObject << encodeMessageContentTextAnnotationsFileCitationObjectPairs


encodeMessageContentTextAnnotationsFileCitationObjectWithTag : ( String, String ) -> MessageContentTextAnnotationsFileCitationObject -> Json.Encode.Value
encodeMessageContentTextAnnotationsFileCitationObjectWithTag (tagField, tag) model =
    encodeObject (encodeMessageContentTextAnnotationsFileCitationObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageContentTextAnnotationsFileCitationObjectPairs : MessageContentTextAnnotationsFileCitationObject -> List EncodedField
encodeMessageContentTextAnnotationsFileCitationObjectPairs model =
    let
        pairs =
            [ encode "type" encodeMessageContentTextAnnotationsFileCitationObjectType model.type_
            , encode "text" Json.Encode.string model.text
            , encode "file_citation" encodeMessageContentTextAnnotationsFileCitationObjectFileCitation model.fileCitation
            , encode "start_index" Json.Encode.int model.startIndex
            , encode "end_index" Json.Encode.int model.endIndex
            ]
    in
    pairs

stringFromMessageContentTextAnnotationsFileCitationObjectType : MessageContentTextAnnotationsFileCitationObjectType -> String
stringFromMessageContentTextAnnotationsFileCitationObjectType model =
    case model of
        MessageContentTextAnnotationsFileCitationObjectTypeFileCitation ->
            "file_citation"


encodeMessageContentTextAnnotationsFileCitationObjectType : MessageContentTextAnnotationsFileCitationObjectType -> Json.Encode.Value
encodeMessageContentTextAnnotationsFileCitationObjectType =
    Json.Encode.string << stringFromMessageContentTextAnnotationsFileCitationObjectType



encodeMessageContentTextAnnotationsFileCitationObjectFileCitation : MessageContentTextAnnotationsFileCitationObjectFileCitation -> Json.Encode.Value
encodeMessageContentTextAnnotationsFileCitationObjectFileCitation =
    encodeObject << encodeMessageContentTextAnnotationsFileCitationObjectFileCitationPairs


encodeMessageContentTextAnnotationsFileCitationObjectFileCitationWithTag : ( String, String ) -> MessageContentTextAnnotationsFileCitationObjectFileCitation -> Json.Encode.Value
encodeMessageContentTextAnnotationsFileCitationObjectFileCitationWithTag (tagField, tag) model =
    encodeObject (encodeMessageContentTextAnnotationsFileCitationObjectFileCitationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageContentTextAnnotationsFileCitationObjectFileCitationPairs : MessageContentTextAnnotationsFileCitationObjectFileCitation -> List EncodedField
encodeMessageContentTextAnnotationsFileCitationObjectFileCitationPairs model =
    let
        pairs =
            [ encode "file_id" Json.Encode.string model.fileId
            , encode "quote" Json.Encode.string model.quote
            ]
    in
    pairs


encodeMessageContentTextAnnotationsFilePathObject : MessageContentTextAnnotationsFilePathObject -> Json.Encode.Value
encodeMessageContentTextAnnotationsFilePathObject =
    encodeObject << encodeMessageContentTextAnnotationsFilePathObjectPairs


encodeMessageContentTextAnnotationsFilePathObjectWithTag : ( String, String ) -> MessageContentTextAnnotationsFilePathObject -> Json.Encode.Value
encodeMessageContentTextAnnotationsFilePathObjectWithTag (tagField, tag) model =
    encodeObject (encodeMessageContentTextAnnotationsFilePathObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageContentTextAnnotationsFilePathObjectPairs : MessageContentTextAnnotationsFilePathObject -> List EncodedField
encodeMessageContentTextAnnotationsFilePathObjectPairs model =
    let
        pairs =
            [ encode "type" encodeMessageContentTextAnnotationsFilePathObjectType model.type_
            , encode "text" Json.Encode.string model.text
            , encode "file_path" encodeMessageContentTextAnnotationsFilePathObjectFilePath model.filePath
            , encode "start_index" Json.Encode.int model.startIndex
            , encode "end_index" Json.Encode.int model.endIndex
            ]
    in
    pairs

stringFromMessageContentTextAnnotationsFilePathObjectType : MessageContentTextAnnotationsFilePathObjectType -> String
stringFromMessageContentTextAnnotationsFilePathObjectType model =
    case model of
        MessageContentTextAnnotationsFilePathObjectTypeFilePath ->
            "file_path"


encodeMessageContentTextAnnotationsFilePathObjectType : MessageContentTextAnnotationsFilePathObjectType -> Json.Encode.Value
encodeMessageContentTextAnnotationsFilePathObjectType =
    Json.Encode.string << stringFromMessageContentTextAnnotationsFilePathObjectType



encodeMessageContentTextAnnotationsFilePathObjectFilePath : MessageContentTextAnnotationsFilePathObjectFilePath -> Json.Encode.Value
encodeMessageContentTextAnnotationsFilePathObjectFilePath =
    encodeObject << encodeMessageContentTextAnnotationsFilePathObjectFilePathPairs


encodeMessageContentTextAnnotationsFilePathObjectFilePathWithTag : ( String, String ) -> MessageContentTextAnnotationsFilePathObjectFilePath -> Json.Encode.Value
encodeMessageContentTextAnnotationsFilePathObjectFilePathWithTag (tagField, tag) model =
    encodeObject (encodeMessageContentTextAnnotationsFilePathObjectFilePathPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageContentTextAnnotationsFilePathObjectFilePathPairs : MessageContentTextAnnotationsFilePathObjectFilePath -> List EncodedField
encodeMessageContentTextAnnotationsFilePathObjectFilePathPairs model =
    let
        pairs =
            [ encode "file_id" Json.Encode.string model.fileId
            ]
    in
    pairs


encodeMessageContentTextObject : MessageContentTextObject -> Json.Encode.Value
encodeMessageContentTextObject =
    encodeObject << encodeMessageContentTextObjectPairs


encodeMessageContentTextObjectWithTag : ( String, String ) -> MessageContentTextObject -> Json.Encode.Value
encodeMessageContentTextObjectWithTag (tagField, tag) model =
    encodeObject (encodeMessageContentTextObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageContentTextObjectPairs : MessageContentTextObject -> List EncodedField
encodeMessageContentTextObjectPairs model =
    let
        pairs =
            [ encode "type" encodeMessageContentTextObjectType model.type_
            , encode "text" encodeMessageContentTextObjectText model.text
            ]
    in
    pairs

stringFromMessageContentTextObjectType : MessageContentTextObjectType -> String
stringFromMessageContentTextObjectType model =
    case model of
        MessageContentTextObjectTypeText ->
            "text"


encodeMessageContentTextObjectType : MessageContentTextObjectType -> Json.Encode.Value
encodeMessageContentTextObjectType =
    Json.Encode.string << stringFromMessageContentTextObjectType



encodeMessageContentTextObjectText : MessageContentTextObjectText -> Json.Encode.Value
encodeMessageContentTextObjectText =
    encodeObject << encodeMessageContentTextObjectTextPairs


encodeMessageContentTextObjectTextWithTag : ( String, String ) -> MessageContentTextObjectText -> Json.Encode.Value
encodeMessageContentTextObjectTextWithTag (tagField, tag) model =
    encodeObject (encodeMessageContentTextObjectTextPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageContentTextObjectTextPairs : MessageContentTextObjectText -> List EncodedField
encodeMessageContentTextObjectTextPairs model =
    let
        pairs =
            [ encode "value" Json.Encode.string model.value
            , encode "annotations" (Json.Encode.list encodeMessageContentTextObjectTextAnnotationsInner) model.annotations
            ]
    in
    pairs


encodeMessageContentTextObjectTextAnnotationsInner : MessageContentTextObjectTextAnnotationsInner -> Json.Encode.Value
encodeMessageContentTextObjectTextAnnotationsInner model =
    case model of
        MessageContentTextObjectTextAnnotationsInnerMessageContentTextAnnotationsFileCitationObject subModel ->
            encodeMessageContentTextAnnotationsFileCitationObject subModel


        MessageContentTextObjectTextAnnotationsInnerMessageContentTextAnnotationsFilePathObject subModel ->
            encodeMessageContentTextAnnotationsFilePathObject subModel




encodeMessageDeltaContentImageFileObject : MessageDeltaContentImageFileObject -> Json.Encode.Value
encodeMessageDeltaContentImageFileObject =
    encodeObject << encodeMessageDeltaContentImageFileObjectPairs


encodeMessageDeltaContentImageFileObjectWithTag : ( String, String ) -> MessageDeltaContentImageFileObject -> Json.Encode.Value
encodeMessageDeltaContentImageFileObjectWithTag (tagField, tag) model =
    encodeObject (encodeMessageDeltaContentImageFileObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageDeltaContentImageFileObjectPairs : MessageDeltaContentImageFileObject -> List EncodedField
encodeMessageDeltaContentImageFileObjectPairs model =
    let
        pairs =
            [ encode "index" Json.Encode.int model.index
            , encode "type" encodeMessageDeltaContentImageFileObjectType model.type_
            , maybeEncode "image_file" encodeMessageDeltaContentImageFileObjectImageFile model.imageFile
            ]
    in
    pairs

stringFromMessageDeltaContentImageFileObjectType : MessageDeltaContentImageFileObjectType -> String
stringFromMessageDeltaContentImageFileObjectType model =
    case model of
        MessageDeltaContentImageFileObjectTypeImageFile ->
            "image_file"


encodeMessageDeltaContentImageFileObjectType : MessageDeltaContentImageFileObjectType -> Json.Encode.Value
encodeMessageDeltaContentImageFileObjectType =
    Json.Encode.string << stringFromMessageDeltaContentImageFileObjectType



encodeMessageDeltaContentImageFileObjectImageFile : MessageDeltaContentImageFileObjectImageFile -> Json.Encode.Value
encodeMessageDeltaContentImageFileObjectImageFile =
    encodeObject << encodeMessageDeltaContentImageFileObjectImageFilePairs


encodeMessageDeltaContentImageFileObjectImageFileWithTag : ( String, String ) -> MessageDeltaContentImageFileObjectImageFile -> Json.Encode.Value
encodeMessageDeltaContentImageFileObjectImageFileWithTag (tagField, tag) model =
    encodeObject (encodeMessageDeltaContentImageFileObjectImageFilePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageDeltaContentImageFileObjectImageFilePairs : MessageDeltaContentImageFileObjectImageFile -> List EncodedField
encodeMessageDeltaContentImageFileObjectImageFilePairs model =
    let
        pairs =
            [ maybeEncode "file_id" Json.Encode.string model.fileId
            ]
    in
    pairs


encodeMessageDeltaContentTextAnnotationsFileCitationObject : MessageDeltaContentTextAnnotationsFileCitationObject -> Json.Encode.Value
encodeMessageDeltaContentTextAnnotationsFileCitationObject =
    encodeObject << encodeMessageDeltaContentTextAnnotationsFileCitationObjectPairs


encodeMessageDeltaContentTextAnnotationsFileCitationObjectWithTag : ( String, String ) -> MessageDeltaContentTextAnnotationsFileCitationObject -> Json.Encode.Value
encodeMessageDeltaContentTextAnnotationsFileCitationObjectWithTag (tagField, tag) model =
    encodeObject (encodeMessageDeltaContentTextAnnotationsFileCitationObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageDeltaContentTextAnnotationsFileCitationObjectPairs : MessageDeltaContentTextAnnotationsFileCitationObject -> List EncodedField
encodeMessageDeltaContentTextAnnotationsFileCitationObjectPairs model =
    let
        pairs =
            [ encode "index" Json.Encode.int model.index
            , encode "type" encodeMessageDeltaContentTextAnnotationsFileCitationObjectType model.type_
            , maybeEncode "text" Json.Encode.string model.text
            , maybeEncode "file_citation" encodeMessageDeltaContentTextAnnotationsFileCitationObjectFileCitation model.fileCitation
            , maybeEncode "start_index" Json.Encode.int model.startIndex
            , maybeEncode "end_index" Json.Encode.int model.endIndex
            ]
    in
    pairs

stringFromMessageDeltaContentTextAnnotationsFileCitationObjectType : MessageDeltaContentTextAnnotationsFileCitationObjectType -> String
stringFromMessageDeltaContentTextAnnotationsFileCitationObjectType model =
    case model of
        MessageDeltaContentTextAnnotationsFileCitationObjectTypeFileCitation ->
            "file_citation"


encodeMessageDeltaContentTextAnnotationsFileCitationObjectType : MessageDeltaContentTextAnnotationsFileCitationObjectType -> Json.Encode.Value
encodeMessageDeltaContentTextAnnotationsFileCitationObjectType =
    Json.Encode.string << stringFromMessageDeltaContentTextAnnotationsFileCitationObjectType



encodeMessageDeltaContentTextAnnotationsFileCitationObjectFileCitation : MessageDeltaContentTextAnnotationsFileCitationObjectFileCitation -> Json.Encode.Value
encodeMessageDeltaContentTextAnnotationsFileCitationObjectFileCitation =
    encodeObject << encodeMessageDeltaContentTextAnnotationsFileCitationObjectFileCitationPairs


encodeMessageDeltaContentTextAnnotationsFileCitationObjectFileCitationWithTag : ( String, String ) -> MessageDeltaContentTextAnnotationsFileCitationObjectFileCitation -> Json.Encode.Value
encodeMessageDeltaContentTextAnnotationsFileCitationObjectFileCitationWithTag (tagField, tag) model =
    encodeObject (encodeMessageDeltaContentTextAnnotationsFileCitationObjectFileCitationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageDeltaContentTextAnnotationsFileCitationObjectFileCitationPairs : MessageDeltaContentTextAnnotationsFileCitationObjectFileCitation -> List EncodedField
encodeMessageDeltaContentTextAnnotationsFileCitationObjectFileCitationPairs model =
    let
        pairs =
            [ maybeEncode "file_id" Json.Encode.string model.fileId
            , maybeEncode "quote" Json.Encode.string model.quote
            ]
    in
    pairs


encodeMessageDeltaContentTextAnnotationsFilePathObject : MessageDeltaContentTextAnnotationsFilePathObject -> Json.Encode.Value
encodeMessageDeltaContentTextAnnotationsFilePathObject =
    encodeObject << encodeMessageDeltaContentTextAnnotationsFilePathObjectPairs


encodeMessageDeltaContentTextAnnotationsFilePathObjectWithTag : ( String, String ) -> MessageDeltaContentTextAnnotationsFilePathObject -> Json.Encode.Value
encodeMessageDeltaContentTextAnnotationsFilePathObjectWithTag (tagField, tag) model =
    encodeObject (encodeMessageDeltaContentTextAnnotationsFilePathObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageDeltaContentTextAnnotationsFilePathObjectPairs : MessageDeltaContentTextAnnotationsFilePathObject -> List EncodedField
encodeMessageDeltaContentTextAnnotationsFilePathObjectPairs model =
    let
        pairs =
            [ encode "index" Json.Encode.int model.index
            , encode "type" encodeMessageDeltaContentTextAnnotationsFilePathObjectType model.type_
            , maybeEncode "text" Json.Encode.string model.text
            , maybeEncode "file_path" encodeMessageDeltaContentTextAnnotationsFilePathObjectFilePath model.filePath
            , maybeEncode "start_index" Json.Encode.int model.startIndex
            , maybeEncode "end_index" Json.Encode.int model.endIndex
            ]
    in
    pairs

stringFromMessageDeltaContentTextAnnotationsFilePathObjectType : MessageDeltaContentTextAnnotationsFilePathObjectType -> String
stringFromMessageDeltaContentTextAnnotationsFilePathObjectType model =
    case model of
        MessageDeltaContentTextAnnotationsFilePathObjectTypeFilePath ->
            "file_path"


encodeMessageDeltaContentTextAnnotationsFilePathObjectType : MessageDeltaContentTextAnnotationsFilePathObjectType -> Json.Encode.Value
encodeMessageDeltaContentTextAnnotationsFilePathObjectType =
    Json.Encode.string << stringFromMessageDeltaContentTextAnnotationsFilePathObjectType



encodeMessageDeltaContentTextAnnotationsFilePathObjectFilePath : MessageDeltaContentTextAnnotationsFilePathObjectFilePath -> Json.Encode.Value
encodeMessageDeltaContentTextAnnotationsFilePathObjectFilePath =
    encodeObject << encodeMessageDeltaContentTextAnnotationsFilePathObjectFilePathPairs


encodeMessageDeltaContentTextAnnotationsFilePathObjectFilePathWithTag : ( String, String ) -> MessageDeltaContentTextAnnotationsFilePathObjectFilePath -> Json.Encode.Value
encodeMessageDeltaContentTextAnnotationsFilePathObjectFilePathWithTag (tagField, tag) model =
    encodeObject (encodeMessageDeltaContentTextAnnotationsFilePathObjectFilePathPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageDeltaContentTextAnnotationsFilePathObjectFilePathPairs : MessageDeltaContentTextAnnotationsFilePathObjectFilePath -> List EncodedField
encodeMessageDeltaContentTextAnnotationsFilePathObjectFilePathPairs model =
    let
        pairs =
            [ maybeEncode "file_id" Json.Encode.string model.fileId
            ]
    in
    pairs


encodeMessageDeltaContentTextObject : MessageDeltaContentTextObject -> Json.Encode.Value
encodeMessageDeltaContentTextObject =
    encodeObject << encodeMessageDeltaContentTextObjectPairs


encodeMessageDeltaContentTextObjectWithTag : ( String, String ) -> MessageDeltaContentTextObject -> Json.Encode.Value
encodeMessageDeltaContentTextObjectWithTag (tagField, tag) model =
    encodeObject (encodeMessageDeltaContentTextObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageDeltaContentTextObjectPairs : MessageDeltaContentTextObject -> List EncodedField
encodeMessageDeltaContentTextObjectPairs model =
    let
        pairs =
            [ encode "index" Json.Encode.int model.index
            , encode "type" encodeMessageDeltaContentTextObjectType model.type_
            , maybeEncode "text" encodeMessageDeltaContentTextObjectText model.text
            ]
    in
    pairs

stringFromMessageDeltaContentTextObjectType : MessageDeltaContentTextObjectType -> String
stringFromMessageDeltaContentTextObjectType model =
    case model of
        MessageDeltaContentTextObjectTypeText ->
            "text"


encodeMessageDeltaContentTextObjectType : MessageDeltaContentTextObjectType -> Json.Encode.Value
encodeMessageDeltaContentTextObjectType =
    Json.Encode.string << stringFromMessageDeltaContentTextObjectType



encodeMessageDeltaContentTextObjectText : MessageDeltaContentTextObjectText -> Json.Encode.Value
encodeMessageDeltaContentTextObjectText =
    encodeObject << encodeMessageDeltaContentTextObjectTextPairs


encodeMessageDeltaContentTextObjectTextWithTag : ( String, String ) -> MessageDeltaContentTextObjectText -> Json.Encode.Value
encodeMessageDeltaContentTextObjectTextWithTag (tagField, tag) model =
    encodeObject (encodeMessageDeltaContentTextObjectTextPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageDeltaContentTextObjectTextPairs : MessageDeltaContentTextObjectText -> List EncodedField
encodeMessageDeltaContentTextObjectTextPairs model =
    let
        pairs =
            [ maybeEncode "value" Json.Encode.string model.value
            , maybeEncode "annotations" (Json.Encode.list encodeMessageDeltaContentTextObjectTextAnnotationsInner) model.annotations
            ]
    in
    pairs


encodeMessageDeltaContentTextObjectTextAnnotationsInner : MessageDeltaContentTextObjectTextAnnotationsInner -> Json.Encode.Value
encodeMessageDeltaContentTextObjectTextAnnotationsInner model =
    case model of
        MessageDeltaContentTextObjectTextAnnotationsInnerMessageDeltaContentTextAnnotationsFileCitationObject subModel ->
            encodeMessageDeltaContentTextAnnotationsFileCitationObject subModel


        MessageDeltaContentTextObjectTextAnnotationsInnerMessageDeltaContentTextAnnotationsFilePathObject subModel ->
            encodeMessageDeltaContentTextAnnotationsFilePathObject subModel




encodeMessageDeltaObject : MessageDeltaObject -> Json.Encode.Value
encodeMessageDeltaObject =
    encodeObject << encodeMessageDeltaObjectPairs


encodeMessageDeltaObjectWithTag : ( String, String ) -> MessageDeltaObject -> Json.Encode.Value
encodeMessageDeltaObjectWithTag (tagField, tag) model =
    encodeObject (encodeMessageDeltaObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageDeltaObjectPairs : MessageDeltaObject -> List EncodedField
encodeMessageDeltaObjectPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "object" encodeMessageDeltaObjectObject model.object
            , encode "delta" encodeMessageDeltaObjectDelta model.delta
            ]
    in
    pairs

stringFromMessageDeltaObjectObject : MessageDeltaObjectObject -> String
stringFromMessageDeltaObjectObject model =
    case model of
        MessageDeltaObjectObjectThreadMessageDelta ->
            "thread.message.delta"


encodeMessageDeltaObjectObject : MessageDeltaObjectObject -> Json.Encode.Value
encodeMessageDeltaObjectObject =
    Json.Encode.string << stringFromMessageDeltaObjectObject



encodeMessageDeltaObjectDelta : MessageDeltaObjectDelta -> Json.Encode.Value
encodeMessageDeltaObjectDelta =
    encodeObject << encodeMessageDeltaObjectDeltaPairs


encodeMessageDeltaObjectDeltaWithTag : ( String, String ) -> MessageDeltaObjectDelta -> Json.Encode.Value
encodeMessageDeltaObjectDeltaWithTag (tagField, tag) model =
    encodeObject (encodeMessageDeltaObjectDeltaPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageDeltaObjectDeltaPairs : MessageDeltaObjectDelta -> List EncodedField
encodeMessageDeltaObjectDeltaPairs model =
    let
        pairs =
            [ maybeEncode "role" encodeMessageDeltaObjectDeltaRole model.role
            , maybeEncode "content" (Json.Encode.list encodeMessageDeltaObjectDeltaContentInner) model.content
            , maybeEncode "file_ids" (Json.Encode.list Json.Encode.string) model.fileIds
            ]
    in
    pairs

stringFromMessageDeltaObjectDeltaRole : MessageDeltaObjectDeltaRole -> String
stringFromMessageDeltaObjectDeltaRole model =
    case model of
        MessageDeltaObjectDeltaRoleUser ->
            "user"

        MessageDeltaObjectDeltaRoleAssistant ->
            "assistant"


encodeMessageDeltaObjectDeltaRole : MessageDeltaObjectDeltaRole -> Json.Encode.Value
encodeMessageDeltaObjectDeltaRole =
    Json.Encode.string << stringFromMessageDeltaObjectDeltaRole



encodeMessageDeltaObjectDeltaContentInner : MessageDeltaObjectDeltaContentInner -> Json.Encode.Value
encodeMessageDeltaObjectDeltaContentInner model =
    case model of
        MessageDeltaObjectDeltaContentInnerMessageDeltaContentImageFileObject subModel ->
            encodeMessageDeltaContentImageFileObject subModel


        MessageDeltaObjectDeltaContentInnerMessageDeltaContentTextObject subModel ->
            encodeMessageDeltaContentTextObject subModel




encodeMessageFileObject : MessageFileObject -> Json.Encode.Value
encodeMessageFileObject =
    encodeObject << encodeMessageFileObjectPairs


encodeMessageFileObjectWithTag : ( String, String ) -> MessageFileObject -> Json.Encode.Value
encodeMessageFileObjectWithTag (tagField, tag) model =
    encodeObject (encodeMessageFileObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageFileObjectPairs : MessageFileObject -> List EncodedField
encodeMessageFileObjectPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "object" encodeMessageFileObjectObject model.object
            , encode "created_at" Json.Encode.int model.createdAt
            , encode "message_id" Json.Encode.string model.messageId
            ]
    in
    pairs

stringFromMessageFileObjectObject : MessageFileObjectObject -> String
stringFromMessageFileObjectObject model =
    case model of
        MessageFileObjectObjectThreadMessageFile ->
            "thread.message.file"


encodeMessageFileObjectObject : MessageFileObjectObject -> Json.Encode.Value
encodeMessageFileObjectObject =
    Json.Encode.string << stringFromMessageFileObjectObject



encodeMessageObject : MessageObject -> Json.Encode.Value
encodeMessageObject =
    encodeObject << encodeMessageObjectPairs


encodeMessageObjectWithTag : ( String, String ) -> MessageObject -> Json.Encode.Value
encodeMessageObjectWithTag (tagField, tag) model =
    encodeObject (encodeMessageObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageObjectPairs : MessageObject -> List EncodedField
encodeMessageObjectPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "object" encodeMessageObjectObject model.object
            , encode "created_at" Json.Encode.int model.createdAt
            , encode "thread_id" Json.Encode.string model.threadId
            , encode "status" encodeMessageObjectStatus model.status
            , encodeNullable "incomplete_details" encodeMessageObjectIncompleteDetails model.incompleteDetails
            , encodeNullable "completed_at" Json.Encode.int model.completedAt
            , encodeNullable "incomplete_at" Json.Encode.int model.incompleteAt
            , encode "role" encodeMessageObjectRole model.role
            , encode "content" (Json.Encode.list encodeMessageObjectContentInner) model.content
            , encodeNullable "assistant_id" Json.Encode.string model.assistantId
            , encodeNullable "run_id" Json.Encode.string model.runId
            , encode "file_ids" (Json.Encode.list Json.Encode.string) model.fileIds
            , encodeNullable "metadata" encodeObject model.metadata
            ]
    in
    pairs

stringFromMessageObjectObject : MessageObjectObject -> String
stringFromMessageObjectObject model =
    case model of
        MessageObjectObjectThreadMessage ->
            "thread.message"


encodeMessageObjectObject : MessageObjectObject -> Json.Encode.Value
encodeMessageObjectObject =
    Json.Encode.string << stringFromMessageObjectObject


stringFromMessageObjectStatus : MessageObjectStatus -> String
stringFromMessageObjectStatus model =
    case model of
        MessageObjectStatusInProgress ->
            "in_progress"

        MessageObjectStatusIncomplete ->
            "incomplete"

        MessageObjectStatusCompleted ->
            "completed"


encodeMessageObjectStatus : MessageObjectStatus -> Json.Encode.Value
encodeMessageObjectStatus =
    Json.Encode.string << stringFromMessageObjectStatus


stringFromMessageObjectRole : MessageObjectRole -> String
stringFromMessageObjectRole model =
    case model of
        MessageObjectRoleUser ->
            "user"

        MessageObjectRoleAssistant ->
            "assistant"


encodeMessageObjectRole : MessageObjectRole -> Json.Encode.Value
encodeMessageObjectRole =
    Json.Encode.string << stringFromMessageObjectRole



encodeMessageObjectContentInner : MessageObjectContentInner -> Json.Encode.Value
encodeMessageObjectContentInner model =
    case model of
        MessageObjectContentInnerMessageContentImageFileObject subModel ->
            encodeMessageContentImageFileObject subModel


        MessageObjectContentInnerMessageContentTextObject subModel ->
            encodeMessageContentTextObject subModel




encodeMessageObjectIncompleteDetails : MessageObjectIncompleteDetails -> Json.Encode.Value
encodeMessageObjectIncompleteDetails =
    encodeObject << encodeMessageObjectIncompleteDetailsPairs


encodeMessageObjectIncompleteDetailsWithTag : ( String, String ) -> MessageObjectIncompleteDetails -> Json.Encode.Value
encodeMessageObjectIncompleteDetailsWithTag (tagField, tag) model =
    encodeObject (encodeMessageObjectIncompleteDetailsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageObjectIncompleteDetailsPairs : MessageObjectIncompleteDetails -> List EncodedField
encodeMessageObjectIncompleteDetailsPairs model =
    let
        pairs =
            [ encode "reason" encodeMessageObjectIncompleteDetailsReason model.reason
            ]
    in
    pairs

stringFromMessageObjectIncompleteDetailsReason : MessageObjectIncompleteDetailsReason -> String
stringFromMessageObjectIncompleteDetailsReason model =
    case model of
        MessageObjectIncompleteDetailsReasonContentFilter ->
            "content_filter"

        MessageObjectIncompleteDetailsReasonMaxTokens ->
            "max_tokens"

        MessageObjectIncompleteDetailsReasonRunCancelled ->
            "run_cancelled"

        MessageObjectIncompleteDetailsReasonRunExpired ->
            "run_expired"

        MessageObjectIncompleteDetailsReasonRunFailed ->
            "run_failed"


encodeMessageObjectIncompleteDetailsReason : MessageObjectIncompleteDetailsReason -> Json.Encode.Value
encodeMessageObjectIncompleteDetailsReason =
    Json.Encode.string << stringFromMessageObjectIncompleteDetailsReason



encodeMessageStreamEvent : MessageStreamEvent -> Json.Encode.Value
encodeMessageStreamEvent model =
    case model of
        MessageStreamEventMessageStreamEventOneOf subModel ->
            encodeMessageStreamEventOneOf subModel


        MessageStreamEventMessageStreamEventOneOf1 subModel ->
            encodeMessageStreamEventOneOf1 subModel


        MessageStreamEventMessageStreamEventOneOf2 subModel ->
            encodeMessageStreamEventOneOf2 subModel


        MessageStreamEventMessageStreamEventOneOf3 subModel ->
            encodeMessageStreamEventOneOf3 subModel


        MessageStreamEventMessageStreamEventOneOf4 subModel ->
            encodeMessageStreamEventOneOf4 subModel




encodeMessageStreamEventOneOf : MessageStreamEventOneOf -> Json.Encode.Value
encodeMessageStreamEventOneOf =
    encodeObject << encodeMessageStreamEventOneOfPairs


encodeMessageStreamEventOneOfWithTag : ( String, String ) -> MessageStreamEventOneOf -> Json.Encode.Value
encodeMessageStreamEventOneOfWithTag (tagField, tag) model =
    encodeObject (encodeMessageStreamEventOneOfPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageStreamEventOneOfPairs : MessageStreamEventOneOf -> List EncodedField
encodeMessageStreamEventOneOfPairs model =
    let
        pairs =
            [ encode "event" encodeMessageStreamEventOneOfEvent model.event
            , encode "data" encodeMessageObject model.data
            ]
    in
    pairs

stringFromMessageStreamEventOneOfEvent : MessageStreamEventOneOfEvent -> String
stringFromMessageStreamEventOneOfEvent model =
    case model of
        MessageStreamEventOneOfEventThreadMessageCreated ->
            "thread.message.created"


encodeMessageStreamEventOneOfEvent : MessageStreamEventOneOfEvent -> Json.Encode.Value
encodeMessageStreamEventOneOfEvent =
    Json.Encode.string << stringFromMessageStreamEventOneOfEvent



encodeMessageStreamEventOneOf1 : MessageStreamEventOneOf1 -> Json.Encode.Value
encodeMessageStreamEventOneOf1 =
    encodeObject << encodeMessageStreamEventOneOf1Pairs


encodeMessageStreamEventOneOf1WithTag : ( String, String ) -> MessageStreamEventOneOf1 -> Json.Encode.Value
encodeMessageStreamEventOneOf1WithTag (tagField, tag) model =
    encodeObject (encodeMessageStreamEventOneOf1Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageStreamEventOneOf1Pairs : MessageStreamEventOneOf1 -> List EncodedField
encodeMessageStreamEventOneOf1Pairs model =
    let
        pairs =
            [ encode "event" encodeMessageStreamEventOneOf1Event model.event
            , encode "data" encodeMessageObject model.data
            ]
    in
    pairs

stringFromMessageStreamEventOneOf1Event : MessageStreamEventOneOf1Event -> String
stringFromMessageStreamEventOneOf1Event model =
    case model of
        MessageStreamEventOneOf1EventThreadMessageInProgress ->
            "thread.message.in_progress"


encodeMessageStreamEventOneOf1Event : MessageStreamEventOneOf1Event -> Json.Encode.Value
encodeMessageStreamEventOneOf1Event =
    Json.Encode.string << stringFromMessageStreamEventOneOf1Event



encodeMessageStreamEventOneOf2 : MessageStreamEventOneOf2 -> Json.Encode.Value
encodeMessageStreamEventOneOf2 =
    encodeObject << encodeMessageStreamEventOneOf2Pairs


encodeMessageStreamEventOneOf2WithTag : ( String, String ) -> MessageStreamEventOneOf2 -> Json.Encode.Value
encodeMessageStreamEventOneOf2WithTag (tagField, tag) model =
    encodeObject (encodeMessageStreamEventOneOf2Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageStreamEventOneOf2Pairs : MessageStreamEventOneOf2 -> List EncodedField
encodeMessageStreamEventOneOf2Pairs model =
    let
        pairs =
            [ encode "event" encodeMessageStreamEventOneOf2Event model.event
            , encode "data" encodeMessageDeltaObject model.data
            ]
    in
    pairs

stringFromMessageStreamEventOneOf2Event : MessageStreamEventOneOf2Event -> String
stringFromMessageStreamEventOneOf2Event model =
    case model of
        MessageStreamEventOneOf2EventThreadMessageDelta ->
            "thread.message.delta"


encodeMessageStreamEventOneOf2Event : MessageStreamEventOneOf2Event -> Json.Encode.Value
encodeMessageStreamEventOneOf2Event =
    Json.Encode.string << stringFromMessageStreamEventOneOf2Event



encodeMessageStreamEventOneOf3 : MessageStreamEventOneOf3 -> Json.Encode.Value
encodeMessageStreamEventOneOf3 =
    encodeObject << encodeMessageStreamEventOneOf3Pairs


encodeMessageStreamEventOneOf3WithTag : ( String, String ) -> MessageStreamEventOneOf3 -> Json.Encode.Value
encodeMessageStreamEventOneOf3WithTag (tagField, tag) model =
    encodeObject (encodeMessageStreamEventOneOf3Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageStreamEventOneOf3Pairs : MessageStreamEventOneOf3 -> List EncodedField
encodeMessageStreamEventOneOf3Pairs model =
    let
        pairs =
            [ encode "event" encodeMessageStreamEventOneOf3Event model.event
            , encode "data" encodeMessageObject model.data
            ]
    in
    pairs

stringFromMessageStreamEventOneOf3Event : MessageStreamEventOneOf3Event -> String
stringFromMessageStreamEventOneOf3Event model =
    case model of
        MessageStreamEventOneOf3EventThreadMessageCompleted ->
            "thread.message.completed"


encodeMessageStreamEventOneOf3Event : MessageStreamEventOneOf3Event -> Json.Encode.Value
encodeMessageStreamEventOneOf3Event =
    Json.Encode.string << stringFromMessageStreamEventOneOf3Event



encodeMessageStreamEventOneOf4 : MessageStreamEventOneOf4 -> Json.Encode.Value
encodeMessageStreamEventOneOf4 =
    encodeObject << encodeMessageStreamEventOneOf4Pairs


encodeMessageStreamEventOneOf4WithTag : ( String, String ) -> MessageStreamEventOneOf4 -> Json.Encode.Value
encodeMessageStreamEventOneOf4WithTag (tagField, tag) model =
    encodeObject (encodeMessageStreamEventOneOf4Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessageStreamEventOneOf4Pairs : MessageStreamEventOneOf4 -> List EncodedField
encodeMessageStreamEventOneOf4Pairs model =
    let
        pairs =
            [ encode "event" encodeMessageStreamEventOneOf4Event model.event
            , encode "data" encodeMessageObject model.data
            ]
    in
    pairs

stringFromMessageStreamEventOneOf4Event : MessageStreamEventOneOf4Event -> String
stringFromMessageStreamEventOneOf4Event model =
    case model of
        MessageStreamEventOneOf4EventThreadMessageIncomplete ->
            "thread.message.incomplete"


encodeMessageStreamEventOneOf4Event : MessageStreamEventOneOf4Event -> Json.Encode.Value
encodeMessageStreamEventOneOf4Event =
    Json.Encode.string << stringFromMessageStreamEventOneOf4Event



encodeModel : Model -> Json.Encode.Value
encodeModel =
    encodeObject << encodeModelPairs


encodeModelWithTag : ( String, String ) -> Model -> Json.Encode.Value
encodeModelWithTag (tagField, tag) model =
    encodeObject (encodeModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeModelPairs : Model -> List EncodedField
encodeModelPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "created" Json.Encode.int model.created
            , encode "object" encodeModelObject model.object
            , encode "owned_by" Json.Encode.string model.ownedBy
            ]
    in
    pairs

stringFromModelObject : ModelObject -> String
stringFromModelObject model =
    case model of
        ModelObjectModel ->
            "model"


encodeModelObject : ModelObject -> Json.Encode.Value
encodeModelObject =
    Json.Encode.string << stringFromModelObject



encodeModifyAssistantRequest : ModifyAssistantRequest -> Json.Encode.Value
encodeModifyAssistantRequest =
    encodeObject << encodeModifyAssistantRequestPairs


encodeModifyAssistantRequestWithTag : ( String, String ) -> ModifyAssistantRequest -> Json.Encode.Value
encodeModifyAssistantRequestWithTag (tagField, tag) model =
    encodeObject (encodeModifyAssistantRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeModifyAssistantRequestPairs : ModifyAssistantRequest -> List EncodedField
encodeModifyAssistantRequestPairs model =
    let
        pairs =
            [ maybeEncode "model" Json.Encode.string model.model
            , maybeEncodeNullable "name" Json.Encode.string model.name
            , maybeEncodeNullable "description" Json.Encode.string model.description
            , maybeEncodeNullable "instructions" Json.Encode.string model.instructions
            , maybeEncode "tools" (Json.Encode.list encodeAssistantObjectToolsInner) model.tools
            , maybeEncode "file_ids" (Json.Encode.list Json.Encode.string) model.fileIds
            , maybeEncodeNullable "metadata" encodeObject model.metadata
            ]
    in
    pairs


encodeModifyMessageRequest : ModifyMessageRequest -> Json.Encode.Value
encodeModifyMessageRequest =
    encodeObject << encodeModifyMessageRequestPairs


encodeModifyMessageRequestWithTag : ( String, String ) -> ModifyMessageRequest -> Json.Encode.Value
encodeModifyMessageRequestWithTag (tagField, tag) model =
    encodeObject (encodeModifyMessageRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeModifyMessageRequestPairs : ModifyMessageRequest -> List EncodedField
encodeModifyMessageRequestPairs model =
    let
        pairs =
            [ maybeEncodeNullable "metadata" encodeObject model.metadata
            ]
    in
    pairs


encodeModifyRunRequest : ModifyRunRequest -> Json.Encode.Value
encodeModifyRunRequest =
    encodeObject << encodeModifyRunRequestPairs


encodeModifyRunRequestWithTag : ( String, String ) -> ModifyRunRequest -> Json.Encode.Value
encodeModifyRunRequestWithTag (tagField, tag) model =
    encodeObject (encodeModifyRunRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeModifyRunRequestPairs : ModifyRunRequest -> List EncodedField
encodeModifyRunRequestPairs model =
    let
        pairs =
            [ maybeEncodeNullable "metadata" encodeObject model.metadata
            ]
    in
    pairs


encodeModifyThreadRequest : ModifyThreadRequest -> Json.Encode.Value
encodeModifyThreadRequest =
    encodeObject << encodeModifyThreadRequestPairs


encodeModifyThreadRequestWithTag : ( String, String ) -> ModifyThreadRequest -> Json.Encode.Value
encodeModifyThreadRequestWithTag (tagField, tag) model =
    encodeObject (encodeModifyThreadRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeModifyThreadRequestPairs : ModifyThreadRequest -> List EncodedField
encodeModifyThreadRequestPairs model =
    let
        pairs =
            [ maybeEncodeNullable "metadata" encodeObject model.metadata
            ]
    in
    pairs


encodeOpenAIFile : OpenAIFile -> Json.Encode.Value
encodeOpenAIFile =
    encodeObject << encodeOpenAIFilePairs


encodeOpenAIFileWithTag : ( String, String ) -> OpenAIFile -> Json.Encode.Value
encodeOpenAIFileWithTag (tagField, tag) model =
    encodeObject (encodeOpenAIFilePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOpenAIFilePairs : OpenAIFile -> List EncodedField
encodeOpenAIFilePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "bytes" Json.Encode.int model.bytes
            , encode "created_at" Json.Encode.int model.createdAt
            , encode "filename" Json.Encode.string model.filename
            , encode "object" encodeOpenAIFileObject model.object
            , encode "purpose" encodeOpenAIFilePurpose model.purpose
            , encode "status" encodeOpenAIFileStatus model.status
            , maybeEncode "status_details" Json.Encode.string model.statusDetails
            ]
    in
    pairs

stringFromOpenAIFileObject : OpenAIFileObject -> String
stringFromOpenAIFileObject model =
    case model of
        OpenAIFileObjectFile ->
            "file"


encodeOpenAIFileObject : OpenAIFileObject -> Json.Encode.Value
encodeOpenAIFileObject =
    Json.Encode.string << stringFromOpenAIFileObject


stringFromOpenAIFilePurpose : OpenAIFilePurpose -> String
stringFromOpenAIFilePurpose model =
    case model of
        OpenAIFilePurposeFineTune ->
            "fine-tune"

        OpenAIFilePurposeFineTuneResults ->
            "fine-tune-results"

        OpenAIFilePurposeAssistants ->
            "assistants"

        OpenAIFilePurposeAssistantsOutput ->
            "assistants_output"


encodeOpenAIFilePurpose : OpenAIFilePurpose -> Json.Encode.Value
encodeOpenAIFilePurpose =
    Json.Encode.string << stringFromOpenAIFilePurpose


stringFromOpenAIFileStatus : OpenAIFileStatus -> String
stringFromOpenAIFileStatus model =
    case model of
        OpenAIFileStatusUploaded ->
            "uploaded"

        OpenAIFileStatusProcessed ->
            "processed"

        OpenAIFileStatusError ->
            "error"


encodeOpenAIFileStatus : OpenAIFileStatus -> Json.Encode.Value
encodeOpenAIFileStatus =
    Json.Encode.string << stringFromOpenAIFileStatus



encodeRunCompletionUsage : RunCompletionUsage -> Json.Encode.Value
encodeRunCompletionUsage =
    encodeObject << encodeRunCompletionUsagePairs


encodeRunCompletionUsageWithTag : ( String, String ) -> RunCompletionUsage -> Json.Encode.Value
encodeRunCompletionUsageWithTag (tagField, tag) model =
    encodeObject (encodeRunCompletionUsagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunCompletionUsagePairs : RunCompletionUsage -> List EncodedField
encodeRunCompletionUsagePairs model =
    let
        pairs =
            [ encode "completion_tokens" Json.Encode.int model.completionTokens
            , encode "prompt_tokens" Json.Encode.int model.promptTokens
            , encode "total_tokens" Json.Encode.int model.totalTokens
            ]
    in
    pairs


encodeRunObject : RunObject -> Json.Encode.Value
encodeRunObject =
    encodeObject << encodeRunObjectPairs


encodeRunObjectWithTag : ( String, String ) -> RunObject -> Json.Encode.Value
encodeRunObjectWithTag (tagField, tag) model =
    encodeObject (encodeRunObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunObjectPairs : RunObject -> List EncodedField
encodeRunObjectPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "object" encodeRunObjectObject model.object
            , encode "created_at" Json.Encode.int model.createdAt
            , encode "thread_id" Json.Encode.string model.threadId
            , encode "assistant_id" Json.Encode.string model.assistantId
            , encode "status" encodeRunObjectStatus model.status
            , encodeNullable "required_action" encodeRunObjectRequiredAction model.requiredAction
            , encodeNullable "last_error" encodeRunObjectLastError model.lastError
            , encodeNullable "expires_at" Json.Encode.int model.expiresAt
            , encodeNullable "started_at" Json.Encode.int model.startedAt
            , encodeNullable "cancelled_at" Json.Encode.int model.cancelledAt
            , encodeNullable "failed_at" Json.Encode.int model.failedAt
            , encodeNullable "completed_at" Json.Encode.int model.completedAt
            , encodeNullable "incomplete_details" encodeRunObjectIncompleteDetails model.incompleteDetails
            , encode "model" Json.Encode.string model.model
            , encode "instructions" Json.Encode.string model.instructions
            , encode "tools" (Json.Encode.list encodeAssistantObjectToolsInner) model.tools
            , encode "file_ids" (Json.Encode.list Json.Encode.string) model.fileIds
            , encodeNullable "metadata" encodeObject model.metadata
            , encodeNullable "usage" encodeRunCompletionUsage model.usage
            , maybeEncodeNullable "temperature" Json.Encode.float model.temperature
            , encodeNullable "max_prompt_tokens" Json.Encode.int model.maxPromptTokens
            , encodeNullable "max_completion_tokens" Json.Encode.int model.maxCompletionTokens
            , encode "truncation_strategy" encodeTruncationObject model.truncationStrategy
            , encode "tool_choice" encodeAssistantsApiToolChoiceOption model.toolChoice
            , encode "response_format" encodeAssistantsApiResponseFormatOption model.responseFormat
            ]
    in
    pairs

stringFromRunObjectObject : RunObjectObject -> String
stringFromRunObjectObject model =
    case model of
        RunObjectObjectThreadRun ->
            "thread.run"


encodeRunObjectObject : RunObjectObject -> Json.Encode.Value
encodeRunObjectObject =
    Json.Encode.string << stringFromRunObjectObject


stringFromRunObjectStatus : RunObjectStatus -> String
stringFromRunObjectStatus model =
    case model of
        RunObjectStatusQueued ->
            "queued"

        RunObjectStatusInProgress ->
            "in_progress"

        RunObjectStatusRequiresAction ->
            "requires_action"

        RunObjectStatusCancelling ->
            "cancelling"

        RunObjectStatusCancelled ->
            "cancelled"

        RunObjectStatusFailed ->
            "failed"

        RunObjectStatusCompleted ->
            "completed"

        RunObjectStatusExpired ->
            "expired"


encodeRunObjectStatus : RunObjectStatus -> Json.Encode.Value
encodeRunObjectStatus =
    Json.Encode.string << stringFromRunObjectStatus



encodeRunObjectIncompleteDetails : RunObjectIncompleteDetails -> Json.Encode.Value
encodeRunObjectIncompleteDetails =
    encodeObject << encodeRunObjectIncompleteDetailsPairs


encodeRunObjectIncompleteDetailsWithTag : ( String, String ) -> RunObjectIncompleteDetails -> Json.Encode.Value
encodeRunObjectIncompleteDetailsWithTag (tagField, tag) model =
    encodeObject (encodeRunObjectIncompleteDetailsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunObjectIncompleteDetailsPairs : RunObjectIncompleteDetails -> List EncodedField
encodeRunObjectIncompleteDetailsPairs model =
    let
        pairs =
            [ maybeEncode "reason" encodeRunObjectIncompleteDetailsReason model.reason
            ]
    in
    pairs

stringFromRunObjectIncompleteDetailsReason : RunObjectIncompleteDetailsReason -> String
stringFromRunObjectIncompleteDetailsReason model =
    case model of
        RunObjectIncompleteDetailsReasonCompletionTokens ->
            "max_completion_tokens"

        RunObjectIncompleteDetailsReasonPromptTokens ->
            "max_prompt_tokens"


encodeRunObjectIncompleteDetailsReason : RunObjectIncompleteDetailsReason -> Json.Encode.Value
encodeRunObjectIncompleteDetailsReason =
    Json.Encode.string << stringFromRunObjectIncompleteDetailsReason



encodeRunObjectLastError : RunObjectLastError -> Json.Encode.Value
encodeRunObjectLastError =
    encodeObject << encodeRunObjectLastErrorPairs


encodeRunObjectLastErrorWithTag : ( String, String ) -> RunObjectLastError -> Json.Encode.Value
encodeRunObjectLastErrorWithTag (tagField, tag) model =
    encodeObject (encodeRunObjectLastErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunObjectLastErrorPairs : RunObjectLastError -> List EncodedField
encodeRunObjectLastErrorPairs model =
    let
        pairs =
            [ encode "code" encodeRunObjectLastErrorCode model.code
            , encode "message" Json.Encode.string model.message
            ]
    in
    pairs

stringFromRunObjectLastErrorCode : RunObjectLastErrorCode -> String
stringFromRunObjectLastErrorCode model =
    case model of
        RunObjectLastErrorCodeServerError ->
            "server_error"

        RunObjectLastErrorCodeRateLimitExceeded ->
            "rate_limit_exceeded"

        RunObjectLastErrorCodeInvalidPrompt ->
            "invalid_prompt"


encodeRunObjectLastErrorCode : RunObjectLastErrorCode -> Json.Encode.Value
encodeRunObjectLastErrorCode =
    Json.Encode.string << stringFromRunObjectLastErrorCode



encodeRunObjectRequiredAction : RunObjectRequiredAction -> Json.Encode.Value
encodeRunObjectRequiredAction =
    encodeObject << encodeRunObjectRequiredActionPairs


encodeRunObjectRequiredActionWithTag : ( String, String ) -> RunObjectRequiredAction -> Json.Encode.Value
encodeRunObjectRequiredActionWithTag (tagField, tag) model =
    encodeObject (encodeRunObjectRequiredActionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunObjectRequiredActionPairs : RunObjectRequiredAction -> List EncodedField
encodeRunObjectRequiredActionPairs model =
    let
        pairs =
            [ encode "type" encodeRunObjectRequiredActionType model.type_
            , encode "submit_tool_outputs" encodeRunObjectRequiredActionSubmitToolOutputs model.submitToolOutputs
            ]
    in
    pairs

stringFromRunObjectRequiredActionType : RunObjectRequiredActionType -> String
stringFromRunObjectRequiredActionType model =
    case model of
        RunObjectRequiredActionTypeSubmitToolOutputs ->
            "submit_tool_outputs"


encodeRunObjectRequiredActionType : RunObjectRequiredActionType -> Json.Encode.Value
encodeRunObjectRequiredActionType =
    Json.Encode.string << stringFromRunObjectRequiredActionType



encodeRunObjectRequiredActionSubmitToolOutputs : RunObjectRequiredActionSubmitToolOutputs -> Json.Encode.Value
encodeRunObjectRequiredActionSubmitToolOutputs =
    encodeObject << encodeRunObjectRequiredActionSubmitToolOutputsPairs


encodeRunObjectRequiredActionSubmitToolOutputsWithTag : ( String, String ) -> RunObjectRequiredActionSubmitToolOutputs -> Json.Encode.Value
encodeRunObjectRequiredActionSubmitToolOutputsWithTag (tagField, tag) model =
    encodeObject (encodeRunObjectRequiredActionSubmitToolOutputsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunObjectRequiredActionSubmitToolOutputsPairs : RunObjectRequiredActionSubmitToolOutputs -> List EncodedField
encodeRunObjectRequiredActionSubmitToolOutputsPairs model =
    let
        pairs =
            [ encode "tool_calls" (Json.Encode.list encodeRunToolCallObject) model.toolCalls
            ]
    in
    pairs


encodeRunStepCompletionUsage : RunStepCompletionUsage -> Json.Encode.Value
encodeRunStepCompletionUsage =
    encodeObject << encodeRunStepCompletionUsagePairs


encodeRunStepCompletionUsageWithTag : ( String, String ) -> RunStepCompletionUsage -> Json.Encode.Value
encodeRunStepCompletionUsageWithTag (tagField, tag) model =
    encodeObject (encodeRunStepCompletionUsagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepCompletionUsagePairs : RunStepCompletionUsage -> List EncodedField
encodeRunStepCompletionUsagePairs model =
    let
        pairs =
            [ encode "completion_tokens" Json.Encode.int model.completionTokens
            , encode "prompt_tokens" Json.Encode.int model.promptTokens
            , encode "total_tokens" Json.Encode.int model.totalTokens
            ]
    in
    pairs


encodeRunStepDeltaObject : RunStepDeltaObject -> Json.Encode.Value
encodeRunStepDeltaObject =
    encodeObject << encodeRunStepDeltaObjectPairs


encodeRunStepDeltaObjectWithTag : ( String, String ) -> RunStepDeltaObject -> Json.Encode.Value
encodeRunStepDeltaObjectWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDeltaObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDeltaObjectPairs : RunStepDeltaObject -> List EncodedField
encodeRunStepDeltaObjectPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "object" encodeRunStepDeltaObjectObject model.object
            , encode "delta" encodeRunStepDeltaObjectDelta model.delta
            ]
    in
    pairs

stringFromRunStepDeltaObjectObject : RunStepDeltaObjectObject -> String
stringFromRunStepDeltaObjectObject model =
    case model of
        RunStepDeltaObjectObjectThreadRunStepDelta ->
            "thread.run.step.delta"


encodeRunStepDeltaObjectObject : RunStepDeltaObjectObject -> Json.Encode.Value
encodeRunStepDeltaObjectObject =
    Json.Encode.string << stringFromRunStepDeltaObjectObject



encodeRunStepDeltaObjectDelta : RunStepDeltaObjectDelta -> Json.Encode.Value
encodeRunStepDeltaObjectDelta =
    encodeObject << encodeRunStepDeltaObjectDeltaPairs


encodeRunStepDeltaObjectDeltaWithTag : ( String, String ) -> RunStepDeltaObjectDelta -> Json.Encode.Value
encodeRunStepDeltaObjectDeltaWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDeltaObjectDeltaPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDeltaObjectDeltaPairs : RunStepDeltaObjectDelta -> List EncodedField
encodeRunStepDeltaObjectDeltaPairs model =
    let
        pairs =
            [ maybeEncode "step_details" encodeRunStepDeltaObjectDeltaStepDetails model.stepDetails
            ]
    in
    pairs


encodeRunStepDeltaObjectDeltaStepDetails : RunStepDeltaObjectDeltaStepDetails -> Json.Encode.Value
encodeRunStepDeltaObjectDeltaStepDetails model =
    case model of
        RunStepDeltaObjectDeltaStepDetailsRunStepDeltaStepDetailsMessageCreationObject subModel ->
            encodeRunStepDeltaStepDetailsMessageCreationObject subModel


        RunStepDeltaObjectDeltaStepDetailsRunStepDeltaStepDetailsToolCallsObject subModel ->
            encodeRunStepDeltaStepDetailsToolCallsObject subModel




encodeRunStepDeltaStepDetailsMessageCreationObject : RunStepDeltaStepDetailsMessageCreationObject -> Json.Encode.Value
encodeRunStepDeltaStepDetailsMessageCreationObject =
    encodeObject << encodeRunStepDeltaStepDetailsMessageCreationObjectPairs


encodeRunStepDeltaStepDetailsMessageCreationObjectWithTag : ( String, String ) -> RunStepDeltaStepDetailsMessageCreationObject -> Json.Encode.Value
encodeRunStepDeltaStepDetailsMessageCreationObjectWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDeltaStepDetailsMessageCreationObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDeltaStepDetailsMessageCreationObjectPairs : RunStepDeltaStepDetailsMessageCreationObject -> List EncodedField
encodeRunStepDeltaStepDetailsMessageCreationObjectPairs model =
    let
        pairs =
            [ encode "type" encodeRunStepDeltaStepDetailsMessageCreationObjectType model.type_
            , maybeEncode "message_creation" encodeRunStepDeltaStepDetailsMessageCreationObjectMessageCreation model.messageCreation
            ]
    in
    pairs

stringFromRunStepDeltaStepDetailsMessageCreationObjectType : RunStepDeltaStepDetailsMessageCreationObjectType -> String
stringFromRunStepDeltaStepDetailsMessageCreationObjectType model =
    case model of
        RunStepDeltaStepDetailsMessageCreationObjectTypeMessageCreation ->
            "message_creation"


encodeRunStepDeltaStepDetailsMessageCreationObjectType : RunStepDeltaStepDetailsMessageCreationObjectType -> Json.Encode.Value
encodeRunStepDeltaStepDetailsMessageCreationObjectType =
    Json.Encode.string << stringFromRunStepDeltaStepDetailsMessageCreationObjectType



encodeRunStepDeltaStepDetailsMessageCreationObjectMessageCreation : RunStepDeltaStepDetailsMessageCreationObjectMessageCreation -> Json.Encode.Value
encodeRunStepDeltaStepDetailsMessageCreationObjectMessageCreation =
    encodeObject << encodeRunStepDeltaStepDetailsMessageCreationObjectMessageCreationPairs


encodeRunStepDeltaStepDetailsMessageCreationObjectMessageCreationWithTag : ( String, String ) -> RunStepDeltaStepDetailsMessageCreationObjectMessageCreation -> Json.Encode.Value
encodeRunStepDeltaStepDetailsMessageCreationObjectMessageCreationWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDeltaStepDetailsMessageCreationObjectMessageCreationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDeltaStepDetailsMessageCreationObjectMessageCreationPairs : RunStepDeltaStepDetailsMessageCreationObjectMessageCreation -> List EncodedField
encodeRunStepDeltaStepDetailsMessageCreationObjectMessageCreationPairs model =
    let
        pairs =
            [ maybeEncode "message_id" Json.Encode.string model.messageId
            ]
    in
    pairs


encodeRunStepDeltaStepDetailsToolCallsCodeObject : RunStepDeltaStepDetailsToolCallsCodeObject -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsCodeObject =
    encodeObject << encodeRunStepDeltaStepDetailsToolCallsCodeObjectPairs


encodeRunStepDeltaStepDetailsToolCallsCodeObjectWithTag : ( String, String ) -> RunStepDeltaStepDetailsToolCallsCodeObject -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsCodeObjectWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDeltaStepDetailsToolCallsCodeObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDeltaStepDetailsToolCallsCodeObjectPairs : RunStepDeltaStepDetailsToolCallsCodeObject -> List EncodedField
encodeRunStepDeltaStepDetailsToolCallsCodeObjectPairs model =
    let
        pairs =
            [ encode "index" Json.Encode.int model.index
            , maybeEncode "id" Json.Encode.string model.id
            , encode "type" encodeRunStepDeltaStepDetailsToolCallsCodeObjectType model.type_
            , maybeEncode "code_interpreter" encodeRunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter model.codeInterpreter
            ]
    in
    pairs

stringFromRunStepDeltaStepDetailsToolCallsCodeObjectType : RunStepDeltaStepDetailsToolCallsCodeObjectType -> String
stringFromRunStepDeltaStepDetailsToolCallsCodeObjectType model =
    case model of
        RunStepDeltaStepDetailsToolCallsCodeObjectTypeCodeInterpreter ->
            "code_interpreter"


encodeRunStepDeltaStepDetailsToolCallsCodeObjectType : RunStepDeltaStepDetailsToolCallsCodeObjectType -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsCodeObjectType =
    Json.Encode.string << stringFromRunStepDeltaStepDetailsToolCallsCodeObjectType



encodeRunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter : RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter =
    encodeObject << encodeRunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterPairs


encodeRunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterWithTag : ( String, String ) -> RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterPairs : RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter -> List EncodedField
encodeRunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterPairs model =
    let
        pairs =
            [ maybeEncode "input" Json.Encode.string model.input
            , maybeEncode "outputs" (Json.Encode.list encodeRunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner) model.outputs
            ]
    in
    pairs


encodeRunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner : RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner model =
    case model of
        RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerRunStepDeltaStepDetailsToolCallsCodeOutputImageObject subModel ->
            encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObject subModel


        RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject subModel ->
            encodeRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject subModel




encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObject : RunStepDeltaStepDetailsToolCallsCodeOutputImageObject -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObject =
    encodeObject << encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectPairs


encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectWithTag : ( String, String ) -> RunStepDeltaStepDetailsToolCallsCodeOutputImageObject -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectPairs : RunStepDeltaStepDetailsToolCallsCodeOutputImageObject -> List EncodedField
encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectPairs model =
    let
        pairs =
            [ encode "index" Json.Encode.int model.index
            , encode "type" encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType model.type_
            , maybeEncode "image" encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImage model.image
            ]
    in
    pairs

stringFromRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType : RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType -> String
stringFromRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType model =
    case model of
        RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectTypeImage ->
            "image"


encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType : RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType =
    Json.Encode.string << stringFromRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType



encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImage : RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImage -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImage =
    encodeObject << encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImagePairs


encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImageWithTag : ( String, String ) -> RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImage -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImageWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImagePairs : RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImage -> List EncodedField
encodeRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImagePairs model =
    let
        pairs =
            [ maybeEncode "file_id" Json.Encode.string model.fileId
            ]
    in
    pairs


encodeRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject : RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject =
    encodeObject << encodeRunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectPairs


encodeRunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectWithTag : ( String, String ) -> RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectPairs : RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject -> List EncodedField
encodeRunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectPairs model =
    let
        pairs =
            [ encode "index" Json.Encode.int model.index
            , encode "type" encodeRunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType model.type_
            , maybeEncode "logs" Json.Encode.string model.logs
            ]
    in
    pairs

stringFromRunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType : RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType -> String
stringFromRunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType model =
    case model of
        RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectTypeLogs ->
            "logs"


encodeRunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType : RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType =
    Json.Encode.string << stringFromRunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType



encodeRunStepDeltaStepDetailsToolCallsFunctionObject : RunStepDeltaStepDetailsToolCallsFunctionObject -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsFunctionObject =
    encodeObject << encodeRunStepDeltaStepDetailsToolCallsFunctionObjectPairs


encodeRunStepDeltaStepDetailsToolCallsFunctionObjectWithTag : ( String, String ) -> RunStepDeltaStepDetailsToolCallsFunctionObject -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsFunctionObjectWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDeltaStepDetailsToolCallsFunctionObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDeltaStepDetailsToolCallsFunctionObjectPairs : RunStepDeltaStepDetailsToolCallsFunctionObject -> List EncodedField
encodeRunStepDeltaStepDetailsToolCallsFunctionObjectPairs model =
    let
        pairs =
            [ encode "index" Json.Encode.int model.index
            , maybeEncode "id" Json.Encode.string model.id
            , encode "type" encodeRunStepDeltaStepDetailsToolCallsFunctionObjectType model.type_
            , maybeEncode "function" encodeRunStepDeltaStepDetailsToolCallsFunctionObjectFunction model.function
            ]
    in
    pairs

stringFromRunStepDeltaStepDetailsToolCallsFunctionObjectType : RunStepDeltaStepDetailsToolCallsFunctionObjectType -> String
stringFromRunStepDeltaStepDetailsToolCallsFunctionObjectType model =
    case model of
        RunStepDeltaStepDetailsToolCallsFunctionObjectTypeFunction ->
            "function"


encodeRunStepDeltaStepDetailsToolCallsFunctionObjectType : RunStepDeltaStepDetailsToolCallsFunctionObjectType -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsFunctionObjectType =
    Json.Encode.string << stringFromRunStepDeltaStepDetailsToolCallsFunctionObjectType



encodeRunStepDeltaStepDetailsToolCallsFunctionObjectFunction : RunStepDeltaStepDetailsToolCallsFunctionObjectFunction -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsFunctionObjectFunction =
    encodeObject << encodeRunStepDeltaStepDetailsToolCallsFunctionObjectFunctionPairs


encodeRunStepDeltaStepDetailsToolCallsFunctionObjectFunctionWithTag : ( String, String ) -> RunStepDeltaStepDetailsToolCallsFunctionObjectFunction -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsFunctionObjectFunctionWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDeltaStepDetailsToolCallsFunctionObjectFunctionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDeltaStepDetailsToolCallsFunctionObjectFunctionPairs : RunStepDeltaStepDetailsToolCallsFunctionObjectFunction -> List EncodedField
encodeRunStepDeltaStepDetailsToolCallsFunctionObjectFunctionPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "arguments" Json.Encode.string model.arguments
            , maybeEncodeNullable "output" Json.Encode.string model.output
            ]
    in
    pairs


encodeRunStepDeltaStepDetailsToolCallsObject : RunStepDeltaStepDetailsToolCallsObject -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsObject =
    encodeObject << encodeRunStepDeltaStepDetailsToolCallsObjectPairs


encodeRunStepDeltaStepDetailsToolCallsObjectWithTag : ( String, String ) -> RunStepDeltaStepDetailsToolCallsObject -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsObjectWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDeltaStepDetailsToolCallsObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDeltaStepDetailsToolCallsObjectPairs : RunStepDeltaStepDetailsToolCallsObject -> List EncodedField
encodeRunStepDeltaStepDetailsToolCallsObjectPairs model =
    let
        pairs =
            [ encode "type" encodeRunStepDeltaStepDetailsToolCallsObjectType model.type_
            , maybeEncode "tool_calls" (Json.Encode.list encodeRunStepDeltaStepDetailsToolCallsObjectToolCallsInner) model.toolCalls
            ]
    in
    pairs

stringFromRunStepDeltaStepDetailsToolCallsObjectType : RunStepDeltaStepDetailsToolCallsObjectType -> String
stringFromRunStepDeltaStepDetailsToolCallsObjectType model =
    case model of
        RunStepDeltaStepDetailsToolCallsObjectTypeToolCalls ->
            "tool_calls"


encodeRunStepDeltaStepDetailsToolCallsObjectType : RunStepDeltaStepDetailsToolCallsObjectType -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsObjectType =
    Json.Encode.string << stringFromRunStepDeltaStepDetailsToolCallsObjectType



encodeRunStepDeltaStepDetailsToolCallsObjectToolCallsInner : RunStepDeltaStepDetailsToolCallsObjectToolCallsInner -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsObjectToolCallsInner model =
    case model of
        RunStepDeltaStepDetailsToolCallsObjectToolCallsInnerRunStepDeltaStepDetailsToolCallsCodeObject subModel ->
            encodeRunStepDeltaStepDetailsToolCallsCodeObject subModel


        RunStepDeltaStepDetailsToolCallsObjectToolCallsInnerRunStepDeltaStepDetailsToolCallsFunctionObject subModel ->
            encodeRunStepDeltaStepDetailsToolCallsFunctionObject subModel


        RunStepDeltaStepDetailsToolCallsObjectToolCallsInnerRunStepDeltaStepDetailsToolCallsRetrievalObject subModel ->
            encodeRunStepDeltaStepDetailsToolCallsRetrievalObject subModel




encodeRunStepDeltaStepDetailsToolCallsRetrievalObject : RunStepDeltaStepDetailsToolCallsRetrievalObject -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsRetrievalObject =
    encodeObject << encodeRunStepDeltaStepDetailsToolCallsRetrievalObjectPairs


encodeRunStepDeltaStepDetailsToolCallsRetrievalObjectWithTag : ( String, String ) -> RunStepDeltaStepDetailsToolCallsRetrievalObject -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsRetrievalObjectWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDeltaStepDetailsToolCallsRetrievalObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDeltaStepDetailsToolCallsRetrievalObjectPairs : RunStepDeltaStepDetailsToolCallsRetrievalObject -> List EncodedField
encodeRunStepDeltaStepDetailsToolCallsRetrievalObjectPairs model =
    let
        pairs =
            [ encode "index" Json.Encode.int model.index
            , maybeEncode "id" Json.Encode.string model.id
            , encode "type" encodeRunStepDeltaStepDetailsToolCallsRetrievalObjectType model.type_
            , maybeEncode "retrieval" encodeObject model.retrieval
            ]
    in
    pairs

stringFromRunStepDeltaStepDetailsToolCallsRetrievalObjectType : RunStepDeltaStepDetailsToolCallsRetrievalObjectType -> String
stringFromRunStepDeltaStepDetailsToolCallsRetrievalObjectType model =
    case model of
        RunStepDeltaStepDetailsToolCallsRetrievalObjectTypeRetrieval ->
            "retrieval"


encodeRunStepDeltaStepDetailsToolCallsRetrievalObjectType : RunStepDeltaStepDetailsToolCallsRetrievalObjectType -> Json.Encode.Value
encodeRunStepDeltaStepDetailsToolCallsRetrievalObjectType =
    Json.Encode.string << stringFromRunStepDeltaStepDetailsToolCallsRetrievalObjectType



encodeRunStepDetailsMessageCreationObject : RunStepDetailsMessageCreationObject -> Json.Encode.Value
encodeRunStepDetailsMessageCreationObject =
    encodeObject << encodeRunStepDetailsMessageCreationObjectPairs


encodeRunStepDetailsMessageCreationObjectWithTag : ( String, String ) -> RunStepDetailsMessageCreationObject -> Json.Encode.Value
encodeRunStepDetailsMessageCreationObjectWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDetailsMessageCreationObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDetailsMessageCreationObjectPairs : RunStepDetailsMessageCreationObject -> List EncodedField
encodeRunStepDetailsMessageCreationObjectPairs model =
    let
        pairs =
            [ encode "type" encodeRunStepDetailsMessageCreationObjectType model.type_
            , encode "message_creation" encodeRunStepDetailsMessageCreationObjectMessageCreation model.messageCreation
            ]
    in
    pairs

stringFromRunStepDetailsMessageCreationObjectType : RunStepDetailsMessageCreationObjectType -> String
stringFromRunStepDetailsMessageCreationObjectType model =
    case model of
        RunStepDetailsMessageCreationObjectTypeMessageCreation ->
            "message_creation"


encodeRunStepDetailsMessageCreationObjectType : RunStepDetailsMessageCreationObjectType -> Json.Encode.Value
encodeRunStepDetailsMessageCreationObjectType =
    Json.Encode.string << stringFromRunStepDetailsMessageCreationObjectType



encodeRunStepDetailsMessageCreationObjectMessageCreation : RunStepDetailsMessageCreationObjectMessageCreation -> Json.Encode.Value
encodeRunStepDetailsMessageCreationObjectMessageCreation =
    encodeObject << encodeRunStepDetailsMessageCreationObjectMessageCreationPairs


encodeRunStepDetailsMessageCreationObjectMessageCreationWithTag : ( String, String ) -> RunStepDetailsMessageCreationObjectMessageCreation -> Json.Encode.Value
encodeRunStepDetailsMessageCreationObjectMessageCreationWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDetailsMessageCreationObjectMessageCreationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDetailsMessageCreationObjectMessageCreationPairs : RunStepDetailsMessageCreationObjectMessageCreation -> List EncodedField
encodeRunStepDetailsMessageCreationObjectMessageCreationPairs model =
    let
        pairs =
            [ encode "message_id" Json.Encode.string model.messageId
            ]
    in
    pairs


encodeRunStepDetailsToolCallsCodeObject : RunStepDetailsToolCallsCodeObject -> Json.Encode.Value
encodeRunStepDetailsToolCallsCodeObject =
    encodeObject << encodeRunStepDetailsToolCallsCodeObjectPairs


encodeRunStepDetailsToolCallsCodeObjectWithTag : ( String, String ) -> RunStepDetailsToolCallsCodeObject -> Json.Encode.Value
encodeRunStepDetailsToolCallsCodeObjectWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDetailsToolCallsCodeObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDetailsToolCallsCodeObjectPairs : RunStepDetailsToolCallsCodeObject -> List EncodedField
encodeRunStepDetailsToolCallsCodeObjectPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "type" encodeRunStepDetailsToolCallsCodeObjectType model.type_
            , encode "code_interpreter" encodeRunStepDetailsToolCallsCodeObjectCodeInterpreter model.codeInterpreter
            ]
    in
    pairs

stringFromRunStepDetailsToolCallsCodeObjectType : RunStepDetailsToolCallsCodeObjectType -> String
stringFromRunStepDetailsToolCallsCodeObjectType model =
    case model of
        RunStepDetailsToolCallsCodeObjectTypeCodeInterpreter ->
            "code_interpreter"


encodeRunStepDetailsToolCallsCodeObjectType : RunStepDetailsToolCallsCodeObjectType -> Json.Encode.Value
encodeRunStepDetailsToolCallsCodeObjectType =
    Json.Encode.string << stringFromRunStepDetailsToolCallsCodeObjectType



encodeRunStepDetailsToolCallsCodeObjectCodeInterpreter : RunStepDetailsToolCallsCodeObjectCodeInterpreter -> Json.Encode.Value
encodeRunStepDetailsToolCallsCodeObjectCodeInterpreter =
    encodeObject << encodeRunStepDetailsToolCallsCodeObjectCodeInterpreterPairs


encodeRunStepDetailsToolCallsCodeObjectCodeInterpreterWithTag : ( String, String ) -> RunStepDetailsToolCallsCodeObjectCodeInterpreter -> Json.Encode.Value
encodeRunStepDetailsToolCallsCodeObjectCodeInterpreterWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDetailsToolCallsCodeObjectCodeInterpreterPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDetailsToolCallsCodeObjectCodeInterpreterPairs : RunStepDetailsToolCallsCodeObjectCodeInterpreter -> List EncodedField
encodeRunStepDetailsToolCallsCodeObjectCodeInterpreterPairs model =
    let
        pairs =
            [ encode "input" Json.Encode.string model.input
            , encode "outputs" (Json.Encode.list encodeRunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner) model.outputs
            ]
    in
    pairs


encodeRunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner : RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner -> Json.Encode.Value
encodeRunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner model =
    case model of
        RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerRunStepDetailsToolCallsCodeOutputImageObject subModel ->
            encodeRunStepDetailsToolCallsCodeOutputImageObject subModel


        RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerRunStepDetailsToolCallsCodeOutputLogsObject subModel ->
            encodeRunStepDetailsToolCallsCodeOutputLogsObject subModel




encodeRunStepDetailsToolCallsCodeOutputImageObject : RunStepDetailsToolCallsCodeOutputImageObject -> Json.Encode.Value
encodeRunStepDetailsToolCallsCodeOutputImageObject =
    encodeObject << encodeRunStepDetailsToolCallsCodeOutputImageObjectPairs


encodeRunStepDetailsToolCallsCodeOutputImageObjectWithTag : ( String, String ) -> RunStepDetailsToolCallsCodeOutputImageObject -> Json.Encode.Value
encodeRunStepDetailsToolCallsCodeOutputImageObjectWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDetailsToolCallsCodeOutputImageObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDetailsToolCallsCodeOutputImageObjectPairs : RunStepDetailsToolCallsCodeOutputImageObject -> List EncodedField
encodeRunStepDetailsToolCallsCodeOutputImageObjectPairs model =
    let
        pairs =
            [ encode "type" encodeRunStepDetailsToolCallsCodeOutputImageObjectType model.type_
            , encode "image" encodeRunStepDetailsToolCallsCodeOutputImageObjectImage model.image
            ]
    in
    pairs

stringFromRunStepDetailsToolCallsCodeOutputImageObjectType : RunStepDetailsToolCallsCodeOutputImageObjectType -> String
stringFromRunStepDetailsToolCallsCodeOutputImageObjectType model =
    case model of
        RunStepDetailsToolCallsCodeOutputImageObjectTypeImage ->
            "image"


encodeRunStepDetailsToolCallsCodeOutputImageObjectType : RunStepDetailsToolCallsCodeOutputImageObjectType -> Json.Encode.Value
encodeRunStepDetailsToolCallsCodeOutputImageObjectType =
    Json.Encode.string << stringFromRunStepDetailsToolCallsCodeOutputImageObjectType



encodeRunStepDetailsToolCallsCodeOutputImageObjectImage : RunStepDetailsToolCallsCodeOutputImageObjectImage -> Json.Encode.Value
encodeRunStepDetailsToolCallsCodeOutputImageObjectImage =
    encodeObject << encodeRunStepDetailsToolCallsCodeOutputImageObjectImagePairs


encodeRunStepDetailsToolCallsCodeOutputImageObjectImageWithTag : ( String, String ) -> RunStepDetailsToolCallsCodeOutputImageObjectImage -> Json.Encode.Value
encodeRunStepDetailsToolCallsCodeOutputImageObjectImageWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDetailsToolCallsCodeOutputImageObjectImagePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDetailsToolCallsCodeOutputImageObjectImagePairs : RunStepDetailsToolCallsCodeOutputImageObjectImage -> List EncodedField
encodeRunStepDetailsToolCallsCodeOutputImageObjectImagePairs model =
    let
        pairs =
            [ encode "file_id" Json.Encode.string model.fileId
            ]
    in
    pairs


encodeRunStepDetailsToolCallsCodeOutputLogsObject : RunStepDetailsToolCallsCodeOutputLogsObject -> Json.Encode.Value
encodeRunStepDetailsToolCallsCodeOutputLogsObject =
    encodeObject << encodeRunStepDetailsToolCallsCodeOutputLogsObjectPairs


encodeRunStepDetailsToolCallsCodeOutputLogsObjectWithTag : ( String, String ) -> RunStepDetailsToolCallsCodeOutputLogsObject -> Json.Encode.Value
encodeRunStepDetailsToolCallsCodeOutputLogsObjectWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDetailsToolCallsCodeOutputLogsObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDetailsToolCallsCodeOutputLogsObjectPairs : RunStepDetailsToolCallsCodeOutputLogsObject -> List EncodedField
encodeRunStepDetailsToolCallsCodeOutputLogsObjectPairs model =
    let
        pairs =
            [ encode "type" encodeRunStepDetailsToolCallsCodeOutputLogsObjectType model.type_
            , encode "logs" Json.Encode.string model.logs
            ]
    in
    pairs

stringFromRunStepDetailsToolCallsCodeOutputLogsObjectType : RunStepDetailsToolCallsCodeOutputLogsObjectType -> String
stringFromRunStepDetailsToolCallsCodeOutputLogsObjectType model =
    case model of
        RunStepDetailsToolCallsCodeOutputLogsObjectTypeLogs ->
            "logs"


encodeRunStepDetailsToolCallsCodeOutputLogsObjectType : RunStepDetailsToolCallsCodeOutputLogsObjectType -> Json.Encode.Value
encodeRunStepDetailsToolCallsCodeOutputLogsObjectType =
    Json.Encode.string << stringFromRunStepDetailsToolCallsCodeOutputLogsObjectType



encodeRunStepDetailsToolCallsFunctionObject : RunStepDetailsToolCallsFunctionObject -> Json.Encode.Value
encodeRunStepDetailsToolCallsFunctionObject =
    encodeObject << encodeRunStepDetailsToolCallsFunctionObjectPairs


encodeRunStepDetailsToolCallsFunctionObjectWithTag : ( String, String ) -> RunStepDetailsToolCallsFunctionObject -> Json.Encode.Value
encodeRunStepDetailsToolCallsFunctionObjectWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDetailsToolCallsFunctionObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDetailsToolCallsFunctionObjectPairs : RunStepDetailsToolCallsFunctionObject -> List EncodedField
encodeRunStepDetailsToolCallsFunctionObjectPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "type" encodeRunStepDetailsToolCallsFunctionObjectType model.type_
            , encode "function" encodeRunStepDetailsToolCallsFunctionObjectFunction model.function
            ]
    in
    pairs

stringFromRunStepDetailsToolCallsFunctionObjectType : RunStepDetailsToolCallsFunctionObjectType -> String
stringFromRunStepDetailsToolCallsFunctionObjectType model =
    case model of
        RunStepDetailsToolCallsFunctionObjectTypeFunction ->
            "function"


encodeRunStepDetailsToolCallsFunctionObjectType : RunStepDetailsToolCallsFunctionObjectType -> Json.Encode.Value
encodeRunStepDetailsToolCallsFunctionObjectType =
    Json.Encode.string << stringFromRunStepDetailsToolCallsFunctionObjectType



encodeRunStepDetailsToolCallsFunctionObjectFunction : RunStepDetailsToolCallsFunctionObjectFunction -> Json.Encode.Value
encodeRunStepDetailsToolCallsFunctionObjectFunction =
    encodeObject << encodeRunStepDetailsToolCallsFunctionObjectFunctionPairs


encodeRunStepDetailsToolCallsFunctionObjectFunctionWithTag : ( String, String ) -> RunStepDetailsToolCallsFunctionObjectFunction -> Json.Encode.Value
encodeRunStepDetailsToolCallsFunctionObjectFunctionWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDetailsToolCallsFunctionObjectFunctionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDetailsToolCallsFunctionObjectFunctionPairs : RunStepDetailsToolCallsFunctionObjectFunction -> List EncodedField
encodeRunStepDetailsToolCallsFunctionObjectFunctionPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "arguments" Json.Encode.string model.arguments
            , encodeNullable "output" Json.Encode.string model.output
            ]
    in
    pairs


encodeRunStepDetailsToolCallsObject : RunStepDetailsToolCallsObject -> Json.Encode.Value
encodeRunStepDetailsToolCallsObject =
    encodeObject << encodeRunStepDetailsToolCallsObjectPairs


encodeRunStepDetailsToolCallsObjectWithTag : ( String, String ) -> RunStepDetailsToolCallsObject -> Json.Encode.Value
encodeRunStepDetailsToolCallsObjectWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDetailsToolCallsObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDetailsToolCallsObjectPairs : RunStepDetailsToolCallsObject -> List EncodedField
encodeRunStepDetailsToolCallsObjectPairs model =
    let
        pairs =
            [ encode "type" encodeRunStepDetailsToolCallsObjectType model.type_
            , encode "tool_calls" (Json.Encode.list encodeRunStepDetailsToolCallsObjectToolCallsInner) model.toolCalls
            ]
    in
    pairs

stringFromRunStepDetailsToolCallsObjectType : RunStepDetailsToolCallsObjectType -> String
stringFromRunStepDetailsToolCallsObjectType model =
    case model of
        RunStepDetailsToolCallsObjectTypeToolCalls ->
            "tool_calls"


encodeRunStepDetailsToolCallsObjectType : RunStepDetailsToolCallsObjectType -> Json.Encode.Value
encodeRunStepDetailsToolCallsObjectType =
    Json.Encode.string << stringFromRunStepDetailsToolCallsObjectType



encodeRunStepDetailsToolCallsObjectToolCallsInner : RunStepDetailsToolCallsObjectToolCallsInner -> Json.Encode.Value
encodeRunStepDetailsToolCallsObjectToolCallsInner model =
    case model of
        RunStepDetailsToolCallsObjectToolCallsInnerRunStepDetailsToolCallsCodeObject subModel ->
            encodeRunStepDetailsToolCallsCodeObject subModel


        RunStepDetailsToolCallsObjectToolCallsInnerRunStepDetailsToolCallsFunctionObject subModel ->
            encodeRunStepDetailsToolCallsFunctionObject subModel


        RunStepDetailsToolCallsObjectToolCallsInnerRunStepDetailsToolCallsRetrievalObject subModel ->
            encodeRunStepDetailsToolCallsRetrievalObject subModel




encodeRunStepDetailsToolCallsRetrievalObject : RunStepDetailsToolCallsRetrievalObject -> Json.Encode.Value
encodeRunStepDetailsToolCallsRetrievalObject =
    encodeObject << encodeRunStepDetailsToolCallsRetrievalObjectPairs


encodeRunStepDetailsToolCallsRetrievalObjectWithTag : ( String, String ) -> RunStepDetailsToolCallsRetrievalObject -> Json.Encode.Value
encodeRunStepDetailsToolCallsRetrievalObjectWithTag (tagField, tag) model =
    encodeObject (encodeRunStepDetailsToolCallsRetrievalObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepDetailsToolCallsRetrievalObjectPairs : RunStepDetailsToolCallsRetrievalObject -> List EncodedField
encodeRunStepDetailsToolCallsRetrievalObjectPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "type" encodeRunStepDetailsToolCallsRetrievalObjectType model.type_
            , encode "retrieval" encodeObject model.retrieval
            ]
    in
    pairs

stringFromRunStepDetailsToolCallsRetrievalObjectType : RunStepDetailsToolCallsRetrievalObjectType -> String
stringFromRunStepDetailsToolCallsRetrievalObjectType model =
    case model of
        RunStepDetailsToolCallsRetrievalObjectTypeRetrieval ->
            "retrieval"


encodeRunStepDetailsToolCallsRetrievalObjectType : RunStepDetailsToolCallsRetrievalObjectType -> Json.Encode.Value
encodeRunStepDetailsToolCallsRetrievalObjectType =
    Json.Encode.string << stringFromRunStepDetailsToolCallsRetrievalObjectType



encodeRunStepObject : RunStepObject -> Json.Encode.Value
encodeRunStepObject =
    encodeObject << encodeRunStepObjectPairs


encodeRunStepObjectWithTag : ( String, String ) -> RunStepObject -> Json.Encode.Value
encodeRunStepObjectWithTag (tagField, tag) model =
    encodeObject (encodeRunStepObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepObjectPairs : RunStepObject -> List EncodedField
encodeRunStepObjectPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "object" encodeRunStepObjectObject model.object
            , encode "created_at" Json.Encode.int model.createdAt
            , encode "assistant_id" Json.Encode.string model.assistantId
            , encode "thread_id" Json.Encode.string model.threadId
            , encode "run_id" Json.Encode.string model.runId
            , encode "type" encodeRunStepObjectType model.type_
            , encode "status" encodeRunStepObjectStatus model.status
            , encode "step_details" encodeRunStepObjectStepDetails model.stepDetails
            , encodeNullable "last_error" encodeRunStepObjectLastError model.lastError
            , encodeNullable "expired_at" Json.Encode.int model.expiredAt
            , encodeNullable "cancelled_at" Json.Encode.int model.cancelledAt
            , encodeNullable "failed_at" Json.Encode.int model.failedAt
            , encodeNullable "completed_at" Json.Encode.int model.completedAt
            , encodeNullable "metadata" encodeObject model.metadata
            , encodeNullable "usage" encodeRunStepCompletionUsage model.usage
            ]
    in
    pairs

stringFromRunStepObjectObject : RunStepObjectObject -> String
stringFromRunStepObjectObject model =
    case model of
        RunStepObjectObjectThreadRunStep ->
            "thread.run.step"


encodeRunStepObjectObject : RunStepObjectObject -> Json.Encode.Value
encodeRunStepObjectObject =
    Json.Encode.string << stringFromRunStepObjectObject


stringFromRunStepObjectType : RunStepObjectType -> String
stringFromRunStepObjectType model =
    case model of
        RunStepObjectTypeMessageCreation ->
            "message_creation"

        RunStepObjectTypeToolCalls ->
            "tool_calls"


encodeRunStepObjectType : RunStepObjectType -> Json.Encode.Value
encodeRunStepObjectType =
    Json.Encode.string << stringFromRunStepObjectType


stringFromRunStepObjectStatus : RunStepObjectStatus -> String
stringFromRunStepObjectStatus model =
    case model of
        RunStepObjectStatusInProgress ->
            "in_progress"

        RunStepObjectStatusCancelled ->
            "cancelled"

        RunStepObjectStatusFailed ->
            "failed"

        RunStepObjectStatusCompleted ->
            "completed"

        RunStepObjectStatusExpired ->
            "expired"


encodeRunStepObjectStatus : RunStepObjectStatus -> Json.Encode.Value
encodeRunStepObjectStatus =
    Json.Encode.string << stringFromRunStepObjectStatus



encodeRunStepObjectLastError : RunStepObjectLastError -> Json.Encode.Value
encodeRunStepObjectLastError =
    encodeObject << encodeRunStepObjectLastErrorPairs


encodeRunStepObjectLastErrorWithTag : ( String, String ) -> RunStepObjectLastError -> Json.Encode.Value
encodeRunStepObjectLastErrorWithTag (tagField, tag) model =
    encodeObject (encodeRunStepObjectLastErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepObjectLastErrorPairs : RunStepObjectLastError -> List EncodedField
encodeRunStepObjectLastErrorPairs model =
    let
        pairs =
            [ encode "code" encodeRunStepObjectLastErrorCode model.code
            , encode "message" Json.Encode.string model.message
            ]
    in
    pairs

stringFromRunStepObjectLastErrorCode : RunStepObjectLastErrorCode -> String
stringFromRunStepObjectLastErrorCode model =
    case model of
        RunStepObjectLastErrorCodeServerError ->
            "server_error"

        RunStepObjectLastErrorCodeRateLimitExceeded ->
            "rate_limit_exceeded"


encodeRunStepObjectLastErrorCode : RunStepObjectLastErrorCode -> Json.Encode.Value
encodeRunStepObjectLastErrorCode =
    Json.Encode.string << stringFromRunStepObjectLastErrorCode



encodeRunStepObjectStepDetails : RunStepObjectStepDetails -> Json.Encode.Value
encodeRunStepObjectStepDetails model =
    case model of
        RunStepObjectStepDetailsRunStepDetailsMessageCreationObject subModel ->
            encodeRunStepDetailsMessageCreationObject subModel


        RunStepObjectStepDetailsRunStepDetailsToolCallsObject subModel ->
            encodeRunStepDetailsToolCallsObject subModel




encodeRunStepStreamEvent : RunStepStreamEvent -> Json.Encode.Value
encodeRunStepStreamEvent model =
    case model of
        RunStepStreamEventRunStepStreamEventOneOf subModel ->
            encodeRunStepStreamEventOneOf subModel


        RunStepStreamEventRunStepStreamEventOneOf1 subModel ->
            encodeRunStepStreamEventOneOf1 subModel


        RunStepStreamEventRunStepStreamEventOneOf2 subModel ->
            encodeRunStepStreamEventOneOf2 subModel


        RunStepStreamEventRunStepStreamEventOneOf3 subModel ->
            encodeRunStepStreamEventOneOf3 subModel


        RunStepStreamEventRunStepStreamEventOneOf4 subModel ->
            encodeRunStepStreamEventOneOf4 subModel


        RunStepStreamEventRunStepStreamEventOneOf5 subModel ->
            encodeRunStepStreamEventOneOf5 subModel


        RunStepStreamEventRunStepStreamEventOneOf6 subModel ->
            encodeRunStepStreamEventOneOf6 subModel




encodeRunStepStreamEventOneOf : RunStepStreamEventOneOf -> Json.Encode.Value
encodeRunStepStreamEventOneOf =
    encodeObject << encodeRunStepStreamEventOneOfPairs


encodeRunStepStreamEventOneOfWithTag : ( String, String ) -> RunStepStreamEventOneOf -> Json.Encode.Value
encodeRunStepStreamEventOneOfWithTag (tagField, tag) model =
    encodeObject (encodeRunStepStreamEventOneOfPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepStreamEventOneOfPairs : RunStepStreamEventOneOf -> List EncodedField
encodeRunStepStreamEventOneOfPairs model =
    let
        pairs =
            [ encode "event" encodeRunStepStreamEventOneOfEvent model.event
            , encode "data" encodeRunStepObject model.data
            ]
    in
    pairs

stringFromRunStepStreamEventOneOfEvent : RunStepStreamEventOneOfEvent -> String
stringFromRunStepStreamEventOneOfEvent model =
    case model of
        RunStepStreamEventOneOfEventThreadRunStepCreated ->
            "thread.run.step.created"


encodeRunStepStreamEventOneOfEvent : RunStepStreamEventOneOfEvent -> Json.Encode.Value
encodeRunStepStreamEventOneOfEvent =
    Json.Encode.string << stringFromRunStepStreamEventOneOfEvent



encodeRunStepStreamEventOneOf1 : RunStepStreamEventOneOf1 -> Json.Encode.Value
encodeRunStepStreamEventOneOf1 =
    encodeObject << encodeRunStepStreamEventOneOf1Pairs


encodeRunStepStreamEventOneOf1WithTag : ( String, String ) -> RunStepStreamEventOneOf1 -> Json.Encode.Value
encodeRunStepStreamEventOneOf1WithTag (tagField, tag) model =
    encodeObject (encodeRunStepStreamEventOneOf1Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepStreamEventOneOf1Pairs : RunStepStreamEventOneOf1 -> List EncodedField
encodeRunStepStreamEventOneOf1Pairs model =
    let
        pairs =
            [ encode "event" encodeRunStepStreamEventOneOf1Event model.event
            , encode "data" encodeRunStepObject model.data
            ]
    in
    pairs

stringFromRunStepStreamEventOneOf1Event : RunStepStreamEventOneOf1Event -> String
stringFromRunStepStreamEventOneOf1Event model =
    case model of
        RunStepStreamEventOneOf1EventThreadRunStepInProgress ->
            "thread.run.step.in_progress"


encodeRunStepStreamEventOneOf1Event : RunStepStreamEventOneOf1Event -> Json.Encode.Value
encodeRunStepStreamEventOneOf1Event =
    Json.Encode.string << stringFromRunStepStreamEventOneOf1Event



encodeRunStepStreamEventOneOf2 : RunStepStreamEventOneOf2 -> Json.Encode.Value
encodeRunStepStreamEventOneOf2 =
    encodeObject << encodeRunStepStreamEventOneOf2Pairs


encodeRunStepStreamEventOneOf2WithTag : ( String, String ) -> RunStepStreamEventOneOf2 -> Json.Encode.Value
encodeRunStepStreamEventOneOf2WithTag (tagField, tag) model =
    encodeObject (encodeRunStepStreamEventOneOf2Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepStreamEventOneOf2Pairs : RunStepStreamEventOneOf2 -> List EncodedField
encodeRunStepStreamEventOneOf2Pairs model =
    let
        pairs =
            [ encode "event" encodeRunStepStreamEventOneOf2Event model.event
            , encode "data" encodeRunStepDeltaObject model.data
            ]
    in
    pairs

stringFromRunStepStreamEventOneOf2Event : RunStepStreamEventOneOf2Event -> String
stringFromRunStepStreamEventOneOf2Event model =
    case model of
        RunStepStreamEventOneOf2EventThreadRunStepDelta ->
            "thread.run.step.delta"


encodeRunStepStreamEventOneOf2Event : RunStepStreamEventOneOf2Event -> Json.Encode.Value
encodeRunStepStreamEventOneOf2Event =
    Json.Encode.string << stringFromRunStepStreamEventOneOf2Event



encodeRunStepStreamEventOneOf3 : RunStepStreamEventOneOf3 -> Json.Encode.Value
encodeRunStepStreamEventOneOf3 =
    encodeObject << encodeRunStepStreamEventOneOf3Pairs


encodeRunStepStreamEventOneOf3WithTag : ( String, String ) -> RunStepStreamEventOneOf3 -> Json.Encode.Value
encodeRunStepStreamEventOneOf3WithTag (tagField, tag) model =
    encodeObject (encodeRunStepStreamEventOneOf3Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepStreamEventOneOf3Pairs : RunStepStreamEventOneOf3 -> List EncodedField
encodeRunStepStreamEventOneOf3Pairs model =
    let
        pairs =
            [ encode "event" encodeRunStepStreamEventOneOf3Event model.event
            , encode "data" encodeRunStepObject model.data
            ]
    in
    pairs

stringFromRunStepStreamEventOneOf3Event : RunStepStreamEventOneOf3Event -> String
stringFromRunStepStreamEventOneOf3Event model =
    case model of
        RunStepStreamEventOneOf3EventThreadRunStepCompleted ->
            "thread.run.step.completed"


encodeRunStepStreamEventOneOf3Event : RunStepStreamEventOneOf3Event -> Json.Encode.Value
encodeRunStepStreamEventOneOf3Event =
    Json.Encode.string << stringFromRunStepStreamEventOneOf3Event



encodeRunStepStreamEventOneOf4 : RunStepStreamEventOneOf4 -> Json.Encode.Value
encodeRunStepStreamEventOneOf4 =
    encodeObject << encodeRunStepStreamEventOneOf4Pairs


encodeRunStepStreamEventOneOf4WithTag : ( String, String ) -> RunStepStreamEventOneOf4 -> Json.Encode.Value
encodeRunStepStreamEventOneOf4WithTag (tagField, tag) model =
    encodeObject (encodeRunStepStreamEventOneOf4Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepStreamEventOneOf4Pairs : RunStepStreamEventOneOf4 -> List EncodedField
encodeRunStepStreamEventOneOf4Pairs model =
    let
        pairs =
            [ encode "event" encodeRunStepStreamEventOneOf4Event model.event
            , encode "data" encodeRunStepObject model.data
            ]
    in
    pairs

stringFromRunStepStreamEventOneOf4Event : RunStepStreamEventOneOf4Event -> String
stringFromRunStepStreamEventOneOf4Event model =
    case model of
        RunStepStreamEventOneOf4EventThreadRunStepFailed ->
            "thread.run.step.failed"


encodeRunStepStreamEventOneOf4Event : RunStepStreamEventOneOf4Event -> Json.Encode.Value
encodeRunStepStreamEventOneOf4Event =
    Json.Encode.string << stringFromRunStepStreamEventOneOf4Event



encodeRunStepStreamEventOneOf5 : RunStepStreamEventOneOf5 -> Json.Encode.Value
encodeRunStepStreamEventOneOf5 =
    encodeObject << encodeRunStepStreamEventOneOf5Pairs


encodeRunStepStreamEventOneOf5WithTag : ( String, String ) -> RunStepStreamEventOneOf5 -> Json.Encode.Value
encodeRunStepStreamEventOneOf5WithTag (tagField, tag) model =
    encodeObject (encodeRunStepStreamEventOneOf5Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepStreamEventOneOf5Pairs : RunStepStreamEventOneOf5 -> List EncodedField
encodeRunStepStreamEventOneOf5Pairs model =
    let
        pairs =
            [ encode "event" encodeRunStepStreamEventOneOf5Event model.event
            , encode "data" encodeRunStepObject model.data
            ]
    in
    pairs

stringFromRunStepStreamEventOneOf5Event : RunStepStreamEventOneOf5Event -> String
stringFromRunStepStreamEventOneOf5Event model =
    case model of
        RunStepStreamEventOneOf5EventThreadRunStepCancelled ->
            "thread.run.step.cancelled"


encodeRunStepStreamEventOneOf5Event : RunStepStreamEventOneOf5Event -> Json.Encode.Value
encodeRunStepStreamEventOneOf5Event =
    Json.Encode.string << stringFromRunStepStreamEventOneOf5Event



encodeRunStepStreamEventOneOf6 : RunStepStreamEventOneOf6 -> Json.Encode.Value
encodeRunStepStreamEventOneOf6 =
    encodeObject << encodeRunStepStreamEventOneOf6Pairs


encodeRunStepStreamEventOneOf6WithTag : ( String, String ) -> RunStepStreamEventOneOf6 -> Json.Encode.Value
encodeRunStepStreamEventOneOf6WithTag (tagField, tag) model =
    encodeObject (encodeRunStepStreamEventOneOf6Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStepStreamEventOneOf6Pairs : RunStepStreamEventOneOf6 -> List EncodedField
encodeRunStepStreamEventOneOf6Pairs model =
    let
        pairs =
            [ encode "event" encodeRunStepStreamEventOneOf6Event model.event
            , encode "data" encodeRunStepObject model.data
            ]
    in
    pairs

stringFromRunStepStreamEventOneOf6Event : RunStepStreamEventOneOf6Event -> String
stringFromRunStepStreamEventOneOf6Event model =
    case model of
        RunStepStreamEventOneOf6EventThreadRunStepExpired ->
            "thread.run.step.expired"


encodeRunStepStreamEventOneOf6Event : RunStepStreamEventOneOf6Event -> Json.Encode.Value
encodeRunStepStreamEventOneOf6Event =
    Json.Encode.string << stringFromRunStepStreamEventOneOf6Event



encodeRunStreamEvent : RunStreamEvent -> Json.Encode.Value
encodeRunStreamEvent model =
    case model of
        RunStreamEventRunStreamEventOneOf subModel ->
            encodeRunStreamEventOneOf subModel


        RunStreamEventRunStreamEventOneOf1 subModel ->
            encodeRunStreamEventOneOf1 subModel


        RunStreamEventRunStreamEventOneOf2 subModel ->
            encodeRunStreamEventOneOf2 subModel


        RunStreamEventRunStreamEventOneOf3 subModel ->
            encodeRunStreamEventOneOf3 subModel


        RunStreamEventRunStreamEventOneOf4 subModel ->
            encodeRunStreamEventOneOf4 subModel


        RunStreamEventRunStreamEventOneOf5 subModel ->
            encodeRunStreamEventOneOf5 subModel


        RunStreamEventRunStreamEventOneOf6 subModel ->
            encodeRunStreamEventOneOf6 subModel


        RunStreamEventRunStreamEventOneOf7 subModel ->
            encodeRunStreamEventOneOf7 subModel


        RunStreamEventRunStreamEventOneOf8 subModel ->
            encodeRunStreamEventOneOf8 subModel




encodeRunStreamEventOneOf : RunStreamEventOneOf -> Json.Encode.Value
encodeRunStreamEventOneOf =
    encodeObject << encodeRunStreamEventOneOfPairs


encodeRunStreamEventOneOfWithTag : ( String, String ) -> RunStreamEventOneOf -> Json.Encode.Value
encodeRunStreamEventOneOfWithTag (tagField, tag) model =
    encodeObject (encodeRunStreamEventOneOfPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStreamEventOneOfPairs : RunStreamEventOneOf -> List EncodedField
encodeRunStreamEventOneOfPairs model =
    let
        pairs =
            [ encode "event" encodeRunStreamEventOneOfEvent model.event
            , encode "data" encodeRunObject model.data
            ]
    in
    pairs

stringFromRunStreamEventOneOfEvent : RunStreamEventOneOfEvent -> String
stringFromRunStreamEventOneOfEvent model =
    case model of
        RunStreamEventOneOfEventThreadRunCreated ->
            "thread.run.created"


encodeRunStreamEventOneOfEvent : RunStreamEventOneOfEvent -> Json.Encode.Value
encodeRunStreamEventOneOfEvent =
    Json.Encode.string << stringFromRunStreamEventOneOfEvent



encodeRunStreamEventOneOf1 : RunStreamEventOneOf1 -> Json.Encode.Value
encodeRunStreamEventOneOf1 =
    encodeObject << encodeRunStreamEventOneOf1Pairs


encodeRunStreamEventOneOf1WithTag : ( String, String ) -> RunStreamEventOneOf1 -> Json.Encode.Value
encodeRunStreamEventOneOf1WithTag (tagField, tag) model =
    encodeObject (encodeRunStreamEventOneOf1Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStreamEventOneOf1Pairs : RunStreamEventOneOf1 -> List EncodedField
encodeRunStreamEventOneOf1Pairs model =
    let
        pairs =
            [ encode "event" encodeRunStreamEventOneOf1Event model.event
            , encode "data" encodeRunObject model.data
            ]
    in
    pairs

stringFromRunStreamEventOneOf1Event : RunStreamEventOneOf1Event -> String
stringFromRunStreamEventOneOf1Event model =
    case model of
        RunStreamEventOneOf1EventThreadRunQueued ->
            "thread.run.queued"


encodeRunStreamEventOneOf1Event : RunStreamEventOneOf1Event -> Json.Encode.Value
encodeRunStreamEventOneOf1Event =
    Json.Encode.string << stringFromRunStreamEventOneOf1Event



encodeRunStreamEventOneOf2 : RunStreamEventOneOf2 -> Json.Encode.Value
encodeRunStreamEventOneOf2 =
    encodeObject << encodeRunStreamEventOneOf2Pairs


encodeRunStreamEventOneOf2WithTag : ( String, String ) -> RunStreamEventOneOf2 -> Json.Encode.Value
encodeRunStreamEventOneOf2WithTag (tagField, tag) model =
    encodeObject (encodeRunStreamEventOneOf2Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStreamEventOneOf2Pairs : RunStreamEventOneOf2 -> List EncodedField
encodeRunStreamEventOneOf2Pairs model =
    let
        pairs =
            [ encode "event" encodeRunStreamEventOneOf2Event model.event
            , encode "data" encodeRunObject model.data
            ]
    in
    pairs

stringFromRunStreamEventOneOf2Event : RunStreamEventOneOf2Event -> String
stringFromRunStreamEventOneOf2Event model =
    case model of
        RunStreamEventOneOf2EventThreadRunInProgress ->
            "thread.run.in_progress"


encodeRunStreamEventOneOf2Event : RunStreamEventOneOf2Event -> Json.Encode.Value
encodeRunStreamEventOneOf2Event =
    Json.Encode.string << stringFromRunStreamEventOneOf2Event



encodeRunStreamEventOneOf3 : RunStreamEventOneOf3 -> Json.Encode.Value
encodeRunStreamEventOneOf3 =
    encodeObject << encodeRunStreamEventOneOf3Pairs


encodeRunStreamEventOneOf3WithTag : ( String, String ) -> RunStreamEventOneOf3 -> Json.Encode.Value
encodeRunStreamEventOneOf3WithTag (tagField, tag) model =
    encodeObject (encodeRunStreamEventOneOf3Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStreamEventOneOf3Pairs : RunStreamEventOneOf3 -> List EncodedField
encodeRunStreamEventOneOf3Pairs model =
    let
        pairs =
            [ encode "event" encodeRunStreamEventOneOf3Event model.event
            , encode "data" encodeRunObject model.data
            ]
    in
    pairs

stringFromRunStreamEventOneOf3Event : RunStreamEventOneOf3Event -> String
stringFromRunStreamEventOneOf3Event model =
    case model of
        RunStreamEventOneOf3EventThreadRunRequiresAction ->
            "thread.run.requires_action"


encodeRunStreamEventOneOf3Event : RunStreamEventOneOf3Event -> Json.Encode.Value
encodeRunStreamEventOneOf3Event =
    Json.Encode.string << stringFromRunStreamEventOneOf3Event



encodeRunStreamEventOneOf4 : RunStreamEventOneOf4 -> Json.Encode.Value
encodeRunStreamEventOneOf4 =
    encodeObject << encodeRunStreamEventOneOf4Pairs


encodeRunStreamEventOneOf4WithTag : ( String, String ) -> RunStreamEventOneOf4 -> Json.Encode.Value
encodeRunStreamEventOneOf4WithTag (tagField, tag) model =
    encodeObject (encodeRunStreamEventOneOf4Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStreamEventOneOf4Pairs : RunStreamEventOneOf4 -> List EncodedField
encodeRunStreamEventOneOf4Pairs model =
    let
        pairs =
            [ encode "event" encodeRunStreamEventOneOf4Event model.event
            , encode "data" encodeRunObject model.data
            ]
    in
    pairs

stringFromRunStreamEventOneOf4Event : RunStreamEventOneOf4Event -> String
stringFromRunStreamEventOneOf4Event model =
    case model of
        RunStreamEventOneOf4EventThreadRunCompleted ->
            "thread.run.completed"


encodeRunStreamEventOneOf4Event : RunStreamEventOneOf4Event -> Json.Encode.Value
encodeRunStreamEventOneOf4Event =
    Json.Encode.string << stringFromRunStreamEventOneOf4Event



encodeRunStreamEventOneOf5 : RunStreamEventOneOf5 -> Json.Encode.Value
encodeRunStreamEventOneOf5 =
    encodeObject << encodeRunStreamEventOneOf5Pairs


encodeRunStreamEventOneOf5WithTag : ( String, String ) -> RunStreamEventOneOf5 -> Json.Encode.Value
encodeRunStreamEventOneOf5WithTag (tagField, tag) model =
    encodeObject (encodeRunStreamEventOneOf5Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStreamEventOneOf5Pairs : RunStreamEventOneOf5 -> List EncodedField
encodeRunStreamEventOneOf5Pairs model =
    let
        pairs =
            [ encode "event" encodeRunStreamEventOneOf5Event model.event
            , encode "data" encodeRunObject model.data
            ]
    in
    pairs

stringFromRunStreamEventOneOf5Event : RunStreamEventOneOf5Event -> String
stringFromRunStreamEventOneOf5Event model =
    case model of
        RunStreamEventOneOf5EventThreadRunFailed ->
            "thread.run.failed"


encodeRunStreamEventOneOf5Event : RunStreamEventOneOf5Event -> Json.Encode.Value
encodeRunStreamEventOneOf5Event =
    Json.Encode.string << stringFromRunStreamEventOneOf5Event



encodeRunStreamEventOneOf6 : RunStreamEventOneOf6 -> Json.Encode.Value
encodeRunStreamEventOneOf6 =
    encodeObject << encodeRunStreamEventOneOf6Pairs


encodeRunStreamEventOneOf6WithTag : ( String, String ) -> RunStreamEventOneOf6 -> Json.Encode.Value
encodeRunStreamEventOneOf6WithTag (tagField, tag) model =
    encodeObject (encodeRunStreamEventOneOf6Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStreamEventOneOf6Pairs : RunStreamEventOneOf6 -> List EncodedField
encodeRunStreamEventOneOf6Pairs model =
    let
        pairs =
            [ encode "event" encodeRunStreamEventOneOf6Event model.event
            , encode "data" encodeRunObject model.data
            ]
    in
    pairs

stringFromRunStreamEventOneOf6Event : RunStreamEventOneOf6Event -> String
stringFromRunStreamEventOneOf6Event model =
    case model of
        RunStreamEventOneOf6EventThreadRunCancelling ->
            "thread.run.cancelling"


encodeRunStreamEventOneOf6Event : RunStreamEventOneOf6Event -> Json.Encode.Value
encodeRunStreamEventOneOf6Event =
    Json.Encode.string << stringFromRunStreamEventOneOf6Event



encodeRunStreamEventOneOf7 : RunStreamEventOneOf7 -> Json.Encode.Value
encodeRunStreamEventOneOf7 =
    encodeObject << encodeRunStreamEventOneOf7Pairs


encodeRunStreamEventOneOf7WithTag : ( String, String ) -> RunStreamEventOneOf7 -> Json.Encode.Value
encodeRunStreamEventOneOf7WithTag (tagField, tag) model =
    encodeObject (encodeRunStreamEventOneOf7Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStreamEventOneOf7Pairs : RunStreamEventOneOf7 -> List EncodedField
encodeRunStreamEventOneOf7Pairs model =
    let
        pairs =
            [ encode "event" encodeRunStreamEventOneOf7Event model.event
            , encode "data" encodeRunObject model.data
            ]
    in
    pairs

stringFromRunStreamEventOneOf7Event : RunStreamEventOneOf7Event -> String
stringFromRunStreamEventOneOf7Event model =
    case model of
        RunStreamEventOneOf7EventThreadRunCancelled ->
            "thread.run.cancelled"


encodeRunStreamEventOneOf7Event : RunStreamEventOneOf7Event -> Json.Encode.Value
encodeRunStreamEventOneOf7Event =
    Json.Encode.string << stringFromRunStreamEventOneOf7Event



encodeRunStreamEventOneOf8 : RunStreamEventOneOf8 -> Json.Encode.Value
encodeRunStreamEventOneOf8 =
    encodeObject << encodeRunStreamEventOneOf8Pairs


encodeRunStreamEventOneOf8WithTag : ( String, String ) -> RunStreamEventOneOf8 -> Json.Encode.Value
encodeRunStreamEventOneOf8WithTag (tagField, tag) model =
    encodeObject (encodeRunStreamEventOneOf8Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunStreamEventOneOf8Pairs : RunStreamEventOneOf8 -> List EncodedField
encodeRunStreamEventOneOf8Pairs model =
    let
        pairs =
            [ encode "event" encodeRunStreamEventOneOf8Event model.event
            , encode "data" encodeRunObject model.data
            ]
    in
    pairs

stringFromRunStreamEventOneOf8Event : RunStreamEventOneOf8Event -> String
stringFromRunStreamEventOneOf8Event model =
    case model of
        RunStreamEventOneOf8EventThreadRunExpired ->
            "thread.run.expired"


encodeRunStreamEventOneOf8Event : RunStreamEventOneOf8Event -> Json.Encode.Value
encodeRunStreamEventOneOf8Event =
    Json.Encode.string << stringFromRunStreamEventOneOf8Event



encodeRunToolCallObject : RunToolCallObject -> Json.Encode.Value
encodeRunToolCallObject =
    encodeObject << encodeRunToolCallObjectPairs


encodeRunToolCallObjectWithTag : ( String, String ) -> RunToolCallObject -> Json.Encode.Value
encodeRunToolCallObjectWithTag (tagField, tag) model =
    encodeObject (encodeRunToolCallObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunToolCallObjectPairs : RunToolCallObject -> List EncodedField
encodeRunToolCallObjectPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "type" encodeRunToolCallObjectType model.type_
            , encode "function" encodeRunToolCallObjectFunction model.function
            ]
    in
    pairs

stringFromRunToolCallObjectType : RunToolCallObjectType -> String
stringFromRunToolCallObjectType model =
    case model of
        RunToolCallObjectTypeFunction ->
            "function"


encodeRunToolCallObjectType : RunToolCallObjectType -> Json.Encode.Value
encodeRunToolCallObjectType =
    Json.Encode.string << stringFromRunToolCallObjectType



encodeRunToolCallObjectFunction : RunToolCallObjectFunction -> Json.Encode.Value
encodeRunToolCallObjectFunction =
    encodeObject << encodeRunToolCallObjectFunctionPairs


encodeRunToolCallObjectFunctionWithTag : ( String, String ) -> RunToolCallObjectFunction -> Json.Encode.Value
encodeRunToolCallObjectFunctionWithTag (tagField, tag) model =
    encodeObject (encodeRunToolCallObjectFunctionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRunToolCallObjectFunctionPairs : RunToolCallObjectFunction -> List EncodedField
encodeRunToolCallObjectFunctionPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "arguments" Json.Encode.string model.arguments
            ]
    in
    pairs


encodeSubmitToolOutputsRunRequest : SubmitToolOutputsRunRequest -> Json.Encode.Value
encodeSubmitToolOutputsRunRequest =
    encodeObject << encodeSubmitToolOutputsRunRequestPairs


encodeSubmitToolOutputsRunRequestWithTag : ( String, String ) -> SubmitToolOutputsRunRequest -> Json.Encode.Value
encodeSubmitToolOutputsRunRequestWithTag (tagField, tag) model =
    encodeObject (encodeSubmitToolOutputsRunRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSubmitToolOutputsRunRequestPairs : SubmitToolOutputsRunRequest -> List EncodedField
encodeSubmitToolOutputsRunRequestPairs model =
    let
        pairs =
            [ encode "tool_outputs" (Json.Encode.list encodeSubmitToolOutputsRunRequestToolOutputsInner) model.toolOutputs
            , maybeEncodeNullable "stream" Json.Encode.bool model.stream
            ]
    in
    pairs


encodeSubmitToolOutputsRunRequestToolOutputsInner : SubmitToolOutputsRunRequestToolOutputsInner -> Json.Encode.Value
encodeSubmitToolOutputsRunRequestToolOutputsInner =
    encodeObject << encodeSubmitToolOutputsRunRequestToolOutputsInnerPairs


encodeSubmitToolOutputsRunRequestToolOutputsInnerWithTag : ( String, String ) -> SubmitToolOutputsRunRequestToolOutputsInner -> Json.Encode.Value
encodeSubmitToolOutputsRunRequestToolOutputsInnerWithTag (tagField, tag) model =
    encodeObject (encodeSubmitToolOutputsRunRequestToolOutputsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSubmitToolOutputsRunRequestToolOutputsInnerPairs : SubmitToolOutputsRunRequestToolOutputsInner -> List EncodedField
encodeSubmitToolOutputsRunRequestToolOutputsInnerPairs model =
    let
        pairs =
            [ maybeEncode "tool_call_id" Json.Encode.string model.toolCallId
            , maybeEncode "output" Json.Encode.string model.output
            ]
    in
    pairs


encodeThreadObject : ThreadObject -> Json.Encode.Value
encodeThreadObject =
    encodeObject << encodeThreadObjectPairs


encodeThreadObjectWithTag : ( String, String ) -> ThreadObject -> Json.Encode.Value
encodeThreadObjectWithTag (tagField, tag) model =
    encodeObject (encodeThreadObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeThreadObjectPairs : ThreadObject -> List EncodedField
encodeThreadObjectPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "object" encodeThreadObjectObject model.object
            , encode "created_at" Json.Encode.int model.createdAt
            , encodeNullable "metadata" encodeObject model.metadata
            ]
    in
    pairs

stringFromThreadObjectObject : ThreadObjectObject -> String
stringFromThreadObjectObject model =
    case model of
        ThreadObjectObjectThread ->
            "thread"


encodeThreadObjectObject : ThreadObjectObject -> Json.Encode.Value
encodeThreadObjectObject =
    Json.Encode.string << stringFromThreadObjectObject



encodeThreadStreamEvent : ThreadStreamEvent -> Json.Encode.Value
encodeThreadStreamEvent model =
    case model of
        ThreadStreamEventThreadStreamEventOneOf subModel ->
            encodeThreadStreamEventOneOf subModel




encodeThreadStreamEventOneOf : ThreadStreamEventOneOf -> Json.Encode.Value
encodeThreadStreamEventOneOf =
    encodeObject << encodeThreadStreamEventOneOfPairs


encodeThreadStreamEventOneOfWithTag : ( String, String ) -> ThreadStreamEventOneOf -> Json.Encode.Value
encodeThreadStreamEventOneOfWithTag (tagField, tag) model =
    encodeObject (encodeThreadStreamEventOneOfPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeThreadStreamEventOneOfPairs : ThreadStreamEventOneOf -> List EncodedField
encodeThreadStreamEventOneOfPairs model =
    let
        pairs =
            [ encode "event" encodeThreadStreamEventOneOfEvent model.event
            , encode "data" encodeThreadObject model.data
            ]
    in
    pairs

stringFromThreadStreamEventOneOfEvent : ThreadStreamEventOneOfEvent -> String
stringFromThreadStreamEventOneOfEvent model =
    case model of
        ThreadStreamEventOneOfEventThreadCreated ->
            "thread.created"


encodeThreadStreamEventOneOfEvent : ThreadStreamEventOneOfEvent -> Json.Encode.Value
encodeThreadStreamEventOneOfEvent =
    Json.Encode.string << stringFromThreadStreamEventOneOfEvent



encodeTranscriptionSegment : TranscriptionSegment -> Json.Encode.Value
encodeTranscriptionSegment =
    encodeObject << encodeTranscriptionSegmentPairs


encodeTranscriptionSegmentWithTag : ( String, String ) -> TranscriptionSegment -> Json.Encode.Value
encodeTranscriptionSegmentWithTag (tagField, tag) model =
    encodeObject (encodeTranscriptionSegmentPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTranscriptionSegmentPairs : TranscriptionSegment -> List EncodedField
encodeTranscriptionSegmentPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "seek" Json.Encode.int model.seek
            , encode "start" Json.Encode.float model.start
            , encode "end" Json.Encode.float model.end
            , encode "text" Json.Encode.string model.text
            , encode "tokens" (Json.Encode.list Json.Encode.int) model.tokens
            , encode "temperature" Json.Encode.float model.temperature
            , encode "avg_logprob" Json.Encode.float model.avgLogprob
            , encode "compression_ratio" Json.Encode.float model.compressionRatio
            , encode "no_speech_prob" Json.Encode.float model.noSpeechProb
            ]
    in
    pairs


encodeTranscriptionWord : TranscriptionWord -> Json.Encode.Value
encodeTranscriptionWord =
    encodeObject << encodeTranscriptionWordPairs


encodeTranscriptionWordWithTag : ( String, String ) -> TranscriptionWord -> Json.Encode.Value
encodeTranscriptionWordWithTag (tagField, tag) model =
    encodeObject (encodeTranscriptionWordPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTranscriptionWordPairs : TranscriptionWord -> List EncodedField
encodeTranscriptionWordPairs model =
    let
        pairs =
            [ encode "word" Json.Encode.string model.word
            , encode "start" Json.Encode.float model.start
            , encode "end" Json.Encode.float model.end
            ]
    in
    pairs


encodeTruncationObject : TruncationObject -> Json.Encode.Value
encodeTruncationObject =
    encodeObject << encodeTruncationObjectPairs


encodeTruncationObjectWithTag : ( String, String ) -> TruncationObject -> Json.Encode.Value
encodeTruncationObjectWithTag (tagField, tag) model =
    encodeObject (encodeTruncationObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTruncationObjectPairs : TruncationObject -> List EncodedField
encodeTruncationObjectPairs model =
    let
        pairs =
            [ maybeEncode "type" encodeTruncationObjectType model.type_
            , maybeEncodeNullable "last_messages" Json.Encode.int model.lastMessages
            ]
    in
    pairs

stringFromTruncationObjectType : TruncationObjectType -> String
stringFromTruncationObjectType model =
    case model of
        TruncationObjectTypeAuto ->
            "auto"

        TruncationObjectTypeLastMessages ->
            "last_messages"


encodeTruncationObjectType : TruncationObjectType -> Json.Encode.Value
encodeTruncationObjectType =
    Json.Encode.string << stringFromTruncationObjectType



-- DECODER


assistantFileObjectDecoder : Json.Decode.Decoder AssistantFileObject
assistantFileObjectDecoder =
    Json.Decode.succeed AssistantFileObject
        |> decode "id" Json.Decode.string 
        |> decode "object" assistantFileObjectObjectDecoder 
        |> decode "created_at" Json.Decode.int 
        |> decode "assistant_id" Json.Decode.string 


assistantFileObjectObjectDecoder : Json.Decode.Decoder AssistantFileObjectObject
assistantFileObjectObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "assistant.file" ->
                        Json.Decode.succeed AssistantFileObjectObjectAssistantFile

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



assistantObjectDecoder : Json.Decode.Decoder AssistantObject
assistantObjectDecoder =
    Json.Decode.succeed AssistantObject
        |> decode "id" Json.Decode.string 
        |> decode "object" assistantObjectObjectDecoder 
        |> decode "created_at" Json.Decode.int 
        |> decodeNullable "name" Json.Decode.string 
        |> decodeNullable "description" Json.Decode.string 
        |> decode "model" Json.Decode.string 
        |> decodeNullable "instructions" Json.Decode.string 
        |> decode "tools" (Json.Decode.list assistantObjectToolsInnerDecoder) 
        |> decode "file_ids" (Json.Decode.list Json.Decode.string) 
        |> decodeNullable "metadata" objectDecoder 


assistantObjectObjectDecoder : Json.Decode.Decoder AssistantObjectObject
assistantObjectObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "assistant" ->
                        Json.Decode.succeed AssistantObjectObjectAssistant

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



assistantObjectToolsInnerDecoder : Json.Decode.Decoder AssistantObjectToolsInner
assistantObjectToolsInnerDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map AssistantObjectToolsInnerAssistantToolsCode assistantToolsCodeDecoder
        , Json.Decode.map AssistantObjectToolsInnerAssistantToolsFunction assistantToolsFunctionDecoder
        , Json.Decode.map AssistantObjectToolsInnerAssistantToolsRetrieval assistantToolsRetrievalDecoder
        ]



assistantStreamEventDecoder : Json.Decode.Decoder AssistantStreamEvent
assistantStreamEventDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map AssistantStreamEventDoneEvent doneEventDecoder
        , Json.Decode.map AssistantStreamEventErrorEvent errorEventDecoder
        , Json.Decode.map AssistantStreamEventMessageStreamEvent messageStreamEventDecoder
        , Json.Decode.map AssistantStreamEventRunStepStreamEvent runStepStreamEventDecoder
        , Json.Decode.map AssistantStreamEventRunStreamEvent runStreamEventDecoder
        , Json.Decode.map AssistantStreamEventThreadStreamEvent threadStreamEventDecoder
        ]



assistantToolsCodeDecoder : Json.Decode.Decoder AssistantToolsCode
assistantToolsCodeDecoder =
    Json.Decode.succeed AssistantToolsCode
        |> decode "type" assistantToolsCodeTypeDecoder 


assistantToolsCodeTypeDecoder : Json.Decode.Decoder AssistantToolsCodeType
assistantToolsCodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "code_interpreter" ->
                        Json.Decode.succeed AssistantToolsCodeTypeCodeInterpreter

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



assistantToolsFunctionDecoder : Json.Decode.Decoder AssistantToolsFunction
assistantToolsFunctionDecoder =
    Json.Decode.succeed AssistantToolsFunction
        |> decode "type" assistantToolsFunctionTypeDecoder 
        |> decode "function" functionObjectDecoder 


assistantToolsFunctionTypeDecoder : Json.Decode.Decoder AssistantToolsFunctionType
assistantToolsFunctionTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "function" ->
                        Json.Decode.succeed AssistantToolsFunctionTypeFunction

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



assistantToolsRetrievalDecoder : Json.Decode.Decoder AssistantToolsRetrieval
assistantToolsRetrievalDecoder =
    Json.Decode.succeed AssistantToolsRetrieval
        |> decode "type" assistantToolsRetrievalTypeDecoder 


assistantToolsRetrievalTypeDecoder : Json.Decode.Decoder AssistantToolsRetrievalType
assistantToolsRetrievalTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "retrieval" ->
                        Json.Decode.succeed AssistantToolsRetrievalTypeRetrieval

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



assistantsApiNamedToolChoiceDecoder : Json.Decode.Decoder AssistantsApiNamedToolChoice
assistantsApiNamedToolChoiceDecoder =
    Json.Decode.succeed AssistantsApiNamedToolChoice
        |> decode "type" assistantsApiNamedToolChoiceTypeDecoder 
        |> maybeDecode "function" chatCompletionNamedToolChoiceFunctionDecoder Nothing


assistantsApiNamedToolChoiceTypeDecoder : Json.Decode.Decoder AssistantsApiNamedToolChoiceType
assistantsApiNamedToolChoiceTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "function" ->
                        Json.Decode.succeed AssistantsApiNamedToolChoiceTypeFunction

                    "code_interpreter" ->
                        Json.Decode.succeed AssistantsApiNamedToolChoiceTypeCodeInterpreter

                    "retrieval" ->
                        Json.Decode.succeed AssistantsApiNamedToolChoiceTypeRetrieval

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



assistantsApiResponseFormatDecoder : Json.Decode.Decoder AssistantsApiResponseFormat
assistantsApiResponseFormatDecoder =
    Json.Decode.succeed AssistantsApiResponseFormat
        |> maybeDecode "type" assistantsApiResponseFormatTypeDecoder (Just "text")


assistantsApiResponseFormatTypeDecoder : Json.Decode.Decoder AssistantsApiResponseFormatType
assistantsApiResponseFormatTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "text" ->
                        Json.Decode.succeed AssistantsApiResponseFormatTypeText

                    "json_object" ->
                        Json.Decode.succeed AssistantsApiResponseFormatTypeJsonObject

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



assistantsApiResponseFormatOptionDecoder : Json.Decode.Decoder AssistantsApiResponseFormatOption
assistantsApiResponseFormatOptionDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map AssistantsApiResponseFormatOptionAssistantsApiResponseFormat assistantsApiResponseFormatDecoder
        , Json.Decode.map AssistantsApiResponseFormatOptionString stringDecoder
        ]



assistantsApiToolChoiceOptionDecoder : Json.Decode.Decoder AssistantsApiToolChoiceOption
assistantsApiToolChoiceOptionDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map AssistantsApiToolChoiceOptionAssistantsApiNamedToolChoice assistantsApiNamedToolChoiceDecoder
        , Json.Decode.map AssistantsApiToolChoiceOptionString stringDecoder
        ]



chatCompletionFunctionCallOptionDecoder : Json.Decode.Decoder ChatCompletionFunctionCallOption
chatCompletionFunctionCallOptionDecoder =
    Json.Decode.succeed ChatCompletionFunctionCallOption
        |> decode "name" Json.Decode.string 


chatCompletionFunctionsDecoder : Json.Decode.Decoder ChatCompletionFunctions
chatCompletionFunctionsDecoder =
    Json.Decode.succeed ChatCompletionFunctions
        |> maybeDecode "description" Json.Decode.string Nothing
        |> decode "name" Json.Decode.string 
        |> maybeDecode "parameters" (Json.Decode.dict anyTypeDecoder) Nothing


chatCompletionMessageToolCallDecoder : Json.Decode.Decoder ChatCompletionMessageToolCall
chatCompletionMessageToolCallDecoder =
    Json.Decode.succeed ChatCompletionMessageToolCall
        |> decode "id" Json.Decode.string 
        |> decode "type" chatCompletionMessageToolCallTypeDecoder 
        |> decode "function" chatCompletionMessageToolCallFunctionDecoder 


chatCompletionMessageToolCallTypeDecoder : Json.Decode.Decoder ChatCompletionMessageToolCallType
chatCompletionMessageToolCallTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "function" ->
                        Json.Decode.succeed ChatCompletionMessageToolCallTypeFunction

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



chatCompletionMessageToolCallChunkDecoder : Json.Decode.Decoder ChatCompletionMessageToolCallChunk
chatCompletionMessageToolCallChunkDecoder =
    Json.Decode.succeed ChatCompletionMessageToolCallChunk
        |> decode "index" Json.Decode.int 
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "type" chatCompletionMessageToolCallChunkTypeDecoder Nothing
        |> maybeDecode "function" chatCompletionMessageToolCallChunkFunctionDecoder Nothing


chatCompletionMessageToolCallChunkTypeDecoder : Json.Decode.Decoder ChatCompletionMessageToolCallChunkType
chatCompletionMessageToolCallChunkTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "function" ->
                        Json.Decode.succeed ChatCompletionMessageToolCallChunkTypeFunction

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



chatCompletionMessageToolCallChunkFunctionDecoder : Json.Decode.Decoder ChatCompletionMessageToolCallChunkFunction
chatCompletionMessageToolCallChunkFunctionDecoder =
    Json.Decode.succeed ChatCompletionMessageToolCallChunkFunction
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "arguments" Json.Decode.string Nothing


chatCompletionMessageToolCallFunctionDecoder : Json.Decode.Decoder ChatCompletionMessageToolCallFunction
chatCompletionMessageToolCallFunctionDecoder =
    Json.Decode.succeed ChatCompletionMessageToolCallFunction
        |> decode "name" Json.Decode.string 
        |> decode "arguments" Json.Decode.string 


chatCompletionNamedToolChoiceDecoder : Json.Decode.Decoder ChatCompletionNamedToolChoice
chatCompletionNamedToolChoiceDecoder =
    Json.Decode.succeed ChatCompletionNamedToolChoice
        |> decode "type" chatCompletionNamedToolChoiceTypeDecoder 
        |> decode "function" chatCompletionNamedToolChoiceFunctionDecoder 


chatCompletionNamedToolChoiceTypeDecoder : Json.Decode.Decoder ChatCompletionNamedToolChoiceType
chatCompletionNamedToolChoiceTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "function" ->
                        Json.Decode.succeed ChatCompletionNamedToolChoiceTypeFunction

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



chatCompletionNamedToolChoiceFunctionDecoder : Json.Decode.Decoder ChatCompletionNamedToolChoiceFunction
chatCompletionNamedToolChoiceFunctionDecoder =
    Json.Decode.succeed ChatCompletionNamedToolChoiceFunction
        |> decode "name" Json.Decode.string 


chatCompletionRequestAssistantMessageDecoder : Json.Decode.Decoder ChatCompletionRequestAssistantMessage
chatCompletionRequestAssistantMessageDecoder =
    Json.Decode.succeed ChatCompletionRequestAssistantMessage
        |> maybeDecodeNullable "content" Json.Decode.string Nothing
        |> decode "role" chatCompletionRequestAssistantMessageRoleDecoder 
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "tool_calls" (Json.Decode.list chatCompletionMessageToolCallDecoder) Nothing
        |> maybeDecode "function_call" chatCompletionRequestAssistantMessageFunctionCallDecoder Nothing


chatCompletionRequestAssistantMessageRoleDecoder : Json.Decode.Decoder ChatCompletionRequestAssistantMessageRole
chatCompletionRequestAssistantMessageRoleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "assistant" ->
                        Json.Decode.succeed ChatCompletionRequestAssistantMessageRoleAssistant

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



chatCompletionRequestAssistantMessageFunctionCallDecoder : Json.Decode.Decoder ChatCompletionRequestAssistantMessageFunctionCall
chatCompletionRequestAssistantMessageFunctionCallDecoder =
    Json.Decode.succeed ChatCompletionRequestAssistantMessageFunctionCall
        |> decode "arguments" Json.Decode.string 
        |> decode "name" Json.Decode.string 


chatCompletionRequestFunctionMessageDecoder : Json.Decode.Decoder ChatCompletionRequestFunctionMessage
chatCompletionRequestFunctionMessageDecoder =
    Json.Decode.succeed ChatCompletionRequestFunctionMessage
        |> decode "role" chatCompletionRequestFunctionMessageRoleDecoder 
        |> decodeNullable "content" Json.Decode.string 
        |> decode "name" Json.Decode.string 


chatCompletionRequestFunctionMessageRoleDecoder : Json.Decode.Decoder ChatCompletionRequestFunctionMessageRole
chatCompletionRequestFunctionMessageRoleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "function" ->
                        Json.Decode.succeed ChatCompletionRequestFunctionMessageRoleFunction

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



chatCompletionRequestMessageDecoder : Json.Decode.Decoder ChatCompletionRequestMessage
chatCompletionRequestMessageDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map ChatCompletionRequestMessageChatCompletionRequestAssistantMessage chatCompletionRequestAssistantMessageDecoder
        , Json.Decode.map ChatCompletionRequestMessageChatCompletionRequestFunctionMessage chatCompletionRequestFunctionMessageDecoder
        , Json.Decode.map ChatCompletionRequestMessageChatCompletionRequestSystemMessage chatCompletionRequestSystemMessageDecoder
        , Json.Decode.map ChatCompletionRequestMessageChatCompletionRequestToolMessage chatCompletionRequestToolMessageDecoder
        , Json.Decode.map ChatCompletionRequestMessageChatCompletionRequestUserMessage chatCompletionRequestUserMessageDecoder
        ]



chatCompletionRequestMessageContentPartDecoder : Json.Decode.Decoder ChatCompletionRequestMessageContentPart
chatCompletionRequestMessageContentPartDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map ChatCompletionRequestMessageContentPartChatCompletionRequestMessageContentPartImage chatCompletionRequestMessageContentPartImageDecoder
        , Json.Decode.map ChatCompletionRequestMessageContentPartChatCompletionRequestMessageContentPartText chatCompletionRequestMessageContentPartTextDecoder
        ]



chatCompletionRequestMessageContentPartImageDecoder : Json.Decode.Decoder ChatCompletionRequestMessageContentPartImage
chatCompletionRequestMessageContentPartImageDecoder =
    Json.Decode.succeed ChatCompletionRequestMessageContentPartImage
        |> decode "type" chatCompletionRequestMessageContentPartImageTypeDecoder 
        |> decode "image_url" chatCompletionRequestMessageContentPartImageImageUrlDecoder 


chatCompletionRequestMessageContentPartImageTypeDecoder : Json.Decode.Decoder ChatCompletionRequestMessageContentPartImageType
chatCompletionRequestMessageContentPartImageTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "image_url" ->
                        Json.Decode.succeed ChatCompletionRequestMessageContentPartImageTypeImageUrl

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



chatCompletionRequestMessageContentPartImageImageUrlDecoder : Json.Decode.Decoder ChatCompletionRequestMessageContentPartImageImageUrl
chatCompletionRequestMessageContentPartImageImageUrlDecoder =
    Json.Decode.succeed ChatCompletionRequestMessageContentPartImageImageUrl
        |> decode "url" Json.Decode.string 
        |> maybeDecode "detail" chatCompletionRequestMessageContentPartImageImageUrlDetailDecoder (Just "auto")


chatCompletionRequestMessageContentPartImageImageUrlDetailDecoder : Json.Decode.Decoder ChatCompletionRequestMessageContentPartImageImageUrlDetail
chatCompletionRequestMessageContentPartImageImageUrlDetailDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "auto" ->
                        Json.Decode.succeed ChatCompletionRequestMessageContentPartImageImageUrlDetailAuto

                    "low" ->
                        Json.Decode.succeed ChatCompletionRequestMessageContentPartImageImageUrlDetailLow

                    "high" ->
                        Json.Decode.succeed ChatCompletionRequestMessageContentPartImageImageUrlDetailHigh

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



chatCompletionRequestMessageContentPartTextDecoder : Json.Decode.Decoder ChatCompletionRequestMessageContentPartText
chatCompletionRequestMessageContentPartTextDecoder =
    Json.Decode.succeed ChatCompletionRequestMessageContentPartText
        |> decode "type" chatCompletionRequestMessageContentPartTextTypeDecoder 
        |> decode "text" Json.Decode.string 


chatCompletionRequestMessageContentPartTextTypeDecoder : Json.Decode.Decoder ChatCompletionRequestMessageContentPartTextType
chatCompletionRequestMessageContentPartTextTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "text" ->
                        Json.Decode.succeed ChatCompletionRequestMessageContentPartTextTypeText

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



chatCompletionRequestSystemMessageDecoder : Json.Decode.Decoder ChatCompletionRequestSystemMessage
chatCompletionRequestSystemMessageDecoder =
    Json.Decode.succeed ChatCompletionRequestSystemMessage
        |> decode "content" Json.Decode.string 
        |> decode "role" chatCompletionRequestSystemMessageRoleDecoder 
        |> maybeDecode "name" Json.Decode.string Nothing


chatCompletionRequestSystemMessageRoleDecoder : Json.Decode.Decoder ChatCompletionRequestSystemMessageRole
chatCompletionRequestSystemMessageRoleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "system" ->
                        Json.Decode.succeed ChatCompletionRequestSystemMessageRoleSystem

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



chatCompletionRequestToolMessageDecoder : Json.Decode.Decoder ChatCompletionRequestToolMessage
chatCompletionRequestToolMessageDecoder =
    Json.Decode.succeed ChatCompletionRequestToolMessage
        |> decode "role" chatCompletionRequestToolMessageRoleDecoder 
        |> decode "content" Json.Decode.string 
        |> decode "tool_call_id" Json.Decode.string 


chatCompletionRequestToolMessageRoleDecoder : Json.Decode.Decoder ChatCompletionRequestToolMessageRole
chatCompletionRequestToolMessageRoleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "tool" ->
                        Json.Decode.succeed ChatCompletionRequestToolMessageRoleTool

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



chatCompletionRequestUserMessageDecoder : Json.Decode.Decoder ChatCompletionRequestUserMessage
chatCompletionRequestUserMessageDecoder =
    Json.Decode.succeed ChatCompletionRequestUserMessage
        |> decode "content" chatCompletionRequestUserMessageContentDecoder 
        |> decode "role" chatCompletionRequestUserMessageRoleDecoder 
        |> maybeDecode "name" Json.Decode.string Nothing


chatCompletionRequestUserMessageRoleDecoder : Json.Decode.Decoder ChatCompletionRequestUserMessageRole
chatCompletionRequestUserMessageRoleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "user" ->
                        Json.Decode.succeed ChatCompletionRequestUserMessageRoleUser

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



chatCompletionRequestUserMessageContentDecoder : Json.Decode.Decoder ChatCompletionRequestUserMessageContent
chatCompletionRequestUserMessageContentDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map ChatCompletionRequestUserMessageContentChatCompletionRequestMessageContentPart chatCompletionRequestMessageContentPartDecoder
        , Json.Decode.map ChatCompletionRequestUserMessageContentString stringDecoder
        ]



chatCompletionResponseMessageDecoder : Json.Decode.Decoder ChatCompletionResponseMessage
chatCompletionResponseMessageDecoder =
    Json.Decode.succeed ChatCompletionResponseMessage
        |> decodeNullable "content" Json.Decode.string 
        |> maybeDecode "tool_calls" (Json.Decode.list chatCompletionMessageToolCallDecoder) Nothing
        |> decode "role" chatCompletionResponseMessageRoleDecoder 
        |> maybeDecode "function_call" chatCompletionRequestAssistantMessageFunctionCallDecoder Nothing


chatCompletionResponseMessageRoleDecoder : Json.Decode.Decoder ChatCompletionResponseMessageRole
chatCompletionResponseMessageRoleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "assistant" ->
                        Json.Decode.succeed ChatCompletionResponseMessageRoleAssistant

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



chatCompletionRoleDecoder : Json.Decode.Decoder ChatCompletionRole
chatCompletionRoleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "system" ->
                        Json.Decode.succeed ChatCompletionRoleSystem

                    "user" ->
                        Json.Decode.succeed ChatCompletionRoleUser

                    "assistant" ->
                        Json.Decode.succeed ChatCompletionRoleAssistant

                    "tool" ->
                        Json.Decode.succeed ChatCompletionRoleTool

                    "function" ->
                        Json.Decode.succeed ChatCompletionRoleFunction

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


chatCompletionStreamResponseDeltaDecoder : Json.Decode.Decoder ChatCompletionStreamResponseDelta
chatCompletionStreamResponseDeltaDecoder =
    Json.Decode.succeed ChatCompletionStreamResponseDelta
        |> maybeDecodeNullable "content" Json.Decode.string Nothing
        |> maybeDecode "function_call" chatCompletionStreamResponseDeltaFunctionCallDecoder Nothing
        |> maybeDecode "tool_calls" (Json.Decode.list chatCompletionMessageToolCallChunkDecoder) Nothing
        |> maybeDecode "role" chatCompletionStreamResponseDeltaRoleDecoder Nothing


chatCompletionStreamResponseDeltaRoleDecoder : Json.Decode.Decoder ChatCompletionStreamResponseDeltaRole
chatCompletionStreamResponseDeltaRoleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "system" ->
                        Json.Decode.succeed ChatCompletionStreamResponseDeltaRoleSystem

                    "user" ->
                        Json.Decode.succeed ChatCompletionStreamResponseDeltaRoleUser

                    "assistant" ->
                        Json.Decode.succeed ChatCompletionStreamResponseDeltaRoleAssistant

                    "tool" ->
                        Json.Decode.succeed ChatCompletionStreamResponseDeltaRoleTool

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



chatCompletionStreamResponseDeltaFunctionCallDecoder : Json.Decode.Decoder ChatCompletionStreamResponseDeltaFunctionCall
chatCompletionStreamResponseDeltaFunctionCallDecoder =
    Json.Decode.succeed ChatCompletionStreamResponseDeltaFunctionCall
        |> maybeDecode "arguments" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing


chatCompletionTokenLogprobDecoder : Json.Decode.Decoder ChatCompletionTokenLogprob
chatCompletionTokenLogprobDecoder =
    Json.Decode.succeed ChatCompletionTokenLogprob
        |> decode "token" Json.Decode.string 
        |> decode "logprob" Json.Decode.float 
        |> decodeNullable "bytes" (Json.Decode.list Json.Decode.int) 
        |> decode "top_logprobs" (Json.Decode.list chatCompletionTokenLogprobTopLogprobsInnerDecoder) 


chatCompletionTokenLogprobTopLogprobsInnerDecoder : Json.Decode.Decoder ChatCompletionTokenLogprobTopLogprobsInner
chatCompletionTokenLogprobTopLogprobsInnerDecoder =
    Json.Decode.succeed ChatCompletionTokenLogprobTopLogprobsInner
        |> decode "token" Json.Decode.string 
        |> decode "logprob" Json.Decode.float 
        |> decodeNullable "bytes" (Json.Decode.list Json.Decode.int) 


chatCompletionToolDecoder : Json.Decode.Decoder ChatCompletionTool
chatCompletionToolDecoder =
    Json.Decode.succeed ChatCompletionTool
        |> decode "type" chatCompletionToolTypeDecoder 
        |> decode "function" functionObjectDecoder 


chatCompletionToolTypeDecoder : Json.Decode.Decoder ChatCompletionToolType
chatCompletionToolTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "function" ->
                        Json.Decode.succeed ChatCompletionToolTypeFunction

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



chatCompletionToolChoiceOptionDecoder : Json.Decode.Decoder ChatCompletionToolChoiceOption
chatCompletionToolChoiceOptionDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map ChatCompletionToolChoiceOptionChatCompletionNamedToolChoice chatCompletionNamedToolChoiceDecoder
        , Json.Decode.map ChatCompletionToolChoiceOptionString stringDecoder
        ]



completionUsageDecoder : Json.Decode.Decoder CompletionUsage
completionUsageDecoder =
    Json.Decode.succeed CompletionUsage
        |> decode "completion_tokens" Json.Decode.int 
        |> decode "prompt_tokens" Json.Decode.int 
        |> decode "total_tokens" Json.Decode.int 


createAssistantFileRequestDecoder : Json.Decode.Decoder CreateAssistantFileRequest
createAssistantFileRequestDecoder =
    Json.Decode.succeed CreateAssistantFileRequest
        |> decode "file_id" Json.Decode.string 


createAssistantRequestDecoder : Json.Decode.Decoder CreateAssistantRequest
createAssistantRequestDecoder =
    Json.Decode.succeed CreateAssistantRequest
        |> decode "model" createAssistantRequestModelDecoder 
        |> maybeDecodeNullable "name" Json.Decode.string Nothing
        |> maybeDecodeNullable "description" Json.Decode.string Nothing
        |> maybeDecodeNullable "instructions" Json.Decode.string Nothing
        |> maybeDecode "tools" (Json.Decode.list assistantObjectToolsInnerDecoder) Nothing
        |> maybeDecode "file_ids" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "metadata" objectDecoder Nothing


createAssistantRequestModelDecoder : Json.Decode.Decoder CreateAssistantRequestModel
createAssistantRequestModelDecoder =
    Json.Decode.succeed CreateAssistantRequestModel


createChatCompletionFunctionResponseDecoder : Json.Decode.Decoder CreateChatCompletionFunctionResponse
createChatCompletionFunctionResponseDecoder =
    Json.Decode.succeed CreateChatCompletionFunctionResponse
        |> decode "id" Json.Decode.string 
        |> decode "choices" (Json.Decode.list createChatCompletionFunctionResponseChoicesInnerDecoder) 
        |> decode "created" Json.Decode.int 
        |> decode "model" Json.Decode.string 
        |> maybeDecode "system_fingerprint" Json.Decode.string Nothing
        |> decode "object" createChatCompletionFunctionResponseObjectDecoder 
        |> maybeDecode "usage" completionUsageDecoder Nothing


createChatCompletionFunctionResponseObjectDecoder : Json.Decode.Decoder CreateChatCompletionFunctionResponseObject
createChatCompletionFunctionResponseObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "chat.completion" ->
                        Json.Decode.succeed CreateChatCompletionFunctionResponseObjectChatCompletion

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createChatCompletionFunctionResponseChoicesInnerDecoder : Json.Decode.Decoder CreateChatCompletionFunctionResponseChoicesInner
createChatCompletionFunctionResponseChoicesInnerDecoder =
    Json.Decode.succeed CreateChatCompletionFunctionResponseChoicesInner
        |> decode "finish_reason" createChatCompletionFunctionResponseChoicesInnerFinishReasonDecoder 
        |> decode "index" Json.Decode.int 
        |> decode "message" chatCompletionResponseMessageDecoder 


createChatCompletionFunctionResponseChoicesInnerFinishReasonDecoder : Json.Decode.Decoder CreateChatCompletionFunctionResponseChoicesInnerFinishReason
createChatCompletionFunctionResponseChoicesInnerFinishReasonDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "stop" ->
                        Json.Decode.succeed CreateChatCompletionFunctionResponseChoicesInnerFinishReasonStop

                    "length" ->
                        Json.Decode.succeed CreateChatCompletionFunctionResponseChoicesInnerFinishReasonLength

                    "function_call" ->
                        Json.Decode.succeed CreateChatCompletionFunctionResponseChoicesInnerFinishReasonFunctionCall

                    "content_filter" ->
                        Json.Decode.succeed CreateChatCompletionFunctionResponseChoicesInnerFinishReasonContentFilter

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createChatCompletionRequestDecoder : Json.Decode.Decoder CreateChatCompletionRequest
createChatCompletionRequestDecoder =
    Json.Decode.succeed CreateChatCompletionRequest
        |> decode "messages" (Json.Decode.list chatCompletionRequestMessageDecoder) 
        |> decode "model" createChatCompletionRequestModelDecoder 
        |> maybeDecodeNullable "frequency_penalty" Json.Decode.float (Just 0)
        |> maybeDecodeNullable "logit_bias" (Json.Decode.dict Json.Decode.int) Nothing
        |> maybeDecodeNullable "logprobs" Json.Decode.bool (Just False)
        |> maybeDecodeNullable "top_logprobs" Json.Decode.int Nothing
        |> maybeDecodeNullable "max_tokens" Json.Decode.int Nothing
        |> maybeDecodeNullable "n" Json.Decode.int (Just 1)
        |> maybeDecodeNullable "presence_penalty" Json.Decode.float (Just 0)
        |> maybeDecode "response_format" createChatCompletionRequestResponseFormatDecoder Nothing
        |> maybeDecodeNullable "seed" Json.Decode.int Nothing
        |> maybeDecode "stop" createChatCompletionRequestStopDecoder Nothing
        |> maybeDecodeNullable "stream" Json.Decode.bool (Just False)
        |> maybeDecodeNullable "temperature" Json.Decode.float (Just 1)
        |> maybeDecodeNullable "top_p" Json.Decode.float (Just 1)
        |> maybeDecode "tools" (Json.Decode.list chatCompletionToolDecoder) Nothing
        |> maybeDecode "tool_choice" chatCompletionToolChoiceOptionDecoder Nothing
        |> maybeDecode "user" Json.Decode.string Nothing
        |> maybeDecode "function_call" createChatCompletionRequestFunctionCallDecoder Nothing
        |> maybeDecode "functions" (Json.Decode.list chatCompletionFunctionsDecoder) Nothing


createChatCompletionRequestFunctionCallDecoder : Json.Decode.Decoder CreateChatCompletionRequestFunctionCall
createChatCompletionRequestFunctionCallDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateChatCompletionRequestFunctionCallChatCompletionFunctionCallOption chatCompletionFunctionCallOptionDecoder
        , Json.Decode.map CreateChatCompletionRequestFunctionCallString stringDecoder
        ]



createChatCompletionRequestModelDecoder : Json.Decode.Decoder CreateChatCompletionRequestModel
createChatCompletionRequestModelDecoder =
    Json.Decode.succeed CreateChatCompletionRequestModel


createChatCompletionRequestResponseFormatDecoder : Json.Decode.Decoder CreateChatCompletionRequestResponseFormat
createChatCompletionRequestResponseFormatDecoder =
    Json.Decode.succeed CreateChatCompletionRequestResponseFormat
        |> maybeDecode "type" createChatCompletionRequestResponseFormatTypeDecoder (Just "text")


createChatCompletionRequestResponseFormatTypeDecoder : Json.Decode.Decoder CreateChatCompletionRequestResponseFormatType
createChatCompletionRequestResponseFormatTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "text" ->
                        Json.Decode.succeed CreateChatCompletionRequestResponseFormatTypeText

                    "json_object" ->
                        Json.Decode.succeed CreateChatCompletionRequestResponseFormatTypeJsonObject

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createChatCompletionRequestStopDecoder : Json.Decode.Decoder CreateChatCompletionRequestStop
createChatCompletionRequestStopDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateChatCompletionRequestStopString stringDecoder
        ]



createChatCompletionResponseDecoder : Json.Decode.Decoder CreateChatCompletionResponse
createChatCompletionResponseDecoder =
    Json.Decode.succeed CreateChatCompletionResponse
        |> decode "id" Json.Decode.string 
        |> decode "choices" (Json.Decode.list createChatCompletionResponseChoicesInnerDecoder) 
        |> decode "created" Json.Decode.int 
        |> decode "model" Json.Decode.string 
        |> maybeDecode "system_fingerprint" Json.Decode.string Nothing
        |> decode "object" createChatCompletionResponseObjectDecoder 
        |> maybeDecode "usage" completionUsageDecoder Nothing


createChatCompletionResponseObjectDecoder : Json.Decode.Decoder CreateChatCompletionResponseObject
createChatCompletionResponseObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "chat.completion" ->
                        Json.Decode.succeed CreateChatCompletionResponseObjectChatCompletion

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createChatCompletionResponseChoicesInnerDecoder : Json.Decode.Decoder CreateChatCompletionResponseChoicesInner
createChatCompletionResponseChoicesInnerDecoder =
    Json.Decode.succeed CreateChatCompletionResponseChoicesInner
        |> decode "finish_reason" createChatCompletionResponseChoicesInnerFinishReasonDecoder 
        |> decode "index" Json.Decode.int 
        |> decode "message" chatCompletionResponseMessageDecoder 
        |> decodeNullable "logprobs" createChatCompletionResponseChoicesInnerLogprobsDecoder 


createChatCompletionResponseChoicesInnerFinishReasonDecoder : Json.Decode.Decoder CreateChatCompletionResponseChoicesInnerFinishReason
createChatCompletionResponseChoicesInnerFinishReasonDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "stop" ->
                        Json.Decode.succeed CreateChatCompletionResponseChoicesInnerFinishReasonStop

                    "length" ->
                        Json.Decode.succeed CreateChatCompletionResponseChoicesInnerFinishReasonLength

                    "tool_calls" ->
                        Json.Decode.succeed CreateChatCompletionResponseChoicesInnerFinishReasonToolCalls

                    "content_filter" ->
                        Json.Decode.succeed CreateChatCompletionResponseChoicesInnerFinishReasonContentFilter

                    "function_call" ->
                        Json.Decode.succeed CreateChatCompletionResponseChoicesInnerFinishReasonFunctionCall

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createChatCompletionResponseChoicesInnerLogprobsDecoder : Json.Decode.Decoder CreateChatCompletionResponseChoicesInnerLogprobs
createChatCompletionResponseChoicesInnerLogprobsDecoder =
    Json.Decode.succeed CreateChatCompletionResponseChoicesInnerLogprobs
        |> decodeNullable "content" (Json.Decode.list chatCompletionTokenLogprobDecoder) 


createChatCompletionStreamResponseDecoder : Json.Decode.Decoder CreateChatCompletionStreamResponse
createChatCompletionStreamResponseDecoder =
    Json.Decode.succeed CreateChatCompletionStreamResponse
        |> decode "id" Json.Decode.string 
        |> decode "choices" (Json.Decode.list createChatCompletionStreamResponseChoicesInnerDecoder) 
        |> decode "created" Json.Decode.int 
        |> decode "model" Json.Decode.string 
        |> maybeDecode "system_fingerprint" Json.Decode.string Nothing
        |> decode "object" createChatCompletionStreamResponseObjectDecoder 


createChatCompletionStreamResponseObjectDecoder : Json.Decode.Decoder CreateChatCompletionStreamResponseObject
createChatCompletionStreamResponseObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "chat.completion.chunk" ->
                        Json.Decode.succeed CreateChatCompletionStreamResponseObjectChatCompletionChunk

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createChatCompletionStreamResponseChoicesInnerDecoder : Json.Decode.Decoder CreateChatCompletionStreamResponseChoicesInner
createChatCompletionStreamResponseChoicesInnerDecoder =
    Json.Decode.succeed CreateChatCompletionStreamResponseChoicesInner
        |> decode "delta" chatCompletionStreamResponseDeltaDecoder 
        |> maybeDecodeNullable "logprobs" createChatCompletionResponseChoicesInnerLogprobsDecoder Nothing
        |> decodeNullable "finish_reason" createChatCompletionStreamResponseChoicesInnerFinishReasonDecoder 
        |> decode "index" Json.Decode.int 


createChatCompletionStreamResponseChoicesInnerFinishReasonDecoder : Json.Decode.Decoder CreateChatCompletionStreamResponseChoicesInnerFinishReason
createChatCompletionStreamResponseChoicesInnerFinishReasonDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "stop" ->
                        Json.Decode.succeed CreateChatCompletionStreamResponseChoicesInnerFinishReasonStop

                    "length" ->
                        Json.Decode.succeed CreateChatCompletionStreamResponseChoicesInnerFinishReasonLength

                    "tool_calls" ->
                        Json.Decode.succeed CreateChatCompletionStreamResponseChoicesInnerFinishReasonToolCalls

                    "content_filter" ->
                        Json.Decode.succeed CreateChatCompletionStreamResponseChoicesInnerFinishReasonContentFilter

                    "function_call" ->
                        Json.Decode.succeed CreateChatCompletionStreamResponseChoicesInnerFinishReasonFunctionCall

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createCompletionRequestDecoder : Json.Decode.Decoder CreateCompletionRequest
createCompletionRequestDecoder =
    Json.Decode.succeed CreateCompletionRequest
        |> decode "model" createCompletionRequestModelDecoder 
        |> decodeNullable "prompt" createCompletionRequestPromptDecoder 
        |> maybeDecodeNullable "best_of" Json.Decode.int (Just 1)
        |> maybeDecodeNullable "echo" Json.Decode.bool (Just False)
        |> maybeDecodeNullable "frequency_penalty" Json.Decode.float (Just 0)
        |> maybeDecodeNullable "logit_bias" (Json.Decode.dict Json.Decode.int) Nothing
        |> maybeDecodeNullable "logprobs" Json.Decode.int Nothing
        |> maybeDecodeNullable "max_tokens" Json.Decode.int (Just 16)
        |> maybeDecodeNullable "n" Json.Decode.int (Just 1)
        |> maybeDecodeNullable "presence_penalty" Json.Decode.float (Just 0)
        |> maybeDecodeNullable "seed" Json.Decode.int Nothing
        |> maybeDecodeNullable "stop" createCompletionRequestStopDecoder Nothing
        |> maybeDecodeNullable "stream" Json.Decode.bool (Just False)
        |> maybeDecodeNullable "suffix" Json.Decode.string Nothing
        |> maybeDecodeNullable "temperature" Json.Decode.float (Just 1)
        |> maybeDecodeNullable "top_p" Json.Decode.float (Just 1)
        |> maybeDecode "user" Json.Decode.string Nothing


createCompletionRequestModelDecoder : Json.Decode.Decoder CreateCompletionRequestModel
createCompletionRequestModelDecoder =
    Json.Decode.succeed CreateCompletionRequestModel


createCompletionRequestPromptDecoder : Json.Decode.Decoder CreateCompletionRequestPrompt
createCompletionRequestPromptDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateCompletionRequestPromptInt intDecoder
        , Json.Decode.map CreateCompletionRequestPromptString stringDecoder
        ]



createCompletionRequestStopDecoder : Json.Decode.Decoder CreateCompletionRequestStop
createCompletionRequestStopDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateCompletionRequestStopString stringDecoder
        ]



createCompletionResponseDecoder : Json.Decode.Decoder CreateCompletionResponse
createCompletionResponseDecoder =
    Json.Decode.succeed CreateCompletionResponse
        |> decode "id" Json.Decode.string 
        |> decode "choices" (Json.Decode.list createCompletionResponseChoicesInnerDecoder) 
        |> decode "created" Json.Decode.int 
        |> decode "model" Json.Decode.string 
        |> maybeDecode "system_fingerprint" Json.Decode.string Nothing
        |> decode "object" createCompletionResponseObjectDecoder 
        |> maybeDecode "usage" completionUsageDecoder Nothing


createCompletionResponseObjectDecoder : Json.Decode.Decoder CreateCompletionResponseObject
createCompletionResponseObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "text_completion" ->
                        Json.Decode.succeed CreateCompletionResponseObjectTextCompletion

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createCompletionResponseChoicesInnerDecoder : Json.Decode.Decoder CreateCompletionResponseChoicesInner
createCompletionResponseChoicesInnerDecoder =
    Json.Decode.succeed CreateCompletionResponseChoicesInner
        |> decode "finish_reason" createCompletionResponseChoicesInnerFinishReasonDecoder 
        |> decode "index" Json.Decode.int 
        |> decodeNullable "logprobs" createCompletionResponseChoicesInnerLogprobsDecoder 
        |> decode "text" Json.Decode.string 


createCompletionResponseChoicesInnerFinishReasonDecoder : Json.Decode.Decoder CreateCompletionResponseChoicesInnerFinishReason
createCompletionResponseChoicesInnerFinishReasonDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "stop" ->
                        Json.Decode.succeed CreateCompletionResponseChoicesInnerFinishReasonStop

                    "length" ->
                        Json.Decode.succeed CreateCompletionResponseChoicesInnerFinishReasonLength

                    "content_filter" ->
                        Json.Decode.succeed CreateCompletionResponseChoicesInnerFinishReasonContentFilter

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createCompletionResponseChoicesInnerLogprobsDecoder : Json.Decode.Decoder CreateCompletionResponseChoicesInnerLogprobs
createCompletionResponseChoicesInnerLogprobsDecoder =
    Json.Decode.succeed CreateCompletionResponseChoicesInnerLogprobs
        |> maybeDecode "text_offset" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecode "token_logprobs" (Json.Decode.list Json.Decode.float) Nothing
        |> maybeDecode "tokens" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "top_logprobs" (Json.Decode.list (Json.Decode.dict Json.Decode.float)) Nothing


createEmbeddingRequestDecoder : Json.Decode.Decoder CreateEmbeddingRequest
createEmbeddingRequestDecoder =
    Json.Decode.succeed CreateEmbeddingRequest
        |> decode "input" createEmbeddingRequestInputDecoder 
        |> decode "model" createEmbeddingRequestModelDecoder 
        |> maybeDecode "encoding_format" createEmbeddingRequestEncodingFormatDecoder (Just "float")
        |> maybeDecode "dimensions" Json.Decode.int Nothing
        |> maybeDecode "user" Json.Decode.string Nothing


createEmbeddingRequestEncodingFormatDecoder : Json.Decode.Decoder CreateEmbeddingRequestEncodingFormat
createEmbeddingRequestEncodingFormatDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "float" ->
                        Json.Decode.succeed CreateEmbeddingRequestEncodingFormatFloat

                    "base64" ->
                        Json.Decode.succeed CreateEmbeddingRequestEncodingFormatBase64

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createEmbeddingRequestInputDecoder : Json.Decode.Decoder CreateEmbeddingRequestInput
createEmbeddingRequestInputDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateEmbeddingRequestInputInt intDecoder
        , Json.Decode.map CreateEmbeddingRequestInputString stringDecoder
        ]



createEmbeddingRequestModelDecoder : Json.Decode.Decoder CreateEmbeddingRequestModel
createEmbeddingRequestModelDecoder =
    Json.Decode.succeed CreateEmbeddingRequestModel


createEmbeddingResponseDecoder : Json.Decode.Decoder CreateEmbeddingResponse
createEmbeddingResponseDecoder =
    Json.Decode.succeed CreateEmbeddingResponse
        |> decode "data" (Json.Decode.list embeddingDecoder) 
        |> decode "model" Json.Decode.string 
        |> decode "object" createEmbeddingResponseObjectDecoder 
        |> decode "usage" createEmbeddingResponseUsageDecoder 


createEmbeddingResponseObjectDecoder : Json.Decode.Decoder CreateEmbeddingResponseObject
createEmbeddingResponseObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "list" ->
                        Json.Decode.succeed CreateEmbeddingResponseObjectList

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createEmbeddingResponseUsageDecoder : Json.Decode.Decoder CreateEmbeddingResponseUsage
createEmbeddingResponseUsageDecoder =
    Json.Decode.succeed CreateEmbeddingResponseUsage
        |> decode "prompt_tokens" Json.Decode.int 
        |> decode "total_tokens" Json.Decode.int 


createFineTuningJobRequestDecoder : Json.Decode.Decoder CreateFineTuningJobRequest
createFineTuningJobRequestDecoder =
    Json.Decode.succeed CreateFineTuningJobRequest
        |> decode "model" createFineTuningJobRequestModelDecoder 
        |> decode "training_file" Json.Decode.string 
        |> maybeDecode "hyperparameters" createFineTuningJobRequestHyperparametersDecoder Nothing
        |> maybeDecodeNullable "suffix" Json.Decode.string Nothing
        |> maybeDecodeNullable "validation_file" Json.Decode.string Nothing
        |> maybeDecodeNullable "integrations" (Json.Decode.list createFineTuningJobRequestIntegrationsInnerDecoder) Nothing
        |> maybeDecodeNullable "seed" Json.Decode.int Nothing


createFineTuningJobRequestHyperparametersDecoder : Json.Decode.Decoder CreateFineTuningJobRequestHyperparameters
createFineTuningJobRequestHyperparametersDecoder =
    Json.Decode.succeed CreateFineTuningJobRequestHyperparameters
        |> maybeDecode "batch_size" createFineTuningJobRequestHyperparametersBatchSizeDecoder Nothing
        |> maybeDecode "learning_rate_multiplier" createFineTuningJobRequestHyperparametersLearningRateMultiplierDecoder Nothing
        |> maybeDecode "n_epochs" createFineTuningJobRequestHyperparametersNEpochsDecoder Nothing


createFineTuningJobRequestHyperparametersBatchSizeDecoder : Json.Decode.Decoder CreateFineTuningJobRequestHyperparametersBatchSize
createFineTuningJobRequestHyperparametersBatchSizeDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateFineTuningJobRequestHyperparametersBatchSizeInt intDecoder
        , Json.Decode.map CreateFineTuningJobRequestHyperparametersBatchSizeString stringDecoder
        ]



createFineTuningJobRequestHyperparametersLearningRateMultiplierDecoder : Json.Decode.Decoder CreateFineTuningJobRequestHyperparametersLearningRateMultiplier
createFineTuningJobRequestHyperparametersLearningRateMultiplierDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateFineTuningJobRequestHyperparametersLearningRateMultiplierFloat floatDecoder
        , Json.Decode.map CreateFineTuningJobRequestHyperparametersLearningRateMultiplierString stringDecoder
        ]



createFineTuningJobRequestHyperparametersNEpochsDecoder : Json.Decode.Decoder CreateFineTuningJobRequestHyperparametersNEpochs
createFineTuningJobRequestHyperparametersNEpochsDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateFineTuningJobRequestHyperparametersNEpochsInt intDecoder
        , Json.Decode.map CreateFineTuningJobRequestHyperparametersNEpochsString stringDecoder
        ]



createFineTuningJobRequestIntegrationsInnerDecoder : Json.Decode.Decoder CreateFineTuningJobRequestIntegrationsInner
createFineTuningJobRequestIntegrationsInnerDecoder =
    Json.Decode.succeed CreateFineTuningJobRequestIntegrationsInner
        |> decode "type" createFineTuningJobRequestIntegrationsInnerTypeDecoder 
        |> decode "wandb" createFineTuningJobRequestIntegrationsInnerWandbDecoder 


createFineTuningJobRequestIntegrationsInnerTypeDecoder : Json.Decode.Decoder CreateFineTuningJobRequestIntegrationsInnerType
createFineTuningJobRequestIntegrationsInnerTypeDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateFineTuningJobRequestIntegrationsInnerTypeString stringDecoder
        ]



createFineTuningJobRequestIntegrationsInnerWandbDecoder : Json.Decode.Decoder CreateFineTuningJobRequestIntegrationsInnerWandb
createFineTuningJobRequestIntegrationsInnerWandbDecoder =
    Json.Decode.succeed CreateFineTuningJobRequestIntegrationsInnerWandb
        |> decode "project" Json.Decode.string 
        |> maybeDecodeNullable "name" Json.Decode.string Nothing
        |> maybeDecodeNullable "entity" Json.Decode.string Nothing
        |> maybeDecode "tags" (Json.Decode.list Json.Decode.string) Nothing


createFineTuningJobRequestModelDecoder : Json.Decode.Decoder CreateFineTuningJobRequestModel
createFineTuningJobRequestModelDecoder =
    Json.Decode.succeed CreateFineTuningJobRequestModel


createImageEditRequestModelDecoder : Json.Decode.Decoder CreateImageEditRequestModel
createImageEditRequestModelDecoder =
    Json.Decode.succeed CreateImageEditRequestModel


createImageRequestDecoder : Json.Decode.Decoder CreateImageRequest
createImageRequestDecoder =
    Json.Decode.succeed CreateImageRequest
        |> decode "prompt" Json.Decode.string 
        |> maybeDecodeNullable "model" createImageRequestModelDecoder Nothing
        |> maybeDecodeNullable "n" Json.Decode.int (Just 1)
        |> maybeDecode "quality" createImageRequestQualityDecoder (Just "standard")
        |> maybeDecodeNullable "response_format" createImageRequestResponseFormatDecoder (Just "url")
        |> maybeDecodeNullable "size" createImageRequestSizeDecoder (Just "1024x1024")
        |> maybeDecodeNullable "style" createImageRequestStyleDecoder (Just "vivid")
        |> maybeDecode "user" Json.Decode.string Nothing


createImageRequestQualityDecoder : Json.Decode.Decoder CreateImageRequestQuality
createImageRequestQualityDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "standard" ->
                        Json.Decode.succeed CreateImageRequestQualityStandard

                    "hd" ->
                        Json.Decode.succeed CreateImageRequestQualityHd

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createImageRequestResponseFormatDecoder : Json.Decode.Decoder CreateImageRequestResponseFormat
createImageRequestResponseFormatDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "url" ->
                        Json.Decode.succeed CreateImageRequestResponseFormatUrl

                    "b64_json" ->
                        Json.Decode.succeed CreateImageRequestResponseFormatB64Json

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createImageRequestSizeDecoder : Json.Decode.Decoder CreateImageRequestSize
createImageRequestSizeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "256x256" ->
                        Json.Decode.succeed CreateImageRequestSize256x256

                    "512x512" ->
                        Json.Decode.succeed CreateImageRequestSize512x512

                    "1024x1024" ->
                        Json.Decode.succeed CreateImageRequestSize1024x1024

                    "1792x1024" ->
                        Json.Decode.succeed CreateImageRequestSize1792x1024

                    "1024x1792" ->
                        Json.Decode.succeed CreateImageRequestSize1024x1792

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createImageRequestStyleDecoder : Json.Decode.Decoder CreateImageRequestStyle
createImageRequestStyleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "vivid" ->
                        Json.Decode.succeed CreateImageRequestStyleVivid

                    "natural" ->
                        Json.Decode.succeed CreateImageRequestStyleNatural

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createImageRequestModelDecoder : Json.Decode.Decoder CreateImageRequestModel
createImageRequestModelDecoder =
    Json.Decode.succeed CreateImageRequestModel


createMessageRequestDecoder : Json.Decode.Decoder CreateMessageRequest
createMessageRequestDecoder =
    Json.Decode.succeed CreateMessageRequest
        |> decode "role" createMessageRequestRoleDecoder 
        |> decode "content" Json.Decode.string 
        |> maybeDecode "file_ids" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "metadata" objectDecoder Nothing


createMessageRequestRoleDecoder : Json.Decode.Decoder CreateMessageRequestRole
createMessageRequestRoleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "user" ->
                        Json.Decode.succeed CreateMessageRequestRoleUser

                    "assistant" ->
                        Json.Decode.succeed CreateMessageRequestRoleAssistant

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createModerationRequestDecoder : Json.Decode.Decoder CreateModerationRequest
createModerationRequestDecoder =
    Json.Decode.succeed CreateModerationRequest
        |> decode "input" createModerationRequestInputDecoder 
        |> maybeDecode "model" createModerationRequestModelDecoder Nothing


createModerationRequestInputDecoder : Json.Decode.Decoder CreateModerationRequestInput
createModerationRequestInputDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateModerationRequestInputString stringDecoder
        ]



createModerationRequestModelDecoder : Json.Decode.Decoder CreateModerationRequestModel
createModerationRequestModelDecoder =
    Json.Decode.succeed CreateModerationRequestModel


createModerationResponseDecoder : Json.Decode.Decoder CreateModerationResponse
createModerationResponseDecoder =
    Json.Decode.succeed CreateModerationResponse
        |> decode "id" Json.Decode.string 
        |> decode "model" Json.Decode.string 
        |> decode "results" (Json.Decode.list createModerationResponseResultsInnerDecoder) 


createModerationResponseResultsInnerDecoder : Json.Decode.Decoder CreateModerationResponseResultsInner
createModerationResponseResultsInnerDecoder =
    Json.Decode.succeed CreateModerationResponseResultsInner
        |> decode "flagged" Json.Decode.bool 
        |> decode "categories" createModerationResponseResultsInnerCategoriesDecoder 
        |> decode "category_scores" createModerationResponseResultsInnerCategoryScoresDecoder 


createModerationResponseResultsInnerCategoriesDecoder : Json.Decode.Decoder CreateModerationResponseResultsInnerCategories
createModerationResponseResultsInnerCategoriesDecoder =
    Json.Decode.succeed CreateModerationResponseResultsInnerCategories
        |> decode "hate" Json.Decode.bool 
        |> decode "hate/threatening" Json.Decode.bool 
        |> decode "harassment" Json.Decode.bool 
        |> decode "harassment/threatening" Json.Decode.bool 
        |> decode "self-harm" Json.Decode.bool 
        |> decode "self-harm/intent" Json.Decode.bool 
        |> decode "self-harm/instructions" Json.Decode.bool 
        |> decode "sexual" Json.Decode.bool 
        |> decode "sexual/minors" Json.Decode.bool 
        |> decode "violence" Json.Decode.bool 
        |> decode "violence/graphic" Json.Decode.bool 


createModerationResponseResultsInnerCategoryScoresDecoder : Json.Decode.Decoder CreateModerationResponseResultsInnerCategoryScores
createModerationResponseResultsInnerCategoryScoresDecoder =
    Json.Decode.succeed CreateModerationResponseResultsInnerCategoryScores
        |> decode "hate" Json.Decode.float 
        |> decode "hate/threatening" Json.Decode.float 
        |> decode "harassment" Json.Decode.float 
        |> decode "harassment/threatening" Json.Decode.float 
        |> decode "self-harm" Json.Decode.float 
        |> decode "self-harm/intent" Json.Decode.float 
        |> decode "self-harm/instructions" Json.Decode.float 
        |> decode "sexual" Json.Decode.float 
        |> decode "sexual/minors" Json.Decode.float 
        |> decode "violence" Json.Decode.float 
        |> decode "violence/graphic" Json.Decode.float 


createRunRequestDecoder : Json.Decode.Decoder CreateRunRequest
createRunRequestDecoder =
    Json.Decode.succeed CreateRunRequest
        |> decode "assistant_id" Json.Decode.string 
        |> maybeDecodeNullable "model" createRunRequestModelDecoder Nothing
        |> maybeDecodeNullable "instructions" Json.Decode.string Nothing
        |> maybeDecodeNullable "additional_instructions" Json.Decode.string Nothing
        |> maybeDecodeNullable "additional_messages" (Json.Decode.list createMessageRequestDecoder) Nothing
        |> maybeDecodeNullable "tools" (Json.Decode.list assistantObjectToolsInnerDecoder) Nothing
        |> maybeDecodeNullable "metadata" objectDecoder Nothing
        |> maybeDecodeNullable "temperature" Json.Decode.float (Just 1)
        |> maybeDecodeNullable "stream" Json.Decode.bool Nothing
        |> maybeDecodeNullable "max_prompt_tokens" Json.Decode.int Nothing
        |> maybeDecodeNullable "max_completion_tokens" Json.Decode.int Nothing
        |> maybeDecode "truncation_strategy" truncationObjectDecoder Nothing
        |> maybeDecode "tool_choice" assistantsApiToolChoiceOptionDecoder Nothing
        |> maybeDecode "response_format" assistantsApiResponseFormatOptionDecoder Nothing


createRunRequestModelDecoder : Json.Decode.Decoder CreateRunRequestModel
createRunRequestModelDecoder =
    Json.Decode.succeed CreateRunRequestModel


createSpeechRequestDecoder : Json.Decode.Decoder CreateSpeechRequest
createSpeechRequestDecoder =
    Json.Decode.succeed CreateSpeechRequest
        |> decode "model" createSpeechRequestModelDecoder 
        |> decode "input" Json.Decode.string 
        |> decode "voice" createSpeechRequestVoiceDecoder 
        |> maybeDecode "response_format" createSpeechRequestResponseFormatDecoder (Just "mp3")
        |> maybeDecode "speed" Json.Decode.float (Just 1.0)


createSpeechRequestVoiceDecoder : Json.Decode.Decoder CreateSpeechRequestVoice
createSpeechRequestVoiceDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "alloy" ->
                        Json.Decode.succeed CreateSpeechRequestVoiceAlloy

                    "echo" ->
                        Json.Decode.succeed CreateSpeechRequestVoiceEcho

                    "fable" ->
                        Json.Decode.succeed CreateSpeechRequestVoiceFable

                    "onyx" ->
                        Json.Decode.succeed CreateSpeechRequestVoiceOnyx

                    "nova" ->
                        Json.Decode.succeed CreateSpeechRequestVoiceNova

                    "shimmer" ->
                        Json.Decode.succeed CreateSpeechRequestVoiceShimmer

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createSpeechRequestResponseFormatDecoder : Json.Decode.Decoder CreateSpeechRequestResponseFormat
createSpeechRequestResponseFormatDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "mp3" ->
                        Json.Decode.succeed CreateSpeechRequestResponseFormatMp3

                    "opus" ->
                        Json.Decode.succeed CreateSpeechRequestResponseFormatOpus

                    "aac" ->
                        Json.Decode.succeed CreateSpeechRequestResponseFormatAac

                    "flac" ->
                        Json.Decode.succeed CreateSpeechRequestResponseFormatFlac

                    "wav" ->
                        Json.Decode.succeed CreateSpeechRequestResponseFormatWav

                    "pcm" ->
                        Json.Decode.succeed CreateSpeechRequestResponseFormatPcm

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



createSpeechRequestModelDecoder : Json.Decode.Decoder CreateSpeechRequestModel
createSpeechRequestModelDecoder =
    Json.Decode.succeed CreateSpeechRequestModel


createThreadAndRunRequestDecoder : Json.Decode.Decoder CreateThreadAndRunRequest
createThreadAndRunRequestDecoder =
    Json.Decode.succeed CreateThreadAndRunRequest
        |> decode "assistant_id" Json.Decode.string 
        |> maybeDecode "thread" createThreadRequestDecoder Nothing
        |> maybeDecodeNullable "model" createRunRequestModelDecoder Nothing
        |> maybeDecodeNullable "instructions" Json.Decode.string Nothing
        |> maybeDecodeNullable "tools" (Json.Decode.list createThreadAndRunRequestToolsInnerDecoder) Nothing
        |> maybeDecodeNullable "metadata" objectDecoder Nothing
        |> maybeDecodeNullable "temperature" Json.Decode.float (Just 1)
        |> maybeDecodeNullable "stream" Json.Decode.bool Nothing
        |> maybeDecodeNullable "max_prompt_tokens" Json.Decode.int Nothing
        |> maybeDecodeNullable "max_completion_tokens" Json.Decode.int Nothing
        |> maybeDecode "truncation_strategy" truncationObjectDecoder Nothing
        |> maybeDecode "tool_choice" assistantsApiToolChoiceOptionDecoder Nothing
        |> maybeDecode "response_format" assistantsApiResponseFormatOptionDecoder Nothing


createThreadAndRunRequestToolsInnerDecoder : Json.Decode.Decoder CreateThreadAndRunRequestToolsInner
createThreadAndRunRequestToolsInnerDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateThreadAndRunRequestToolsInnerAssistantToolsCode assistantToolsCodeDecoder
        , Json.Decode.map CreateThreadAndRunRequestToolsInnerAssistantToolsFunction assistantToolsFunctionDecoder
        , Json.Decode.map CreateThreadAndRunRequestToolsInnerAssistantToolsRetrieval assistantToolsRetrievalDecoder
        ]



createThreadRequestDecoder : Json.Decode.Decoder CreateThreadRequest
createThreadRequestDecoder =
    Json.Decode.succeed CreateThreadRequest
        |> maybeDecode "messages" (Json.Decode.list createMessageRequestDecoder) Nothing
        |> maybeDecodeNullable "metadata" objectDecoder Nothing


createTranscription200ResponseDecoder : Json.Decode.Decoder CreateTranscription200Response
createTranscription200ResponseDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateTranscription200ResponseCreateTranscriptionResponseJson createTranscriptionResponseJsonDecoder
        , Json.Decode.map CreateTranscription200ResponseCreateTranscriptionResponseVerboseJson createTranscriptionResponseVerboseJsonDecoder
        ]



createTranscriptionRequestModelDecoder : Json.Decode.Decoder CreateTranscriptionRequestModel
createTranscriptionRequestModelDecoder =
    Json.Decode.succeed CreateTranscriptionRequestModel


createTranscriptionResponseJsonDecoder : Json.Decode.Decoder CreateTranscriptionResponseJson
createTranscriptionResponseJsonDecoder =
    Json.Decode.succeed CreateTranscriptionResponseJson
        |> decode "text" Json.Decode.string 


createTranscriptionResponseVerboseJsonDecoder : Json.Decode.Decoder CreateTranscriptionResponseVerboseJson
createTranscriptionResponseVerboseJsonDecoder =
    Json.Decode.succeed CreateTranscriptionResponseVerboseJson
        |> decode "language" Json.Decode.string 
        |> decode "duration" Json.Decode.string 
        |> decode "text" Json.Decode.string 
        |> maybeDecode "words" (Json.Decode.list transcriptionWordDecoder) Nothing
        |> maybeDecode "segments" (Json.Decode.list transcriptionSegmentDecoder) Nothing


createTranslation200ResponseDecoder : Json.Decode.Decoder CreateTranslation200Response
createTranslation200ResponseDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map CreateTranslation200ResponseCreateTranslationResponseJson createTranslationResponseJsonDecoder
        , Json.Decode.map CreateTranslation200ResponseCreateTranslationResponseVerboseJson createTranslationResponseVerboseJsonDecoder
        ]



createTranslationResponseJsonDecoder : Json.Decode.Decoder CreateTranslationResponseJson
createTranslationResponseJsonDecoder =
    Json.Decode.succeed CreateTranslationResponseJson
        |> decode "text" Json.Decode.string 


createTranslationResponseVerboseJsonDecoder : Json.Decode.Decoder CreateTranslationResponseVerboseJson
createTranslationResponseVerboseJsonDecoder =
    Json.Decode.succeed CreateTranslationResponseVerboseJson
        |> decode "language" Json.Decode.string 
        |> decode "duration" Json.Decode.string 
        |> decode "text" Json.Decode.string 
        |> maybeDecode "segments" (Json.Decode.list transcriptionSegmentDecoder) Nothing


deleteAssistantFileResponseDecoder : Json.Decode.Decoder DeleteAssistantFileResponse
deleteAssistantFileResponseDecoder =
    Json.Decode.succeed DeleteAssistantFileResponse
        |> decode "id" Json.Decode.string 
        |> decode "deleted" Json.Decode.bool 
        |> decode "object" deleteAssistantFileResponseObjectDecoder 


deleteAssistantFileResponseObjectDecoder : Json.Decode.Decoder DeleteAssistantFileResponseObject
deleteAssistantFileResponseObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "assistant.file.deleted" ->
                        Json.Decode.succeed DeleteAssistantFileResponseObjectAssistantFileDeleted

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



deleteAssistantResponseDecoder : Json.Decode.Decoder DeleteAssistantResponse
deleteAssistantResponseDecoder =
    Json.Decode.succeed DeleteAssistantResponse
        |> decode "id" Json.Decode.string 
        |> decode "deleted" Json.Decode.bool 
        |> decode "object" deleteAssistantResponseObjectDecoder 


deleteAssistantResponseObjectDecoder : Json.Decode.Decoder DeleteAssistantResponseObject
deleteAssistantResponseObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "assistant.deleted" ->
                        Json.Decode.succeed DeleteAssistantResponseObjectAssistantDeleted

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



deleteFileResponseDecoder : Json.Decode.Decoder DeleteFileResponse
deleteFileResponseDecoder =
    Json.Decode.succeed DeleteFileResponse
        |> decode "id" Json.Decode.string 
        |> decode "object" deleteFileResponseObjectDecoder 
        |> decode "deleted" Json.Decode.bool 


deleteFileResponseObjectDecoder : Json.Decode.Decoder DeleteFileResponseObject
deleteFileResponseObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "file" ->
                        Json.Decode.succeed DeleteFileResponseObjectFile

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



deleteMessageResponseDecoder : Json.Decode.Decoder DeleteMessageResponse
deleteMessageResponseDecoder =
    Json.Decode.succeed DeleteMessageResponse
        |> decode "id" Json.Decode.string 
        |> decode "deleted" Json.Decode.bool 
        |> decode "object" deleteMessageResponseObjectDecoder 


deleteMessageResponseObjectDecoder : Json.Decode.Decoder DeleteMessageResponseObject
deleteMessageResponseObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.message.deleted" ->
                        Json.Decode.succeed DeleteMessageResponseObjectThreadMessageDeleted

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



deleteModelResponseDecoder : Json.Decode.Decoder DeleteModelResponse
deleteModelResponseDecoder =
    Json.Decode.succeed DeleteModelResponse
        |> decode "id" Json.Decode.string 
        |> decode "deleted" Json.Decode.bool 
        |> decode "object" Json.Decode.string 


deleteThreadResponseDecoder : Json.Decode.Decoder DeleteThreadResponse
deleteThreadResponseDecoder =
    Json.Decode.succeed DeleteThreadResponse
        |> decode "id" Json.Decode.string 
        |> decode "deleted" Json.Decode.bool 
        |> decode "object" deleteThreadResponseObjectDecoder 


deleteThreadResponseObjectDecoder : Json.Decode.Decoder DeleteThreadResponseObject
deleteThreadResponseObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.deleted" ->
                        Json.Decode.succeed DeleteThreadResponseObjectThreadDeleted

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



doneEventDecoder : Json.Decode.Decoder DoneEvent
doneEventDecoder =
    Json.Decode.succeed DoneEvent
        |> decode "event" doneEventEventDecoder 
        |> decode "data" doneEventDataDecoder 


doneEventEventDecoder : Json.Decode.Decoder DoneEventEvent
doneEventEventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "done" ->
                        Json.Decode.succeed DoneEventEventDone

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



doneEventDataDecoder : Json.Decode.Decoder DoneEventData
doneEventDataDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "[DONE]" ->
                        Json.Decode.succeed DoneEventData[DONE]

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



embeddingDecoder : Json.Decode.Decoder Embedding
embeddingDecoder =
    Json.Decode.succeed Embedding
        |> decode "index" Json.Decode.int 
        |> decode "embedding" (Json.Decode.list Json.Decode.float) 
        |> decode "object" embeddingObjectDecoder 


embeddingObjectDecoder : Json.Decode.Decoder EmbeddingObject
embeddingObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "embedding" ->
                        Json.Decode.succeed EmbeddingObjectEmbedding

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



errorDecoder : Json.Decode.Decoder Error
errorDecoder =
    Json.Decode.succeed Error
        |> decodeNullable "code" Json.Decode.string 
        |> decode "message" Json.Decode.string 
        |> decodeNullable "param" Json.Decode.string 
        |> decode "type" Json.Decode.string 


errorEventDecoder : Json.Decode.Decoder ErrorEvent
errorEventDecoder =
    Json.Decode.succeed ErrorEvent
        |> decode "event" errorEventEventDecoder 
        |> decode "data" errorDecoder 


errorEventEventDecoder : Json.Decode.Decoder ErrorEventEvent
errorEventEventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "error" ->
                        Json.Decode.succeed ErrorEventEventError

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



errorResponseDecoder : Json.Decode.Decoder ErrorResponse
errorResponseDecoder =
    Json.Decode.succeed ErrorResponse
        |> decode "error" errorDecoder 


fineTuningIntegrationDecoder : Json.Decode.Decoder FineTuningIntegration
fineTuningIntegrationDecoder =
    Json.Decode.succeed FineTuningIntegration
        |> decode "type" fineTuningIntegrationTypeDecoder 
        |> decode "wandb" createFineTuningJobRequestIntegrationsInnerWandbDecoder 


fineTuningIntegrationTypeDecoder : Json.Decode.Decoder FineTuningIntegrationType
fineTuningIntegrationTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "wandb" ->
                        Json.Decode.succeed FineTuningIntegrationTypeWandb

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



fineTuningJobDecoder : Json.Decode.Decoder FineTuningJob
fineTuningJobDecoder =
    Json.Decode.succeed FineTuningJob
        |> decode "id" Json.Decode.string 
        |> decode "created_at" Json.Decode.int 
        |> decodeNullable "error" fineTuningJobErrorDecoder 
        |> decodeNullable "fine_tuned_model" Json.Decode.string 
        |> decodeNullable "finished_at" Json.Decode.int 
        |> decode "hyperparameters" fineTuningJobHyperparametersDecoder 
        |> decode "model" Json.Decode.string 
        |> decode "object" fineTuningJobObjectDecoder 
        |> decode "organization_id" Json.Decode.string 
        |> decode "result_files" (Json.Decode.list Json.Decode.string) 
        |> decode "status" fineTuningJobStatusDecoder 
        |> decodeNullable "trained_tokens" Json.Decode.int 
        |> decode "training_file" Json.Decode.string 
        |> decodeNullable "validation_file" Json.Decode.string 
        |> maybeDecodeNullable "integrations" (Json.Decode.list fineTuningJobIntegrationsInnerDecoder) Nothing
        |> decode "seed" Json.Decode.int 


fineTuningJobObjectDecoder : Json.Decode.Decoder FineTuningJobObject
fineTuningJobObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "fine_tuning.job" ->
                        Json.Decode.succeed FineTuningJobObjectFineTuningJob

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



fineTuningJobStatusDecoder : Json.Decode.Decoder FineTuningJobStatus
fineTuningJobStatusDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "validating_files" ->
                        Json.Decode.succeed FineTuningJobStatusValidatingFiles

                    "queued" ->
                        Json.Decode.succeed FineTuningJobStatusQueued

                    "running" ->
                        Json.Decode.succeed FineTuningJobStatusRunning

                    "succeeded" ->
                        Json.Decode.succeed FineTuningJobStatusSucceeded

                    "failed" ->
                        Json.Decode.succeed FineTuningJobStatusFailed

                    "cancelled" ->
                        Json.Decode.succeed FineTuningJobStatusCancelled

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



fineTuningJobCheckpointDecoder : Json.Decode.Decoder FineTuningJobCheckpoint
fineTuningJobCheckpointDecoder =
    Json.Decode.succeed FineTuningJobCheckpoint
        |> decode "id" Json.Decode.string 
        |> decode "created_at" Json.Decode.int 
        |> decode "fine_tuned_model_checkpoint" Json.Decode.string 
        |> decode "step_number" Json.Decode.int 
        |> decode "metrics" fineTuningJobCheckpointMetricsDecoder 
        |> decode "fine_tuning_job_id" Json.Decode.string 
        |> decode "object" fineTuningJobCheckpointObjectDecoder 


fineTuningJobCheckpointObjectDecoder : Json.Decode.Decoder FineTuningJobCheckpointObject
fineTuningJobCheckpointObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "fine_tuning.job.checkpoint" ->
                        Json.Decode.succeed FineTuningJobCheckpointObjectFineTuningJobCheckpoint

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



fineTuningJobCheckpointMetricsDecoder : Json.Decode.Decoder FineTuningJobCheckpointMetrics
fineTuningJobCheckpointMetricsDecoder =
    Json.Decode.succeed FineTuningJobCheckpointMetrics
        |> maybeDecode "step" Json.Decode.float Nothing
        |> maybeDecode "train_loss" Json.Decode.float Nothing
        |> maybeDecode "train_mean_token_accuracy" Json.Decode.float Nothing
        |> maybeDecode "valid_loss" Json.Decode.float Nothing
        |> maybeDecode "valid_mean_token_accuracy" Json.Decode.float Nothing
        |> maybeDecode "full_valid_loss" Json.Decode.float Nothing
        |> maybeDecode "full_valid_mean_token_accuracy" Json.Decode.float Nothing


fineTuningJobErrorDecoder : Json.Decode.Decoder FineTuningJobError
fineTuningJobErrorDecoder =
    Json.Decode.succeed FineTuningJobError
        |> decode "code" Json.Decode.string 
        |> decode "message" Json.Decode.string 
        |> decodeNullable "param" Json.Decode.string 


fineTuningJobEventDecoder : Json.Decode.Decoder FineTuningJobEvent
fineTuningJobEventDecoder =
    Json.Decode.succeed FineTuningJobEvent
        |> decode "id" Json.Decode.string 
        |> decode "created_at" Json.Decode.int 
        |> decode "level" fineTuningJobEventLevelDecoder 
        |> decode "message" Json.Decode.string 
        |> decode "object" fineTuningJobEventObjectDecoder 


fineTuningJobEventLevelDecoder : Json.Decode.Decoder FineTuningJobEventLevel
fineTuningJobEventLevelDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "info" ->
                        Json.Decode.succeed FineTuningJobEventLevelInfo

                    "warn" ->
                        Json.Decode.succeed FineTuningJobEventLevelWarn

                    "error" ->
                        Json.Decode.succeed FineTuningJobEventLevelError

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



fineTuningJobEventObjectDecoder : Json.Decode.Decoder FineTuningJobEventObject
fineTuningJobEventObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "fine_tuning.job.event" ->
                        Json.Decode.succeed FineTuningJobEventObjectFineTuningJobEvent

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



fineTuningJobHyperparametersDecoder : Json.Decode.Decoder FineTuningJobHyperparameters
fineTuningJobHyperparametersDecoder =
    Json.Decode.succeed FineTuningJobHyperparameters
        |> decode "n_epochs" fineTuningJobHyperparametersNEpochsDecoder 


fineTuningJobHyperparametersNEpochsDecoder : Json.Decode.Decoder FineTuningJobHyperparametersNEpochs
fineTuningJobHyperparametersNEpochsDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map FineTuningJobHyperparametersNEpochsInt intDecoder
        , Json.Decode.map FineTuningJobHyperparametersNEpochsString stringDecoder
        ]



fineTuningJobIntegrationsInnerDecoder : Json.Decode.Decoder FineTuningJobIntegrationsInner
fineTuningJobIntegrationsInnerDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map FineTuningJobIntegrationsInnerFineTuningIntegration fineTuningIntegrationDecoder
        ]



functionObjectDecoder : Json.Decode.Decoder FunctionObject
functionObjectDecoder =
    Json.Decode.succeed FunctionObject
        |> maybeDecode "description" Json.Decode.string Nothing
        |> decode "name" Json.Decode.string 
        |> maybeDecode "parameters" (Json.Decode.dict anyTypeDecoder) Nothing


imageDecoder : Json.Decode.Decoder Image
imageDecoder =
    Json.Decode.succeed Image
        |> maybeDecode "b64_json" Json.Decode.string Nothing
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecode "revised_prompt" Json.Decode.string Nothing


imagesResponseDecoder : Json.Decode.Decoder ImagesResponse
imagesResponseDecoder =
    Json.Decode.succeed ImagesResponse
        |> decode "created" Json.Decode.int 
        |> decode "data" (Json.Decode.list imageDecoder) 


listAssistantFilesResponseDecoder : Json.Decode.Decoder ListAssistantFilesResponse
listAssistantFilesResponseDecoder =
    Json.Decode.succeed ListAssistantFilesResponse
        |> decode "object" Json.Decode.string 
        |> decode "data" (Json.Decode.list assistantFileObjectDecoder) 
        |> decode "first_id" Json.Decode.string 
        |> decode "last_id" Json.Decode.string 
        |> decode "has_more" Json.Decode.bool 


listAssistantsResponseDecoder : Json.Decode.Decoder ListAssistantsResponse
listAssistantsResponseDecoder =
    Json.Decode.succeed ListAssistantsResponse
        |> decode "object" Json.Decode.string 
        |> decode "data" (Json.Decode.list assistantObjectDecoder) 
        |> decode "first_id" Json.Decode.string 
        |> decode "last_id" Json.Decode.string 
        |> decode "has_more" Json.Decode.bool 


listFilesResponseDecoder : Json.Decode.Decoder ListFilesResponse
listFilesResponseDecoder =
    Json.Decode.succeed ListFilesResponse
        |> decode "data" (Json.Decode.list openAIFileDecoder) 
        |> decode "object" listFilesResponseObjectDecoder 


listFilesResponseObjectDecoder : Json.Decode.Decoder ListFilesResponseObject
listFilesResponseObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "list" ->
                        Json.Decode.succeed ListFilesResponseObjectList

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



listFineTuningJobCheckpointsResponseDecoder : Json.Decode.Decoder ListFineTuningJobCheckpointsResponse
listFineTuningJobCheckpointsResponseDecoder =
    Json.Decode.succeed ListFineTuningJobCheckpointsResponse
        |> decode "data" (Json.Decode.list fineTuningJobCheckpointDecoder) 
        |> decode "object" listFineTuningJobCheckpointsResponseObjectDecoder 
        |> maybeDecodeNullable "first_id" Json.Decode.string Nothing
        |> maybeDecodeNullable "last_id" Json.Decode.string Nothing
        |> decode "has_more" Json.Decode.bool 


listFineTuningJobCheckpointsResponseObjectDecoder : Json.Decode.Decoder ListFineTuningJobCheckpointsResponseObject
listFineTuningJobCheckpointsResponseObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "list" ->
                        Json.Decode.succeed ListFineTuningJobCheckpointsResponseObjectList

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



listFineTuningJobEventsResponseDecoder : Json.Decode.Decoder ListFineTuningJobEventsResponse
listFineTuningJobEventsResponseDecoder =
    Json.Decode.succeed ListFineTuningJobEventsResponse
        |> decode "data" (Json.Decode.list fineTuningJobEventDecoder) 
        |> decode "object" listFineTuningJobEventsResponseObjectDecoder 


listFineTuningJobEventsResponseObjectDecoder : Json.Decode.Decoder ListFineTuningJobEventsResponseObject
listFineTuningJobEventsResponseObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "list" ->
                        Json.Decode.succeed ListFineTuningJobEventsResponseObjectList

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



listMessageFilesResponseDecoder : Json.Decode.Decoder ListMessageFilesResponse
listMessageFilesResponseDecoder =
    Json.Decode.succeed ListMessageFilesResponse
        |> decode "object" Json.Decode.string 
        |> decode "data" (Json.Decode.list messageFileObjectDecoder) 
        |> decode "first_id" Json.Decode.string 
        |> decode "last_id" Json.Decode.string 
        |> decode "has_more" Json.Decode.bool 


listMessagesResponseDecoder : Json.Decode.Decoder ListMessagesResponse
listMessagesResponseDecoder =
    Json.Decode.succeed ListMessagesResponse
        |> decode "object" Json.Decode.string 
        |> decode "data" (Json.Decode.list messageObjectDecoder) 
        |> decode "first_id" Json.Decode.string 
        |> decode "last_id" Json.Decode.string 
        |> decode "has_more" Json.Decode.bool 


listModelsResponseDecoder : Json.Decode.Decoder ListModelsResponse
listModelsResponseDecoder =
    Json.Decode.succeed ListModelsResponse
        |> decode "object" listModelsResponseObjectDecoder 
        |> decode "data" (Json.Decode.list modelDecoder) 


listModelsResponseObjectDecoder : Json.Decode.Decoder ListModelsResponseObject
listModelsResponseObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "list" ->
                        Json.Decode.succeed ListModelsResponseObjectList

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



listPaginatedFineTuningJobsResponseDecoder : Json.Decode.Decoder ListPaginatedFineTuningJobsResponse
listPaginatedFineTuningJobsResponseDecoder =
    Json.Decode.succeed ListPaginatedFineTuningJobsResponse
        |> decode "data" (Json.Decode.list fineTuningJobDecoder) 
        |> decode "has_more" Json.Decode.bool 
        |> decode "object" listPaginatedFineTuningJobsResponseObjectDecoder 


listPaginatedFineTuningJobsResponseObjectDecoder : Json.Decode.Decoder ListPaginatedFineTuningJobsResponseObject
listPaginatedFineTuningJobsResponseObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "list" ->
                        Json.Decode.succeed ListPaginatedFineTuningJobsResponseObjectList

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



listRunStepsResponseDecoder : Json.Decode.Decoder ListRunStepsResponse
listRunStepsResponseDecoder =
    Json.Decode.succeed ListRunStepsResponse
        |> decode "object" Json.Decode.string 
        |> decode "data" (Json.Decode.list runStepObjectDecoder) 
        |> decode "first_id" Json.Decode.string 
        |> decode "last_id" Json.Decode.string 
        |> decode "has_more" Json.Decode.bool 


listRunsResponseDecoder : Json.Decode.Decoder ListRunsResponse
listRunsResponseDecoder =
    Json.Decode.succeed ListRunsResponse
        |> decode "object" Json.Decode.string 
        |> decode "data" (Json.Decode.list runObjectDecoder) 
        |> decode "first_id" Json.Decode.string 
        |> decode "last_id" Json.Decode.string 
        |> decode "has_more" Json.Decode.bool 


listThreadsResponseDecoder : Json.Decode.Decoder ListThreadsResponse
listThreadsResponseDecoder =
    Json.Decode.succeed ListThreadsResponse
        |> decode "object" Json.Decode.string 
        |> decode "data" (Json.Decode.list threadObjectDecoder) 
        |> decode "first_id" Json.Decode.string 
        |> decode "last_id" Json.Decode.string 
        |> decode "has_more" Json.Decode.bool 


messageContentImageFileObjectDecoder : Json.Decode.Decoder MessageContentImageFileObject
messageContentImageFileObjectDecoder =
    Json.Decode.succeed MessageContentImageFileObject
        |> decode "type" messageContentImageFileObjectTypeDecoder 
        |> decode "image_file" messageContentImageFileObjectImageFileDecoder 


messageContentImageFileObjectTypeDecoder : Json.Decode.Decoder MessageContentImageFileObjectType
messageContentImageFileObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "image_file" ->
                        Json.Decode.succeed MessageContentImageFileObjectTypeImageFile

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageContentImageFileObjectImageFileDecoder : Json.Decode.Decoder MessageContentImageFileObjectImageFile
messageContentImageFileObjectImageFileDecoder =
    Json.Decode.succeed MessageContentImageFileObjectImageFile
        |> decode "file_id" Json.Decode.string 


messageContentTextAnnotationsFileCitationObjectDecoder : Json.Decode.Decoder MessageContentTextAnnotationsFileCitationObject
messageContentTextAnnotationsFileCitationObjectDecoder =
    Json.Decode.succeed MessageContentTextAnnotationsFileCitationObject
        |> decode "type" messageContentTextAnnotationsFileCitationObjectTypeDecoder 
        |> decode "text" Json.Decode.string 
        |> decode "file_citation" messageContentTextAnnotationsFileCitationObjectFileCitationDecoder 
        |> decode "start_index" Json.Decode.int 
        |> decode "end_index" Json.Decode.int 


messageContentTextAnnotationsFileCitationObjectTypeDecoder : Json.Decode.Decoder MessageContentTextAnnotationsFileCitationObjectType
messageContentTextAnnotationsFileCitationObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "file_citation" ->
                        Json.Decode.succeed MessageContentTextAnnotationsFileCitationObjectTypeFileCitation

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageContentTextAnnotationsFileCitationObjectFileCitationDecoder : Json.Decode.Decoder MessageContentTextAnnotationsFileCitationObjectFileCitation
messageContentTextAnnotationsFileCitationObjectFileCitationDecoder =
    Json.Decode.succeed MessageContentTextAnnotationsFileCitationObjectFileCitation
        |> decode "file_id" Json.Decode.string 
        |> decode "quote" Json.Decode.string 


messageContentTextAnnotationsFilePathObjectDecoder : Json.Decode.Decoder MessageContentTextAnnotationsFilePathObject
messageContentTextAnnotationsFilePathObjectDecoder =
    Json.Decode.succeed MessageContentTextAnnotationsFilePathObject
        |> decode "type" messageContentTextAnnotationsFilePathObjectTypeDecoder 
        |> decode "text" Json.Decode.string 
        |> decode "file_path" messageContentTextAnnotationsFilePathObjectFilePathDecoder 
        |> decode "start_index" Json.Decode.int 
        |> decode "end_index" Json.Decode.int 


messageContentTextAnnotationsFilePathObjectTypeDecoder : Json.Decode.Decoder MessageContentTextAnnotationsFilePathObjectType
messageContentTextAnnotationsFilePathObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "file_path" ->
                        Json.Decode.succeed MessageContentTextAnnotationsFilePathObjectTypeFilePath

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageContentTextAnnotationsFilePathObjectFilePathDecoder : Json.Decode.Decoder MessageContentTextAnnotationsFilePathObjectFilePath
messageContentTextAnnotationsFilePathObjectFilePathDecoder =
    Json.Decode.succeed MessageContentTextAnnotationsFilePathObjectFilePath
        |> decode "file_id" Json.Decode.string 


messageContentTextObjectDecoder : Json.Decode.Decoder MessageContentTextObject
messageContentTextObjectDecoder =
    Json.Decode.succeed MessageContentTextObject
        |> decode "type" messageContentTextObjectTypeDecoder 
        |> decode "text" messageContentTextObjectTextDecoder 


messageContentTextObjectTypeDecoder : Json.Decode.Decoder MessageContentTextObjectType
messageContentTextObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "text" ->
                        Json.Decode.succeed MessageContentTextObjectTypeText

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageContentTextObjectTextDecoder : Json.Decode.Decoder MessageContentTextObjectText
messageContentTextObjectTextDecoder =
    Json.Decode.succeed MessageContentTextObjectText
        |> decode "value" Json.Decode.string 
        |> decode "annotations" (Json.Decode.list messageContentTextObjectTextAnnotationsInnerDecoder) 


messageContentTextObjectTextAnnotationsInnerDecoder : Json.Decode.Decoder MessageContentTextObjectTextAnnotationsInner
messageContentTextObjectTextAnnotationsInnerDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map MessageContentTextObjectTextAnnotationsInnerMessageContentTextAnnotationsFileCitationObject messageContentTextAnnotationsFileCitationObjectDecoder
        , Json.Decode.map MessageContentTextObjectTextAnnotationsInnerMessageContentTextAnnotationsFilePathObject messageContentTextAnnotationsFilePathObjectDecoder
        ]



messageDeltaContentImageFileObjectDecoder : Json.Decode.Decoder MessageDeltaContentImageFileObject
messageDeltaContentImageFileObjectDecoder =
    Json.Decode.succeed MessageDeltaContentImageFileObject
        |> decode "index" Json.Decode.int 
        |> decode "type" messageDeltaContentImageFileObjectTypeDecoder 
        |> maybeDecode "image_file" messageDeltaContentImageFileObjectImageFileDecoder Nothing


messageDeltaContentImageFileObjectTypeDecoder : Json.Decode.Decoder MessageDeltaContentImageFileObjectType
messageDeltaContentImageFileObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "image_file" ->
                        Json.Decode.succeed MessageDeltaContentImageFileObjectTypeImageFile

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageDeltaContentImageFileObjectImageFileDecoder : Json.Decode.Decoder MessageDeltaContentImageFileObjectImageFile
messageDeltaContentImageFileObjectImageFileDecoder =
    Json.Decode.succeed MessageDeltaContentImageFileObjectImageFile
        |> maybeDecode "file_id" Json.Decode.string Nothing


messageDeltaContentTextAnnotationsFileCitationObjectDecoder : Json.Decode.Decoder MessageDeltaContentTextAnnotationsFileCitationObject
messageDeltaContentTextAnnotationsFileCitationObjectDecoder =
    Json.Decode.succeed MessageDeltaContentTextAnnotationsFileCitationObject
        |> decode "index" Json.Decode.int 
        |> decode "type" messageDeltaContentTextAnnotationsFileCitationObjectTypeDecoder 
        |> maybeDecode "text" Json.Decode.string Nothing
        |> maybeDecode "file_citation" messageDeltaContentTextAnnotationsFileCitationObjectFileCitationDecoder Nothing
        |> maybeDecode "start_index" Json.Decode.int Nothing
        |> maybeDecode "end_index" Json.Decode.int Nothing


messageDeltaContentTextAnnotationsFileCitationObjectTypeDecoder : Json.Decode.Decoder MessageDeltaContentTextAnnotationsFileCitationObjectType
messageDeltaContentTextAnnotationsFileCitationObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "file_citation" ->
                        Json.Decode.succeed MessageDeltaContentTextAnnotationsFileCitationObjectTypeFileCitation

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageDeltaContentTextAnnotationsFileCitationObjectFileCitationDecoder : Json.Decode.Decoder MessageDeltaContentTextAnnotationsFileCitationObjectFileCitation
messageDeltaContentTextAnnotationsFileCitationObjectFileCitationDecoder =
    Json.Decode.succeed MessageDeltaContentTextAnnotationsFileCitationObjectFileCitation
        |> maybeDecode "file_id" Json.Decode.string Nothing
        |> maybeDecode "quote" Json.Decode.string Nothing


messageDeltaContentTextAnnotationsFilePathObjectDecoder : Json.Decode.Decoder MessageDeltaContentTextAnnotationsFilePathObject
messageDeltaContentTextAnnotationsFilePathObjectDecoder =
    Json.Decode.succeed MessageDeltaContentTextAnnotationsFilePathObject
        |> decode "index" Json.Decode.int 
        |> decode "type" messageDeltaContentTextAnnotationsFilePathObjectTypeDecoder 
        |> maybeDecode "text" Json.Decode.string Nothing
        |> maybeDecode "file_path" messageDeltaContentTextAnnotationsFilePathObjectFilePathDecoder Nothing
        |> maybeDecode "start_index" Json.Decode.int Nothing
        |> maybeDecode "end_index" Json.Decode.int Nothing


messageDeltaContentTextAnnotationsFilePathObjectTypeDecoder : Json.Decode.Decoder MessageDeltaContentTextAnnotationsFilePathObjectType
messageDeltaContentTextAnnotationsFilePathObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "file_path" ->
                        Json.Decode.succeed MessageDeltaContentTextAnnotationsFilePathObjectTypeFilePath

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageDeltaContentTextAnnotationsFilePathObjectFilePathDecoder : Json.Decode.Decoder MessageDeltaContentTextAnnotationsFilePathObjectFilePath
messageDeltaContentTextAnnotationsFilePathObjectFilePathDecoder =
    Json.Decode.succeed MessageDeltaContentTextAnnotationsFilePathObjectFilePath
        |> maybeDecode "file_id" Json.Decode.string Nothing


messageDeltaContentTextObjectDecoder : Json.Decode.Decoder MessageDeltaContentTextObject
messageDeltaContentTextObjectDecoder =
    Json.Decode.succeed MessageDeltaContentTextObject
        |> decode "index" Json.Decode.int 
        |> decode "type" messageDeltaContentTextObjectTypeDecoder 
        |> maybeDecode "text" messageDeltaContentTextObjectTextDecoder Nothing


messageDeltaContentTextObjectTypeDecoder : Json.Decode.Decoder MessageDeltaContentTextObjectType
messageDeltaContentTextObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "text" ->
                        Json.Decode.succeed MessageDeltaContentTextObjectTypeText

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageDeltaContentTextObjectTextDecoder : Json.Decode.Decoder MessageDeltaContentTextObjectText
messageDeltaContentTextObjectTextDecoder =
    Json.Decode.succeed MessageDeltaContentTextObjectText
        |> maybeDecode "value" Json.Decode.string Nothing
        |> maybeDecode "annotations" (Json.Decode.list messageDeltaContentTextObjectTextAnnotationsInnerDecoder) Nothing


messageDeltaContentTextObjectTextAnnotationsInnerDecoder : Json.Decode.Decoder MessageDeltaContentTextObjectTextAnnotationsInner
messageDeltaContentTextObjectTextAnnotationsInnerDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map MessageDeltaContentTextObjectTextAnnotationsInnerMessageDeltaContentTextAnnotationsFileCitationObject messageDeltaContentTextAnnotationsFileCitationObjectDecoder
        , Json.Decode.map MessageDeltaContentTextObjectTextAnnotationsInnerMessageDeltaContentTextAnnotationsFilePathObject messageDeltaContentTextAnnotationsFilePathObjectDecoder
        ]



messageDeltaObjectDecoder : Json.Decode.Decoder MessageDeltaObject
messageDeltaObjectDecoder =
    Json.Decode.succeed MessageDeltaObject
        |> decode "id" Json.Decode.string 
        |> decode "object" messageDeltaObjectObjectDecoder 
        |> decode "delta" messageDeltaObjectDeltaDecoder 


messageDeltaObjectObjectDecoder : Json.Decode.Decoder MessageDeltaObjectObject
messageDeltaObjectObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.message.delta" ->
                        Json.Decode.succeed MessageDeltaObjectObjectThreadMessageDelta

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageDeltaObjectDeltaDecoder : Json.Decode.Decoder MessageDeltaObjectDelta
messageDeltaObjectDeltaDecoder =
    Json.Decode.succeed MessageDeltaObjectDelta
        |> maybeDecode "role" messageDeltaObjectDeltaRoleDecoder Nothing
        |> maybeDecode "content" (Json.Decode.list messageDeltaObjectDeltaContentInnerDecoder) Nothing
        |> maybeDecode "file_ids" (Json.Decode.list Json.Decode.string) Nothing


messageDeltaObjectDeltaRoleDecoder : Json.Decode.Decoder MessageDeltaObjectDeltaRole
messageDeltaObjectDeltaRoleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "user" ->
                        Json.Decode.succeed MessageDeltaObjectDeltaRoleUser

                    "assistant" ->
                        Json.Decode.succeed MessageDeltaObjectDeltaRoleAssistant

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageDeltaObjectDeltaContentInnerDecoder : Json.Decode.Decoder MessageDeltaObjectDeltaContentInner
messageDeltaObjectDeltaContentInnerDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map MessageDeltaObjectDeltaContentInnerMessageDeltaContentImageFileObject messageDeltaContentImageFileObjectDecoder
        , Json.Decode.map MessageDeltaObjectDeltaContentInnerMessageDeltaContentTextObject messageDeltaContentTextObjectDecoder
        ]



messageFileObjectDecoder : Json.Decode.Decoder MessageFileObject
messageFileObjectDecoder =
    Json.Decode.succeed MessageFileObject
        |> decode "id" Json.Decode.string 
        |> decode "object" messageFileObjectObjectDecoder 
        |> decode "created_at" Json.Decode.int 
        |> decode "message_id" Json.Decode.string 


messageFileObjectObjectDecoder : Json.Decode.Decoder MessageFileObjectObject
messageFileObjectObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.message.file" ->
                        Json.Decode.succeed MessageFileObjectObjectThreadMessageFile

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageObjectDecoder : Json.Decode.Decoder MessageObject
messageObjectDecoder =
    Json.Decode.succeed MessageObject
        |> decode "id" Json.Decode.string 
        |> decode "object" messageObjectObjectDecoder 
        |> decode "created_at" Json.Decode.int 
        |> decode "thread_id" Json.Decode.string 
        |> decode "status" messageObjectStatusDecoder 
        |> decodeNullable "incomplete_details" messageObjectIncompleteDetailsDecoder 
        |> decodeNullable "completed_at" Json.Decode.int 
        |> decodeNullable "incomplete_at" Json.Decode.int 
        |> decode "role" messageObjectRoleDecoder 
        |> decode "content" (Json.Decode.list messageObjectContentInnerDecoder) 
        |> decodeNullable "assistant_id" Json.Decode.string 
        |> decodeNullable "run_id" Json.Decode.string 
        |> decode "file_ids" (Json.Decode.list Json.Decode.string) 
        |> decodeNullable "metadata" objectDecoder 


messageObjectObjectDecoder : Json.Decode.Decoder MessageObjectObject
messageObjectObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.message" ->
                        Json.Decode.succeed MessageObjectObjectThreadMessage

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageObjectStatusDecoder : Json.Decode.Decoder MessageObjectStatus
messageObjectStatusDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "in_progress" ->
                        Json.Decode.succeed MessageObjectStatusInProgress

                    "incomplete" ->
                        Json.Decode.succeed MessageObjectStatusIncomplete

                    "completed" ->
                        Json.Decode.succeed MessageObjectStatusCompleted

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageObjectRoleDecoder : Json.Decode.Decoder MessageObjectRole
messageObjectRoleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "user" ->
                        Json.Decode.succeed MessageObjectRoleUser

                    "assistant" ->
                        Json.Decode.succeed MessageObjectRoleAssistant

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageObjectContentInnerDecoder : Json.Decode.Decoder MessageObjectContentInner
messageObjectContentInnerDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map MessageObjectContentInnerMessageContentImageFileObject messageContentImageFileObjectDecoder
        , Json.Decode.map MessageObjectContentInnerMessageContentTextObject messageContentTextObjectDecoder
        ]



messageObjectIncompleteDetailsDecoder : Json.Decode.Decoder MessageObjectIncompleteDetails
messageObjectIncompleteDetailsDecoder =
    Json.Decode.succeed MessageObjectIncompleteDetails
        |> decode "reason" messageObjectIncompleteDetailsReasonDecoder 


messageObjectIncompleteDetailsReasonDecoder : Json.Decode.Decoder MessageObjectIncompleteDetailsReason
messageObjectIncompleteDetailsReasonDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "content_filter" ->
                        Json.Decode.succeed MessageObjectIncompleteDetailsReasonContentFilter

                    "max_tokens" ->
                        Json.Decode.succeed MessageObjectIncompleteDetailsReasonMaxTokens

                    "run_cancelled" ->
                        Json.Decode.succeed MessageObjectIncompleteDetailsReasonRunCancelled

                    "run_expired" ->
                        Json.Decode.succeed MessageObjectIncompleteDetailsReasonRunExpired

                    "run_failed" ->
                        Json.Decode.succeed MessageObjectIncompleteDetailsReasonRunFailed

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageStreamEventDecoder : Json.Decode.Decoder MessageStreamEvent
messageStreamEventDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map MessageStreamEventMessageStreamEventOneOf messageStreamEventOneOfDecoder
        , Json.Decode.map MessageStreamEventMessageStreamEventOneOf1 messageStreamEventOneOf1Decoder
        , Json.Decode.map MessageStreamEventMessageStreamEventOneOf2 messageStreamEventOneOf2Decoder
        , Json.Decode.map MessageStreamEventMessageStreamEventOneOf3 messageStreamEventOneOf3Decoder
        , Json.Decode.map MessageStreamEventMessageStreamEventOneOf4 messageStreamEventOneOf4Decoder
        ]



messageStreamEventOneOfDecoder : Json.Decode.Decoder MessageStreamEventOneOf
messageStreamEventOneOfDecoder =
    Json.Decode.succeed MessageStreamEventOneOf
        |> decode "event" messageStreamEventOneOfEventDecoder 
        |> decode "data" messageObjectDecoder 


messageStreamEventOneOfEventDecoder : Json.Decode.Decoder MessageStreamEventOneOfEvent
messageStreamEventOneOfEventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.message.created" ->
                        Json.Decode.succeed MessageStreamEventOneOfEventThreadMessageCreated

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageStreamEventOneOf1Decoder : Json.Decode.Decoder MessageStreamEventOneOf1
messageStreamEventOneOf1Decoder =
    Json.Decode.succeed MessageStreamEventOneOf1
        |> decode "event" messageStreamEventOneOf1EventDecoder 
        |> decode "data" messageObjectDecoder 


messageStreamEventOneOf1EventDecoder : Json.Decode.Decoder MessageStreamEventOneOf1Event
messageStreamEventOneOf1EventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.message.in_progress" ->
                        Json.Decode.succeed MessageStreamEventOneOf1EventThreadMessageInProgress

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageStreamEventOneOf2Decoder : Json.Decode.Decoder MessageStreamEventOneOf2
messageStreamEventOneOf2Decoder =
    Json.Decode.succeed MessageStreamEventOneOf2
        |> decode "event" messageStreamEventOneOf2EventDecoder 
        |> decode "data" messageDeltaObjectDecoder 


messageStreamEventOneOf2EventDecoder : Json.Decode.Decoder MessageStreamEventOneOf2Event
messageStreamEventOneOf2EventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.message.delta" ->
                        Json.Decode.succeed MessageStreamEventOneOf2EventThreadMessageDelta

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageStreamEventOneOf3Decoder : Json.Decode.Decoder MessageStreamEventOneOf3
messageStreamEventOneOf3Decoder =
    Json.Decode.succeed MessageStreamEventOneOf3
        |> decode "event" messageStreamEventOneOf3EventDecoder 
        |> decode "data" messageObjectDecoder 


messageStreamEventOneOf3EventDecoder : Json.Decode.Decoder MessageStreamEventOneOf3Event
messageStreamEventOneOf3EventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.message.completed" ->
                        Json.Decode.succeed MessageStreamEventOneOf3EventThreadMessageCompleted

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messageStreamEventOneOf4Decoder : Json.Decode.Decoder MessageStreamEventOneOf4
messageStreamEventOneOf4Decoder =
    Json.Decode.succeed MessageStreamEventOneOf4
        |> decode "event" messageStreamEventOneOf4EventDecoder 
        |> decode "data" messageObjectDecoder 


messageStreamEventOneOf4EventDecoder : Json.Decode.Decoder MessageStreamEventOneOf4Event
messageStreamEventOneOf4EventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.message.incomplete" ->
                        Json.Decode.succeed MessageStreamEventOneOf4EventThreadMessageIncomplete

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



modelDecoder : Json.Decode.Decoder Model
modelDecoder =
    Json.Decode.succeed Model
        |> decode "id" Json.Decode.string 
        |> decode "created" Json.Decode.int 
        |> decode "object" modelObjectDecoder 
        |> decode "owned_by" Json.Decode.string 


modelObjectDecoder : Json.Decode.Decoder ModelObject
modelObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "model" ->
                        Json.Decode.succeed ModelObjectModel

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



modifyAssistantRequestDecoder : Json.Decode.Decoder ModifyAssistantRequest
modifyAssistantRequestDecoder =
    Json.Decode.succeed ModifyAssistantRequest
        |> maybeDecode "model" Json.Decode.string Nothing
        |> maybeDecodeNullable "name" Json.Decode.string Nothing
        |> maybeDecodeNullable "description" Json.Decode.string Nothing
        |> maybeDecodeNullable "instructions" Json.Decode.string Nothing
        |> maybeDecode "tools" (Json.Decode.list assistantObjectToolsInnerDecoder) Nothing
        |> maybeDecode "file_ids" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "metadata" objectDecoder Nothing


modifyMessageRequestDecoder : Json.Decode.Decoder ModifyMessageRequest
modifyMessageRequestDecoder =
    Json.Decode.succeed ModifyMessageRequest
        |> maybeDecodeNullable "metadata" objectDecoder Nothing


modifyRunRequestDecoder : Json.Decode.Decoder ModifyRunRequest
modifyRunRequestDecoder =
    Json.Decode.succeed ModifyRunRequest
        |> maybeDecodeNullable "metadata" objectDecoder Nothing


modifyThreadRequestDecoder : Json.Decode.Decoder ModifyThreadRequest
modifyThreadRequestDecoder =
    Json.Decode.succeed ModifyThreadRequest
        |> maybeDecodeNullable "metadata" objectDecoder Nothing


openAIFileDecoder : Json.Decode.Decoder OpenAIFile
openAIFileDecoder =
    Json.Decode.succeed OpenAIFile
        |> decode "id" Json.Decode.string 
        |> decode "bytes" Json.Decode.int 
        |> decode "created_at" Json.Decode.int 
        |> decode "filename" Json.Decode.string 
        |> decode "object" openAIFileObjectDecoder 
        |> decode "purpose" openAIFilePurposeDecoder 
        |> decode "status" openAIFileStatusDecoder 
        |> maybeDecode "status_details" Json.Decode.string Nothing


openAIFileObjectDecoder : Json.Decode.Decoder OpenAIFileObject
openAIFileObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "file" ->
                        Json.Decode.succeed OpenAIFileObjectFile

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



openAIFilePurposeDecoder : Json.Decode.Decoder OpenAIFilePurpose
openAIFilePurposeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "fine-tune" ->
                        Json.Decode.succeed OpenAIFilePurposeFineTune

                    "fine-tune-results" ->
                        Json.Decode.succeed OpenAIFilePurposeFineTuneResults

                    "assistants" ->
                        Json.Decode.succeed OpenAIFilePurposeAssistants

                    "assistants_output" ->
                        Json.Decode.succeed OpenAIFilePurposeAssistantsOutput

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



openAIFileStatusDecoder : Json.Decode.Decoder OpenAIFileStatus
openAIFileStatusDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "uploaded" ->
                        Json.Decode.succeed OpenAIFileStatusUploaded

                    "processed" ->
                        Json.Decode.succeed OpenAIFileStatusProcessed

                    "error" ->
                        Json.Decode.succeed OpenAIFileStatusError

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runCompletionUsageDecoder : Json.Decode.Decoder RunCompletionUsage
runCompletionUsageDecoder =
    Json.Decode.succeed RunCompletionUsage
        |> decode "completion_tokens" Json.Decode.int 
        |> decode "prompt_tokens" Json.Decode.int 
        |> decode "total_tokens" Json.Decode.int 


runObjectDecoder : Json.Decode.Decoder RunObject
runObjectDecoder =
    Json.Decode.succeed RunObject
        |> decode "id" Json.Decode.string 
        |> decode "object" runObjectObjectDecoder 
        |> decode "created_at" Json.Decode.int 
        |> decode "thread_id" Json.Decode.string 
        |> decode "assistant_id" Json.Decode.string 
        |> decode "status" runObjectStatusDecoder 
        |> decodeNullable "required_action" runObjectRequiredActionDecoder 
        |> decodeNullable "last_error" runObjectLastErrorDecoder 
        |> decodeNullable "expires_at" Json.Decode.int 
        |> decodeNullable "started_at" Json.Decode.int 
        |> decodeNullable "cancelled_at" Json.Decode.int 
        |> decodeNullable "failed_at" Json.Decode.int 
        |> decodeNullable "completed_at" Json.Decode.int 
        |> decodeNullable "incomplete_details" runObjectIncompleteDetailsDecoder 
        |> decode "model" Json.Decode.string 
        |> decode "instructions" Json.Decode.string 
        |> decode "tools" (Json.Decode.list assistantObjectToolsInnerDecoder) 
        |> decode "file_ids" (Json.Decode.list Json.Decode.string) 
        |> decodeNullable "metadata" objectDecoder 
        |> decodeNullable "usage" runCompletionUsageDecoder 
        |> maybeDecodeNullable "temperature" Json.Decode.float Nothing
        |> decodeNullable "max_prompt_tokens" Json.Decode.int 
        |> decodeNullable "max_completion_tokens" Json.Decode.int 
        |> decode "truncation_strategy" truncationObjectDecoder 
        |> decode "tool_choice" assistantsApiToolChoiceOptionDecoder 
        |> decode "response_format" assistantsApiResponseFormatOptionDecoder 


runObjectObjectDecoder : Json.Decode.Decoder RunObjectObject
runObjectObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run" ->
                        Json.Decode.succeed RunObjectObjectThreadRun

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runObjectStatusDecoder : Json.Decode.Decoder RunObjectStatus
runObjectStatusDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "queued" ->
                        Json.Decode.succeed RunObjectStatusQueued

                    "in_progress" ->
                        Json.Decode.succeed RunObjectStatusInProgress

                    "requires_action" ->
                        Json.Decode.succeed RunObjectStatusRequiresAction

                    "cancelling" ->
                        Json.Decode.succeed RunObjectStatusCancelling

                    "cancelled" ->
                        Json.Decode.succeed RunObjectStatusCancelled

                    "failed" ->
                        Json.Decode.succeed RunObjectStatusFailed

                    "completed" ->
                        Json.Decode.succeed RunObjectStatusCompleted

                    "expired" ->
                        Json.Decode.succeed RunObjectStatusExpired

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runObjectIncompleteDetailsDecoder : Json.Decode.Decoder RunObjectIncompleteDetails
runObjectIncompleteDetailsDecoder =
    Json.Decode.succeed RunObjectIncompleteDetails
        |> maybeDecode "reason" runObjectIncompleteDetailsReasonDecoder Nothing


runObjectIncompleteDetailsReasonDecoder : Json.Decode.Decoder RunObjectIncompleteDetailsReason
runObjectIncompleteDetailsReasonDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "max_completion_tokens" ->
                        Json.Decode.succeed RunObjectIncompleteDetailsReasonCompletionTokens

                    "max_prompt_tokens" ->
                        Json.Decode.succeed RunObjectIncompleteDetailsReasonPromptTokens

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runObjectLastErrorDecoder : Json.Decode.Decoder RunObjectLastError
runObjectLastErrorDecoder =
    Json.Decode.succeed RunObjectLastError
        |> decode "code" runObjectLastErrorCodeDecoder 
        |> decode "message" Json.Decode.string 


runObjectLastErrorCodeDecoder : Json.Decode.Decoder RunObjectLastErrorCode
runObjectLastErrorCodeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "server_error" ->
                        Json.Decode.succeed RunObjectLastErrorCodeServerError

                    "rate_limit_exceeded" ->
                        Json.Decode.succeed RunObjectLastErrorCodeRateLimitExceeded

                    "invalid_prompt" ->
                        Json.Decode.succeed RunObjectLastErrorCodeInvalidPrompt

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runObjectRequiredActionDecoder : Json.Decode.Decoder RunObjectRequiredAction
runObjectRequiredActionDecoder =
    Json.Decode.succeed RunObjectRequiredAction
        |> decode "type" runObjectRequiredActionTypeDecoder 
        |> decode "submit_tool_outputs" runObjectRequiredActionSubmitToolOutputsDecoder 


runObjectRequiredActionTypeDecoder : Json.Decode.Decoder RunObjectRequiredActionType
runObjectRequiredActionTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "submit_tool_outputs" ->
                        Json.Decode.succeed RunObjectRequiredActionTypeSubmitToolOutputs

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runObjectRequiredActionSubmitToolOutputsDecoder : Json.Decode.Decoder RunObjectRequiredActionSubmitToolOutputs
runObjectRequiredActionSubmitToolOutputsDecoder =
    Json.Decode.succeed RunObjectRequiredActionSubmitToolOutputs
        |> decode "tool_calls" (Json.Decode.list runToolCallObjectDecoder) 


runStepCompletionUsageDecoder : Json.Decode.Decoder RunStepCompletionUsage
runStepCompletionUsageDecoder =
    Json.Decode.succeed RunStepCompletionUsage
        |> decode "completion_tokens" Json.Decode.int 
        |> decode "prompt_tokens" Json.Decode.int 
        |> decode "total_tokens" Json.Decode.int 


runStepDeltaObjectDecoder : Json.Decode.Decoder RunStepDeltaObject
runStepDeltaObjectDecoder =
    Json.Decode.succeed RunStepDeltaObject
        |> decode "id" Json.Decode.string 
        |> decode "object" runStepDeltaObjectObjectDecoder 
        |> decode "delta" runStepDeltaObjectDeltaDecoder 


runStepDeltaObjectObjectDecoder : Json.Decode.Decoder RunStepDeltaObjectObject
runStepDeltaObjectObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run.step.delta" ->
                        Json.Decode.succeed RunStepDeltaObjectObjectThreadRunStepDelta

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepDeltaObjectDeltaDecoder : Json.Decode.Decoder RunStepDeltaObjectDelta
runStepDeltaObjectDeltaDecoder =
    Json.Decode.succeed RunStepDeltaObjectDelta
        |> maybeDecode "step_details" runStepDeltaObjectDeltaStepDetailsDecoder Nothing


runStepDeltaObjectDeltaStepDetailsDecoder : Json.Decode.Decoder RunStepDeltaObjectDeltaStepDetails
runStepDeltaObjectDeltaStepDetailsDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map RunStepDeltaObjectDeltaStepDetailsRunStepDeltaStepDetailsMessageCreationObject runStepDeltaStepDetailsMessageCreationObjectDecoder
        , Json.Decode.map RunStepDeltaObjectDeltaStepDetailsRunStepDeltaStepDetailsToolCallsObject runStepDeltaStepDetailsToolCallsObjectDecoder
        ]



runStepDeltaStepDetailsMessageCreationObjectDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsMessageCreationObject
runStepDeltaStepDetailsMessageCreationObjectDecoder =
    Json.Decode.succeed RunStepDeltaStepDetailsMessageCreationObject
        |> decode "type" runStepDeltaStepDetailsMessageCreationObjectTypeDecoder 
        |> maybeDecode "message_creation" runStepDeltaStepDetailsMessageCreationObjectMessageCreationDecoder Nothing


runStepDeltaStepDetailsMessageCreationObjectTypeDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsMessageCreationObjectType
runStepDeltaStepDetailsMessageCreationObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "message_creation" ->
                        Json.Decode.succeed RunStepDeltaStepDetailsMessageCreationObjectTypeMessageCreation

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepDeltaStepDetailsMessageCreationObjectMessageCreationDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsMessageCreationObjectMessageCreation
runStepDeltaStepDetailsMessageCreationObjectMessageCreationDecoder =
    Json.Decode.succeed RunStepDeltaStepDetailsMessageCreationObjectMessageCreation
        |> maybeDecode "message_id" Json.Decode.string Nothing


runStepDeltaStepDetailsToolCallsCodeObjectDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsToolCallsCodeObject
runStepDeltaStepDetailsToolCallsCodeObjectDecoder =
    Json.Decode.succeed RunStepDeltaStepDetailsToolCallsCodeObject
        |> decode "index" Json.Decode.int 
        |> maybeDecode "id" Json.Decode.string Nothing
        |> decode "type" runStepDeltaStepDetailsToolCallsCodeObjectTypeDecoder 
        |> maybeDecode "code_interpreter" runStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterDecoder Nothing


runStepDeltaStepDetailsToolCallsCodeObjectTypeDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsToolCallsCodeObjectType
runStepDeltaStepDetailsToolCallsCodeObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "code_interpreter" ->
                        Json.Decode.succeed RunStepDeltaStepDetailsToolCallsCodeObjectTypeCodeInterpreter

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter
runStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterDecoder =
    Json.Decode.succeed RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter
        |> maybeDecode "input" Json.Decode.string Nothing
        |> maybeDecode "outputs" (Json.Decode.list runStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerDecoder) Nothing


runStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner
runStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerRunStepDeltaStepDetailsToolCallsCodeOutputImageObject runStepDeltaStepDetailsToolCallsCodeOutputImageObjectDecoder
        , Json.Decode.map RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject runStepDeltaStepDetailsToolCallsCodeOutputLogsObjectDecoder
        ]



runStepDeltaStepDetailsToolCallsCodeOutputImageObjectDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsToolCallsCodeOutputImageObject
runStepDeltaStepDetailsToolCallsCodeOutputImageObjectDecoder =
    Json.Decode.succeed RunStepDeltaStepDetailsToolCallsCodeOutputImageObject
        |> decode "index" Json.Decode.int 
        |> decode "type" runStepDeltaStepDetailsToolCallsCodeOutputImageObjectTypeDecoder 
        |> maybeDecode "image" runStepDeltaStepDetailsToolCallsCodeOutputImageObjectImageDecoder Nothing


runStepDeltaStepDetailsToolCallsCodeOutputImageObjectTypeDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType
runStepDeltaStepDetailsToolCallsCodeOutputImageObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "image" ->
                        Json.Decode.succeed RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectTypeImage

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepDeltaStepDetailsToolCallsCodeOutputImageObjectImageDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImage
runStepDeltaStepDetailsToolCallsCodeOutputImageObjectImageDecoder =
    Json.Decode.succeed RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImage
        |> maybeDecode "file_id" Json.Decode.string Nothing


runStepDeltaStepDetailsToolCallsCodeOutputLogsObjectDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject
runStepDeltaStepDetailsToolCallsCodeOutputLogsObjectDecoder =
    Json.Decode.succeed RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject
        |> decode "index" Json.Decode.int 
        |> decode "type" runStepDeltaStepDetailsToolCallsCodeOutputLogsObjectTypeDecoder 
        |> maybeDecode "logs" Json.Decode.string Nothing


runStepDeltaStepDetailsToolCallsCodeOutputLogsObjectTypeDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType
runStepDeltaStepDetailsToolCallsCodeOutputLogsObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "logs" ->
                        Json.Decode.succeed RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectTypeLogs

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepDeltaStepDetailsToolCallsFunctionObjectDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsToolCallsFunctionObject
runStepDeltaStepDetailsToolCallsFunctionObjectDecoder =
    Json.Decode.succeed RunStepDeltaStepDetailsToolCallsFunctionObject
        |> decode "index" Json.Decode.int 
        |> maybeDecode "id" Json.Decode.string Nothing
        |> decode "type" runStepDeltaStepDetailsToolCallsFunctionObjectTypeDecoder 
        |> maybeDecode "function" runStepDeltaStepDetailsToolCallsFunctionObjectFunctionDecoder Nothing


runStepDeltaStepDetailsToolCallsFunctionObjectTypeDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsToolCallsFunctionObjectType
runStepDeltaStepDetailsToolCallsFunctionObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "function" ->
                        Json.Decode.succeed RunStepDeltaStepDetailsToolCallsFunctionObjectTypeFunction

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepDeltaStepDetailsToolCallsFunctionObjectFunctionDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsToolCallsFunctionObjectFunction
runStepDeltaStepDetailsToolCallsFunctionObjectFunctionDecoder =
    Json.Decode.succeed RunStepDeltaStepDetailsToolCallsFunctionObjectFunction
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "arguments" Json.Decode.string Nothing
        |> maybeDecodeNullable "output" Json.Decode.string Nothing


runStepDeltaStepDetailsToolCallsObjectDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsToolCallsObject
runStepDeltaStepDetailsToolCallsObjectDecoder =
    Json.Decode.succeed RunStepDeltaStepDetailsToolCallsObject
        |> decode "type" runStepDeltaStepDetailsToolCallsObjectTypeDecoder 
        |> maybeDecode "tool_calls" (Json.Decode.list runStepDeltaStepDetailsToolCallsObjectToolCallsInnerDecoder) Nothing


runStepDeltaStepDetailsToolCallsObjectTypeDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsToolCallsObjectType
runStepDeltaStepDetailsToolCallsObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "tool_calls" ->
                        Json.Decode.succeed RunStepDeltaStepDetailsToolCallsObjectTypeToolCalls

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepDeltaStepDetailsToolCallsObjectToolCallsInnerDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsToolCallsObjectToolCallsInner
runStepDeltaStepDetailsToolCallsObjectToolCallsInnerDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map RunStepDeltaStepDetailsToolCallsObjectToolCallsInnerRunStepDeltaStepDetailsToolCallsCodeObject runStepDeltaStepDetailsToolCallsCodeObjectDecoder
        , Json.Decode.map RunStepDeltaStepDetailsToolCallsObjectToolCallsInnerRunStepDeltaStepDetailsToolCallsFunctionObject runStepDeltaStepDetailsToolCallsFunctionObjectDecoder
        , Json.Decode.map RunStepDeltaStepDetailsToolCallsObjectToolCallsInnerRunStepDeltaStepDetailsToolCallsRetrievalObject runStepDeltaStepDetailsToolCallsRetrievalObjectDecoder
        ]



runStepDeltaStepDetailsToolCallsRetrievalObjectDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsToolCallsRetrievalObject
runStepDeltaStepDetailsToolCallsRetrievalObjectDecoder =
    Json.Decode.succeed RunStepDeltaStepDetailsToolCallsRetrievalObject
        |> decode "index" Json.Decode.int 
        |> maybeDecode "id" Json.Decode.string Nothing
        |> decode "type" runStepDeltaStepDetailsToolCallsRetrievalObjectTypeDecoder 
        |> maybeDecode "retrieval" objectDecoder Nothing


runStepDeltaStepDetailsToolCallsRetrievalObjectTypeDecoder : Json.Decode.Decoder RunStepDeltaStepDetailsToolCallsRetrievalObjectType
runStepDeltaStepDetailsToolCallsRetrievalObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "retrieval" ->
                        Json.Decode.succeed RunStepDeltaStepDetailsToolCallsRetrievalObjectTypeRetrieval

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepDetailsMessageCreationObjectDecoder : Json.Decode.Decoder RunStepDetailsMessageCreationObject
runStepDetailsMessageCreationObjectDecoder =
    Json.Decode.succeed RunStepDetailsMessageCreationObject
        |> decode "type" runStepDetailsMessageCreationObjectTypeDecoder 
        |> decode "message_creation" runStepDetailsMessageCreationObjectMessageCreationDecoder 


runStepDetailsMessageCreationObjectTypeDecoder : Json.Decode.Decoder RunStepDetailsMessageCreationObjectType
runStepDetailsMessageCreationObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "message_creation" ->
                        Json.Decode.succeed RunStepDetailsMessageCreationObjectTypeMessageCreation

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepDetailsMessageCreationObjectMessageCreationDecoder : Json.Decode.Decoder RunStepDetailsMessageCreationObjectMessageCreation
runStepDetailsMessageCreationObjectMessageCreationDecoder =
    Json.Decode.succeed RunStepDetailsMessageCreationObjectMessageCreation
        |> decode "message_id" Json.Decode.string 


runStepDetailsToolCallsCodeObjectDecoder : Json.Decode.Decoder RunStepDetailsToolCallsCodeObject
runStepDetailsToolCallsCodeObjectDecoder =
    Json.Decode.succeed RunStepDetailsToolCallsCodeObject
        |> decode "id" Json.Decode.string 
        |> decode "type" runStepDetailsToolCallsCodeObjectTypeDecoder 
        |> decode "code_interpreter" runStepDetailsToolCallsCodeObjectCodeInterpreterDecoder 


runStepDetailsToolCallsCodeObjectTypeDecoder : Json.Decode.Decoder RunStepDetailsToolCallsCodeObjectType
runStepDetailsToolCallsCodeObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "code_interpreter" ->
                        Json.Decode.succeed RunStepDetailsToolCallsCodeObjectTypeCodeInterpreter

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepDetailsToolCallsCodeObjectCodeInterpreterDecoder : Json.Decode.Decoder RunStepDetailsToolCallsCodeObjectCodeInterpreter
runStepDetailsToolCallsCodeObjectCodeInterpreterDecoder =
    Json.Decode.succeed RunStepDetailsToolCallsCodeObjectCodeInterpreter
        |> decode "input" Json.Decode.string 
        |> decode "outputs" (Json.Decode.list runStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerDecoder) 


runStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerDecoder : Json.Decode.Decoder RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner
runStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerRunStepDetailsToolCallsCodeOutputImageObject runStepDetailsToolCallsCodeOutputImageObjectDecoder
        , Json.Decode.map RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerRunStepDetailsToolCallsCodeOutputLogsObject runStepDetailsToolCallsCodeOutputLogsObjectDecoder
        ]



runStepDetailsToolCallsCodeOutputImageObjectDecoder : Json.Decode.Decoder RunStepDetailsToolCallsCodeOutputImageObject
runStepDetailsToolCallsCodeOutputImageObjectDecoder =
    Json.Decode.succeed RunStepDetailsToolCallsCodeOutputImageObject
        |> decode "type" runStepDetailsToolCallsCodeOutputImageObjectTypeDecoder 
        |> decode "image" runStepDetailsToolCallsCodeOutputImageObjectImageDecoder 


runStepDetailsToolCallsCodeOutputImageObjectTypeDecoder : Json.Decode.Decoder RunStepDetailsToolCallsCodeOutputImageObjectType
runStepDetailsToolCallsCodeOutputImageObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "image" ->
                        Json.Decode.succeed RunStepDetailsToolCallsCodeOutputImageObjectTypeImage

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepDetailsToolCallsCodeOutputImageObjectImageDecoder : Json.Decode.Decoder RunStepDetailsToolCallsCodeOutputImageObjectImage
runStepDetailsToolCallsCodeOutputImageObjectImageDecoder =
    Json.Decode.succeed RunStepDetailsToolCallsCodeOutputImageObjectImage
        |> decode "file_id" Json.Decode.string 


runStepDetailsToolCallsCodeOutputLogsObjectDecoder : Json.Decode.Decoder RunStepDetailsToolCallsCodeOutputLogsObject
runStepDetailsToolCallsCodeOutputLogsObjectDecoder =
    Json.Decode.succeed RunStepDetailsToolCallsCodeOutputLogsObject
        |> decode "type" runStepDetailsToolCallsCodeOutputLogsObjectTypeDecoder 
        |> decode "logs" Json.Decode.string 


runStepDetailsToolCallsCodeOutputLogsObjectTypeDecoder : Json.Decode.Decoder RunStepDetailsToolCallsCodeOutputLogsObjectType
runStepDetailsToolCallsCodeOutputLogsObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "logs" ->
                        Json.Decode.succeed RunStepDetailsToolCallsCodeOutputLogsObjectTypeLogs

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepDetailsToolCallsFunctionObjectDecoder : Json.Decode.Decoder RunStepDetailsToolCallsFunctionObject
runStepDetailsToolCallsFunctionObjectDecoder =
    Json.Decode.succeed RunStepDetailsToolCallsFunctionObject
        |> decode "id" Json.Decode.string 
        |> decode "type" runStepDetailsToolCallsFunctionObjectTypeDecoder 
        |> decode "function" runStepDetailsToolCallsFunctionObjectFunctionDecoder 


runStepDetailsToolCallsFunctionObjectTypeDecoder : Json.Decode.Decoder RunStepDetailsToolCallsFunctionObjectType
runStepDetailsToolCallsFunctionObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "function" ->
                        Json.Decode.succeed RunStepDetailsToolCallsFunctionObjectTypeFunction

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepDetailsToolCallsFunctionObjectFunctionDecoder : Json.Decode.Decoder RunStepDetailsToolCallsFunctionObjectFunction
runStepDetailsToolCallsFunctionObjectFunctionDecoder =
    Json.Decode.succeed RunStepDetailsToolCallsFunctionObjectFunction
        |> decode "name" Json.Decode.string 
        |> decode "arguments" Json.Decode.string 
        |> decodeNullable "output" Json.Decode.string 


runStepDetailsToolCallsObjectDecoder : Json.Decode.Decoder RunStepDetailsToolCallsObject
runStepDetailsToolCallsObjectDecoder =
    Json.Decode.succeed RunStepDetailsToolCallsObject
        |> decode "type" runStepDetailsToolCallsObjectTypeDecoder 
        |> decode "tool_calls" (Json.Decode.list runStepDetailsToolCallsObjectToolCallsInnerDecoder) 


runStepDetailsToolCallsObjectTypeDecoder : Json.Decode.Decoder RunStepDetailsToolCallsObjectType
runStepDetailsToolCallsObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "tool_calls" ->
                        Json.Decode.succeed RunStepDetailsToolCallsObjectTypeToolCalls

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepDetailsToolCallsObjectToolCallsInnerDecoder : Json.Decode.Decoder RunStepDetailsToolCallsObjectToolCallsInner
runStepDetailsToolCallsObjectToolCallsInnerDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map RunStepDetailsToolCallsObjectToolCallsInnerRunStepDetailsToolCallsCodeObject runStepDetailsToolCallsCodeObjectDecoder
        , Json.Decode.map RunStepDetailsToolCallsObjectToolCallsInnerRunStepDetailsToolCallsFunctionObject runStepDetailsToolCallsFunctionObjectDecoder
        , Json.Decode.map RunStepDetailsToolCallsObjectToolCallsInnerRunStepDetailsToolCallsRetrievalObject runStepDetailsToolCallsRetrievalObjectDecoder
        ]



runStepDetailsToolCallsRetrievalObjectDecoder : Json.Decode.Decoder RunStepDetailsToolCallsRetrievalObject
runStepDetailsToolCallsRetrievalObjectDecoder =
    Json.Decode.succeed RunStepDetailsToolCallsRetrievalObject
        |> decode "id" Json.Decode.string 
        |> decode "type" runStepDetailsToolCallsRetrievalObjectTypeDecoder 
        |> decode "retrieval" objectDecoder 


runStepDetailsToolCallsRetrievalObjectTypeDecoder : Json.Decode.Decoder RunStepDetailsToolCallsRetrievalObjectType
runStepDetailsToolCallsRetrievalObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "retrieval" ->
                        Json.Decode.succeed RunStepDetailsToolCallsRetrievalObjectTypeRetrieval

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepObjectDecoder : Json.Decode.Decoder RunStepObject
runStepObjectDecoder =
    Json.Decode.succeed RunStepObject
        |> decode "id" Json.Decode.string 
        |> decode "object" runStepObjectObjectDecoder 
        |> decode "created_at" Json.Decode.int 
        |> decode "assistant_id" Json.Decode.string 
        |> decode "thread_id" Json.Decode.string 
        |> decode "run_id" Json.Decode.string 
        |> decode "type" runStepObjectTypeDecoder 
        |> decode "status" runStepObjectStatusDecoder 
        |> decode "step_details" runStepObjectStepDetailsDecoder 
        |> decodeNullable "last_error" runStepObjectLastErrorDecoder 
        |> decodeNullable "expired_at" Json.Decode.int 
        |> decodeNullable "cancelled_at" Json.Decode.int 
        |> decodeNullable "failed_at" Json.Decode.int 
        |> decodeNullable "completed_at" Json.Decode.int 
        |> decodeNullable "metadata" objectDecoder 
        |> decodeNullable "usage" runStepCompletionUsageDecoder 


runStepObjectObjectDecoder : Json.Decode.Decoder RunStepObjectObject
runStepObjectObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run.step" ->
                        Json.Decode.succeed RunStepObjectObjectThreadRunStep

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepObjectTypeDecoder : Json.Decode.Decoder RunStepObjectType
runStepObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "message_creation" ->
                        Json.Decode.succeed RunStepObjectTypeMessageCreation

                    "tool_calls" ->
                        Json.Decode.succeed RunStepObjectTypeToolCalls

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepObjectStatusDecoder : Json.Decode.Decoder RunStepObjectStatus
runStepObjectStatusDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "in_progress" ->
                        Json.Decode.succeed RunStepObjectStatusInProgress

                    "cancelled" ->
                        Json.Decode.succeed RunStepObjectStatusCancelled

                    "failed" ->
                        Json.Decode.succeed RunStepObjectStatusFailed

                    "completed" ->
                        Json.Decode.succeed RunStepObjectStatusCompleted

                    "expired" ->
                        Json.Decode.succeed RunStepObjectStatusExpired

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepObjectLastErrorDecoder : Json.Decode.Decoder RunStepObjectLastError
runStepObjectLastErrorDecoder =
    Json.Decode.succeed RunStepObjectLastError
        |> decode "code" runStepObjectLastErrorCodeDecoder 
        |> decode "message" Json.Decode.string 


runStepObjectLastErrorCodeDecoder : Json.Decode.Decoder RunStepObjectLastErrorCode
runStepObjectLastErrorCodeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "server_error" ->
                        Json.Decode.succeed RunStepObjectLastErrorCodeServerError

                    "rate_limit_exceeded" ->
                        Json.Decode.succeed RunStepObjectLastErrorCodeRateLimitExceeded

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepObjectStepDetailsDecoder : Json.Decode.Decoder RunStepObjectStepDetails
runStepObjectStepDetailsDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map RunStepObjectStepDetailsRunStepDetailsMessageCreationObject runStepDetailsMessageCreationObjectDecoder
        , Json.Decode.map RunStepObjectStepDetailsRunStepDetailsToolCallsObject runStepDetailsToolCallsObjectDecoder
        ]



runStepStreamEventDecoder : Json.Decode.Decoder RunStepStreamEvent
runStepStreamEventDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map RunStepStreamEventRunStepStreamEventOneOf runStepStreamEventOneOfDecoder
        , Json.Decode.map RunStepStreamEventRunStepStreamEventOneOf1 runStepStreamEventOneOf1Decoder
        , Json.Decode.map RunStepStreamEventRunStepStreamEventOneOf2 runStepStreamEventOneOf2Decoder
        , Json.Decode.map RunStepStreamEventRunStepStreamEventOneOf3 runStepStreamEventOneOf3Decoder
        , Json.Decode.map RunStepStreamEventRunStepStreamEventOneOf4 runStepStreamEventOneOf4Decoder
        , Json.Decode.map RunStepStreamEventRunStepStreamEventOneOf5 runStepStreamEventOneOf5Decoder
        , Json.Decode.map RunStepStreamEventRunStepStreamEventOneOf6 runStepStreamEventOneOf6Decoder
        ]



runStepStreamEventOneOfDecoder : Json.Decode.Decoder RunStepStreamEventOneOf
runStepStreamEventOneOfDecoder =
    Json.Decode.succeed RunStepStreamEventOneOf
        |> decode "event" runStepStreamEventOneOfEventDecoder 
        |> decode "data" runStepObjectDecoder 


runStepStreamEventOneOfEventDecoder : Json.Decode.Decoder RunStepStreamEventOneOfEvent
runStepStreamEventOneOfEventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run.step.created" ->
                        Json.Decode.succeed RunStepStreamEventOneOfEventThreadRunStepCreated

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepStreamEventOneOf1Decoder : Json.Decode.Decoder RunStepStreamEventOneOf1
runStepStreamEventOneOf1Decoder =
    Json.Decode.succeed RunStepStreamEventOneOf1
        |> decode "event" runStepStreamEventOneOf1EventDecoder 
        |> decode "data" runStepObjectDecoder 


runStepStreamEventOneOf1EventDecoder : Json.Decode.Decoder RunStepStreamEventOneOf1Event
runStepStreamEventOneOf1EventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run.step.in_progress" ->
                        Json.Decode.succeed RunStepStreamEventOneOf1EventThreadRunStepInProgress

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepStreamEventOneOf2Decoder : Json.Decode.Decoder RunStepStreamEventOneOf2
runStepStreamEventOneOf2Decoder =
    Json.Decode.succeed RunStepStreamEventOneOf2
        |> decode "event" runStepStreamEventOneOf2EventDecoder 
        |> decode "data" runStepDeltaObjectDecoder 


runStepStreamEventOneOf2EventDecoder : Json.Decode.Decoder RunStepStreamEventOneOf2Event
runStepStreamEventOneOf2EventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run.step.delta" ->
                        Json.Decode.succeed RunStepStreamEventOneOf2EventThreadRunStepDelta

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepStreamEventOneOf3Decoder : Json.Decode.Decoder RunStepStreamEventOneOf3
runStepStreamEventOneOf3Decoder =
    Json.Decode.succeed RunStepStreamEventOneOf3
        |> decode "event" runStepStreamEventOneOf3EventDecoder 
        |> decode "data" runStepObjectDecoder 


runStepStreamEventOneOf3EventDecoder : Json.Decode.Decoder RunStepStreamEventOneOf3Event
runStepStreamEventOneOf3EventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run.step.completed" ->
                        Json.Decode.succeed RunStepStreamEventOneOf3EventThreadRunStepCompleted

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepStreamEventOneOf4Decoder : Json.Decode.Decoder RunStepStreamEventOneOf4
runStepStreamEventOneOf4Decoder =
    Json.Decode.succeed RunStepStreamEventOneOf4
        |> decode "event" runStepStreamEventOneOf4EventDecoder 
        |> decode "data" runStepObjectDecoder 


runStepStreamEventOneOf4EventDecoder : Json.Decode.Decoder RunStepStreamEventOneOf4Event
runStepStreamEventOneOf4EventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run.step.failed" ->
                        Json.Decode.succeed RunStepStreamEventOneOf4EventThreadRunStepFailed

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepStreamEventOneOf5Decoder : Json.Decode.Decoder RunStepStreamEventOneOf5
runStepStreamEventOneOf5Decoder =
    Json.Decode.succeed RunStepStreamEventOneOf5
        |> decode "event" runStepStreamEventOneOf5EventDecoder 
        |> decode "data" runStepObjectDecoder 


runStepStreamEventOneOf5EventDecoder : Json.Decode.Decoder RunStepStreamEventOneOf5Event
runStepStreamEventOneOf5EventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run.step.cancelled" ->
                        Json.Decode.succeed RunStepStreamEventOneOf5EventThreadRunStepCancelled

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStepStreamEventOneOf6Decoder : Json.Decode.Decoder RunStepStreamEventOneOf6
runStepStreamEventOneOf6Decoder =
    Json.Decode.succeed RunStepStreamEventOneOf6
        |> decode "event" runStepStreamEventOneOf6EventDecoder 
        |> decode "data" runStepObjectDecoder 


runStepStreamEventOneOf6EventDecoder : Json.Decode.Decoder RunStepStreamEventOneOf6Event
runStepStreamEventOneOf6EventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run.step.expired" ->
                        Json.Decode.succeed RunStepStreamEventOneOf6EventThreadRunStepExpired

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStreamEventDecoder : Json.Decode.Decoder RunStreamEvent
runStreamEventDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map RunStreamEventRunStreamEventOneOf runStreamEventOneOfDecoder
        , Json.Decode.map RunStreamEventRunStreamEventOneOf1 runStreamEventOneOf1Decoder
        , Json.Decode.map RunStreamEventRunStreamEventOneOf2 runStreamEventOneOf2Decoder
        , Json.Decode.map RunStreamEventRunStreamEventOneOf3 runStreamEventOneOf3Decoder
        , Json.Decode.map RunStreamEventRunStreamEventOneOf4 runStreamEventOneOf4Decoder
        , Json.Decode.map RunStreamEventRunStreamEventOneOf5 runStreamEventOneOf5Decoder
        , Json.Decode.map RunStreamEventRunStreamEventOneOf6 runStreamEventOneOf6Decoder
        , Json.Decode.map RunStreamEventRunStreamEventOneOf7 runStreamEventOneOf7Decoder
        , Json.Decode.map RunStreamEventRunStreamEventOneOf8 runStreamEventOneOf8Decoder
        ]



runStreamEventOneOfDecoder : Json.Decode.Decoder RunStreamEventOneOf
runStreamEventOneOfDecoder =
    Json.Decode.succeed RunStreamEventOneOf
        |> decode "event" runStreamEventOneOfEventDecoder 
        |> decode "data" runObjectDecoder 


runStreamEventOneOfEventDecoder : Json.Decode.Decoder RunStreamEventOneOfEvent
runStreamEventOneOfEventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run.created" ->
                        Json.Decode.succeed RunStreamEventOneOfEventThreadRunCreated

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStreamEventOneOf1Decoder : Json.Decode.Decoder RunStreamEventOneOf1
runStreamEventOneOf1Decoder =
    Json.Decode.succeed RunStreamEventOneOf1
        |> decode "event" runStreamEventOneOf1EventDecoder 
        |> decode "data" runObjectDecoder 


runStreamEventOneOf1EventDecoder : Json.Decode.Decoder RunStreamEventOneOf1Event
runStreamEventOneOf1EventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run.queued" ->
                        Json.Decode.succeed RunStreamEventOneOf1EventThreadRunQueued

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStreamEventOneOf2Decoder : Json.Decode.Decoder RunStreamEventOneOf2
runStreamEventOneOf2Decoder =
    Json.Decode.succeed RunStreamEventOneOf2
        |> decode "event" runStreamEventOneOf2EventDecoder 
        |> decode "data" runObjectDecoder 


runStreamEventOneOf2EventDecoder : Json.Decode.Decoder RunStreamEventOneOf2Event
runStreamEventOneOf2EventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run.in_progress" ->
                        Json.Decode.succeed RunStreamEventOneOf2EventThreadRunInProgress

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStreamEventOneOf3Decoder : Json.Decode.Decoder RunStreamEventOneOf3
runStreamEventOneOf3Decoder =
    Json.Decode.succeed RunStreamEventOneOf3
        |> decode "event" runStreamEventOneOf3EventDecoder 
        |> decode "data" runObjectDecoder 


runStreamEventOneOf3EventDecoder : Json.Decode.Decoder RunStreamEventOneOf3Event
runStreamEventOneOf3EventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run.requires_action" ->
                        Json.Decode.succeed RunStreamEventOneOf3EventThreadRunRequiresAction

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStreamEventOneOf4Decoder : Json.Decode.Decoder RunStreamEventOneOf4
runStreamEventOneOf4Decoder =
    Json.Decode.succeed RunStreamEventOneOf4
        |> decode "event" runStreamEventOneOf4EventDecoder 
        |> decode "data" runObjectDecoder 


runStreamEventOneOf4EventDecoder : Json.Decode.Decoder RunStreamEventOneOf4Event
runStreamEventOneOf4EventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run.completed" ->
                        Json.Decode.succeed RunStreamEventOneOf4EventThreadRunCompleted

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStreamEventOneOf5Decoder : Json.Decode.Decoder RunStreamEventOneOf5
runStreamEventOneOf5Decoder =
    Json.Decode.succeed RunStreamEventOneOf5
        |> decode "event" runStreamEventOneOf5EventDecoder 
        |> decode "data" runObjectDecoder 


runStreamEventOneOf5EventDecoder : Json.Decode.Decoder RunStreamEventOneOf5Event
runStreamEventOneOf5EventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run.failed" ->
                        Json.Decode.succeed RunStreamEventOneOf5EventThreadRunFailed

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStreamEventOneOf6Decoder : Json.Decode.Decoder RunStreamEventOneOf6
runStreamEventOneOf6Decoder =
    Json.Decode.succeed RunStreamEventOneOf6
        |> decode "event" runStreamEventOneOf6EventDecoder 
        |> decode "data" runObjectDecoder 


runStreamEventOneOf6EventDecoder : Json.Decode.Decoder RunStreamEventOneOf6Event
runStreamEventOneOf6EventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run.cancelling" ->
                        Json.Decode.succeed RunStreamEventOneOf6EventThreadRunCancelling

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStreamEventOneOf7Decoder : Json.Decode.Decoder RunStreamEventOneOf7
runStreamEventOneOf7Decoder =
    Json.Decode.succeed RunStreamEventOneOf7
        |> decode "event" runStreamEventOneOf7EventDecoder 
        |> decode "data" runObjectDecoder 


runStreamEventOneOf7EventDecoder : Json.Decode.Decoder RunStreamEventOneOf7Event
runStreamEventOneOf7EventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run.cancelled" ->
                        Json.Decode.succeed RunStreamEventOneOf7EventThreadRunCancelled

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runStreamEventOneOf8Decoder : Json.Decode.Decoder RunStreamEventOneOf8
runStreamEventOneOf8Decoder =
    Json.Decode.succeed RunStreamEventOneOf8
        |> decode "event" runStreamEventOneOf8EventDecoder 
        |> decode "data" runObjectDecoder 


runStreamEventOneOf8EventDecoder : Json.Decode.Decoder RunStreamEventOneOf8Event
runStreamEventOneOf8EventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.run.expired" ->
                        Json.Decode.succeed RunStreamEventOneOf8EventThreadRunExpired

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runToolCallObjectDecoder : Json.Decode.Decoder RunToolCallObject
runToolCallObjectDecoder =
    Json.Decode.succeed RunToolCallObject
        |> decode "id" Json.Decode.string 
        |> decode "type" runToolCallObjectTypeDecoder 
        |> decode "function" runToolCallObjectFunctionDecoder 


runToolCallObjectTypeDecoder : Json.Decode.Decoder RunToolCallObjectType
runToolCallObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "function" ->
                        Json.Decode.succeed RunToolCallObjectTypeFunction

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



runToolCallObjectFunctionDecoder : Json.Decode.Decoder RunToolCallObjectFunction
runToolCallObjectFunctionDecoder =
    Json.Decode.succeed RunToolCallObjectFunction
        |> decode "name" Json.Decode.string 
        |> decode "arguments" Json.Decode.string 


submitToolOutputsRunRequestDecoder : Json.Decode.Decoder SubmitToolOutputsRunRequest
submitToolOutputsRunRequestDecoder =
    Json.Decode.succeed SubmitToolOutputsRunRequest
        |> decode "tool_outputs" (Json.Decode.list submitToolOutputsRunRequestToolOutputsInnerDecoder) 
        |> maybeDecodeNullable "stream" Json.Decode.bool Nothing


submitToolOutputsRunRequestToolOutputsInnerDecoder : Json.Decode.Decoder SubmitToolOutputsRunRequestToolOutputsInner
submitToolOutputsRunRequestToolOutputsInnerDecoder =
    Json.Decode.succeed SubmitToolOutputsRunRequestToolOutputsInner
        |> maybeDecode "tool_call_id" Json.Decode.string Nothing
        |> maybeDecode "output" Json.Decode.string Nothing


threadObjectDecoder : Json.Decode.Decoder ThreadObject
threadObjectDecoder =
    Json.Decode.succeed ThreadObject
        |> decode "id" Json.Decode.string 
        |> decode "object" threadObjectObjectDecoder 
        |> decode "created_at" Json.Decode.int 
        |> decodeNullable "metadata" objectDecoder 


threadObjectObjectDecoder : Json.Decode.Decoder ThreadObjectObject
threadObjectObjectDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread" ->
                        Json.Decode.succeed ThreadObjectObjectThread

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



threadStreamEventDecoder : Json.Decode.Decoder ThreadStreamEvent
threadStreamEventDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map ThreadStreamEventThreadStreamEventOneOf threadStreamEventOneOfDecoder
        ]



threadStreamEventOneOfDecoder : Json.Decode.Decoder ThreadStreamEventOneOf
threadStreamEventOneOfDecoder =
    Json.Decode.succeed ThreadStreamEventOneOf
        |> decode "event" threadStreamEventOneOfEventDecoder 
        |> decode "data" threadObjectDecoder 


threadStreamEventOneOfEventDecoder : Json.Decode.Decoder ThreadStreamEventOneOfEvent
threadStreamEventOneOfEventDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "thread.created" ->
                        Json.Decode.succeed ThreadStreamEventOneOfEventThreadCreated

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



transcriptionSegmentDecoder : Json.Decode.Decoder TranscriptionSegment
transcriptionSegmentDecoder =
    Json.Decode.succeed TranscriptionSegment
        |> decode "id" Json.Decode.int 
        |> decode "seek" Json.Decode.int 
        |> decode "start" Json.Decode.float 
        |> decode "end" Json.Decode.float 
        |> decode "text" Json.Decode.string 
        |> decode "tokens" (Json.Decode.list Json.Decode.int) 
        |> decode "temperature" Json.Decode.float 
        |> decode "avg_logprob" Json.Decode.float 
        |> decode "compression_ratio" Json.Decode.float 
        |> decode "no_speech_prob" Json.Decode.float 


transcriptionWordDecoder : Json.Decode.Decoder TranscriptionWord
transcriptionWordDecoder =
    Json.Decode.succeed TranscriptionWord
        |> decode "word" Json.Decode.string 
        |> decode "start" Json.Decode.float 
        |> decode "end" Json.Decode.float 


truncationObjectDecoder : Json.Decode.Decoder TruncationObject
truncationObjectDecoder =
    Json.Decode.succeed TruncationObject
        |> maybeDecode "type" truncationObjectTypeDecoder Nothing
        |> maybeDecodeNullable "last_messages" Json.Decode.int Nothing


truncationObjectTypeDecoder : Json.Decode.Decoder TruncationObjectType
truncationObjectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "auto" ->
                        Json.Decode.succeed TruncationObjectTypeAuto

                    "last_messages" ->
                        Json.Decode.succeed TruncationObjectTypeLastMessages

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )





-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f