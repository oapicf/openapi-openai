{-
   OpenAI API
   The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

   The version of the OpenAPI document: 2.0.0
   Contact: blah+oapicf@cliffano.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.Audio exposing
    ( createSpeech
    , createTranscription, ResponseFormat(..), responseFormatVariants, TimestampGranularities(..), timestampGranularitiesVariants
    , createTranslation
    )

import Api
import Api.Data exposing (..)
import Dict
import Http
import Json.Decode
import Json.Encode
import File exposing (File)


type ResponseFormat
    = ResponseFormatJson
    | ResponseFormatText
    | ResponseFormatSrt
    | ResponseFormatVerboseJson
    | ResponseFormatVtt


responseFormatVariants : List ResponseFormat
responseFormatVariants =
    [ ResponseFormatJson
    , ResponseFormatText
    , ResponseFormatSrt
    , ResponseFormatVerboseJson
    , ResponseFormatVtt
    ]


stringFromResponseFormat : ResponseFormat -> String
stringFromResponseFormat model =
    case model of
        ResponseFormatJson ->
            "json"

        ResponseFormatText ->
            "text"

        ResponseFormatSrt ->
            "srt"

        ResponseFormatVerboseJson ->
            "verbose_json"

        ResponseFormatVtt ->
            "vtt"




type TimestampGranularities
    = TimestampGranularitiesWord
    | TimestampGranularitiesSegment


timestampGranularitiesVariants : List TimestampGranularities
timestampGranularitiesVariants =
    [ TimestampGranularitiesWord
    , TimestampGranularitiesSegment
    ]


stringFromTimestampGranularities : TimestampGranularities -> String
stringFromTimestampGranularities model =
    case model of
        TimestampGranularitiesWord ->
            "word"

        TimestampGranularitiesSegment ->
            "segment"



createSpeech : Api.Data.CreateSpeechRequest -> String -> Api.Request File
createSpeech createSpeechRequest_body auth_token =
    Api.request
        "POST"
        "/audio/speech"
        []
        []
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeCreateSpeechRequest createSpeechRequest_body)))
        File.decoder
        |> Api.withBearerToken auth_token

createTranscription : File -> Api.Data.CreateTranscriptionRequestModel -> Maybe String -> Maybe String -> Maybe ResponseFormat -> Maybe Float -> Maybe (List TimestampGranularities) -> String -> Api.Request Api.Data.CreateTranscription200Response
createTranscription file model language prompt responseFormat temperature timestampGranularitiesLeft_Square_BracketRight_Square_Bracket auth_token =
    Api.request
        "POST"
        "/audio/transcriptions"
        []
        []
        []
        (Just <| Http.multipartBody <| List.filterMap identity [ Just <| Http.filePart "file" file, Just <| Http.stringPart "model" model, Maybe.map (Http.stringPart "language") language, Maybe.map (Http.stringPart "prompt") prompt, Maybe.map (Http.stringPart "responseFormat"Api.Data.stringFromResponseFormat) responseFormat, Maybe.map (Http.stringPart "temperature"String.fromFloat) temperature, Maybe.map (Http.stringPart "timestampGranularitiesLeft_Square_BracketRight_Square_Bracket"Api.Data.stringFromTimestampGranularities) timestampGranularitiesLeft_Square_BracketRight_Square_Bracket ])
        Api.Data.createTranscription200ResponseDecoder
        |> Api.withBearerToken auth_token

createTranslation : File -> Api.Data.CreateTranscriptionRequestModel -> Maybe String -> Maybe String -> Maybe Float -> String -> Api.Request Api.Data.CreateTranslation200Response
createTranslation file model prompt responseFormat temperature auth_token =
    Api.request
        "POST"
        "/audio/translations"
        []
        []
        []
        (Just <| Http.multipartBody <| List.filterMap identity [ Just <| Http.filePart "file" file, Just <| Http.stringPart "model" model, Maybe.map (Http.stringPart "prompt") prompt, Maybe.map (Http.stringPart "responseFormat") responseFormat, Maybe.map (Http.stringPart "temperature"String.fromFloat) temperature ])
        Api.Data.createTranslation200ResponseDecoder
        |> Api.withBearerToken auth_token
