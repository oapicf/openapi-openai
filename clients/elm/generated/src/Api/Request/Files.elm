{-
   OpenAI API
   The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

   The version of the OpenAPI document: 2.0.0
   Contact: blah+oapicf@cliffano.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.Files exposing
    ( createFile, Purpose(..), purposeVariants
    , deleteFile
    , downloadFile
    , listFiles
    , retrieveFile
    )

import Api
import Api.Data exposing (..)
import Dict
import Http
import Json.Decode
import Json.Encode
import File exposing (File)


type Purpose
    = PurposeFineTune
    | PurposeAssistants


purposeVariants : List Purpose
purposeVariants =
    [ PurposeFineTune
    , PurposeAssistants
    ]


stringFromPurpose : Purpose -> String
stringFromPurpose model =
    case model of
        PurposeFineTune ->
            "fine-tune"

        PurposeAssistants ->
            "assistants"



createFile : File -> Purpose -> String -> Api.Request Api.Data.OpenAIFile
createFile file purpose auth_token =
    Api.request
        "POST"
        "/files"
        []
        []
        []
        (Just <| Http.multipartBody <| List.filterMap identity [ Just <| Http.filePart "file" file, Just <| Http.stringPart "purpose"Api.Data.stringFromPurpose purpose ])
        Api.Data.openAIFileDecoder
        |> Api.withBearerToken auth_token

deleteFile : String -> String -> Api.Request Api.Data.DeleteFileResponse
deleteFile fileId_path auth_token =
    Api.request
        "DELETE"
        "/files/{file_id}"
        [ ( "fileId", identity fileId_path ) ]
        []
        []
        Nothing
        Api.Data.deleteFileResponseDecoder
        |> Api.withBearerToken auth_token

downloadFile : String -> String -> Api.Request String
downloadFile fileId_path auth_token =
    Api.request
        "GET"
        "/files/{file_id}/content"
        [ ( "fileId", identity fileId_path ) ]
        []
        []
        Nothing
        Json.Decode.string
        |> Api.withBearerToken auth_token

listFiles : Maybe String -> String -> Api.Request Api.Data.ListFilesResponse
listFiles purpose_query auth_token =
    Api.request
        "GET"
        "/files"
        []
        [ ( "purpose", Maybe.map identity purpose_query ) ]
        []
        Nothing
        Api.Data.listFilesResponseDecoder
        |> Api.withBearerToken auth_token

retrieveFile : String -> String -> Api.Request Api.Data.OpenAIFile
retrieveFile fileId_path auth_token =
    Api.request
        "GET"
        "/files/{file_id}"
        [ ( "fileId", identity fileId_path ) ]
        []
        []
        Nothing
        Api.Data.openAIFileDecoder
        |> Api.withBearerToken auth_token
