{-
   OpenAI API
   The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

   The version of the OpenAPI document: 2.0.0
   Contact: blah+oapicf@cliffano.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.Images exposing
    ( createImage
    , createImageEdit, Size(..), sizeVariants, ResponseFormat(..), responseFormatVariants
    , createImageVariation, ResponseFormat(..), responseFormatVariants, Size(..), sizeVariants
    )

import Api
import Api.Data exposing (..)
import Dict
import Http
import Json.Decode
import Json.Encode
import File exposing (File)


type Size
    = Size256x256
    | Size512x512
    | Size1024x1024


sizeVariants : List Size
sizeVariants =
    [ Size256x256
    , Size512x512
    , Size1024x1024
    ]


stringFromSize : Size -> String
stringFromSize model =
    case model of
        Size256x256 ->
            "256x256"

        Size512x512 ->
            "512x512"

        Size1024x1024 ->
            "1024x1024"




type ResponseFormat
    = ResponseFormatUrl
    | ResponseFormatB64Json


responseFormatVariants : List ResponseFormat
responseFormatVariants =
    [ ResponseFormatUrl
    , ResponseFormatB64Json
    ]


stringFromResponseFormat : ResponseFormat -> String
stringFromResponseFormat model =
    case model of
        ResponseFormatUrl ->
            "url"

        ResponseFormatB64Json ->
            "b64_json"




type ResponseFormat
    = ResponseFormatUrl
    | ResponseFormatB64Json


responseFormatVariants : List ResponseFormat
responseFormatVariants =
    [ ResponseFormatUrl
    , ResponseFormatB64Json
    ]


stringFromResponseFormat : ResponseFormat -> String
stringFromResponseFormat model =
    case model of
        ResponseFormatUrl ->
            "url"

        ResponseFormatB64Json ->
            "b64_json"




type Size
    = Size256x256
    | Size512x512
    | Size1024x1024


sizeVariants : List Size
sizeVariants =
    [ Size256x256
    , Size512x512
    , Size1024x1024
    ]


stringFromSize : Size -> String
stringFromSize model =
    case model of
        Size256x256 ->
            "256x256"

        Size512x512 ->
            "512x512"

        Size1024x1024 ->
            "1024x1024"



createImage : Api.Data.CreateImageRequest -> String -> Api.Request Api.Data.ImagesResponse
createImage createImageRequest_body auth_token =
    Api.request
        "POST"
        "/images/generations"
        []
        []
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeCreateImageRequest createImageRequest_body)))
        Api.Data.imagesResponseDecoder
        |> Api.withBearerToken auth_token

createImageEdit : File -> String -> Maybe File -> Maybe Api.Data.CreateImageEditRequestModel -> Maybe Int -> Maybe Size -> Maybe ResponseFormat -> Maybe String -> String -> Api.Request Api.Data.ImagesResponse
createImageEdit image prompt mask model n size responseFormat user auth_token =
    Api.request
        "POST"
        "/images/edits"
        []
        []
        []
        (Just <| Http.multipartBody <| List.filterMap identity [ Just <| Http.filePart "image" image, Just <| Http.stringPart "prompt" prompt, Maybe.map (Http.filePart "mask") mask, Maybe.map (Http.stringPart "model") model, Maybe.map (Http.stringPart "n"String.fromInt) n, Maybe.map (Http.stringPart "size"Api.Data.stringFromSize) size, Maybe.map (Http.stringPart "responseFormat"Api.Data.stringFromResponseFormat) responseFormat, Maybe.map (Http.stringPart "user") user ])
        Api.Data.imagesResponseDecoder
        |> Api.withBearerToken auth_token

createImageVariation : File -> Maybe Api.Data.CreateImageEditRequestModel -> Maybe Int -> Maybe ResponseFormat -> Maybe Size -> Maybe String -> String -> Api.Request Api.Data.ImagesResponse
createImageVariation image model n responseFormat size user auth_token =
    Api.request
        "POST"
        "/images/variations"
        []
        []
        []
        (Just <| Http.multipartBody <| List.filterMap identity [ Just <| Http.filePart "image" image, Maybe.map (Http.stringPart "model") model, Maybe.map (Http.stringPart "n"String.fromInt) n, Maybe.map (Http.stringPart "responseFormat"Api.Data.stringFromResponseFormat) responseFormat, Maybe.map (Http.stringPart "size"Api.Data.stringFromSize) size, Maybe.map (Http.stringPart "user") user ])
        Api.Data.imagesResponseDecoder
        |> Api.withBearerToken auth_token
