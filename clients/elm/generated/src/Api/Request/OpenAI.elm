{-
   OpenAI API
   APIs for sampling from and fine-tuning language models

   The version of the OpenAPI document: 2.0.0
   Contact: blah+oapicf@cliffano.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.OpenAI exposing
    ( cancelFineTune
    , createChatCompletion
    , createCompletion
    , createEdit
    , createEmbedding
    , createFile
    , createFineTune
    , createImage
    , createImageEdit, Size(..), sizeVariants, ResponseFormat(..), responseFormatVariants
    , createImageVariation, Size(..), sizeVariants, ResponseFormat(..), responseFormatVariants
    , createModeration
    , createTranscription
    , createTranslation
    , deleteFile
    , deleteModel
    , downloadFile
    , listFiles
    , listFineTuneEvents
    , listFineTunes
    , listModels
    , retrieveFile
    , retrieveFineTune
    , retrieveModel
    )

import Api
import Api.Data exposing (..)
import Dict
import Http
import Json.Decode
import Json.Encode
import File exposing (File)


type Size
    = Size256x256
    | Size512x512
    | Size1024x1024


sizeVariants : List Size
sizeVariants =
    [ Size256x256
    , Size512x512
    , Size1024x1024
    ]


stringFromSize : Size -> String
stringFromSize model =
    case model of
        Size256x256 ->
            "256x256"

        Size512x512 ->
            "512x512"

        Size1024x1024 ->
            "1024x1024"




type ResponseFormat
    = ResponseFormatUrl
    | ResponseFormatB64Json


responseFormatVariants : List ResponseFormat
responseFormatVariants =
    [ ResponseFormatUrl
    , ResponseFormatB64Json
    ]


stringFromResponseFormat : ResponseFormat -> String
stringFromResponseFormat model =
    case model of
        ResponseFormatUrl ->
            "url"

        ResponseFormatB64Json ->
            "b64_json"




type Size
    = Size256x256
    | Size512x512
    | Size1024x1024


sizeVariants : List Size
sizeVariants =
    [ Size256x256
    , Size512x512
    , Size1024x1024
    ]


stringFromSize : Size -> String
stringFromSize model =
    case model of
        Size256x256 ->
            "256x256"

        Size512x512 ->
            "512x512"

        Size1024x1024 ->
            "1024x1024"




type ResponseFormat
    = ResponseFormatUrl
    | ResponseFormatB64Json


responseFormatVariants : List ResponseFormat
responseFormatVariants =
    [ ResponseFormatUrl
    , ResponseFormatB64Json
    ]


stringFromResponseFormat : ResponseFormat -> String
stringFromResponseFormat model =
    case model of
        ResponseFormatUrl ->
            "url"

        ResponseFormatB64Json ->
            "b64_json"



cancelFineTune : String -> Api.Request Api.Data.FineTune
cancelFineTune fineTuneId_path =
    Api.request
        "POST"
        "/fine-tunes/{fine_tune_id}/cancel"
        [ ( "fineTuneId", identity fineTuneId_path ) ]
        []
        []
        Nothing
        Api.Data.fineTuneDecoder


createChatCompletion : Api.Data.CreateChatCompletionRequest -> Api.Request Api.Data.CreateChatCompletionResponse
createChatCompletion createChatCompletionRequest_body =
    Api.request
        "POST"
        "/chat/completions"
        []
        []
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeCreateChatCompletionRequest createChatCompletionRequest_body)))
        Api.Data.createChatCompletionResponseDecoder


createCompletion : Api.Data.CreateCompletionRequest -> Api.Request Api.Data.CreateCompletionResponse
createCompletion createCompletionRequest_body =
    Api.request
        "POST"
        "/completions"
        []
        []
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeCreateCompletionRequest createCompletionRequest_body)))
        Api.Data.createCompletionResponseDecoder


createEdit : Api.Data.CreateEditRequest -> Api.Request Api.Data.CreateEditResponse
createEdit createEditRequest_body =
    Api.request
        "POST"
        "/edits"
        []
        []
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeCreateEditRequest createEditRequest_body)))
        Api.Data.createEditResponseDecoder


createEmbedding : Api.Data.CreateEmbeddingRequest -> Api.Request Api.Data.CreateEmbeddingResponse
createEmbedding createEmbeddingRequest_body =
    Api.request
        "POST"
        "/embeddings"
        []
        []
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeCreateEmbeddingRequest createEmbeddingRequest_body)))
        Api.Data.createEmbeddingResponseDecoder


createFile : File -> String -> Api.Request Api.Data.OpenAIFile
createFile file purpose =
    Api.request
        "POST"
        "/files"
        []
        []
        []
        (Just <| Http.multipartBody <| List.filterMap identity [ Just <| Http.filePart "file" file, Just <| Http.stringPart "purpose" purpose ])
        Api.Data.openAIFileDecoder


createFineTune : Api.Data.CreateFineTuneRequest -> Api.Request Api.Data.FineTune
createFineTune createFineTuneRequest_body =
    Api.request
        "POST"
        "/fine-tunes"
        []
        []
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeCreateFineTuneRequest createFineTuneRequest_body)))
        Api.Data.fineTuneDecoder


createImage : Api.Data.CreateImageRequest -> Api.Request Api.Data.ImagesResponse
createImage createImageRequest_body =
    Api.request
        "POST"
        "/images/generations"
        []
        []
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeCreateImageRequest createImageRequest_body)))
        Api.Data.imagesResponseDecoder


createImageEdit : File -> String -> Maybe File -> Maybe Int -> Maybe Size -> Maybe ResponseFormat -> Maybe String -> Api.Request Api.Data.ImagesResponse
createImageEdit image prompt mask n size responseFormat user =
    Api.request
        "POST"
        "/images/edits"
        []
        []
        []
        (Just <| Http.multipartBody <| List.filterMap identity [ Just <| Http.filePart "image" image, Maybe.map (Http.filePart "mask") mask, Just <| Http.stringPart "prompt" prompt, Maybe.map (Http.stringPart "n"String.fromInt) n, Maybe.map (Http.stringPart "size"Api.Data.stringFromSize) size, Maybe.map (Http.stringPart "responseFormat"Api.Data.stringFromResponseFormat) responseFormat, Maybe.map (Http.stringPart "user") user ])
        Api.Data.imagesResponseDecoder


createImageVariation : File -> Maybe Int -> Maybe Size -> Maybe ResponseFormat -> Maybe String -> Api.Request Api.Data.ImagesResponse
createImageVariation image n size responseFormat user =
    Api.request
        "POST"
        "/images/variations"
        []
        []
        []
        (Just <| Http.multipartBody <| List.filterMap identity [ Just <| Http.filePart "image" image, Maybe.map (Http.stringPart "n"String.fromInt) n, Maybe.map (Http.stringPart "size"Api.Data.stringFromSize) size, Maybe.map (Http.stringPart "responseFormat"Api.Data.stringFromResponseFormat) responseFormat, Maybe.map (Http.stringPart "user") user ])
        Api.Data.imagesResponseDecoder


createModeration : Api.Data.CreateModerationRequest -> Api.Request Api.Data.CreateModerationResponse
createModeration createModerationRequest_body =
    Api.request
        "POST"
        "/moderations"
        []
        []
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeCreateModerationRequest createModerationRequest_body)))
        Api.Data.createModerationResponseDecoder


createTranscription : File -> Api.Data.CreateTranscriptionRequestModel -> Maybe String -> Maybe String -> Maybe Float -> Maybe String -> Api.Request Api.Data.CreateTranscriptionResponse
createTranscription file model prompt responseFormat temperature language =
    Api.request
        "POST"
        "/audio/transcriptions"
        []
        []
        []
        (Just <| Http.multipartBody <| List.filterMap identity [ Just <| Http.filePart "file" file, Just <| Http.stringPart "model" model, Maybe.map (Http.stringPart "prompt") prompt, Maybe.map (Http.stringPart "responseFormat") responseFormat, Maybe.map (Http.stringPart "temperature"String.fromFloat) temperature, Maybe.map (Http.stringPart "language") language ])
        Api.Data.createTranscriptionResponseDecoder


createTranslation : File -> Api.Data.CreateTranscriptionRequestModel -> Maybe String -> Maybe String -> Maybe Float -> Api.Request Api.Data.CreateTranslationResponse
createTranslation file model prompt responseFormat temperature =
    Api.request
        "POST"
        "/audio/translations"
        []
        []
        []
        (Just <| Http.multipartBody <| List.filterMap identity [ Just <| Http.filePart "file" file, Just <| Http.stringPart "model" model, Maybe.map (Http.stringPart "prompt") prompt, Maybe.map (Http.stringPart "responseFormat") responseFormat, Maybe.map (Http.stringPart "temperature"String.fromFloat) temperature ])
        Api.Data.createTranslationResponseDecoder


deleteFile : String -> Api.Request Api.Data.DeleteFileResponse
deleteFile fileId_path =
    Api.request
        "DELETE"
        "/files/{file_id}"
        [ ( "fileId", identity fileId_path ) ]
        []
        []
        Nothing
        Api.Data.deleteFileResponseDecoder


deleteModel : String -> Api.Request Api.Data.DeleteModelResponse
deleteModel model_path =
    Api.request
        "DELETE"
        "/models/{model}"
        [ ( "model", identity model_path ) ]
        []
        []
        Nothing
        Api.Data.deleteModelResponseDecoder


downloadFile : String -> Api.Request String
downloadFile fileId_path =
    Api.request
        "GET"
        "/files/{file_id}/content"
        [ ( "fileId", identity fileId_path ) ]
        []
        []
        Nothing
        Json.Decode.string


listFiles : Api.Request Api.Data.ListFilesResponse
listFiles =
    Api.request
        "GET"
        "/files"
        []
        []
        []
        Nothing
        Api.Data.listFilesResponseDecoder


listFineTuneEvents : String -> Maybe Bool -> Api.Request Api.Data.ListFineTuneEventsResponse
listFineTuneEvents fineTuneId_path stream_query =
    Api.request
        "GET"
        "/fine-tunes/{fine_tune_id}/events"
        [ ( "fineTuneId", identity fineTuneId_path ) ]
        [ ( "stream", Maybe.map (\val -> if val then "true" else "false") stream_query ) ]
        []
        Nothing
        Api.Data.listFineTuneEventsResponseDecoder


listFineTunes : Api.Request Api.Data.ListFineTunesResponse
listFineTunes =
    Api.request
        "GET"
        "/fine-tunes"
        []
        []
        []
        Nothing
        Api.Data.listFineTunesResponseDecoder


listModels : Api.Request Api.Data.ListModelsResponse
listModels =
    Api.request
        "GET"
        "/models"
        []
        []
        []
        Nothing
        Api.Data.listModelsResponseDecoder


retrieveFile : String -> Api.Request Api.Data.OpenAIFile
retrieveFile fileId_path =
    Api.request
        "GET"
        "/files/{file_id}"
        [ ( "fileId", identity fileId_path ) ]
        []
        []
        Nothing
        Api.Data.openAIFileDecoder


retrieveFineTune : String -> Api.Request Api.Data.FineTune
retrieveFineTune fineTuneId_path =
    Api.request
        "GET"
        "/fine-tunes/{fine_tune_id}"
        [ ( "fineTuneId", identity fineTuneId_path ) ]
        []
        []
        Nothing
        Api.Data.fineTuneDecoder


retrieveModel : String -> Api.Request Api.Data.Model
retrieveModel model_path =
    Api.request
        "GET"
        "/models/{model}"
        [ ( "model", identity model_path ) ]
        []
        []
        Nothing
        Api.Data.modelDecoder

