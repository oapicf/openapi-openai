/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * API version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type AssistantsAPI struct {
}

// Post /v1/threads/:thread_id/runs/:run_id/cancel
// Cancels a run that is `in_progress`. 
func (api *AssistantsAPI) CancelRun(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /v1/assistants
// Create an assistant with a model and instructions. 
func (api *AssistantsAPI) CreateAssistant(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /v1/assistants/:assistant_id/files
// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants). 
func (api *AssistantsAPI) CreateAssistantFile(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /v1/threads/:thread_id/messages
// Create a message. 
func (api *AssistantsAPI) CreateMessage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /v1/threads/:thread_id/runs
// Create a run. 
func (api *AssistantsAPI) CreateRun(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /v1/threads
// Create a thread. 
func (api *AssistantsAPI) CreateThread(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /v1/threads/runs
// Create a thread and run it in one request. 
func (api *AssistantsAPI) CreateThreadAndRun(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /v1/assistants/:assistant_id
// Delete an assistant. 
func (api *AssistantsAPI) DeleteAssistant(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /v1/assistants/:assistant_id/files/:file_id
// Delete an assistant file. 
func (api *AssistantsAPI) DeleteAssistantFile(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /v1/threads/:thread_id
// Delete a thread. 
func (api *AssistantsAPI) DeleteThread(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v1/assistants/:assistant_id
// Retrieves an assistant. 
func (api *AssistantsAPI) GetAssistant(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v1/assistants/:assistant_id/files/:file_id
// Retrieves an AssistantFile. 
func (api *AssistantsAPI) GetAssistantFile(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v1/threads/:thread_id/messages/:message_id
// Retrieve a message. 
func (api *AssistantsAPI) GetMessage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v1/threads/:thread_id/messages/:message_id/files/:file_id
// Retrieves a message file. 
func (api *AssistantsAPI) GetMessageFile(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v1/threads/:thread_id/runs/:run_id
// Retrieves a run. 
func (api *AssistantsAPI) GetRun(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v1/threads/:thread_id/runs/:run_id/steps/:step_id
// Retrieves a run step. 
func (api *AssistantsAPI) GetRunStep(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v1/threads/:thread_id
// Retrieves a thread. 
func (api *AssistantsAPI) GetThread(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v1/assistants/:assistant_id/files
// Returns a list of assistant files. 
func (api *AssistantsAPI) ListAssistantFiles(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v1/assistants
// Returns a list of assistants. 
func (api *AssistantsAPI) ListAssistants(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v1/threads/:thread_id/messages/:message_id/files
// Returns a list of message files. 
func (api *AssistantsAPI) ListMessageFiles(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v1/threads/:thread_id/messages
// Returns a list of messages for a given thread. 
func (api *AssistantsAPI) ListMessages(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v1/threads/:thread_id/runs/:run_id/steps
// Returns a list of run steps belonging to a run. 
func (api *AssistantsAPI) ListRunSteps(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v1/threads/:thread_id/runs
// Returns a list of runs belonging to a thread. 
func (api *AssistantsAPI) ListRuns(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /v1/assistants/:assistant_id
// Modifies an assistant. 
func (api *AssistantsAPI) ModifyAssistant(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /v1/threads/:thread_id/messages/:message_id
// Modifies a message. 
func (api *AssistantsAPI) ModifyMessage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /v1/threads/:thread_id/runs/:run_id
// Modifies a run. 
func (api *AssistantsAPI) ModifyRun(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /v1/threads/:thread_id
// Modifies a thread. 
func (api *AssistantsAPI) ModifyThread(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /v1/threads/:thread_id/runs/:run_id/submit_tool_outputs
// When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.  
func (api *AssistantsAPI) SubmitToolOuputsToRun(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

