// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * API version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AssistantsAPIController binds http requests to an api service and writes the service results to the http response
type AssistantsAPIController struct {
	service AssistantsAPIServicer
	errorHandler ErrorHandler
}

// AssistantsAPIOption for how the controller is set up.
type AssistantsAPIOption func(*AssistantsAPIController)

// WithAssistantsAPIErrorHandler inject ErrorHandler into controller
func WithAssistantsAPIErrorHandler(h ErrorHandler) AssistantsAPIOption {
	return func(c *AssistantsAPIController) {
		c.errorHandler = h
	}
}

// NewAssistantsAPIController creates a default api controller
func NewAssistantsAPIController(s AssistantsAPIServicer, opts ...AssistantsAPIOption) *AssistantsAPIController {
	controller := &AssistantsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AssistantsAPIController
func (c *AssistantsAPIController) Routes() Routes {
	return Routes{
		"ListAssistants": Route{
			strings.ToUpper("Get"),
			"/v1/assistants",
			c.ListAssistants,
		},
		"CreateAssistant": Route{
			strings.ToUpper("Post"),
			"/v1/assistants",
			c.CreateAssistant,
		},
		"GetAssistant": Route{
			strings.ToUpper("Get"),
			"/v1/assistants/{assistant_id}",
			c.GetAssistant,
		},
		"ModifyAssistant": Route{
			strings.ToUpper("Post"),
			"/v1/assistants/{assistant_id}",
			c.ModifyAssistant,
		},
		"DeleteAssistant": Route{
			strings.ToUpper("Delete"),
			"/v1/assistants/{assistant_id}",
			c.DeleteAssistant,
		},
		"CreateThread": Route{
			strings.ToUpper("Post"),
			"/v1/threads",
			c.CreateThread,
		},
		"GetThread": Route{
			strings.ToUpper("Get"),
			"/v1/threads/{thread_id}",
			c.GetThread,
		},
		"ModifyThread": Route{
			strings.ToUpper("Post"),
			"/v1/threads/{thread_id}",
			c.ModifyThread,
		},
		"DeleteThread": Route{
			strings.ToUpper("Delete"),
			"/v1/threads/{thread_id}",
			c.DeleteThread,
		},
		"ListMessages": Route{
			strings.ToUpper("Get"),
			"/v1/threads/{thread_id}/messages",
			c.ListMessages,
		},
		"CreateMessage": Route{
			strings.ToUpper("Post"),
			"/v1/threads/{thread_id}/messages",
			c.CreateMessage,
		},
		"GetMessage": Route{
			strings.ToUpper("Get"),
			"/v1/threads/{thread_id}/messages/{message_id}",
			c.GetMessage,
		},
		"ModifyMessage": Route{
			strings.ToUpper("Post"),
			"/v1/threads/{thread_id}/messages/{message_id}",
			c.ModifyMessage,
		},
		"CreateThreadAndRun": Route{
			strings.ToUpper("Post"),
			"/v1/threads/runs",
			c.CreateThreadAndRun,
		},
		"ListRuns": Route{
			strings.ToUpper("Get"),
			"/v1/threads/{thread_id}/runs",
			c.ListRuns,
		},
		"CreateRun": Route{
			strings.ToUpper("Post"),
			"/v1/threads/{thread_id}/runs",
			c.CreateRun,
		},
		"GetRun": Route{
			strings.ToUpper("Get"),
			"/v1/threads/{thread_id}/runs/{run_id}",
			c.GetRun,
		},
		"ModifyRun": Route{
			strings.ToUpper("Post"),
			"/v1/threads/{thread_id}/runs/{run_id}",
			c.ModifyRun,
		},
		"SubmitToolOuputsToRun": Route{
			strings.ToUpper("Post"),
			"/v1/threads/{thread_id}/runs/{run_id}/submit_tool_outputs",
			c.SubmitToolOuputsToRun,
		},
		"CancelRun": Route{
			strings.ToUpper("Post"),
			"/v1/threads/{thread_id}/runs/{run_id}/cancel",
			c.CancelRun,
		},
		"ListRunSteps": Route{
			strings.ToUpper("Get"),
			"/v1/threads/{thread_id}/runs/{run_id}/steps",
			c.ListRunSteps,
		},
		"GetRunStep": Route{
			strings.ToUpper("Get"),
			"/v1/threads/{thread_id}/runs/{run_id}/steps/{step_id}",
			c.GetRunStep,
		},
		"ListAssistantFiles": Route{
			strings.ToUpper("Get"),
			"/v1/assistants/{assistant_id}/files",
			c.ListAssistantFiles,
		},
		"CreateAssistantFile": Route{
			strings.ToUpper("Post"),
			"/v1/assistants/{assistant_id}/files",
			c.CreateAssistantFile,
		},
		"GetAssistantFile": Route{
			strings.ToUpper("Get"),
			"/v1/assistants/{assistant_id}/files/{file_id}",
			c.GetAssistantFile,
		},
		"DeleteAssistantFile": Route{
			strings.ToUpper("Delete"),
			"/v1/assistants/{assistant_id}/files/{file_id}",
			c.DeleteAssistantFile,
		},
		"ListMessageFiles": Route{
			strings.ToUpper("Get"),
			"/v1/threads/{thread_id}/messages/{message_id}/files",
			c.ListMessageFiles,
		},
		"GetMessageFile": Route{
			strings.ToUpper("Get"),
			"/v1/threads/{thread_id}/messages/{message_id}/files/{file_id}",
			c.GetMessageFile,
		},
	}
}

// ListAssistants - Returns a list of assistants.
func (c *AssistantsAPIController) ListAssistants(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
		param := "desc"
		orderParam = param
	}
	var afterParam string
	if query.Has("after") {
		param := query.Get("after")

		afterParam = param
	} else {
	}
	var beforeParam string
	if query.Has("before") {
		param := query.Get("before")

		beforeParam = param
	} else {
	}
	result, err := c.service.ListAssistants(r.Context(), limitParam, orderParam, afterParam, beforeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateAssistant - Create an assistant with a model and instructions.
func (c *AssistantsAPIController) CreateAssistant(w http.ResponseWriter, r *http.Request) {
	createAssistantRequestParam := CreateAssistantRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createAssistantRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateAssistantRequestRequired(createAssistantRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateAssistantRequestConstraints(createAssistantRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateAssistant(r.Context(), createAssistantRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAssistant - Retrieves an assistant.
func (c *AssistantsAPIController) GetAssistant(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	assistantIdParam := params["assistant_id"]
	if assistantIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"assistant_id"}, nil)
		return
	}
	result, err := c.service.GetAssistant(r.Context(), assistantIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ModifyAssistant - Modifies an assistant.
func (c *AssistantsAPIController) ModifyAssistant(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	assistantIdParam := params["assistant_id"]
	if assistantIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"assistant_id"}, nil)
		return
	}
	modifyAssistantRequestParam := ModifyAssistantRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&modifyAssistantRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertModifyAssistantRequestRequired(modifyAssistantRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertModifyAssistantRequestConstraints(modifyAssistantRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ModifyAssistant(r.Context(), assistantIdParam, modifyAssistantRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteAssistant - Delete an assistant.
func (c *AssistantsAPIController) DeleteAssistant(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	assistantIdParam := params["assistant_id"]
	if assistantIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"assistant_id"}, nil)
		return
	}
	result, err := c.service.DeleteAssistant(r.Context(), assistantIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateThread - Create a thread.
func (c *AssistantsAPIController) CreateThread(w http.ResponseWriter, r *http.Request) {
	createThreadRequestParam := CreateThreadRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createThreadRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateThreadRequestRequired(createThreadRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateThreadRequestConstraints(createThreadRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateThread(r.Context(), createThreadRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetThread - Retrieves a thread.
func (c *AssistantsAPIController) GetThread(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	threadIdParam := params["thread_id"]
	if threadIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"thread_id"}, nil)
		return
	}
	result, err := c.service.GetThread(r.Context(), threadIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ModifyThread - Modifies a thread.
func (c *AssistantsAPIController) ModifyThread(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	threadIdParam := params["thread_id"]
	if threadIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"thread_id"}, nil)
		return
	}
	modifyThreadRequestParam := ModifyThreadRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&modifyThreadRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertModifyThreadRequestRequired(modifyThreadRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertModifyThreadRequestConstraints(modifyThreadRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ModifyThread(r.Context(), threadIdParam, modifyThreadRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteThread - Delete a thread.
func (c *AssistantsAPIController) DeleteThread(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	threadIdParam := params["thread_id"]
	if threadIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"thread_id"}, nil)
		return
	}
	result, err := c.service.DeleteThread(r.Context(), threadIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListMessages - Returns a list of messages for a given thread.
func (c *AssistantsAPIController) ListMessages(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	threadIdParam := params["thread_id"]
	if threadIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"thread_id"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
		param := "desc"
		orderParam = param
	}
	var afterParam string
	if query.Has("after") {
		param := query.Get("after")

		afterParam = param
	} else {
	}
	var beforeParam string
	if query.Has("before") {
		param := query.Get("before")

		beforeParam = param
	} else {
	}
	var runIdParam string
	if query.Has("run_id") {
		param := query.Get("run_id")

		runIdParam = param
	} else {
	}
	result, err := c.service.ListMessages(r.Context(), threadIdParam, limitParam, orderParam, afterParam, beforeParam, runIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateMessage - Create a message.
func (c *AssistantsAPIController) CreateMessage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	threadIdParam := params["thread_id"]
	if threadIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"thread_id"}, nil)
		return
	}
	createMessageRequestParam := CreateMessageRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createMessageRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateMessageRequestRequired(createMessageRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateMessageRequestConstraints(createMessageRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateMessage(r.Context(), threadIdParam, createMessageRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMessage - Retrieve a message.
func (c *AssistantsAPIController) GetMessage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	threadIdParam := params["thread_id"]
	if threadIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"thread_id"}, nil)
		return
	}
	messageIdParam := params["message_id"]
	if messageIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"message_id"}, nil)
		return
	}
	result, err := c.service.GetMessage(r.Context(), threadIdParam, messageIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ModifyMessage - Modifies a message.
func (c *AssistantsAPIController) ModifyMessage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	threadIdParam := params["thread_id"]
	if threadIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"thread_id"}, nil)
		return
	}
	messageIdParam := params["message_id"]
	if messageIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"message_id"}, nil)
		return
	}
	modifyMessageRequestParam := ModifyMessageRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&modifyMessageRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertModifyMessageRequestRequired(modifyMessageRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertModifyMessageRequestConstraints(modifyMessageRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ModifyMessage(r.Context(), threadIdParam, messageIdParam, modifyMessageRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateThreadAndRun - Create a thread and run it in one request.
func (c *AssistantsAPIController) CreateThreadAndRun(w http.ResponseWriter, r *http.Request) {
	createThreadAndRunRequestParam := CreateThreadAndRunRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createThreadAndRunRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateThreadAndRunRequestRequired(createThreadAndRunRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateThreadAndRunRequestConstraints(createThreadAndRunRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateThreadAndRun(r.Context(), createThreadAndRunRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListRuns - Returns a list of runs belonging to a thread.
func (c *AssistantsAPIController) ListRuns(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	threadIdParam := params["thread_id"]
	if threadIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"thread_id"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
		param := "desc"
		orderParam = param
	}
	var afterParam string
	if query.Has("after") {
		param := query.Get("after")

		afterParam = param
	} else {
	}
	var beforeParam string
	if query.Has("before") {
		param := query.Get("before")

		beforeParam = param
	} else {
	}
	result, err := c.service.ListRuns(r.Context(), threadIdParam, limitParam, orderParam, afterParam, beforeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateRun - Create a run.
func (c *AssistantsAPIController) CreateRun(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	threadIdParam := params["thread_id"]
	if threadIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"thread_id"}, nil)
		return
	}
	createRunRequestParam := CreateRunRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createRunRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateRunRequestRequired(createRunRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateRunRequestConstraints(createRunRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateRun(r.Context(), threadIdParam, createRunRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRun - Retrieves a run.
func (c *AssistantsAPIController) GetRun(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	threadIdParam := params["thread_id"]
	if threadIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"thread_id"}, nil)
		return
	}
	runIdParam := params["run_id"]
	if runIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"run_id"}, nil)
		return
	}
	result, err := c.service.GetRun(r.Context(), threadIdParam, runIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ModifyRun - Modifies a run.
func (c *AssistantsAPIController) ModifyRun(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	threadIdParam := params["thread_id"]
	if threadIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"thread_id"}, nil)
		return
	}
	runIdParam := params["run_id"]
	if runIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"run_id"}, nil)
		return
	}
	modifyRunRequestParam := ModifyRunRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&modifyRunRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertModifyRunRequestRequired(modifyRunRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertModifyRunRequestConstraints(modifyRunRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ModifyRun(r.Context(), threadIdParam, runIdParam, modifyRunRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SubmitToolOuputsToRun - When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request. 
func (c *AssistantsAPIController) SubmitToolOuputsToRun(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	threadIdParam := params["thread_id"]
	if threadIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"thread_id"}, nil)
		return
	}
	runIdParam := params["run_id"]
	if runIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"run_id"}, nil)
		return
	}
	submitToolOutputsRunRequestParam := SubmitToolOutputsRunRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&submitToolOutputsRunRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSubmitToolOutputsRunRequestRequired(submitToolOutputsRunRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSubmitToolOutputsRunRequestConstraints(submitToolOutputsRunRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SubmitToolOuputsToRun(r.Context(), threadIdParam, runIdParam, submitToolOutputsRunRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CancelRun - Cancels a run that is `in_progress`.
func (c *AssistantsAPIController) CancelRun(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	threadIdParam := params["thread_id"]
	if threadIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"thread_id"}, nil)
		return
	}
	runIdParam := params["run_id"]
	if runIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"run_id"}, nil)
		return
	}
	result, err := c.service.CancelRun(r.Context(), threadIdParam, runIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListRunSteps - Returns a list of run steps belonging to a run.
func (c *AssistantsAPIController) ListRunSteps(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	threadIdParam := params["thread_id"]
	if threadIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"thread_id"}, nil)
		return
	}
	runIdParam := params["run_id"]
	if runIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"run_id"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
		param := "desc"
		orderParam = param
	}
	var afterParam string
	if query.Has("after") {
		param := query.Get("after")

		afterParam = param
	} else {
	}
	var beforeParam string
	if query.Has("before") {
		param := query.Get("before")

		beforeParam = param
	} else {
	}
	result, err := c.service.ListRunSteps(r.Context(), threadIdParam, runIdParam, limitParam, orderParam, afterParam, beforeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRunStep - Retrieves a run step.
func (c *AssistantsAPIController) GetRunStep(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	threadIdParam := params["thread_id"]
	if threadIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"thread_id"}, nil)
		return
	}
	runIdParam := params["run_id"]
	if runIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"run_id"}, nil)
		return
	}
	stepIdParam := params["step_id"]
	if stepIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"step_id"}, nil)
		return
	}
	result, err := c.service.GetRunStep(r.Context(), threadIdParam, runIdParam, stepIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListAssistantFiles - Returns a list of assistant files.
func (c *AssistantsAPIController) ListAssistantFiles(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	assistantIdParam := params["assistant_id"]
	if assistantIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"assistant_id"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
		param := "desc"
		orderParam = param
	}
	var afterParam string
	if query.Has("after") {
		param := query.Get("after")

		afterParam = param
	} else {
	}
	var beforeParam string
	if query.Has("before") {
		param := query.Get("before")

		beforeParam = param
	} else {
	}
	result, err := c.service.ListAssistantFiles(r.Context(), assistantIdParam, limitParam, orderParam, afterParam, beforeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateAssistantFile - Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
func (c *AssistantsAPIController) CreateAssistantFile(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	assistantIdParam := params["assistant_id"]
	if assistantIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"assistant_id"}, nil)
		return
	}
	createAssistantFileRequestParam := CreateAssistantFileRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createAssistantFileRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateAssistantFileRequestRequired(createAssistantFileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateAssistantFileRequestConstraints(createAssistantFileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateAssistantFile(r.Context(), assistantIdParam, createAssistantFileRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAssistantFile - Retrieves an AssistantFile.
func (c *AssistantsAPIController) GetAssistantFile(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	assistantIdParam := params["assistant_id"]
	if assistantIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"assistant_id"}, nil)
		return
	}
	fileIdParam := params["file_id"]
	if fileIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"file_id"}, nil)
		return
	}
	result, err := c.service.GetAssistantFile(r.Context(), assistantIdParam, fileIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteAssistantFile - Delete an assistant file.
func (c *AssistantsAPIController) DeleteAssistantFile(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	assistantIdParam := params["assistant_id"]
	if assistantIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"assistant_id"}, nil)
		return
	}
	fileIdParam := params["file_id"]
	if fileIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"file_id"}, nil)
		return
	}
	result, err := c.service.DeleteAssistantFile(r.Context(), assistantIdParam, fileIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListMessageFiles - Returns a list of message files.
func (c *AssistantsAPIController) ListMessageFiles(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	threadIdParam := params["thread_id"]
	if threadIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"thread_id"}, nil)
		return
	}
	messageIdParam := params["message_id"]
	if messageIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"message_id"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
		param := "desc"
		orderParam = param
	}
	var afterParam string
	if query.Has("after") {
		param := query.Get("after")

		afterParam = param
	} else {
	}
	var beforeParam string
	if query.Has("before") {
		param := query.Get("before")

		beforeParam = param
	} else {
	}
	result, err := c.service.ListMessageFiles(r.Context(), threadIdParam, messageIdParam, limitParam, orderParam, afterParam, beforeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMessageFile - Retrieves a message file.
func (c *AssistantsAPIController) GetMessageFile(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	threadIdParam := params["thread_id"]
	if threadIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"thread_id"}, nil)
		return
	}
	messageIdParam := params["message_id"]
	if messageIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"message_id"}, nil)
		return
	}
	fileIdParam := params["file_id"]
	if fileIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"file_id"}, nil)
		return
	}
	result, err := c.service.GetMessageFile(r.Context(), threadIdParam, messageIdParam, fileIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
