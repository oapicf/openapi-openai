/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * API version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"os"

	"github.com/gorilla/mux"
)

// AudioAPIController binds http requests to an api service and writes the service results to the http response
type AudioAPIController struct {
	service AudioAPIServicer
	errorHandler ErrorHandler
}

// AudioAPIOption for how the controller is set up.
type AudioAPIOption func(*AudioAPIController)

// WithAudioAPIErrorHandler inject ErrorHandler into controller
func WithAudioAPIErrorHandler(h ErrorHandler) AudioAPIOption {
	return func(c *AudioAPIController) {
		c.errorHandler = h
	}
}

// NewAudioAPIController creates a default api controller
func NewAudioAPIController(s AudioAPIServicer, opts ...AudioAPIOption) Router {
	controller := &AudioAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AudioAPIController
func (c *AudioAPIController) Routes() Routes {
	return Routes{
		"CreateSpeech": Route{
			strings.ToUpper("Post"),
			"/v1/audio/speech",
			c.CreateSpeech,
		},
		"CreateTranscription": Route{
			strings.ToUpper("Post"),
			"/v1/audio/transcriptions",
			c.CreateTranscription,
		},
		"CreateTranslation": Route{
			strings.ToUpper("Post"),
			"/v1/audio/translations",
			c.CreateTranslation,
		},
	}
}

// CreateSpeech - Generates audio from the input text.
func (c *AudioAPIController) CreateSpeech(w http.ResponseWriter, r *http.Request) {
	createSpeechRequestParam := CreateSpeechRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createSpeechRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateSpeechRequestRequired(createSpeechRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateSpeechRequestConstraints(createSpeechRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSpeech(r.Context(), createSpeechRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateTranscription - Transcribes audio into the input language.
func (c *AudioAPIController) CreateTranscription(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var fileParam *os.File
	{
		param, err := ReadFormFileToTempFile(r, "file")
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		fileParam = param
	}
	
	
	
	
	modelParam := r.FormValue("model")
	
	
	languageParam := r.FormValue("language")
	
	
	promptParam := r.FormValue("prompt")
	
	
	responseFormatParam := r.FormValue("response_format")
	
	
	temperatureParam := r.FormValue("temperature")
	
	
	timestampGranularitiesParam := strings.Split(r.FormValue("timestamp_granularities[]"), ",")
	result, err := c.service.CreateTranscription(r.Context(), fileParam, modelParam, languageParam, promptParam, responseFormatParam, temperatureParam, timestampGranularitiesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateTranslation - Translates audio into English.
func (c *AudioAPIController) CreateTranslation(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var fileParam *os.File
	{
		param, err := ReadFormFileToTempFile(r, "file")
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		fileParam = param
	}
	
	
	
	
	modelParam := r.FormValue("model")
	
	
	promptParam := r.FormValue("prompt")
	
	
	responseFormatParam := r.FormValue("response_format")
	
	
	temperatureParam := r.FormValue("temperature")
	result, err := c.service.CreateTranslation(r.Context(), fileParam, modelParam, promptParam, responseFormatParam, temperatureParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
