/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * API version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// EmbeddingsAPIController binds http requests to an api service and writes the service results to the http response
type EmbeddingsAPIController struct {
	service EmbeddingsAPIServicer
	errorHandler ErrorHandler
}

// EmbeddingsAPIOption for how the controller is set up.
type EmbeddingsAPIOption func(*EmbeddingsAPIController)

// WithEmbeddingsAPIErrorHandler inject ErrorHandler into controller
func WithEmbeddingsAPIErrorHandler(h ErrorHandler) EmbeddingsAPIOption {
	return func(c *EmbeddingsAPIController) {
		c.errorHandler = h
	}
}

// NewEmbeddingsAPIController creates a default api controller
func NewEmbeddingsAPIController(s EmbeddingsAPIServicer, opts ...EmbeddingsAPIOption) Router {
	controller := &EmbeddingsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the EmbeddingsAPIController
func (c *EmbeddingsAPIController) Routes() Routes {
	return Routes{
		"CreateEmbedding": Route{
			strings.ToUpper("Post"),
			"/v1/embeddings",
			c.CreateEmbedding,
		},
	}
}

// CreateEmbedding - Creates an embedding vector representing the input text.
func (c *EmbeddingsAPIController) CreateEmbedding(w http.ResponseWriter, r *http.Request) {
	createEmbeddingRequestParam := CreateEmbeddingRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createEmbeddingRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateEmbeddingRequestRequired(createEmbeddingRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateEmbeddingRequestConstraints(createEmbeddingRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateEmbedding(r.Context(), createEmbeddingRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
