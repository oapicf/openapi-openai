/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * API version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ModelsAPIController binds http requests to an api service and writes the service results to the http response
type ModelsAPIController struct {
	service ModelsAPIServicer
	errorHandler ErrorHandler
}

// ModelsAPIOption for how the controller is set up.
type ModelsAPIOption func(*ModelsAPIController)

// WithModelsAPIErrorHandler inject ErrorHandler into controller
func WithModelsAPIErrorHandler(h ErrorHandler) ModelsAPIOption {
	return func(c *ModelsAPIController) {
		c.errorHandler = h
	}
}

// NewModelsAPIController creates a default api controller
func NewModelsAPIController(s ModelsAPIServicer, opts ...ModelsAPIOption) Router {
	controller := &ModelsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ModelsAPIController
func (c *ModelsAPIController) Routes() Routes {
	return Routes{
		"DeleteModel": Route{
			strings.ToUpper("Delete"),
			"/v1/models/{model}",
			c.DeleteModel,
		},
		"ListModels": Route{
			strings.ToUpper("Get"),
			"/v1/models",
			c.ListModels,
		},
		"RetrieveModel": Route{
			strings.ToUpper("Get"),
			"/v1/models/{model}",
			c.RetrieveModel,
		},
	}
}

// DeleteModel - Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
func (c *ModelsAPIController) DeleteModel(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	modelParam := params["model"]
	if modelParam == "" {
		c.errorHandler(w, r, &RequiredError{"model"}, nil)
		return
	}
	result, err := c.service.DeleteModel(r.Context(), modelParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListModels - Lists the currently available models, and provides basic information about each one such as the owner and availability.
func (c *ModelsAPIController) ListModels(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListModels(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RetrieveModel - Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
func (c *ModelsAPIController) RetrieveModel(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	modelParam := params["model"]
	if modelParam == "" {
		c.errorHandler(w, r, &RequiredError{"model"}, nil)
		return
	}
	result, err := c.service.RetrieveModel(r.Context(), modelParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
