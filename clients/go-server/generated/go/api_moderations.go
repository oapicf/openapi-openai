// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * API version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// ModerationsAPIController binds http requests to an api service and writes the service results to the http response
type ModerationsAPIController struct {
	service ModerationsAPIServicer
	errorHandler ErrorHandler
}

// ModerationsAPIOption for how the controller is set up.
type ModerationsAPIOption func(*ModerationsAPIController)

// WithModerationsAPIErrorHandler inject ErrorHandler into controller
func WithModerationsAPIErrorHandler(h ErrorHandler) ModerationsAPIOption {
	return func(c *ModerationsAPIController) {
		c.errorHandler = h
	}
}

// NewModerationsAPIController creates a default api controller
func NewModerationsAPIController(s ModerationsAPIServicer, opts ...ModerationsAPIOption) *ModerationsAPIController {
	controller := &ModerationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ModerationsAPIController
func (c *ModerationsAPIController) Routes() Routes {
	return Routes{
		"CreateModeration": Route{
			strings.ToUpper("Post"),
			"/v1/moderations",
			c.CreateModeration,
		},
	}
}

// CreateModeration - Classifies if text is potentially harmful.
func (c *ModerationsAPIController) CreateModeration(w http.ResponseWriter, r *http.Request) {
	createModerationRequestParam := CreateModerationRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createModerationRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateModerationRequestRequired(createModerationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateModerationRequestConstraints(createModerationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateModeration(r.Context(), createModerationRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
