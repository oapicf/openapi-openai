// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * API version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi




type ChatCompletionTokenLogprob struct {

	// The token.
	Token string `json:"token"`

	// The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
	Logprob float32 `json:"logprob"`

	// A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
	Bytes *[]int32 `json:"bytes"`

	// List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
	TopLogprobs []ChatCompletionTokenLogprobTopLogprobsInner `json:"top_logprobs"`
}

// AssertChatCompletionTokenLogprobRequired checks if the required fields are not zero-ed
func AssertChatCompletionTokenLogprobRequired(obj ChatCompletionTokenLogprob) error {
	elements := map[string]interface{}{
		"token": obj.Token,
		"logprob": obj.Logprob,
		"bytes": obj.Bytes,
		"top_logprobs": obj.TopLogprobs,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.TopLogprobs {
		if err := AssertChatCompletionTokenLogprobTopLogprobsInnerRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertChatCompletionTokenLogprobConstraints checks if the values respects the defined constraints
func AssertChatCompletionTokenLogprobConstraints(obj ChatCompletionTokenLogprob) error {
	for _, el := range obj.TopLogprobs {
		if err := AssertChatCompletionTokenLogprobTopLogprobsInnerConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
