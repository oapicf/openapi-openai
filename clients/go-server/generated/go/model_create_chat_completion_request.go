/*
 * OpenAI API
 *
 * APIs for sampling from and fine-tuning language models
 *
 * API version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"errors"
)



type CreateChatCompletionRequest struct {

	Model CreateChatCompletionRequestModel `json:"model"`

	// A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).
	Messages []ChatCompletionRequestMessage `json:"messages"`

	// A list of functions the model may generate JSON inputs for.
	Functions []ChatCompletionFunctions `json:"functions,omitempty"`

	FunctionCall CreateChatCompletionRequestFunctionCall `json:"function_call,omitempty"`

	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
	Temperature *float32 `json:"temperature,omitempty"`

	// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
	TopP *float32 `json:"top_p,omitempty"`

	// How many chat completion choices to generate for each input message.
	N *int32 `json:"n,omitempty"`

	// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb). 
	Stream *bool `json:"stream,omitempty"`

	Stop CreateChatCompletionRequestStop `json:"stop,omitempty"`

	// The maximum number of [tokens](/tokenizer) to generate in the chat completion.  The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens. 
	MaxTokens int32 `json:"max_tokens,omitempty"`

	// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 
	PresencePenalty *float32 `json:"presence_penalty,omitempty"`

	// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 
	FrequencyPenalty *float32 `json:"frequency_penalty,omitempty"`

	// Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. 
	LogitBias *map[string]interface{} `json:"logit_bias,omitempty"`

	// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
	User string `json:"user,omitempty"`
}

// AssertCreateChatCompletionRequestRequired checks if the required fields are not zero-ed
func AssertCreateChatCompletionRequestRequired(obj CreateChatCompletionRequest) error {
	elements := map[string]interface{}{
		"model": obj.Model,
		"messages": obj.Messages,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertCreateChatCompletionRequestModelRequired(obj.Model); err != nil {
		return err
	}
	for _, el := range obj.Messages {
		if err := AssertChatCompletionRequestMessageRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Functions {
		if err := AssertChatCompletionFunctionsRequired(el); err != nil {
			return err
		}
	}
	if err := AssertCreateChatCompletionRequestFunctionCallRequired(obj.FunctionCall); err != nil {
		return err
	}
	if err := AssertCreateChatCompletionRequestStopRequired(obj.Stop); err != nil {
		return err
	}
	return nil
}

// AssertCreateChatCompletionRequestConstraints checks if the values respects the defined constraints
func AssertCreateChatCompletionRequestConstraints(obj CreateChatCompletionRequest) error {
	if obj.Temperature != nil && *obj.Temperature < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Temperature != nil && *obj.Temperature > 2 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.TopP != nil && *obj.TopP < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.TopP != nil && *obj.TopP > 1 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.N != nil && *obj.N < 1 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.N != nil && *obj.N > 128 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.PresencePenalty != nil && *obj.PresencePenalty < -2 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.PresencePenalty != nil && *obj.PresencePenalty > 2 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.FrequencyPenalty != nil && *obj.FrequencyPenalty < -2 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.FrequencyPenalty != nil && *obj.FrequencyPenalty > 2 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
