/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * API version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"errors"
)



type CreateCompletionRequest struct {

	Model CreateCompletionRequestModel `json:"model"`

	Prompt *CreateCompletionRequestPrompt `json:"prompt"`

	// Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.  When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return â€“ `best_of` must be greater than `n`.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`. 
	BestOf *int32 `json:"best_of,omitempty"`

	// Echo back the prompt in addition to the completion 
	Echo *bool `json:"echo,omitempty"`

	// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
	FrequencyPenalty *float32 `json:"frequency_penalty,omitempty"`

	// Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated. 
	LogitBias *map[string]int32 `json:"logit_bias,omitempty"`

	// Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5. 
	Logprobs *int32 `json:"logprobs,omitempty"`

	// The maximum number of [tokens](/tokenizer) that can be generated in the completion.  The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. 
	MaxTokens *int32 `json:"max_tokens,omitempty"`

	// How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`. 
	N *int32 `json:"n,omitempty"`

	// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
	PresencePenalty *float32 `json:"presence_penalty,omitempty"`

	// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.  Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend. 
	Seed *int32 `json:"seed,omitempty"`

	Stop *CreateCompletionRequestStop `json:"stop,omitempty"`

	// Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). 
	Stream *bool `json:"stream,omitempty"`

	// The suffix that comes after a completion of inserted text.  This parameter is only supported for `gpt-3.5-turbo-instruct`. 
	Suffix *string `json:"suffix,omitempty"`

	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
	Temperature *float32 `json:"temperature,omitempty"`

	// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
	TopP *float32 `json:"top_p,omitempty"`

	// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
	User string `json:"user,omitempty"`
}

// AssertCreateCompletionRequestRequired checks if the required fields are not zero-ed
func AssertCreateCompletionRequestRequired(obj CreateCompletionRequest) error {
	elements := map[string]interface{}{
		"model": obj.Model,
		"prompt": obj.Prompt,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertCreateCompletionRequestModelRequired(obj.Model); err != nil {
		return err
	}
	if obj.Prompt != nil {
		if err := AssertCreateCompletionRequestPromptRequired(*obj.Prompt); err != nil {
			return err
		}
	}
	if obj.Stop != nil {
		if err := AssertCreateCompletionRequestStopRequired(*obj.Stop); err != nil {
			return err
		}
	}
	return nil
}

// AssertCreateCompletionRequestConstraints checks if the values respects the defined constraints
func AssertCreateCompletionRequestConstraints(obj CreateCompletionRequest) error {
	if obj.BestOf != nil && *obj.BestOf < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.BestOf != nil && *obj.BestOf > 20 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.FrequencyPenalty != nil && *obj.FrequencyPenalty < -2 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.FrequencyPenalty != nil && *obj.FrequencyPenalty > 2 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.Logprobs != nil && *obj.Logprobs < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Logprobs != nil && *obj.Logprobs > 5 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.MaxTokens != nil && *obj.MaxTokens < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.N != nil && *obj.N < 1 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.N != nil && *obj.N > 128 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.PresencePenalty != nil && *obj.PresencePenalty < -2 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.PresencePenalty != nil && *obj.PresencePenalty > 2 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.Seed != nil && *obj.Seed < -9223372036854775808 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Seed != nil && *obj.Seed > 9223372036854775807 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.Temperature != nil && *obj.Temperature < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Temperature != nil && *obj.Temperature > 2 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.TopP != nil && *obj.TopP < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.TopP != nil && *obj.TopP > 1 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
