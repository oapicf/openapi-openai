/*
 * OpenAI API
 *
 * APIs for sampling from and fine-tuning language models
 *
 * API version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"errors"
)



type CreateEditRequest struct {

	Model CreateEditRequestModel `json:"model"`

	// The input text to use as a starting point for the edit.
	Input *string `json:"input,omitempty"`

	// The instruction that tells the model how to edit the prompt.
	Instruction string `json:"instruction"`

	// How many edits to generate for the input and instruction.
	N *int32 `json:"n,omitempty"`

	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
	Temperature *float32 `json:"temperature,omitempty"`

	// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
	TopP *float32 `json:"top_p,omitempty"`
}

// AssertCreateEditRequestRequired checks if the required fields are not zero-ed
func AssertCreateEditRequestRequired(obj CreateEditRequest) error {
	elements := map[string]interface{}{
		"model": obj.Model,
		"instruction": obj.Instruction,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertCreateEditRequestModelRequired(obj.Model); err != nil {
		return err
	}
	return nil
}

// AssertCreateEditRequestConstraints checks if the values respects the defined constraints
func AssertCreateEditRequestConstraints(obj CreateEditRequest) error {
	if obj.N != nil && *obj.N < 1 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.N != nil && *obj.N > 20 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.Temperature != nil && *obj.Temperature < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Temperature != nil && *obj.Temperature > 2 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.TopP != nil && *obj.TopP < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.TopP != nil && *obj.TopP > 1 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
