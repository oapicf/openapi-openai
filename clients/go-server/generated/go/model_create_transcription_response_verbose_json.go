// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * API version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi




// CreateTranscriptionResponseVerboseJson - Represents a verbose json transcription response returned by model, based on the provided input.
type CreateTranscriptionResponseVerboseJson struct {

	// The language of the input audio.
	Language string `json:"language"`

	// The duration of the input audio.
	Duration string `json:"duration"`

	// The transcribed text.
	Text string `json:"text"`

	// Extracted words and their corresponding timestamps.
	Words []TranscriptionWord `json:"words,omitempty"`

	// Segments of the transcribed text and their corresponding details.
	Segments []TranscriptionSegment `json:"segments,omitempty"`
}

// AssertCreateTranscriptionResponseVerboseJsonRequired checks if the required fields are not zero-ed
func AssertCreateTranscriptionResponseVerboseJsonRequired(obj CreateTranscriptionResponseVerboseJson) error {
	elements := map[string]interface{}{
		"language": obj.Language,
		"duration": obj.Duration,
		"text": obj.Text,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Words {
		if err := AssertTranscriptionWordRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Segments {
		if err := AssertTranscriptionSegmentRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertCreateTranscriptionResponseVerboseJsonConstraints checks if the values respects the defined constraints
func AssertCreateTranscriptionResponseVerboseJsonConstraints(obj CreateTranscriptionResponseVerboseJson) error {
	for _, el := range obj.Words {
		if err := AssertTranscriptionWordConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Segments {
		if err := AssertTranscriptionSegmentConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
