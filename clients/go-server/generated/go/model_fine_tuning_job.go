// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * API version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi




// FineTuningJob - The `fine_tuning.job` object represents a fine-tuning job that has been created through the API. 
type FineTuningJob struct {

	// The object identifier, which can be referenced in the API endpoints.
	Id string `json:"id"`

	// The Unix timestamp (in seconds) for when the fine-tuning job was created.
	CreatedAt int32 `json:"created_at"`

	Error *FineTuningJobError `json:"error"`

	// The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
	FineTunedModel *string `json:"fine_tuned_model"`

	// The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
	FinishedAt *int32 `json:"finished_at"`

	Hyperparameters FineTuningJobHyperparameters `json:"hyperparameters"`

	// The base model that is being fine-tuned.
	Model string `json:"model"`

	// The object type, which is always \"fine_tuning.job\".
	Object string `json:"object"`

	// The organization that owns the fine-tuning job.
	OrganizationId string `json:"organization_id"`

	// The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
	ResultFiles []string `json:"result_files"`

	// The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
	Status string `json:"status"`

	// The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
	TrainedTokens *int32 `json:"trained_tokens"`

	// The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
	TrainingFile string `json:"training_file"`

	// The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
	ValidationFile *string `json:"validation_file"`

	// A list of integrations to enable for this fine-tuning job.
	Integrations *[]FineTuningJobIntegrationsInner `json:"integrations,omitempty"`

	// The seed used for the fine-tuning job.
	Seed int32 `json:"seed"`
}

// AssertFineTuningJobRequired checks if the required fields are not zero-ed
func AssertFineTuningJobRequired(obj FineTuningJob) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"created_at": obj.CreatedAt,
		"error": obj.Error,
		"fine_tuned_model": obj.FineTunedModel,
		"finished_at": obj.FinishedAt,
		"hyperparameters": obj.Hyperparameters,
		"model": obj.Model,
		"object": obj.Object,
		"organization_id": obj.OrganizationId,
		"result_files": obj.ResultFiles,
		"status": obj.Status,
		"trained_tokens": obj.TrainedTokens,
		"training_file": obj.TrainingFile,
		"validation_file": obj.ValidationFile,
		"seed": obj.Seed,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if obj.Error != nil {
		if err := AssertFineTuningJobErrorRequired(*obj.Error); err != nil {
			return err
		}
	}
	if err := AssertFineTuningJobHyperparametersRequired(obj.Hyperparameters); err != nil {
		return err
	}
	if obj.Integrations != nil {
		for _, el := range *obj.Integrations {
			if err := AssertFineTuningJobIntegrationsInnerRequired(el); err != nil {
				return err
			}
		}
	}
	return nil
}

// AssertFineTuningJobConstraints checks if the values respects the defined constraints
func AssertFineTuningJobConstraints(obj FineTuningJob) error {
    if obj.Error != nil {
     	if err := AssertFineTuningJobErrorConstraints(*obj.Error); err != nil {
     		return err
     	}
    }
	if err := AssertFineTuningJobHyperparametersConstraints(obj.Hyperparameters); err != nil {
		return err
	}
    if obj.Integrations != nil {
     	for _, el := range *obj.Integrations {
     		if err := AssertFineTuningJobIntegrationsInnerConstraints(el); err != nil {
     			return err
     		}
     	}
    }
	return nil
}
