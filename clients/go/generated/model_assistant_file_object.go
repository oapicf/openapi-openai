/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssistantFileObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssistantFileObject{}

// AssistantFileObject A list of [Files](/docs/api-reference/files) attached to an `assistant`.
type AssistantFileObject struct {
	// The identifier, which can be referenced in API endpoints.
	Id string `json:"id"`
	// The object type, which is always `assistant.file`.
	Object string `json:"object"`
	// The Unix timestamp (in seconds) for when the assistant file was created.
	CreatedAt int32 `json:"created_at"`
	// The assistant ID that the file is attached to.
	AssistantId string `json:"assistant_id"`
}

type _AssistantFileObject AssistantFileObject

// NewAssistantFileObject instantiates a new AssistantFileObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssistantFileObject(id string, object string, createdAt int32, assistantId string) *AssistantFileObject {
	this := AssistantFileObject{}
	this.Id = id
	this.Object = object
	this.CreatedAt = createdAt
	this.AssistantId = assistantId
	return &this
}

// NewAssistantFileObjectWithDefaults instantiates a new AssistantFileObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssistantFileObjectWithDefaults() *AssistantFileObject {
	this := AssistantFileObject{}
	return &this
}

// GetId returns the Id field value
func (o *AssistantFileObject) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AssistantFileObject) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AssistantFileObject) SetId(v string) {
	o.Id = v
}

// GetObject returns the Object field value
func (o *AssistantFileObject) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *AssistantFileObject) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *AssistantFileObject) SetObject(v string) {
	o.Object = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *AssistantFileObject) GetCreatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *AssistantFileObject) GetCreatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *AssistantFileObject) SetCreatedAt(v int32) {
	o.CreatedAt = v
}

// GetAssistantId returns the AssistantId field value
func (o *AssistantFileObject) GetAssistantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssistantId
}

// GetAssistantIdOk returns a tuple with the AssistantId field value
// and a boolean to check if the value has been set.
func (o *AssistantFileObject) GetAssistantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssistantId, true
}

// SetAssistantId sets field value
func (o *AssistantFileObject) SetAssistantId(v string) {
	o.AssistantId = v
}

func (o AssistantFileObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssistantFileObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["object"] = o.Object
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["assistant_id"] = o.AssistantId
	return toSerialize, nil
}

func (o *AssistantFileObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"object",
		"created_at",
		"assistant_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssistantFileObject := _AssistantFileObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssistantFileObject)

	if err != nil {
		return err
	}

	*o = AssistantFileObject(varAssistantFileObject)

	return err
}

type NullableAssistantFileObject struct {
	value *AssistantFileObject
	isSet bool
}

func (v NullableAssistantFileObject) Get() *AssistantFileObject {
	return v.value
}

func (v *NullableAssistantFileObject) Set(val *AssistantFileObject) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantFileObject) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantFileObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantFileObject(val *AssistantFileObject) *NullableAssistantFileObject {
	return &NullableAssistantFileObject{value: val, isSet: true}
}

func (v NullableAssistantFileObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantFileObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


