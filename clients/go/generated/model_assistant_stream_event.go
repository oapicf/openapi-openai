/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AssistantStreamEvent - Represents an event emitted when streaming a Run.  Each event in a server-sent events stream has an `event` and `data` property:  ``` event: thread.created data: {\"id\": \"thread_123\", \"object\": \"thread\", ...} ```  We emit events whenever a new object is created, transitions to a new state, or is being streamed in parts (deltas). For example, we emit `thread.run.created` when a new run is created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses to create a message during a run, we emit a `thread.message.created event`, a `thread.message.in_progress` event, many `thread.message.delta` events, and finally a `thread.message.completed` event.  We may add additional events over time, so we recommend handling unknown events gracefully in your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to integrate the Assistants API with streaming. 
type AssistantStreamEvent struct {
	DoneEvent *DoneEvent
	ErrorEvent *ErrorEvent
	MessageStreamEvent *MessageStreamEvent
	RunStepStreamEvent *RunStepStreamEvent
	RunStreamEvent *RunStreamEvent
	ThreadStreamEvent *ThreadStreamEvent
}

// DoneEventAsAssistantStreamEvent is a convenience function that returns DoneEvent wrapped in AssistantStreamEvent
func DoneEventAsAssistantStreamEvent(v *DoneEvent) AssistantStreamEvent {
	return AssistantStreamEvent{
		DoneEvent: v,
	}
}

// ErrorEventAsAssistantStreamEvent is a convenience function that returns ErrorEvent wrapped in AssistantStreamEvent
func ErrorEventAsAssistantStreamEvent(v *ErrorEvent) AssistantStreamEvent {
	return AssistantStreamEvent{
		ErrorEvent: v,
	}
}

// MessageStreamEventAsAssistantStreamEvent is a convenience function that returns MessageStreamEvent wrapped in AssistantStreamEvent
func MessageStreamEventAsAssistantStreamEvent(v *MessageStreamEvent) AssistantStreamEvent {
	return AssistantStreamEvent{
		MessageStreamEvent: v,
	}
}

// RunStepStreamEventAsAssistantStreamEvent is a convenience function that returns RunStepStreamEvent wrapped in AssistantStreamEvent
func RunStepStreamEventAsAssistantStreamEvent(v *RunStepStreamEvent) AssistantStreamEvent {
	return AssistantStreamEvent{
		RunStepStreamEvent: v,
	}
}

// RunStreamEventAsAssistantStreamEvent is a convenience function that returns RunStreamEvent wrapped in AssistantStreamEvent
func RunStreamEventAsAssistantStreamEvent(v *RunStreamEvent) AssistantStreamEvent {
	return AssistantStreamEvent{
		RunStreamEvent: v,
	}
}

// ThreadStreamEventAsAssistantStreamEvent is a convenience function that returns ThreadStreamEvent wrapped in AssistantStreamEvent
func ThreadStreamEventAsAssistantStreamEvent(v *ThreadStreamEvent) AssistantStreamEvent {
	return AssistantStreamEvent{
		ThreadStreamEvent: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AssistantStreamEvent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DoneEvent
	err = newStrictDecoder(data).Decode(&dst.DoneEvent)
	if err == nil {
		jsonDoneEvent, _ := json.Marshal(dst.DoneEvent)
		if string(jsonDoneEvent) == "{}" { // empty struct
			dst.DoneEvent = nil
		} else {
			match++
		}
	} else {
		dst.DoneEvent = nil
	}

	// try to unmarshal data into ErrorEvent
	err = newStrictDecoder(data).Decode(&dst.ErrorEvent)
	if err == nil {
		jsonErrorEvent, _ := json.Marshal(dst.ErrorEvent)
		if string(jsonErrorEvent) == "{}" { // empty struct
			dst.ErrorEvent = nil
		} else {
			match++
		}
	} else {
		dst.ErrorEvent = nil
	}

	// try to unmarshal data into MessageStreamEvent
	err = newStrictDecoder(data).Decode(&dst.MessageStreamEvent)
	if err == nil {
		jsonMessageStreamEvent, _ := json.Marshal(dst.MessageStreamEvent)
		if string(jsonMessageStreamEvent) == "{}" { // empty struct
			dst.MessageStreamEvent = nil
		} else {
			match++
		}
	} else {
		dst.MessageStreamEvent = nil
	}

	// try to unmarshal data into RunStepStreamEvent
	err = newStrictDecoder(data).Decode(&dst.RunStepStreamEvent)
	if err == nil {
		jsonRunStepStreamEvent, _ := json.Marshal(dst.RunStepStreamEvent)
		if string(jsonRunStepStreamEvent) == "{}" { // empty struct
			dst.RunStepStreamEvent = nil
		} else {
			match++
		}
	} else {
		dst.RunStepStreamEvent = nil
	}

	// try to unmarshal data into RunStreamEvent
	err = newStrictDecoder(data).Decode(&dst.RunStreamEvent)
	if err == nil {
		jsonRunStreamEvent, _ := json.Marshal(dst.RunStreamEvent)
		if string(jsonRunStreamEvent) == "{}" { // empty struct
			dst.RunStreamEvent = nil
		} else {
			match++
		}
	} else {
		dst.RunStreamEvent = nil
	}

	// try to unmarshal data into ThreadStreamEvent
	err = newStrictDecoder(data).Decode(&dst.ThreadStreamEvent)
	if err == nil {
		jsonThreadStreamEvent, _ := json.Marshal(dst.ThreadStreamEvent)
		if string(jsonThreadStreamEvent) == "{}" { // empty struct
			dst.ThreadStreamEvent = nil
		} else {
			match++
		}
	} else {
		dst.ThreadStreamEvent = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DoneEvent = nil
		dst.ErrorEvent = nil
		dst.MessageStreamEvent = nil
		dst.RunStepStreamEvent = nil
		dst.RunStreamEvent = nil
		dst.ThreadStreamEvent = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AssistantStreamEvent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AssistantStreamEvent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AssistantStreamEvent) MarshalJSON() ([]byte, error) {
	if src.DoneEvent != nil {
		return json.Marshal(&src.DoneEvent)
	}

	if src.ErrorEvent != nil {
		return json.Marshal(&src.ErrorEvent)
	}

	if src.MessageStreamEvent != nil {
		return json.Marshal(&src.MessageStreamEvent)
	}

	if src.RunStepStreamEvent != nil {
		return json.Marshal(&src.RunStepStreamEvent)
	}

	if src.RunStreamEvent != nil {
		return json.Marshal(&src.RunStreamEvent)
	}

	if src.ThreadStreamEvent != nil {
		return json.Marshal(&src.ThreadStreamEvent)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AssistantStreamEvent) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DoneEvent != nil {
		return obj.DoneEvent
	}

	if obj.ErrorEvent != nil {
		return obj.ErrorEvent
	}

	if obj.MessageStreamEvent != nil {
		return obj.MessageStreamEvent
	}

	if obj.RunStepStreamEvent != nil {
		return obj.RunStepStreamEvent
	}

	if obj.RunStreamEvent != nil {
		return obj.RunStreamEvent
	}

	if obj.ThreadStreamEvent != nil {
		return obj.ThreadStreamEvent
	}

	// all schemas are nil
	return nil
}

type NullableAssistantStreamEvent struct {
	value *AssistantStreamEvent
	isSet bool
}

func (v NullableAssistantStreamEvent) Get() *AssistantStreamEvent {
	return v.value
}

func (v *NullableAssistantStreamEvent) Set(val *AssistantStreamEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantStreamEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantStreamEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantStreamEvent(val *AssistantStreamEvent) *NullableAssistantStreamEvent {
	return &NullableAssistantStreamEvent{value: val, isSet: true}
}

func (v NullableAssistantStreamEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantStreamEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


