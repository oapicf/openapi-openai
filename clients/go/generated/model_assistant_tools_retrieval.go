/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssistantToolsRetrieval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssistantToolsRetrieval{}

// AssistantToolsRetrieval struct for AssistantToolsRetrieval
type AssistantToolsRetrieval struct {
	// The type of tool being defined: `retrieval`
	Type string `json:"type"`
}

type _AssistantToolsRetrieval AssistantToolsRetrieval

// NewAssistantToolsRetrieval instantiates a new AssistantToolsRetrieval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssistantToolsRetrieval(type_ string) *AssistantToolsRetrieval {
	this := AssistantToolsRetrieval{}
	this.Type = type_
	return &this
}

// NewAssistantToolsRetrievalWithDefaults instantiates a new AssistantToolsRetrieval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssistantToolsRetrievalWithDefaults() *AssistantToolsRetrieval {
	this := AssistantToolsRetrieval{}
	return &this
}

// GetType returns the Type field value
func (o *AssistantToolsRetrieval) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AssistantToolsRetrieval) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AssistantToolsRetrieval) SetType(v string) {
	o.Type = v
}

func (o AssistantToolsRetrieval) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssistantToolsRetrieval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *AssistantToolsRetrieval) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssistantToolsRetrieval := _AssistantToolsRetrieval{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssistantToolsRetrieval)

	if err != nil {
		return err
	}

	*o = AssistantToolsRetrieval(varAssistantToolsRetrieval)

	return err
}

type NullableAssistantToolsRetrieval struct {
	value *AssistantToolsRetrieval
	isSet bool
}

func (v NullableAssistantToolsRetrieval) Get() *AssistantToolsRetrieval {
	return v.value
}

func (v *NullableAssistantToolsRetrieval) Set(val *AssistantToolsRetrieval) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantToolsRetrieval) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantToolsRetrieval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantToolsRetrieval(val *AssistantToolsRetrieval) *NullableAssistantToolsRetrieval {
	return &NullableAssistantToolsRetrieval{value: val, isSet: true}
}

func (v NullableAssistantToolsRetrieval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantToolsRetrieval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


