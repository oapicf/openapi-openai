/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// AssistantsApiResponseFormatOption - Specifies the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.  Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length. 
type AssistantsApiResponseFormatOption struct {
	AssistantsApiResponseFormat *AssistantsApiResponseFormat
	String *string
}

// AssistantsApiResponseFormatAsAssistantsApiResponseFormatOption is a convenience function that returns AssistantsApiResponseFormat wrapped in AssistantsApiResponseFormatOption
func AssistantsApiResponseFormatAsAssistantsApiResponseFormatOption(v *AssistantsApiResponseFormat) AssistantsApiResponseFormatOption {
	return AssistantsApiResponseFormatOption{
		AssistantsApiResponseFormat: v,
	}
}

// stringAsAssistantsApiResponseFormatOption is a convenience function that returns string wrapped in AssistantsApiResponseFormatOption
func StringAsAssistantsApiResponseFormatOption(v *string) AssistantsApiResponseFormatOption {
	return AssistantsApiResponseFormatOption{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AssistantsApiResponseFormatOption) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AssistantsApiResponseFormat
	err = newStrictDecoder(data).Decode(&dst.AssistantsApiResponseFormat)
	if err == nil {
		jsonAssistantsApiResponseFormat, _ := json.Marshal(dst.AssistantsApiResponseFormat)
		if string(jsonAssistantsApiResponseFormat) == "{}" { // empty struct
			dst.AssistantsApiResponseFormat = nil
		} else {
			if err = validator.Validate(dst.AssistantsApiResponseFormat); err != nil {
				dst.AssistantsApiResponseFormat = nil
			} else {
				match++
			}
		}
	} else {
		dst.AssistantsApiResponseFormat = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AssistantsApiResponseFormat = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AssistantsApiResponseFormatOption)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AssistantsApiResponseFormatOption)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AssistantsApiResponseFormatOption) MarshalJSON() ([]byte, error) {
	if src.AssistantsApiResponseFormat != nil {
		return json.Marshal(&src.AssistantsApiResponseFormat)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AssistantsApiResponseFormatOption) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AssistantsApiResponseFormat != nil {
		return obj.AssistantsApiResponseFormat
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableAssistantsApiResponseFormatOption struct {
	value *AssistantsApiResponseFormatOption
	isSet bool
}

func (v NullableAssistantsApiResponseFormatOption) Get() *AssistantsApiResponseFormatOption {
	return v.value
}

func (v *NullableAssistantsApiResponseFormatOption) Set(val *AssistantsApiResponseFormatOption) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantsApiResponseFormatOption) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantsApiResponseFormatOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantsApiResponseFormatOption(val *AssistantsApiResponseFormatOption) *NullableAssistantsApiResponseFormatOption {
	return &NullableAssistantsApiResponseFormatOption{value: val, isSet: true}
}

func (v NullableAssistantsApiResponseFormatOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantsApiResponseFormatOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


