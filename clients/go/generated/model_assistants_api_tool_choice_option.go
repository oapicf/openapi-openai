/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AssistantsApiToolChoiceOption - Controls which (if any) tool is called by the model. `none` means the model will not call any tools and instead generates a message. `auto` is the default value and means the model can pick between generating a message or calling a tool. Specifying a particular tool like `{\"type\": \"TOOL_TYPE\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool. 
type AssistantsApiToolChoiceOption struct {
	AssistantsApiNamedToolChoice *AssistantsApiNamedToolChoice
	String *string
}

// AssistantsApiNamedToolChoiceAsAssistantsApiToolChoiceOption is a convenience function that returns AssistantsApiNamedToolChoice wrapped in AssistantsApiToolChoiceOption
func AssistantsApiNamedToolChoiceAsAssistantsApiToolChoiceOption(v *AssistantsApiNamedToolChoice) AssistantsApiToolChoiceOption {
	return AssistantsApiToolChoiceOption{
		AssistantsApiNamedToolChoice: v,
	}
}

// stringAsAssistantsApiToolChoiceOption is a convenience function that returns string wrapped in AssistantsApiToolChoiceOption
func StringAsAssistantsApiToolChoiceOption(v *string) AssistantsApiToolChoiceOption {
	return AssistantsApiToolChoiceOption{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AssistantsApiToolChoiceOption) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AssistantsApiNamedToolChoice
	err = newStrictDecoder(data).Decode(&dst.AssistantsApiNamedToolChoice)
	if err == nil {
		jsonAssistantsApiNamedToolChoice, _ := json.Marshal(dst.AssistantsApiNamedToolChoice)
		if string(jsonAssistantsApiNamedToolChoice) == "{}" { // empty struct
			dst.AssistantsApiNamedToolChoice = nil
		} else {
			match++
		}
	} else {
		dst.AssistantsApiNamedToolChoice = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AssistantsApiNamedToolChoice = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AssistantsApiToolChoiceOption)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AssistantsApiToolChoiceOption)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AssistantsApiToolChoiceOption) MarshalJSON() ([]byte, error) {
	if src.AssistantsApiNamedToolChoice != nil {
		return json.Marshal(&src.AssistantsApiNamedToolChoice)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AssistantsApiToolChoiceOption) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AssistantsApiNamedToolChoice != nil {
		return obj.AssistantsApiNamedToolChoice
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableAssistantsApiToolChoiceOption struct {
	value *AssistantsApiToolChoiceOption
	isSet bool
}

func (v NullableAssistantsApiToolChoiceOption) Get() *AssistantsApiToolChoiceOption {
	return v.value
}

func (v *NullableAssistantsApiToolChoiceOption) Set(val *AssistantsApiToolChoiceOption) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantsApiToolChoiceOption) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantsApiToolChoiceOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantsApiToolChoiceOption(val *AssistantsApiToolChoiceOption) *NullableAssistantsApiToolChoiceOption {
	return &NullableAssistantsApiToolChoiceOption{value: val, isSet: true}
}

func (v NullableAssistantsApiToolChoiceOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantsApiToolChoiceOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


