/*
OpenAI API

APIs for sampling from and fine-tuning language models

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChatCompletionFunctions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatCompletionFunctions{}

// ChatCompletionFunctions struct for ChatCompletionFunctions
type ChatCompletionFunctions struct {
	// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
	Name string `json:"name"`
	// The description of what the function does.
	Description *string `json:"description,omitempty"`
	// The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
	Parameters map[string]interface{} `json:"parameters,omitempty"`
}

type _ChatCompletionFunctions ChatCompletionFunctions

// NewChatCompletionFunctions instantiates a new ChatCompletionFunctions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatCompletionFunctions(name string) *ChatCompletionFunctions {
	this := ChatCompletionFunctions{}
	this.Name = name
	return &this
}

// NewChatCompletionFunctionsWithDefaults instantiates a new ChatCompletionFunctions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatCompletionFunctionsWithDefaults() *ChatCompletionFunctions {
	this := ChatCompletionFunctions{}
	return &this
}

// GetName returns the Name field value
func (o *ChatCompletionFunctions) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ChatCompletionFunctions) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ChatCompletionFunctions) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ChatCompletionFunctions) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionFunctions) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ChatCompletionFunctions) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ChatCompletionFunctions) SetDescription(v string) {
	o.Description = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ChatCompletionFunctions) GetParameters() map[string]interface{} {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionFunctions) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Parameters) {
		return map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ChatCompletionFunctions) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *ChatCompletionFunctions) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

func (o ChatCompletionFunctions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatCompletionFunctions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

func (o *ChatCompletionFunctions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChatCompletionFunctions := _ChatCompletionFunctions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChatCompletionFunctions)

	if err != nil {
		return err
	}

	*o = ChatCompletionFunctions(varChatCompletionFunctions)

	return err
}

type NullableChatCompletionFunctions struct {
	value *ChatCompletionFunctions
	isSet bool
}

func (v NullableChatCompletionFunctions) Get() *ChatCompletionFunctions {
	return v.value
}

func (v *NullableChatCompletionFunctions) Set(val *ChatCompletionFunctions) {
	v.value = val
	v.isSet = true
}

func (v NullableChatCompletionFunctions) IsSet() bool {
	return v.isSet
}

func (v *NullableChatCompletionFunctions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatCompletionFunctions(val *ChatCompletionFunctions) *NullableChatCompletionFunctions {
	return &NullableChatCompletionFunctions{value: val, isSet: true}
}

func (v NullableChatCompletionFunctions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatCompletionFunctions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


