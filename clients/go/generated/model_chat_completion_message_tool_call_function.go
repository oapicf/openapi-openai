/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChatCompletionMessageToolCallFunction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatCompletionMessageToolCallFunction{}

// ChatCompletionMessageToolCallFunction The function that the model called.
type ChatCompletionMessageToolCallFunction struct {
	// The name of the function to call.
	Name string `json:"name"`
	// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
	Arguments string `json:"arguments"`
}

type _ChatCompletionMessageToolCallFunction ChatCompletionMessageToolCallFunction

// NewChatCompletionMessageToolCallFunction instantiates a new ChatCompletionMessageToolCallFunction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatCompletionMessageToolCallFunction(name string, arguments string) *ChatCompletionMessageToolCallFunction {
	this := ChatCompletionMessageToolCallFunction{}
	this.Name = name
	this.Arguments = arguments
	return &this
}

// NewChatCompletionMessageToolCallFunctionWithDefaults instantiates a new ChatCompletionMessageToolCallFunction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatCompletionMessageToolCallFunctionWithDefaults() *ChatCompletionMessageToolCallFunction {
	this := ChatCompletionMessageToolCallFunction{}
	return &this
}

// GetName returns the Name field value
func (o *ChatCompletionMessageToolCallFunction) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ChatCompletionMessageToolCallFunction) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ChatCompletionMessageToolCallFunction) SetName(v string) {
	o.Name = v
}

// GetArguments returns the Arguments field value
func (o *ChatCompletionMessageToolCallFunction) GetArguments() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value
// and a boolean to check if the value has been set.
func (o *ChatCompletionMessageToolCallFunction) GetArgumentsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Arguments, true
}

// SetArguments sets field value
func (o *ChatCompletionMessageToolCallFunction) SetArguments(v string) {
	o.Arguments = v
}

func (o ChatCompletionMessageToolCallFunction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatCompletionMessageToolCallFunction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["arguments"] = o.Arguments
	return toSerialize, nil
}

func (o *ChatCompletionMessageToolCallFunction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"arguments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChatCompletionMessageToolCallFunction := _ChatCompletionMessageToolCallFunction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChatCompletionMessageToolCallFunction)

	if err != nil {
		return err
	}

	*o = ChatCompletionMessageToolCallFunction(varChatCompletionMessageToolCallFunction)

	return err
}

type NullableChatCompletionMessageToolCallFunction struct {
	value *ChatCompletionMessageToolCallFunction
	isSet bool
}

func (v NullableChatCompletionMessageToolCallFunction) Get() *ChatCompletionMessageToolCallFunction {
	return v.value
}

func (v *NullableChatCompletionMessageToolCallFunction) Set(val *ChatCompletionMessageToolCallFunction) {
	v.value = val
	v.isSet = true
}

func (v NullableChatCompletionMessageToolCallFunction) IsSet() bool {
	return v.isSet
}

func (v *NullableChatCompletionMessageToolCallFunction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatCompletionMessageToolCallFunction(val *ChatCompletionMessageToolCallFunction) *NullableChatCompletionMessageToolCallFunction {
	return &NullableChatCompletionMessageToolCallFunction{value: val, isSet: true}
}

func (v NullableChatCompletionMessageToolCallFunction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatCompletionMessageToolCallFunction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


