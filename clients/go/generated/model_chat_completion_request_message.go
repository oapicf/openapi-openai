/*
OpenAI API

APIs for sampling from and fine-tuning language models

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChatCompletionRequestMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatCompletionRequestMessage{}

// ChatCompletionRequestMessage struct for ChatCompletionRequestMessage
type ChatCompletionRequestMessage struct {
	// The role of the messages author. One of `system`, `user`, `assistant`, or `function`.
	Role string `json:"role"`
	// The contents of the message. `content` is required for all messages except assistant messages with function calls.
	Content *string `json:"content,omitempty"`
	// The name of the author of this message. `name` is required if role is `function`, and it should be the name of the function whose response is in the `content`. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
	Name *string `json:"name,omitempty"`
	FunctionCall *ChatCompletionRequestMessageFunctionCall `json:"function_call,omitempty"`
}

type _ChatCompletionRequestMessage ChatCompletionRequestMessage

// NewChatCompletionRequestMessage instantiates a new ChatCompletionRequestMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatCompletionRequestMessage(role string) *ChatCompletionRequestMessage {
	this := ChatCompletionRequestMessage{}
	this.Role = role
	return &this
}

// NewChatCompletionRequestMessageWithDefaults instantiates a new ChatCompletionRequestMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatCompletionRequestMessageWithDefaults() *ChatCompletionRequestMessage {
	this := ChatCompletionRequestMessage{}
	return &this
}

// GetRole returns the Role field value
func (o *ChatCompletionRequestMessage) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequestMessage) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *ChatCompletionRequestMessage) SetRole(v string) {
	o.Role = v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ChatCompletionRequestMessage) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequestMessage) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ChatCompletionRequestMessage) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ChatCompletionRequestMessage) SetContent(v string) {
	o.Content = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ChatCompletionRequestMessage) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequestMessage) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ChatCompletionRequestMessage) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ChatCompletionRequestMessage) SetName(v string) {
	o.Name = &v
}

// GetFunctionCall returns the FunctionCall field value if set, zero value otherwise.
func (o *ChatCompletionRequestMessage) GetFunctionCall() ChatCompletionRequestMessageFunctionCall {
	if o == nil || IsNil(o.FunctionCall) {
		var ret ChatCompletionRequestMessageFunctionCall
		return ret
	}
	return *o.FunctionCall
}

// GetFunctionCallOk returns a tuple with the FunctionCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequestMessage) GetFunctionCallOk() (*ChatCompletionRequestMessageFunctionCall, bool) {
	if o == nil || IsNil(o.FunctionCall) {
		return nil, false
	}
	return o.FunctionCall, true
}

// HasFunctionCall returns a boolean if a field has been set.
func (o *ChatCompletionRequestMessage) HasFunctionCall() bool {
	if o != nil && !IsNil(o.FunctionCall) {
		return true
	}

	return false
}

// SetFunctionCall gets a reference to the given ChatCompletionRequestMessageFunctionCall and assigns it to the FunctionCall field.
func (o *ChatCompletionRequestMessage) SetFunctionCall(v ChatCompletionRequestMessageFunctionCall) {
	o.FunctionCall = &v
}

func (o ChatCompletionRequestMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatCompletionRequestMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role"] = o.Role
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.FunctionCall) {
		toSerialize["function_call"] = o.FunctionCall
	}
	return toSerialize, nil
}

func (o *ChatCompletionRequestMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChatCompletionRequestMessage := _ChatCompletionRequestMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChatCompletionRequestMessage)

	if err != nil {
		return err
	}

	*o = ChatCompletionRequestMessage(varChatCompletionRequestMessage)

	return err
}

type NullableChatCompletionRequestMessage struct {
	value *ChatCompletionRequestMessage
	isSet bool
}

func (v NullableChatCompletionRequestMessage) Get() *ChatCompletionRequestMessage {
	return v.value
}

func (v *NullableChatCompletionRequestMessage) Set(val *ChatCompletionRequestMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableChatCompletionRequestMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableChatCompletionRequestMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatCompletionRequestMessage(val *ChatCompletionRequestMessage) *NullableChatCompletionRequestMessage {
	return &NullableChatCompletionRequestMessage{value: val, isSet: true}
}

func (v NullableChatCompletionRequestMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatCompletionRequestMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


