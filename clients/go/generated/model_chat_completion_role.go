/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ChatCompletionRole The role of the author of a message
type ChatCompletionRole string

// List of ChatCompletionRole
const (
	SYSTEM ChatCompletionRole = "system"
	USER ChatCompletionRole = "user"
	ASSISTANT ChatCompletionRole = "assistant"
	TOOL ChatCompletionRole = "tool"
	FUNCTION ChatCompletionRole = "function"
)

// All allowed values of ChatCompletionRole enum
var AllowedChatCompletionRoleEnumValues = []ChatCompletionRole{
	"system",
	"user",
	"assistant",
	"tool",
	"function",
}

func (v *ChatCompletionRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChatCompletionRole(value)
	for _, existing := range AllowedChatCompletionRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChatCompletionRole", value)
}

// NewChatCompletionRoleFromValue returns a pointer to a valid ChatCompletionRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChatCompletionRoleFromValue(v string) (*ChatCompletionRole, error) {
	ev := ChatCompletionRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChatCompletionRole: valid values are %v", v, AllowedChatCompletionRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChatCompletionRole) IsValid() bool {
	for _, existing := range AllowedChatCompletionRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChatCompletionRole value
func (v ChatCompletionRole) Ptr() *ChatCompletionRole {
	return &v
}

type NullableChatCompletionRole struct {
	value *ChatCompletionRole
	isSet bool
}

func (v NullableChatCompletionRole) Get() *ChatCompletionRole {
	return v.value
}

func (v *NullableChatCompletionRole) Set(val *ChatCompletionRole) {
	v.value = val
	v.isSet = true
}

func (v NullableChatCompletionRole) IsSet() bool {
	return v.isSet
}

func (v *NullableChatCompletionRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatCompletionRole(val *ChatCompletionRole) *NullableChatCompletionRole {
	return &NullableChatCompletionRole{value: val, isSet: true}
}

func (v NullableChatCompletionRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatCompletionRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

