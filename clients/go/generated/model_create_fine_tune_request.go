/*
OpenAI API

APIs for sampling from and fine-tuning language models

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateFineTuneRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateFineTuneRequest{}

// CreateFineTuneRequest struct for CreateFineTuneRequest
type CreateFineTuneRequest struct {
	// The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file, where each training example is a JSON object with the keys \"prompt\" and \"completion\". Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. 
	TrainingFile string `json:"training_file"`
	// The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model). Your train and validation data should be mutually exclusive.  Your dataset must be formatted as a JSONL file, where each validation example is a JSON object with the keys \"prompt\" and \"completion\". Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. 
	ValidationFile NullableString `json:"validation_file,omitempty"`
	Model NullableCreateFineTuneRequestModel `json:"model,omitempty"`
	// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. 
	NEpochs NullableInt32 `json:"n_epochs,omitempty"`
	// The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass.  By default, the batch size will be dynamically configured to be ~0.2% of the number of examples in the training set, capped at 256 - in general, we've found that larger batch sizes tend to work better for larger datasets. 
	BatchSize NullableInt32 `json:"batch_size,omitempty"`
	// The learning rate multiplier to use for training. The fine-tuning learning rate is the original learning rate used for pretraining multiplied by this value.  By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on final `batch_size` (larger learning rates tend to perform better with larger batch sizes). We recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best results. 
	LearningRateMultiplier NullableFloat32 `json:"learning_rate_multiplier,omitempty"`
	// The weight to use for loss on the prompt tokens. This controls how much the model tries to learn to generate the prompt (as compared to the completion which always has a weight of 1.0), and can add a stabilizing effect to training when completions are short.  If prompts are extremely long (relative to completions), it may make sense to reduce this weight so as to avoid over-prioritizing learning the prompt. 
	PromptLossWeight NullableFloat32 `json:"prompt_loss_weight,omitempty"`
	// If set, we calculate classification-specific metrics such as accuracy and F-1 score using the validation set at the end of every epoch. These metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).  In order to compute classification metrics, you must provide a `validation_file`. Additionally, you must specify `classification_n_classes` for multiclass classification or `classification_positive_class` for binary classification. 
	ComputeClassificationMetrics NullableBool `json:"compute_classification_metrics,omitempty"`
	// The number of classes in a classification task.  This parameter is required for multiclass classification. 
	ClassificationNClasses NullableInt32 `json:"classification_n_classes,omitempty"`
	// The positive class in binary classification.  This parameter is needed to generate precision, recall, and F1 metrics when doing binary classification. 
	ClassificationPositiveClass NullableString `json:"classification_positive_class,omitempty"`
	// If this is provided, we calculate F-beta scores at the specified beta values. The F-beta score is a generalization of F-1 score. This is only used for binary classification.  With a beta of 1 (i.e. the F-1 score), precision and recall are given the same weight. A larger beta score puts more weight on recall and less on precision. A smaller beta score puts more weight on precision and less on recall. 
	ClassificationBetas []float32 `json:"classification_betas,omitempty"`
	// A string of up to 40 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`. 
	Suffix NullableString `json:"suffix,omitempty"`
}

type _CreateFineTuneRequest CreateFineTuneRequest

// NewCreateFineTuneRequest instantiates a new CreateFineTuneRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateFineTuneRequest(trainingFile string) *CreateFineTuneRequest {
	this := CreateFineTuneRequest{}
	this.TrainingFile = trainingFile
	var model CreateFineTuneRequestModel = curie
	this.Model = *NewNullableCreateFineTuneRequestModel(&model)
	var nEpochs int32 = 4
	this.NEpochs = *NewNullableInt32(&nEpochs)
	var promptLossWeight float32 = 0.01
	this.PromptLossWeight = *NewNullableFloat32(&promptLossWeight)
	var computeClassificationMetrics bool = false
	this.ComputeClassificationMetrics = *NewNullableBool(&computeClassificationMetrics)
	return &this
}

// NewCreateFineTuneRequestWithDefaults instantiates a new CreateFineTuneRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateFineTuneRequestWithDefaults() *CreateFineTuneRequest {
	this := CreateFineTuneRequest{}
	var model CreateFineTuneRequestModel = curie
	this.Model = *NewNullableCreateFineTuneRequestModel(&model)
	var nEpochs int32 = 4
	this.NEpochs = *NewNullableInt32(&nEpochs)
	var promptLossWeight float32 = 0.01
	this.PromptLossWeight = *NewNullableFloat32(&promptLossWeight)
	var computeClassificationMetrics bool = false
	this.ComputeClassificationMetrics = *NewNullableBool(&computeClassificationMetrics)
	return &this
}

// GetTrainingFile returns the TrainingFile field value
func (o *CreateFineTuneRequest) GetTrainingFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TrainingFile
}

// GetTrainingFileOk returns a tuple with the TrainingFile field value
// and a boolean to check if the value has been set.
func (o *CreateFineTuneRequest) GetTrainingFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrainingFile, true
}

// SetTrainingFile sets field value
func (o *CreateFineTuneRequest) SetTrainingFile(v string) {
	o.TrainingFile = v
}

// GetValidationFile returns the ValidationFile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateFineTuneRequest) GetValidationFile() string {
	if o == nil || IsNil(o.ValidationFile.Get()) {
		var ret string
		return ret
	}
	return *o.ValidationFile.Get()
}

// GetValidationFileOk returns a tuple with the ValidationFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateFineTuneRequest) GetValidationFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValidationFile.Get(), o.ValidationFile.IsSet()
}

// HasValidationFile returns a boolean if a field has been set.
func (o *CreateFineTuneRequest) HasValidationFile() bool {
	if o != nil && o.ValidationFile.IsSet() {
		return true
	}

	return false
}

// SetValidationFile gets a reference to the given NullableString and assigns it to the ValidationFile field.
func (o *CreateFineTuneRequest) SetValidationFile(v string) {
	o.ValidationFile.Set(&v)
}
// SetValidationFileNil sets the value for ValidationFile to be an explicit nil
func (o *CreateFineTuneRequest) SetValidationFileNil() {
	o.ValidationFile.Set(nil)
}

// UnsetValidationFile ensures that no value is present for ValidationFile, not even an explicit nil
func (o *CreateFineTuneRequest) UnsetValidationFile() {
	o.ValidationFile.Unset()
}

// GetModel returns the Model field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateFineTuneRequest) GetModel() CreateFineTuneRequestModel {
	if o == nil || IsNil(o.Model.Get()) {
		var ret CreateFineTuneRequestModel
		return ret
	}
	return *o.Model.Get()
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateFineTuneRequest) GetModelOk() (*CreateFineTuneRequestModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Model.Get(), o.Model.IsSet()
}

// HasModel returns a boolean if a field has been set.
func (o *CreateFineTuneRequest) HasModel() bool {
	if o != nil && o.Model.IsSet() {
		return true
	}

	return false
}

// SetModel gets a reference to the given NullableCreateFineTuneRequestModel and assigns it to the Model field.
func (o *CreateFineTuneRequest) SetModel(v CreateFineTuneRequestModel) {
	o.Model.Set(&v)
}
// SetModelNil sets the value for Model to be an explicit nil
func (o *CreateFineTuneRequest) SetModelNil() {
	o.Model.Set(nil)
}

// UnsetModel ensures that no value is present for Model, not even an explicit nil
func (o *CreateFineTuneRequest) UnsetModel() {
	o.Model.Unset()
}

// GetNEpochs returns the NEpochs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateFineTuneRequest) GetNEpochs() int32 {
	if o == nil || IsNil(o.NEpochs.Get()) {
		var ret int32
		return ret
	}
	return *o.NEpochs.Get()
}

// GetNEpochsOk returns a tuple with the NEpochs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateFineTuneRequest) GetNEpochsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NEpochs.Get(), o.NEpochs.IsSet()
}

// HasNEpochs returns a boolean if a field has been set.
func (o *CreateFineTuneRequest) HasNEpochs() bool {
	if o != nil && o.NEpochs.IsSet() {
		return true
	}

	return false
}

// SetNEpochs gets a reference to the given NullableInt32 and assigns it to the NEpochs field.
func (o *CreateFineTuneRequest) SetNEpochs(v int32) {
	o.NEpochs.Set(&v)
}
// SetNEpochsNil sets the value for NEpochs to be an explicit nil
func (o *CreateFineTuneRequest) SetNEpochsNil() {
	o.NEpochs.Set(nil)
}

// UnsetNEpochs ensures that no value is present for NEpochs, not even an explicit nil
func (o *CreateFineTuneRequest) UnsetNEpochs() {
	o.NEpochs.Unset()
}

// GetBatchSize returns the BatchSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateFineTuneRequest) GetBatchSize() int32 {
	if o == nil || IsNil(o.BatchSize.Get()) {
		var ret int32
		return ret
	}
	return *o.BatchSize.Get()
}

// GetBatchSizeOk returns a tuple with the BatchSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateFineTuneRequest) GetBatchSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BatchSize.Get(), o.BatchSize.IsSet()
}

// HasBatchSize returns a boolean if a field has been set.
func (o *CreateFineTuneRequest) HasBatchSize() bool {
	if o != nil && o.BatchSize.IsSet() {
		return true
	}

	return false
}

// SetBatchSize gets a reference to the given NullableInt32 and assigns it to the BatchSize field.
func (o *CreateFineTuneRequest) SetBatchSize(v int32) {
	o.BatchSize.Set(&v)
}
// SetBatchSizeNil sets the value for BatchSize to be an explicit nil
func (o *CreateFineTuneRequest) SetBatchSizeNil() {
	o.BatchSize.Set(nil)
}

// UnsetBatchSize ensures that no value is present for BatchSize, not even an explicit nil
func (o *CreateFineTuneRequest) UnsetBatchSize() {
	o.BatchSize.Unset()
}

// GetLearningRateMultiplier returns the LearningRateMultiplier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateFineTuneRequest) GetLearningRateMultiplier() float32 {
	if o == nil || IsNil(o.LearningRateMultiplier.Get()) {
		var ret float32
		return ret
	}
	return *o.LearningRateMultiplier.Get()
}

// GetLearningRateMultiplierOk returns a tuple with the LearningRateMultiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateFineTuneRequest) GetLearningRateMultiplierOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LearningRateMultiplier.Get(), o.LearningRateMultiplier.IsSet()
}

// HasLearningRateMultiplier returns a boolean if a field has been set.
func (o *CreateFineTuneRequest) HasLearningRateMultiplier() bool {
	if o != nil && o.LearningRateMultiplier.IsSet() {
		return true
	}

	return false
}

// SetLearningRateMultiplier gets a reference to the given NullableFloat32 and assigns it to the LearningRateMultiplier field.
func (o *CreateFineTuneRequest) SetLearningRateMultiplier(v float32) {
	o.LearningRateMultiplier.Set(&v)
}
// SetLearningRateMultiplierNil sets the value for LearningRateMultiplier to be an explicit nil
func (o *CreateFineTuneRequest) SetLearningRateMultiplierNil() {
	o.LearningRateMultiplier.Set(nil)
}

// UnsetLearningRateMultiplier ensures that no value is present for LearningRateMultiplier, not even an explicit nil
func (o *CreateFineTuneRequest) UnsetLearningRateMultiplier() {
	o.LearningRateMultiplier.Unset()
}

// GetPromptLossWeight returns the PromptLossWeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateFineTuneRequest) GetPromptLossWeight() float32 {
	if o == nil || IsNil(o.PromptLossWeight.Get()) {
		var ret float32
		return ret
	}
	return *o.PromptLossWeight.Get()
}

// GetPromptLossWeightOk returns a tuple with the PromptLossWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateFineTuneRequest) GetPromptLossWeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PromptLossWeight.Get(), o.PromptLossWeight.IsSet()
}

// HasPromptLossWeight returns a boolean if a field has been set.
func (o *CreateFineTuneRequest) HasPromptLossWeight() bool {
	if o != nil && o.PromptLossWeight.IsSet() {
		return true
	}

	return false
}

// SetPromptLossWeight gets a reference to the given NullableFloat32 and assigns it to the PromptLossWeight field.
func (o *CreateFineTuneRequest) SetPromptLossWeight(v float32) {
	o.PromptLossWeight.Set(&v)
}
// SetPromptLossWeightNil sets the value for PromptLossWeight to be an explicit nil
func (o *CreateFineTuneRequest) SetPromptLossWeightNil() {
	o.PromptLossWeight.Set(nil)
}

// UnsetPromptLossWeight ensures that no value is present for PromptLossWeight, not even an explicit nil
func (o *CreateFineTuneRequest) UnsetPromptLossWeight() {
	o.PromptLossWeight.Unset()
}

// GetComputeClassificationMetrics returns the ComputeClassificationMetrics field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateFineTuneRequest) GetComputeClassificationMetrics() bool {
	if o == nil || IsNil(o.ComputeClassificationMetrics.Get()) {
		var ret bool
		return ret
	}
	return *o.ComputeClassificationMetrics.Get()
}

// GetComputeClassificationMetricsOk returns a tuple with the ComputeClassificationMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateFineTuneRequest) GetComputeClassificationMetricsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputeClassificationMetrics.Get(), o.ComputeClassificationMetrics.IsSet()
}

// HasComputeClassificationMetrics returns a boolean if a field has been set.
func (o *CreateFineTuneRequest) HasComputeClassificationMetrics() bool {
	if o != nil && o.ComputeClassificationMetrics.IsSet() {
		return true
	}

	return false
}

// SetComputeClassificationMetrics gets a reference to the given NullableBool and assigns it to the ComputeClassificationMetrics field.
func (o *CreateFineTuneRequest) SetComputeClassificationMetrics(v bool) {
	o.ComputeClassificationMetrics.Set(&v)
}
// SetComputeClassificationMetricsNil sets the value for ComputeClassificationMetrics to be an explicit nil
func (o *CreateFineTuneRequest) SetComputeClassificationMetricsNil() {
	o.ComputeClassificationMetrics.Set(nil)
}

// UnsetComputeClassificationMetrics ensures that no value is present for ComputeClassificationMetrics, not even an explicit nil
func (o *CreateFineTuneRequest) UnsetComputeClassificationMetrics() {
	o.ComputeClassificationMetrics.Unset()
}

// GetClassificationNClasses returns the ClassificationNClasses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateFineTuneRequest) GetClassificationNClasses() int32 {
	if o == nil || IsNil(o.ClassificationNClasses.Get()) {
		var ret int32
		return ret
	}
	return *o.ClassificationNClasses.Get()
}

// GetClassificationNClassesOk returns a tuple with the ClassificationNClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateFineTuneRequest) GetClassificationNClassesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClassificationNClasses.Get(), o.ClassificationNClasses.IsSet()
}

// HasClassificationNClasses returns a boolean if a field has been set.
func (o *CreateFineTuneRequest) HasClassificationNClasses() bool {
	if o != nil && o.ClassificationNClasses.IsSet() {
		return true
	}

	return false
}

// SetClassificationNClasses gets a reference to the given NullableInt32 and assigns it to the ClassificationNClasses field.
func (o *CreateFineTuneRequest) SetClassificationNClasses(v int32) {
	o.ClassificationNClasses.Set(&v)
}
// SetClassificationNClassesNil sets the value for ClassificationNClasses to be an explicit nil
func (o *CreateFineTuneRequest) SetClassificationNClassesNil() {
	o.ClassificationNClasses.Set(nil)
}

// UnsetClassificationNClasses ensures that no value is present for ClassificationNClasses, not even an explicit nil
func (o *CreateFineTuneRequest) UnsetClassificationNClasses() {
	o.ClassificationNClasses.Unset()
}

// GetClassificationPositiveClass returns the ClassificationPositiveClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateFineTuneRequest) GetClassificationPositiveClass() string {
	if o == nil || IsNil(o.ClassificationPositiveClass.Get()) {
		var ret string
		return ret
	}
	return *o.ClassificationPositiveClass.Get()
}

// GetClassificationPositiveClassOk returns a tuple with the ClassificationPositiveClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateFineTuneRequest) GetClassificationPositiveClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClassificationPositiveClass.Get(), o.ClassificationPositiveClass.IsSet()
}

// HasClassificationPositiveClass returns a boolean if a field has been set.
func (o *CreateFineTuneRequest) HasClassificationPositiveClass() bool {
	if o != nil && o.ClassificationPositiveClass.IsSet() {
		return true
	}

	return false
}

// SetClassificationPositiveClass gets a reference to the given NullableString and assigns it to the ClassificationPositiveClass field.
func (o *CreateFineTuneRequest) SetClassificationPositiveClass(v string) {
	o.ClassificationPositiveClass.Set(&v)
}
// SetClassificationPositiveClassNil sets the value for ClassificationPositiveClass to be an explicit nil
func (o *CreateFineTuneRequest) SetClassificationPositiveClassNil() {
	o.ClassificationPositiveClass.Set(nil)
}

// UnsetClassificationPositiveClass ensures that no value is present for ClassificationPositiveClass, not even an explicit nil
func (o *CreateFineTuneRequest) UnsetClassificationPositiveClass() {
	o.ClassificationPositiveClass.Unset()
}

// GetClassificationBetas returns the ClassificationBetas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateFineTuneRequest) GetClassificationBetas() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}
	return o.ClassificationBetas
}

// GetClassificationBetasOk returns a tuple with the ClassificationBetas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateFineTuneRequest) GetClassificationBetasOk() ([]float32, bool) {
	if o == nil || IsNil(o.ClassificationBetas) {
		return nil, false
	}
	return o.ClassificationBetas, true
}

// HasClassificationBetas returns a boolean if a field has been set.
func (o *CreateFineTuneRequest) HasClassificationBetas() bool {
	if o != nil && !IsNil(o.ClassificationBetas) {
		return true
	}

	return false
}

// SetClassificationBetas gets a reference to the given []float32 and assigns it to the ClassificationBetas field.
func (o *CreateFineTuneRequest) SetClassificationBetas(v []float32) {
	o.ClassificationBetas = v
}

// GetSuffix returns the Suffix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateFineTuneRequest) GetSuffix() string {
	if o == nil || IsNil(o.Suffix.Get()) {
		var ret string
		return ret
	}
	return *o.Suffix.Get()
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateFineTuneRequest) GetSuffixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suffix.Get(), o.Suffix.IsSet()
}

// HasSuffix returns a boolean if a field has been set.
func (o *CreateFineTuneRequest) HasSuffix() bool {
	if o != nil && o.Suffix.IsSet() {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given NullableString and assigns it to the Suffix field.
func (o *CreateFineTuneRequest) SetSuffix(v string) {
	o.Suffix.Set(&v)
}
// SetSuffixNil sets the value for Suffix to be an explicit nil
func (o *CreateFineTuneRequest) SetSuffixNil() {
	o.Suffix.Set(nil)
}

// UnsetSuffix ensures that no value is present for Suffix, not even an explicit nil
func (o *CreateFineTuneRequest) UnsetSuffix() {
	o.Suffix.Unset()
}

func (o CreateFineTuneRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateFineTuneRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["training_file"] = o.TrainingFile
	if o.ValidationFile.IsSet() {
		toSerialize["validation_file"] = o.ValidationFile.Get()
	}
	if o.Model.IsSet() {
		toSerialize["model"] = o.Model.Get()
	}
	if o.NEpochs.IsSet() {
		toSerialize["n_epochs"] = o.NEpochs.Get()
	}
	if o.BatchSize.IsSet() {
		toSerialize["batch_size"] = o.BatchSize.Get()
	}
	if o.LearningRateMultiplier.IsSet() {
		toSerialize["learning_rate_multiplier"] = o.LearningRateMultiplier.Get()
	}
	if o.PromptLossWeight.IsSet() {
		toSerialize["prompt_loss_weight"] = o.PromptLossWeight.Get()
	}
	if o.ComputeClassificationMetrics.IsSet() {
		toSerialize["compute_classification_metrics"] = o.ComputeClassificationMetrics.Get()
	}
	if o.ClassificationNClasses.IsSet() {
		toSerialize["classification_n_classes"] = o.ClassificationNClasses.Get()
	}
	if o.ClassificationPositiveClass.IsSet() {
		toSerialize["classification_positive_class"] = o.ClassificationPositiveClass.Get()
	}
	if o.ClassificationBetas != nil {
		toSerialize["classification_betas"] = o.ClassificationBetas
	}
	if o.Suffix.IsSet() {
		toSerialize["suffix"] = o.Suffix.Get()
	}
	return toSerialize, nil
}

func (o *CreateFineTuneRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"training_file",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateFineTuneRequest := _CreateFineTuneRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateFineTuneRequest)

	if err != nil {
		return err
	}

	*o = CreateFineTuneRequest(varCreateFineTuneRequest)

	return err
}

type NullableCreateFineTuneRequest struct {
	value *CreateFineTuneRequest
	isSet bool
}

func (v NullableCreateFineTuneRequest) Get() *CreateFineTuneRequest {
	return v.value
}

func (v *NullableCreateFineTuneRequest) Set(val *CreateFineTuneRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateFineTuneRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateFineTuneRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateFineTuneRequest(val *CreateFineTuneRequest) *NullableCreateFineTuneRequest {
	return &NullableCreateFineTuneRequest{value: val, isSet: true}
}

func (v NullableCreateFineTuneRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateFineTuneRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


