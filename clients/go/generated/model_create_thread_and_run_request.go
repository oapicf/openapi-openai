/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateThreadAndRunRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateThreadAndRunRequest{}

// CreateThreadAndRunRequest struct for CreateThreadAndRunRequest
type CreateThreadAndRunRequest struct {
	// The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
	AssistantId string `json:"assistant_id"`
	Thread *CreateThreadRequest `json:"thread,omitempty"`
	Model NullableCreateRunRequestModel `json:"model,omitempty"`
	// Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
	Instructions NullableString `json:"instructions,omitempty"`
	// Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
	Tools []CreateThreadAndRunRequestToolsInner `json:"tools,omitempty"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. 
	Temperature NullableFloat32 `json:"temperature,omitempty"`
	// If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message. 
	Stream NullableBool `json:"stream,omitempty"`
	// The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `complete`. See `incomplete_details` for more info. 
	MaxPromptTokens NullableInt32 `json:"max_prompt_tokens,omitempty"`
	// The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info. 
	MaxCompletionTokens NullableInt32 `json:"max_completion_tokens,omitempty"`
	TruncationStrategy *TruncationObject `json:"truncation_strategy,omitempty"`
	ToolChoice *AssistantsApiToolChoiceOption `json:"tool_choice,omitempty"`
	ResponseFormat *AssistantsApiResponseFormatOption `json:"response_format,omitempty"`
}

type _CreateThreadAndRunRequest CreateThreadAndRunRequest

// NewCreateThreadAndRunRequest instantiates a new CreateThreadAndRunRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateThreadAndRunRequest(assistantId string) *CreateThreadAndRunRequest {
	this := CreateThreadAndRunRequest{}
	this.AssistantId = assistantId
	var temperature float32 = 1
	this.Temperature = *NewNullableFloat32(&temperature)
	return &this
}

// NewCreateThreadAndRunRequestWithDefaults instantiates a new CreateThreadAndRunRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateThreadAndRunRequestWithDefaults() *CreateThreadAndRunRequest {
	this := CreateThreadAndRunRequest{}
	var temperature float32 = 1
	this.Temperature = *NewNullableFloat32(&temperature)
	return &this
}

// GetAssistantId returns the AssistantId field value
func (o *CreateThreadAndRunRequest) GetAssistantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssistantId
}

// GetAssistantIdOk returns a tuple with the AssistantId field value
// and a boolean to check if the value has been set.
func (o *CreateThreadAndRunRequest) GetAssistantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssistantId, true
}

// SetAssistantId sets field value
func (o *CreateThreadAndRunRequest) SetAssistantId(v string) {
	o.AssistantId = v
}

// GetThread returns the Thread field value if set, zero value otherwise.
func (o *CreateThreadAndRunRequest) GetThread() CreateThreadRequest {
	if o == nil || IsNil(o.Thread) {
		var ret CreateThreadRequest
		return ret
	}
	return *o.Thread
}

// GetThreadOk returns a tuple with the Thread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateThreadAndRunRequest) GetThreadOk() (*CreateThreadRequest, bool) {
	if o == nil || IsNil(o.Thread) {
		return nil, false
	}
	return o.Thread, true
}

// HasThread returns a boolean if a field has been set.
func (o *CreateThreadAndRunRequest) HasThread() bool {
	if o != nil && !IsNil(o.Thread) {
		return true
	}

	return false
}

// SetThread gets a reference to the given CreateThreadRequest and assigns it to the Thread field.
func (o *CreateThreadAndRunRequest) SetThread(v CreateThreadRequest) {
	o.Thread = &v
}

// GetModel returns the Model field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateThreadAndRunRequest) GetModel() CreateRunRequestModel {
	if o == nil || IsNil(o.Model.Get()) {
		var ret CreateRunRequestModel
		return ret
	}
	return *o.Model.Get()
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateThreadAndRunRequest) GetModelOk() (*CreateRunRequestModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Model.Get(), o.Model.IsSet()
}

// HasModel returns a boolean if a field has been set.
func (o *CreateThreadAndRunRequest) HasModel() bool {
	if o != nil && o.Model.IsSet() {
		return true
	}

	return false
}

// SetModel gets a reference to the given NullableCreateRunRequestModel and assigns it to the Model field.
func (o *CreateThreadAndRunRequest) SetModel(v CreateRunRequestModel) {
	o.Model.Set(&v)
}
// SetModelNil sets the value for Model to be an explicit nil
func (o *CreateThreadAndRunRequest) SetModelNil() {
	o.Model.Set(nil)
}

// UnsetModel ensures that no value is present for Model, not even an explicit nil
func (o *CreateThreadAndRunRequest) UnsetModel() {
	o.Model.Unset()
}

// GetInstructions returns the Instructions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateThreadAndRunRequest) GetInstructions() string {
	if o == nil || IsNil(o.Instructions.Get()) {
		var ret string
		return ret
	}
	return *o.Instructions.Get()
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateThreadAndRunRequest) GetInstructionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instructions.Get(), o.Instructions.IsSet()
}

// HasInstructions returns a boolean if a field has been set.
func (o *CreateThreadAndRunRequest) HasInstructions() bool {
	if o != nil && o.Instructions.IsSet() {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given NullableString and assigns it to the Instructions field.
func (o *CreateThreadAndRunRequest) SetInstructions(v string) {
	o.Instructions.Set(&v)
}
// SetInstructionsNil sets the value for Instructions to be an explicit nil
func (o *CreateThreadAndRunRequest) SetInstructionsNil() {
	o.Instructions.Set(nil)
}

// UnsetInstructions ensures that no value is present for Instructions, not even an explicit nil
func (o *CreateThreadAndRunRequest) UnsetInstructions() {
	o.Instructions.Unset()
}

// GetTools returns the Tools field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateThreadAndRunRequest) GetTools() []CreateThreadAndRunRequestToolsInner {
	if o == nil {
		var ret []CreateThreadAndRunRequestToolsInner
		return ret
	}
	return o.Tools
}

// GetToolsOk returns a tuple with the Tools field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateThreadAndRunRequest) GetToolsOk() ([]CreateThreadAndRunRequestToolsInner, bool) {
	if o == nil || IsNil(o.Tools) {
		return nil, false
	}
	return o.Tools, true
}

// HasTools returns a boolean if a field has been set.
func (o *CreateThreadAndRunRequest) HasTools() bool {
	if o != nil && !IsNil(o.Tools) {
		return true
	}

	return false
}

// SetTools gets a reference to the given []CreateThreadAndRunRequestToolsInner and assigns it to the Tools field.
func (o *CreateThreadAndRunRequest) SetTools(v []CreateThreadAndRunRequestToolsInner) {
	o.Tools = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateThreadAndRunRequest) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateThreadAndRunRequest) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CreateThreadAndRunRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *CreateThreadAndRunRequest) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateThreadAndRunRequest) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature.Get()) {
		var ret float32
		return ret
	}
	return *o.Temperature.Get()
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateThreadAndRunRequest) GetTemperatureOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Temperature.Get(), o.Temperature.IsSet()
}

// HasTemperature returns a boolean if a field has been set.
func (o *CreateThreadAndRunRequest) HasTemperature() bool {
	if o != nil && o.Temperature.IsSet() {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given NullableFloat32 and assigns it to the Temperature field.
func (o *CreateThreadAndRunRequest) SetTemperature(v float32) {
	o.Temperature.Set(&v)
}
// SetTemperatureNil sets the value for Temperature to be an explicit nil
func (o *CreateThreadAndRunRequest) SetTemperatureNil() {
	o.Temperature.Set(nil)
}

// UnsetTemperature ensures that no value is present for Temperature, not even an explicit nil
func (o *CreateThreadAndRunRequest) UnsetTemperature() {
	o.Temperature.Unset()
}

// GetStream returns the Stream field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateThreadAndRunRequest) GetStream() bool {
	if o == nil || IsNil(o.Stream.Get()) {
		var ret bool
		return ret
	}
	return *o.Stream.Get()
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateThreadAndRunRequest) GetStreamOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stream.Get(), o.Stream.IsSet()
}

// HasStream returns a boolean if a field has been set.
func (o *CreateThreadAndRunRequest) HasStream() bool {
	if o != nil && o.Stream.IsSet() {
		return true
	}

	return false
}

// SetStream gets a reference to the given NullableBool and assigns it to the Stream field.
func (o *CreateThreadAndRunRequest) SetStream(v bool) {
	o.Stream.Set(&v)
}
// SetStreamNil sets the value for Stream to be an explicit nil
func (o *CreateThreadAndRunRequest) SetStreamNil() {
	o.Stream.Set(nil)
}

// UnsetStream ensures that no value is present for Stream, not even an explicit nil
func (o *CreateThreadAndRunRequest) UnsetStream() {
	o.Stream.Unset()
}

// GetMaxPromptTokens returns the MaxPromptTokens field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateThreadAndRunRequest) GetMaxPromptTokens() int32 {
	if o == nil || IsNil(o.MaxPromptTokens.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxPromptTokens.Get()
}

// GetMaxPromptTokensOk returns a tuple with the MaxPromptTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateThreadAndRunRequest) GetMaxPromptTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxPromptTokens.Get(), o.MaxPromptTokens.IsSet()
}

// HasMaxPromptTokens returns a boolean if a field has been set.
func (o *CreateThreadAndRunRequest) HasMaxPromptTokens() bool {
	if o != nil && o.MaxPromptTokens.IsSet() {
		return true
	}

	return false
}

// SetMaxPromptTokens gets a reference to the given NullableInt32 and assigns it to the MaxPromptTokens field.
func (o *CreateThreadAndRunRequest) SetMaxPromptTokens(v int32) {
	o.MaxPromptTokens.Set(&v)
}
// SetMaxPromptTokensNil sets the value for MaxPromptTokens to be an explicit nil
func (o *CreateThreadAndRunRequest) SetMaxPromptTokensNil() {
	o.MaxPromptTokens.Set(nil)
}

// UnsetMaxPromptTokens ensures that no value is present for MaxPromptTokens, not even an explicit nil
func (o *CreateThreadAndRunRequest) UnsetMaxPromptTokens() {
	o.MaxPromptTokens.Unset()
}

// GetMaxCompletionTokens returns the MaxCompletionTokens field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateThreadAndRunRequest) GetMaxCompletionTokens() int32 {
	if o == nil || IsNil(o.MaxCompletionTokens.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxCompletionTokens.Get()
}

// GetMaxCompletionTokensOk returns a tuple with the MaxCompletionTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateThreadAndRunRequest) GetMaxCompletionTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxCompletionTokens.Get(), o.MaxCompletionTokens.IsSet()
}

// HasMaxCompletionTokens returns a boolean if a field has been set.
func (o *CreateThreadAndRunRequest) HasMaxCompletionTokens() bool {
	if o != nil && o.MaxCompletionTokens.IsSet() {
		return true
	}

	return false
}

// SetMaxCompletionTokens gets a reference to the given NullableInt32 and assigns it to the MaxCompletionTokens field.
func (o *CreateThreadAndRunRequest) SetMaxCompletionTokens(v int32) {
	o.MaxCompletionTokens.Set(&v)
}
// SetMaxCompletionTokensNil sets the value for MaxCompletionTokens to be an explicit nil
func (o *CreateThreadAndRunRequest) SetMaxCompletionTokensNil() {
	o.MaxCompletionTokens.Set(nil)
}

// UnsetMaxCompletionTokens ensures that no value is present for MaxCompletionTokens, not even an explicit nil
func (o *CreateThreadAndRunRequest) UnsetMaxCompletionTokens() {
	o.MaxCompletionTokens.Unset()
}

// GetTruncationStrategy returns the TruncationStrategy field value if set, zero value otherwise.
func (o *CreateThreadAndRunRequest) GetTruncationStrategy() TruncationObject {
	if o == nil || IsNil(o.TruncationStrategy) {
		var ret TruncationObject
		return ret
	}
	return *o.TruncationStrategy
}

// GetTruncationStrategyOk returns a tuple with the TruncationStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateThreadAndRunRequest) GetTruncationStrategyOk() (*TruncationObject, bool) {
	if o == nil || IsNil(o.TruncationStrategy) {
		return nil, false
	}
	return o.TruncationStrategy, true
}

// HasTruncationStrategy returns a boolean if a field has been set.
func (o *CreateThreadAndRunRequest) HasTruncationStrategy() bool {
	if o != nil && !IsNil(o.TruncationStrategy) {
		return true
	}

	return false
}

// SetTruncationStrategy gets a reference to the given TruncationObject and assigns it to the TruncationStrategy field.
func (o *CreateThreadAndRunRequest) SetTruncationStrategy(v TruncationObject) {
	o.TruncationStrategy = &v
}

// GetToolChoice returns the ToolChoice field value if set, zero value otherwise.
func (o *CreateThreadAndRunRequest) GetToolChoice() AssistantsApiToolChoiceOption {
	if o == nil || IsNil(o.ToolChoice) {
		var ret AssistantsApiToolChoiceOption
		return ret
	}
	return *o.ToolChoice
}

// GetToolChoiceOk returns a tuple with the ToolChoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateThreadAndRunRequest) GetToolChoiceOk() (*AssistantsApiToolChoiceOption, bool) {
	if o == nil || IsNil(o.ToolChoice) {
		return nil, false
	}
	return o.ToolChoice, true
}

// HasToolChoice returns a boolean if a field has been set.
func (o *CreateThreadAndRunRequest) HasToolChoice() bool {
	if o != nil && !IsNil(o.ToolChoice) {
		return true
	}

	return false
}

// SetToolChoice gets a reference to the given AssistantsApiToolChoiceOption and assigns it to the ToolChoice field.
func (o *CreateThreadAndRunRequest) SetToolChoice(v AssistantsApiToolChoiceOption) {
	o.ToolChoice = &v
}

// GetResponseFormat returns the ResponseFormat field value if set, zero value otherwise.
func (o *CreateThreadAndRunRequest) GetResponseFormat() AssistantsApiResponseFormatOption {
	if o == nil || IsNil(o.ResponseFormat) {
		var ret AssistantsApiResponseFormatOption
		return ret
	}
	return *o.ResponseFormat
}

// GetResponseFormatOk returns a tuple with the ResponseFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateThreadAndRunRequest) GetResponseFormatOk() (*AssistantsApiResponseFormatOption, bool) {
	if o == nil || IsNil(o.ResponseFormat) {
		return nil, false
	}
	return o.ResponseFormat, true
}

// HasResponseFormat returns a boolean if a field has been set.
func (o *CreateThreadAndRunRequest) HasResponseFormat() bool {
	if o != nil && !IsNil(o.ResponseFormat) {
		return true
	}

	return false
}

// SetResponseFormat gets a reference to the given AssistantsApiResponseFormatOption and assigns it to the ResponseFormat field.
func (o *CreateThreadAndRunRequest) SetResponseFormat(v AssistantsApiResponseFormatOption) {
	o.ResponseFormat = &v
}

func (o CreateThreadAndRunRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateThreadAndRunRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assistant_id"] = o.AssistantId
	if !IsNil(o.Thread) {
		toSerialize["thread"] = o.Thread
	}
	if o.Model.IsSet() {
		toSerialize["model"] = o.Model.Get()
	}
	if o.Instructions.IsSet() {
		toSerialize["instructions"] = o.Instructions.Get()
	}
	if o.Tools != nil {
		toSerialize["tools"] = o.Tools
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Temperature.IsSet() {
		toSerialize["temperature"] = o.Temperature.Get()
	}
	if o.Stream.IsSet() {
		toSerialize["stream"] = o.Stream.Get()
	}
	if o.MaxPromptTokens.IsSet() {
		toSerialize["max_prompt_tokens"] = o.MaxPromptTokens.Get()
	}
	if o.MaxCompletionTokens.IsSet() {
		toSerialize["max_completion_tokens"] = o.MaxCompletionTokens.Get()
	}
	if !IsNil(o.TruncationStrategy) {
		toSerialize["truncation_strategy"] = o.TruncationStrategy
	}
	if !IsNil(o.ToolChoice) {
		toSerialize["tool_choice"] = o.ToolChoice
	}
	if !IsNil(o.ResponseFormat) {
		toSerialize["response_format"] = o.ResponseFormat
	}
	return toSerialize, nil
}

func (o *CreateThreadAndRunRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assistant_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateThreadAndRunRequest := _CreateThreadAndRunRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateThreadAndRunRequest)

	if err != nil {
		return err
	}

	*o = CreateThreadAndRunRequest(varCreateThreadAndRunRequest)

	return err
}

type NullableCreateThreadAndRunRequest struct {
	value *CreateThreadAndRunRequest
	isSet bool
}

func (v NullableCreateThreadAndRunRequest) Get() *CreateThreadAndRunRequest {
	return v.value
}

func (v *NullableCreateThreadAndRunRequest) Set(val *CreateThreadAndRunRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateThreadAndRunRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateThreadAndRunRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateThreadAndRunRequest(val *CreateThreadAndRunRequest) *NullableCreateThreadAndRunRequest {
	return &NullableCreateThreadAndRunRequest{value: val, isSet: true}
}

func (v NullableCreateThreadAndRunRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateThreadAndRunRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


