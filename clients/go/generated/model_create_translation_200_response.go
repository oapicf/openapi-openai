/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CreateTranslation200Response - struct for CreateTranslation200Response
type CreateTranslation200Response struct {
	CreateTranslationResponseJson *CreateTranslationResponseJson
	CreateTranslationResponseVerboseJson *CreateTranslationResponseVerboseJson
}

// CreateTranslationResponseJsonAsCreateTranslation200Response is a convenience function that returns CreateTranslationResponseJson wrapped in CreateTranslation200Response
func CreateTranslationResponseJsonAsCreateTranslation200Response(v *CreateTranslationResponseJson) CreateTranslation200Response {
	return CreateTranslation200Response{
		CreateTranslationResponseJson: v,
	}
}

// CreateTranslationResponseVerboseJsonAsCreateTranslation200Response is a convenience function that returns CreateTranslationResponseVerboseJson wrapped in CreateTranslation200Response
func CreateTranslationResponseVerboseJsonAsCreateTranslation200Response(v *CreateTranslationResponseVerboseJson) CreateTranslation200Response {
	return CreateTranslation200Response{
		CreateTranslationResponseVerboseJson: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateTranslation200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateTranslationResponseJson
	err = newStrictDecoder(data).Decode(&dst.CreateTranslationResponseJson)
	if err == nil {
		jsonCreateTranslationResponseJson, _ := json.Marshal(dst.CreateTranslationResponseJson)
		if string(jsonCreateTranslationResponseJson) == "{}" { // empty struct
			dst.CreateTranslationResponseJson = nil
		} else {
			if err = validator.Validate(dst.CreateTranslationResponseJson); err != nil {
				dst.CreateTranslationResponseJson = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateTranslationResponseJson = nil
	}

	// try to unmarshal data into CreateTranslationResponseVerboseJson
	err = newStrictDecoder(data).Decode(&dst.CreateTranslationResponseVerboseJson)
	if err == nil {
		jsonCreateTranslationResponseVerboseJson, _ := json.Marshal(dst.CreateTranslationResponseVerboseJson)
		if string(jsonCreateTranslationResponseVerboseJson) == "{}" { // empty struct
			dst.CreateTranslationResponseVerboseJson = nil
		} else {
			if err = validator.Validate(dst.CreateTranslationResponseVerboseJson); err != nil {
				dst.CreateTranslationResponseVerboseJson = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateTranslationResponseVerboseJson = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateTranslationResponseJson = nil
		dst.CreateTranslationResponseVerboseJson = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateTranslation200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateTranslation200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateTranslation200Response) MarshalJSON() ([]byte, error) {
	if src.CreateTranslationResponseJson != nil {
		return json.Marshal(&src.CreateTranslationResponseJson)
	}

	if src.CreateTranslationResponseVerboseJson != nil {
		return json.Marshal(&src.CreateTranslationResponseVerboseJson)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateTranslation200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateTranslationResponseJson != nil {
		return obj.CreateTranslationResponseJson
	}

	if obj.CreateTranslationResponseVerboseJson != nil {
		return obj.CreateTranslationResponseVerboseJson
	}

	// all schemas are nil
	return nil
}

type NullableCreateTranslation200Response struct {
	value *CreateTranslation200Response
	isSet bool
}

func (v NullableCreateTranslation200Response) Get() *CreateTranslation200Response {
	return v.value
}

func (v *NullableCreateTranslation200Response) Set(val *CreateTranslation200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTranslation200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTranslation200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTranslation200Response(val *CreateTranslation200Response) *NullableCreateTranslation200Response {
	return &NullableCreateTranslation200Response{value: val, isSet: true}
}

func (v NullableCreateTranslation200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTranslation200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


