/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MessageContentTextAnnotationsFilePathObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageContentTextAnnotationsFilePathObject{}

// MessageContentTextAnnotationsFilePathObject A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
type MessageContentTextAnnotationsFilePathObject struct {
	// Always `file_path`.
	Type string `json:"type"`
	// The text in the message content that needs to be replaced.
	Text string `json:"text"`
	FilePath MessageContentTextAnnotationsFilePathObjectFilePath `json:"file_path"`
	StartIndex int32 `json:"start_index"`
	EndIndex int32 `json:"end_index"`
}

type _MessageContentTextAnnotationsFilePathObject MessageContentTextAnnotationsFilePathObject

// NewMessageContentTextAnnotationsFilePathObject instantiates a new MessageContentTextAnnotationsFilePathObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageContentTextAnnotationsFilePathObject(type_ string, text string, filePath MessageContentTextAnnotationsFilePathObjectFilePath, startIndex int32, endIndex int32) *MessageContentTextAnnotationsFilePathObject {
	this := MessageContentTextAnnotationsFilePathObject{}
	this.Type = type_
	this.Text = text
	this.FilePath = filePath
	this.StartIndex = startIndex
	this.EndIndex = endIndex
	return &this
}

// NewMessageContentTextAnnotationsFilePathObjectWithDefaults instantiates a new MessageContentTextAnnotationsFilePathObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageContentTextAnnotationsFilePathObjectWithDefaults() *MessageContentTextAnnotationsFilePathObject {
	this := MessageContentTextAnnotationsFilePathObject{}
	return &this
}

// GetType returns the Type field value
func (o *MessageContentTextAnnotationsFilePathObject) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MessageContentTextAnnotationsFilePathObject) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MessageContentTextAnnotationsFilePathObject) SetType(v string) {
	o.Type = v
}

// GetText returns the Text field value
func (o *MessageContentTextAnnotationsFilePathObject) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *MessageContentTextAnnotationsFilePathObject) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *MessageContentTextAnnotationsFilePathObject) SetText(v string) {
	o.Text = v
}

// GetFilePath returns the FilePath field value
func (o *MessageContentTextAnnotationsFilePathObject) GetFilePath() MessageContentTextAnnotationsFilePathObjectFilePath {
	if o == nil {
		var ret MessageContentTextAnnotationsFilePathObjectFilePath
		return ret
	}

	return o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value
// and a boolean to check if the value has been set.
func (o *MessageContentTextAnnotationsFilePathObject) GetFilePathOk() (*MessageContentTextAnnotationsFilePathObjectFilePath, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilePath, true
}

// SetFilePath sets field value
func (o *MessageContentTextAnnotationsFilePathObject) SetFilePath(v MessageContentTextAnnotationsFilePathObjectFilePath) {
	o.FilePath = v
}

// GetStartIndex returns the StartIndex field value
func (o *MessageContentTextAnnotationsFilePathObject) GetStartIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StartIndex
}

// GetStartIndexOk returns a tuple with the StartIndex field value
// and a boolean to check if the value has been set.
func (o *MessageContentTextAnnotationsFilePathObject) GetStartIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartIndex, true
}

// SetStartIndex sets field value
func (o *MessageContentTextAnnotationsFilePathObject) SetStartIndex(v int32) {
	o.StartIndex = v
}

// GetEndIndex returns the EndIndex field value
func (o *MessageContentTextAnnotationsFilePathObject) GetEndIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EndIndex
}

// GetEndIndexOk returns a tuple with the EndIndex field value
// and a boolean to check if the value has been set.
func (o *MessageContentTextAnnotationsFilePathObject) GetEndIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndIndex, true
}

// SetEndIndex sets field value
func (o *MessageContentTextAnnotationsFilePathObject) SetEndIndex(v int32) {
	o.EndIndex = v
}

func (o MessageContentTextAnnotationsFilePathObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageContentTextAnnotationsFilePathObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["text"] = o.Text
	toSerialize["file_path"] = o.FilePath
	toSerialize["start_index"] = o.StartIndex
	toSerialize["end_index"] = o.EndIndex
	return toSerialize, nil
}

func (o *MessageContentTextAnnotationsFilePathObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"text",
		"file_path",
		"start_index",
		"end_index",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageContentTextAnnotationsFilePathObject := _MessageContentTextAnnotationsFilePathObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessageContentTextAnnotationsFilePathObject)

	if err != nil {
		return err
	}

	*o = MessageContentTextAnnotationsFilePathObject(varMessageContentTextAnnotationsFilePathObject)

	return err
}

type NullableMessageContentTextAnnotationsFilePathObject struct {
	value *MessageContentTextAnnotationsFilePathObject
	isSet bool
}

func (v NullableMessageContentTextAnnotationsFilePathObject) Get() *MessageContentTextAnnotationsFilePathObject {
	return v.value
}

func (v *NullableMessageContentTextAnnotationsFilePathObject) Set(val *MessageContentTextAnnotationsFilePathObject) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageContentTextAnnotationsFilePathObject) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageContentTextAnnotationsFilePathObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageContentTextAnnotationsFilePathObject(val *MessageContentTextAnnotationsFilePathObject) *NullableMessageContentTextAnnotationsFilePathObject {
	return &NullableMessageContentTextAnnotationsFilePathObject{value: val, isSet: true}
}

func (v NullableMessageContentTextAnnotationsFilePathObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageContentTextAnnotationsFilePathObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


