/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MessageContentTextObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageContentTextObject{}

// MessageContentTextObject The text content that is part of a message.
type MessageContentTextObject struct {
	// Always `text`.
	Type string `json:"type"`
	Text MessageContentTextObjectText `json:"text"`
}

type _MessageContentTextObject MessageContentTextObject

// NewMessageContentTextObject instantiates a new MessageContentTextObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageContentTextObject(type_ string, text MessageContentTextObjectText) *MessageContentTextObject {
	this := MessageContentTextObject{}
	this.Type = type_
	this.Text = text
	return &this
}

// NewMessageContentTextObjectWithDefaults instantiates a new MessageContentTextObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageContentTextObjectWithDefaults() *MessageContentTextObject {
	this := MessageContentTextObject{}
	return &this
}

// GetType returns the Type field value
func (o *MessageContentTextObject) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MessageContentTextObject) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MessageContentTextObject) SetType(v string) {
	o.Type = v
}

// GetText returns the Text field value
func (o *MessageContentTextObject) GetText() MessageContentTextObjectText {
	if o == nil {
		var ret MessageContentTextObjectText
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *MessageContentTextObject) GetTextOk() (*MessageContentTextObjectText, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *MessageContentTextObject) SetText(v MessageContentTextObjectText) {
	o.Text = v
}

func (o MessageContentTextObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageContentTextObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["text"] = o.Text
	return toSerialize, nil
}

func (o *MessageContentTextObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageContentTextObject := _MessageContentTextObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessageContentTextObject)

	if err != nil {
		return err
	}

	*o = MessageContentTextObject(varMessageContentTextObject)

	return err
}

type NullableMessageContentTextObject struct {
	value *MessageContentTextObject
	isSet bool
}

func (v NullableMessageContentTextObject) Get() *MessageContentTextObject {
	return v.value
}

func (v *NullableMessageContentTextObject) Set(val *MessageContentTextObject) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageContentTextObject) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageContentTextObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageContentTextObject(val *MessageContentTextObject) *NullableMessageContentTextObject {
	return &NullableMessageContentTextObject{value: val, isSet: true}
}

func (v NullableMessageContentTextObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageContentTextObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


