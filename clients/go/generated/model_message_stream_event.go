/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// MessageStreamEvent - struct for MessageStreamEvent
type MessageStreamEvent struct {
	MessageStreamEventOneOf *MessageStreamEventOneOf
	MessageStreamEventOneOf1 *MessageStreamEventOneOf1
	MessageStreamEventOneOf2 *MessageStreamEventOneOf2
	MessageStreamEventOneOf3 *MessageStreamEventOneOf3
	MessageStreamEventOneOf4 *MessageStreamEventOneOf4
}

// MessageStreamEventOneOfAsMessageStreamEvent is a convenience function that returns MessageStreamEventOneOf wrapped in MessageStreamEvent
func MessageStreamEventOneOfAsMessageStreamEvent(v *MessageStreamEventOneOf) MessageStreamEvent {
	return MessageStreamEvent{
		MessageStreamEventOneOf: v,
	}
}

// MessageStreamEventOneOf1AsMessageStreamEvent is a convenience function that returns MessageStreamEventOneOf1 wrapped in MessageStreamEvent
func MessageStreamEventOneOf1AsMessageStreamEvent(v *MessageStreamEventOneOf1) MessageStreamEvent {
	return MessageStreamEvent{
		MessageStreamEventOneOf1: v,
	}
}

// MessageStreamEventOneOf2AsMessageStreamEvent is a convenience function that returns MessageStreamEventOneOf2 wrapped in MessageStreamEvent
func MessageStreamEventOneOf2AsMessageStreamEvent(v *MessageStreamEventOneOf2) MessageStreamEvent {
	return MessageStreamEvent{
		MessageStreamEventOneOf2: v,
	}
}

// MessageStreamEventOneOf3AsMessageStreamEvent is a convenience function that returns MessageStreamEventOneOf3 wrapped in MessageStreamEvent
func MessageStreamEventOneOf3AsMessageStreamEvent(v *MessageStreamEventOneOf3) MessageStreamEvent {
	return MessageStreamEvent{
		MessageStreamEventOneOf3: v,
	}
}

// MessageStreamEventOneOf4AsMessageStreamEvent is a convenience function that returns MessageStreamEventOneOf4 wrapped in MessageStreamEvent
func MessageStreamEventOneOf4AsMessageStreamEvent(v *MessageStreamEventOneOf4) MessageStreamEvent {
	return MessageStreamEvent{
		MessageStreamEventOneOf4: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MessageStreamEvent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MessageStreamEventOneOf
	err = newStrictDecoder(data).Decode(&dst.MessageStreamEventOneOf)
	if err == nil {
		jsonMessageStreamEventOneOf, _ := json.Marshal(dst.MessageStreamEventOneOf)
		if string(jsonMessageStreamEventOneOf) == "{}" { // empty struct
			dst.MessageStreamEventOneOf = nil
		} else {
			if err = validator.Validate(dst.MessageStreamEventOneOf); err != nil {
				dst.MessageStreamEventOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageStreamEventOneOf = nil
	}

	// try to unmarshal data into MessageStreamEventOneOf1
	err = newStrictDecoder(data).Decode(&dst.MessageStreamEventOneOf1)
	if err == nil {
		jsonMessageStreamEventOneOf1, _ := json.Marshal(dst.MessageStreamEventOneOf1)
		if string(jsonMessageStreamEventOneOf1) == "{}" { // empty struct
			dst.MessageStreamEventOneOf1 = nil
		} else {
			if err = validator.Validate(dst.MessageStreamEventOneOf1); err != nil {
				dst.MessageStreamEventOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageStreamEventOneOf1 = nil
	}

	// try to unmarshal data into MessageStreamEventOneOf2
	err = newStrictDecoder(data).Decode(&dst.MessageStreamEventOneOf2)
	if err == nil {
		jsonMessageStreamEventOneOf2, _ := json.Marshal(dst.MessageStreamEventOneOf2)
		if string(jsonMessageStreamEventOneOf2) == "{}" { // empty struct
			dst.MessageStreamEventOneOf2 = nil
		} else {
			if err = validator.Validate(dst.MessageStreamEventOneOf2); err != nil {
				dst.MessageStreamEventOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageStreamEventOneOf2 = nil
	}

	// try to unmarshal data into MessageStreamEventOneOf3
	err = newStrictDecoder(data).Decode(&dst.MessageStreamEventOneOf3)
	if err == nil {
		jsonMessageStreamEventOneOf3, _ := json.Marshal(dst.MessageStreamEventOneOf3)
		if string(jsonMessageStreamEventOneOf3) == "{}" { // empty struct
			dst.MessageStreamEventOneOf3 = nil
		} else {
			if err = validator.Validate(dst.MessageStreamEventOneOf3); err != nil {
				dst.MessageStreamEventOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageStreamEventOneOf3 = nil
	}

	// try to unmarshal data into MessageStreamEventOneOf4
	err = newStrictDecoder(data).Decode(&dst.MessageStreamEventOneOf4)
	if err == nil {
		jsonMessageStreamEventOneOf4, _ := json.Marshal(dst.MessageStreamEventOneOf4)
		if string(jsonMessageStreamEventOneOf4) == "{}" { // empty struct
			dst.MessageStreamEventOneOf4 = nil
		} else {
			if err = validator.Validate(dst.MessageStreamEventOneOf4); err != nil {
				dst.MessageStreamEventOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageStreamEventOneOf4 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MessageStreamEventOneOf = nil
		dst.MessageStreamEventOneOf1 = nil
		dst.MessageStreamEventOneOf2 = nil
		dst.MessageStreamEventOneOf3 = nil
		dst.MessageStreamEventOneOf4 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MessageStreamEvent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MessageStreamEvent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MessageStreamEvent) MarshalJSON() ([]byte, error) {
	if src.MessageStreamEventOneOf != nil {
		return json.Marshal(&src.MessageStreamEventOneOf)
	}

	if src.MessageStreamEventOneOf1 != nil {
		return json.Marshal(&src.MessageStreamEventOneOf1)
	}

	if src.MessageStreamEventOneOf2 != nil {
		return json.Marshal(&src.MessageStreamEventOneOf2)
	}

	if src.MessageStreamEventOneOf3 != nil {
		return json.Marshal(&src.MessageStreamEventOneOf3)
	}

	if src.MessageStreamEventOneOf4 != nil {
		return json.Marshal(&src.MessageStreamEventOneOf4)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MessageStreamEvent) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MessageStreamEventOneOf != nil {
		return obj.MessageStreamEventOneOf
	}

	if obj.MessageStreamEventOneOf1 != nil {
		return obj.MessageStreamEventOneOf1
	}

	if obj.MessageStreamEventOneOf2 != nil {
		return obj.MessageStreamEventOneOf2
	}

	if obj.MessageStreamEventOneOf3 != nil {
		return obj.MessageStreamEventOneOf3
	}

	if obj.MessageStreamEventOneOf4 != nil {
		return obj.MessageStreamEventOneOf4
	}

	// all schemas are nil
	return nil
}

type NullableMessageStreamEvent struct {
	value *MessageStreamEvent
	isSet bool
}

func (v NullableMessageStreamEvent) Get() *MessageStreamEvent {
	return v.value
}

func (v *NullableMessageStreamEvent) Set(val *MessageStreamEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageStreamEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageStreamEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageStreamEvent(val *MessageStreamEvent) *NullableMessageStreamEvent {
	return &NullableMessageStreamEvent{value: val, isSet: true}
}

func (v NullableMessageStreamEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageStreamEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


