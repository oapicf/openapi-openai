/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RunObjectIncompleteDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunObjectIncompleteDetails{}

// RunObjectIncompleteDetails Details on why the run is incomplete. Will be `null` if the run is not incomplete.
type RunObjectIncompleteDetails struct {
	// The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
	Reason *string `json:"reason,omitempty"`
}

// NewRunObjectIncompleteDetails instantiates a new RunObjectIncompleteDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunObjectIncompleteDetails() *RunObjectIncompleteDetails {
	this := RunObjectIncompleteDetails{}
	return &this
}

// NewRunObjectIncompleteDetailsWithDefaults instantiates a new RunObjectIncompleteDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunObjectIncompleteDetailsWithDefaults() *RunObjectIncompleteDetails {
	this := RunObjectIncompleteDetails{}
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *RunObjectIncompleteDetails) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunObjectIncompleteDetails) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *RunObjectIncompleteDetails) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *RunObjectIncompleteDetails) SetReason(v string) {
	o.Reason = &v
}

func (o RunObjectIncompleteDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunObjectIncompleteDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableRunObjectIncompleteDetails struct {
	value *RunObjectIncompleteDetails
	isSet bool
}

func (v NullableRunObjectIncompleteDetails) Get() *RunObjectIncompleteDetails {
	return v.value
}

func (v *NullableRunObjectIncompleteDetails) Set(val *RunObjectIncompleteDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableRunObjectIncompleteDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableRunObjectIncompleteDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunObjectIncompleteDetails(val *RunObjectIncompleteDetails) *NullableRunObjectIncompleteDetails {
	return &NullableRunObjectIncompleteDetails{value: val, isSet: true}
}

func (v NullableRunObjectIncompleteDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunObjectIncompleteDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


