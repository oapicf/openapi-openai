/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RunStepDeltaStepDetailsToolCallsFunctionObjectFunction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunStepDeltaStepDetailsToolCallsFunctionObjectFunction{}

// RunStepDeltaStepDetailsToolCallsFunctionObjectFunction The definition of the function that was called.
type RunStepDeltaStepDetailsToolCallsFunctionObjectFunction struct {
	// The name of the function.
	Name *string `json:"name,omitempty"`
	// The arguments passed to the function.
	Arguments *string `json:"arguments,omitempty"`
	// The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
	Output NullableString `json:"output,omitempty"`
}

// NewRunStepDeltaStepDetailsToolCallsFunctionObjectFunction instantiates a new RunStepDeltaStepDetailsToolCallsFunctionObjectFunction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunStepDeltaStepDetailsToolCallsFunctionObjectFunction() *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction {
	this := RunStepDeltaStepDetailsToolCallsFunctionObjectFunction{}
	return &this
}

// NewRunStepDeltaStepDetailsToolCallsFunctionObjectFunctionWithDefaults instantiates a new RunStepDeltaStepDetailsToolCallsFunctionObjectFunction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunStepDeltaStepDetailsToolCallsFunctionObjectFunctionWithDefaults() *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction {
	this := RunStepDeltaStepDetailsToolCallsFunctionObjectFunction{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction) SetName(v string) {
	o.Name = &v
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction) GetArguments() string {
	if o == nil || IsNil(o.Arguments) {
		var ret string
		return ret
	}
	return *o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction) GetArgumentsOk() (*string, bool) {
	if o == nil || IsNil(o.Arguments) {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction) HasArguments() bool {
	if o != nil && !IsNil(o.Arguments) {
		return true
	}

	return false
}

// SetArguments gets a reference to the given string and assigns it to the Arguments field.
func (o *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction) SetArguments(v string) {
	o.Arguments = &v
}

// GetOutput returns the Output field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction) GetOutput() string {
	if o == nil || IsNil(o.Output.Get()) {
		var ret string
		return ret
	}
	return *o.Output.Get()
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction) GetOutputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Output.Get(), o.Output.IsSet()
}

// HasOutput returns a boolean if a field has been set.
func (o *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction) HasOutput() bool {
	if o != nil && o.Output.IsSet() {
		return true
	}

	return false
}

// SetOutput gets a reference to the given NullableString and assigns it to the Output field.
func (o *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction) SetOutput(v string) {
	o.Output.Set(&v)
}
// SetOutputNil sets the value for Output to be an explicit nil
func (o *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction) SetOutputNil() {
	o.Output.Set(nil)
}

// UnsetOutput ensures that no value is present for Output, not even an explicit nil
func (o *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction) UnsetOutput() {
	o.Output.Unset()
}

func (o RunStepDeltaStepDetailsToolCallsFunctionObjectFunction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunStepDeltaStepDetailsToolCallsFunctionObjectFunction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Arguments) {
		toSerialize["arguments"] = o.Arguments
	}
	if o.Output.IsSet() {
		toSerialize["output"] = o.Output.Get()
	}
	return toSerialize, nil
}

type NullableRunStepDeltaStepDetailsToolCallsFunctionObjectFunction struct {
	value *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction
	isSet bool
}

func (v NullableRunStepDeltaStepDetailsToolCallsFunctionObjectFunction) Get() *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction {
	return v.value
}

func (v *NullableRunStepDeltaStepDetailsToolCallsFunctionObjectFunction) Set(val *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction) {
	v.value = val
	v.isSet = true
}

func (v NullableRunStepDeltaStepDetailsToolCallsFunctionObjectFunction) IsSet() bool {
	return v.isSet
}

func (v *NullableRunStepDeltaStepDetailsToolCallsFunctionObjectFunction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunStepDeltaStepDetailsToolCallsFunctionObjectFunction(val *RunStepDeltaStepDetailsToolCallsFunctionObjectFunction) *NullableRunStepDeltaStepDetailsToolCallsFunctionObjectFunction {
	return &NullableRunStepDeltaStepDetailsToolCallsFunctionObjectFunction{value: val, isSet: true}
}

func (v NullableRunStepDeltaStepDetailsToolCallsFunctionObjectFunction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunStepDeltaStepDetailsToolCallsFunctionObjectFunction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


