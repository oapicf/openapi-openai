/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RunStepDetailsToolCallsCodeOutputLogsObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunStepDetailsToolCallsCodeOutputLogsObject{}

// RunStepDetailsToolCallsCodeOutputLogsObject Text output from the Code Interpreter tool call as part of a run step.
type RunStepDetailsToolCallsCodeOutputLogsObject struct {
	// Always `logs`.
	Type string `json:"type"`
	// The text output from the Code Interpreter tool call.
	Logs string `json:"logs"`
}

type _RunStepDetailsToolCallsCodeOutputLogsObject RunStepDetailsToolCallsCodeOutputLogsObject

// NewRunStepDetailsToolCallsCodeOutputLogsObject instantiates a new RunStepDetailsToolCallsCodeOutputLogsObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunStepDetailsToolCallsCodeOutputLogsObject(type_ string, logs string) *RunStepDetailsToolCallsCodeOutputLogsObject {
	this := RunStepDetailsToolCallsCodeOutputLogsObject{}
	this.Type = type_
	this.Logs = logs
	return &this
}

// NewRunStepDetailsToolCallsCodeOutputLogsObjectWithDefaults instantiates a new RunStepDetailsToolCallsCodeOutputLogsObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunStepDetailsToolCallsCodeOutputLogsObjectWithDefaults() *RunStepDetailsToolCallsCodeOutputLogsObject {
	this := RunStepDetailsToolCallsCodeOutputLogsObject{}
	return &this
}

// GetType returns the Type field value
func (o *RunStepDetailsToolCallsCodeOutputLogsObject) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RunStepDetailsToolCallsCodeOutputLogsObject) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RunStepDetailsToolCallsCodeOutputLogsObject) SetType(v string) {
	o.Type = v
}

// GetLogs returns the Logs field value
func (o *RunStepDetailsToolCallsCodeOutputLogsObject) GetLogs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value
// and a boolean to check if the value has been set.
func (o *RunStepDetailsToolCallsCodeOutputLogsObject) GetLogsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Logs, true
}

// SetLogs sets field value
func (o *RunStepDetailsToolCallsCodeOutputLogsObject) SetLogs(v string) {
	o.Logs = v
}

func (o RunStepDetailsToolCallsCodeOutputLogsObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunStepDetailsToolCallsCodeOutputLogsObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["logs"] = o.Logs
	return toSerialize, nil
}

func (o *RunStepDetailsToolCallsCodeOutputLogsObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"logs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRunStepDetailsToolCallsCodeOutputLogsObject := _RunStepDetailsToolCallsCodeOutputLogsObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRunStepDetailsToolCallsCodeOutputLogsObject)

	if err != nil {
		return err
	}

	*o = RunStepDetailsToolCallsCodeOutputLogsObject(varRunStepDetailsToolCallsCodeOutputLogsObject)

	return err
}

type NullableRunStepDetailsToolCallsCodeOutputLogsObject struct {
	value *RunStepDetailsToolCallsCodeOutputLogsObject
	isSet bool
}

func (v NullableRunStepDetailsToolCallsCodeOutputLogsObject) Get() *RunStepDetailsToolCallsCodeOutputLogsObject {
	return v.value
}

func (v *NullableRunStepDetailsToolCallsCodeOutputLogsObject) Set(val *RunStepDetailsToolCallsCodeOutputLogsObject) {
	v.value = val
	v.isSet = true
}

func (v NullableRunStepDetailsToolCallsCodeOutputLogsObject) IsSet() bool {
	return v.isSet
}

func (v *NullableRunStepDetailsToolCallsCodeOutputLogsObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunStepDetailsToolCallsCodeOutputLogsObject(val *RunStepDetailsToolCallsCodeOutputLogsObject) *NullableRunStepDetailsToolCallsCodeOutputLogsObject {
	return &NullableRunStepDetailsToolCallsCodeOutputLogsObject{value: val, isSet: true}
}

func (v NullableRunStepDetailsToolCallsCodeOutputLogsObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunStepDetailsToolCallsCodeOutputLogsObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


