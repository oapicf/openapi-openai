/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RunStepDetailsToolCallsFunctionObjectFunction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunStepDetailsToolCallsFunctionObjectFunction{}

// RunStepDetailsToolCallsFunctionObjectFunction The definition of the function that was called.
type RunStepDetailsToolCallsFunctionObjectFunction struct {
	// The name of the function.
	Name string `json:"name"`
	// The arguments passed to the function.
	Arguments string `json:"arguments"`
	// The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
	Output NullableString `json:"output"`
}

type _RunStepDetailsToolCallsFunctionObjectFunction RunStepDetailsToolCallsFunctionObjectFunction

// NewRunStepDetailsToolCallsFunctionObjectFunction instantiates a new RunStepDetailsToolCallsFunctionObjectFunction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunStepDetailsToolCallsFunctionObjectFunction(name string, arguments string, output NullableString) *RunStepDetailsToolCallsFunctionObjectFunction {
	this := RunStepDetailsToolCallsFunctionObjectFunction{}
	this.Name = name
	this.Arguments = arguments
	this.Output = output
	return &this
}

// NewRunStepDetailsToolCallsFunctionObjectFunctionWithDefaults instantiates a new RunStepDetailsToolCallsFunctionObjectFunction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunStepDetailsToolCallsFunctionObjectFunctionWithDefaults() *RunStepDetailsToolCallsFunctionObjectFunction {
	this := RunStepDetailsToolCallsFunctionObjectFunction{}
	return &this
}

// GetName returns the Name field value
func (o *RunStepDetailsToolCallsFunctionObjectFunction) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RunStepDetailsToolCallsFunctionObjectFunction) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RunStepDetailsToolCallsFunctionObjectFunction) SetName(v string) {
	o.Name = v
}

// GetArguments returns the Arguments field value
func (o *RunStepDetailsToolCallsFunctionObjectFunction) GetArguments() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value
// and a boolean to check if the value has been set.
func (o *RunStepDetailsToolCallsFunctionObjectFunction) GetArgumentsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Arguments, true
}

// SetArguments sets field value
func (o *RunStepDetailsToolCallsFunctionObjectFunction) SetArguments(v string) {
	o.Arguments = v
}

// GetOutput returns the Output field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RunStepDetailsToolCallsFunctionObjectFunction) GetOutput() string {
	if o == nil || o.Output.Get() == nil {
		var ret string
		return ret
	}

	return *o.Output.Get()
}

// GetOutputOk returns a tuple with the Output field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunStepDetailsToolCallsFunctionObjectFunction) GetOutputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Output.Get(), o.Output.IsSet()
}

// SetOutput sets field value
func (o *RunStepDetailsToolCallsFunctionObjectFunction) SetOutput(v string) {
	o.Output.Set(&v)
}

func (o RunStepDetailsToolCallsFunctionObjectFunction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunStepDetailsToolCallsFunctionObjectFunction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["arguments"] = o.Arguments
	toSerialize["output"] = o.Output.Get()
	return toSerialize, nil
}

func (o *RunStepDetailsToolCallsFunctionObjectFunction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"arguments",
		"output",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRunStepDetailsToolCallsFunctionObjectFunction := _RunStepDetailsToolCallsFunctionObjectFunction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRunStepDetailsToolCallsFunctionObjectFunction)

	if err != nil {
		return err
	}

	*o = RunStepDetailsToolCallsFunctionObjectFunction(varRunStepDetailsToolCallsFunctionObjectFunction)

	return err
}

type NullableRunStepDetailsToolCallsFunctionObjectFunction struct {
	value *RunStepDetailsToolCallsFunctionObjectFunction
	isSet bool
}

func (v NullableRunStepDetailsToolCallsFunctionObjectFunction) Get() *RunStepDetailsToolCallsFunctionObjectFunction {
	return v.value
}

func (v *NullableRunStepDetailsToolCallsFunctionObjectFunction) Set(val *RunStepDetailsToolCallsFunctionObjectFunction) {
	v.value = val
	v.isSet = true
}

func (v NullableRunStepDetailsToolCallsFunctionObjectFunction) IsSet() bool {
	return v.isSet
}

func (v *NullableRunStepDetailsToolCallsFunctionObjectFunction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunStepDetailsToolCallsFunctionObjectFunction(val *RunStepDetailsToolCallsFunctionObjectFunction) *NullableRunStepDetailsToolCallsFunctionObjectFunction {
	return &NullableRunStepDetailsToolCallsFunctionObjectFunction{value: val, isSet: true}
}

func (v NullableRunStepDetailsToolCallsFunctionObjectFunction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunStepDetailsToolCallsFunctionObjectFunction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


