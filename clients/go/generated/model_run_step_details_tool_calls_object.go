/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RunStepDetailsToolCallsObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunStepDetailsToolCallsObject{}

// RunStepDetailsToolCallsObject Details of the tool call.
type RunStepDetailsToolCallsObject struct {
	// Always `tool_calls`.
	Type string `json:"type"`
	// An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`. 
	ToolCalls []RunStepDetailsToolCallsObjectToolCallsInner `json:"tool_calls"`
}

type _RunStepDetailsToolCallsObject RunStepDetailsToolCallsObject

// NewRunStepDetailsToolCallsObject instantiates a new RunStepDetailsToolCallsObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunStepDetailsToolCallsObject(type_ string, toolCalls []RunStepDetailsToolCallsObjectToolCallsInner) *RunStepDetailsToolCallsObject {
	this := RunStepDetailsToolCallsObject{}
	this.Type = type_
	this.ToolCalls = toolCalls
	return &this
}

// NewRunStepDetailsToolCallsObjectWithDefaults instantiates a new RunStepDetailsToolCallsObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunStepDetailsToolCallsObjectWithDefaults() *RunStepDetailsToolCallsObject {
	this := RunStepDetailsToolCallsObject{}
	return &this
}

// GetType returns the Type field value
func (o *RunStepDetailsToolCallsObject) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RunStepDetailsToolCallsObject) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RunStepDetailsToolCallsObject) SetType(v string) {
	o.Type = v
}

// GetToolCalls returns the ToolCalls field value
func (o *RunStepDetailsToolCallsObject) GetToolCalls() []RunStepDetailsToolCallsObjectToolCallsInner {
	if o == nil {
		var ret []RunStepDetailsToolCallsObjectToolCallsInner
		return ret
	}

	return o.ToolCalls
}

// GetToolCallsOk returns a tuple with the ToolCalls field value
// and a boolean to check if the value has been set.
func (o *RunStepDetailsToolCallsObject) GetToolCallsOk() ([]RunStepDetailsToolCallsObjectToolCallsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToolCalls, true
}

// SetToolCalls sets field value
func (o *RunStepDetailsToolCallsObject) SetToolCalls(v []RunStepDetailsToolCallsObjectToolCallsInner) {
	o.ToolCalls = v
}

func (o RunStepDetailsToolCallsObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunStepDetailsToolCallsObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["tool_calls"] = o.ToolCalls
	return toSerialize, nil
}

func (o *RunStepDetailsToolCallsObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"tool_calls",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRunStepDetailsToolCallsObject := _RunStepDetailsToolCallsObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRunStepDetailsToolCallsObject)

	if err != nil {
		return err
	}

	*o = RunStepDetailsToolCallsObject(varRunStepDetailsToolCallsObject)

	return err
}

type NullableRunStepDetailsToolCallsObject struct {
	value *RunStepDetailsToolCallsObject
	isSet bool
}

func (v NullableRunStepDetailsToolCallsObject) Get() *RunStepDetailsToolCallsObject {
	return v.value
}

func (v *NullableRunStepDetailsToolCallsObject) Set(val *RunStepDetailsToolCallsObject) {
	v.value = val
	v.isSet = true
}

func (v NullableRunStepDetailsToolCallsObject) IsSet() bool {
	return v.isSet
}

func (v *NullableRunStepDetailsToolCallsObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunStepDetailsToolCallsObject(val *RunStepDetailsToolCallsObject) *NullableRunStepDetailsToolCallsObject {
	return &NullableRunStepDetailsToolCallsObject{value: val, isSet: true}
}

func (v NullableRunStepDetailsToolCallsObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunStepDetailsToolCallsObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


