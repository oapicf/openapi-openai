/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RunStepObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunStepObject{}

// RunStepObject Represents a step in execution of a run. 
type RunStepObject struct {
	// The identifier of the run step, which can be referenced in API endpoints.
	Id string `json:"id"`
	// The object type, which is always `thread.run.step`.
	Object string `json:"object"`
	// The Unix timestamp (in seconds) for when the run step was created.
	CreatedAt int32 `json:"created_at"`
	// The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
	AssistantId string `json:"assistant_id"`
	// The ID of the [thread](/docs/api-reference/threads) that was run.
	ThreadId string `json:"thread_id"`
	// The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
	RunId string `json:"run_id"`
	// The type of run step, which can be either `message_creation` or `tool_calls`.
	Type string `json:"type"`
	// The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
	Status string `json:"status"`
	StepDetails RunStepObjectStepDetails `json:"step_details"`
	LastError NullableRunStepObjectLastError `json:"last_error"`
	// The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
	ExpiredAt NullableInt32 `json:"expired_at"`
	// The Unix timestamp (in seconds) for when the run step was cancelled.
	CancelledAt NullableInt32 `json:"cancelled_at"`
	// The Unix timestamp (in seconds) for when the run step failed.
	FailedAt NullableInt32 `json:"failed_at"`
	// The Unix timestamp (in seconds) for when the run step completed.
	CompletedAt NullableInt32 `json:"completed_at"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
	Metadata map[string]interface{} `json:"metadata"`
	Usage NullableRunStepCompletionUsage `json:"usage"`
}

type _RunStepObject RunStepObject

// NewRunStepObject instantiates a new RunStepObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunStepObject(id string, object string, createdAt int32, assistantId string, threadId string, runId string, type_ string, status string, stepDetails RunStepObjectStepDetails, lastError NullableRunStepObjectLastError, expiredAt NullableInt32, cancelledAt NullableInt32, failedAt NullableInt32, completedAt NullableInt32, metadata map[string]interface{}, usage NullableRunStepCompletionUsage) *RunStepObject {
	this := RunStepObject{}
	this.Id = id
	this.Object = object
	this.CreatedAt = createdAt
	this.AssistantId = assistantId
	this.ThreadId = threadId
	this.RunId = runId
	this.Type = type_
	this.Status = status
	this.StepDetails = stepDetails
	this.LastError = lastError
	this.ExpiredAt = expiredAt
	this.CancelledAt = cancelledAt
	this.FailedAt = failedAt
	this.CompletedAt = completedAt
	this.Metadata = metadata
	this.Usage = usage
	return &this
}

// NewRunStepObjectWithDefaults instantiates a new RunStepObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunStepObjectWithDefaults() *RunStepObject {
	this := RunStepObject{}
	return &this
}

// GetId returns the Id field value
func (o *RunStepObject) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RunStepObject) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RunStepObject) SetId(v string) {
	o.Id = v
}

// GetObject returns the Object field value
func (o *RunStepObject) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *RunStepObject) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *RunStepObject) SetObject(v string) {
	o.Object = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *RunStepObject) GetCreatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *RunStepObject) GetCreatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *RunStepObject) SetCreatedAt(v int32) {
	o.CreatedAt = v
}

// GetAssistantId returns the AssistantId field value
func (o *RunStepObject) GetAssistantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssistantId
}

// GetAssistantIdOk returns a tuple with the AssistantId field value
// and a boolean to check if the value has been set.
func (o *RunStepObject) GetAssistantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssistantId, true
}

// SetAssistantId sets field value
func (o *RunStepObject) SetAssistantId(v string) {
	o.AssistantId = v
}

// GetThreadId returns the ThreadId field value
func (o *RunStepObject) GetThreadId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ThreadId
}

// GetThreadIdOk returns a tuple with the ThreadId field value
// and a boolean to check if the value has been set.
func (o *RunStepObject) GetThreadIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThreadId, true
}

// SetThreadId sets field value
func (o *RunStepObject) SetThreadId(v string) {
	o.ThreadId = v
}

// GetRunId returns the RunId field value
func (o *RunStepObject) GetRunId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RunId
}

// GetRunIdOk returns a tuple with the RunId field value
// and a boolean to check if the value has been set.
func (o *RunStepObject) GetRunIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunId, true
}

// SetRunId sets field value
func (o *RunStepObject) SetRunId(v string) {
	o.RunId = v
}

// GetType returns the Type field value
func (o *RunStepObject) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RunStepObject) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RunStepObject) SetType(v string) {
	o.Type = v
}

// GetStatus returns the Status field value
func (o *RunStepObject) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *RunStepObject) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *RunStepObject) SetStatus(v string) {
	o.Status = v
}

// GetStepDetails returns the StepDetails field value
func (o *RunStepObject) GetStepDetails() RunStepObjectStepDetails {
	if o == nil {
		var ret RunStepObjectStepDetails
		return ret
	}

	return o.StepDetails
}

// GetStepDetailsOk returns a tuple with the StepDetails field value
// and a boolean to check if the value has been set.
func (o *RunStepObject) GetStepDetailsOk() (*RunStepObjectStepDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StepDetails, true
}

// SetStepDetails sets field value
func (o *RunStepObject) SetStepDetails(v RunStepObjectStepDetails) {
	o.StepDetails = v
}

// GetLastError returns the LastError field value
// If the value is explicit nil, the zero value for RunStepObjectLastError will be returned
func (o *RunStepObject) GetLastError() RunStepObjectLastError {
	if o == nil || o.LastError.Get() == nil {
		var ret RunStepObjectLastError
		return ret
	}

	return *o.LastError.Get()
}

// GetLastErrorOk returns a tuple with the LastError field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunStepObject) GetLastErrorOk() (*RunStepObjectLastError, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastError.Get(), o.LastError.IsSet()
}

// SetLastError sets field value
func (o *RunStepObject) SetLastError(v RunStepObjectLastError) {
	o.LastError.Set(&v)
}

// GetExpiredAt returns the ExpiredAt field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *RunStepObject) GetExpiredAt() int32 {
	if o == nil || o.ExpiredAt.Get() == nil {
		var ret int32
		return ret
	}

	return *o.ExpiredAt.Get()
}

// GetExpiredAtOk returns a tuple with the ExpiredAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunStepObject) GetExpiredAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiredAt.Get(), o.ExpiredAt.IsSet()
}

// SetExpiredAt sets field value
func (o *RunStepObject) SetExpiredAt(v int32) {
	o.ExpiredAt.Set(&v)
}

// GetCancelledAt returns the CancelledAt field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *RunStepObject) GetCancelledAt() int32 {
	if o == nil || o.CancelledAt.Get() == nil {
		var ret int32
		return ret
	}

	return *o.CancelledAt.Get()
}

// GetCancelledAtOk returns a tuple with the CancelledAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunStepObject) GetCancelledAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CancelledAt.Get(), o.CancelledAt.IsSet()
}

// SetCancelledAt sets field value
func (o *RunStepObject) SetCancelledAt(v int32) {
	o.CancelledAt.Set(&v)
}

// GetFailedAt returns the FailedAt field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *RunStepObject) GetFailedAt() int32 {
	if o == nil || o.FailedAt.Get() == nil {
		var ret int32
		return ret
	}

	return *o.FailedAt.Get()
}

// GetFailedAtOk returns a tuple with the FailedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunStepObject) GetFailedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailedAt.Get(), o.FailedAt.IsSet()
}

// SetFailedAt sets field value
func (o *RunStepObject) SetFailedAt(v int32) {
	o.FailedAt.Set(&v)
}

// GetCompletedAt returns the CompletedAt field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *RunStepObject) GetCompletedAt() int32 {
	if o == nil || o.CompletedAt.Get() == nil {
		var ret int32
		return ret
	}

	return *o.CompletedAt.Get()
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunStepObject) GetCompletedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompletedAt.Get(), o.CompletedAt.IsSet()
}

// SetCompletedAt sets field value
func (o *RunStepObject) SetCompletedAt(v int32) {
	o.CompletedAt.Set(&v)
}

// GetMetadata returns the Metadata field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *RunStepObject) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunStepObject) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *RunStepObject) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetUsage returns the Usage field value
// If the value is explicit nil, the zero value for RunStepCompletionUsage will be returned
func (o *RunStepObject) GetUsage() RunStepCompletionUsage {
	if o == nil || o.Usage.Get() == nil {
		var ret RunStepCompletionUsage
		return ret
	}

	return *o.Usage.Get()
}

// GetUsageOk returns a tuple with the Usage field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunStepObject) GetUsageOk() (*RunStepCompletionUsage, bool) {
	if o == nil {
		return nil, false
	}
	return o.Usage.Get(), o.Usage.IsSet()
}

// SetUsage sets field value
func (o *RunStepObject) SetUsage(v RunStepCompletionUsage) {
	o.Usage.Set(&v)
}

func (o RunStepObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunStepObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["object"] = o.Object
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["assistant_id"] = o.AssistantId
	toSerialize["thread_id"] = o.ThreadId
	toSerialize["run_id"] = o.RunId
	toSerialize["type"] = o.Type
	toSerialize["status"] = o.Status
	toSerialize["step_details"] = o.StepDetails
	toSerialize["last_error"] = o.LastError.Get()
	toSerialize["expired_at"] = o.ExpiredAt.Get()
	toSerialize["cancelled_at"] = o.CancelledAt.Get()
	toSerialize["failed_at"] = o.FailedAt.Get()
	toSerialize["completed_at"] = o.CompletedAt.Get()
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["usage"] = o.Usage.Get()
	return toSerialize, nil
}

func (o *RunStepObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"object",
		"created_at",
		"assistant_id",
		"thread_id",
		"run_id",
		"type",
		"status",
		"step_details",
		"last_error",
		"expired_at",
		"cancelled_at",
		"failed_at",
		"completed_at",
		"metadata",
		"usage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRunStepObject := _RunStepObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRunStepObject)

	if err != nil {
		return err
	}

	*o = RunStepObject(varRunStepObject)

	return err
}

type NullableRunStepObject struct {
	value *RunStepObject
	isSet bool
}

func (v NullableRunStepObject) Get() *RunStepObject {
	return v.value
}

func (v *NullableRunStepObject) Set(val *RunStepObject) {
	v.value = val
	v.isSet = true
}

func (v NullableRunStepObject) IsSet() bool {
	return v.isSet
}

func (v *NullableRunStepObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunStepObject(val *RunStepObject) *NullableRunStepObject {
	return &NullableRunStepObject{value: val, isSet: true}
}

func (v NullableRunStepObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunStepObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


