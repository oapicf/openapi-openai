/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RunStepObjectStepDetails - The details of the run step.
type RunStepObjectStepDetails struct {
	RunStepDetailsMessageCreationObject *RunStepDetailsMessageCreationObject
	RunStepDetailsToolCallsObject *RunStepDetailsToolCallsObject
}

// RunStepDetailsMessageCreationObjectAsRunStepObjectStepDetails is a convenience function that returns RunStepDetailsMessageCreationObject wrapped in RunStepObjectStepDetails
func RunStepDetailsMessageCreationObjectAsRunStepObjectStepDetails(v *RunStepDetailsMessageCreationObject) RunStepObjectStepDetails {
	return RunStepObjectStepDetails{
		RunStepDetailsMessageCreationObject: v,
	}
}

// RunStepDetailsToolCallsObjectAsRunStepObjectStepDetails is a convenience function that returns RunStepDetailsToolCallsObject wrapped in RunStepObjectStepDetails
func RunStepDetailsToolCallsObjectAsRunStepObjectStepDetails(v *RunStepDetailsToolCallsObject) RunStepObjectStepDetails {
	return RunStepObjectStepDetails{
		RunStepDetailsToolCallsObject: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RunStepObjectStepDetails) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RunStepDetailsMessageCreationObject
	err = newStrictDecoder(data).Decode(&dst.RunStepDetailsMessageCreationObject)
	if err == nil {
		jsonRunStepDetailsMessageCreationObject, _ := json.Marshal(dst.RunStepDetailsMessageCreationObject)
		if string(jsonRunStepDetailsMessageCreationObject) == "{}" { // empty struct
			dst.RunStepDetailsMessageCreationObject = nil
		} else {
			match++
		}
	} else {
		dst.RunStepDetailsMessageCreationObject = nil
	}

	// try to unmarshal data into RunStepDetailsToolCallsObject
	err = newStrictDecoder(data).Decode(&dst.RunStepDetailsToolCallsObject)
	if err == nil {
		jsonRunStepDetailsToolCallsObject, _ := json.Marshal(dst.RunStepDetailsToolCallsObject)
		if string(jsonRunStepDetailsToolCallsObject) == "{}" { // empty struct
			dst.RunStepDetailsToolCallsObject = nil
		} else {
			match++
		}
	} else {
		dst.RunStepDetailsToolCallsObject = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RunStepDetailsMessageCreationObject = nil
		dst.RunStepDetailsToolCallsObject = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RunStepObjectStepDetails)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RunStepObjectStepDetails)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RunStepObjectStepDetails) MarshalJSON() ([]byte, error) {
	if src.RunStepDetailsMessageCreationObject != nil {
		return json.Marshal(&src.RunStepDetailsMessageCreationObject)
	}

	if src.RunStepDetailsToolCallsObject != nil {
		return json.Marshal(&src.RunStepDetailsToolCallsObject)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RunStepObjectStepDetails) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RunStepDetailsMessageCreationObject != nil {
		return obj.RunStepDetailsMessageCreationObject
	}

	if obj.RunStepDetailsToolCallsObject != nil {
		return obj.RunStepDetailsToolCallsObject
	}

	// all schemas are nil
	return nil
}

type NullableRunStepObjectStepDetails struct {
	value *RunStepObjectStepDetails
	isSet bool
}

func (v NullableRunStepObjectStepDetails) Get() *RunStepObjectStepDetails {
	return v.value
}

func (v *NullableRunStepObjectStepDetails) Set(val *RunStepObjectStepDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableRunStepObjectStepDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableRunStepObjectStepDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunStepObjectStepDetails(val *RunStepObjectStepDetails) *NullableRunStepObjectStepDetails {
	return &NullableRunStepObjectStepDetails{value: val, isSet: true}
}

func (v NullableRunStepObjectStepDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunStepObjectStepDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


