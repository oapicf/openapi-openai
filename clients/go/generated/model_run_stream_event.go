/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// RunStreamEvent - struct for RunStreamEvent
type RunStreamEvent struct {
	RunStreamEventOneOf *RunStreamEventOneOf
	RunStreamEventOneOf1 *RunStreamEventOneOf1
	RunStreamEventOneOf2 *RunStreamEventOneOf2
	RunStreamEventOneOf3 *RunStreamEventOneOf3
	RunStreamEventOneOf4 *RunStreamEventOneOf4
	RunStreamEventOneOf5 *RunStreamEventOneOf5
	RunStreamEventOneOf6 *RunStreamEventOneOf6
	RunStreamEventOneOf7 *RunStreamEventOneOf7
	RunStreamEventOneOf8 *RunStreamEventOneOf8
}

// RunStreamEventOneOfAsRunStreamEvent is a convenience function that returns RunStreamEventOneOf wrapped in RunStreamEvent
func RunStreamEventOneOfAsRunStreamEvent(v *RunStreamEventOneOf) RunStreamEvent {
	return RunStreamEvent{
		RunStreamEventOneOf: v,
	}
}

// RunStreamEventOneOf1AsRunStreamEvent is a convenience function that returns RunStreamEventOneOf1 wrapped in RunStreamEvent
func RunStreamEventOneOf1AsRunStreamEvent(v *RunStreamEventOneOf1) RunStreamEvent {
	return RunStreamEvent{
		RunStreamEventOneOf1: v,
	}
}

// RunStreamEventOneOf2AsRunStreamEvent is a convenience function that returns RunStreamEventOneOf2 wrapped in RunStreamEvent
func RunStreamEventOneOf2AsRunStreamEvent(v *RunStreamEventOneOf2) RunStreamEvent {
	return RunStreamEvent{
		RunStreamEventOneOf2: v,
	}
}

// RunStreamEventOneOf3AsRunStreamEvent is a convenience function that returns RunStreamEventOneOf3 wrapped in RunStreamEvent
func RunStreamEventOneOf3AsRunStreamEvent(v *RunStreamEventOneOf3) RunStreamEvent {
	return RunStreamEvent{
		RunStreamEventOneOf3: v,
	}
}

// RunStreamEventOneOf4AsRunStreamEvent is a convenience function that returns RunStreamEventOneOf4 wrapped in RunStreamEvent
func RunStreamEventOneOf4AsRunStreamEvent(v *RunStreamEventOneOf4) RunStreamEvent {
	return RunStreamEvent{
		RunStreamEventOneOf4: v,
	}
}

// RunStreamEventOneOf5AsRunStreamEvent is a convenience function that returns RunStreamEventOneOf5 wrapped in RunStreamEvent
func RunStreamEventOneOf5AsRunStreamEvent(v *RunStreamEventOneOf5) RunStreamEvent {
	return RunStreamEvent{
		RunStreamEventOneOf5: v,
	}
}

// RunStreamEventOneOf6AsRunStreamEvent is a convenience function that returns RunStreamEventOneOf6 wrapped in RunStreamEvent
func RunStreamEventOneOf6AsRunStreamEvent(v *RunStreamEventOneOf6) RunStreamEvent {
	return RunStreamEvent{
		RunStreamEventOneOf6: v,
	}
}

// RunStreamEventOneOf7AsRunStreamEvent is a convenience function that returns RunStreamEventOneOf7 wrapped in RunStreamEvent
func RunStreamEventOneOf7AsRunStreamEvent(v *RunStreamEventOneOf7) RunStreamEvent {
	return RunStreamEvent{
		RunStreamEventOneOf7: v,
	}
}

// RunStreamEventOneOf8AsRunStreamEvent is a convenience function that returns RunStreamEventOneOf8 wrapped in RunStreamEvent
func RunStreamEventOneOf8AsRunStreamEvent(v *RunStreamEventOneOf8) RunStreamEvent {
	return RunStreamEvent{
		RunStreamEventOneOf8: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RunStreamEvent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RunStreamEventOneOf
	err = newStrictDecoder(data).Decode(&dst.RunStreamEventOneOf)
	if err == nil {
		jsonRunStreamEventOneOf, _ := json.Marshal(dst.RunStreamEventOneOf)
		if string(jsonRunStreamEventOneOf) == "{}" { // empty struct
			dst.RunStreamEventOneOf = nil
		} else {
			if err = validator.Validate(dst.RunStreamEventOneOf); err != nil {
				dst.RunStreamEventOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.RunStreamEventOneOf = nil
	}

	// try to unmarshal data into RunStreamEventOneOf1
	err = newStrictDecoder(data).Decode(&dst.RunStreamEventOneOf1)
	if err == nil {
		jsonRunStreamEventOneOf1, _ := json.Marshal(dst.RunStreamEventOneOf1)
		if string(jsonRunStreamEventOneOf1) == "{}" { // empty struct
			dst.RunStreamEventOneOf1 = nil
		} else {
			if err = validator.Validate(dst.RunStreamEventOneOf1); err != nil {
				dst.RunStreamEventOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RunStreamEventOneOf1 = nil
	}

	// try to unmarshal data into RunStreamEventOneOf2
	err = newStrictDecoder(data).Decode(&dst.RunStreamEventOneOf2)
	if err == nil {
		jsonRunStreamEventOneOf2, _ := json.Marshal(dst.RunStreamEventOneOf2)
		if string(jsonRunStreamEventOneOf2) == "{}" { // empty struct
			dst.RunStreamEventOneOf2 = nil
		} else {
			if err = validator.Validate(dst.RunStreamEventOneOf2); err != nil {
				dst.RunStreamEventOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RunStreamEventOneOf2 = nil
	}

	// try to unmarshal data into RunStreamEventOneOf3
	err = newStrictDecoder(data).Decode(&dst.RunStreamEventOneOf3)
	if err == nil {
		jsonRunStreamEventOneOf3, _ := json.Marshal(dst.RunStreamEventOneOf3)
		if string(jsonRunStreamEventOneOf3) == "{}" { // empty struct
			dst.RunStreamEventOneOf3 = nil
		} else {
			if err = validator.Validate(dst.RunStreamEventOneOf3); err != nil {
				dst.RunStreamEventOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RunStreamEventOneOf3 = nil
	}

	// try to unmarshal data into RunStreamEventOneOf4
	err = newStrictDecoder(data).Decode(&dst.RunStreamEventOneOf4)
	if err == nil {
		jsonRunStreamEventOneOf4, _ := json.Marshal(dst.RunStreamEventOneOf4)
		if string(jsonRunStreamEventOneOf4) == "{}" { // empty struct
			dst.RunStreamEventOneOf4 = nil
		} else {
			if err = validator.Validate(dst.RunStreamEventOneOf4); err != nil {
				dst.RunStreamEventOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RunStreamEventOneOf4 = nil
	}

	// try to unmarshal data into RunStreamEventOneOf5
	err = newStrictDecoder(data).Decode(&dst.RunStreamEventOneOf5)
	if err == nil {
		jsonRunStreamEventOneOf5, _ := json.Marshal(dst.RunStreamEventOneOf5)
		if string(jsonRunStreamEventOneOf5) == "{}" { // empty struct
			dst.RunStreamEventOneOf5 = nil
		} else {
			if err = validator.Validate(dst.RunStreamEventOneOf5); err != nil {
				dst.RunStreamEventOneOf5 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RunStreamEventOneOf5 = nil
	}

	// try to unmarshal data into RunStreamEventOneOf6
	err = newStrictDecoder(data).Decode(&dst.RunStreamEventOneOf6)
	if err == nil {
		jsonRunStreamEventOneOf6, _ := json.Marshal(dst.RunStreamEventOneOf6)
		if string(jsonRunStreamEventOneOf6) == "{}" { // empty struct
			dst.RunStreamEventOneOf6 = nil
		} else {
			if err = validator.Validate(dst.RunStreamEventOneOf6); err != nil {
				dst.RunStreamEventOneOf6 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RunStreamEventOneOf6 = nil
	}

	// try to unmarshal data into RunStreamEventOneOf7
	err = newStrictDecoder(data).Decode(&dst.RunStreamEventOneOf7)
	if err == nil {
		jsonRunStreamEventOneOf7, _ := json.Marshal(dst.RunStreamEventOneOf7)
		if string(jsonRunStreamEventOneOf7) == "{}" { // empty struct
			dst.RunStreamEventOneOf7 = nil
		} else {
			if err = validator.Validate(dst.RunStreamEventOneOf7); err != nil {
				dst.RunStreamEventOneOf7 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RunStreamEventOneOf7 = nil
	}

	// try to unmarshal data into RunStreamEventOneOf8
	err = newStrictDecoder(data).Decode(&dst.RunStreamEventOneOf8)
	if err == nil {
		jsonRunStreamEventOneOf8, _ := json.Marshal(dst.RunStreamEventOneOf8)
		if string(jsonRunStreamEventOneOf8) == "{}" { // empty struct
			dst.RunStreamEventOneOf8 = nil
		} else {
			if err = validator.Validate(dst.RunStreamEventOneOf8); err != nil {
				dst.RunStreamEventOneOf8 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RunStreamEventOneOf8 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RunStreamEventOneOf = nil
		dst.RunStreamEventOneOf1 = nil
		dst.RunStreamEventOneOf2 = nil
		dst.RunStreamEventOneOf3 = nil
		dst.RunStreamEventOneOf4 = nil
		dst.RunStreamEventOneOf5 = nil
		dst.RunStreamEventOneOf6 = nil
		dst.RunStreamEventOneOf7 = nil
		dst.RunStreamEventOneOf8 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RunStreamEvent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RunStreamEvent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RunStreamEvent) MarshalJSON() ([]byte, error) {
	if src.RunStreamEventOneOf != nil {
		return json.Marshal(&src.RunStreamEventOneOf)
	}

	if src.RunStreamEventOneOf1 != nil {
		return json.Marshal(&src.RunStreamEventOneOf1)
	}

	if src.RunStreamEventOneOf2 != nil {
		return json.Marshal(&src.RunStreamEventOneOf2)
	}

	if src.RunStreamEventOneOf3 != nil {
		return json.Marshal(&src.RunStreamEventOneOf3)
	}

	if src.RunStreamEventOneOf4 != nil {
		return json.Marshal(&src.RunStreamEventOneOf4)
	}

	if src.RunStreamEventOneOf5 != nil {
		return json.Marshal(&src.RunStreamEventOneOf5)
	}

	if src.RunStreamEventOneOf6 != nil {
		return json.Marshal(&src.RunStreamEventOneOf6)
	}

	if src.RunStreamEventOneOf7 != nil {
		return json.Marshal(&src.RunStreamEventOneOf7)
	}

	if src.RunStreamEventOneOf8 != nil {
		return json.Marshal(&src.RunStreamEventOneOf8)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RunStreamEvent) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RunStreamEventOneOf != nil {
		return obj.RunStreamEventOneOf
	}

	if obj.RunStreamEventOneOf1 != nil {
		return obj.RunStreamEventOneOf1
	}

	if obj.RunStreamEventOneOf2 != nil {
		return obj.RunStreamEventOneOf2
	}

	if obj.RunStreamEventOneOf3 != nil {
		return obj.RunStreamEventOneOf3
	}

	if obj.RunStreamEventOneOf4 != nil {
		return obj.RunStreamEventOneOf4
	}

	if obj.RunStreamEventOneOf5 != nil {
		return obj.RunStreamEventOneOf5
	}

	if obj.RunStreamEventOneOf6 != nil {
		return obj.RunStreamEventOneOf6
	}

	if obj.RunStreamEventOneOf7 != nil {
		return obj.RunStreamEventOneOf7
	}

	if obj.RunStreamEventOneOf8 != nil {
		return obj.RunStreamEventOneOf8
	}

	// all schemas are nil
	return nil
}

type NullableRunStreamEvent struct {
	value *RunStreamEvent
	isSet bool
}

func (v NullableRunStreamEvent) Get() *RunStreamEvent {
	return v.value
}

func (v *NullableRunStreamEvent) Set(val *RunStreamEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableRunStreamEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableRunStreamEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunStreamEvent(val *RunStreamEvent) *NullableRunStreamEvent {
	return &NullableRunStreamEvent{value: val, isSet: true}
}

func (v NullableRunStreamEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunStreamEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


