/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RunToolCallObjectFunction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunToolCallObjectFunction{}

// RunToolCallObjectFunction The function definition.
type RunToolCallObjectFunction struct {
	// The name of the function.
	Name string `json:"name"`
	// The arguments that the model expects you to pass to the function.
	Arguments string `json:"arguments"`
}

type _RunToolCallObjectFunction RunToolCallObjectFunction

// NewRunToolCallObjectFunction instantiates a new RunToolCallObjectFunction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunToolCallObjectFunction(name string, arguments string) *RunToolCallObjectFunction {
	this := RunToolCallObjectFunction{}
	this.Name = name
	this.Arguments = arguments
	return &this
}

// NewRunToolCallObjectFunctionWithDefaults instantiates a new RunToolCallObjectFunction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunToolCallObjectFunctionWithDefaults() *RunToolCallObjectFunction {
	this := RunToolCallObjectFunction{}
	return &this
}

// GetName returns the Name field value
func (o *RunToolCallObjectFunction) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RunToolCallObjectFunction) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RunToolCallObjectFunction) SetName(v string) {
	o.Name = v
}

// GetArguments returns the Arguments field value
func (o *RunToolCallObjectFunction) GetArguments() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value
// and a boolean to check if the value has been set.
func (o *RunToolCallObjectFunction) GetArgumentsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Arguments, true
}

// SetArguments sets field value
func (o *RunToolCallObjectFunction) SetArguments(v string) {
	o.Arguments = v
}

func (o RunToolCallObjectFunction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunToolCallObjectFunction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["arguments"] = o.Arguments
	return toSerialize, nil
}

func (o *RunToolCallObjectFunction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"arguments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRunToolCallObjectFunction := _RunToolCallObjectFunction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRunToolCallObjectFunction)

	if err != nil {
		return err
	}

	*o = RunToolCallObjectFunction(varRunToolCallObjectFunction)

	return err
}

type NullableRunToolCallObjectFunction struct {
	value *RunToolCallObjectFunction
	isSet bool
}

func (v NullableRunToolCallObjectFunction) Get() *RunToolCallObjectFunction {
	return v.value
}

func (v *NullableRunToolCallObjectFunction) Set(val *RunToolCallObjectFunction) {
	v.value = val
	v.isSet = true
}

func (v NullableRunToolCallObjectFunction) IsSet() bool {
	return v.isSet
}

func (v *NullableRunToolCallObjectFunction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunToolCallObjectFunction(val *RunToolCallObjectFunction) *NullableRunToolCallObjectFunction {
	return &NullableRunToolCallObjectFunction{value: val, isSet: true}
}

func (v NullableRunToolCallObjectFunction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunToolCallObjectFunction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


