/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubmitToolOutputsRunRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubmitToolOutputsRunRequest{}

// SubmitToolOutputsRunRequest struct for SubmitToolOutputsRunRequest
type SubmitToolOutputsRunRequest struct {
	// A list of tools for which the outputs are being submitted.
	ToolOutputs []SubmitToolOutputsRunRequestToolOutputsInner `json:"tool_outputs"`
	// If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message. 
	Stream NullableBool `json:"stream,omitempty"`
}

type _SubmitToolOutputsRunRequest SubmitToolOutputsRunRequest

// NewSubmitToolOutputsRunRequest instantiates a new SubmitToolOutputsRunRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmitToolOutputsRunRequest(toolOutputs []SubmitToolOutputsRunRequestToolOutputsInner) *SubmitToolOutputsRunRequest {
	this := SubmitToolOutputsRunRequest{}
	this.ToolOutputs = toolOutputs
	return &this
}

// NewSubmitToolOutputsRunRequestWithDefaults instantiates a new SubmitToolOutputsRunRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmitToolOutputsRunRequestWithDefaults() *SubmitToolOutputsRunRequest {
	this := SubmitToolOutputsRunRequest{}
	return &this
}

// GetToolOutputs returns the ToolOutputs field value
func (o *SubmitToolOutputsRunRequest) GetToolOutputs() []SubmitToolOutputsRunRequestToolOutputsInner {
	if o == nil {
		var ret []SubmitToolOutputsRunRequestToolOutputsInner
		return ret
	}

	return o.ToolOutputs
}

// GetToolOutputsOk returns a tuple with the ToolOutputs field value
// and a boolean to check if the value has been set.
func (o *SubmitToolOutputsRunRequest) GetToolOutputsOk() ([]SubmitToolOutputsRunRequestToolOutputsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToolOutputs, true
}

// SetToolOutputs sets field value
func (o *SubmitToolOutputsRunRequest) SetToolOutputs(v []SubmitToolOutputsRunRequestToolOutputsInner) {
	o.ToolOutputs = v
}

// GetStream returns the Stream field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubmitToolOutputsRunRequest) GetStream() bool {
	if o == nil || IsNil(o.Stream.Get()) {
		var ret bool
		return ret
	}
	return *o.Stream.Get()
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubmitToolOutputsRunRequest) GetStreamOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stream.Get(), o.Stream.IsSet()
}

// HasStream returns a boolean if a field has been set.
func (o *SubmitToolOutputsRunRequest) HasStream() bool {
	if o != nil && o.Stream.IsSet() {
		return true
	}

	return false
}

// SetStream gets a reference to the given NullableBool and assigns it to the Stream field.
func (o *SubmitToolOutputsRunRequest) SetStream(v bool) {
	o.Stream.Set(&v)
}
// SetStreamNil sets the value for Stream to be an explicit nil
func (o *SubmitToolOutputsRunRequest) SetStreamNil() {
	o.Stream.Set(nil)
}

// UnsetStream ensures that no value is present for Stream, not even an explicit nil
func (o *SubmitToolOutputsRunRequest) UnsetStream() {
	o.Stream.Unset()
}

func (o SubmitToolOutputsRunRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubmitToolOutputsRunRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tool_outputs"] = o.ToolOutputs
	if o.Stream.IsSet() {
		toSerialize["stream"] = o.Stream.Get()
	}
	return toSerialize, nil
}

func (o *SubmitToolOutputsRunRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tool_outputs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubmitToolOutputsRunRequest := _SubmitToolOutputsRunRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubmitToolOutputsRunRequest)

	if err != nil {
		return err
	}

	*o = SubmitToolOutputsRunRequest(varSubmitToolOutputsRunRequest)

	return err
}

type NullableSubmitToolOutputsRunRequest struct {
	value *SubmitToolOutputsRunRequest
	isSet bool
}

func (v NullableSubmitToolOutputsRunRequest) Get() *SubmitToolOutputsRunRequest {
	return v.value
}

func (v *NullableSubmitToolOutputsRunRequest) Set(val *SubmitToolOutputsRunRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitToolOutputsRunRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitToolOutputsRunRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitToolOutputsRunRequest(val *SubmitToolOutputsRunRequest) *NullableSubmitToolOutputsRunRequest {
	return &NullableSubmitToolOutputsRunRequest{value: val, isSet: true}
}

func (v NullableSubmitToolOutputsRunRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitToolOutputsRunRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


