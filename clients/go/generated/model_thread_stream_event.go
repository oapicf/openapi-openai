/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.0.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ThreadStreamEvent - struct for ThreadStreamEvent
type ThreadStreamEvent struct {
	ThreadStreamEventOneOf *ThreadStreamEventOneOf
}

// ThreadStreamEventOneOfAsThreadStreamEvent is a convenience function that returns ThreadStreamEventOneOf wrapped in ThreadStreamEvent
func ThreadStreamEventOneOfAsThreadStreamEvent(v *ThreadStreamEventOneOf) ThreadStreamEvent {
	return ThreadStreamEvent{
		ThreadStreamEventOneOf: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ThreadStreamEvent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ThreadStreamEventOneOf
	err = newStrictDecoder(data).Decode(&dst.ThreadStreamEventOneOf)
	if err == nil {
		jsonThreadStreamEventOneOf, _ := json.Marshal(dst.ThreadStreamEventOneOf)
		if string(jsonThreadStreamEventOneOf) == "{}" { // empty struct
			dst.ThreadStreamEventOneOf = nil
		} else {
			if err = validator.Validate(dst.ThreadStreamEventOneOf); err != nil {
				dst.ThreadStreamEventOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.ThreadStreamEventOneOf = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ThreadStreamEventOneOf = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ThreadStreamEvent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ThreadStreamEvent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ThreadStreamEvent) MarshalJSON() ([]byte, error) {
	if src.ThreadStreamEventOneOf != nil {
		return json.Marshal(&src.ThreadStreamEventOneOf)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ThreadStreamEvent) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ThreadStreamEventOneOf != nil {
		return obj.ThreadStreamEventOneOf
	}

	// all schemas are nil
	return nil
}

type NullableThreadStreamEvent struct {
	value *ThreadStreamEvent
	isSet bool
}

func (v NullableThreadStreamEvent) Get() *ThreadStreamEvent {
	return v.value
}

func (v *NullableThreadStreamEvent) Set(val *ThreadStreamEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableThreadStreamEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableThreadStreamEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreadStreamEvent(val *ThreadStreamEvent) *NullableThreadStreamEvent {
	return &NullableThreadStreamEvent{value: val, isSet: true}
}

func (v NullableThreadStreamEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreadStreamEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


