# 
# OpenAI API
# 
# 
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# 
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech

# package openapi3graphql-server

# assistants_api



input CancelRunInput {
    # The ID of the thread to which this run belongs.
    threadId: String!, 
    # The ID of the run to cancel.
    runId: String!
}

input CreateAssistantInput {
    
    createAssistantRequest: CreateAssistantRequestInput
}

input CreateAssistantFileInput {
    # The ID of the assistant for which to create a File. 
    assistantId: String!, 
    
    createAssistantFileRequest: CreateAssistantFileRequestInput
}

input CreateMessageInput {
    # The ID of the [thread](/docs/api-reference/threads) to create a message for.
    threadId: String!, 
    
    createMessageRequest: CreateMessageRequestInput
}

input CreateRunInput {
    # The ID of the thread to run.
    threadId: String!, 
    
    createRunRequest: CreateRunRequestInput
}

input CreateThreadInput {
    
    createThreadRequest: CreateThreadRequestInput
}

input CreateThreadAndRunInput {
    
    createThreadAndRunRequest: CreateThreadAndRunRequestInput
}

input DeleteAssistantInput {
    # The ID of the assistant to delete.
    assistantId: String!
}

input DeleteAssistantFileInput {
    # The ID of the assistant that the file belongs to.
    assistantId: String!, 
    # The ID of the file to delete.
    fileId: String!
}

input DeleteThreadInput {
    # The ID of the thread to delete.
    threadId: String!
}

input ModifyAssistantInput {
    # The ID of the assistant to modify.
    assistantId: String!, 
    
    modifyAssistantRequest: ModifyAssistantRequestInput
}

input ModifyMessageInput {
    # The ID of the thread to which this message belongs.
    threadId: String!, 
    # The ID of the message to modify.
    messageId: String!, 
    
    modifyMessageRequest: ModifyMessageRequestInput
}

input ModifyRunInput {
    # The ID of the [thread](/docs/api-reference/threads) that was run.
    threadId: String!, 
    # The ID of the run to modify.
    runId: String!, 
    
    modifyRunRequest: ModifyRunRequestInput
}

input ModifyThreadInput {
    # The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.
    threadId: String!, 
    
    modifyThreadRequest: ModifyThreadRequestInput
}

input SubmitToolOuputsToRunInput {
    # The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
    threadId: String!, 
    # The ID of the run that requires the tool output submission.
    runId: String!, 
    
    submitToolOutputsRunRequest: SubmitToolOutputsRunRequestInput
}

type Mutation {
  # Cancels a run that is &#x60;in_progress&#x60;.
  # @param String! threadId The ID of the thread to which this run belongs.
  # @param String! runId The ID of the run to cancel.
  # @return [RunObject]
  CancelRun(input: CancelRunInput!): RunObject
  # Create an assistant with a model and instructions.
  # @param CreateAssistantRequest createAssistantRequest 
  # @return [AssistantObject]
  CreateAssistant(input: CreateAssistantInput!): AssistantObject
  # Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
  # @param String! assistantId The ID of the assistant for which to create a File. 
  # @param CreateAssistantFileRequest createAssistantFileRequest 
  # @return [AssistantFileObject]
  CreateAssistantFile(input: CreateAssistantFileInput!): AssistantFileObject
  # Create a message.
  # @param String! threadId The ID of the [thread](/docs/api-reference/threads) to create a message for.
  # @param CreateMessageRequest createMessageRequest 
  # @return [MessageObject]
  CreateMessage(input: CreateMessageInput!): MessageObject
  # Create a run.
  # @param String! threadId The ID of the thread to run.
  # @param CreateRunRequest createRunRequest 
  # @return [RunObject]
  CreateRun(input: CreateRunInput!): RunObject
  # Create a thread.
  # @param CreateThreadRequest createThreadRequest 
  # @return [ThreadObject]
  CreateThread(input: CreateThreadInput!): ThreadObject
  # Create a thread and run it in one request.
  # @param CreateThreadAndRunRequest createThreadAndRunRequest 
  # @return [RunObject]
  CreateThreadAndRun(input: CreateThreadAndRunInput!): RunObject
  # Delete an assistant.
  # @param String! assistantId The ID of the assistant to delete.
  # @return [DeleteAssistantResponse]
  DeleteAssistant(input: DeleteAssistantInput!): DeleteAssistantResponse
  # Delete an assistant file.
  # @param String! assistantId The ID of the assistant that the file belongs to.
  # @param String! fileId The ID of the file to delete.
  # @return [DeleteAssistantFileResponse]
  DeleteAssistantFile(input: DeleteAssistantFileInput!): DeleteAssistantFileResponse
  # Delete a thread.
  # @param String! threadId The ID of the thread to delete.
  # @return [DeleteThreadResponse]
  DeleteThread(input: DeleteThreadInput!): DeleteThreadResponse
  # Modifies an assistant.
  # @param String! assistantId The ID of the assistant to modify.
  # @param ModifyAssistantRequest modifyAssistantRequest 
  # @return [AssistantObject]
  ModifyAssistant(input: ModifyAssistantInput!): AssistantObject
  # Modifies a message.
  # @param String! threadId The ID of the thread to which this message belongs.
  # @param String! messageId The ID of the message to modify.
  # @param ModifyMessageRequest modifyMessageRequest 
  # @return [MessageObject]
  ModifyMessage(input: ModifyMessageInput!): MessageObject
  # Modifies a run.
  # @param String! threadId The ID of the [thread](/docs/api-reference/threads) that was run.
  # @param String! runId The ID of the run to modify.
  # @param ModifyRunRequest modifyRunRequest 
  # @return [RunObject]
  ModifyRun(input: ModifyRunInput!): RunObject
  # Modifies a thread.
  # @param String! threadId The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.
  # @param ModifyThreadRequest modifyThreadRequest 
  # @return [ThreadObject]
  ModifyThread(input: ModifyThreadInput!): ThreadObject
  # When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
  # @param String! threadId The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
  # @param String! runId The ID of the run that requires the tool output submission.
  # @param SubmitToolOutputsRunRequest submitToolOutputsRunRequest 
  # @return [RunObject]
  SubmitToolOuputsToRun(input: SubmitToolOuputsToRunInput!): RunObject
}

type Query {
  # Retrieves an assistant.
  # @param String! assistantId The ID of the assistant to retrieve.
  # @return [AssistantObject]
  GetAssistant(assistantId: String!): AssistantObject
  # Retrieves an AssistantFile.
  # @param String! assistantId The ID of the assistant who the file belongs to.
  # @param String! fileId The ID of the file we&#39;re getting.
  # @return [AssistantFileObject]
  GetAssistantFile(assistantId: String!, fileId: String!): AssistantFileObject
  # Retrieve a message.
  # @param String! threadId The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
  # @param String! messageId The ID of the message to retrieve.
  # @return [MessageObject]
  GetMessage(threadId: String!, messageId: String!): MessageObject
  # Retrieves a message file.
  # @param String! threadId The ID of the thread to which the message and File belong.
  # @param String! messageId The ID of the message the file belongs to.
  # @param String! fileId The ID of the file being retrieved.
  # @return [MessageFileObject]
  GetMessageFile(threadId: String!, messageId: String!, fileId: String!): MessageFileObject
  # Retrieves a run.
  # @param String! threadId The ID of the [thread](/docs/api-reference/threads) that was run.
  # @param String! runId The ID of the run to retrieve.
  # @return [RunObject]
  GetRun(threadId: String!, runId: String!): RunObject
  # Retrieves a run step.
  # @param String! threadId The ID of the thread to which the run and run step belongs.
  # @param String! runId The ID of the run to which the run step belongs.
  # @param String! stepId The ID of the run step to retrieve.
  # @return [RunStepObject]
  GetRunStep(threadId: String!, runId: String!, stepId: String!): RunStepObject
  # Retrieves a thread.
  # @param String! threadId The ID of the thread to retrieve.
  # @return [ThreadObject]
  GetThread(threadId: String!): ThreadObject
  # Returns a list of assistant files.
  # @param String! assistantId The ID of the assistant the file belongs to.
  # @param Int! limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
  # @param String! order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
  # @param String! after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
  # @param String! before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
  # @return [ListAssistantFilesResponse]
  ListAssistantFiles(assistantId: String!, limit: Int!, order: String!, after: String!, before: String!): ListAssistantFilesResponse
  # Returns a list of assistants.
  # @param Int! limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
  # @param String! order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
  # @param String! after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
  # @param String! before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
  # @return [ListAssistantsResponse]
  ListAssistants(limit: Int!, order: String!, after: String!, before: String!): ListAssistantsResponse
  # Returns a list of message files.
  # @param String! threadId The ID of the thread that the message and files belong to.
  # @param String! messageId The ID of the message that the files belongs to.
  # @param Int! limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
  # @param String! order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
  # @param String! after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
  # @param String! before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
  # @return [ListMessageFilesResponse]
  ListMessageFiles(threadId: String!, messageId: String!, limit: Int!, order: String!, after: String!, before: String!): ListMessageFilesResponse
  # Returns a list of messages for a given thread.
  # @param String! threadId The ID of the [thread](/docs/api-reference/threads) the messages belong to.
  # @param Int! limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
  # @param String! order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
  # @param String! after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
  # @param String! before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
  # @param String! runId Filter messages by the run ID that generated them. 
  # @return [ListMessagesResponse]
  ListMessages(threadId: String!, limit: Int!, order: String!, after: String!, before: String!, runId: String!): ListMessagesResponse
  # Returns a list of run steps belonging to a run.
  # @param String! threadId The ID of the thread the run and run steps belong to.
  # @param String! runId The ID of the run the run steps belong to.
  # @param Int! limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
  # @param String! order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
  # @param String! after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
  # @param String! before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
  # @return [ListRunStepsResponse]
  ListRunSteps(threadId: String!, runId: String!, limit: Int!, order: String!, after: String!, before: String!): ListRunStepsResponse
  # Returns a list of runs belonging to a thread.
  # @param String! threadId The ID of the thread the run belongs to.
  # @param Int! limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
  # @param String! order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
  # @param String! after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
  # @param String! before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
  # @return [ListRunsResponse]
  ListRuns(threadId: String!, limit: Int!, order: String!, after: String!, before: String!): ListRunsResponse
}

