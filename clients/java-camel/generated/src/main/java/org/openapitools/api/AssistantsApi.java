/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.api;

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.model.rest.RestParamType;
import org.springframework.stereotype.Component;
import org.openapitools.model.*;
import org.apache.camel.model.rest.RestBindingMode;
import org.apache.camel.LoggingLevel;

@Component
public class AssistantsApi extends RouteBuilder {

    @Override
    public void configure() throws Exception {
        

        /**
        POST /threads/{thread_id}/runs/{run_id}/cancel : Cancels a run that is &#x60;in_progress&#x60;.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .post("/threads/{thread_id}/runs/{run_id}/cancel")
                .description("Cancels a run that is `in_progress`.")
                .id("cancelRunApi")
                .produces("application/json")
                .outType(RunObject.class)
                .param()
                    .name("threadId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the thread to which this run belongs.")
                .endParam()
                .param()
                    .name("runId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the run to cancel.")
                .endParam()
                .to("direct:cancelRun");
        

        /**
        POST /assistants : Create an assistant with a model and instructions.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .post("/assistants")
                .description("Create an assistant with a model and instructions.")
                .id("createAssistantApi")
                .produces("application/json")
                .outType(AssistantObject.class)
                .consumes("application/json")
                .type(CreateAssistantRequest.class)
                
                .param()
                    .name("createAssistantRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:createAssistant");
        

        /**
        POST /assistants/{assistant_id}/files : Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .post("/assistants/{assistant_id}/files")
                .description("Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).")
                .id("createAssistantFileApi")
                .produces("application/json")
                .outType(AssistantFileObject.class)
                .consumes("application/json")
                .type(CreateAssistantFileRequest.class)
                
                .param()
                    .name("assistantId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the assistant for which to create a File. ")
                .endParam()
                .param()
                    .name("createAssistantFileRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:createAssistantFile");
        

        /**
        POST /threads/{thread_id}/messages : Create a message.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .post("/threads/{thread_id}/messages")
                .description("Create a message.")
                .id("createMessageApi")
                .produces("application/json")
                .outType(MessageObject.class)
                .consumes("application/json")
                .type(CreateMessageRequest.class)
                
                .param()
                    .name("threadId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the [thread](/docs/api-reference/threads) to create a message for.")
                .endParam()
                .param()
                    .name("createMessageRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:createMessage");
        

        /**
        POST /threads/{thread_id}/runs : Create a run.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .post("/threads/{thread_id}/runs")
                .description("Create a run.")
                .id("createRunApi")
                .produces("application/json")
                .outType(RunObject.class)
                .consumes("application/json")
                .type(CreateRunRequest.class)
                
                .param()
                    .name("threadId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the thread to run.")
                .endParam()
                .param()
                    .name("createRunRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:createRun");
        

        /**
        POST /threads : Create a thread.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .post("/threads")
                .description("Create a thread.")
                .id("createThreadApi")
                .produces("application/json")
                .outType(ThreadObject.class)
                .consumes("application/json")
                .type(CreateThreadRequest.class)
                
                .param()
                    .name("createThreadRequest")
                    .type(RestParamType.body)
                    .required(false)
                .endParam()
                .to("direct:createThread");
        

        /**
        POST /threads/runs : Create a thread and run it in one request.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .post("/threads/runs")
                .description("Create a thread and run it in one request.")
                .id("createThreadAndRunApi")
                .produces("application/json")
                .outType(RunObject.class)
                .consumes("application/json")
                .type(CreateThreadAndRunRequest.class)
                
                .param()
                    .name("createThreadAndRunRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:createThreadAndRun");
        

        /**
        DELETE /assistants/{assistant_id} : Delete an assistant.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .delete("/assistants/{assistant_id}")
                .description("Delete an assistant.")
                .id("deleteAssistantApi")
                .produces("application/json")
                .outType(DeleteAssistantResponse.class)
                .param()
                    .name("assistantId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the assistant to delete.")
                .endParam()
                .to("direct:deleteAssistant");
        

        /**
        DELETE /assistants/{assistant_id}/files/{file_id} : Delete an assistant file.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .delete("/assistants/{assistant_id}/files/{file_id}")
                .description("Delete an assistant file.")
                .id("deleteAssistantFileApi")
                .produces("application/json")
                .outType(DeleteAssistantFileResponse.class)
                .param()
                    .name("assistantId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the assistant that the file belongs to.")
                .endParam()
                .param()
                    .name("fileId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the file to delete.")
                .endParam()
                .to("direct:deleteAssistantFile");
        

        /**
        DELETE /threads/{thread_id} : Delete a thread.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .delete("/threads/{thread_id}")
                .description("Delete a thread.")
                .id("deleteThreadApi")
                .produces("application/json")
                .outType(DeleteThreadResponse.class)
                .param()
                    .name("threadId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the thread to delete.")
                .endParam()
                .to("direct:deleteThread");
        

        /**
        GET /assistants/{assistant_id} : Retrieves an assistant.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .get("/assistants/{assistant_id}")
                .description("Retrieves an assistant.")
                .id("getAssistantApi")
                .produces("application/json")
                .outType(AssistantObject.class)
                .param()
                    .name("assistantId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the assistant to retrieve.")
                .endParam()
                .to("direct:getAssistant");
        

        /**
        GET /assistants/{assistant_id}/files/{file_id} : Retrieves an AssistantFile.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .get("/assistants/{assistant_id}/files/{file_id}")
                .description("Retrieves an AssistantFile.")
                .id("getAssistantFileApi")
                .produces("application/json")
                .outType(AssistantFileObject.class)
                .param()
                    .name("assistantId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the assistant who the file belongs to.")
                .endParam()
                .param()
                    .name("fileId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the file we're getting.")
                .endParam()
                .to("direct:getAssistantFile");
        

        /**
        GET /threads/{thread_id}/messages/{message_id} : Retrieve a message.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .get("/threads/{thread_id}/messages/{message_id}")
                .description("Retrieve a message.")
                .id("getMessageApi")
                .produces("application/json")
                .outType(MessageObject.class)
                .param()
                    .name("threadId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the [thread](/docs/api-reference/threads) to which this message belongs.")
                .endParam()
                .param()
                    .name("messageId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the message to retrieve.")
                .endParam()
                .to("direct:getMessage");
        

        /**
        GET /threads/{thread_id}/messages/{message_id}/files/{file_id} : Retrieves a message file.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .get("/threads/{thread_id}/messages/{message_id}/files/{file_id}")
                .description("Retrieves a message file.")
                .id("getMessageFileApi")
                .produces("application/json")
                .outType(MessageFileObject.class)
                .param()
                    .name("threadId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the thread to which the message and File belong.")
                .endParam()
                .param()
                    .name("messageId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the message the file belongs to.")
                .endParam()
                .param()
                    .name("fileId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the file being retrieved.")
                .endParam()
                .to("direct:getMessageFile");
        

        /**
        GET /threads/{thread_id}/runs/{run_id} : Retrieves a run.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .get("/threads/{thread_id}/runs/{run_id}")
                .description("Retrieves a run.")
                .id("getRunApi")
                .produces("application/json")
                .outType(RunObject.class)
                .param()
                    .name("threadId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the [thread](/docs/api-reference/threads) that was run.")
                .endParam()
                .param()
                    .name("runId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the run to retrieve.")
                .endParam()
                .to("direct:getRun");
        

        /**
        GET /threads/{thread_id}/runs/{run_id}/steps/{step_id} : Retrieves a run step.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .get("/threads/{thread_id}/runs/{run_id}/steps/{step_id}")
                .description("Retrieves a run step.")
                .id("getRunStepApi")
                .produces("application/json")
                .outType(RunStepObject.class)
                .param()
                    .name("threadId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the thread to which the run and run step belongs.")
                .endParam()
                .param()
                    .name("runId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the run to which the run step belongs.")
                .endParam()
                .param()
                    .name("stepId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the run step to retrieve.")
                .endParam()
                .to("direct:getRunStep");
        

        /**
        GET /threads/{thread_id} : Retrieves a thread.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .get("/threads/{thread_id}")
                .description("Retrieves a thread.")
                .id("getThreadApi")
                .produces("application/json")
                .outType(ThreadObject.class)
                .param()
                    .name("threadId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the thread to retrieve.")
                .endParam()
                .to("direct:getThread");
        

        /**
        GET /assistants/{assistant_id}/files : Returns a list of assistant files.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .get("/assistants/{assistant_id}/files")
                .description("Returns a list of assistant files.")
                .id("listAssistantFilesApi")
                .produces("application/json")
                .outType(ListAssistantFilesResponse.class)
                .param()
                    .name("assistantId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the assistant the file belongs to.")
                .endParam()
                .param()
                    .name("limit")
                    .type(RestParamType.query)
                    .required(false)
                    .description("A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. ")
                .endParam()
                .param()
                    .name("order")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. ")
                .endParam()
                .param()
                    .name("after")
                    .type(RestParamType.query)
                    .required(false)
                    .description("A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. ")
                .endParam()
                .param()
                    .name("before")
                    .type(RestParamType.query)
                    .required(false)
                    .description("A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ")
                .endParam()
                .to("direct:listAssistantFiles");
        

        /**
        GET /assistants : Returns a list of assistants.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .get("/assistants")
                .description("Returns a list of assistants.")
                .id("listAssistantsApi")
                .produces("application/json")
                .outType(ListAssistantsResponse.class)
                .param()
                    .name("limit")
                    .type(RestParamType.query)
                    .required(false)
                    .description("A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. ")
                .endParam()
                .param()
                    .name("order")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. ")
                .endParam()
                .param()
                    .name("after")
                    .type(RestParamType.query)
                    .required(false)
                    .description("A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. ")
                .endParam()
                .param()
                    .name("before")
                    .type(RestParamType.query)
                    .required(false)
                    .description("A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ")
                .endParam()
                .to("direct:listAssistants");
        

        /**
        GET /threads/{thread_id}/messages/{message_id}/files : Returns a list of message files.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .get("/threads/{thread_id}/messages/{message_id}/files")
                .description("Returns a list of message files.")
                .id("listMessageFilesApi")
                .produces("application/json")
                .outType(ListMessageFilesResponse.class)
                .param()
                    .name("threadId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the thread that the message and files belong to.")
                .endParam()
                .param()
                    .name("messageId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the message that the files belongs to.")
                .endParam()
                .param()
                    .name("limit")
                    .type(RestParamType.query)
                    .required(false)
                    .description("A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. ")
                .endParam()
                .param()
                    .name("order")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. ")
                .endParam()
                .param()
                    .name("after")
                    .type(RestParamType.query)
                    .required(false)
                    .description("A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. ")
                .endParam()
                .param()
                    .name("before")
                    .type(RestParamType.query)
                    .required(false)
                    .description("A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ")
                .endParam()
                .to("direct:listMessageFiles");
        

        /**
        GET /threads/{thread_id}/messages : Returns a list of messages for a given thread.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .get("/threads/{thread_id}/messages")
                .description("Returns a list of messages for a given thread.")
                .id("listMessagesApi")
                .produces("application/json")
                .outType(ListMessagesResponse.class)
                .param()
                    .name("threadId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the [thread](/docs/api-reference/threads) the messages belong to.")
                .endParam()
                .param()
                    .name("limit")
                    .type(RestParamType.query)
                    .required(false)
                    .description("A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. ")
                .endParam()
                .param()
                    .name("order")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. ")
                .endParam()
                .param()
                    .name("after")
                    .type(RestParamType.query)
                    .required(false)
                    .description("A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. ")
                .endParam()
                .param()
                    .name("before")
                    .type(RestParamType.query)
                    .required(false)
                    .description("A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ")
                .endParam()
                .param()
                    .name("runId")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Filter messages by the run ID that generated them. ")
                .endParam()
                .to("direct:listMessages");
        

        /**
        GET /threads/{thread_id}/runs/{run_id}/steps : Returns a list of run steps belonging to a run.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .get("/threads/{thread_id}/runs/{run_id}/steps")
                .description("Returns a list of run steps belonging to a run.")
                .id("listRunStepsApi")
                .produces("application/json")
                .outType(ListRunStepsResponse.class)
                .param()
                    .name("threadId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the thread the run and run steps belong to.")
                .endParam()
                .param()
                    .name("runId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the run the run steps belong to.")
                .endParam()
                .param()
                    .name("limit")
                    .type(RestParamType.query)
                    .required(false)
                    .description("A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. ")
                .endParam()
                .param()
                    .name("order")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. ")
                .endParam()
                .param()
                    .name("after")
                    .type(RestParamType.query)
                    .required(false)
                    .description("A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. ")
                .endParam()
                .param()
                    .name("before")
                    .type(RestParamType.query)
                    .required(false)
                    .description("A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ")
                .endParam()
                .to("direct:listRunSteps");
        

        /**
        GET /threads/{thread_id}/runs : Returns a list of runs belonging to a thread.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .get("/threads/{thread_id}/runs")
                .description("Returns a list of runs belonging to a thread.")
                .id("listRunsApi")
                .produces("application/json")
                .outType(ListRunsResponse.class)
                .param()
                    .name("threadId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the thread the run belongs to.")
                .endParam()
                .param()
                    .name("limit")
                    .type(RestParamType.query)
                    .required(false)
                    .description("A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. ")
                .endParam()
                .param()
                    .name("order")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. ")
                .endParam()
                .param()
                    .name("after")
                    .type(RestParamType.query)
                    .required(false)
                    .description("A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. ")
                .endParam()
                .param()
                    .name("before")
                    .type(RestParamType.query)
                    .required(false)
                    .description("A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ")
                .endParam()
                .to("direct:listRuns");
        

        /**
        POST /assistants/{assistant_id} : Modifies an assistant.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .post("/assistants/{assistant_id}")
                .description("Modifies an assistant.")
                .id("modifyAssistantApi")
                .produces("application/json")
                .outType(AssistantObject.class)
                .consumes("application/json")
                .type(ModifyAssistantRequest.class)
                
                .param()
                    .name("assistantId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the assistant to modify.")
                .endParam()
                .param()
                    .name("modifyAssistantRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:modifyAssistant");
        

        /**
        POST /threads/{thread_id}/messages/{message_id} : Modifies a message.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .post("/threads/{thread_id}/messages/{message_id}")
                .description("Modifies a message.")
                .id("modifyMessageApi")
                .produces("application/json")
                .outType(MessageObject.class)
                .consumes("application/json")
                .type(ModifyMessageRequest.class)
                
                .param()
                    .name("threadId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the thread to which this message belongs.")
                .endParam()
                .param()
                    .name("messageId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the message to modify.")
                .endParam()
                .param()
                    .name("modifyMessageRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:modifyMessage");
        

        /**
        POST /threads/{thread_id}/runs/{run_id} : Modifies a run.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .post("/threads/{thread_id}/runs/{run_id}")
                .description("Modifies a run.")
                .id("modifyRunApi")
                .produces("application/json")
                .outType(RunObject.class)
                .consumes("application/json")
                .type(ModifyRunRequest.class)
                
                .param()
                    .name("threadId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the [thread](/docs/api-reference/threads) that was run.")
                .endParam()
                .param()
                    .name("runId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the run to modify.")
                .endParam()
                .param()
                    .name("modifyRunRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:modifyRun");
        

        /**
        POST /threads/{thread_id} : Modifies a thread.
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .post("/threads/{thread_id}")
                .description("Modifies a thread.")
                .id("modifyThreadApi")
                .produces("application/json")
                .outType(ThreadObject.class)
                .consumes("application/json")
                .type(ModifyThreadRequest.class)
                
                .param()
                    .name("threadId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the thread to modify. Only the `metadata` can be modified.")
                .endParam()
                .param()
                    .name("modifyThreadRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:modifyThread");
        

        /**
        POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs : When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
        **/
        rest()
            .securityDefinitions()
                .bearerToken("ApiKeyAuth").end()
            .post("/threads/{thread_id}/runs/{run_id}/submit_tool_outputs")
                .description("When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request. ")
                .id("submitToolOuputsToRunApi")
                .produces("application/json")
                .outType(RunObject.class)
                .consumes("application/json")
                .type(SubmitToolOutputsRunRequest.class)
                
                .param()
                    .name("threadId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the [thread](/docs/api-reference/threads) to which this run belongs.")
                .endParam()
                .param()
                    .name("runId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the run that requires the tool output submission.")
                .endParam()
                .param()
                    .name("submitToolOutputsRunRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:submitToolOuputsToRun");
        
    }
}
