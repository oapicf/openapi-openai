/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.api;

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.model.rest.RestParamType;
import org.springframework.stereotype.Component;
import org.openapitools.model.*;
import org.apache.camel.model.rest.RestBindingMode;
import org.apache.camel.LoggingLevel;

@Component
public class OpenAiApi extends RouteBuilder {

    @Override
    public void configure() throws Exception {
        

        /**
        POST /fine-tunes/{fine_tune_id}/cancel : Immediately cancel a fine-tune job. 
        **/
        rest()
            .post("/fine-tunes/{fine_tune_id}/cancel")
                .description("Immediately cancel a fine-tune job. ")
                .id("cancelFineTuneApi")
                .produces("application/json")
                .outType(FineTune.class)
                .param()
                    .name("fineTuneId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the fine-tune job to cancel ")
                .endParam()
                .to("direct:cancelFineTune");
        

        /**
        POST /chat/completions : Creates a model response for the given chat conversation.
        **/
        rest()
            .post("/chat/completions")
                .description("Creates a model response for the given chat conversation.")
                .id("createChatCompletionApi")
                .produces("application/json")
                .outType(CreateChatCompletionResponse.class)
                .consumes("application/json")
                .type(CreateChatCompletionRequest.class)
                
                .param()
                    .name("createChatCompletionRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:createChatCompletion");
        

        /**
        POST /completions : Creates a completion for the provided prompt and parameters.
        **/
        rest()
            .post("/completions")
                .description("Creates a completion for the provided prompt and parameters.")
                .id("createCompletionApi")
                .produces("application/json")
                .outType(CreateCompletionResponse.class)
                .consumes("application/json")
                .type(CreateCompletionRequest.class)
                
                .param()
                    .name("createCompletionRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:createCompletion");
        

        /**
        POST /edits : Creates a new edit for the provided input, instruction, and parameters.
        **/
        rest()
            .post("/edits")
                .description("Creates a new edit for the provided input, instruction, and parameters.")
                .id("createEditApi")
                .produces("application/json")
                .outType(CreateEditResponse.class)
                .consumes("application/json")
                .type(CreateEditRequest.class)
                
                .param()
                    .name("createEditRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:createEdit");
        

        /**
        POST /embeddings : Creates an embedding vector representing the input text.
        **/
        rest()
            .post("/embeddings")
                .description("Creates an embedding vector representing the input text.")
                .id("createEmbeddingApi")
                .produces("application/json")
                .outType(CreateEmbeddingResponse.class)
                .consumes("application/json")
                .type(CreateEmbeddingRequest.class)
                
                .param()
                    .name("createEmbeddingRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:createEmbedding");
        

        /**
        POST /files : Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. 
        **/
        rest()
            .post("/files")
                .description("Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. ")
                .id("createFileApi")
                .clientRequestValidation(false)
                .bindingMode(RestBindingMode.off)
                .produces("application/json")
                .outType(OpenAIFile.class)
                .consumes("multipart/form-data")
                
                .param()
                    .name("file")
                    .type(RestParamType.formData)
                    .required(true)
                    .description("Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the `purpose` is set to \\\"fine-tune\\\", each line is a JSON record with \\\"prompt\\\" and \\\"completion\\\" fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data). ")
                .endParam()
                .param()
                    .name("purpose")
                    .type(RestParamType.formData)
                    .required(true)
                    .description("The intended purpose of the uploaded documents.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. ")
                .endParam()
                .to("direct:createFile");
        

        /**
        POST /fine-tunes : Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
        **/
        rest()
            .post("/fine-tunes")
                .description("Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) ")
                .id("createFineTuneApi")
                .produces("application/json")
                .outType(FineTune.class)
                .consumes("application/json")
                .type(CreateFineTuneRequest.class)
                
                .param()
                    .name("createFineTuneRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:createFineTune");
        

        /**
        POST /images/generations : Creates an image given a prompt.
        **/
        rest()
            .post("/images/generations")
                .description("Creates an image given a prompt.")
                .id("createImageApi")
                .produces("application/json")
                .outType(ImagesResponse.class)
                .consumes("application/json")
                .type(CreateImageRequest.class)
                
                .param()
                    .name("createImageRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:createImage");
        

        /**
        POST /images/edits : Creates an edited or extended image given an original image and a prompt.
        **/
        rest()
            .post("/images/edits")
                .description("Creates an edited or extended image given an original image and a prompt.")
                .id("createImageEditApi")
                .clientRequestValidation(false)
                .bindingMode(RestBindingMode.off)
                .produces("application/json")
                .outType(ImagesResponse.class)
                .consumes("multipart/form-data")
                
                .param()
                    .name("image")
                    .type(RestParamType.formData)
                    .required(true)
                    .description("The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.")
                .endParam()
                .param()
                    .name("mask")
                    .type(RestParamType.formData)
                    .required(false)
                    .description("An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.")
                .endParam()
                .param()
                    .name("prompt")
                    .type(RestParamType.formData)
                    .required(true)
                    .description("A text description of the desired image(s). The maximum length is 1000 characters.")
                .endParam()
                .param()
                    .name("n")
                    .type(RestParamType.formData)
                    .required(false)
                    .description("The number of images to generate. Must be between 1 and 10.")
                .endParam()
                .param()
                    .name("size")
                    .type(RestParamType.formData)
                    .required(false)
                    .description("The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.")
                .endParam()
                .param()
                    .name("responseFormat")
                    .type(RestParamType.formData)
                    .required(false)
                    .description("The format in which the generated images are returned. Must be one of `url` or `b64_json`.")
                .endParam()
                .param()
                    .name("user")
                    .type(RestParamType.formData)
                    .required(false)
                    .description("A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). ")
                .endParam()
                .to("direct:createImageEdit");
        

        /**
        POST /images/variations : Creates a variation of a given image.
        **/
        rest()
            .post("/images/variations")
                .description("Creates a variation of a given image.")
                .id("createImageVariationApi")
                .clientRequestValidation(false)
                .bindingMode(RestBindingMode.off)
                .produces("application/json")
                .outType(ImagesResponse.class)
                .consumes("multipart/form-data")
                
                .param()
                    .name("image")
                    .type(RestParamType.formData)
                    .required(true)
                    .description("The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.")
                .endParam()
                .param()
                    .name("n")
                    .type(RestParamType.formData)
                    .required(false)
                    .description("The number of images to generate. Must be between 1 and 10.")
                .endParam()
                .param()
                    .name("size")
                    .type(RestParamType.formData)
                    .required(false)
                    .description("The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.")
                .endParam()
                .param()
                    .name("responseFormat")
                    .type(RestParamType.formData)
                    .required(false)
                    .description("The format in which the generated images are returned. Must be one of `url` or `b64_json`.")
                .endParam()
                .param()
                    .name("user")
                    .type(RestParamType.formData)
                    .required(false)
                    .description("A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). ")
                .endParam()
                .to("direct:createImageVariation");
        

        /**
        POST /moderations : Classifies if text violates OpenAI&#39;s Content Policy
        **/
        rest()
            .post("/moderations")
                .description("Classifies if text violates OpenAI's Content Policy")
                .id("createModerationApi")
                .produces("application/json")
                .outType(CreateModerationResponse.class)
                .consumes("application/json")
                .type(CreateModerationRequest.class)
                
                .param()
                    .name("createModerationRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:createModeration");
        

        /**
        POST /audio/transcriptions : Transcribes audio into the input language.
        **/
        rest()
            .post("/audio/transcriptions")
                .description("Transcribes audio into the input language.")
                .id("createTranscriptionApi")
                .clientRequestValidation(false)
                .bindingMode(RestBindingMode.off)
                .produces("application/json")
                .outType(CreateTranscriptionResponse.class)
                .consumes("multipart/form-data")
                
                .param()
                    .name("file")
                    .type(RestParamType.formData)
                    .required(true)
                    .description("The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. ")
                .endParam()
                .param()
                    .name("model")
                    .type(RestParamType.formData)
                    .required(true)
                .endParam()
                .param()
                    .name("prompt")
                    .type(RestParamType.formData)
                    .required(false)
                    .description("An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. ")
                .endParam()
                .param()
                    .name("responseFormat")
                    .type(RestParamType.formData)
                    .required(false)
                    .description("The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. ")
                .endParam()
                .param()
                    .name("temperature")
                    .type(RestParamType.formData)
                    .required(false)
                    .description("The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. ")
                .endParam()
                .param()
                    .name("language")
                    .type(RestParamType.formData)
                    .required(false)
                    .description("The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. ")
                .endParam()
                .to("direct:createTranscription");
        

        /**
        POST /audio/translations : Translates audio into English.
        **/
        rest()
            .post("/audio/translations")
                .description("Translates audio into English.")
                .id("createTranslationApi")
                .clientRequestValidation(false)
                .bindingMode(RestBindingMode.off)
                .produces("application/json")
                .outType(CreateTranslationResponse.class)
                .consumes("multipart/form-data")
                
                .param()
                    .name("file")
                    .type(RestParamType.formData)
                    .required(true)
                    .description("The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. ")
                .endParam()
                .param()
                    .name("model")
                    .type(RestParamType.formData)
                    .required(true)
                .endParam()
                .param()
                    .name("prompt")
                    .type(RestParamType.formData)
                    .required(false)
                    .description("An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. ")
                .endParam()
                .param()
                    .name("responseFormat")
                    .type(RestParamType.formData)
                    .required(false)
                    .description("The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. ")
                .endParam()
                .param()
                    .name("temperature")
                    .type(RestParamType.formData)
                    .required(false)
                    .description("The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. ")
                .endParam()
                .to("direct:createTranslation");
        

        /**
        DELETE /files/{file_id} : Delete a file.
        **/
        rest()
            .delete("/files/{file_id}")
                .description("Delete a file.")
                .id("deleteFileApi")
                .produces("application/json")
                .outType(DeleteFileResponse.class)
                .param()
                    .name("fileId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the file to use for this request")
                .endParam()
                .to("direct:deleteFile");
        

        /**
        DELETE /models/{model} : Delete a fine-tuned model. You must have the Owner role in your organization.
        **/
        rest()
            .delete("/models/{model}")
                .description("Delete a fine-tuned model. You must have the Owner role in your organization.")
                .id("deleteModelApi")
                .produces("application/json")
                .outType(DeleteModelResponse.class)
                .param()
                    .name("model")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The model to delete")
                .endParam()
                .to("direct:deleteModel");
        

        /**
        GET /files/{file_id}/content : Returns the contents of the specified file
        **/
        rest()
            .get("/files/{file_id}/content")
                .description("Returns the contents of the specified file")
                .id("downloadFileApi")
                .produces("application/json")
                .outType(String.class)
                .param()
                    .name("fileId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the file to use for this request")
                .endParam()
                .to("direct:downloadFile");
        

        /**
        GET /files : Returns a list of files that belong to the user&#39;s organization.
        **/
        rest()
            .get("/files")
                .description("Returns a list of files that belong to the user's organization.")
                .id("listFilesApi")
                .produces("application/json")
                .outType(ListFilesResponse.class)
                .to("direct:listFiles");
        

        /**
        GET /fine-tunes/{fine_tune_id}/events : Get fine-grained status updates for a fine-tune job. 
        **/
        rest()
            .get("/fine-tunes/{fine_tune_id}/events")
                .description("Get fine-grained status updates for a fine-tune job. ")
                .id("listFineTuneEventsApi")
                .produces("application/json")
                .outType(ListFineTuneEventsResponse.class)
                .param()
                    .name("fineTuneId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the fine-tune job to get events for. ")
                .endParam()
                .param()
                    .name("stream")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a `data: [DONE]` message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned. ")
                .endParam()
                .to("direct:listFineTuneEvents");
        

        /**
        GET /fine-tunes : List your organization&#39;s fine-tuning jobs 
        **/
        rest()
            .get("/fine-tunes")
                .description("List your organization's fine-tuning jobs ")
                .id("listFineTunesApi")
                .produces("application/json")
                .outType(ListFineTunesResponse.class)
                .to("direct:listFineTunes");
        

        /**
        GET /models : Lists the currently available models, and provides basic information about each one such as the owner and availability.
        **/
        rest()
            .get("/models")
                .description("Lists the currently available models, and provides basic information about each one such as the owner and availability.")
                .id("listModelsApi")
                .produces("application/json")
                .outType(ListModelsResponse.class)
                .to("direct:listModels");
        

        /**
        GET /files/{file_id} : Returns information about a specific file.
        **/
        rest()
            .get("/files/{file_id}")
                .description("Returns information about a specific file.")
                .id("retrieveFileApi")
                .produces("application/json")
                .outType(OpenAIFile.class)
                .param()
                    .name("fileId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the file to use for this request")
                .endParam()
                .to("direct:retrieveFile");
        

        /**
        GET /fine-tunes/{fine_tune_id} : Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
        **/
        rest()
            .get("/fine-tunes/{fine_tune_id}")
                .description("Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) ")
                .id("retrieveFineTuneApi")
                .produces("application/json")
                .outType(FineTune.class)
                .param()
                    .name("fineTuneId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the fine-tune job ")
                .endParam()
                .to("direct:retrieveFineTune");
        

        /**
        GET /models/{model} : Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
        **/
        rest()
            .get("/models/{model}")
                .description("Retrieves a model instance, providing basic information about the model such as the owner and permissioning.")
                .id("retrieveModelApi")
                .produces("application/json")
                .outType(Model.class)
                .param()
                    .name("model")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The ID of the model to use for this request")
                .endParam()
                .to("direct:retrieveModel");
        
    }
}
