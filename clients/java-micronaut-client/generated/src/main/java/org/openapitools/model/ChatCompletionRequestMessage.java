/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.model.ChatCompletionMessageToolCall;
import org.openapitools.model.ChatCompletionRequestAssistantMessage;
import org.openapitools.model.ChatCompletionRequestAssistantMessageFunctionCall;
import org.openapitools.model.ChatCompletionRequestFunctionMessage;
import org.openapitools.model.ChatCompletionRequestSystemMessage;
import org.openapitools.model.ChatCompletionRequestToolMessage;
import org.openapitools.model.ChatCompletionRequestUserMessage;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * ChatCompletionRequestMessage
 */
@JsonPropertyOrder({
  ChatCompletionRequestMessage.JSON_PROPERTY_CONTENT,
  ChatCompletionRequestMessage.JSON_PROPERTY_ROLE,
  ChatCompletionRequestMessage.JSON_PROPERTY_NAME,
  ChatCompletionRequestMessage.JSON_PROPERTY_TOOL_CALLS,
  ChatCompletionRequestMessage.JSON_PROPERTY_FUNCTION_CALL,
  ChatCompletionRequestMessage.JSON_PROPERTY_TOOL_CALL_ID
})
@JsonTypeName("ChatCompletionRequestMessage")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-11-03T11:06:40.431829781Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Introspected
public class ChatCompletionRequestMessage {
    public static final String JSON_PROPERTY_CONTENT = "content";
    private String content;

    /**
     * The role of the messages author, in this case &#x60;function&#x60;.
     */
    public enum RoleEnum {
        FUNCTION("function");

        private String value;

        RoleEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static RoleEnum fromValue(String value) {
            for (RoleEnum b : RoleEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_ROLE = "role";
    private RoleEnum role;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_TOOL_CALLS = "tool_calls";
    private List<@Valid ChatCompletionMessageToolCall> toolCalls = null;

    public static final String JSON_PROPERTY_FUNCTION_CALL = "function_call";
    private ChatCompletionRequestAssistantMessageFunctionCall functionCall;

    public static final String JSON_PROPERTY_TOOL_CALL_ID = "tool_call_id";
    private String toolCallId;

    public ChatCompletionRequestMessage(String content, RoleEnum role, String name, String toolCallId) {
        this.content = content;
        this.role = role;
        this.name = name;
        this.toolCallId = toolCallId;
    }

    public ChatCompletionRequestMessage content(String content) {
        this.content = content;
        return this;
    }

    /**
     * The contents of the function message.
     * @return content
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_CONTENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getContent() {
        return content;
    }

    @JsonProperty(JSON_PROPERTY_CONTENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setContent(String content) {
        this.content = content;
    }

    public ChatCompletionRequestMessage role(RoleEnum role) {
        this.role = role;
        return this;
    }

    /**
     * The role of the messages author, in this case &#x60;function&#x60;.
     * @return role
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_ROLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public RoleEnum getRole() {
        return role;
    }

    @JsonProperty(JSON_PROPERTY_ROLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRole(RoleEnum role) {
        this.role = role;
    }

    public ChatCompletionRequestMessage name(String name) {
        this.name = name;
        return this;
    }

    /**
     * The name of the function to call.
     * @return name
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(String name) {
        this.name = name;
    }

    public ChatCompletionRequestMessage toolCalls(List<@Valid ChatCompletionMessageToolCall> toolCalls) {
        this.toolCalls = toolCalls;
        return this;
    }

    public ChatCompletionRequestMessage addToolCallsItem(ChatCompletionMessageToolCall toolCallsItem) {
        if (this.toolCalls == null) {
            this.toolCalls = new ArrayList<>();
        }
        this.toolCalls.add(toolCallsItem);
        return this;
    }

    /**
     * The tool calls generated by the model, such as function calls.
     * @return toolCalls
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_TOOL_CALLS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<@Valid ChatCompletionMessageToolCall> getToolCalls() {
        return toolCalls;
    }

    @JsonProperty(JSON_PROPERTY_TOOL_CALLS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setToolCalls(List<@Valid ChatCompletionMessageToolCall> toolCalls) {
        this.toolCalls = toolCalls;
    }

    public ChatCompletionRequestMessage functionCall(ChatCompletionRequestAssistantMessageFunctionCall functionCall) {
        this.functionCall = functionCall;
        return this;
    }

    /**
     * Get functionCall
     * @return functionCall
     */
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_FUNCTION_CALL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public ChatCompletionRequestAssistantMessageFunctionCall getFunctionCall() {
        return functionCall;
    }

    @JsonProperty(JSON_PROPERTY_FUNCTION_CALL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFunctionCall(ChatCompletionRequestAssistantMessageFunctionCall functionCall) {
        this.functionCall = functionCall;
    }

    public ChatCompletionRequestMessage toolCallId(String toolCallId) {
        this.toolCallId = toolCallId;
        return this;
    }

    /**
     * Tool call that this message is responding to.
     * @return toolCallId
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_TOOL_CALL_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getToolCallId() {
        return toolCallId;
    }

    @JsonProperty(JSON_PROPERTY_TOOL_CALL_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setToolCallId(String toolCallId) {
        this.toolCallId = toolCallId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChatCompletionRequestMessage chatCompletionRequestMessage = (ChatCompletionRequestMessage) o;
        return Objects.equals(this.content, chatCompletionRequestMessage.content) &&
            Objects.equals(this.role, chatCompletionRequestMessage.role) &&
            Objects.equals(this.name, chatCompletionRequestMessage.name) &&
            Objects.equals(this.toolCalls, chatCompletionRequestMessage.toolCalls) &&
            Objects.equals(this.functionCall, chatCompletionRequestMessage.functionCall) &&
            Objects.equals(this.toolCallId, chatCompletionRequestMessage.toolCallId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(content, role, name, toolCalls, functionCall, toolCallId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ChatCompletionRequestMessage {\n");
        sb.append("    content: ").append(toIndentedString(content)).append("\n");
        sb.append("    role: ").append(toIndentedString(role)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    toolCalls: ").append(toIndentedString(toolCalls)).append("\n");
        sb.append("    functionCall: ").append(toIndentedString(functionCall)).append("\n");
        sb.append("    toolCallId: ").append(toIndentedString(toolCallId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

