/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * For fine-tuning jobs that have &#x60;failed&#x60;, this will contain more information on the cause of the failure.
 */
@JsonPropertyOrder({
  FineTuningJobError.JSON_PROPERTY_CODE,
  FineTuningJobError.JSON_PROPERTY_MESSAGE,
  FineTuningJobError.JSON_PROPERTY_PARAM
})
@JsonTypeName("FineTuningJob_error")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-11-03T11:06:40.431829781Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Introspected
public class FineTuningJobError {
    public static final String JSON_PROPERTY_CODE = "code";
    private String code;

    public static final String JSON_PROPERTY_MESSAGE = "message";
    private String message;

    public static final String JSON_PROPERTY_PARAM = "param";
    private String param;

    public FineTuningJobError(String code, String message, String param) {
        this.code = code;
        this.message = message;
        this.param = param;
    }

    public FineTuningJobError code(String code) {
        this.code = code;
        return this;
    }

    /**
     * A machine-readable error code.
     * @return code
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getCode() {
        return code;
    }

    @JsonProperty(JSON_PROPERTY_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCode(String code) {
        this.code = code;
    }

    public FineTuningJobError message(String message) {
        this.message = message;
        return this;
    }

    /**
     * A human-readable error message.
     * @return message
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getMessage() {
        return message;
    }

    @JsonProperty(JSON_PROPERTY_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMessage(String message) {
        this.message = message;
    }

    public FineTuningJobError param(String param) {
        this.param = param;
        return this;
    }

    /**
     * The parameter that was invalid, usually &#x60;training_file&#x60; or &#x60;validation_file&#x60;. This field will be null if the failure was not parameter-specific.
     * @return param
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_PARAM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getParam() {
        return param;
    }

    @JsonProperty(JSON_PROPERTY_PARAM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setParam(String param) {
        this.param = param;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FineTuningJobError fineTuningJobError = (FineTuningJobError) o;
        return Objects.equals(this.code, fineTuningJobError.code) &&
            Objects.equals(this.message, fineTuningJobError.message) &&
            Objects.equals(this.param, fineTuningJobError.param);
    }

    @Override
    public int hashCode() {
        return Objects.hash(code, message, param);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FineTuningJobError {\n");
        sb.append("    code: ").append(toIndentedString(code)).append("\n");
        sb.append("    message: ").append(toIndentedString(message)).append("\n");
        sb.append("    param: ").append(toIndentedString(param)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

