/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * TranscriptionSegment
 */
@JsonPropertyOrder({
  TranscriptionSegment.JSON_PROPERTY_ID,
  TranscriptionSegment.JSON_PROPERTY_SEEK,
  TranscriptionSegment.JSON_PROPERTY_START,
  TranscriptionSegment.JSON_PROPERTY_END,
  TranscriptionSegment.JSON_PROPERTY_TEXT,
  TranscriptionSegment.JSON_PROPERTY_TOKENS,
  TranscriptionSegment.JSON_PROPERTY_TEMPERATURE,
  TranscriptionSegment.JSON_PROPERTY_AVG_LOGPROB,
  TranscriptionSegment.JSON_PROPERTY_COMPRESSION_RATIO,
  TranscriptionSegment.JSON_PROPERTY_NO_SPEECH_PROB
})
@JsonTypeName("TranscriptionSegment")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-04-14T13:37:52.123317469Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Introspected
public class TranscriptionSegment {
    public static final String JSON_PROPERTY_ID = "id";
    private Integer id;

    public static final String JSON_PROPERTY_SEEK = "seek";
    private Integer seek;

    public static final String JSON_PROPERTY_START = "start";
    private Float start;

    public static final String JSON_PROPERTY_END = "end";
    private Float end;

    public static final String JSON_PROPERTY_TEXT = "text";
    private String text;

    public static final String JSON_PROPERTY_TOKENS = "tokens";
    private List<Integer> tokens = new ArrayList<>();

    public static final String JSON_PROPERTY_TEMPERATURE = "temperature";
    private Float temperature;

    public static final String JSON_PROPERTY_AVG_LOGPROB = "avg_logprob";
    private Float avgLogprob;

    public static final String JSON_PROPERTY_COMPRESSION_RATIO = "compression_ratio";
    private Float compressionRatio;

    public static final String JSON_PROPERTY_NO_SPEECH_PROB = "no_speech_prob";
    private Float noSpeechProb;

    public TranscriptionSegment(Integer id, Integer seek, Float start, Float end, String text, List<Integer> tokens, Float temperature, Float avgLogprob, Float compressionRatio, Float noSpeechProb) {
        this.id = id;
        this.seek = seek;
        this.start = start;
        this.end = end;
        this.text = text;
        this.tokens = tokens;
        this.temperature = temperature;
        this.avgLogprob = avgLogprob;
        this.compressionRatio = compressionRatio;
        this.noSpeechProb = noSpeechProb;
    }

    public TranscriptionSegment id(Integer id) {
        this.id = id;
        return this;
    }

    /**
     * Unique identifier of the segment.
     * @return id
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(Integer id) {
        this.id = id;
    }

    public TranscriptionSegment seek(Integer seek) {
        this.seek = seek;
        return this;
    }

    /**
     * Seek offset of the segment.
     * @return seek
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_SEEK)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getSeek() {
        return seek;
    }

    @JsonProperty(JSON_PROPERTY_SEEK)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSeek(Integer seek) {
        this.seek = seek;
    }

    public TranscriptionSegment start(Float start) {
        this.start = start;
        return this;
    }

    /**
     * Start time of the segment in seconds.
     * @return start
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_START)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Float getStart() {
        return start;
    }

    @JsonProperty(JSON_PROPERTY_START)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStart(Float start) {
        this.start = start;
    }

    public TranscriptionSegment end(Float end) {
        this.end = end;
        return this;
    }

    /**
     * End time of the segment in seconds.
     * @return end
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_END)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Float getEnd() {
        return end;
    }

    @JsonProperty(JSON_PROPERTY_END)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEnd(Float end) {
        this.end = end;
    }

    public TranscriptionSegment text(String text) {
        this.text = text;
        return this;
    }

    /**
     * Text content of the segment.
     * @return text
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_TEXT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getText() {
        return text;
    }

    @JsonProperty(JSON_PROPERTY_TEXT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setText(String text) {
        this.text = text;
    }

    public TranscriptionSegment tokens(List<Integer> tokens) {
        this.tokens = tokens;
        return this;
    }

    public TranscriptionSegment addTokensItem(Integer tokensItem) {
        this.tokens.add(tokensItem);
        return this;
    }

    /**
     * Array of token IDs for the text content.
     * @return tokens
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_TOKENS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<Integer> getTokens() {
        return tokens;
    }

    @JsonProperty(JSON_PROPERTY_TOKENS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTokens(List<Integer> tokens) {
        this.tokens = tokens;
    }

    public TranscriptionSegment temperature(Float temperature) {
        this.temperature = temperature;
        return this;
    }

    /**
     * Temperature parameter used for generating the segment.
     * @return temperature
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_TEMPERATURE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Float getTemperature() {
        return temperature;
    }

    @JsonProperty(JSON_PROPERTY_TEMPERATURE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTemperature(Float temperature) {
        this.temperature = temperature;
    }

    public TranscriptionSegment avgLogprob(Float avgLogprob) {
        this.avgLogprob = avgLogprob;
        return this;
    }

    /**
     * Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
     * @return avgLogprob
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_AVG_LOGPROB)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Float getAvgLogprob() {
        return avgLogprob;
    }

    @JsonProperty(JSON_PROPERTY_AVG_LOGPROB)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAvgLogprob(Float avgLogprob) {
        this.avgLogprob = avgLogprob;
    }

    public TranscriptionSegment compressionRatio(Float compressionRatio) {
        this.compressionRatio = compressionRatio;
        return this;
    }

    /**
     * Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
     * @return compressionRatio
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_COMPRESSION_RATIO)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Float getCompressionRatio() {
        return compressionRatio;
    }

    @JsonProperty(JSON_PROPERTY_COMPRESSION_RATIO)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCompressionRatio(Float compressionRatio) {
        this.compressionRatio = compressionRatio;
    }

    public TranscriptionSegment noSpeechProb(Float noSpeechProb) {
        this.noSpeechProb = noSpeechProb;
        return this;
    }

    /**
     * Probability of no speech in the segment. If the value is higher than 1.0 and the &#x60;avg_logprob&#x60; is below -1, consider this segment silent.
     * @return noSpeechProb
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_NO_SPEECH_PROB)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Float getNoSpeechProb() {
        return noSpeechProb;
    }

    @JsonProperty(JSON_PROPERTY_NO_SPEECH_PROB)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setNoSpeechProb(Float noSpeechProb) {
        this.noSpeechProb = noSpeechProb;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TranscriptionSegment transcriptionSegment = (TranscriptionSegment) o;
        return Objects.equals(this.id, transcriptionSegment.id) &&
            Objects.equals(this.seek, transcriptionSegment.seek) &&
            Objects.equals(this.start, transcriptionSegment.start) &&
            Objects.equals(this.end, transcriptionSegment.end) &&
            Objects.equals(this.text, transcriptionSegment.text) &&
            Objects.equals(this.tokens, transcriptionSegment.tokens) &&
            Objects.equals(this.temperature, transcriptionSegment.temperature) &&
            Objects.equals(this.avgLogprob, transcriptionSegment.avgLogprob) &&
            Objects.equals(this.compressionRatio, transcriptionSegment.compressionRatio) &&
            Objects.equals(this.noSpeechProb, transcriptionSegment.noSpeechProb);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, seek, start, end, text, tokens, temperature, avgLogprob, compressionRatio, noSpeechProb);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TranscriptionSegment {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    seek: ").append(toIndentedString(seek)).append("\n");
        sb.append("    start: ").append(toIndentedString(start)).append("\n");
        sb.append("    end: ").append(toIndentedString(end)).append("\n");
        sb.append("    text: ").append(toIndentedString(text)).append("\n");
        sb.append("    tokens: ").append(toIndentedString(tokens)).append("\n");
        sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
        sb.append("    avgLogprob: ").append(toIndentedString(avgLogprob)).append("\n");
        sb.append("    compressionRatio: ").append(toIndentedString(compressionRatio)).append("\n");
        sb.append("    noSpeechProb: ").append(toIndentedString(noSpeechProb)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

