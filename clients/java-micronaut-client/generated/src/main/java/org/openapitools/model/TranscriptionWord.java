/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * TranscriptionWord
 */
@JsonPropertyOrder({
  TranscriptionWord.JSON_PROPERTY_WORD,
  TranscriptionWord.JSON_PROPERTY_START,
  TranscriptionWord.JSON_PROPERTY_END
})
@JsonTypeName("TranscriptionWord")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-04-14T13:37:52.123317469Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Introspected
public class TranscriptionWord {
    public static final String JSON_PROPERTY_WORD = "word";
    private String word;

    public static final String JSON_PROPERTY_START = "start";
    private Float start;

    public static final String JSON_PROPERTY_END = "end";
    private Float end;

    public TranscriptionWord(String word, Float start, Float end) {
        this.word = word;
        this.start = start;
        this.end = end;
    }

    public TranscriptionWord word(String word) {
        this.word = word;
        return this;
    }

    /**
     * The text content of the word.
     * @return word
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_WORD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getWord() {
        return word;
    }

    @JsonProperty(JSON_PROPERTY_WORD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setWord(String word) {
        this.word = word;
    }

    public TranscriptionWord start(Float start) {
        this.start = start;
        return this;
    }

    /**
     * Start time of the word in seconds.
     * @return start
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_START)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Float getStart() {
        return start;
    }

    @JsonProperty(JSON_PROPERTY_START)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStart(Float start) {
        this.start = start;
    }

    public TranscriptionWord end(Float end) {
        this.end = end;
        return this;
    }

    /**
     * End time of the word in seconds.
     * @return end
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_END)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Float getEnd() {
        return end;
    }

    @JsonProperty(JSON_PROPERTY_END)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEnd(Float end) {
        this.end = end;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TranscriptionWord transcriptionWord = (TranscriptionWord) o;
        return Objects.equals(this.word, transcriptionWord.word) &&
            Objects.equals(this.start, transcriptionWord.start) &&
            Objects.equals(this.end, transcriptionWord.end);
    }

    @Override
    public int hashCode() {
        return Objects.hash(word, start, end);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TranscriptionWord {\n");
        sb.append("    word: ").append(toIndentedString(word)).append("\n");
        sb.append("    start: ").append(toIndentedString(start)).append("\n");
        sb.append("    end: ").append(toIndentedString(end)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

