/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.controller;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import reactor.core.publisher.Mono;
import io.micronaut.http.HttpStatus;
import io.micronaut.http.exceptions.HttpStatusException;
import org.openapitools.model.AssistantFileObject;
import org.openapitools.model.AssistantObject;
import org.openapitools.model.CreateAssistantFileRequest;
import org.openapitools.model.CreateAssistantRequest;
import org.openapitools.model.CreateMessageRequest;
import org.openapitools.model.CreateRunRequest;
import org.openapitools.model.CreateThreadAndRunRequest;
import org.openapitools.model.CreateThreadRequest;
import org.openapitools.model.DeleteAssistantFileResponse;
import org.openapitools.model.DeleteAssistantResponse;
import org.openapitools.model.DeleteThreadResponse;
import org.openapitools.model.ListAssistantFilesResponse;
import org.openapitools.model.ListAssistantsResponse;
import org.openapitools.model.ListMessageFilesResponse;
import org.openapitools.model.ListMessagesResponse;
import org.openapitools.model.ListRunStepsResponse;
import org.openapitools.model.ListRunsResponse;
import org.openapitools.model.MessageFileObject;
import org.openapitools.model.MessageObject;
import org.openapitools.model.ModifyAssistantRequest;
import org.openapitools.model.ModifyMessageRequest;
import org.openapitools.model.ModifyRunRequest;
import org.openapitools.model.ModifyThreadRequest;
import org.openapitools.model.RunObject;
import org.openapitools.model.RunStepObject;
import org.openapitools.model.SubmitToolOutputsRunRequest;
import org.openapitools.model.ThreadObject;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-04-14T13:38:24.957235058Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Controller
@Tag(name = "Assistants", description = "The Assistants API")
public class AssistantsController {
    /**
     * Cancels a run that is &#x60;in_progress&#x60;.
     *
     * @param threadId The ID of the thread to which this run belongs. (required)
     * @param runId The ID of the run to cancel. (required)
     * @return RunObject
     */
    @Operation(
        operationId = "cancelRun",
        summary = "Cancels a run that is `in_progress`.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RunObject.class))
            })
        },
        parameters = {
            @Parameter(name = "threadId", description = "The ID of the thread to which this run belongs.", required = true),
            @Parameter(name = "runId", description = "The ID of the run to cancel.", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Post(uri="/threads/{thread_id}/runs/{run_id}/cancel")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<RunObject> cancelRun(
        @PathVariable(value="thread_id") @NotNull String threadId, 
        @PathVariable(value="run_id") @NotNull String runId
    ) {
        // TODO implement cancelRun();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Create an assistant with a model and instructions.
     *
     * @param createAssistantRequest  (required)
     * @return AssistantObject
     */
    @Operation(
        operationId = "createAssistant",
        summary = "Create an assistant with a model and instructions.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AssistantObject.class))
            })
        },
        parameters = {
            @Parameter(name = "createAssistantRequest", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Post(uri="/assistants")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<AssistantObject> createAssistant(
        @Body @NotNull @Valid CreateAssistantRequest createAssistantRequest
    ) {
        // TODO implement createAssistant();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
     *
     * @param assistantId The ID of the assistant for which to create a File.  (required)
     * @param createAssistantFileRequest  (required)
     * @return AssistantFileObject
     */
    @Operation(
        operationId = "createAssistantFile",
        summary = "Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AssistantFileObject.class))
            })
        },
        parameters = {
            @Parameter(name = "assistantId", description = "The ID of the assistant for which to create a File. ", required = true),
            @Parameter(name = "createAssistantFileRequest", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Post(uri="/assistants/{assistant_id}/files")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<AssistantFileObject> createAssistantFile(
        @PathVariable(value="assistant_id") @NotNull String assistantId, 
        @Body @NotNull @Valid CreateAssistantFileRequest createAssistantFileRequest
    ) {
        // TODO implement createAssistantFile();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Create a message.
     *
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to create a message for. (required)
     * @param createMessageRequest  (required)
     * @return MessageObject
     */
    @Operation(
        operationId = "createMessage",
        summary = "Create a message.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageObject.class))
            })
        },
        parameters = {
            @Parameter(name = "threadId", description = "The ID of the [thread](/docs/api-reference/threads) to create a message for.", required = true),
            @Parameter(name = "createMessageRequest", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Post(uri="/threads/{thread_id}/messages")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<MessageObject> createMessage(
        @PathVariable(value="thread_id") @NotNull String threadId, 
        @Body @NotNull @Valid CreateMessageRequest createMessageRequest
    ) {
        // TODO implement createMessage();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Create a run.
     *
     * @param threadId The ID of the thread to run. (required)
     * @param createRunRequest  (required)
     * @return RunObject
     */
    @Operation(
        operationId = "createRun",
        summary = "Create a run.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RunObject.class))
            })
        },
        parameters = {
            @Parameter(name = "threadId", description = "The ID of the thread to run.", required = true),
            @Parameter(name = "createRunRequest", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Post(uri="/threads/{thread_id}/runs")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<RunObject> createRun(
        @PathVariable(value="thread_id") @NotNull String threadId, 
        @Body @NotNull @Valid CreateRunRequest createRunRequest
    ) {
        // TODO implement createRun();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Create a thread.
     *
     * @param createThreadRequest  (optional)
     * @return ThreadObject
     */
    @Operation(
        operationId = "createThread",
        summary = "Create a thread.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ThreadObject.class))
            })
        },
        parameters = {
            @Parameter(name = "createThreadRequest")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Post(uri="/threads")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<ThreadObject> createThread(
        @Body @Nullable @Valid CreateThreadRequest createThreadRequest
    ) {
        // TODO implement createThread();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Create a thread and run it in one request.
     *
     * @param createThreadAndRunRequest  (required)
     * @return RunObject
     */
    @Operation(
        operationId = "createThreadAndRun",
        summary = "Create a thread and run it in one request.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RunObject.class))
            })
        },
        parameters = {
            @Parameter(name = "createThreadAndRunRequest", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Post(uri="/threads/runs")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<RunObject> createThreadAndRun(
        @Body @NotNull @Valid CreateThreadAndRunRequest createThreadAndRunRequest
    ) {
        // TODO implement createThreadAndRun();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Delete an assistant.
     *
     * @param assistantId The ID of the assistant to delete. (required)
     * @return DeleteAssistantResponse
     */
    @Operation(
        operationId = "deleteAssistant",
        summary = "Delete an assistant.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteAssistantResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "assistantId", description = "The ID of the assistant to delete.", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Delete(uri="/assistants/{assistant_id}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<DeleteAssistantResponse> deleteAssistant(
        @PathVariable(value="assistant_id") @NotNull String assistantId
    ) {
        // TODO implement deleteAssistant();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Delete an assistant file.
     *
     * @param assistantId The ID of the assistant that the file belongs to. (required)
     * @param fileId The ID of the file to delete. (required)
     * @return DeleteAssistantFileResponse
     */
    @Operation(
        operationId = "deleteAssistantFile",
        summary = "Delete an assistant file.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteAssistantFileResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "assistantId", description = "The ID of the assistant that the file belongs to.", required = true),
            @Parameter(name = "fileId", description = "The ID of the file to delete.", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Delete(uri="/assistants/{assistant_id}/files/{file_id}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<DeleteAssistantFileResponse> deleteAssistantFile(
        @PathVariable(value="assistant_id") @NotNull String assistantId, 
        @PathVariable(value="file_id") @NotNull String fileId
    ) {
        // TODO implement deleteAssistantFile();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Delete a thread.
     *
     * @param threadId The ID of the thread to delete. (required)
     * @return DeleteThreadResponse
     */
    @Operation(
        operationId = "deleteThread",
        summary = "Delete a thread.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteThreadResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "threadId", description = "The ID of the thread to delete.", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Delete(uri="/threads/{thread_id}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<DeleteThreadResponse> deleteThread(
        @PathVariable(value="thread_id") @NotNull String threadId
    ) {
        // TODO implement deleteThread();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieves an assistant.
     *
     * @param assistantId The ID of the assistant to retrieve. (required)
     * @return AssistantObject
     */
    @Operation(
        operationId = "getAssistant",
        summary = "Retrieves an assistant.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AssistantObject.class))
            })
        },
        parameters = {
            @Parameter(name = "assistantId", description = "The ID of the assistant to retrieve.", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Get(uri="/assistants/{assistant_id}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<AssistantObject> getAssistant(
        @PathVariable(value="assistant_id") @NotNull String assistantId
    ) {
        // TODO implement getAssistant();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieves an AssistantFile.
     *
     * @param assistantId The ID of the assistant who the file belongs to. (required)
     * @param fileId The ID of the file we&#39;re getting. (required)
     * @return AssistantFileObject
     */
    @Operation(
        operationId = "getAssistantFile",
        summary = "Retrieves an AssistantFile.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AssistantFileObject.class))
            })
        },
        parameters = {
            @Parameter(name = "assistantId", description = "The ID of the assistant who the file belongs to.", required = true),
            @Parameter(name = "fileId", description = "The ID of the file we're getting.", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Get(uri="/assistants/{assistant_id}/files/{file_id}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<AssistantFileObject> getAssistantFile(
        @PathVariable(value="assistant_id") @NotNull String assistantId, 
        @PathVariable(value="file_id") @NotNull String fileId
    ) {
        // TODO implement getAssistantFile();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve a message.
     *
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this message belongs. (required)
     * @param messageId The ID of the message to retrieve. (required)
     * @return MessageObject
     */
    @Operation(
        operationId = "getMessage",
        summary = "Retrieve a message.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageObject.class))
            })
        },
        parameters = {
            @Parameter(name = "threadId", description = "The ID of the [thread](/docs/api-reference/threads) to which this message belongs.", required = true),
            @Parameter(name = "messageId", description = "The ID of the message to retrieve.", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Get(uri="/threads/{thread_id}/messages/{message_id}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<MessageObject> getMessage(
        @PathVariable(value="thread_id") @NotNull String threadId, 
        @PathVariable(value="message_id") @NotNull String messageId
    ) {
        // TODO implement getMessage();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieves a message file.
     *
     * @param threadId The ID of the thread to which the message and File belong. (required)
     * @param messageId The ID of the message the file belongs to. (required)
     * @param fileId The ID of the file being retrieved. (required)
     * @return MessageFileObject
     */
    @Operation(
        operationId = "getMessageFile",
        summary = "Retrieves a message file.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageFileObject.class))
            })
        },
        parameters = {
            @Parameter(name = "threadId", description = "The ID of the thread to which the message and File belong.", required = true),
            @Parameter(name = "messageId", description = "The ID of the message the file belongs to.", required = true),
            @Parameter(name = "fileId", description = "The ID of the file being retrieved.", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Get(uri="/threads/{thread_id}/messages/{message_id}/files/{file_id}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<MessageFileObject> getMessageFile(
        @PathVariable(value="thread_id") @NotNull String threadId, 
        @PathVariable(value="message_id") @NotNull String messageId, 
        @PathVariable(value="file_id") @NotNull String fileId
    ) {
        // TODO implement getMessageFile();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieves a run.
     *
     * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run. (required)
     * @param runId The ID of the run to retrieve. (required)
     * @return RunObject
     */
    @Operation(
        operationId = "getRun",
        summary = "Retrieves a run.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RunObject.class))
            })
        },
        parameters = {
            @Parameter(name = "threadId", description = "The ID of the [thread](/docs/api-reference/threads) that was run.", required = true),
            @Parameter(name = "runId", description = "The ID of the run to retrieve.", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Get(uri="/threads/{thread_id}/runs/{run_id}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<RunObject> getRun(
        @PathVariable(value="thread_id") @NotNull String threadId, 
        @PathVariable(value="run_id") @NotNull String runId
    ) {
        // TODO implement getRun();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieves a run step.
     *
     * @param threadId The ID of the thread to which the run and run step belongs. (required)
     * @param runId The ID of the run to which the run step belongs. (required)
     * @param stepId The ID of the run step to retrieve. (required)
     * @return RunStepObject
     */
    @Operation(
        operationId = "getRunStep",
        summary = "Retrieves a run step.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RunStepObject.class))
            })
        },
        parameters = {
            @Parameter(name = "threadId", description = "The ID of the thread to which the run and run step belongs.", required = true),
            @Parameter(name = "runId", description = "The ID of the run to which the run step belongs.", required = true),
            @Parameter(name = "stepId", description = "The ID of the run step to retrieve.", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Get(uri="/threads/{thread_id}/runs/{run_id}/steps/{step_id}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<RunStepObject> getRunStep(
        @PathVariable(value="thread_id") @NotNull String threadId, 
        @PathVariable(value="run_id") @NotNull String runId, 
        @PathVariable(value="step_id") @NotNull String stepId
    ) {
        // TODO implement getRunStep();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieves a thread.
     *
     * @param threadId The ID of the thread to retrieve. (required)
     * @return ThreadObject
     */
    @Operation(
        operationId = "getThread",
        summary = "Retrieves a thread.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ThreadObject.class))
            })
        },
        parameters = {
            @Parameter(name = "threadId", description = "The ID of the thread to retrieve.", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Get(uri="/threads/{thread_id}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<ThreadObject> getThread(
        @PathVariable(value="thread_id") @NotNull String threadId
    ) {
        // TODO implement getThread();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Returns a list of assistant files.
     *
     * @param assistantId The ID of the assistant the file belongs to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @return ListAssistantFilesResponse
     */
    @Operation(
        operationId = "listAssistantFiles",
        summary = "Returns a list of assistant files.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListAssistantFilesResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "assistantId", description = "The ID of the assistant the file belongs to.", required = true),
            @Parameter(name = "limit", description = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. "),
            @Parameter(name = "order", description = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. "),
            @Parameter(name = "after", description = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. "),
            @Parameter(name = "before", description = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Get(uri="/assistants/{assistant_id}/files")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<ListAssistantFilesResponse> listAssistantFiles(
        @PathVariable(value="assistant_id") @NotNull String assistantId, 
        @QueryValue(value="limit", defaultValue="20") @Nullable Integer limit, 
        @QueryValue(value="order", defaultValue="desc") @Nullable String order, 
        @QueryValue(value="after") @Nullable String after, 
        @QueryValue(value="before") @Nullable String before
    ) {
        // TODO implement listAssistantFiles();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Returns a list of assistants.
     *
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @return ListAssistantsResponse
     */
    @Operation(
        operationId = "listAssistants",
        summary = "Returns a list of assistants.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListAssistantsResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "limit", description = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. "),
            @Parameter(name = "order", description = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. "),
            @Parameter(name = "after", description = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. "),
            @Parameter(name = "before", description = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Get(uri="/assistants")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<ListAssistantsResponse> listAssistants(
        @QueryValue(value="limit", defaultValue="20") @Nullable Integer limit, 
        @QueryValue(value="order", defaultValue="desc") @Nullable String order, 
        @QueryValue(value="after") @Nullable String after, 
        @QueryValue(value="before") @Nullable String before
    ) {
        // TODO implement listAssistants();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Returns a list of message files.
     *
     * @param threadId The ID of the thread that the message and files belong to. (required)
     * @param messageId The ID of the message that the files belongs to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @return ListMessageFilesResponse
     */
    @Operation(
        operationId = "listMessageFiles",
        summary = "Returns a list of message files.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListMessageFilesResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "threadId", description = "The ID of the thread that the message and files belong to.", required = true),
            @Parameter(name = "messageId", description = "The ID of the message that the files belongs to.", required = true),
            @Parameter(name = "limit", description = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. "),
            @Parameter(name = "order", description = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. "),
            @Parameter(name = "after", description = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. "),
            @Parameter(name = "before", description = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Get(uri="/threads/{thread_id}/messages/{message_id}/files")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<ListMessageFilesResponse> listMessageFiles(
        @PathVariable(value="thread_id") @NotNull String threadId, 
        @PathVariable(value="message_id") @NotNull String messageId, 
        @QueryValue(value="limit", defaultValue="20") @Nullable Integer limit, 
        @QueryValue(value="order", defaultValue="desc") @Nullable String order, 
        @QueryValue(value="after") @Nullable String after, 
        @QueryValue(value="before") @Nullable String before
    ) {
        // TODO implement listMessageFiles();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Returns a list of messages for a given thread.
     *
     * @param threadId The ID of the [thread](/docs/api-reference/threads) the messages belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param runId Filter messages by the run ID that generated them.  (optional)
     * @return ListMessagesResponse
     */
    @Operation(
        operationId = "listMessages",
        summary = "Returns a list of messages for a given thread.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListMessagesResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "threadId", description = "The ID of the [thread](/docs/api-reference/threads) the messages belong to.", required = true),
            @Parameter(name = "limit", description = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. "),
            @Parameter(name = "order", description = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. "),
            @Parameter(name = "after", description = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. "),
            @Parameter(name = "before", description = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. "),
            @Parameter(name = "runId", description = "Filter messages by the run ID that generated them. ")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Get(uri="/threads/{thread_id}/messages")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<ListMessagesResponse> listMessages(
        @PathVariable(value="thread_id") @NotNull String threadId, 
        @QueryValue(value="limit", defaultValue="20") @Nullable Integer limit, 
        @QueryValue(value="order", defaultValue="desc") @Nullable String order, 
        @QueryValue(value="after") @Nullable String after, 
        @QueryValue(value="before") @Nullable String before, 
        @QueryValue(value="run_id") @Nullable String runId
    ) {
        // TODO implement listMessages();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Returns a list of run steps belonging to a run.
     *
     * @param threadId The ID of the thread the run and run steps belong to. (required)
     * @param runId The ID of the run the run steps belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @return ListRunStepsResponse
     */
    @Operation(
        operationId = "listRunSteps",
        summary = "Returns a list of run steps belonging to a run.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListRunStepsResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "threadId", description = "The ID of the thread the run and run steps belong to.", required = true),
            @Parameter(name = "runId", description = "The ID of the run the run steps belong to.", required = true),
            @Parameter(name = "limit", description = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. "),
            @Parameter(name = "order", description = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. "),
            @Parameter(name = "after", description = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. "),
            @Parameter(name = "before", description = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Get(uri="/threads/{thread_id}/runs/{run_id}/steps")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<ListRunStepsResponse> listRunSteps(
        @PathVariable(value="thread_id") @NotNull String threadId, 
        @PathVariable(value="run_id") @NotNull String runId, 
        @QueryValue(value="limit", defaultValue="20") @Nullable Integer limit, 
        @QueryValue(value="order", defaultValue="desc") @Nullable String order, 
        @QueryValue(value="after") @Nullable String after, 
        @QueryValue(value="before") @Nullable String before
    ) {
        // TODO implement listRunSteps();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Returns a list of runs belonging to a thread.
     *
     * @param threadId The ID of the thread the run belongs to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @return ListRunsResponse
     */
    @Operation(
        operationId = "listRuns",
        summary = "Returns a list of runs belonging to a thread.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListRunsResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "threadId", description = "The ID of the thread the run belongs to.", required = true),
            @Parameter(name = "limit", description = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. "),
            @Parameter(name = "order", description = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. "),
            @Parameter(name = "after", description = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. "),
            @Parameter(name = "before", description = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Get(uri="/threads/{thread_id}/runs")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<ListRunsResponse> listRuns(
        @PathVariable(value="thread_id") @NotNull String threadId, 
        @QueryValue(value="limit", defaultValue="20") @Nullable Integer limit, 
        @QueryValue(value="order", defaultValue="desc") @Nullable String order, 
        @QueryValue(value="after") @Nullable String after, 
        @QueryValue(value="before") @Nullable String before
    ) {
        // TODO implement listRuns();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Modifies an assistant.
     *
     * @param assistantId The ID of the assistant to modify. (required)
     * @param modifyAssistantRequest  (required)
     * @return AssistantObject
     */
    @Operation(
        operationId = "modifyAssistant",
        summary = "Modifies an assistant.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AssistantObject.class))
            })
        },
        parameters = {
            @Parameter(name = "assistantId", description = "The ID of the assistant to modify.", required = true),
            @Parameter(name = "modifyAssistantRequest", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Post(uri="/assistants/{assistant_id}")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<AssistantObject> modifyAssistant(
        @PathVariable(value="assistant_id") @NotNull String assistantId, 
        @Body @NotNull @Valid ModifyAssistantRequest modifyAssistantRequest
    ) {
        // TODO implement modifyAssistant();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Modifies a message.
     *
     * @param threadId The ID of the thread to which this message belongs. (required)
     * @param messageId The ID of the message to modify. (required)
     * @param modifyMessageRequest  (required)
     * @return MessageObject
     */
    @Operation(
        operationId = "modifyMessage",
        summary = "Modifies a message.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageObject.class))
            })
        },
        parameters = {
            @Parameter(name = "threadId", description = "The ID of the thread to which this message belongs.", required = true),
            @Parameter(name = "messageId", description = "The ID of the message to modify.", required = true),
            @Parameter(name = "modifyMessageRequest", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Post(uri="/threads/{thread_id}/messages/{message_id}")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<MessageObject> modifyMessage(
        @PathVariable(value="thread_id") @NotNull String threadId, 
        @PathVariable(value="message_id") @NotNull String messageId, 
        @Body @NotNull @Valid ModifyMessageRequest modifyMessageRequest
    ) {
        // TODO implement modifyMessage();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Modifies a run.
     *
     * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run. (required)
     * @param runId The ID of the run to modify. (required)
     * @param modifyRunRequest  (required)
     * @return RunObject
     */
    @Operation(
        operationId = "modifyRun",
        summary = "Modifies a run.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RunObject.class))
            })
        },
        parameters = {
            @Parameter(name = "threadId", description = "The ID of the [thread](/docs/api-reference/threads) that was run.", required = true),
            @Parameter(name = "runId", description = "The ID of the run to modify.", required = true),
            @Parameter(name = "modifyRunRequest", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Post(uri="/threads/{thread_id}/runs/{run_id}")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<RunObject> modifyRun(
        @PathVariable(value="thread_id") @NotNull String threadId, 
        @PathVariable(value="run_id") @NotNull String runId, 
        @Body @NotNull @Valid ModifyRunRequest modifyRunRequest
    ) {
        // TODO implement modifyRun();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Modifies a thread.
     *
     * @param threadId The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified. (required)
     * @param modifyThreadRequest  (required)
     * @return ThreadObject
     */
    @Operation(
        operationId = "modifyThread",
        summary = "Modifies a thread.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ThreadObject.class))
            })
        },
        parameters = {
            @Parameter(name = "threadId", description = "The ID of the thread to modify. Only the `metadata` can be modified.", required = true),
            @Parameter(name = "modifyThreadRequest", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Post(uri="/threads/{thread_id}")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<ThreadObject> modifyThread(
        @PathVariable(value="thread_id") @NotNull String threadId, 
        @Body @NotNull @Valid ModifyThreadRequest modifyThreadRequest
    ) {
        // TODO implement modifyThread();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
     *
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this run belongs. (required)
     * @param runId The ID of the run that requires the tool output submission. (required)
     * @param submitToolOutputsRunRequest  (required)
     * @return RunObject
     */
    @Operation(
        operationId = "submitToolOuputsToRun",
        summary = "When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request. ",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RunObject.class))
            })
        },
        parameters = {
            @Parameter(name = "threadId", description = "The ID of the [thread](/docs/api-reference/threads) to which this run belongs.", required = true),
            @Parameter(name = "runId", description = "The ID of the run that requires the tool output submission.", required = true),
            @Parameter(name = "submitToolOutputsRunRequest", required = true)
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @Post(uri="/threads/{thread_id}/runs/{run_id}/submit_tool_outputs")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<RunObject> submitToolOuputsToRun(
        @PathVariable(value="thread_id") @NotNull String threadId, 
        @PathVariable(value="run_id") @NotNull String runId, 
        @Body @NotNull @Valid SubmitToolOutputsRunRequest submitToolOutputsRunRequest
    ) {
        // TODO implement submitToolOuputsToRun();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }

}
