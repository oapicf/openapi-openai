/*
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.controller;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import reactor.core.publisher.Mono;
import io.micronaut.http.HttpStatus;
import io.micronaut.http.exceptions.HttpStatusException;
import java.math.BigDecimal;
import io.micronaut.http.multipart.CompletedFileUpload;
import org.openapitools.model.CreateChatCompletionRequest;
import org.openapitools.model.CreateChatCompletionResponse;
import org.openapitools.model.CreateCompletionRequest;
import org.openapitools.model.CreateCompletionResponse;
import org.openapitools.model.CreateEditRequest;
import org.openapitools.model.CreateEditResponse;
import org.openapitools.model.CreateEmbeddingRequest;
import org.openapitools.model.CreateEmbeddingResponse;
import org.openapitools.model.CreateFineTuneRequest;
import org.openapitools.model.CreateImageRequest;
import org.openapitools.model.CreateModerationRequest;
import org.openapitools.model.CreateModerationResponse;
import org.openapitools.model.CreateTranscriptionRequestModel;
import org.openapitools.model.CreateTranscriptionResponse;
import org.openapitools.model.CreateTranslationResponse;
import org.openapitools.model.DeleteFileResponse;
import org.openapitools.model.DeleteModelResponse;
import org.openapitools.model.FineTune;
import org.openapitools.model.ImagesResponse;
import org.openapitools.model.ListFilesResponse;
import org.openapitools.model.ListFineTuneEventsResponse;
import org.openapitools.model.ListFineTunesResponse;
import org.openapitools.model.ListModelsResponse;
import org.openapitools.model.Model;
import org.openapitools.model.OpenAIFile;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-03-16T01:12:38.762786439Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Controller
@Tag(name = "OpenAi", description = "The OpenAi API")
public class OpenAiController {
    /**
     * Immediately cancel a fine-tune job. 
     *
     * @param fineTuneId The ID of the fine-tune job to cancel  (required)
     * @return FineTune
     */
    @Operation(
        operationId = "cancelFineTune",
        summary = "Immediately cancel a fine-tune job. ",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FineTune.class))
            })
        },
        parameters = {
            @Parameter(name = "fineTuneId", description = "The ID of the fine-tune job to cancel ", required = true)
        }
    )
    @Post(uri="/fine-tunes/{fine_tune_id}/cancel")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<FineTune> cancelFineTune(
        @PathVariable(value="fine_tune_id") @NotNull String fineTuneId
    ) {
        // TODO implement cancelFineTune();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Creates a model response for the given chat conversation.
     *
     * @param createChatCompletionRequest  (required)
     * @return CreateChatCompletionResponse
     */
    @Operation(
        operationId = "createChatCompletion",
        summary = "Creates a model response for the given chat conversation.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateChatCompletionResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "createChatCompletionRequest", required = true)
        }
    )
    @Post(uri="/chat/completions")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<CreateChatCompletionResponse> createChatCompletion(
        @Body @NotNull @Valid CreateChatCompletionRequest createChatCompletionRequest
    ) {
        // TODO implement createChatCompletion();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Creates a completion for the provided prompt and parameters.
     *
     * @param createCompletionRequest  (required)
     * @return CreateCompletionResponse
     */
    @Operation(
        operationId = "createCompletion",
        summary = "Creates a completion for the provided prompt and parameters.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateCompletionResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "createCompletionRequest", required = true)
        }
    )
    @Post(uri="/completions")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<CreateCompletionResponse> createCompletion(
        @Body @NotNull @Valid CreateCompletionRequest createCompletionRequest
    ) {
        // TODO implement createCompletion();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Creates a new edit for the provided input, instruction, and parameters.
     *
     * @param createEditRequest  (required)
     * @return CreateEditResponse
     */
    @Operation(
        operationId = "createEdit",
        summary = "Creates a new edit for the provided input, instruction, and parameters.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateEditResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "createEditRequest", required = true)
        }
    )
    @Post(uri="/edits")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<CreateEditResponse> createEdit(
        @Body @NotNull @Valid CreateEditRequest createEditRequest
    ) {
        // TODO implement createEdit();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Creates an embedding vector representing the input text.
     *
     * @param createEmbeddingRequest  (required)
     * @return CreateEmbeddingResponse
     */
    @Operation(
        operationId = "createEmbedding",
        summary = "Creates an embedding vector representing the input text.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateEmbeddingResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "createEmbeddingRequest", required = true)
        }
    )
    @Post(uri="/embeddings")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<CreateEmbeddingResponse> createEmbedding(
        @Body @NotNull @Valid CreateEmbeddingRequest createEmbeddingRequest
    ) {
        // TODO implement createEmbedding();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. 
     *
     * @param _file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\&quot;fine-tune\\\&quot;, each line is a JSON record with \\\&quot;prompt\\\&quot; and \\\&quot;completion\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).  (required)
     * @param purpose The intended purpose of the uploaded documents.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.  (required)
     * @return OpenAIFile
     */
    @Operation(
        operationId = "createFile",
        summary = "Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. ",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenAIFile.class))
            })
        },
        parameters = {
            @Parameter(name = "_file", description = "Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the `purpose` is set to \\\"fine-tune\\\", each line is a JSON record with \\\"prompt\\\" and \\\"completion\\\" fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data). ", required = true),
            @Parameter(name = "purpose", description = "The intended purpose of the uploaded documents.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. ", required = true)
        }
    )
    @Post(uri="/files")
    @Produces(value = {"application/json"})
    @Consumes(value = {"multipart/form-data"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<OpenAIFile> createFile(
        @NotNull CompletedFileUpload _file, 
        @NotNull String purpose
    ) {
        // TODO implement createFile();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
     *
     * @param createFineTuneRequest  (required)
     * @return FineTune
     */
    @Operation(
        operationId = "createFineTune",
        summary = "Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FineTune.class))
            })
        },
        parameters = {
            @Parameter(name = "createFineTuneRequest", required = true)
        }
    )
    @Post(uri="/fine-tunes")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<FineTune> createFineTune(
        @Body @NotNull @Valid CreateFineTuneRequest createFineTuneRequest
    ) {
        // TODO implement createFineTune();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Creates an image given a prompt.
     *
     * @param createImageRequest  (required)
     * @return ImagesResponse
     */
    @Operation(
        operationId = "createImage",
        summary = "Creates an image given a prompt.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ImagesResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "createImageRequest", required = true)
        }
    )
    @Post(uri="/images/generations")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<ImagesResponse> createImage(
        @Body @NotNull @Valid CreateImageRequest createImageRequest
    ) {
        // TODO implement createImage();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Creates an edited or extended image given an original image and a prompt.
     *
     * @param image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask. (required)
     * @param prompt A text description of the desired image(s). The maximum length is 1000 characters. (required)
     * @param mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;. (optional)
     * @param n The number of images to generate. Must be between 1 and 10. (optional, default to 1)
     * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to 1024x1024)
     * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. (optional, default to url)
     * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  (optional)
     * @return ImagesResponse
     */
    @Operation(
        operationId = "createImageEdit",
        summary = "Creates an edited or extended image given an original image and a prompt.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ImagesResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "image", description = "The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.", required = true),
            @Parameter(name = "prompt", description = "A text description of the desired image(s). The maximum length is 1000 characters.", required = true),
            @Parameter(name = "mask", description = "An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`."),
            @Parameter(name = "n", description = "The number of images to generate. Must be between 1 and 10."),
            @Parameter(name = "size", description = "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`."),
            @Parameter(name = "responseFormat", description = "The format in which the generated images are returned. Must be one of `url` or `b64_json`."),
            @Parameter(name = "user", description = "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). ")
        }
    )
    @Post(uri="/images/edits")
    @Produces(value = {"application/json"})
    @Consumes(value = {"multipart/form-data"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<ImagesResponse> createImageEdit(
        @NotNull CompletedFileUpload image, 
        @NotNull String prompt, 
        @Nullable CompletedFileUpload mask, 
        @Nullable @Min(1) @Max(10) Integer n, 
        @Nullable String size, 
        @Nullable String responseFormat, 
        @Nullable String user
    ) {
        // TODO implement createImageEdit();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Creates a variation of a given image.
     *
     * @param image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square. (required)
     * @param n The number of images to generate. Must be between 1 and 10. (optional, default to 1)
     * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to 1024x1024)
     * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. (optional, default to url)
     * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  (optional)
     * @return ImagesResponse
     */
    @Operation(
        operationId = "createImageVariation",
        summary = "Creates a variation of a given image.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ImagesResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "image", description = "The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.", required = true),
            @Parameter(name = "n", description = "The number of images to generate. Must be between 1 and 10."),
            @Parameter(name = "size", description = "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`."),
            @Parameter(name = "responseFormat", description = "The format in which the generated images are returned. Must be one of `url` or `b64_json`."),
            @Parameter(name = "user", description = "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). ")
        }
    )
    @Post(uri="/images/variations")
    @Produces(value = {"application/json"})
    @Consumes(value = {"multipart/form-data"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<ImagesResponse> createImageVariation(
        @NotNull CompletedFileUpload image, 
        @Nullable @Min(1) @Max(10) Integer n, 
        @Nullable String size, 
        @Nullable String responseFormat, 
        @Nullable String user
    ) {
        // TODO implement createImageVariation();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Classifies if text violates OpenAI&#39;s Content Policy
     *
     * @param createModerationRequest  (required)
     * @return CreateModerationResponse
     */
    @Operation(
        operationId = "createModeration",
        summary = "Classifies if text violates OpenAI's Content Policy",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateModerationResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "createModerationRequest", required = true)
        }
    )
    @Post(uri="/moderations")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<CreateModerationResponse> createModeration(
        @Body @NotNull @Valid CreateModerationRequest createModerationRequest
    ) {
        // TODO implement createModeration();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Transcribes audio into the input language.
     *
     * @param _file The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.  (required)
     * @param model  (required)
     * @param prompt An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.  (optional)
     * @param responseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.  (optional, default to json)
     * @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.  (optional, default to 0)
     * @param language The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.  (optional)
     * @return CreateTranscriptionResponse
     */
    @Operation(
        operationId = "createTranscription",
        summary = "Transcribes audio into the input language.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateTranscriptionResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "_file", description = "The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. ", required = true),
            @Parameter(name = "model", required = true),
            @Parameter(name = "prompt", description = "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. "),
            @Parameter(name = "responseFormat", description = "The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. "),
            @Parameter(name = "temperature", description = "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. "),
            @Parameter(name = "language", description = "The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. ")
        }
    )
    @Post(uri="/audio/transcriptions")
    @Produces(value = {"application/json"})
    @Consumes(value = {"multipart/form-data"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<CreateTranscriptionResponse> createTranscription(
        @NotNull CompletedFileUpload _file, 
        @NotNull @Valid CreateTranscriptionRequestModel model, 
        @Nullable String prompt, 
        @Nullable String responseFormat, 
        @Nullable BigDecimal temperature, 
        @Nullable String language
    ) {
        // TODO implement createTranscription();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Translates audio into English.
     *
     * @param _file The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.  (required)
     * @param model  (required)
     * @param prompt An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.  (optional)
     * @param responseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.  (optional, default to json)
     * @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.  (optional, default to 0)
     * @return CreateTranslationResponse
     */
    @Operation(
        operationId = "createTranslation",
        summary = "Translates audio into English.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateTranslationResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "_file", description = "The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. ", required = true),
            @Parameter(name = "model", required = true),
            @Parameter(name = "prompt", description = "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. "),
            @Parameter(name = "responseFormat", description = "The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. "),
            @Parameter(name = "temperature", description = "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. ")
        }
    )
    @Post(uri="/audio/translations")
    @Produces(value = {"application/json"})
    @Consumes(value = {"multipart/form-data"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<CreateTranslationResponse> createTranslation(
        @NotNull CompletedFileUpload _file, 
        @NotNull @Valid CreateTranscriptionRequestModel model, 
        @Nullable String prompt, 
        @Nullable String responseFormat, 
        @Nullable BigDecimal temperature
    ) {
        // TODO implement createTranslation();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Delete a file.
     *
     * @param fileId The ID of the file to use for this request (required)
     * @return DeleteFileResponse
     */
    @Operation(
        operationId = "deleteFile",
        summary = "Delete a file.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteFileResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "fileId", description = "The ID of the file to use for this request", required = true)
        }
    )
    @Delete(uri="/files/{file_id}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<DeleteFileResponse> deleteFile(
        @PathVariable(value="file_id") @NotNull String fileId
    ) {
        // TODO implement deleteFile();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Delete a fine-tuned model. You must have the Owner role in your organization.
     *
     * @param model The model to delete (required)
     * @return DeleteModelResponse
     */
    @Operation(
        operationId = "deleteModel",
        summary = "Delete a fine-tuned model. You must have the Owner role in your organization.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteModelResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "model", description = "The model to delete", required = true)
        }
    )
    @Delete(uri="/models/{model}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<DeleteModelResponse> deleteModel(
        @PathVariable(value="model") @NotNull String model
    ) {
        // TODO implement deleteModel();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Returns the contents of the specified file
     *
     * @param fileId The ID of the file to use for this request (required)
     * @return String
     */
    @Operation(
        operationId = "downloadFile",
        summary = "Returns the contents of the specified file",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        },
        parameters = {
            @Parameter(name = "fileId", description = "The ID of the file to use for this request", required = true)
        }
    )
    @Get(uri="/files/{file_id}/content")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<String> downloadFile(
        @PathVariable(value="file_id") @NotNull String fileId
    ) {
        // TODO implement downloadFile();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Returns a list of files that belong to the user&#39;s organization.
     *
     * @return ListFilesResponse
     */
    @Operation(
        operationId = "listFiles",
        summary = "Returns a list of files that belong to the user's organization.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListFilesResponse.class))
            })
        }
    )
    @Get(uri="/files")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<ListFilesResponse> listFiles() {
        // TODO implement listFiles();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Get fine-grained status updates for a fine-tune job. 
     *
     * @param fineTuneId The ID of the fine-tune job to get events for.  (required)
     * @param stream Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.  (optional, default to false)
     * @return ListFineTuneEventsResponse
     */
    @Operation(
        operationId = "listFineTuneEvents",
        summary = "Get fine-grained status updates for a fine-tune job. ",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListFineTuneEventsResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "fineTuneId", description = "The ID of the fine-tune job to get events for. ", required = true),
            @Parameter(name = "stream", description = "Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a `data: [DONE]` message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned. ")
        }
    )
    @Get(uri="/fine-tunes/{fine_tune_id}/events")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<ListFineTuneEventsResponse> listFineTuneEvents(
        @PathVariable(value="fine_tune_id") @NotNull String fineTuneId, 
        @QueryValue(value="stream", defaultValue="false") @Nullable Boolean stream
    ) {
        // TODO implement listFineTuneEvents();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * List your organization&#39;s fine-tuning jobs 
     *
     * @return ListFineTunesResponse
     */
    @Operation(
        operationId = "listFineTunes",
        summary = "List your organization's fine-tuning jobs ",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListFineTunesResponse.class))
            })
        }
    )
    @Get(uri="/fine-tunes")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<ListFineTunesResponse> listFineTunes() {
        // TODO implement listFineTunes();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Lists the currently available models, and provides basic information about each one such as the owner and availability.
     *
     * @return ListModelsResponse
     */
    @Operation(
        operationId = "listModels",
        summary = "Lists the currently available models, and provides basic information about each one such as the owner and availability.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListModelsResponse.class))
            })
        }
    )
    @Get(uri="/models")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<ListModelsResponse> listModels() {
        // TODO implement listModels();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Returns information about a specific file.
     *
     * @param fileId The ID of the file to use for this request (required)
     * @return OpenAIFile
     */
    @Operation(
        operationId = "retrieveFile",
        summary = "Returns information about a specific file.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenAIFile.class))
            })
        },
        parameters = {
            @Parameter(name = "fileId", description = "The ID of the file to use for this request", required = true)
        }
    )
    @Get(uri="/files/{file_id}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<OpenAIFile> retrieveFile(
        @PathVariable(value="file_id") @NotNull String fileId
    ) {
        // TODO implement retrieveFile();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
     *
     * @param fineTuneId The ID of the fine-tune job  (required)
     * @return FineTune
     */
    @Operation(
        operationId = "retrieveFineTune",
        summary = "Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FineTune.class))
            })
        },
        parameters = {
            @Parameter(name = "fineTuneId", description = "The ID of the fine-tune job ", required = true)
        }
    )
    @Get(uri="/fine-tunes/{fine_tune_id}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<FineTune> retrieveFineTune(
        @PathVariable(value="fine_tune_id") @NotNull String fineTuneId
    ) {
        // TODO implement retrieveFineTune();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
     *
     * @param model The ID of the model to use for this request (required)
     * @return Model
     */
    @Operation(
        operationId = "retrieveModel",
        summary = "Retrieves a model instance, providing basic information about the model such as the owner and permissioning.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Model.class))
            })
        },
        parameters = {
            @Parameter(name = "model", description = "The ID of the model to use for this request", required = true)
        }
    )
    @Get(uri="/models/{model}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<Model> retrieveModel(
        @PathVariable(value="model") @NotNull String model
    ) {
        // TODO implement retrieveModel();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }

}
