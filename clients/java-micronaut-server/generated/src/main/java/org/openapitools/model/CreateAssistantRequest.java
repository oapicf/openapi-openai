/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openapitools.model.AssistantObjectToolsInner;
import org.openapitools.model.CreateAssistantRequestModel;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * CreateAssistantRequest
 */
@JsonPropertyOrder({
  CreateAssistantRequest.JSON_PROPERTY_MODEL,
  CreateAssistantRequest.JSON_PROPERTY_NAME,
  CreateAssistantRequest.JSON_PROPERTY_DESCRIPTION,
  CreateAssistantRequest.JSON_PROPERTY_INSTRUCTIONS,
  CreateAssistantRequest.JSON_PROPERTY_TOOLS,
  CreateAssistantRequest.JSON_PROPERTY_FILE_IDS,
  CreateAssistantRequest.JSON_PROPERTY_METADATA
})
@JsonTypeName("CreateAssistantRequest")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-04-14T13:38:24.957235058Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Introspected
public class CreateAssistantRequest {
    public static final String JSON_PROPERTY_MODEL = "model";
    private CreateAssistantRequestModel model;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_DESCRIPTION = "description";
    private String description;

    public static final String JSON_PROPERTY_INSTRUCTIONS = "instructions";
    private String instructions;

    public static final String JSON_PROPERTY_TOOLS = "tools";
    private List<AssistantObjectToolsInner> tools = null;

    public static final String JSON_PROPERTY_FILE_IDS = "file_ids";
    private List<String> fileIds = null;

    public static final String JSON_PROPERTY_METADATA = "metadata";
    private Object metadata;

    public CreateAssistantRequest(CreateAssistantRequestModel model) {
        this.model = model;
    }

    public CreateAssistantRequest model(CreateAssistantRequestModel model) {
        this.model = model;
        return this;
    }

    /**
     * Get model
     * @return model
     **/
    @Valid
    @NotNull
    @Schema(name = "model", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_MODEL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public CreateAssistantRequestModel getModel() {
        return model;
    }

    @JsonProperty(JSON_PROPERTY_MODEL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setModel(CreateAssistantRequestModel model) {
        this.model = model;
    }

    public CreateAssistantRequest name(String name) {
        this.name = name;
        return this;
    }

    /**
     * The name of the assistant. The maximum length is 256 characters. 
     * @return name
     **/
    @Nullable
    @Size(max=256)
    @Schema(name = "name", description = "The name of the assistant. The maximum length is 256 characters. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setName(String name) {
        this.name = name;
    }

    public CreateAssistantRequest description(String description) {
        this.description = description;
        return this;
    }

    /**
     * The description of the assistant. The maximum length is 512 characters. 
     * @return description
     **/
    @Nullable
    @Size(max=512)
    @Schema(name = "description", description = "The description of the assistant. The maximum length is 512 characters. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getDescription() {
        return description;
    }

    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDescription(String description) {
        this.description = description;
    }

    public CreateAssistantRequest instructions(String instructions) {
        this.instructions = instructions;
        return this;
    }

    /**
     * The system instructions that the assistant uses. The maximum length is 256,000 characters. 
     * @return instructions
     **/
    @Nullable
    @Size(max=256000)
    @Schema(name = "instructions", description = "The system instructions that the assistant uses. The maximum length is 256,000 characters. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_INSTRUCTIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getInstructions() {
        return instructions;
    }

    @JsonProperty(JSON_PROPERTY_INSTRUCTIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setInstructions(String instructions) {
        this.instructions = instructions;
    }

    public CreateAssistantRequest tools(List<AssistantObjectToolsInner> tools) {
        this.tools = tools;
        return this;
    }

    public CreateAssistantRequest addToolsItem(AssistantObjectToolsInner toolsItem) {
        if (this.tools == null) {
            this.tools = new ArrayList<>();
        }
        this.tools.add(toolsItem);
        return this;
    }

    /**
     * A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types &#x60;code_interpreter&#x60;, &#x60;retrieval&#x60;, or &#x60;function&#x60;. 
     * @return tools
     **/
    @Nullable
    @Size(max=128)
    @Schema(name = "tools", description = "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_TOOLS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<AssistantObjectToolsInner> getTools() {
        return tools;
    }

    @JsonProperty(JSON_PROPERTY_TOOLS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTools(List<AssistantObjectToolsInner> tools) {
        this.tools = tools;
    }

    public CreateAssistantRequest fileIds(List<String> fileIds) {
        this.fileIds = fileIds;
        return this;
    }

    public CreateAssistantRequest addFileIdsItem(String fileIdsItem) {
        if (this.fileIds == null) {
            this.fileIds = new ArrayList<>();
        }
        this.fileIds.add(fileIdsItem);
        return this;
    }

    /**
     * A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. 
     * @return fileIds
     **/
    @Nullable
    @Size(max=20)
    @Schema(name = "file_ids", description = "A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_FILE_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getFileIds() {
        return fileIds;
    }

    @JsonProperty(JSON_PROPERTY_FILE_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFileIds(List<String> fileIds) {
        this.fileIds = fileIds;
    }

    public CreateAssistantRequest metadata(Object metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
     * @return metadata
     **/
    @Nullable
    @Schema(name = "metadata", description = "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_METADATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Object getMetadata() {
        return metadata;
    }

    @JsonProperty(JSON_PROPERTY_METADATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMetadata(Object metadata) {
        this.metadata = metadata;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateAssistantRequest createAssistantRequest = (CreateAssistantRequest) o;
        return Objects.equals(this.model, createAssistantRequest.model) &&
            Objects.equals(this.name, createAssistantRequest.name) &&
            Objects.equals(this.description, createAssistantRequest.description) &&
            Objects.equals(this.instructions, createAssistantRequest.instructions) &&
            Objects.equals(this.tools, createAssistantRequest.tools) &&
            Objects.equals(this.fileIds, createAssistantRequest.fileIds) &&
            Objects.equals(this.metadata, createAssistantRequest.metadata);
    }

    @Override
    public int hashCode() {
        return Objects.hash(model, name, description, instructions, tools, fileIds, metadata);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateAssistantRequest {\n");
        sb.append("    model: ").append(toIndentedString(model)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
        sb.append("    tools: ").append(toIndentedString(tools)).append("\n");
        sb.append("    fileIds: ").append(toIndentedString(fileIds)).append("\n");
        sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

