/*
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.math.BigDecimal;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openapitools.model.CreateEditRequestModel;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * CreateEditRequest
 */
@JsonPropertyOrder({
  CreateEditRequest.JSON_PROPERTY_MODEL,
  CreateEditRequest.JSON_PROPERTY_INPUT,
  CreateEditRequest.JSON_PROPERTY_INSTRUCTION,
  CreateEditRequest.JSON_PROPERTY_N,
  CreateEditRequest.JSON_PROPERTY_TEMPERATURE,
  CreateEditRequest.JSON_PROPERTY_TOP_P
})
@JsonTypeName("CreateEditRequest")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-03-16T01:12:38.762786439Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Introspected
public class CreateEditRequest {
    public static final String JSON_PROPERTY_MODEL = "model";
    private CreateEditRequestModel model;

    public static final String JSON_PROPERTY_INPUT = "input";
    private String input = "";

    public static final String JSON_PROPERTY_INSTRUCTION = "instruction";
    private String instruction;

    public static final String JSON_PROPERTY_N = "n";
    private Integer n = 1;

    public static final String JSON_PROPERTY_TEMPERATURE = "temperature";
    private BigDecimal temperature = new BigDecimal("1");

    public static final String JSON_PROPERTY_TOP_P = "top_p";
    private BigDecimal topP = new BigDecimal("1");

    public CreateEditRequest(CreateEditRequestModel model, String instruction) {
        this.model = model;
        this.instruction = instruction;
    }

    public CreateEditRequest model(CreateEditRequestModel model) {
        this.model = model;
        return this;
    }

    /**
     * Get model
     * @return model
     **/
    @Valid
    @NotNull
    @Schema(name = "model", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_MODEL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public CreateEditRequestModel getModel() {
        return model;
    }

    @JsonProperty(JSON_PROPERTY_MODEL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setModel(CreateEditRequestModel model) {
        this.model = model;
    }

    public CreateEditRequest input(String input) {
        this.input = input;
        return this;
    }

    /**
     * The input text to use as a starting point for the edit.
     * @return input
     **/
    @Nullable
    @Schema(name = "input", example = "What day of the wek is it?", description = "The input text to use as a starting point for the edit.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_INPUT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getInput() {
        return input;
    }

    @JsonProperty(JSON_PROPERTY_INPUT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setInput(String input) {
        this.input = input;
    }

    public CreateEditRequest instruction(String instruction) {
        this.instruction = instruction;
        return this;
    }

    /**
     * The instruction that tells the model how to edit the prompt.
     * @return instruction
     **/
    @NotNull
    @Schema(name = "instruction", example = "Fix the spelling mistakes.", description = "The instruction that tells the model how to edit the prompt.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_INSTRUCTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getInstruction() {
        return instruction;
    }

    @JsonProperty(JSON_PROPERTY_INSTRUCTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setInstruction(String instruction) {
        this.instruction = instruction;
    }

    public CreateEditRequest n(Integer n) {
        this.n = n;
        return this;
    }

    /**
     * How many edits to generate for the input and instruction.
     * minimum: 1
     * maximum: 20
     * @return n
     **/
    @Nullable
    @Min(1)
    @Max(20)
    @Schema(name = "n", example = "1", description = "How many edits to generate for the input and instruction.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_N)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getN() {
        return n;
    }

    @JsonProperty(JSON_PROPERTY_N)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setN(Integer n) {
        this.n = n;
    }

    public CreateEditRequest temperature(BigDecimal temperature) {
        this.temperature = temperature;
        return this;
    }

    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both. 
     * minimum: 0
     * maximum: 2
     * @return temperature
     **/
    @Nullable
    @DecimalMin("0")
    @DecimalMax("2")
    @Schema(name = "temperature", example = "1", description = "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_TEMPERATURE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getTemperature() {
        return temperature;
    }

    @JsonProperty(JSON_PROPERTY_TEMPERATURE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTemperature(BigDecimal temperature) {
        this.temperature = temperature;
    }

    public CreateEditRequest topP(BigDecimal topP) {
        this.topP = topP;
        return this;
    }

    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. 
     * minimum: 0
     * maximum: 1
     * @return topP
     **/
    @Nullable
    @DecimalMin("0")
    @DecimalMax("1")
    @Schema(name = "top_p", example = "1", description = "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_TOP_P)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getTopP() {
        return topP;
    }

    @JsonProperty(JSON_PROPERTY_TOP_P)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTopP(BigDecimal topP) {
        this.topP = topP;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateEditRequest createEditRequest = (CreateEditRequest) o;
        return Objects.equals(this.model, createEditRequest.model) &&
            Objects.equals(this.input, createEditRequest.input) &&
            Objects.equals(this.instruction, createEditRequest.instruction) &&
            Objects.equals(this.n, createEditRequest.n) &&
            Objects.equals(this.temperature, createEditRequest.temperature) &&
            Objects.equals(this.topP, createEditRequest.topP);
    }

    @Override
    public int hashCode() {
        return Objects.hash(model, input, instruction, n, temperature, topP);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateEditRequest {\n");
        sb.append("    model: ").append(toIndentedString(model)).append("\n");
        sb.append("    input: ").append(toIndentedString(input)).append("\n");
        sb.append("    instruction: ").append(toIndentedString(instruction)).append("\n");
        sb.append("    n: ").append(toIndentedString(n)).append("\n");
        sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
        sb.append("    topP: ").append(toIndentedString(topP)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

