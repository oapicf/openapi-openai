/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Usage statistics related to the run. This value will be &#x60;null&#x60; if the run is not in a terminal state (i.e. &#x60;in_progress&#x60;, &#x60;queued&#x60;, etc.).
 */
@Schema(name = "RunCompletionUsage", description = "Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).")
@JsonPropertyOrder({
  RunCompletionUsage.JSON_PROPERTY_COMPLETION_TOKENS,
  RunCompletionUsage.JSON_PROPERTY_PROMPT_TOKENS,
  RunCompletionUsage.JSON_PROPERTY_TOTAL_TOKENS
})
@JsonTypeName("RunCompletionUsage")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-11-03T11:06:54.019288922Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Introspected
public class RunCompletionUsage {
    public static final String JSON_PROPERTY_COMPLETION_TOKENS = "completion_tokens";
    private Integer completionTokens;

    public static final String JSON_PROPERTY_PROMPT_TOKENS = "prompt_tokens";
    private Integer promptTokens;

    public static final String JSON_PROPERTY_TOTAL_TOKENS = "total_tokens";
    private Integer totalTokens;

    public RunCompletionUsage(Integer completionTokens, Integer promptTokens, Integer totalTokens) {
        this.completionTokens = completionTokens;
        this.promptTokens = promptTokens;
        this.totalTokens = totalTokens;
    }

    public RunCompletionUsage completionTokens(Integer completionTokens) {
        this.completionTokens = completionTokens;
        return this;
    }

    /**
     * Number of completion tokens used over the course of the run.
     * @return completionTokens
     */
    @NotNull
    @Schema(name = "completion_tokens", description = "Number of completion tokens used over the course of the run.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_COMPLETION_TOKENS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getCompletionTokens() {
        return completionTokens;
    }

    @JsonProperty(JSON_PROPERTY_COMPLETION_TOKENS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCompletionTokens(Integer completionTokens) {
        this.completionTokens = completionTokens;
    }

    public RunCompletionUsage promptTokens(Integer promptTokens) {
        this.promptTokens = promptTokens;
        return this;
    }

    /**
     * Number of prompt tokens used over the course of the run.
     * @return promptTokens
     */
    @NotNull
    @Schema(name = "prompt_tokens", description = "Number of prompt tokens used over the course of the run.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_PROMPT_TOKENS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getPromptTokens() {
        return promptTokens;
    }

    @JsonProperty(JSON_PROPERTY_PROMPT_TOKENS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPromptTokens(Integer promptTokens) {
        this.promptTokens = promptTokens;
    }

    public RunCompletionUsage totalTokens(Integer totalTokens) {
        this.totalTokens = totalTokens;
        return this;
    }

    /**
     * Total number of tokens used (prompt + completion).
     * @return totalTokens
     */
    @NotNull
    @Schema(name = "total_tokens", description = "Total number of tokens used (prompt + completion).", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_TOTAL_TOKENS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getTotalTokens() {
        return totalTokens;
    }

    @JsonProperty(JSON_PROPERTY_TOTAL_TOKENS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTotalTokens(Integer totalTokens) {
        this.totalTokens = totalTokens;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RunCompletionUsage runCompletionUsage = (RunCompletionUsage) o;
        return Objects.equals(this.completionTokens, runCompletionUsage.completionTokens) &&
            Objects.equals(this.promptTokens, runCompletionUsage.promptTokens) &&
            Objects.equals(this.totalTokens, runCompletionUsage.totalTokens);
    }

    @Override
    public int hashCode() {
        return Objects.hash(completionTokens, promptTokens, totalTokens);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RunCompletionUsage {\n");
        sb.append("    completionTokens: ").append(toIndentedString(completionTokens)).append("\n");
        sb.append("    promptTokens: ").append(toIndentedString(promptTokens)).append("\n");
        sb.append("    totalTokens: ").append(toIndentedString(totalTokens)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

