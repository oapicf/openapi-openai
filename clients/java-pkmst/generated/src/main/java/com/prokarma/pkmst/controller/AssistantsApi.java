/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.AssistantFileObject;
import com.prokarma.pkmst.model.AssistantObject;
import com.prokarma.pkmst.model.CreateAssistantFileRequest;
import com.prokarma.pkmst.model.CreateAssistantRequest;
import com.prokarma.pkmst.model.CreateMessageRequest;
import com.prokarma.pkmst.model.CreateRunRequest;
import com.prokarma.pkmst.model.CreateThreadAndRunRequest;
import com.prokarma.pkmst.model.CreateThreadRequest;
import com.prokarma.pkmst.model.DeleteAssistantFileResponse;
import com.prokarma.pkmst.model.DeleteAssistantResponse;
import com.prokarma.pkmst.model.DeleteThreadResponse;
import com.prokarma.pkmst.model.ListAssistantFilesResponse;
import com.prokarma.pkmst.model.ListAssistantsResponse;
import com.prokarma.pkmst.model.ListMessageFilesResponse;
import com.prokarma.pkmst.model.ListMessagesResponse;
import com.prokarma.pkmst.model.ListRunStepsResponse;
import com.prokarma.pkmst.model.ListRunsResponse;
import com.prokarma.pkmst.model.MessageFileObject;
import com.prokarma.pkmst.model.MessageObject;
import com.prokarma.pkmst.model.ModifyAssistantRequest;
import com.prokarma.pkmst.model.ModifyMessageRequest;
import com.prokarma.pkmst.model.ModifyRunRequest;
import com.prokarma.pkmst.model.ModifyThreadRequest;
import com.prokarma.pkmst.model.RunObject;
import com.prokarma.pkmst.model.RunStepObject;
import com.prokarma.pkmst.model.SubmitToolOutputsRunRequest;
import com.prokarma.pkmst.model.ThreadObject;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2024-04-14T13:39:11.640510243Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Api(value = "Assistants", description = "the Assistants API")
public interface AssistantsApi {

    @ApiOperation(value = "Cancels a run that is `in_progress`.", notes = "", response = RunObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RunObject.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/threads/{thread_id}/runs/{run_id}/cancel",
        produces = { "application/json" }
    )
    ResponseEntity<RunObject> cancelRun(@ApiParam(value = "The ID of the thread to which this run belongs.",required=true ) @PathVariable("thread_id") String threadId,@ApiParam(value = "The ID of the run to cancel.",required=true ) @PathVariable("run_id") String runId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Create an assistant with a model and instructions.", notes = "", response = AssistantObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AssistantObject.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/assistants",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<AssistantObject> createAssistant(@ApiParam(value = "" ,required=true )   @RequestBody CreateAssistantRequest createAssistantRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).", notes = "", response = AssistantFileObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AssistantFileObject.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/assistants/{assistant_id}/files",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<AssistantFileObject> createAssistantFile(@ApiParam(value = "The ID of the assistant for which to create a File. ",required=true ) @PathVariable("assistant_id") String assistantId,@ApiParam(value = "" ,required=true )   @RequestBody CreateAssistantFileRequest createAssistantFileRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Create a message.", notes = "", response = MessageObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MessageObject.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/threads/{thread_id}/messages",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<MessageObject> createMessage(@ApiParam(value = "The ID of the [thread](/docs/api-reference/threads) to create a message for.",required=true ) @PathVariable("thread_id") String threadId,@ApiParam(value = "" ,required=true )   @RequestBody CreateMessageRequest createMessageRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Create a run.", notes = "", response = RunObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RunObject.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/threads/{thread_id}/runs",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<RunObject> createRun(@ApiParam(value = "The ID of the thread to run.",required=true ) @PathVariable("thread_id") String threadId,@ApiParam(value = "" ,required=true )   @RequestBody CreateRunRequest createRunRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Create a thread.", notes = "", response = ThreadObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ThreadObject.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/threads",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ThreadObject> createThread(@ApiParam(value = ""  )   @RequestBody CreateThreadRequest createThreadRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Create a thread and run it in one request.", notes = "", response = RunObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RunObject.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/threads/runs",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<RunObject> createThreadAndRun(@ApiParam(value = "" ,required=true )   @RequestBody CreateThreadAndRunRequest createThreadAndRunRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Delete an assistant.", notes = "", response = DeleteAssistantResponse.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DeleteAssistantResponse.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/assistants/{assistant_id}",
        produces = { "application/json" }
    )
    ResponseEntity<DeleteAssistantResponse> deleteAssistant(@ApiParam(value = "The ID of the assistant to delete.",required=true ) @PathVariable("assistant_id") String assistantId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Delete an assistant file.", notes = "", response = DeleteAssistantFileResponse.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DeleteAssistantFileResponse.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/assistants/{assistant_id}/files/{file_id}",
        produces = { "application/json" }
    )
    ResponseEntity<DeleteAssistantFileResponse> deleteAssistantFile(@ApiParam(value = "The ID of the assistant that the file belongs to.",required=true ) @PathVariable("assistant_id") String assistantId,@ApiParam(value = "The ID of the file to delete.",required=true ) @PathVariable("file_id") String fileId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Delete a thread.", notes = "", response = DeleteThreadResponse.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DeleteThreadResponse.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/threads/{thread_id}",
        produces = { "application/json" }
    )
    ResponseEntity<DeleteThreadResponse> deleteThread(@ApiParam(value = "The ID of the thread to delete.",required=true ) @PathVariable("thread_id") String threadId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Retrieves an assistant.", notes = "", response = AssistantObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AssistantObject.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/assistants/{assistant_id}",
        produces = { "application/json" }
    )
    ResponseEntity<AssistantObject> getAssistant(@ApiParam(value = "The ID of the assistant to retrieve.",required=true ) @PathVariable("assistant_id") String assistantId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Retrieves an AssistantFile.", notes = "", response = AssistantFileObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AssistantFileObject.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/assistants/{assistant_id}/files/{file_id}",
        produces = { "application/json" }
    )
    ResponseEntity<AssistantFileObject> getAssistantFile(@ApiParam(value = "The ID of the assistant who the file belongs to.",required=true ) @PathVariable("assistant_id") String assistantId,@ApiParam(value = "The ID of the file we're getting.",required=true ) @PathVariable("file_id") String fileId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Retrieve a message.", notes = "", response = MessageObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MessageObject.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/threads/{thread_id}/messages/{message_id}",
        produces = { "application/json" }
    )
    ResponseEntity<MessageObject> getMessage(@ApiParam(value = "The ID of the [thread](/docs/api-reference/threads) to which this message belongs.",required=true ) @PathVariable("thread_id") String threadId,@ApiParam(value = "The ID of the message to retrieve.",required=true ) @PathVariable("message_id") String messageId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Retrieves a message file.", notes = "", response = MessageFileObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MessageFileObject.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/threads/{thread_id}/messages/{message_id}/files/{file_id}",
        produces = { "application/json" }
    )
    ResponseEntity<MessageFileObject> getMessageFile(@ApiParam(value = "The ID of the thread to which the message and File belong.",required=true ) @PathVariable("thread_id") String threadId,@ApiParam(value = "The ID of the message the file belongs to.",required=true ) @PathVariable("message_id") String messageId,@ApiParam(value = "The ID of the file being retrieved.",required=true ) @PathVariable("file_id") String fileId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Retrieves a run.", notes = "", response = RunObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RunObject.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/threads/{thread_id}/runs/{run_id}",
        produces = { "application/json" }
    )
    ResponseEntity<RunObject> getRun(@ApiParam(value = "The ID of the [thread](/docs/api-reference/threads) that was run.",required=true ) @PathVariable("thread_id") String threadId,@ApiParam(value = "The ID of the run to retrieve.",required=true ) @PathVariable("run_id") String runId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Retrieves a run step.", notes = "", response = RunStepObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RunStepObject.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/threads/{thread_id}/runs/{run_id}/steps/{step_id}",
        produces = { "application/json" }
    )
    ResponseEntity<RunStepObject> getRunStep(@ApiParam(value = "The ID of the thread to which the run and run step belongs.",required=true ) @PathVariable("thread_id") String threadId,@ApiParam(value = "The ID of the run to which the run step belongs.",required=true ) @PathVariable("run_id") String runId,@ApiParam(value = "The ID of the run step to retrieve.",required=true ) @PathVariable("step_id") String stepId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Retrieves a thread.", notes = "", response = ThreadObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ThreadObject.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/threads/{thread_id}",
        produces = { "application/json" }
    )
    ResponseEntity<ThreadObject> getThread(@ApiParam(value = "The ID of the thread to retrieve.",required=true ) @PathVariable("thread_id") String threadId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Returns a list of assistant files.", notes = "", response = ListAssistantFilesResponse.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ListAssistantFilesResponse.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/assistants/{assistant_id}/files",
        produces = { "application/json" }
    )
    ResponseEntity<ListAssistantFilesResponse> listAssistantFiles(@ApiParam(value = "The ID of the assistant the file belongs to.",required=true ) @PathVariable("assistant_id") String assistantId,@ApiParam(value = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. ", defaultValue = "20")  @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit,@ApiParam(value = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. ", allowableValues = "asc, desc", defaultValue = "desc")  @RequestParam(value = "order", required = false, defaultValue="desc") String order,@ApiParam(value = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. ")  @RequestParam(value = "after", required = false) String after,@ApiParam(value = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ")  @RequestParam(value = "before", required = false) String before, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Returns a list of assistants.", notes = "", response = ListAssistantsResponse.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ListAssistantsResponse.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/assistants",
        produces = { "application/json" }
    )
    ResponseEntity<ListAssistantsResponse> listAssistants(@ApiParam(value = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. ", defaultValue = "20")  @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit,@ApiParam(value = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. ", allowableValues = "asc, desc", defaultValue = "desc")  @RequestParam(value = "order", required = false, defaultValue="desc") String order,@ApiParam(value = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. ")  @RequestParam(value = "after", required = false) String after,@ApiParam(value = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ")  @RequestParam(value = "before", required = false) String before, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Returns a list of message files.", notes = "", response = ListMessageFilesResponse.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ListMessageFilesResponse.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/threads/{thread_id}/messages/{message_id}/files",
        produces = { "application/json" }
    )
    ResponseEntity<ListMessageFilesResponse> listMessageFiles(@ApiParam(value = "The ID of the thread that the message and files belong to.",required=true ) @PathVariable("thread_id") String threadId,@ApiParam(value = "The ID of the message that the files belongs to.",required=true ) @PathVariable("message_id") String messageId,@ApiParam(value = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. ", defaultValue = "20")  @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit,@ApiParam(value = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. ", allowableValues = "asc, desc", defaultValue = "desc")  @RequestParam(value = "order", required = false, defaultValue="desc") String order,@ApiParam(value = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. ")  @RequestParam(value = "after", required = false) String after,@ApiParam(value = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ")  @RequestParam(value = "before", required = false) String before, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Returns a list of messages for a given thread.", notes = "", response = ListMessagesResponse.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ListMessagesResponse.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/threads/{thread_id}/messages",
        produces = { "application/json" }
    )
    ResponseEntity<ListMessagesResponse> listMessages(@ApiParam(value = "The ID of the [thread](/docs/api-reference/threads) the messages belong to.",required=true ) @PathVariable("thread_id") String threadId,@ApiParam(value = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. ", defaultValue = "20")  @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit,@ApiParam(value = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. ", allowableValues = "asc, desc", defaultValue = "desc")  @RequestParam(value = "order", required = false, defaultValue="desc") String order,@ApiParam(value = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. ")  @RequestParam(value = "after", required = false) String after,@ApiParam(value = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ")  @RequestParam(value = "before", required = false) String before,@ApiParam(value = "Filter messages by the run ID that generated them. ")  @RequestParam(value = "run_id", required = false) String runId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Returns a list of run steps belonging to a run.", notes = "", response = ListRunStepsResponse.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ListRunStepsResponse.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/threads/{thread_id}/runs/{run_id}/steps",
        produces = { "application/json" }
    )
    ResponseEntity<ListRunStepsResponse> listRunSteps(@ApiParam(value = "The ID of the thread the run and run steps belong to.",required=true ) @PathVariable("thread_id") String threadId,@ApiParam(value = "The ID of the run the run steps belong to.",required=true ) @PathVariable("run_id") String runId,@ApiParam(value = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. ", defaultValue = "20")  @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit,@ApiParam(value = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. ", allowableValues = "asc, desc", defaultValue = "desc")  @RequestParam(value = "order", required = false, defaultValue="desc") String order,@ApiParam(value = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. ")  @RequestParam(value = "after", required = false) String after,@ApiParam(value = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ")  @RequestParam(value = "before", required = false) String before, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Returns a list of runs belonging to a thread.", notes = "", response = ListRunsResponse.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ListRunsResponse.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/threads/{thread_id}/runs",
        produces = { "application/json" }
    )
    ResponseEntity<ListRunsResponse> listRuns(@ApiParam(value = "The ID of the thread the run belongs to.",required=true ) @PathVariable("thread_id") String threadId,@ApiParam(value = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. ", defaultValue = "20")  @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit,@ApiParam(value = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. ", allowableValues = "asc, desc", defaultValue = "desc")  @RequestParam(value = "order", required = false, defaultValue="desc") String order,@ApiParam(value = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. ")  @RequestParam(value = "after", required = false) String after,@ApiParam(value = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ")  @RequestParam(value = "before", required = false) String before, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Modifies an assistant.", notes = "", response = AssistantObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AssistantObject.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/assistants/{assistant_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<AssistantObject> modifyAssistant(@ApiParam(value = "The ID of the assistant to modify.",required=true ) @PathVariable("assistant_id") String assistantId,@ApiParam(value = "" ,required=true )   @RequestBody ModifyAssistantRequest modifyAssistantRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Modifies a message.", notes = "", response = MessageObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MessageObject.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/threads/{thread_id}/messages/{message_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<MessageObject> modifyMessage(@ApiParam(value = "The ID of the thread to which this message belongs.",required=true ) @PathVariable("thread_id") String threadId,@ApiParam(value = "The ID of the message to modify.",required=true ) @PathVariable("message_id") String messageId,@ApiParam(value = "" ,required=true )   @RequestBody ModifyMessageRequest modifyMessageRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Modifies a run.", notes = "", response = RunObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RunObject.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/threads/{thread_id}/runs/{run_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<RunObject> modifyRun(@ApiParam(value = "The ID of the [thread](/docs/api-reference/threads) that was run.",required=true ) @PathVariable("thread_id") String threadId,@ApiParam(value = "The ID of the run to modify.",required=true ) @PathVariable("run_id") String runId,@ApiParam(value = "" ,required=true )   @RequestBody ModifyRunRequest modifyRunRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Modifies a thread.", notes = "", response = ThreadObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ThreadObject.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/threads/{thread_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ThreadObject> modifyThread(@ApiParam(value = "The ID of the thread to modify. Only the `metadata` can be modified.",required=true ) @PathVariable("thread_id") String threadId,@ApiParam(value = "" ,required=true )   @RequestBody ModifyThreadRequest modifyThreadRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request. ", notes = "", response = RunObject.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Assistants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RunObject.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<RunObject> submitToolOuputsToRun(@ApiParam(value = "The ID of the [thread](/docs/api-reference/threads) to which this run belongs.",required=true ) @PathVariable("thread_id") String threadId,@ApiParam(value = "The ID of the run that requires the tool output submission.",required=true ) @PathVariable("run_id") String runId,@ApiParam(value = "" ,required=true )   @RequestBody SubmitToolOutputsRunRequest submitToolOutputsRunRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
