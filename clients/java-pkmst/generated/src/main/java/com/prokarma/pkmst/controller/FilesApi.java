/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.DeleteFileResponse;
import java.io.File;
import com.prokarma.pkmst.model.ListFilesResponse;
import com.prokarma.pkmst.model.OpenAIFile;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2024-04-14T13:39:11.640510243Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Api(value = "Files", description = "the Files API")
public interface FilesApi {

    @ApiOperation(value = "Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. ", notes = "", response = OpenAIFile.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Files", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = OpenAIFile.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/files",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    ResponseEntity<OpenAIFile> createFile(@ApiParam(value = "file detail")  @RequestPart("file") MultipartFile file,@ApiParam(value = "The intended purpose of the uploaded file.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tuning) and \\\"assistants\\\" for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning. ", required=true, allowableValues="fine-tune, assistants") @RequestPart(value="purpose", required=true)  String purpose, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Delete a file.", notes = "", response = DeleteFileResponse.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Files", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DeleteFileResponse.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/files/{file_id}",
        produces = { "application/json" }
    )
    ResponseEntity<DeleteFileResponse> deleteFile(@ApiParam(value = "The ID of the file to use for this request.",required=true ) @PathVariable("file_id") String fileId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Returns the contents of the specified file.", notes = "", response = String.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Files", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/files/{file_id}/content",
        produces = { "application/json" }
    )
    ResponseEntity<String> downloadFile(@ApiParam(value = "The ID of the file to use for this request.",required=true ) @PathVariable("file_id") String fileId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Returns a list of files that belong to the user's organization.", notes = "", response = ListFilesResponse.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Files", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ListFilesResponse.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/files",
        produces = { "application/json" }
    )
    ResponseEntity<ListFilesResponse> listFiles(@ApiParam(value = "Only return files with the given purpose.")  @RequestParam(value = "purpose", required = false) String purpose, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Returns information about a specific file.", notes = "", response = OpenAIFile.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Files", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = OpenAIFile.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/files/{file_id}",
        produces = { "application/json" }
    )
    ResponseEntity<OpenAIFile> retrieveFile(@ApiParam(value = "The ID of the file to use for this request.",required=true ) @PathVariable("file_id") String fileId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
