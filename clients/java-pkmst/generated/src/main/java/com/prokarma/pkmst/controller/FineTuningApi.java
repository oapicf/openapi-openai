/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.CreateFineTuningJobRequest;
import com.prokarma.pkmst.model.FineTuningJob;
import com.prokarma.pkmst.model.ListFineTuningJobCheckpointsResponse;
import com.prokarma.pkmst.model.ListFineTuningJobEventsResponse;
import com.prokarma.pkmst.model.ListPaginatedFineTuningJobsResponse;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2024-11-03T11:07:18.723034005Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Api(value = "FineTuning", description = "the FineTuning API")
public interface FineTuningApi {

    @ApiOperation(value = "Immediately cancel a fine-tune job. ", notes = "", response = FineTuningJob.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Fine-tuning", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FineTuningJob.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/fine_tuning/jobs/{fine_tuning_job_id}/cancel",
        produces = { "application/json" }
    )
    ResponseEntity<FineTuningJob> cancelFineTuningJob(@ApiParam(value = "The ID of the fine-tuning job to cancel. ",required=true ) @PathVariable("fine_tuning_job_id") String fineTuningJobId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) ", notes = "", response = FineTuningJob.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Fine-tuning", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FineTuningJob.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/fine_tuning/jobs",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<FineTuningJob> createFineTuningJob(@ApiParam(value = "" ,required=true )   @RequestBody CreateFineTuningJobRequest createFineTuningJobRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get status updates for a fine-tuning job. ", notes = "", response = ListFineTuningJobEventsResponse.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Fine-tuning", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ListFineTuningJobEventsResponse.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fine_tuning/jobs/{fine_tuning_job_id}/events",
        produces = { "application/json" }
    )
    ResponseEntity<ListFineTuningJobEventsResponse> listFineTuningEvents(@ApiParam(value = "The ID of the fine-tuning job to get events for. ",required=true ) @PathVariable("fine_tuning_job_id") String fineTuningJobId,@ApiParam(value = "Identifier for the last event from the previous pagination request.")  @RequestParam(value = "after", required = false) String after,@ApiParam(value = "Number of events to retrieve.", defaultValue = "20")  @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "List checkpoints for a fine-tuning job. ", notes = "", response = ListFineTuningJobCheckpointsResponse.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Fine-tuning", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ListFineTuningJobCheckpointsResponse.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints",
        produces = { "application/json" }
    )
    ResponseEntity<ListFineTuningJobCheckpointsResponse> listFineTuningJobCheckpoints(@ApiParam(value = "The ID of the fine-tuning job to get checkpoints for. ",required=true ) @PathVariable("fine_tuning_job_id") String fineTuningJobId,@ApiParam(value = "Identifier for the last checkpoint ID from the previous pagination request.")  @RequestParam(value = "after", required = false) String after,@ApiParam(value = "Number of checkpoints to retrieve.", defaultValue = "10")  @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "List your organization's fine-tuning jobs ", notes = "", response = ListPaginatedFineTuningJobsResponse.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Fine-tuning", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ListPaginatedFineTuningJobsResponse.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fine_tuning/jobs",
        produces = { "application/json" }
    )
    ResponseEntity<ListPaginatedFineTuningJobsResponse> listPaginatedFineTuningJobs(@ApiParam(value = "Identifier for the last job from the previous pagination request.")  @RequestParam(value = "after", required = false) String after,@ApiParam(value = "Number of fine-tuning jobs to retrieve.", defaultValue = "20")  @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) ", notes = "", response = FineTuningJob.class, authorizations = {
        
        @Authorization(value = "ApiKeyAuth")
         }, tags={ "Fine-tuning", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FineTuningJob.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fine_tuning/jobs/{fine_tuning_job_id}",
        produces = { "application/json" }
    )
    ResponseEntity<FineTuningJob> retrieveFineTuningJob(@ApiParam(value = "The ID of the fine-tuning job. ",required=true ) @PathVariable("fine_tuning_job_id") String fineTuningJobId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
