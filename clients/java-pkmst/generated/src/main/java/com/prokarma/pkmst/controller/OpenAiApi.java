/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import java.math.BigDecimal;
import com.prokarma.pkmst.model.CreateChatCompletionRequest;
import com.prokarma.pkmst.model.CreateChatCompletionResponse;
import com.prokarma.pkmst.model.CreateCompletionRequest;
import com.prokarma.pkmst.model.CreateCompletionResponse;
import com.prokarma.pkmst.model.CreateEditRequest;
import com.prokarma.pkmst.model.CreateEditResponse;
import com.prokarma.pkmst.model.CreateEmbeddingRequest;
import com.prokarma.pkmst.model.CreateEmbeddingResponse;
import com.prokarma.pkmst.model.CreateFineTuneRequest;
import com.prokarma.pkmst.model.CreateImageRequest;
import com.prokarma.pkmst.model.CreateModerationRequest;
import com.prokarma.pkmst.model.CreateModerationResponse;
import com.prokarma.pkmst.model.CreateTranscriptionRequestModel;
import com.prokarma.pkmst.model.CreateTranscriptionResponse;
import com.prokarma.pkmst.model.CreateTranslationResponse;
import com.prokarma.pkmst.model.DeleteFileResponse;
import com.prokarma.pkmst.model.DeleteModelResponse;
import java.io.File;
import com.prokarma.pkmst.model.FineTune;
import com.prokarma.pkmst.model.ImagesResponse;
import com.prokarma.pkmst.model.ListFilesResponse;
import com.prokarma.pkmst.model.ListFineTuneEventsResponse;
import com.prokarma.pkmst.model.ListFineTunesResponse;
import com.prokarma.pkmst.model.ListModelsResponse;
import com.prokarma.pkmst.model.Model;
import com.prokarma.pkmst.model.OpenAIFile;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2024-03-16T01:12:49.513446343Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Api(value = "OpenAi", description = "the OpenAi API")
public interface OpenAiApi {

    @ApiOperation(value = "Immediately cancel a fine-tune job. ", notes = "", response = FineTune.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FineTune.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/fine-tunes/{fine_tune_id}/cancel",
        produces = { "application/json" }
    )
    ResponseEntity<FineTune> cancelFineTune(@ApiParam(value = "The ID of the fine-tune job to cancel ",required=true ) @PathVariable("fine_tune_id") String fineTuneId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Creates a model response for the given chat conversation.", notes = "", response = CreateChatCompletionResponse.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CreateChatCompletionResponse.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/chat/completions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CreateChatCompletionResponse> createChatCompletion(@ApiParam(value = "" ,required=true )   @RequestBody CreateChatCompletionRequest createChatCompletionRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Creates a completion for the provided prompt and parameters.", notes = "", response = CreateCompletionResponse.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CreateCompletionResponse.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/completions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CreateCompletionResponse> createCompletion(@ApiParam(value = "" ,required=true )   @RequestBody CreateCompletionRequest createCompletionRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Creates a new edit for the provided input, instruction, and parameters.", notes = "", response = CreateEditResponse.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CreateEditResponse.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/edits",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CreateEditResponse> createEdit(@ApiParam(value = "" ,required=true )   @RequestBody CreateEditRequest createEditRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Creates an embedding vector representing the input text.", notes = "", response = CreateEmbeddingResponse.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CreateEmbeddingResponse.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/embeddings",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CreateEmbeddingResponse> createEmbedding(@ApiParam(value = "" ,required=true )   @RequestBody CreateEmbeddingRequest createEmbeddingRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. ", notes = "", response = OpenAIFile.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = OpenAIFile.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/files",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    ResponseEntity<OpenAIFile> createFile(@ApiParam(value = "file detail")  @RequestPart("file") MultipartFile file,@ApiParam(value = "The intended purpose of the uploaded documents.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. ", required=true) @RequestPart(value="purpose", required=true)  String purpose, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) ", notes = "", response = FineTune.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FineTune.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/fine-tunes",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<FineTune> createFineTune(@ApiParam(value = "" ,required=true )   @RequestBody CreateFineTuneRequest createFineTuneRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Creates an image given a prompt.", notes = "", response = ImagesResponse.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ImagesResponse.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/images/generations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ImagesResponse> createImage(@ApiParam(value = "" ,required=true )   @RequestBody CreateImageRequest createImageRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Creates an edited or extended image given an original image and a prompt.", notes = "", response = ImagesResponse.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ImagesResponse.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/images/edits",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    ResponseEntity<ImagesResponse> createImageEdit(@ApiParam(value = "file detail")  @RequestPart("file") MultipartFile image,@ApiParam(value = "A text description of the desired image(s). The maximum length is 1000 characters.", required=true) @RequestPart(value="prompt", required=true)  String prompt,@ApiParam(value = "file detail")  @RequestPart("file") MultipartFile mask,@ApiParam(value = "The number of images to generate. Must be between 1 and 10.", defaultValue="1") @RequestPart(value="n", required=false)  Integer n,@ApiParam(value = "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.", allowableValues="256x256, 512x512, 1024x1024", defaultValue="1024x1024") @RequestPart(value="size", required=false)  String size,@ApiParam(value = "The format in which the generated images are returned. Must be one of `url` or `b64_json`.", allowableValues="url, b64_json", defaultValue="url") @RequestPart(value="response_format", required=false)  String responseFormat,@ApiParam(value = "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). ") @RequestPart(value="user", required=false)  String user, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Creates a variation of a given image.", notes = "", response = ImagesResponse.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ImagesResponse.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/images/variations",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    ResponseEntity<ImagesResponse> createImageVariation(@ApiParam(value = "file detail")  @RequestPart("file") MultipartFile image,@ApiParam(value = "The number of images to generate. Must be between 1 and 10.", defaultValue="1") @RequestPart(value="n", required=false)  Integer n,@ApiParam(value = "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.", allowableValues="256x256, 512x512, 1024x1024", defaultValue="1024x1024") @RequestPart(value="size", required=false)  String size,@ApiParam(value = "The format in which the generated images are returned. Must be one of `url` or `b64_json`.", allowableValues="url, b64_json", defaultValue="url") @RequestPart(value="response_format", required=false)  String responseFormat,@ApiParam(value = "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). ") @RequestPart(value="user", required=false)  String user, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Classifies if text violates OpenAI's Content Policy", notes = "", response = CreateModerationResponse.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CreateModerationResponse.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/moderations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CreateModerationResponse> createModeration(@ApiParam(value = "" ,required=true )   @RequestBody CreateModerationRequest createModerationRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Transcribes audio into the input language.", notes = "", response = CreateTranscriptionResponse.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CreateTranscriptionResponse.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/audio/transcriptions",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    ResponseEntity<CreateTranscriptionResponse> createTranscription(@ApiParam(value = "file detail")  @RequestPart("file") MultipartFile file,@ApiParam(value = "", required=true) @RequestPart(value="model", required=true)  CreateTranscriptionRequestModel model,@ApiParam(value = "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. ") @RequestPart(value="prompt", required=false)  String prompt,@ApiParam(value = "The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. ", defaultValue="json") @RequestPart(value="response_format", required=false)  String responseFormat,@ApiParam(value = "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. ", defaultValue="0") @RequestPart(value="temperature", required=false)  BigDecimal temperature,@ApiParam(value = "The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. ") @RequestPart(value="language", required=false)  String language, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Translates audio into English.", notes = "", response = CreateTranslationResponse.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CreateTranslationResponse.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/audio/translations",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    ResponseEntity<CreateTranslationResponse> createTranslation(@ApiParam(value = "file detail")  @RequestPart("file") MultipartFile file,@ApiParam(value = "", required=true) @RequestPart(value="model", required=true)  CreateTranscriptionRequestModel model,@ApiParam(value = "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. ") @RequestPart(value="prompt", required=false)  String prompt,@ApiParam(value = "The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. ", defaultValue="json") @RequestPart(value="response_format", required=false)  String responseFormat,@ApiParam(value = "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. ", defaultValue="0") @RequestPart(value="temperature", required=false)  BigDecimal temperature, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Delete a file.", notes = "", response = DeleteFileResponse.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DeleteFileResponse.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/files/{file_id}",
        produces = { "application/json" }
    )
    ResponseEntity<DeleteFileResponse> deleteFile(@ApiParam(value = "The ID of the file to use for this request",required=true ) @PathVariable("file_id") String fileId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Delete a fine-tuned model. You must have the Owner role in your organization.", notes = "", response = DeleteModelResponse.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DeleteModelResponse.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/models/{model}",
        produces = { "application/json" }
    )
    ResponseEntity<DeleteModelResponse> deleteModel(@ApiParam(value = "The model to delete",required=true ) @PathVariable("model") String model, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Returns the contents of the specified file", notes = "", response = String.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/files/{file_id}/content",
        produces = { "application/json" }
    )
    ResponseEntity<String> downloadFile(@ApiParam(value = "The ID of the file to use for this request",required=true ) @PathVariable("file_id") String fileId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Returns a list of files that belong to the user's organization.", notes = "", response = ListFilesResponse.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ListFilesResponse.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/files",
        produces = { "application/json" }
    )
    ResponseEntity<ListFilesResponse> listFiles( @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get fine-grained status updates for a fine-tune job. ", notes = "", response = ListFineTuneEventsResponse.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ListFineTuneEventsResponse.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fine-tunes/{fine_tune_id}/events",
        produces = { "application/json" }
    )
    ResponseEntity<ListFineTuneEventsResponse> listFineTuneEvents(@ApiParam(value = "The ID of the fine-tune job to get events for. ",required=true ) @PathVariable("fine_tune_id") String fineTuneId,@ApiParam(value = "Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a `data: [DONE]` message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned. ", defaultValue = "false")  @RequestParam(value = "stream", required = false, defaultValue="false") Boolean stream, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "List your organization's fine-tuning jobs ", notes = "", response = ListFineTunesResponse.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ListFineTunesResponse.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fine-tunes",
        produces = { "application/json" }
    )
    ResponseEntity<ListFineTunesResponse> listFineTunes( @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Lists the currently available models, and provides basic information about each one such as the owner and availability.", notes = "", response = ListModelsResponse.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ListModelsResponse.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/models",
        produces = { "application/json" }
    )
    ResponseEntity<ListModelsResponse> listModels( @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Returns information about a specific file.", notes = "", response = OpenAIFile.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = OpenAIFile.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/files/{file_id}",
        produces = { "application/json" }
    )
    ResponseEntity<OpenAIFile> retrieveFile(@ApiParam(value = "The ID of the file to use for this request",required=true ) @PathVariable("file_id") String fileId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) ", notes = "", response = FineTune.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FineTune.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fine-tunes/{fine_tune_id}",
        produces = { "application/json" }
    )
    ResponseEntity<FineTune> retrieveFineTune(@ApiParam(value = "The ID of the fine-tune job ",required=true ) @PathVariable("fine_tune_id") String fineTuneId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Retrieves a model instance, providing basic information about the model such as the owner and permissioning.", notes = "", response = Model.class, tags={ "OpenAI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Model.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/models/{model}",
        produces = { "application/json" }
    )
    ResponseEntity<Model> retrieveModel(@ApiParam(value = "The ID of the model to use for this request",required=true ) @PathVariable("model") String model, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
