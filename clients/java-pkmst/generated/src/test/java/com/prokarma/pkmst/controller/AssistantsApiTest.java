/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.prokarma.pkmst.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.prokarma.pkmst.model.AssistantFileObject;
import com.prokarma.pkmst.model.AssistantObject;
import com.prokarma.pkmst.model.CreateAssistantFileRequest;
import com.prokarma.pkmst.model.CreateAssistantRequest;
import com.prokarma.pkmst.model.CreateMessageRequest;
import com.prokarma.pkmst.model.CreateRunRequest;
import com.prokarma.pkmst.model.CreateThreadAndRunRequest;
import com.prokarma.pkmst.model.CreateThreadRequest;
import com.prokarma.pkmst.model.DeleteAssistantFileResponse;
import com.prokarma.pkmst.model.DeleteAssistantResponse;
import com.prokarma.pkmst.model.DeleteThreadResponse;
import com.prokarma.pkmst.model.ListAssistantFilesResponse;
import com.prokarma.pkmst.model.ListAssistantsResponse;
import com.prokarma.pkmst.model.ListMessageFilesResponse;
import com.prokarma.pkmst.model.ListMessagesResponse;
import com.prokarma.pkmst.model.ListRunStepsResponse;
import com.prokarma.pkmst.model.ListRunsResponse;
import com.prokarma.pkmst.model.MessageFileObject;
import com.prokarma.pkmst.model.MessageObject;
import com.prokarma.pkmst.model.ModifyAssistantRequest;
import com.prokarma.pkmst.model.ModifyMessageRequest;
import com.prokarma.pkmst.model.ModifyRunRequest;
import com.prokarma.pkmst.model.ModifyThreadRequest;
import com.prokarma.pkmst.model.RunObject;
import com.prokarma.pkmst.model.RunStepObject;
import com.prokarma.pkmst.model.SubmitToolOutputsRunRequest;
import com.prokarma.pkmst.model.ThreadObject;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

/**
 * API tests for AssistantsApi
 */
@Ignore
public class AssistantsApiTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    private final AssistantsApi api = new AssistantsApiController(objectMapper);

    private final String accept = "application/json";

    
    /**
     * Cancels a run that is &#x60;in_progress&#x60;.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cancelRunTest() throws Exception {
        String threadId = null;
        String runId = null;
    ResponseEntity<RunObject> response = api.cancelRun(threadId, runId , accept);

        // TODO: test validations
    }
    
    /**
     * Create an assistant with a model and instructions.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createAssistantTest() throws Exception {
        CreateAssistantRequest createAssistantRequest = null;
    ResponseEntity<AssistantObject> response = api.createAssistant(createAssistantRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createAssistantFileTest() throws Exception {
        String assistantId = null;
        CreateAssistantFileRequest createAssistantFileRequest = null;
    ResponseEntity<AssistantFileObject> response = api.createAssistantFile(assistantId, createAssistantFileRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Create a message.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createMessageTest() throws Exception {
        String threadId = null;
        CreateMessageRequest createMessageRequest = null;
    ResponseEntity<MessageObject> response = api.createMessage(threadId, createMessageRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Create a run.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createRunTest() throws Exception {
        String threadId = null;
        CreateRunRequest createRunRequest = null;
    ResponseEntity<RunObject> response = api.createRun(threadId, createRunRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Create a thread.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createThreadTest() throws Exception {
        CreateThreadRequest createThreadRequest = null;
    ResponseEntity<ThreadObject> response = api.createThread(createThreadRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Create a thread and run it in one request.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createThreadAndRunTest() throws Exception {
        CreateThreadAndRunRequest createThreadAndRunRequest = null;
    ResponseEntity<RunObject> response = api.createThreadAndRun(createThreadAndRunRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Delete an assistant.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteAssistantTest() throws Exception {
        String assistantId = null;
    ResponseEntity<DeleteAssistantResponse> response = api.deleteAssistant(assistantId , accept);

        // TODO: test validations
    }
    
    /**
     * Delete an assistant file.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteAssistantFileTest() throws Exception {
        String assistantId = null;
        String fileId = null;
    ResponseEntity<DeleteAssistantFileResponse> response = api.deleteAssistantFile(assistantId, fileId , accept);

        // TODO: test validations
    }
    
    /**
     * Delete a thread.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteThreadTest() throws Exception {
        String threadId = null;
    ResponseEntity<DeleteThreadResponse> response = api.deleteThread(threadId , accept);

        // TODO: test validations
    }
    
    /**
     * Retrieves an assistant.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAssistantTest() throws Exception {
        String assistantId = null;
    ResponseEntity<AssistantObject> response = api.getAssistant(assistantId , accept);

        // TODO: test validations
    }
    
    /**
     * Retrieves an AssistantFile.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAssistantFileTest() throws Exception {
        String assistantId = null;
        String fileId = null;
    ResponseEntity<AssistantFileObject> response = api.getAssistantFile(assistantId, fileId , accept);

        // TODO: test validations
    }
    
    /**
     * Retrieve a message.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getMessageTest() throws Exception {
        String threadId = null;
        String messageId = null;
    ResponseEntity<MessageObject> response = api.getMessage(threadId, messageId , accept);

        // TODO: test validations
    }
    
    /**
     * Retrieves a message file.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getMessageFileTest() throws Exception {
        String threadId = null;
        String messageId = null;
        String fileId = null;
    ResponseEntity<MessageFileObject> response = api.getMessageFile(threadId, messageId, fileId , accept);

        // TODO: test validations
    }
    
    /**
     * Retrieves a run.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRunTest() throws Exception {
        String threadId = null;
        String runId = null;
    ResponseEntity<RunObject> response = api.getRun(threadId, runId , accept);

        // TODO: test validations
    }
    
    /**
     * Retrieves a run step.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRunStepTest() throws Exception {
        String threadId = null;
        String runId = null;
        String stepId = null;
    ResponseEntity<RunStepObject> response = api.getRunStep(threadId, runId, stepId , accept);

        // TODO: test validations
    }
    
    /**
     * Retrieves a thread.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreadTest() throws Exception {
        String threadId = null;
    ResponseEntity<ThreadObject> response = api.getThread(threadId , accept);

        // TODO: test validations
    }
    
    /**
     * Returns a list of assistant files.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listAssistantFilesTest() throws Exception {
        String assistantId = null;
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;
    ResponseEntity<ListAssistantFilesResponse> response = api.listAssistantFiles(assistantId, limit, order, after, before , accept);

        // TODO: test validations
    }
    
    /**
     * Returns a list of assistants.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listAssistantsTest() throws Exception {
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;
    ResponseEntity<ListAssistantsResponse> response = api.listAssistants(limit, order, after, before , accept);

        // TODO: test validations
    }
    
    /**
     * Returns a list of message files.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listMessageFilesTest() throws Exception {
        String threadId = null;
        String messageId = null;
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;
    ResponseEntity<ListMessageFilesResponse> response = api.listMessageFiles(threadId, messageId, limit, order, after, before , accept);

        // TODO: test validations
    }
    
    /**
     * Returns a list of messages for a given thread.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listMessagesTest() throws Exception {
        String threadId = null;
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;
        String runId = null;
    ResponseEntity<ListMessagesResponse> response = api.listMessages(threadId, limit, order, after, before, runId , accept);

        // TODO: test validations
    }
    
    /**
     * Returns a list of run steps belonging to a run.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listRunStepsTest() throws Exception {
        String threadId = null;
        String runId = null;
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;
    ResponseEntity<ListRunStepsResponse> response = api.listRunSteps(threadId, runId, limit, order, after, before , accept);

        // TODO: test validations
    }
    
    /**
     * Returns a list of runs belonging to a thread.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listRunsTest() throws Exception {
        String threadId = null;
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;
    ResponseEntity<ListRunsResponse> response = api.listRuns(threadId, limit, order, after, before , accept);

        // TODO: test validations
    }
    
    /**
     * Modifies an assistant.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void modifyAssistantTest() throws Exception {
        String assistantId = null;
        ModifyAssistantRequest modifyAssistantRequest = null;
    ResponseEntity<AssistantObject> response = api.modifyAssistant(assistantId, modifyAssistantRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Modifies a message.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void modifyMessageTest() throws Exception {
        String threadId = null;
        String messageId = null;
        ModifyMessageRequest modifyMessageRequest = null;
    ResponseEntity<MessageObject> response = api.modifyMessage(threadId, messageId, modifyMessageRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Modifies a run.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void modifyRunTest() throws Exception {
        String threadId = null;
        String runId = null;
        ModifyRunRequest modifyRunRequest = null;
    ResponseEntity<RunObject> response = api.modifyRun(threadId, runId, modifyRunRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Modifies a thread.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void modifyThreadTest() throws Exception {
        String threadId = null;
        ModifyThreadRequest modifyThreadRequest = null;
    ResponseEntity<ThreadObject> response = api.modifyThread(threadId, modifyThreadRequest , accept);

        // TODO: test validations
    }
    
    /**
     * When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void submitToolOuputsToRunTest() throws Exception {
        String threadId = null;
        String runId = null;
        SubmitToolOutputsRunRequest submitToolOutputsRunRequest = null;
    ResponseEntity<RunObject> response = api.submitToolOuputsToRun(threadId, runId, submitToolOutputsRunRequest , accept);

        // TODO: test validations
    }
    
}
