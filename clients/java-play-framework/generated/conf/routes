# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /api                        controllers.ApiDocController.api


#Functions for Assistants API
POST     /v1/threads/:threadId/runs/:runId/cancel                     controllers.AssistantsApiController.cancelRun(request: Request, threadId: String, runId: String)
POST     /v1/assistants                     controllers.AssistantsApiController.createAssistant(request: Request)
POST     /v1/assistants/:assistantId/files                     controllers.AssistantsApiController.createAssistantFile(request: Request, assistantId: String)
POST     /v1/threads/:threadId/messages                     controllers.AssistantsApiController.createMessage(request: Request, threadId: String)
POST     /v1/threads/:threadId/runs                     controllers.AssistantsApiController.createRun(request: Request, threadId: String)
POST     /v1/threads                     controllers.AssistantsApiController.createThread(request: Request)
POST     /v1/threads/runs                     controllers.AssistantsApiController.createThreadAndRun(request: Request)
DELETE     /v1/assistants/:assistantId                     controllers.AssistantsApiController.deleteAssistant(request: Request, assistantId: String)
DELETE     /v1/assistants/:assistantId/files/:fileId                     controllers.AssistantsApiController.deleteAssistantFile(request: Request, assistantId: String, fileId: String)
DELETE     /v1/threads/:threadId                     controllers.AssistantsApiController.deleteThread(request: Request, threadId: String)
GET     /v1/assistants/:assistantId                     controllers.AssistantsApiController.getAssistant(request: Request, assistantId: String)
GET     /v1/assistants/:assistantId/files/:fileId                     controllers.AssistantsApiController.getAssistantFile(request: Request, assistantId: String, fileId: String)
GET     /v1/threads/:threadId/messages/:messageId                     controllers.AssistantsApiController.getMessage(request: Request, threadId: String, messageId: String)
GET     /v1/threads/:threadId/messages/:messageId/files/:fileId                     controllers.AssistantsApiController.getMessageFile(request: Request, threadId: String, messageId: String, fileId: String)
GET     /v1/threads/:threadId/runs/:runId                     controllers.AssistantsApiController.getRun(request: Request, threadId: String, runId: String)
GET     /v1/threads/:threadId/runs/:runId/steps/:stepId                     controllers.AssistantsApiController.getRunStep(request: Request, threadId: String, runId: String, stepId: String)
GET     /v1/threads/:threadId                     controllers.AssistantsApiController.getThread(request: Request, threadId: String)
GET     /v1/assistants/:assistantId/files                     controllers.AssistantsApiController.listAssistantFiles(request: Request, assistantId: String)
GET     /v1/assistants                     controllers.AssistantsApiController.listAssistants(request: Request)
GET     /v1/threads/:threadId/messages/:messageId/files                     controllers.AssistantsApiController.listMessageFiles(request: Request, threadId: String, messageId: String)
GET     /v1/threads/:threadId/messages                     controllers.AssistantsApiController.listMessages(request: Request, threadId: String)
GET     /v1/threads/:threadId/runs/:runId/steps                     controllers.AssistantsApiController.listRunSteps(request: Request, threadId: String, runId: String)
GET     /v1/threads/:threadId/runs                     controllers.AssistantsApiController.listRuns(request: Request, threadId: String)
POST     /v1/assistants/:assistantId                     controllers.AssistantsApiController.modifyAssistant(request: Request, assistantId: String)
POST     /v1/threads/:threadId/messages/:messageId                     controllers.AssistantsApiController.modifyMessage(request: Request, threadId: String, messageId: String)
POST     /v1/threads/:threadId/runs/:runId                     controllers.AssistantsApiController.modifyRun(request: Request, threadId: String, runId: String)
POST     /v1/threads/:threadId                     controllers.AssistantsApiController.modifyThread(request: Request, threadId: String)
POST     /v1/threads/:threadId/runs/:runId/submit_tool_outputs                     controllers.AssistantsApiController.submitToolOuputsToRun(request: Request, threadId: String, runId: String)

#Functions for Audio API
POST     /v1/audio/speech                     controllers.AudioApiController.createSpeech(request: Request)
POST     /v1/audio/transcriptions                     controllers.AudioApiController.createTranscription(request: Request)
POST     /v1/audio/translations                     controllers.AudioApiController.createTranslation(request: Request)

#Functions for Chat API
POST     /v1/chat/completions                     controllers.ChatApiController.createChatCompletion(request: Request)

#Functions for Completions API
POST     /v1/completions                     controllers.CompletionsApiController.createCompletion(request: Request)

#Functions for Embeddings API
POST     /v1/embeddings                     controllers.EmbeddingsApiController.createEmbedding(request: Request)

#Functions for Files API
POST     /v1/files                     controllers.FilesApiController.createFile(request: Request)
DELETE     /v1/files/:fileId                     controllers.FilesApiController.deleteFile(request: Request, fileId: String)
GET     /v1/files/:fileId/content                     controllers.FilesApiController.downloadFile(request: Request, fileId: String)
GET     /v1/files                     controllers.FilesApiController.listFiles(request: Request)
GET     /v1/files/:fileId                     controllers.FilesApiController.retrieveFile(request: Request, fileId: String)

#Functions for FineTuning API
POST     /v1/fine_tuning/jobs/:fineTuningJobId/cancel                     controllers.FineTuningApiController.cancelFineTuningJob(request: Request, fineTuningJobId: String)
POST     /v1/fine_tuning/jobs                     controllers.FineTuningApiController.createFineTuningJob(request: Request)
GET     /v1/fine_tuning/jobs/:fineTuningJobId/events                     controllers.FineTuningApiController.listFineTuningEvents(request: Request, fineTuningJobId: String)
GET     /v1/fine_tuning/jobs/:fineTuningJobId/checkpoints                     controllers.FineTuningApiController.listFineTuningJobCheckpoints(request: Request, fineTuningJobId: String)
GET     /v1/fine_tuning/jobs                     controllers.FineTuningApiController.listPaginatedFineTuningJobs(request: Request)
GET     /v1/fine_tuning/jobs/:fineTuningJobId                     controllers.FineTuningApiController.retrieveFineTuningJob(request: Request, fineTuningJobId: String)

#Functions for Images API
POST     /v1/images/generations                     controllers.ImagesApiController.createImage(request: Request)
POST     /v1/images/edits                     controllers.ImagesApiController.createImageEdit(request: Request)
POST     /v1/images/variations                     controllers.ImagesApiController.createImageVariation(request: Request)

#Functions for Models API
DELETE     /v1/models/:model                     controllers.ModelsApiController.deleteModel(request: Request, model: String)
GET     /v1/models                     controllers.ModelsApiController.listModels(request: Request)
GET     /v1/models/:model                     controllers.ModelsApiController.retrieveModel(request: Request, model: String)

#Functions for Moderations API
POST     /v1/moderations                     controllers.ModerationsApiController.createModeration(request: Request)

# Map static resources from the /public folder to the /assets URL path
GET /assets/*file           controllers.Assets.at(file)
GET /versionedAssets/*file  controllers.Assets.versioned(file)