openapi: 3.0.0
info:
  contact:
    email: blah+oapicf@cliffano.com
    name: Cliffano Subagio
    url: https://github.com/oapicf/openapi-openai
  description: The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference
    for more details.
  license:
    name: MIT
    url: https://github.com/openai/openai-openapi/blob/master/LICENSE
  termsOfService: https://openai.com/policies/terms-of-use
  title: OpenAI API
  version: 2.0.0
servers:
- url: https://api.openai.com/v1
security:
- ApiKeyAuth: []
tags:
- description: Build Assistants that can call models and use tools.
  name: Assistants
- description: Learn how to turn audio into text or text into audio.
  name: Audio
- description: "Given a list of messages comprising a conversation, the model will\
    \ return a response."
  name: Chat
- description: "Given a prompt, the model will return one or more predicted completions,\
    \ and can also return the probabilities of alternative tokens at each position."
  name: Completions
- description: Get a vector representation of a given input that can be easily consumed
    by machine learning models and algorithms.
  name: Embeddings
- description: Manage fine-tuning jobs to tailor a model to your specific training
    data.
  name: Fine-tuning
- description: Files are used to upload documents that can be used with features like
    Assistants and Fine-tuning.
  name: Files
- description: "Given a prompt and/or an input image, the model will generate a new\
    \ image."
  name: Images
- description: List and describe the various models available in the API.
  name: Models
- description: "Given a input text, outputs if the model classifies it as potentially\
    \ harmful."
  name: Moderations
paths:
  /chat/completions:
    post:
      operationId: createChatCompletion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChatCompletionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionResponse'
          description: OK
      summary: Creates a model response for the given chat conversation.
      tags:
      - Chat
      x-oaiMeta:
        name: Create chat completion
        group: chat
        returns: |
          Returns a [chat completion](/docs/api-reference/chat/object) object, or a streamed sequence of [chat completion chunk](/docs/api-reference/chat/streaming) objects if the request is streamed.
        path: create
        examples:
        - title: Default
          request:
            curl: |
              curl https://api.openai.com/v1/chat/completions \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -d '{
                  "model": "VAR_model_id",
                  "messages": [
                    {
                      "role": "system",
                      "content": "You are a helpful assistant."
                    },
                    {
                      "role": "user",
                      "content": "Hello!"
                    }
                  ]
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              completion = client.chat.completions.create(
                model="VAR_model_id",
                messages=[
                  {"role": "system", "content": "You are a helpful assistant."},
                  {"role": "user", "content": "Hello!"}
                ]
              )

              print(completion.choices[0].message)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const completion = await openai.chat.completions.create({
                  messages: [{ role: "system", content: "You are a helpful assistant." }],
                  model: "VAR_model_id",
                });

                console.log(completion.choices[0]);
              }

              main();
          response: |
            {
              "id": "chatcmpl-123",
              "object": "chat.completion",
              "created": 1677652288,
              "model": "gpt-3.5-turbo-0125",
              "system_fingerprint": "fp_44709d6fcb",
              "choices": [{
                "index": 0,
                "message": {
                  "role": "assistant",
                  "content": "\n\nHello there, how may I assist you today?",
                },
                "logprobs": null,
                "finish_reason": "stop"
              }],
              "usage": {
                "prompt_tokens": 9,
                "completion_tokens": 12,
                "total_tokens": 21
              }
            }
        - title: Image input
          request:
            curl: |
              curl https://api.openai.com/v1/chat/completions \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -d '{
                  "model": "gpt-4-turbo",
                  "messages": [
                    {
                      "role": "user",
                      "content": [
                        {
                          "type": "text",
                          "text": "What'\''s in this image?"
                        },
                        {
                          "type": "image_url",
                          "image_url": {
                            "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"
                          }
                        }
                      ]
                    }
                  ],
                  "max_tokens": 300
                }'
            python: |
              from openai import OpenAI

              client = OpenAI()

              response = client.chat.completions.create(
                  model="gpt-4-turbo",
                  messages=[
                      {
                          "role": "user",
                          "content": [
                              {"type": "text", "text": "What's in this image?"},
                              {
                                  "type": "image_url",
                                  "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
                              },
                          ],
                      }
                  ],
                  max_tokens=300,
              )

              print(response.choices[0])
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const response = await openai.chat.completions.create({
                  model: "gpt-4-turbo",
                  messages: [
                    {
                      role: "user",
                      content: [
                        { type: "text", text: "What's in this image?" },
                        {
                          type: "image_url",
                          image_url:
                            "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
                        },
                      ],
                    },
                  ],
                });
                console.log(response.choices[0]);
              }
              main();
          response: |
            {
              "id": "chatcmpl-123",
              "object": "chat.completion",
              "created": 1677652288,
              "model": "gpt-3.5-turbo-0125",
              "system_fingerprint": "fp_44709d6fcb",
              "choices": [{
                "index": 0,
                "message": {
                  "role": "assistant",
                  "content": "\n\nThis image shows a wooden boardwalk extending through a lush green marshland.",
                },
                "logprobs": null,
                "finish_reason": "stop"
              }],
              "usage": {
                "prompt_tokens": 9,
                "completion_tokens": 12,
                "total_tokens": 21
              }
            }
        - title: Streaming
          request:
            curl: |
              curl https://api.openai.com/v1/chat/completions \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -d '{
                  "model": "VAR_model_id",
                  "messages": [
                    {
                      "role": "system",
                      "content": "You are a helpful assistant."
                    },
                    {
                      "role": "user",
                      "content": "Hello!"
                    }
                  ],
                  "stream": true
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              completion = client.chat.completions.create(
                model="VAR_model_id",
                messages=[
                  {"role": "system", "content": "You are a helpful assistant."},
                  {"role": "user", "content": "Hello!"}
                ],
                stream=True
              )

              for chunk in completion:
                print(chunk.choices[0].delta)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const completion = await openai.chat.completions.create({
                  model: "VAR_model_id",
                  messages: [
                    {"role": "system", "content": "You are a helpful assistant."},
                    {"role": "user", "content": "Hello!"}
                  ],
                  stream: true,
                });

                for await (const chunk of completion) {
                  console.log(chunk.choices[0].delta.content);
                }
              }

              main();
          response: |
            {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0125", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"role":"assistant","content":""},"logprobs":null,"finish_reason":null}]}

            {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0125", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"Hello"},"logprobs":null,"finish_reason":null}]}

            ....

            {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0125", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{},"logprobs":null,"finish_reason":"stop"}]}
        - title: Functions
          request:
            curl: |
              curl https://api.openai.com/v1/chat/completions \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4-turbo",
                "messages": [
                  {
                    "role": "user",
                    "content": "What'\''s the weather like in Boston today?"
                  }
                ],
                "tools": [
                  {
                    "type": "function",
                    "function": {
                      "name": "get_current_weather",
                      "description": "Get the current weather in a given location",
                      "parameters": {
                        "type": "object",
                        "properties": {
                          "location": {
                            "type": "string",
                            "description": "The city and state, e.g. San Francisco, CA"
                          },
                          "unit": {
                            "type": "string",
                            "enum": ["celsius", "fahrenheit"]
                          }
                        },
                        "required": ["location"]
                      }
                    }
                  }
                ],
                "tool_choice": "auto"
              }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              tools = [
                {
                  "type": "function",
                  "function": {
                    "name": "get_current_weather",
                    "description": "Get the current weather in a given location",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "location": {
                          "type": "string",
                          "description": "The city and state, e.g. San Francisco, CA",
                        },
                        "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                      },
                      "required": ["location"],
                    },
                  }
                }
              ]
              messages = [{"role": "user", "content": "What's the weather like in Boston today?"}]
              completion = client.chat.completions.create(
                model="VAR_model_id",
                messages=messages,
                tools=tools,
                tool_choice="auto"
              )

              print(completion)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const messages = [{"role": "user", "content": "What's the weather like in Boston today?"}];
                const tools = [
                    {
                      "type": "function",
                      "function": {
                        "name": "get_current_weather",
                        "description": "Get the current weather in a given location",
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "location": {
                              "type": "string",
                              "description": "The city and state, e.g. San Francisco, CA",
                            },
                            "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                          },
                          "required": ["location"],
                        },
                      }
                    }
                ];

                const response = await openai.chat.completions.create({
                  model: "gpt-4-turbo",
                  messages: messages,
                  tools: tools,
                  tool_choice: "auto",
                });

                console.log(response);
              }

              main();
          response: |
            {
              "id": "chatcmpl-abc123",
              "object": "chat.completion",
              "created": 1699896916,
              "model": "gpt-3.5-turbo-0125",
              "choices": [
                {
                  "index": 0,
                  "message": {
                    "role": "assistant",
                    "content": null,
                    "tool_calls": [
                      {
                        "id": "call_abc123",
                        "type": "function",
                        "function": {
                          "name": "get_current_weather",
                          "arguments": "{\n\"location\": \"Boston, MA\"\n}"
                        }
                      }
                    ]
                  },
                  "logprobs": null,
                  "finish_reason": "tool_calls"
                }
              ],
              "usage": {
                "prompt_tokens": 82,
                "completion_tokens": 17,
                "total_tokens": 99
              }
            }
        - title: Logprobs
          request:
            curl: |
              curl https://api.openai.com/v1/chat/completions \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -d '{
                  "model": "VAR_model_id",
                  "messages": [
                    {
                      "role": "user",
                      "content": "Hello!"
                    }
                  ],
                  "logprobs": true,
                  "top_logprobs": 2
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              completion = client.chat.completions.create(
                model="VAR_model_id",
                messages=[
                  {"role": "user", "content": "Hello!"}
                ],
                logprobs=True,
                top_logprobs=2
              )

              print(completion.choices[0].message)
              print(completion.choices[0].logprobs)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const completion = await openai.chat.completions.create({
                  messages: [{ role: "user", content: "Hello!" }],
                  model: "VAR_model_id",
                  logprobs: true,
                  top_logprobs: 2,
                });

                console.log(completion.choices[0]);
              }

              main();
          response: |
            {
              "id": "chatcmpl-123",
              "object": "chat.completion",
              "created": 1702685778,
              "model": "gpt-3.5-turbo-0125",
              "choices": [
                {
                  "index": 0,
                  "message": {
                    "role": "assistant",
                    "content": "Hello! How can I assist you today?"
                  },
                  "logprobs": {
                    "content": [
                      {
                        "token": "Hello",
                        "logprob": -0.31725305,
                        "bytes": [72, 101, 108, 108, 111],
                        "top_logprobs": [
                          {
                            "token": "Hello",
                            "logprob": -0.31725305,
                            "bytes": [72, 101, 108, 108, 111]
                          },
                          {
                            "token": "Hi",
                            "logprob": -1.3190403,
                            "bytes": [72, 105]
                          }
                        ]
                      },
                      {
                        "token": "!",
                        "logprob": -0.02380986,
                        "bytes": [
                          33
                        ],
                        "top_logprobs": [
                          {
                            "token": "!",
                            "logprob": -0.02380986,
                            "bytes": [33]
                          },
                          {
                            "token": " there",
                            "logprob": -3.787621,
                            "bytes": [32, 116, 104, 101, 114, 101]
                          }
                        ]
                      },
                      {
                        "token": " How",
                        "logprob": -0.000054669687,
                        "bytes": [32, 72, 111, 119],
                        "top_logprobs": [
                          {
                            "token": " How",
                            "logprob": -0.000054669687,
                            "bytes": [32, 72, 111, 119]
                          },
                          {
                            "token": "<|end|>",
                            "logprob": -10.953937,
                            "bytes": null
                          }
                        ]
                      },
                      {
                        "token": " can",
                        "logprob": -0.015801601,
                        "bytes": [32, 99, 97, 110],
                        "top_logprobs": [
                          {
                            "token": " can",
                            "logprob": -0.015801601,
                            "bytes": [32, 99, 97, 110]
                          },
                          {
                            "token": " may",
                            "logprob": -4.161023,
                            "bytes": [32, 109, 97, 121]
                          }
                        ]
                      },
                      {
                        "token": " I",
                        "logprob": -3.7697225e-6,
                        "bytes": [
                          32,
                          73
                        ],
                        "top_logprobs": [
                          {
                            "token": " I",
                            "logprob": -3.7697225e-6,
                            "bytes": [32, 73]
                          },
                          {
                            "token": " assist",
                            "logprob": -13.596657,
                            "bytes": [32, 97, 115, 115, 105, 115, 116]
                          }
                        ]
                      },
                      {
                        "token": " assist",
                        "logprob": -0.04571125,
                        "bytes": [32, 97, 115, 115, 105, 115, 116],
                        "top_logprobs": [
                          {
                            "token": " assist",
                            "logprob": -0.04571125,
                            "bytes": [32, 97, 115, 115, 105, 115, 116]
                          },
                          {
                            "token": " help",
                            "logprob": -3.1089056,
                            "bytes": [32, 104, 101, 108, 112]
                          }
                        ]
                      },
                      {
                        "token": " you",
                        "logprob": -5.4385737e-6,
                        "bytes": [32, 121, 111, 117],
                        "top_logprobs": [
                          {
                            "token": " you",
                            "logprob": -5.4385737e-6,
                            "bytes": [32, 121, 111, 117]
                          },
                          {
                            "token": " today",
                            "logprob": -12.807695,
                            "bytes": [32, 116, 111, 100, 97, 121]
                          }
                        ]
                      },
                      {
                        "token": " today",
                        "logprob": -0.0040071653,
                        "bytes": [32, 116, 111, 100, 97, 121],
                        "top_logprobs": [
                          {
                            "token": " today",
                            "logprob": -0.0040071653,
                            "bytes": [32, 116, 111, 100, 97, 121]
                          },
                          {
                            "token": "?",
                            "logprob": -5.5247097,
                            "bytes": [63]
                          }
                        ]
                      },
                      {
                        "token": "?",
                        "logprob": -0.0008108172,
                        "bytes": [63],
                        "top_logprobs": [
                          {
                            "token": "?",
                            "logprob": -0.0008108172,
                            "bytes": [63]
                          },
                          {
                            "token": "?\n",
                            "logprob": -7.184561,
                            "bytes": [63, 10]
                          }
                        ]
                      }
                    ]
                  },
                  "finish_reason": "stop"
                }
              ],
              "usage": {
                "prompt_tokens": 9,
                "completion_tokens": 9,
                "total_tokens": 18
              },
              "system_fingerprint": null
            }
      x-content-type: application/json
      x-accepts: application/json
  /completions:
    post:
      operationId: createCompletion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompletionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCompletionResponse'
          description: OK
      summary: Creates a completion for the provided prompt and parameters.
      tags:
      - Completions
      x-oaiMeta:
        name: Create completion
        group: completions
        returns: |
          Returns a [completion](/docs/api-reference/completions/object) object, or a sequence of completion objects if the request is streamed.
        legacy: true
        examples:
        - title: No streaming
          request:
            curl: |
              curl https://api.openai.com/v1/completions \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -d '{
                  "model": "VAR_model_id",
                  "prompt": "Say this is a test",
                  "max_tokens": 7,
                  "temperature": 0
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.completions.create(
                model="VAR_model_id",
                prompt="Say this is a test",
                max_tokens=7,
                temperature=0
              )
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const completion = await openai.completions.create({
                  model: "VAR_model_id",
                  prompt: "Say this is a test.",
                  max_tokens: 7,
                  temperature: 0,
                });

                console.log(completion);
              }
              main();
          response: |
            {
              "id": "cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7",
              "object": "text_completion",
              "created": 1589478378,
              "model": "VAR_model_id",
              "system_fingerprint": "fp_44709d6fcb",
              "choices": [
                {
                  "text": "\n\nThis is indeed a test",
                  "index": 0,
                  "logprobs": null,
                  "finish_reason": "length"
                }
              ],
              "usage": {
                "prompt_tokens": 5,
                "completion_tokens": 7,
                "total_tokens": 12
              }
            }
        - title: Streaming
          request:
            curl: |
              curl https://api.openai.com/v1/completions \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -d '{
                  "model": "VAR_model_id",
                  "prompt": "Say this is a test",
                  "max_tokens": 7,
                  "temperature": 0,
                  "stream": true
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              for chunk in client.completions.create(
                model="VAR_model_id",
                prompt="Say this is a test",
                max_tokens=7,
                temperature=0,
                stream=True
              ):
                print(chunk.choices[0].text)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const stream = await openai.completions.create({
                  model: "VAR_model_id",
                  prompt: "Say this is a test.",
                  stream: true,
                });

                for await (const chunk of stream) {
                  console.log(chunk.choices[0].text)
                }
              }
              main();
          response: |
            {
              "id": "cmpl-7iA7iJjj8V2zOkCGvWF2hAkDWBQZe",
              "object": "text_completion",
              "created": 1690759702,
              "choices": [
                {
                  "text": "This",
                  "index": 0,
                  "logprobs": null,
                  "finish_reason": null
                }
              ],
              "model": "gpt-3.5-turbo-instruct"
              "system_fingerprint": "fp_44709d6fcb",
            }
      x-content-type: application/json
      x-accepts: application/json
  /images/generations:
    post:
      operationId: createImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateImageRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
          description: OK
      summary: Creates an image given a prompt.
      tags:
      - Images
      x-oaiMeta:
        name: Create image
        group: images
        returns: "Returns a list of [image](/docs/api-reference/images/object) objects."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/images/generations \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -d '{
                  "model": "dall-e-3",
                  "prompt": "A cute baby sea otter",
                  "n": 1,
                  "size": "1024x1024"
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.images.generate(
                model="dall-e-3",
                prompt="A cute baby sea otter",
                n=1,
                size="1024x1024"
              )
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const image = await openai.images.generate({ model: "dall-e-3", prompt: "A cute baby sea otter" });

                console.log(image.data);
              }
              main();
          response: |
            {
              "created": 1589478378,
              "data": [
                {
                  "url": "https://..."
                },
                {
                  "url": "https://..."
                }
              ]
            }
      x-content-type: application/json
      x-accepts: application/json
  /images/edits:
    post:
      operationId: createImageEdit
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateImageEditRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
          description: OK
      summary: Creates an edited or extended image given an original image and a prompt.
      tags:
      - Images
      x-oaiMeta:
        name: Create image edit
        group: images
        returns: "Returns a list of [image](/docs/api-reference/images/object) objects."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/images/edits \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -F image="@otter.png" \
                -F mask="@mask.png" \
                -F prompt="A cute baby sea otter wearing a beret" \
                -F n=2 \
                -F size="1024x1024"
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.images.edit(
                image=open("otter.png", "rb"),
                mask=open("mask.png", "rb"),
                prompt="A cute baby sea otter wearing a beret",
                n=2,
                size="1024x1024"
              )
            node.js: |-
              import fs from "fs";
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const image = await openai.images.edit({
                  image: fs.createReadStream("otter.png"),
                  mask: fs.createReadStream("mask.png"),
                  prompt: "A cute baby sea otter wearing a beret",
                });

                console.log(image.data);
              }
              main();
          response: |
            {
              "created": 1589478378,
              "data": [
                {
                  "url": "https://..."
                },
                {
                  "url": "https://..."
                }
              ]
            }
      x-content-type: multipart/form-data
      x-accepts: application/json
  /images/variations:
    post:
      operationId: createImageVariation
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateImageVariationRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
          description: OK
      summary: Creates a variation of a given image.
      tags:
      - Images
      x-oaiMeta:
        name: Create image variation
        group: images
        returns: "Returns a list of [image](/docs/api-reference/images/object) objects."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/images/variations \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -F image="@otter.png" \
                -F n=2 \
                -F size="1024x1024"
            python: |
              from openai import OpenAI
              client = OpenAI()

              response = client.images.create_variation(
                image=open("image_edit_original.png", "rb"),
                n=2,
                size="1024x1024"
              )
            node.js: |-
              import fs from "fs";
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const image = await openai.images.createVariation({
                  image: fs.createReadStream("otter.png"),
                });

                console.log(image.data);
              }
              main();
          response: |
            {
              "created": 1589478378,
              "data": [
                {
                  "url": "https://..."
                },
                {
                  "url": "https://..."
                }
              ]
            }
      x-content-type: multipart/form-data
      x-accepts: application/json
  /embeddings:
    post:
      operationId: createEmbedding
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmbeddingRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEmbeddingResponse'
          description: OK
      summary: Creates an embedding vector representing the input text.
      tags:
      - Embeddings
      x-oaiMeta:
        name: Create embeddings
        group: embeddings
        returns: "A list of [embedding](/docs/api-reference/embeddings/object) objects."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/embeddings \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -d '{
                  "input": "The food was delicious and the waiter...",
                  "model": "text-embedding-ada-002",
                  "encoding_format": "float"
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.embeddings.create(
                model="text-embedding-ada-002",
                input="The food was delicious and the waiter...",
                encoding_format="float"
              )
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const embedding = await openai.embeddings.create({
                  model: "text-embedding-ada-002",
                  input: "The quick brown fox jumped over the lazy dog",
                  encoding_format: "float",
                });

                console.log(embedding);
              }

              main();
          response: |
            {
              "object": "list",
              "data": [
                {
                  "object": "embedding",
                  "embedding": [
                    0.0023064255,
                    -0.009327292,
                    .... (1536 floats total for ada-002)
                    -0.0028842222,
                  ],
                  "index": 0
                }
              ],
              "model": "text-embedding-ada-002",
              "usage": {
                "prompt_tokens": 8,
                "total_tokens": 8
              }
            }
      x-content-type: application/json
      x-accepts: application/json
  /audio/speech:
    post:
      operationId: createSpeech
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSpeechRequest'
        required: true
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: OK
          headers:
            Transfer-Encoding:
              description: chunked
              explode: false
              schema:
                type: string
              style: simple
      summary: Generates audio from the input text.
      tags:
      - Audio
      x-oaiMeta:
        name: Create speech
        group: audio
        returns: The audio file content.
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/audio/speech \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -d '{
                  "model": "tts-1",
                  "input": "The quick brown fox jumped over the lazy dog.",
                  "voice": "alloy"
                }' \
                --output speech.mp3
            python: |
              from pathlib import Path
              import openai

              speech_file_path = Path(__file__).parent / "speech.mp3"
              response = openai.audio.speech.create(
                model="tts-1",
                voice="alloy",
                input="The quick brown fox jumped over the lazy dog."
              )
              response.stream_to_file(speech_file_path)
            node: |
              import fs from "fs";
              import path from "path";
              import OpenAI from "openai";

              const openai = new OpenAI();

              const speechFile = path.resolve("./speech.mp3");

              async function main() {
                const mp3 = await openai.audio.speech.create({
                  model: "tts-1",
                  voice: "alloy",
                  input: "Today is a wonderful day to build something people love!",
                });
                console.log(speechFile);
                const buffer = Buffer.from(await mp3.arrayBuffer());
                await fs.promises.writeFile(speechFile, buffer);
              }
              main();
      x-content-type: application/json
      x-accepts: application/octet-stream
  /audio/transcriptions:
    post:
      operationId: createTranscription
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTranscriptionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createTranscription_200_response'
          description: OK
      summary: Transcribes audio into the input language.
      tags:
      - Audio
      x-oaiMeta:
        name: Create transcription
        group: audio
        returns: "The [transcription object](/docs/api-reference/audio/json-object)\
          \ or a [verbose transcription object](/docs/api-reference/audio/verbose-json-object)."
        examples:
        - title: Default
          request:
            curl: |
              curl https://api.openai.com/v1/audio/transcriptions \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: multipart/form-data" \
                -F file="@/path/to/file/audio.mp3" \
                -F model="whisper-1"
            python: |
              from openai import OpenAI
              client = OpenAI()

              audio_file = open("speech.mp3", "rb")
              transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file
              )
            node: |
              import fs from "fs";
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const transcription = await openai.audio.transcriptions.create({
                  file: fs.createReadStream("audio.mp3"),
                  model: "whisper-1",
                });

                console.log(transcription.text);
              }
              main();
          response: |
            {
              "text": "Imagine the wildest idea that you've ever had, and you're curious about how it might scale to something that's a 100, a 1,000 times bigger. This is a place where you can get to do that."
            }
        - title: Word timestamps
          request:
            curl: |
              curl https://api.openai.com/v1/audio/transcriptions \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: multipart/form-data" \
                -F file="@/path/to/file/audio.mp3" \
                -F "timestamp_granularities[]=word" \
                -F model="whisper-1" \
                -F response_format="verbose_json"
            python: |
              from openai import OpenAI
              client = OpenAI()

              audio_file = open("speech.mp3", "rb")
              transcript = client.audio.transcriptions.create(
                file=audio_file,
                model="whisper-1",
                response_format="verbose_json",
                timestamp_granularities=["word"]
              )

              print(transcript.words)
            node: |
              import fs from "fs";
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const transcription = await openai.audio.transcriptions.create({
                  file: fs.createReadStream("audio.mp3"),
                  model: "whisper-1",
                  response_format: "verbose_json",
                  timestamp_granularities: ["word"]
                });

                console.log(transcription.text);
              }
              main();
          response: |
            {
              "task": "transcribe",
              "language": "english",
              "duration": 8.470000267028809,
              "text": "The beach was a popular spot on a hot summer day. People were swimming in the ocean, building sandcastles, and playing beach volleyball.",
              "words": [
                {
                  "word": "The",
                  "start": 0.0,
                  "end": 0.23999999463558197
                },
                ...
                {
                  "word": "volleyball",
                  "start": 7.400000095367432,
                  "end": 7.900000095367432
                }
              ]
            }
        - title: Segment timestamps
          request:
            curl: |
              curl https://api.openai.com/v1/audio/transcriptions \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: multipart/form-data" \
                -F file="@/path/to/file/audio.mp3" \
                -F "timestamp_granularities[]=segment" \
                -F model="whisper-1" \
                -F response_format="verbose_json"
            python: |
              from openai import OpenAI
              client = OpenAI()

              audio_file = open("speech.mp3", "rb")
              transcript = client.audio.transcriptions.create(
                file=audio_file,
                model="whisper-1",
                response_format="verbose_json",
                timestamp_granularities=["segment"]
              )

              print(transcript.words)
            node: |
              import fs from "fs";
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const transcription = await openai.audio.transcriptions.create({
                  file: fs.createReadStream("audio.mp3"),
                  model: "whisper-1",
                  response_format: "verbose_json",
                  timestamp_granularities: ["segment"]
                });

                console.log(transcription.text);
              }
              main();
          response: |
            {
              "task": "transcribe",
              "language": "english",
              "duration": 8.470000267028809,
              "text": "The beach was a popular spot on a hot summer day. People were swimming in the ocean, building sandcastles, and playing beach volleyball.",
              "segments": [
                {
                  "id": 0,
                  "seek": 0,
                  "start": 0.0,
                  "end": 3.319999933242798,
                  "text": " The beach was a popular spot on a hot summer day.",
                  "tokens": [
                    50364, 440, 7534, 390, 257, 3743, 4008, 322, 257, 2368, 4266, 786, 13, 50530
                  ],
                  "temperature": 0.0,
                  "avg_logprob": -0.2860786020755768,
                  "compression_ratio": 1.2363636493682861,
                  "no_speech_prob": 0.00985979475080967
                },
                ...
              ]
            }
      x-content-type: multipart/form-data
      x-accepts: application/json
  /audio/translations:
    post:
      operationId: createTranslation
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTranslationRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createTranslation_200_response'
          description: OK
      summary: Translates audio into English.
      tags:
      - Audio
      x-oaiMeta:
        name: Create translation
        group: audio
        returns: The translated text.
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/audio/translations \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: multipart/form-data" \
                -F file="@/path/to/file/german.m4a" \
                -F model="whisper-1"
            python: |
              from openai import OpenAI
              client = OpenAI()

              audio_file = open("speech.mp3", "rb")
              transcript = client.audio.translations.create(
                model="whisper-1",
                file=audio_file
              )
            node: |
              import fs from "fs";
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                  const translation = await openai.audio.translations.create({
                      file: fs.createReadStream("speech.mp3"),
                      model: "whisper-1",
                  });

                  console.log(translation.text);
              }
              main();
          response: |
            {
              "text": "Hello, my name is Wolfgang and I come from Germany. Where are you heading today?"
            }
      x-content-type: multipart/form-data
      x-accepts: application/json
  /files:
    get:
      operationId: listFiles
      parameters:
      - description: Only return files with the given purpose.
        explode: true
        in: query
        name: purpose
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFilesResponse'
          description: OK
      summary: Returns a list of files that belong to the user's organization.
      tags:
      - Files
      x-oaiMeta:
        name: List files
        group: files
        returns: "A list of [File](/docs/api-reference/files/object) objects."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/files \
                -H "Authorization: Bearer $OPENAI_API_KEY"
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.files.list()
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const list = await openai.files.list();

                for await (const file of list) {
                  console.log(file);
                }
              }

              main();
          response: |
            {
              "data": [
                {
                  "id": "file-abc123",
                  "object": "file",
                  "bytes": 175,
                  "created_at": 1613677385,
                  "filename": "salesOverview.pdf",
                  "purpose": "assistants",
                },
                {
                  "id": "file-abc123",
                  "object": "file",
                  "bytes": 140,
                  "created_at": 1613779121,
                  "filename": "puppy.jsonl",
                  "purpose": "fine-tune",
                }
              ],
              "object": "list"
            }
      x-accepts: application/json
    post:
      operationId: createFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateFileRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIFile'
          description: OK
      summary: |
        Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.

        The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.

        Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
      tags:
      - Files
      x-oaiMeta:
        name: Upload file
        group: files
        returns: "The uploaded [File](/docs/api-reference/files/object) object."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/files \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -F purpose="fine-tune" \
                -F file="@mydata.jsonl"
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.files.create(
                file=open("mydata.jsonl", "rb"),
                purpose="fine-tune"
              )
            node.js: |-
              import fs from "fs";
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const file = await openai.files.create({
                  file: fs.createReadStream("mydata.jsonl"),
                  purpose: "fine-tune",
                });

                console.log(file);
              }

              main();
          response: |
            {
              "id": "file-abc123",
              "object": "file",
              "bytes": 120000,
              "created_at": 1677610602,
              "filename": "mydata.jsonl",
              "purpose": "fine-tune",
            }
      x-content-type: multipart/form-data
      x-accepts: application/json
  /files/{file_id}:
    delete:
      operationId: deleteFile
      parameters:
      - description: The ID of the file to use for this request.
        explode: false
        in: path
        name: file_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFileResponse'
          description: OK
      summary: Delete a file.
      tags:
      - Files
      x-oaiMeta:
        name: Delete file
        group: files
        returns: Deletion status.
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/files/file-abc123 \
                -X DELETE \
                -H "Authorization: Bearer $OPENAI_API_KEY"
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.files.delete("file-abc123")
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const file = await openai.files.del("file-abc123");

                console.log(file);
              }

              main();
          response: |
            {
              "id": "file-abc123",
              "object": "file",
              "deleted": true
            }
      x-accepts: application/json
    get:
      operationId: retrieveFile
      parameters:
      - description: The ID of the file to use for this request.
        explode: false
        in: path
        name: file_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIFile'
          description: OK
      summary: Returns information about a specific file.
      tags:
      - Files
      x-oaiMeta:
        name: Retrieve file
        group: files
        returns: "The [File](/docs/api-reference/files/object) object matching the\
          \ specified ID."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/files/file-abc123 \
                -H "Authorization: Bearer $OPENAI_API_KEY"
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.files.retrieve("file-abc123")
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const file = await openai.files.retrieve("file-abc123");

                console.log(file);
              }

              main();
          response: |
            {
              "id": "file-abc123",
              "object": "file",
              "bytes": 120000,
              "created_at": 1677610602,
              "filename": "mydata.jsonl",
              "purpose": "fine-tune",
            }
      x-accepts: application/json
  /files/{file_id}/content:
    get:
      operationId: downloadFile
      parameters:
      - description: The ID of the file to use for this request.
        explode: false
        in: path
        name: file_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: OK
      summary: Returns the contents of the specified file.
      tags:
      - Files
      x-oaiMeta:
        name: Retrieve file content
        group: files
        returns: The file content.
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/files/file-abc123/content \
                -H "Authorization: Bearer $OPENAI_API_KEY" > file.jsonl
            python: |
              from openai import OpenAI
              client = OpenAI()

              content = client.files.retrieve_content("file-abc123")
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const file = await openai.files.retrieveContent("file-abc123");

                console.log(file);
              }

              main();
      x-accepts: application/json
  /fine_tuning/jobs:
    get:
      operationId: listPaginatedFineTuningJobs
      parameters:
      - description: Identifier for the last job from the previous pagination request.
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: Number of fine-tuning jobs to retrieve.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPaginatedFineTuningJobsResponse'
          description: OK
      summary: |
        List your organization's fine-tuning jobs
      tags:
      - Fine-tuning
      x-oaiMeta:
        name: List fine-tuning jobs
        group: fine-tuning
        returns: "A list of paginated [fine-tuning job](/docs/api-reference/fine-tuning/object)\
          \ objects."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/fine_tuning/jobs?limit=2 \
                -H "Authorization: Bearer $OPENAI_API_KEY"
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.fine_tuning.jobs.list()
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const list = await openai.fineTuning.jobs.list();

                for await (const fineTune of list) {
                  console.log(fineTune);
                }
              }

              main();
          response: |
            {
              "object": "list",
              "data": [
                {
                  "object": "fine_tuning.job.event",
                  "id": "ft-event-TjX0lMfOniCZX64t9PUQT5hn",
                  "created_at": 1689813489,
                  "level": "warn",
                  "message": "Fine tuning process stopping due to job cancellation",
                  "data": null,
                  "type": "message"
                },
                { ... },
                { ... }
              ], "has_more": true
            }
      x-accepts: application/json
    post:
      operationId: createFineTuningJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFineTuningJobRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FineTuningJob'
          description: OK
      summary: |
        Creates a fine-tuning job which begins the process of creating a new model from a given dataset.

        Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.

        [Learn more about fine-tuning](/docs/guides/fine-tuning)
      tags:
      - Fine-tuning
      x-oaiMeta:
        name: Create fine-tuning job
        group: fine-tuning
        returns: "A [fine-tuning.job](/docs/api-reference/fine-tuning/object) object."
        examples:
        - title: Default
          request:
            curl: |
              curl https://api.openai.com/v1/fine_tuning/jobs \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -d '{
                  "training_file": "file-BK7bzQj3FfZFXr7DbL6xJwfo",
                  "model": "gpt-3.5-turbo"
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.fine_tuning.jobs.create(
                training_file="file-abc123",
                model="gpt-3.5-turbo"
              )
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const fineTune = await openai.fineTuning.jobs.create({
                  training_file: "file-abc123"
                });

                console.log(fineTune);
              }

              main();
          response: |
            {
              "object": "fine_tuning.job",
              "id": "ftjob-abc123",
              "model": "gpt-3.5-turbo-0125",
              "created_at": 1614807352,
              "fine_tuned_model": null,
              "organization_id": "org-123",
              "result_files": [],
              "status": "queued",
              "validation_file": null,
              "training_file": "file-abc123",
            }
        - title: Epochs
          request:
            curl: |
              curl https://api.openai.com/v1/fine_tuning/jobs \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -d '{
                  "training_file": "file-abc123",
                  "model": "gpt-3.5-turbo",
                  "hyperparameters": {
                    "n_epochs": 2
                  }
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.fine_tuning.jobs.create(
                training_file="file-abc123",
                model="gpt-3.5-turbo",
                hyperparameters={
                  "n_epochs":2
                }
              )
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const fineTune = await openai.fineTuning.jobs.create({
                  training_file: "file-abc123",
                  model: "gpt-3.5-turbo",
                  hyperparameters: { n_epochs: 2 }
                });

                console.log(fineTune);
              }

              main();
          response: |
            {
              "object": "fine_tuning.job",
              "id": "ftjob-abc123",
              "model": "gpt-3.5-turbo-0125",
              "created_at": 1614807352,
              "fine_tuned_model": null,
              "organization_id": "org-123",
              "result_files": [],
              "status": "queued",
              "validation_file": null,
              "training_file": "file-abc123",
              "hyperparameters": {"n_epochs": 2},
            }
        - title: Validation file
          request:
            curl: |
              curl https://api.openai.com/v1/fine_tuning/jobs \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -d '{
                  "training_file": "file-abc123",
                  "validation_file": "file-abc123",
                  "model": "gpt-3.5-turbo"
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.fine_tuning.jobs.create(
                training_file="file-abc123",
                validation_file="file-def456",
                model="gpt-3.5-turbo"
              )
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const fineTune = await openai.fineTuning.jobs.create({
                  training_file: "file-abc123",
                  validation_file: "file-abc123"
                });

                console.log(fineTune);
              }

              main();
          response: |
            {
              "object": "fine_tuning.job",
              "id": "ftjob-abc123",
              "model": "gpt-3.5-turbo-0125",
              "created_at": 1614807352,
              "fine_tuned_model": null,
              "organization_id": "org-123",
              "result_files": [],
              "status": "queued",
              "validation_file": "file-abc123",
              "training_file": "file-abc123",
            }
        - title: W&B Integration
          request:
            curl: |
              curl https://api.openai.com/v1/fine_tuning/jobs \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -d '{
                  "training_file": "file-abc123",
                  "validation_file": "file-abc123",
                  "model": "gpt-3.5-turbo",
                  "integrations": [
                    {
                      "type": "wandb",
                      "wandb": {
                        "project": "my-wandb-project",
                        "name": "ft-run-display-name"
                        "tags": [
                          "first-experiment", "v2"
                        ]
                      }
                    }
                  ]
                }'
          response: |
            {
              "object": "fine_tuning.job",
              "id": "ftjob-abc123",
              "model": "gpt-3.5-turbo-0125",
              "created_at": 1614807352,
              "fine_tuned_model": null,
              "organization_id": "org-123",
              "result_files": [],
              "status": "queued",
              "validation_file": "file-abc123",
              "training_file": "file-abc123",
              "integrations": [
                {
                  "type": "wandb",
                  "wandb": {
                    "project": "my-wandb-project",
                    "entity": None,
                    "run_id": "ftjob-abc123"
                  }
                }
              ]
            }
      x-content-type: application/json
      x-accepts: application/json
  /fine_tuning/jobs/{fine_tuning_job_id}:
    get:
      operationId: retrieveFineTuningJob
      parameters:
      - description: |
          The ID of the fine-tuning job.
        explode: false
        in: path
        name: fine_tuning_job_id
        required: true
        schema:
          example: ft-AF1WoRqd3aJAHsqc9NY7iL8F
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FineTuningJob'
          description: OK
      summary: |
        Get info about a fine-tuning job.

        [Learn more about fine-tuning](/docs/guides/fine-tuning)
      tags:
      - Fine-tuning
      x-oaiMeta:
        name: Retrieve fine-tuning job
        group: fine-tuning
        returns: "The [fine-tuning](/docs/api-reference/fine-tuning/object) object\
          \ with the given ID."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/fine_tuning/jobs/ft-AF1WoRqd3aJAHsqc9NY7iL8F \
                -H "Authorization: Bearer $OPENAI_API_KEY"
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.fine_tuning.jobs.retrieve("ftjob-abc123")
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const fineTune = await openai.fineTuning.jobs.retrieve("ftjob-abc123");

                console.log(fineTune);
              }

              main();
          response: |
            {
              "object": "fine_tuning.job",
              "id": "ftjob-abc123",
              "model": "davinci-002",
              "created_at": 1692661014,
              "finished_at": 1692661190,
              "fine_tuned_model": "ft:davinci-002:my-org:custom_suffix:7q8mpxmy",
              "organization_id": "org-123",
              "result_files": [
                  "file-abc123"
              ],
              "status": "succeeded",
              "validation_file": null,
              "training_file": "file-abc123",
              "hyperparameters": {
                  "n_epochs": 4,
                  "batch_size": 1,
                  "learning_rate_multiplier": 1.0
              },
              "trained_tokens": 5768,
              "integrations": [],
              "seed": 0
            }
      x-accepts: application/json
  /fine_tuning/jobs/{fine_tuning_job_id}/events:
    get:
      operationId: listFineTuningEvents
      parameters:
      - description: |
          The ID of the fine-tuning job to get events for.
        explode: false
        in: path
        name: fine_tuning_job_id
        required: true
        schema:
          example: ft-AF1WoRqd3aJAHsqc9NY7iL8F
          type: string
        style: simple
      - description: Identifier for the last event from the previous pagination request.
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: Number of events to retrieve.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFineTuningJobEventsResponse'
          description: OK
      summary: |
        Get status updates for a fine-tuning job.
      tags:
      - Fine-tuning
      x-oaiMeta:
        name: List fine-tuning events
        group: fine-tuning
        returns: A list of fine-tuning event objects.
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/fine_tuning/jobs/ftjob-abc123/events \
                -H "Authorization: Bearer $OPENAI_API_KEY"
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.fine_tuning.jobs.list_events(
                fine_tuning_job_id="ftjob-abc123",
                limit=2
              )
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const list = await openai.fineTuning.list_events(id="ftjob-abc123", limit=2);

                for await (const fineTune of list) {
                  console.log(fineTune);
                }
              }

              main();
          response: |
            {
              "object": "list",
              "data": [
                {
                  "object": "fine_tuning.job.event",
                  "id": "ft-event-ddTJfwuMVpfLXseO0Am0Gqjm",
                  "created_at": 1692407401,
                  "level": "info",
                  "message": "Fine tuning job successfully completed",
                  "data": null,
                  "type": "message"
                },
                {
                  "object": "fine_tuning.job.event",
                  "id": "ft-event-tyiGuB72evQncpH87xe505Sv",
                  "created_at": 1692407400,
                  "level": "info",
                  "message": "New fine-tuned model created: ft:gpt-3.5-turbo:openai::7p4lURel",
                  "data": null,
                  "type": "message"
                }
              ],
              "has_more": true
            }
      x-accepts: application/json
  /fine_tuning/jobs/{fine_tuning_job_id}/cancel:
    post:
      operationId: cancelFineTuningJob
      parameters:
      - description: |
          The ID of the fine-tuning job to cancel.
        explode: false
        in: path
        name: fine_tuning_job_id
        required: true
        schema:
          example: ft-AF1WoRqd3aJAHsqc9NY7iL8F
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FineTuningJob'
          description: OK
      summary: |
        Immediately cancel a fine-tune job.
      tags:
      - Fine-tuning
      x-oaiMeta:
        name: Cancel fine-tuning
        group: fine-tuning
        returns: "The cancelled [fine-tuning](/docs/api-reference/fine-tuning/object)\
          \ object."
        examples:
          request:
            curl: |
              curl -X POST https://api.openai.com/v1/fine_tuning/jobs/ftjob-abc123/cancel \
                -H "Authorization: Bearer $OPENAI_API_KEY"
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.fine_tuning.jobs.cancel("ftjob-abc123")
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const fineTune = await openai.fineTuning.jobs.cancel("ftjob-abc123");

                console.log(fineTune);
              }
              main();
          response: |
            {
              "object": "fine_tuning.job",
              "id": "ftjob-abc123",
              "model": "gpt-3.5-turbo-0125",
              "created_at": 1689376978,
              "fine_tuned_model": null,
              "organization_id": "org-123",
              "result_files": [],
              "hyperparameters": {
                "n_epochs":  "auto"
              },
              "status": "cancelled",
              "validation_file": "file-abc123",
              "training_file": "file-abc123"
            }
      x-accepts: application/json
  /fine_tuning/jobs/{fine_tuning_job_id}/checkpoints:
    get:
      operationId: listFineTuningJobCheckpoints
      parameters:
      - description: |
          The ID of the fine-tuning job to get checkpoints for.
        explode: false
        in: path
        name: fine_tuning_job_id
        required: true
        schema:
          example: ft-AF1WoRqd3aJAHsqc9NY7iL8F
          type: string
        style: simple
      - description: Identifier for the last checkpoint ID from the previous pagination
          request.
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: Number of checkpoints to retrieve.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFineTuningJobCheckpointsResponse'
          description: OK
      summary: |
        List checkpoints for a fine-tuning job.
      tags:
      - Fine-tuning
      x-oaiMeta:
        name: List fine-tuning checkpoints
        group: fine-tuning
        returns: "A list of fine-tuning [checkpoint objects](/docs/api-reference/fine-tuning/checkpoint-object)\
          \ for a fine-tuning job."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/fine_tuning/jobs/ftjob-abc123/checkpoints \
                -H "Authorization: Bearer $OPENAI_API_KEY"
          response: |
            {
              "object": "list"
              "data": [
                {
                  "object": "fine_tuning.job.checkpoint",
                  "id": "ftckpt_zc4Q7MP6XxulcVzj4MZdwsAB",
                  "created_at": 1519129973,
                  "fine_tuned_model_checkpoint": "ft:gpt-3.5-turbo-0125:my-org:custom-suffix:96olL566:ckpt-step-2000",
                  "metrics": {
                    "full_valid_loss": 0.134,
                    "full_valid_mean_token_accuracy": 0.874
                  },
                  "fine_tuning_job_id": "ftjob-abc123",
                  "step_number": 2000,
                },
                {
                  "object": "fine_tuning.job.checkpoint",
                  "id": "ftckpt_enQCFmOTGj3syEpYVhBRLTSy",
                  "created_at": 1519129833,
                  "fine_tuned_model_checkpoint": "ft:gpt-3.5-turbo-0125:my-org:custom-suffix:7q8mpxmy:ckpt-step-1000",
                  "metrics": {
                    "full_valid_loss": 0.167,
                    "full_valid_mean_token_accuracy": 0.781
                  },
                  "fine_tuning_job_id": "ftjob-abc123",
                  "step_number": 1000,
                },
              ],
              "first_id": "ftckpt_zc4Q7MP6XxulcVzj4MZdwsAB",
              "last_id": "ftckpt_enQCFmOTGj3syEpYVhBRLTSy",
              "has_more": true
            }
      x-accepts: application/json
  /models:
    get:
      operationId: listModels
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelsResponse'
          description: OK
      summary: "Lists the currently available models, and provides basic information\
        \ about each one such as the owner and availability."
      tags:
      - Models
      x-oaiMeta:
        name: List models
        group: models
        returns: "A list of [model](/docs/api-reference/models/object) objects."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/models \
                -H "Authorization: Bearer $OPENAI_API_KEY"
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.models.list()
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const list = await openai.models.list();

                for await (const model of list) {
                  console.log(model);
                }
              }
              main();
          response: |
            {
              "object": "list",
              "data": [
                {
                  "id": "model-id-0",
                  "object": "model",
                  "created": 1686935002,
                  "owned_by": "organization-owner"
                },
                {
                  "id": "model-id-1",
                  "object": "model",
                  "created": 1686935002,
                  "owned_by": "organization-owner",
                },
                {
                  "id": "model-id-2",
                  "object": "model",
                  "created": 1686935002,
                  "owned_by": "openai"
                },
              ],
              "object": "list"
            }
      x-accepts: application/json
  /models/{model}:
    delete:
      operationId: deleteModel
      parameters:
      - description: The model to delete
        explode: false
        in: path
        name: model
        required: true
        schema:
          example: ft:gpt-3.5-turbo:acemeco:suffix:abc123
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteModelResponse'
          description: OK
      summary: Delete a fine-tuned model. You must have the Owner role in your organization
        to delete a model.
      tags:
      - Models
      x-oaiMeta:
        name: Delete a fine-tuned model
        group: models
        returns: Deletion status.
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/models/ft:gpt-3.5-turbo:acemeco:suffix:abc123 \
                -X DELETE \
                -H "Authorization: Bearer $OPENAI_API_KEY"
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.models.delete("ft:gpt-3.5-turbo:acemeco:suffix:abc123")
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const model = await openai.models.del("ft:gpt-3.5-turbo:acemeco:suffix:abc123");

                console.log(model);
              }
              main();
          response: |
            {
              "id": "ft:gpt-3.5-turbo:acemeco:suffix:abc123",
              "object": "model",
              "deleted": true
            }
      x-accepts: application/json
    get:
      operationId: retrieveModel
      parameters:
      - description: The ID of the model to use for this request
        explode: false
        in: path
        name: model
        required: true
        schema:
          example: gpt-3.5-turbo
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: OK
      summary: "Retrieves a model instance, providing basic information about the\
        \ model such as the owner and permissioning."
      tags:
      - Models
      x-oaiMeta:
        name: Retrieve model
        group: models
        returns: "The [model](/docs/api-reference/models/object) object matching the\
          \ specified ID."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/models/VAR_model_id \
                -H "Authorization: Bearer $OPENAI_API_KEY"
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.models.retrieve("VAR_model_id")
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const model = await openai.models.retrieve("VAR_model_id");

                console.log(model);
              }

              main();
          response: |
            {
              "id": "VAR_model_id",
              "object": "model",
              "created": 1686935002,
              "owned_by": "openai"
            }
      x-accepts: application/json
  /moderations:
    post:
      operationId: createModeration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateModerationRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateModerationResponse'
          description: OK
      summary: Classifies if text is potentially harmful.
      tags:
      - Moderations
      x-oaiMeta:
        name: Create moderation
        group: moderations
        returns: "A [moderation](/docs/api-reference/moderations/object) object."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/moderations \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -d '{
                  "input": "I want to kill them."
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              moderation = client.moderations.create(input="I want to kill them.")
              print(moderation)
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const moderation = await openai.moderations.create({ input: "I want to kill them." });

                console.log(moderation);
              }
              main();
          response: |
            {
              "id": "modr-XXXXX",
              "model": "text-moderation-005",
              "results": [
                {
                  "flagged": true,
                  "categories": {
                    "sexual": false,
                    "hate": false,
                    "harassment": false,
                    "self-harm": false,
                    "sexual/minors": false,
                    "hate/threatening": false,
                    "violence/graphic": false,
                    "self-harm/intent": false,
                    "self-harm/instructions": false,
                    "harassment/threatening": true,
                    "violence": true,
                  },
                  "category_scores": {
                    "sexual": 1.2282071e-06,
                    "hate": 0.010696256,
                    "harassment": 0.29842457,
                    "self-harm": 1.5236925e-08,
                    "sexual/minors": 5.7246268e-08,
                    "hate/threatening": 0.0060676364,
                    "violence/graphic": 4.435014e-06,
                    "self-harm/intent": 8.098441e-10,
                    "self-harm/instructions": 2.8498655e-11,
                    "harassment/threatening": 0.63055265,
                    "violence": 0.99011886,
                  }
                }
              ]
            }
      x-content-type: application/json
      x-accepts: application/json
  /assistants:
    get:
      operationId: listAssistants
      parameters:
      - description: |
          A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      - description: |
          Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: |
          A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAssistantsResponse'
          description: OK
      summary: Returns a list of assistants.
      tags:
      - Assistants
      x-oaiMeta:
        name: List assistants
        group: assistants
        beta: true
        returns: "A list of [assistant](/docs/api-reference/assistants/object) objects."
        examples:
          request:
            curl: |
              curl "https://api.openai.com/v1/assistants?order=desc&limit=20" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "OpenAI-Beta: assistants=v1"
            python: |
              from openai import OpenAI
              client = OpenAI()

              my_assistants = client.beta.assistants.list(
                  order="desc",
                  limit="20",
              )
              print(my_assistants.data)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const myAssistants = await openai.beta.assistants.list({
                  order: "desc",
                  limit: "20",
                });

                console.log(myAssistants.data);
              }

              main();
          response: |
            {
              "object": "list",
              "data": [
                {
                  "id": "asst_abc123",
                  "object": "assistant",
                  "created_at": 1698982736,
                  "name": "Coding Tutor",
                  "description": null,
                  "model": "gpt-4-turbo",
                  "instructions": "You are a helpful assistant designed to make me better at coding!",
                  "tools": [],
                  "file_ids": [],
                  "metadata": {}
                },
                {
                  "id": "asst_abc456",
                  "object": "assistant",
                  "created_at": 1698982718,
                  "name": "My Assistant",
                  "description": null,
                  "model": "gpt-4-turbo",
                  "instructions": "You are a helpful assistant designed to make me better at coding!",
                  "tools": [],
                  "file_ids": [],
                  "metadata": {}
                },
                {
                  "id": "asst_abc789",
                  "object": "assistant",
                  "created_at": 1698982643,
                  "name": null,
                  "description": null,
                  "model": "gpt-4-turbo",
                  "instructions": null,
                  "tools": [],
                  "file_ids": [],
                  "metadata": {}
                }
              ],
              "first_id": "asst_abc123",
              "last_id": "asst_abc789",
              "has_more": false
            }
      x-accepts: application/json
    post:
      operationId: createAssistant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssistantRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantObject'
          description: OK
      summary: Create an assistant with a model and instructions.
      tags:
      - Assistants
      x-oaiMeta:
        name: Create assistant
        group: assistants
        beta: true
        returns: "An [assistant](/docs/api-reference/assistants/object) object."
        examples:
        - title: Code Interpreter
          request:
            curl: |
              curl "https://api.openai.com/v1/assistants" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "OpenAI-Beta: assistants=v1" \
                -d '{
                  "instructions": "You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
                  "name": "Math Tutor",
                  "tools": [{"type": "code_interpreter"}],
                  "model": "gpt-4-turbo"
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              my_assistant = client.beta.assistants.create(
                  instructions="You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
                  name="Math Tutor",
                  tools=[{"type": "code_interpreter"}],
                  model="gpt-4-turbo",
              )
              print(my_assistant)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const myAssistant = await openai.beta.assistants.create({
                  instructions:
                    "You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
                  name: "Math Tutor",
                  tools: [{ type: "code_interpreter" }],
                  model: "gpt-4-turbo",
                });

                console.log(myAssistant);
              }

              main();
          response: |
            {
              "id": "asst_abc123",
              "object": "assistant",
              "created_at": 1698984975,
              "name": "Math Tutor",
              "description": null,
              "model": "gpt-4-turbo",
              "instructions": "You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
              "tools": [
                {
                  "type": "code_interpreter"
                }
              ],
              "file_ids": [],
              "metadata": {}
            }
        - title: Files
          request:
            curl: |
              curl https://api.openai.com/v1/assistants \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "OpenAI-Beta: assistants=v1" \
                -d '{
                  "instructions": "You are an HR bot, and you have access to files to answer employee questions about company policies.",
                  "tools": [{"type": "retrieval"}],
                  "model": "gpt-4-turbo",
                  "file_ids": ["file-abc123"]
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              my_assistant = client.beta.assistants.create(
                  instructions="You are an HR bot, and you have access to files to answer employee questions about company policies.",
                  name="HR Helper",
                  tools=[{"type": "retrieval"}],
                  model="gpt-4-turbo",
                  file_ids=["file-abc123"],
              )
              print(my_assistant)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const myAssistant = await openai.beta.assistants.create({
                  instructions:
                    "You are an HR bot, and you have access to files to answer employee questions about company policies.",
                  name: "HR Helper",
                  tools: [{ type: "retrieval" }],
                  model: "gpt-4-turbo",
                  file_ids: ["file-abc123"],
                });

                console.log(myAssistant);
              }

              main();
          response: |
            {
              "id": "asst_abc123",
              "object": "assistant",
              "created_at": 1699009403,
              "name": "HR Helper",
              "description": null,
              "model": "gpt-4-turbo",
              "instructions": "You are an HR bot, and you have access to files to answer employee questions about company policies.",
              "tools": [
                {
                  "type": "retrieval"
                }
              ],
              "file_ids": [
                "file-abc123"
              ],
              "metadata": {}
            }
      x-content-type: application/json
      x-accepts: application/json
  /assistants/{assistant_id}:
    delete:
      operationId: deleteAssistant
      parameters:
      - description: The ID of the assistant to delete.
        explode: false
        in: path
        name: assistant_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAssistantResponse'
          description: OK
      summary: Delete an assistant.
      tags:
      - Assistants
      x-oaiMeta:
        name: Delete assistant
        group: assistants
        beta: true
        returns: Deletion status
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/assistants/asst_abc123 \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "OpenAI-Beta: assistants=v1" \
                -X DELETE
            python: |
              from openai import OpenAI
              client = OpenAI()

              response = client.beta.assistants.delete("asst_abc123")
              print(response)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const response = await openai.beta.assistants.del("asst_abc123");

                console.log(response);
              }
              main();
          response: |
            {
              "id": "asst_abc123",
              "object": "assistant.deleted",
              "deleted": true
            }
      x-accepts: application/json
    get:
      operationId: getAssistant
      parameters:
      - description: The ID of the assistant to retrieve.
        explode: false
        in: path
        name: assistant_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantObject'
          description: OK
      summary: Retrieves an assistant.
      tags:
      - Assistants
      x-oaiMeta:
        name: Retrieve assistant
        group: assistants
        beta: true
        returns: "The [assistant](/docs/api-reference/assistants/object) object matching\
          \ the specified ID."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/assistants/asst_abc123 \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "OpenAI-Beta: assistants=v1"
            python: |
              from openai import OpenAI
              client = OpenAI()

              my_assistant = client.beta.assistants.retrieve("asst_abc123")
              print(my_assistant)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const myAssistant = await openai.beta.assistants.retrieve(
                  "asst_abc123"
                );

                console.log(myAssistant);
              }

              main();
          response: |
            {
              "id": "asst_abc123",
              "object": "assistant",
              "created_at": 1699009709,
              "name": "HR Helper",
              "description": null,
              "model": "gpt-4-turbo",
              "instructions": "You are an HR bot, and you have access to files to answer employee questions about company policies.",
              "tools": [
                {
                  "type": "retrieval"
                }
              ],
              "file_ids": [
                "file-abc123"
              ],
              "metadata": {}
            }
      x-accepts: application/json
    post:
      operationId: modifyAssistant
      parameters:
      - description: The ID of the assistant to modify.
        explode: false
        in: path
        name: assistant_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyAssistantRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantObject'
          description: OK
      summary: Modifies an assistant.
      tags:
      - Assistants
      x-oaiMeta:
        name: Modify assistant
        group: assistants
        beta: true
        returns: "The modified [assistant](/docs/api-reference/assistants/object)\
          \ object."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/assistants/asst_abc123 \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "OpenAI-Beta: assistants=v1" \
                -d '{
                    "instructions": "You are an HR bot, and you have access to files to answer employee questions about company policies. Always response with info from either of the files.",
                    "tools": [{"type": "retrieval"}],
                    "model": "gpt-4-turbo",
                    "file_ids": ["file-abc123", "file-abc456"]
                  }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              my_updated_assistant = client.beta.assistants.update(
                "asst_abc123",
                instructions="You are an HR bot, and you have access to files to answer employee questions about company policies. Always response with info from either of the files.",
                name="HR Helper",
                tools=[{"type": "retrieval"}],
                model="gpt-4-turbo",
                file_ids=["file-abc123", "file-abc456"],
              )

              print(my_updated_assistant)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const myUpdatedAssistant = await openai.beta.assistants.update(
                  "asst_abc123",
                  {
                    instructions:
                      "You are an HR bot, and you have access to files to answer employee questions about company policies. Always response with info from either of the files.",
                    name: "HR Helper",
                    tools: [{ type: "retrieval" }],
                    model: "gpt-4-turbo",
                    file_ids: [
                      "file-abc123",
                      "file-abc456",
                    ],
                  }
                );

                console.log(myUpdatedAssistant);
              }

              main();
          response: |
            {
              "id": "asst_abc123",
              "object": "assistant",
              "created_at": 1699009709,
              "name": "HR Helper",
              "description": null,
              "model": "gpt-4-turbo",
              "instructions": "You are an HR bot, and you have access to files to answer employee questions about company policies. Always response with info from either of the files.",
              "tools": [
                {
                  "type": "retrieval"
                }
              ],
              "file_ids": [
                "file-abc123",
                "file-abc456"
              ],
              "metadata": {}
            }
      x-content-type: application/json
      x-accepts: application/json
  /threads:
    post:
      operationId: createThread
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThreadRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadObject'
          description: OK
      summary: Create a thread.
      tags:
      - Assistants
      x-oaiMeta:
        name: Create thread
        group: threads
        beta: true
        returns: "A [thread](/docs/api-reference/threads) object."
        examples:
        - title: Empty
          request:
            curl: |
              curl https://api.openai.com/v1/threads \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "OpenAI-Beta: assistants=v1" \
                -d ''
            python: |
              from openai import OpenAI
              client = OpenAI()

              empty_thread = client.beta.threads.create()
              print(empty_thread)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const emptyThread = await openai.beta.threads.create();

                console.log(emptyThread);
              }

              main();
          response: |
            {
              "id": "thread_abc123",
              "object": "thread",
              "created_at": 1699012949,
              "metadata": {}
            }
        - title: Messages
          request:
            curl: |
              curl https://api.openai.com/v1/threads \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "OpenAI-Beta: assistants=v1" \
              -d '{
                  "messages": [{
                    "role": "user",
                    "content": "Hello, what is AI?",
                    "file_ids": ["file-abc123"]
                  }, {
                    "role": "user",
                    "content": "How does AI work? Explain it in simple terms."
                  }]
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              message_thread = client.beta.threads.create(
                messages=[
                  {
                    "role": "user",
                    "content": "Hello, what is AI?",
                    "file_ids": ["file-abc123"],
                  },
                  {
                    "role": "user",
                    "content": "How does AI work? Explain it in simple terms."
                  },
                ]
              )

              print(message_thread)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const messageThread = await openai.beta.threads.create({
                  messages: [
                    {
                      role: "user",
                      content: "Hello, what is AI?",
                      file_ids: ["file-abc123"],
                    },
                    {
                      role: "user",
                      content: "How does AI work? Explain it in simple terms.",
                    },
                  ],
                });

                console.log(messageThread);
              }

              main();
          response: |
            {
              id: 'thread_abc123',
              object: 'thread',
              created_at: 1699014083,
              metadata: {}
            }
      x-content-type: application/json
      x-accepts: application/json
  /threads/{thread_id}:
    delete:
      operationId: deleteThread
      parameters:
      - description: The ID of the thread to delete.
        explode: false
        in: path
        name: thread_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteThreadResponse'
          description: OK
      summary: Delete a thread.
      tags:
      - Assistants
      x-oaiMeta:
        name: Delete thread
        group: threads
        beta: true
        returns: Deletion status
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_abc123 \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "OpenAI-Beta: assistants=v1" \
                -X DELETE
            python: |
              from openai import OpenAI
              client = OpenAI()

              response = client.beta.threads.delete("thread_abc123")
              print(response)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const response = await openai.beta.threads.del("thread_abc123");

                console.log(response);
              }
              main();
          response: |
            {
              "id": "thread_abc123",
              "object": "thread.deleted",
              "deleted": true
            }
      x-accepts: application/json
    get:
      operationId: getThread
      parameters:
      - description: The ID of the thread to retrieve.
        explode: false
        in: path
        name: thread_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadObject'
          description: OK
      summary: Retrieves a thread.
      tags:
      - Assistants
      x-oaiMeta:
        name: Retrieve thread
        group: threads
        beta: true
        returns: "The [thread](/docs/api-reference/threads/object) object matching\
          \ the specified ID."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_abc123 \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "OpenAI-Beta: assistants=v1"
            python: |
              from openai import OpenAI
              client = OpenAI()

              my_thread = client.beta.threads.retrieve("thread_abc123")
              print(my_thread)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const myThread = await openai.beta.threads.retrieve(
                  "thread_abc123"
                );

                console.log(myThread);
              }

              main();
          response: |
            {
              "id": "thread_abc123",
              "object": "thread",
              "created_at": 1699014083,
              "metadata": {}
            }
      x-accepts: application/json
    post:
      operationId: modifyThread
      parameters:
      - description: The ID of the thread to modify. Only the `metadata` can be modified.
        explode: false
        in: path
        name: thread_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyThreadRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadObject'
          description: OK
      summary: Modifies a thread.
      tags:
      - Assistants
      x-oaiMeta:
        name: Modify thread
        group: threads
        beta: true
        returns: "The modified [thread](/docs/api-reference/threads/object) object\
          \ matching the specified ID."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_abc123 \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "OpenAI-Beta: assistants=v1" \
                -d '{
                    "metadata": {
                      "modified": "true",
                      "user": "abc123"
                    }
                  }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              my_updated_thread = client.beta.threads.update(
                "thread_abc123",
                metadata={
                  "modified": "true",
                  "user": "abc123"
                }
              )
              print(my_updated_thread)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const updatedThread = await openai.beta.threads.update(
                  "thread_abc123",
                  {
                    metadata: { modified: "true", user: "abc123" },
                  }
                );

                console.log(updatedThread);
              }

              main();
          response: |
            {
              "id": "thread_abc123",
              "object": "thread",
              "created_at": 1699014083,
              "metadata": {
                "modified": "true",
                "user": "abc123"
              }
            }
      x-content-type: application/json
      x-accepts: application/json
  /threads/{thread_id}/messages:
    get:
      operationId: listMessages
      parameters:
      - description: "The ID of the [thread](/docs/api-reference/threads) the messages\
          \ belong to."
        explode: false
        in: path
        name: thread_id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      - description: |
          Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: |
          A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          Filter messages by the run ID that generated them.
        explode: true
        in: query
        name: run_id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessagesResponse'
          description: OK
      summary: Returns a list of messages for a given thread.
      tags:
      - Assistants
      x-oaiMeta:
        name: List messages
        group: threads
        beta: true
        returns: "A list of [message](/docs/api-reference/messages) objects."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_abc123/messages \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "OpenAI-Beta: assistants=v1"
            python: |
              from openai import OpenAI
              client = OpenAI()

              thread_messages = client.beta.threads.messages.list("thread_abc123")
              print(thread_messages.data)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const threadMessages = await openai.beta.threads.messages.list(
                  "thread_abc123"
                );

                console.log(threadMessages.data);
              }

              main();
          response: |
            {
              "object": "list",
              "data": [
                {
                  "id": "msg_abc123",
                  "object": "thread.message",
                  "created_at": 1699016383,
                  "thread_id": "thread_abc123",
                  "role": "user",
                  "content": [
                    {
                      "type": "text",
                      "text": {
                        "value": "How does AI work? Explain it in simple terms.",
                        "annotations": []
                      }
                    }
                  ],
                  "file_ids": [],
                  "assistant_id": null,
                  "run_id": null,
                  "metadata": {}
                },
                {
                  "id": "msg_abc456",
                  "object": "thread.message",
                  "created_at": 1699016383,
                  "thread_id": "thread_abc123",
                  "role": "user",
                  "content": [
                    {
                      "type": "text",
                      "text": {
                        "value": "Hello, what is AI?",
                        "annotations": []
                      }
                    }
                  ],
                  "file_ids": [
                    "file-abc123"
                  ],
                  "assistant_id": null,
                  "run_id": null,
                  "metadata": {}
                }
              ],
              "first_id": "msg_abc123",
              "last_id": "msg_abc456",
              "has_more": false
            }
      x-accepts: application/json
    post:
      operationId: createMessage
      parameters:
      - description: "The ID of the [thread](/docs/api-reference/threads) to create\
          \ a message for."
        explode: false
        in: path
        name: thread_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageObject'
          description: OK
      summary: Create a message.
      tags:
      - Assistants
      x-oaiMeta:
        name: Create message
        group: threads
        beta: true
        returns: "A [message](/docs/api-reference/messages/object) object."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_abc123/messages \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "OpenAI-Beta: assistants=v1" \
                -d '{
                    "role": "user",
                    "content": "How does AI work? Explain it in simple terms."
                  }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              thread_message = client.beta.threads.messages.create(
                "thread_abc123",
                role="user",
                content="How does AI work? Explain it in simple terms.",
              )
              print(thread_message)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const threadMessages = await openai.beta.threads.messages.create(
                  "thread_abc123",
                  { role: "user", content: "How does AI work? Explain it in simple terms." }
                );

                console.log(threadMessages);
              }

              main();
          response: |
            {
              "id": "msg_abc123",
              "object": "thread.message",
              "created_at": 1699017614,
              "thread_id": "thread_abc123",
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": {
                    "value": "How does AI work? Explain it in simple terms.",
                    "annotations": []
                  }
                }
              ],
              "file_ids": [],
              "assistant_id": null,
              "run_id": null,
              "metadata": {}
            }
      x-content-type: application/json
      x-accepts: application/json
  /threads/{thread_id}/messages/{message_id}:
    get:
      operationId: getMessage
      parameters:
      - description: "The ID of the [thread](/docs/api-reference/threads) to which\
          \ this message belongs."
        explode: false
        in: path
        name: thread_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the message to retrieve.
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageObject'
          description: OK
      summary: Retrieve a message.
      tags:
      - Assistants
      x-oaiMeta:
        name: Retrieve message
        group: threads
        beta: true
        returns: "The [message](/docs/api-reference/threads/messages/object) object\
          \ matching the specified ID."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_abc123/messages/msg_abc123 \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "OpenAI-Beta: assistants=v1"
            python: |
              from openai import OpenAI
              client = OpenAI()

              message = client.beta.threads.messages.retrieve(
                message_id="msg_abc123",
                thread_id="thread_abc123",
              )
              print(message)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const message = await openai.beta.threads.messages.retrieve(
                  "thread_abc123",
                  "msg_abc123"
                );

                console.log(message);
              }

              main();
          response: |
            {
              "id": "msg_abc123",
              "object": "thread.message",
              "created_at": 1699017614,
              "thread_id": "thread_abc123",
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": {
                    "value": "How does AI work? Explain it in simple terms.",
                    "annotations": []
                  }
                }
              ],
              "file_ids": [],
              "assistant_id": null,
              "run_id": null,
              "metadata": {}
            }
      x-accepts: application/json
    post:
      operationId: modifyMessage
      parameters:
      - description: The ID of the thread to which this message belongs.
        explode: false
        in: path
        name: thread_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the message to modify.
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyMessageRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageObject'
          description: OK
      summary: Modifies a message.
      tags:
      - Assistants
      x-oaiMeta:
        name: Modify message
        group: threads
        beta: true
        returns: "The modified [message](/docs/api-reference/threads/messages/object)\
          \ object."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_abc123/messages/msg_abc123 \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "OpenAI-Beta: assistants=v1" \
                -d '{
                    "metadata": {
                      "modified": "true",
                      "user": "abc123"
                    }
                  }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              message = client.beta.threads.messages.update(
                message_id="msg_abc12",
                thread_id="thread_abc123",
                metadata={
                  "modified": "true",
                  "user": "abc123",
                },
              )
              print(message)
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const message = await openai.beta.threads.messages.update(
                  "thread_abc123",
                  "msg_abc123",
                  {
                    metadata: {
                      modified: "true",
                      user: "abc123",
                    },
                  }
                }'
          response: |
            {
              "id": "msg_abc123",
              "object": "thread.message",
              "created_at": 1699017614,
              "thread_id": "thread_abc123",
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": {
                    "value": "How does AI work? Explain it in simple terms.",
                    "annotations": []
                  }
                }
              ],
              "file_ids": [],
              "assistant_id": null,
              "run_id": null,
              "metadata": {
                "modified": "true",
                "user": "abc123"
              }
            }
      x-content-type: application/json
      x-accepts: application/json
  /threads/runs:
    post:
      operationId: createThreadAndRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThreadAndRunRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunObject'
          description: OK
      summary: Create a thread and run it in one request.
      tags:
      - Assistants
      x-oaiMeta:
        name: Create thread and run
        group: threads
        beta: true
        returns: "A [run](/docs/api-reference/runs/object) object."
        examples:
        - title: Default
          request:
            curl: |
              curl https://api.openai.com/v1/threads/runs \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -H "OpenAI-Beta: assistants=v1" \
                -d '{
                    "assistant_id": "asst_abc123",
                    "thread": {
                      "messages": [
                        {"role": "user", "content": "Explain deep learning to a 5 year old."}
                      ]
                    }
                  }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              run = client.beta.threads.create_and_run(
                assistant_id="asst_abc123",
                thread={
                  "messages": [
                    {"role": "user", "content": "Explain deep learning to a 5 year old."}
                  ]
                }
              )

              print(run)
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const run = await openai.beta.threads.createAndRun({
                  assistant_id: "asst_abc123",
                  thread: {
                    messages: [
                      { role: "user", content: "Explain deep learning to a 5 year old." },
                    ],
                  },
                });

                console.log(run);
              }

              main();
          response: |
            {
              "id": "run_abc123",
              "object": "thread.run",
              "created_at": 1699076792,
              "assistant_id": "asst_abc123",
              "thread_id": "thread_abc123",
              "status": "queued",
              "started_at": null,
              "expires_at": 1699077392,
              "cancelled_at": null,
              "failed_at": null,
              "completed_at": null,
              "last_error": null,
              "model": "gpt-4-turbo",
              "instructions": "You are a helpful assistant.",
              "tools": [],
              "file_ids": [],
              "metadata": {},
              "usage": null,
              "temperature": 1
            }
        - title: Streaming
          request:
            curl: |
              curl https://api.openai.com/v1/threads/runs \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -H "OpenAI-Beta: assistants=v1" \
                -d '{
                  "assistant_id": "asst_123",
                  "thread": {
                    "messages": [
                      {"role": "user", "content": "Hello"}
                    ]
                  },
                  "stream": true
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              stream = client.beta.threads.create_and_run(
                assistant_id="asst_123",
                thread={
                  "messages": [
                    {"role": "user", "content": "Hello"}
                  ]
                },
                stream=True
              )

              for event in stream:
                print(event)
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const stream = await openai.beta.threads.createAndRun({
                    assistant_id: "asst_123",
                    thread: {
                      messages: [
                        { role: "user", content: "Hello" },
                      ],
                    },
                    stream: true
                });

                for await (const event of stream) {
                  console.log(event);
                }
              }

              main();
          response: |
            event: thread.created
            data: {"id":"thread_123","object":"thread","created_at":1710348075,"metadata":{}}

            event: thread.run.created
            data: {"id":"run_123","object":"thread.run","created_at":1710348075,"assistant_id":"asst_123","thread_id":"thread_123","status":"queued","started_at":null,"expires_at":1710348675,"cancelled_at":null,"failed_at":null,"completed_at":null,"required_action":null,"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[],"file_ids":[],"metadata":{},"usage":null}

            event: thread.run.queued
            data: {"id":"run_123","object":"thread.run","created_at":1710348075,"assistant_id":"asst_123","thread_id":"thread_123","status":"queued","started_at":null,"expires_at":1710348675,"cancelled_at":null,"failed_at":null,"completed_at":null,"required_action":null,"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[],"file_ids":[],"metadata":{},"usage":null}

            event: thread.run.in_progress
            data: {"id":"run_123","object":"thread.run","created_at":1710348075,"assistant_id":"asst_123","thread_id":"thread_123","status":"in_progress","started_at":1710348075,"expires_at":1710348675,"cancelled_at":null,"failed_at":null,"completed_at":null,"required_action":null,"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[],"file_ids":[],"metadata":{},"usage":null}

            event: thread.run.step.created
            data: {"id":"step_001","object":"thread.run.step","created_at":1710348076,"run_id":"run_123","assistant_id":"asst_123","thread_id":"thread_123","type":"message_creation","status":"in_progress","cancelled_at":null,"completed_at":null,"expires_at":1710348675,"failed_at":null,"last_error":null,"step_details":{"type":"message_creation","message_creation":{"message_id":"msg_001"}},"usage":null}

            event: thread.run.step.in_progress
            data: {"id":"step_001","object":"thread.run.step","created_at":1710348076,"run_id":"run_123","assistant_id":"asst_123","thread_id":"thread_123","type":"message_creation","status":"in_progress","cancelled_at":null,"completed_at":null,"expires_at":1710348675,"failed_at":null,"last_error":null,"step_details":{"type":"message_creation","message_creation":{"message_id":"msg_001"}},"usage":null}

            event: thread.message.created
            data: {"id":"msg_001","object":"thread.message","created_at":1710348076,"assistant_id":"asst_123","thread_id":"thread_123","run_id":"run_123","status":"in_progress","incomplete_details":null,"incomplete_at":null,"completed_at":null,"role":"assistant","content":[],"file_ids":[],"metadata":{}}

            event: thread.message.in_progress
            data: {"id":"msg_001","object":"thread.message","created_at":1710348076,"assistant_id":"asst_123","thread_id":"thread_123","run_id":"run_123","status":"in_progress","incomplete_details":null,"incomplete_at":null,"completed_at":null,"role":"assistant","content":[],"file_ids":[],"metadata":{}}

            event: thread.message.delta
            data: {"id":"msg_001","object":"thread.message.delta","delta":{"content":[{"index":0,"type":"text","text":{"value":"Hello","annotations":[]}}]}}

            ...

            event: thread.message.delta
            data: {"id":"msg_001","object":"thread.message.delta","delta":{"content":[{"index":0,"type":"text","text":{"value":" today"}}]}}

            event: thread.message.delta
            data: {"id":"msg_001","object":"thread.message.delta","delta":{"content":[{"index":0,"type":"text","text":{"value":"?"}}]}}

            event: thread.message.completed
            data: {"id":"msg_001","object":"thread.message","created_at":1710348076,"assistant_id":"asst_123","thread_id":"thread_123","run_id":"run_123","status":"completed","incomplete_details":null,"incomplete_at":null,"completed_at":1710348077,"role":"assistant","content":[{"type":"text","text":{"value":"Hello! How can I assist you today?","annotations":[]}}],"file_ids":[],"metadata":{}}

            event: thread.run.step.completed
            data: {"id":"step_001","object":"thread.run.step","created_at":1710348076,"run_id":"run_123","assistant_id":"asst_123","thread_id":"thread_123","type":"message_creation","status":"completed","cancelled_at":null,"completed_at":1710348077,"expires_at":1710348675,"failed_at":null,"last_error":null,"step_details":{"type":"message_creation","message_creation":{"message_id":"msg_001"}},"usage":{"prompt_tokens":20,"completion_tokens":11,"total_tokens":31}}

            event: thread.run.completed
            data: {"id":"run_123","object":"thread.run","created_at":1710348075,"assistant_id":"asst_123","thread_id":"thread_123","status":"completed","started_at":1710348075,"expires_at":null,"cancelled_at":null,"failed_at":null,"completed_at":1710348077,"required_action":null,"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[],"file_ids":[],"metadata":{},"usage":{"prompt_tokens":20,"completion_tokens":11,"total_tokens":31}}

            event: done
            data: [DONE]
        - title: Streaming with Functions
          request:
            curl: |
              curl https://api.openai.com/v1/threads/runs \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -H "OpenAI-Beta: assistants=v1" \
                -d '{
                  "assistant_id": "asst_abc123",
                  "thread": {
                    "messages": [
                      {"role": "user", "content": "What is the weather like in San Francisco?"}
                    ]
                  },
                  "tools": [
                    {
                      "type": "function",
                      "function": {
                        "name": "get_current_weather",
                        "description": "Get the current weather in a given location",
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "location": {
                              "type": "string",
                              "description": "The city and state, e.g. San Francisco, CA"
                            },
                            "unit": {
                              "type": "string",
                              "enum": ["celsius", "fahrenheit"]
                            }
                          },
                          "required": ["location"]
                        }
                      }
                    }
                  ],
                  "stream": true
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              tools = [
                {
                  "type": "function",
                  "function": {
                    "name": "get_current_weather",
                    "description": "Get the current weather in a given location",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "location": {
                          "type": "string",
                          "description": "The city and state, e.g. San Francisco, CA",
                        },
                        "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                      },
                      "required": ["location"],
                    },
                  }
                }
              ]

              stream = client.beta.threads.create_and_run(
                thread={
                    "messages": [
                      {"role": "user", "content": "What is the weather like in San Francisco?"}
                    ]
                },
                assistant_id="asst_abc123",
                tools=tools,
                stream=True
              )

              for event in stream:
                print(event)
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              const tools = [
                  {
                    "type": "function",
                    "function": {
                      "name": "get_current_weather",
                      "description": "Get the current weather in a given location",
                      "parameters": {
                        "type": "object",
                        "properties": {
                          "location": {
                            "type": "string",
                            "description": "The city and state, e.g. San Francisco, CA",
                          },
                          "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                        },
                        "required": ["location"],
                      },
                    }
                  }
              ];

              async function main() {
                const stream = await openai.beta.threads.createAndRun({
                  assistant_id: "asst_123",
                  thread: {
                    messages: [
                      { role: "user", content: "What is the weather like in San Francisco?" },
                    ],
                  },
                  tools: tools,
                  stream: true
                });

                for await (const event of stream) {
                  console.log(event);
                }
              }

              main();
          response: |
            event: thread.created
            data: {"id":"thread_123","object":"thread","created_at":1710351818,"metadata":{}}

            event: thread.run.created
            data: {"id":"run_123","object":"thread.run","created_at":1710351818,"assistant_id":"asst_123","thread_id":"thread_123","status":"queued","started_at":null,"expires_at":1710352418,"cancelled_at":null,"failed_at":null,"completed_at":null,"required_action":null,"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[{"type":"function","function":{"name":"get_current_weather","description":"Get the current weather in a given location","parameters":{"type":"object","properties":{"location":{"type":"string","description":"The city and state, e.g. San Francisco, CA"},"unit":{"type":"string","enum":["celsius","fahrenheit"]}},"required":["location"]}}}],"file_ids":[],"metadata":{},"usage":null}

            event: thread.run.queued
            data: {"id":"run_123","object":"thread.run","created_at":1710351818,"assistant_id":"asst_123","thread_id":"thread_123","status":"queued","started_at":null,"expires_at":1710352418,"cancelled_at":null,"failed_at":null,"completed_at":null,"required_action":null,"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[{"type":"function","function":{"name":"get_current_weather","description":"Get the current weather in a given location","parameters":{"type":"object","properties":{"location":{"type":"string","description":"The city and state, e.g. San Francisco, CA"},"unit":{"type":"string","enum":["celsius","fahrenheit"]}},"required":["location"]}}}],"file_ids":[],"metadata":{},"usage":null}

            event: thread.run.in_progress
            data: {"id":"run_123","object":"thread.run","created_at":1710351818,"assistant_id":"asst_123","thread_id":"thread_123","status":"in_progress","started_at":1710351818,"expires_at":1710352418,"cancelled_at":null,"failed_at":null,"completed_at":null,"required_action":null,"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[{"type":"function","function":{"name":"get_current_weather","description":"Get the current weather in a given location","parameters":{"type":"object","properties":{"location":{"type":"string","description":"The city and state, e.g. San Francisco, CA"},"unit":{"type":"string","enum":["celsius","fahrenheit"]}},"required":["location"]}}}],"file_ids":[],"metadata":{},"usage":null}

            event: thread.run.step.created
            data: {"id":"step_001","object":"thread.run.step","created_at":1710351819,"run_id":"run_123","assistant_id":"asst_123","thread_id":"thread_123","type":"tool_calls","status":"in_progress","cancelled_at":null,"completed_at":null,"expires_at":1710352418,"failed_at":null,"last_error":null,"step_details":{"type":"tool_calls","tool_calls":[]},"usage":null}

            event: thread.run.step.in_progress
            data: {"id":"step_001","object":"thread.run.step","created_at":1710351819,"run_id":"run_123","assistant_id":"asst_123","thread_id":"thread_123","type":"tool_calls","status":"in_progress","cancelled_at":null,"completed_at":null,"expires_at":1710352418,"failed_at":null,"last_error":null,"step_details":{"type":"tool_calls","tool_calls":[]},"usage":null}

            event: thread.run.step.delta
            data: {"id":"step_001","object":"thread.run.step.delta","delta":{"step_details":{"type":"tool_calls","tool_calls":[{"index":0,"id":"call_XXNp8YGaFrjrSjgqxtC8JJ1B","type":"function","function":{"name":"get_current_weather","arguments":"","output":null}}]}}}

            event: thread.run.step.delta
            data: {"id":"step_001","object":"thread.run.step.delta","delta":{"step_details":{"type":"tool_calls","tool_calls":[{"index":0,"type":"function","function":{"arguments":"{\""}}]}}}

            event: thread.run.step.delta
            data: {"id":"step_001","object":"thread.run.step.delta","delta":{"step_details":{"type":"tool_calls","tool_calls":[{"index":0,"type":"function","function":{"arguments":"location"}}]}}}

            ...

            event: thread.run.step.delta
            data: {"id":"step_001","object":"thread.run.step.delta","delta":{"step_details":{"type":"tool_calls","tool_calls":[{"index":0,"type":"function","function":{"arguments":"ahrenheit"}}]}}}

            event: thread.run.step.delta
            data: {"id":"step_001","object":"thread.run.step.delta","delta":{"step_details":{"type":"tool_calls","tool_calls":[{"index":0,"type":"function","function":{"arguments":"\"}"}}]}}}

            event: thread.run.requires_action
            data: {"id":"run_123","object":"thread.run","created_at":1710351818,"assistant_id":"asst_123","thread_id":"thread_123","status":"requires_action","started_at":1710351818,"expires_at":1710352418,"cancelled_at":null,"failed_at":null,"completed_at":null,"required_action":{"type":"submit_tool_outputs","submit_tool_outputs":{"tool_calls":[{"id":"call_XXNp8YGaFrjrSjgqxtC8JJ1B","type":"function","function":{"name":"get_current_weather","arguments":"{\"location\":\"San Francisco, CA\",\"unit\":\"fahrenheit\"}"}}]}},"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[{"type":"function","function":{"name":"get_current_weather","description":"Get the current weather in a given location","parameters":{"type":"object","properties":{"location":{"type":"string","description":"The city and state, e.g. San Francisco, CA"},"unit":{"type":"string","enum":["celsius","fahrenheit"]}},"required":["location"]}}}],"file_ids":[],"metadata":{},"usage":null}

            event: done
            data: [DONE]
      x-content-type: application/json
      x-accepts: application/json
  /threads/{thread_id}/runs:
    get:
      operationId: listRuns
      parameters:
      - description: The ID of the thread the run belongs to.
        explode: false
        in: path
        name: thread_id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      - description: |
          Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: |
          A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRunsResponse'
          description: OK
      summary: Returns a list of runs belonging to a thread.
      tags:
      - Assistants
      x-oaiMeta:
        name: List runs
        group: threads
        beta: true
        returns: "A list of [run](/docs/api-reference/runs/object) objects."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_abc123/runs \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -H "OpenAI-Beta: assistants=v1"
            python: |
              from openai import OpenAI
              client = OpenAI()

              runs = client.beta.threads.runs.list(
                "thread_abc123"
              )

              print(runs)
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const runs = await openai.beta.threads.runs.list(
                  "thread_abc123"
                );

                console.log(runs);
              }

              main();
          response: |
            {
              "object": "list",
              "data": [
                {
                  "id": "run_abc123",
                  "object": "thread.run",
                  "created_at": 1699075072,
                  "assistant_id": "asst_abc123",
                  "thread_id": "thread_abc123",
                  "status": "completed",
                  "started_at": 1699075072,
                  "expires_at": null,
                  "cancelled_at": null,
                  "failed_at": null,
                  "completed_at": 1699075073,
                  "last_error": null,
                  "model": "gpt-4-turbo",
                  "instructions": null,
                  "incomplete_details": null,
                  "tools": [
                    {
                      "type": "code_interpreter"
                    }
                  ],
                  "file_ids": [
                    "file-abc123",
                    "file-abc456"
                  ],
                  "metadata": {},
                  "usage": {
                    "prompt_tokens": 123,
                    "completion_tokens": 456,
                    "total_tokens": 579
                  },
                  "temperature": 1,
                  "max_prompt_tokens": 1000,
                  "max_completion_tokens": 1000,
                  "truncation_strategy": {
                    "type": "auto",
                    "last_messages": null
                  },
                  "response_format": "auto",
                  "tool_choice": "auto"
                },
                {
                  "id": "run_abc456",
                  "object": "thread.run",
                  "created_at": 1699063290,
                  "assistant_id": "asst_abc123",
                  "thread_id": "thread_abc123",
                  "status": "completed",
                  "started_at": 1699063290,
                  "expires_at": null,
                  "cancelled_at": null,
                  "failed_at": null,
                  "completed_at": 1699063291,
                  "last_error": null,
                  "model": "gpt-4-turbo",
                  "instructions": null,
                  "incomplete_details": null,
                  "tools": [
                    {
                      "type": "code_interpreter"
                    }
                  ],
                  "file_ids": [
                    "file-abc123",
                    "file-abc456"
                  ],
                  "metadata": {},
                  "usage": {
                    "prompt_tokens": 123,
                    "completion_tokens": 456,
                    "total_tokens": 579
                  },
                  "temperature": 1,
                  "max_prompt_tokens": 1000,
                  "max_completion_tokens": 1000,
                  "truncation_strategy": {
                    "type": "auto",
                    "last_messages": null
                  },
                  "response_format": "auto",
                  "tool_choice": "auto"
                }
              ],
              "first_id": "run_abc123",
              "last_id": "run_abc456",
              "has_more": false
            }
      x-accepts: application/json
    post:
      operationId: createRun
      parameters:
      - description: The ID of the thread to run.
        explode: false
        in: path
        name: thread_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRunRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunObject'
          description: OK
      summary: Create a run.
      tags:
      - Assistants
      x-oaiMeta:
        name: Create run
        group: threads
        beta: true
        returns: "A [run](/docs/api-reference/runs/object) object."
        examples:
        - title: Default
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_abc123/runs \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -H "OpenAI-Beta: assistants=v1" \
                -d '{
                  "assistant_id": "asst_abc123"
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              run = client.beta.threads.runs.create(
                thread_id="thread_abc123",
                assistant_id="asst_abc123"
              )

              print(run)
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const run = await openai.beta.threads.runs.create(
                  "thread_abc123",
                  { assistant_id: "asst_abc123" }
                );

                console.log(run);
              }

              main();
          response: |
            {
              "id": "run_abc123",
              "object": "thread.run",
              "created_at": 1699063290,
              "assistant_id": "asst_abc123",
              "thread_id": "thread_abc123",
              "status": "queued",
              "started_at": 1699063290,
              "expires_at": null,
              "cancelled_at": null,
              "failed_at": null,
              "completed_at": 1699063291,
              "last_error": null,
              "model": "gpt-4-turbo",
              "instructions": null,
              "incomplete_details": null,
              "tools": [
                {
                  "type": "code_interpreter"
                }
              ],
              "file_ids": [
                "file-abc123",
                "file-abc456"
              ],
              "metadata": {},
              "usage": null,
              "temperature": 1,
              "max_prompt_tokens": 1000,
              "max_completion_tokens": 1000,
              "truncation_strategy": {
                "type": "auto",
                "last_messages": null
              },
              "response_format": "auto",
              "tool_choice": "auto"
            }
        - title: Streaming
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_123/runs \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -H "OpenAI-Beta: assistants=v1" \
                -d '{
                  "assistant_id": "asst_123",
                  "stream": true
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              stream = client.beta.threads.runs.create(
                thread_id="thread_123",
                assistant_id="asst_123",
                stream=True
              )

              for event in stream:
                print(event)
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const stream = await openai.beta.threads.runs.create(
                  "thread_123",
                  { assistant_id: "asst_123", stream: true }
                );

                for await (const event of stream) {
                  console.log(event);
                }
              }

              main();
          response: |
            event: thread.run.created
            data: {"id":"run_123","object":"thread.run","created_at":1710330640,"assistant_id":"asst_123","thread_id":"thread_123","status":"queued","started_at":null,"expires_at":1710331240,"cancelled_at":null,"failed_at":null,"completed_at":null,"required_action":null,"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[],"file_ids":[],"metadata":{},"usage":null}

            event: thread.run.queued
            data: {"id":"run_123","object":"thread.run","created_at":1710330640,"assistant_id":"asst_123","thread_id":"thread_123","status":"queued","started_at":null,"expires_at":1710331240,"cancelled_at":null,"failed_at":null,"completed_at":null,"required_action":null,"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[],"file_ids":[],"metadata":{},"usage":null}

            event: thread.run.in_progress
            data: {"id":"run_123","object":"thread.run","created_at":1710330640,"assistant_id":"asst_123","thread_id":"thread_123","status":"in_progress","started_at":1710330641,"expires_at":1710331240,"cancelled_at":null,"failed_at":null,"completed_at":null,"required_action":null,"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[],"file_ids":[],"metadata":{},"usage":null}

            event: thread.run.step.created
            data: {"id":"step_001","object":"thread.run.step","created_at":1710330641,"run_id":"run_123","assistant_id":"asst_123","thread_id":"thread_123","type":"message_creation","status":"in_progress","cancelled_at":null,"completed_at":null,"expires_at":1710331240,"failed_at":null,"last_error":null,"step_details":{"type":"message_creation","message_creation":{"message_id":"msg_001"}},"usage":null}

            event: thread.run.step.in_progress
            data: {"id":"step_001","object":"thread.run.step","created_at":1710330641,"run_id":"run_123","assistant_id":"asst_123","thread_id":"thread_123","type":"message_creation","status":"in_progress","cancelled_at":null,"completed_at":null,"expires_at":1710331240,"failed_at":null,"last_error":null,"step_details":{"type":"message_creation","message_creation":{"message_id":"msg_001"}},"usage":null}

            event: thread.message.created
            data: {"id":"msg_001","object":"thread.message","created_at":1710330641,"assistant_id":"asst_123","thread_id":"thread_123","run_id":"run_123","status":"in_progress","incomplete_details":null,"incomplete_at":null,"completed_at":null,"role":"assistant","content":[],"file_ids":[],"metadata":{}}

            event: thread.message.in_progress
            data: {"id":"msg_001","object":"thread.message","created_at":1710330641,"assistant_id":"asst_123","thread_id":"thread_123","run_id":"run_123","status":"in_progress","incomplete_details":null,"incomplete_at":null,"completed_at":null,"role":"assistant","content":[],"file_ids":[],"metadata":{}}

            event: thread.message.delta
            data: {"id":"msg_001","object":"thread.message.delta","delta":{"content":[{"index":0,"type":"text","text":{"value":"Hello","annotations":[]}}]}}

            ...

            event: thread.message.delta
            data: {"id":"msg_001","object":"thread.message.delta","delta":{"content":[{"index":0,"type":"text","text":{"value":" today"}}]}}

            event: thread.message.delta
            data: {"id":"msg_001","object":"thread.message.delta","delta":{"content":[{"index":0,"type":"text","text":{"value":"?"}}]}}

            event: thread.message.completed
            data: {"id":"msg_001","object":"thread.message","created_at":1710330641,"assistant_id":"asst_123","thread_id":"thread_123","run_id":"run_123","status":"completed","incomplete_details":null,"incomplete_at":null,"completed_at":1710330642,"role":"assistant","content":[{"type":"text","text":{"value":"Hello! How can I assist you today?","annotations":[]}}],"file_ids":[],"metadata":{}}

            event: thread.run.step.completed
            data: {"id":"step_001","object":"thread.run.step","created_at":1710330641,"run_id":"run_123","assistant_id":"asst_123","thread_id":"thread_123","type":"message_creation","status":"completed","cancelled_at":null,"completed_at":1710330642,"expires_at":1710331240,"failed_at":null,"last_error":null,"step_details":{"type":"message_creation","message_creation":{"message_id":"msg_001"}},"usage":{"prompt_tokens":20,"completion_tokens":11,"total_tokens":31}}

            event: thread.run.completed
            data: {"id":"run_123","object":"thread.run","created_at":1710330640,"assistant_id":"asst_123","thread_id":"thread_123","status":"completed","started_at":1710330641,"expires_at":null,"cancelled_at":null,"failed_at":null,"completed_at":1710330642,"required_action":null,"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[],"file_ids":[],"metadata":{},"usage":{"prompt_tokens":20,"completion_tokens":11,"total_tokens":31}}

            event: done
            data: [DONE]
        - title: Streaming with Functions
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_abc123/runs \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -H "OpenAI-Beta: assistants=v1" \
                -d '{
                  "assistant_id": "asst_abc123",
                  "tools": [
                    {
                      "type": "function",
                      "function": {
                        "name": "get_current_weather",
                        "description": "Get the current weather in a given location",
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "location": {
                              "type": "string",
                              "description": "The city and state, e.g. San Francisco, CA"
                            },
                            "unit": {
                              "type": "string",
                              "enum": ["celsius", "fahrenheit"]
                            }
                          },
                          "required": ["location"]
                        }
                      }
                    }
                  ],
                  "stream": true
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              tools = [
                {
                  "type": "function",
                  "function": {
                    "name": "get_current_weather",
                    "description": "Get the current weather in a given location",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "location": {
                          "type": "string",
                          "description": "The city and state, e.g. San Francisco, CA",
                        },
                        "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                      },
                      "required": ["location"],
                    },
                  }
                }
              ]

              stream = client.beta.threads.runs.create(
                thread_id="thread_abc123",
                assistant_id="asst_abc123",
                tools=tools,
                stream=True
              )

              for event in stream:
                print(event)
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              const tools = [
                  {
                    "type": "function",
                    "function": {
                      "name": "get_current_weather",
                      "description": "Get the current weather in a given location",
                      "parameters": {
                        "type": "object",
                        "properties": {
                          "location": {
                            "type": "string",
                            "description": "The city and state, e.g. San Francisco, CA",
                          },
                          "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                        },
                        "required": ["location"],
                      },
                    }
                  }
              ];

              async function main() {
                const stream = await openai.beta.threads.runs.create(
                  "thread_abc123",
                  {
                    assistant_id: "asst_abc123",
                    tools: tools,
                    stream: true
                  }
                );

                for await (const event of stream) {
                  console.log(event);
                }
              }

              main();
          response: |
            event: thread.run.created
            data: {"id":"run_123","object":"thread.run","created_at":1710348075,"assistant_id":"asst_123","thread_id":"thread_123","status":"queued","started_at":null,"expires_at":1710348675,"cancelled_at":null,"failed_at":null,"completed_at":null,"required_action":null,"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[],"file_ids":[],"metadata":{},"usage":null}

            event: thread.run.queued
            data: {"id":"run_123","object":"thread.run","created_at":1710348075,"assistant_id":"asst_123","thread_id":"thread_123","status":"queued","started_at":null,"expires_at":1710348675,"cancelled_at":null,"failed_at":null,"completed_at":null,"required_action":null,"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[],"file_ids":[],"metadata":{},"usage":null}

            event: thread.run.in_progress
            data: {"id":"run_123","object":"thread.run","created_at":1710348075,"assistant_id":"asst_123","thread_id":"thread_123","status":"in_progress","started_at":1710348075,"expires_at":1710348675,"cancelled_at":null,"failed_at":null,"completed_at":null,"required_action":null,"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[],"file_ids":[],"metadata":{},"usage":null}

            event: thread.run.step.created
            data: {"id":"step_001","object":"thread.run.step","created_at":1710348076,"run_id":"run_123","assistant_id":"asst_123","thread_id":"thread_123","type":"message_creation","status":"in_progress","cancelled_at":null,"completed_at":null,"expires_at":1710348675,"failed_at":null,"last_error":null,"step_details":{"type":"message_creation","message_creation":{"message_id":"msg_001"}},"usage":null}

            event: thread.run.step.in_progress
            data: {"id":"step_001","object":"thread.run.step","created_at":1710348076,"run_id":"run_123","assistant_id":"asst_123","thread_id":"thread_123","type":"message_creation","status":"in_progress","cancelled_at":null,"completed_at":null,"expires_at":1710348675,"failed_at":null,"last_error":null,"step_details":{"type":"message_creation","message_creation":{"message_id":"msg_001"}},"usage":null}

            event: thread.message.created
            data: {"id":"msg_001","object":"thread.message","created_at":1710348076,"assistant_id":"asst_123","thread_id":"thread_123","run_id":"run_123","status":"in_progress","incomplete_details":null,"incomplete_at":null,"completed_at":null,"role":"assistant","content":[],"file_ids":[],"metadata":{}}

            event: thread.message.in_progress
            data: {"id":"msg_001","object":"thread.message","created_at":1710348076,"assistant_id":"asst_123","thread_id":"thread_123","run_id":"run_123","status":"in_progress","incomplete_details":null,"incomplete_at":null,"completed_at":null,"role":"assistant","content":[],"file_ids":[],"metadata":{}}

            event: thread.message.delta
            data: {"id":"msg_001","object":"thread.message.delta","delta":{"content":[{"index":0,"type":"text","text":{"value":"Hello","annotations":[]}}]}}

            ...

            event: thread.message.delta
            data: {"id":"msg_001","object":"thread.message.delta","delta":{"content":[{"index":0,"type":"text","text":{"value":" today"}}]}}

            event: thread.message.delta
            data: {"id":"msg_001","object":"thread.message.delta","delta":{"content":[{"index":0,"type":"text","text":{"value":"?"}}]}}

            event: thread.message.completed
            data: {"id":"msg_001","object":"thread.message","created_at":1710348076,"assistant_id":"asst_123","thread_id":"thread_123","run_id":"run_123","status":"completed","incomplete_details":null,"incomplete_at":null,"completed_at":1710348077,"role":"assistant","content":[{"type":"text","text":{"value":"Hello! How can I assist you today?","annotations":[]}}],"file_ids":[],"metadata":{}}

            event: thread.run.step.completed
            data: {"id":"step_001","object":"thread.run.step","created_at":1710348076,"run_id":"run_123","assistant_id":"asst_123","thread_id":"thread_123","type":"message_creation","status":"completed","cancelled_at":null,"completed_at":1710348077,"expires_at":1710348675,"failed_at":null,"last_error":null,"step_details":{"type":"message_creation","message_creation":{"message_id":"msg_001"}},"usage":{"prompt_tokens":20,"completion_tokens":11,"total_tokens":31}}

            event: thread.run.completed
            data: {"id":"run_123","object":"thread.run","created_at":1710348075,"assistant_id":"asst_123","thread_id":"thread_123","status":"completed","started_at":1710348075,"expires_at":null,"cancelled_at":null,"failed_at":null,"completed_at":1710348077,"required_action":null,"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[],"file_ids":[],"metadata":{},"usage":{"prompt_tokens":20,"completion_tokens":11,"total_tokens":31}}

            event: done
            data: [DONE]
      x-content-type: application/json
      x-accepts: application/json
  /threads/{thread_id}/runs/{run_id}:
    get:
      operationId: getRun
      parameters:
      - description: "The ID of the [thread](/docs/api-reference/threads) that was\
          \ run."
        explode: false
        in: path
        name: thread_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the run to retrieve.
        explode: false
        in: path
        name: run_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunObject'
          description: OK
      summary: Retrieves a run.
      tags:
      - Assistants
      x-oaiMeta:
        name: Retrieve run
        group: threads
        beta: true
        returns: "The [run](/docs/api-reference/runs/object) object matching the specified\
          \ ID."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123 \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "OpenAI-Beta: assistants=v1"
            python: |
              from openai import OpenAI
              client = OpenAI()

              run = client.beta.threads.runs.retrieve(
                thread_id="thread_abc123",
                run_id="run_abc123"
              )

              print(run)
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const run = await openai.beta.threads.runs.retrieve(
                  "thread_abc123",
                  "run_abc123"
                );

                console.log(run);
              }

              main();
          response: |
            {
              "id": "run_abc123",
              "object": "thread.run",
              "created_at": 1699075072,
              "assistant_id": "asst_abc123",
              "thread_id": "thread_abc123",
              "status": "completed",
              "started_at": 1699075072,
              "expires_at": null,
              "cancelled_at": null,
              "failed_at": null,
              "completed_at": 1699075073,
              "last_error": null,
              "model": "gpt-4-turbo",
              "instructions": null,
              "incomplete_details": null,
              "tools": [
                {
                  "type": "code_interpreter"
                }
              ],
              "file_ids": [
                "file-abc123",
                "file-abc456"
              ],
              "metadata": {},
              "usage": {
                "prompt_tokens": 123,
                "completion_tokens": 456,
                "total_tokens": 579
              },
              "temperature": 1,
              "max_prompt_tokens": 1000,
              "max_completion_tokens": 1000,
              "truncation_strategy": {
                "type": "auto",
                "last_messages": null
              },
              "response_format": "auto",
              "tool_choice": "auto"
            }
      x-accepts: application/json
    post:
      operationId: modifyRun
      parameters:
      - description: "The ID of the [thread](/docs/api-reference/threads) that was\
          \ run."
        explode: false
        in: path
        name: thread_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the run to modify.
        explode: false
        in: path
        name: run_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyRunRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunObject'
          description: OK
      summary: Modifies a run.
      tags:
      - Assistants
      x-oaiMeta:
        name: Modify run
        group: threads
        beta: true
        returns: "The modified [run](/docs/api-reference/runs/object) object matching\
          \ the specified ID."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123 \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -H "OpenAI-Beta: assistants=v1" \
                -d '{
                  "metadata": {
                    "user_id": "user_abc123"
                  }
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              run = client.beta.threads.runs.update(
                thread_id="thread_abc123",
                run_id="run_abc123",
                metadata={"user_id": "user_abc123"},
              )

              print(run)
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const run = await openai.beta.threads.runs.update(
                  "thread_abc123",
                  "run_abc123",
                  {
                    metadata: {
                      user_id: "user_abc123",
                    },
                  }
                );

                console.log(run);
              }

              main();
          response: |
            {
              "id": "run_abc123",
              "object": "thread.run",
              "created_at": 1699075072,
              "assistant_id": "asst_abc123",
              "thread_id": "thread_abc123",
              "status": "completed",
              "started_at": 1699075072,
              "expires_at": null,
              "cancelled_at": null,
              "failed_at": null,
              "completed_at": 1699075073,
              "last_error": null,
              "model": "gpt-4-turbo",
              "instructions": null,
              "incomplete_details": null,
              "tools": [
                {
                  "type": "code_interpreter"
                }
              ],
              "file_ids": [
                "file-abc123",
                "file-abc456"
              ],
              "metadata": {
                "user_id": "user_abc123"
              },
              "usage": {
                "prompt_tokens": 123,
                "completion_tokens": 456,
                "total_tokens": 579
              },
              "temperature": 1,
              "max_prompt_tokens": 1000,
              "max_completion_tokens": 1000,
              "truncation_strategy": {
                "type": "auto",
                "last_messages": null
              },
              "response_format": "auto",
              "tool_choice": "auto"
            }
      x-content-type: application/json
      x-accepts: application/json
  /threads/{thread_id}/runs/{run_id}/submit_tool_outputs:
    post:
      operationId: submitToolOuputsToRun
      parameters:
      - description: "The ID of the [thread](/docs/api-reference/threads) to which\
          \ this run belongs."
        explode: false
        in: path
        name: thread_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the run that requires the tool output submission.
        explode: false
        in: path
        name: run_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitToolOutputsRunRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunObject'
          description: OK
      summary: |
        When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
      tags:
      - Assistants
      x-oaiMeta:
        name: Submit tool outputs to run
        group: threads
        beta: true
        returns: "The modified [run](/docs/api-reference/runs/object) object matching\
          \ the specified ID."
        examples:
        - title: Default
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_123/runs/run_123/submit_tool_outputs \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -H "OpenAI-Beta: assistants=v1" \
                -d '{
                  "tool_outputs": [
                    {
                      "tool_call_id": "call_001",
                      "output": "70 degrees and sunny."
                    }
                  ]
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              run = client.beta.threads.runs.submit_tool_outputs(
                thread_id="thread_123",
                run_id="run_123",
                tool_outputs=[
                  {
                    "tool_call_id": "call_001",
                    "output": "70 degrees and sunny."
                  }
                ]
              )

              print(run)
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const run = await openai.beta.threads.runs.submitToolOutputs(
                  "thread_123",
                  "run_123",
                  {
                    tool_outputs: [
                      {
                        tool_call_id: "call_001",
                        output: "70 degrees and sunny.",
                      },
                    ],
                  }
                );

                console.log(run);
              }

              main();
          response: |
            {
              "id": "run_123",
              "object": "thread.run",
              "created_at": 1699075592,
              "assistant_id": "asst_123",
              "thread_id": "thread_123",
              "status": "queued",
              "started_at": 1699075592,
              "expires_at": 1699076192,
              "cancelled_at": null,
              "failed_at": null,
              "completed_at": null,
              "last_error": null,
              "model": "gpt-4-turbo",
              "instructions": null,
              "incomplete_details": null,
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_current_weather",
                    "description": "Get the current weather in a given location",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "location": {
                          "type": "string",
                          "description": "The city and state, e.g. San Francisco, CA"
                        },
                        "unit": {
                          "type": "string",
                          "enum": ["celsius", "fahrenheit"]
                        }
                      },
                      "required": ["location"]
                    }
                  }
                }
              ],
              "file_ids": [],
              "metadata": {},
              "usage": null,
              "temperature": 1,
              "max_prompt_tokens": 1000,
              "max_completion_tokens": 1000,
              "truncation_strategy": {
                "type": "auto",
                "last_messages": null
              },
              "response_format": "auto",
              "tool_choice": "auto"
            }
        - title: Streaming
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_123/runs/run_123/submit_tool_outputs \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -H "OpenAI-Beta: assistants=v1" \
                -d '{
                  "tool_outputs": [
                    {
                      "tool_call_id": "call_001",
                      "output": "70 degrees and sunny."
                    }
                  ],
                  "stream": true
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              stream = client.beta.threads.runs.submit_tool_outputs(
                thread_id="thread_123",
                run_id="run_123",
                tool_outputs=[
                  {
                    "tool_call_id": "call_001",
                    "output": "70 degrees and sunny."
                  }
                ],
                stream=True
              )

              for event in stream:
                print(event)
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const stream = await openai.beta.threads.runs.submitToolOutputs(
                  "thread_123",
                  "run_123",
                  {
                    tool_outputs: [
                      {
                        tool_call_id: "call_001",
                        output: "70 degrees and sunny.",
                      },
                    ],
                  }
                );

                for await (const event of stream) {
                  console.log(event);
                }
              }

              main();
          response: |
            event: thread.run.step.completed
            data: {"id":"step_001","object":"thread.run.step","created_at":1710352449,"run_id":"run_123","assistant_id":"asst_123","thread_id":"thread_123","type":"tool_calls","status":"completed","cancelled_at":null,"completed_at":1710352475,"expires_at":1710353047,"failed_at":null,"last_error":null,"step_details":{"type":"tool_calls","tool_calls":[{"id":"call_iWr0kQ2EaYMaxNdl0v3KYkx7","type":"function","function":{"name":"get_current_weather","arguments":"{\"location\":\"San Francisco, CA\",\"unit\":\"fahrenheit\"}","output":"70 degrees and sunny."}}]},"usage":{"prompt_tokens":291,"completion_tokens":24,"total_tokens":315}}

            event: thread.run.queued
            data: {"id":"run_123","object":"thread.run","created_at":1710352447,"assistant_id":"asst_123","thread_id":"thread_123","status":"queued","started_at":1710352448,"expires_at":1710353047,"cancelled_at":null,"failed_at":null,"completed_at":null,"required_action":null,"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[{"type":"function","function":{"name":"get_current_weather","description":"Get the current weather in a given location","parameters":{"type":"object","properties":{"location":{"type":"string","description":"The city and state, e.g. San Francisco, CA"},"unit":{"type":"string","enum":["celsius","fahrenheit"]}},"required":["location"]}}}],"file_ids":[],"metadata":{},"usage":null}

            event: thread.run.in_progress
            data: {"id":"run_123","object":"thread.run","created_at":1710352447,"assistant_id":"asst_123","thread_id":"thread_123","status":"in_progress","started_at":1710352475,"expires_at":1710353047,"cancelled_at":null,"failed_at":null,"completed_at":null,"required_action":null,"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[{"type":"function","function":{"name":"get_current_weather","description":"Get the current weather in a given location","parameters":{"type":"object","properties":{"location":{"type":"string","description":"The city and state, e.g. San Francisco, CA"},"unit":{"type":"string","enum":["celsius","fahrenheit"]}},"required":["location"]}}}],"file_ids":[],"metadata":{},"usage":null}

            event: thread.run.step.created
            data: {"id":"step_002","object":"thread.run.step","created_at":1710352476,"run_id":"run_123","assistant_id":"asst_123","thread_id":"thread_123","type":"message_creation","status":"in_progress","cancelled_at":null,"completed_at":null,"expires_at":1710353047,"failed_at":null,"last_error":null,"step_details":{"type":"message_creation","message_creation":{"message_id":"msg_002"}},"usage":null}

            event: thread.run.step.in_progress
            data: {"id":"step_002","object":"thread.run.step","created_at":1710352476,"run_id":"run_123","assistant_id":"asst_123","thread_id":"thread_123","type":"message_creation","status":"in_progress","cancelled_at":null,"completed_at":null,"expires_at":1710353047,"failed_at":null,"last_error":null,"step_details":{"type":"message_creation","message_creation":{"message_id":"msg_002"}},"usage":null}

            event: thread.message.created
            data: {"id":"msg_002","object":"thread.message","created_at":1710352476,"assistant_id":"asst_123","thread_id":"thread_123","run_id":"run_123","status":"in_progress","incomplete_details":null,"incomplete_at":null,"completed_at":null,"role":"assistant","content":[],"file_ids":[],"metadata":{}}

            event: thread.message.in_progress
            data: {"id":"msg_002","object":"thread.message","created_at":1710352476,"assistant_id":"asst_123","thread_id":"thread_123","run_id":"run_123","status":"in_progress","incomplete_details":null,"incomplete_at":null,"completed_at":null,"role":"assistant","content":[],"file_ids":[],"metadata":{}}

            event: thread.message.delta
            data: {"id":"msg_002","object":"thread.message.delta","delta":{"content":[{"index":0,"type":"text","text":{"value":"The","annotations":[]}}]}}

            event: thread.message.delta
            data: {"id":"msg_002","object":"thread.message.delta","delta":{"content":[{"index":0,"type":"text","text":{"value":" current"}}]}}

            event: thread.message.delta
            data: {"id":"msg_002","object":"thread.message.delta","delta":{"content":[{"index":0,"type":"text","text":{"value":" weather"}}]}}

            ...

            event: thread.message.delta
            data: {"id":"msg_002","object":"thread.message.delta","delta":{"content":[{"index":0,"type":"text","text":{"value":" sunny"}}]}}

            event: thread.message.delta
            data: {"id":"msg_002","object":"thread.message.delta","delta":{"content":[{"index":0,"type":"text","text":{"value":"."}}]}}

            event: thread.message.completed
            data: {"id":"msg_002","object":"thread.message","created_at":1710352476,"assistant_id":"asst_123","thread_id":"thread_123","run_id":"run_123","status":"completed","incomplete_details":null,"incomplete_at":null,"completed_at":1710352477,"role":"assistant","content":[{"type":"text","text":{"value":"The current weather in San Francisco, CA is 70 degrees Fahrenheit and sunny.","annotations":[]}}],"file_ids":[],"metadata":{}}

            event: thread.run.step.completed
            data: {"id":"step_002","object":"thread.run.step","created_at":1710352476,"run_id":"run_123","assistant_id":"asst_123","thread_id":"thread_123","type":"message_creation","status":"completed","cancelled_at":null,"completed_at":1710352477,"expires_at":1710353047,"failed_at":null,"last_error":null,"step_details":{"type":"message_creation","message_creation":{"message_id":"msg_002"}},"usage":{"prompt_tokens":329,"completion_tokens":18,"total_tokens":347}}

            event: thread.run.completed
            data: {"id":"run_123","object":"thread.run","created_at":1710352447,"assistant_id":"asst_123","thread_id":"thread_123","status":"completed","started_at":1710352475,"expires_at":null,"cancelled_at":null,"failed_at":null,"completed_at":1710352477,"required_action":null,"last_error":null,"model":"gpt-4-turbo","instructions":null,"tools":[{"type":"function","function":{"name":"get_current_weather","description":"Get the current weather in a given location","parameters":{"type":"object","properties":{"location":{"type":"string","description":"The city and state, e.g. San Francisco, CA"},"unit":{"type":"string","enum":["celsius","fahrenheit"]}},"required":["location"]}}}],"file_ids":[],"metadata":{},"usage":{"prompt_tokens":620,"completion_tokens":42,"total_tokens":662}}

            event: done
            data: [DONE]
      x-content-type: application/json
      x-accepts: application/json
  /threads/{thread_id}/runs/{run_id}/cancel:
    post:
      operationId: cancelRun
      parameters:
      - description: The ID of the thread to which this run belongs.
        explode: false
        in: path
        name: thread_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the run to cancel.
        explode: false
        in: path
        name: run_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunObject'
          description: OK
      summary: Cancels a run that is `in_progress`.
      tags:
      - Assistants
      x-oaiMeta:
        name: Cancel a run
        group: threads
        beta: true
        returns: "The modified [run](/docs/api-reference/runs/object) object matching\
          \ the specified ID."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123/cancel \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "OpenAI-Beta: assistants=v1" \
                -X POST
            python: |
              from openai import OpenAI
              client = OpenAI()

              run = client.beta.threads.runs.cancel(
                thread_id="thread_abc123",
                run_id="run_abc123"
              )

              print(run)
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const run = await openai.beta.threads.runs.cancel(
                  "thread_abc123",
                  "run_abc123"
                );

                console.log(run);
              }

              main();
          response: |
            {
              "id": "run_abc123",
              "object": "thread.run",
              "created_at": 1699076126,
              "assistant_id": "asst_abc123",
              "thread_id": "thread_abc123",
              "status": "cancelling",
              "started_at": 1699076126,
              "expires_at": 1699076726,
              "cancelled_at": null,
              "failed_at": null,
              "completed_at": null,
              "last_error": null,
              "model": "gpt-4-turbo",
              "instructions": "You summarize books.",
              "tools": [
                {
                  "type": "retrieval"
                }
              ],
              "file_ids": [],
              "metadata": {},
              "usage": null,
              "temperature": 1
            }
      x-accepts: application/json
  /threads/{thread_id}/runs/{run_id}/steps:
    get:
      operationId: listRunSteps
      parameters:
      - description: The ID of the thread the run and run steps belong to.
        explode: false
        in: path
        name: thread_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the run the run steps belong to.
        explode: false
        in: path
        name: run_id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      - description: |
          Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: |
          A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRunStepsResponse'
          description: OK
      summary: Returns a list of run steps belonging to a run.
      tags:
      - Assistants
      x-oaiMeta:
        name: List run steps
        group: threads
        beta: true
        returns: "A list of [run step](/docs/api-reference/runs/step-object) objects."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123/steps \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -H "OpenAI-Beta: assistants=v1"
            python: |
              from openai import OpenAI
              client = OpenAI()

              run_steps = client.beta.threads.runs.steps.list(
                  thread_id="thread_abc123",
                  run_id="run_abc123"
              )

              print(run_steps)
            node.js: |
              import OpenAI from "openai";
              const openai = new OpenAI();

              async function main() {
                const runStep = await openai.beta.threads.runs.steps.list(
                  "thread_abc123",
                  "run_abc123"
                );
                console.log(runStep);
              }

              main();
          response: |
            {
              "object": "list",
              "data": [
                {
                  "id": "step_abc123",
                  "object": "thread.run.step",
                  "created_at": 1699063291,
                  "run_id": "run_abc123",
                  "assistant_id": "asst_abc123",
                  "thread_id": "thread_abc123",
                  "type": "message_creation",
                  "status": "completed",
                  "cancelled_at": null,
                  "completed_at": 1699063291,
                  "expired_at": null,
                  "failed_at": null,
                  "last_error": null,
                  "step_details": {
                    "type": "message_creation",
                    "message_creation": {
                      "message_id": "msg_abc123"
                    }
                  },
                  "usage": {
                    "prompt_tokens": 123,
                    "completion_tokens": 456,
                    "total_tokens": 579
                  }
                }
              ],
              "first_id": "step_abc123",
              "last_id": "step_abc456",
              "has_more": false
            }
      x-accepts: application/json
  /threads/{thread_id}/runs/{run_id}/steps/{step_id}:
    get:
      operationId: getRunStep
      parameters:
      - description: The ID of the thread to which the run and run step belongs.
        explode: false
        in: path
        name: thread_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the run to which the run step belongs.
        explode: false
        in: path
        name: run_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the run step to retrieve.
        explode: false
        in: path
        name: step_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunStepObject'
          description: OK
      summary: Retrieves a run step.
      tags:
      - Assistants
      x-oaiMeta:
        name: Retrieve run step
        group: threads
        beta: true
        returns: "The [run step](/docs/api-reference/runs/step-object) object matching\
          \ the specified ID."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123/steps/step_abc123 \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -H "OpenAI-Beta: assistants=v1"
            python: |
              from openai import OpenAI
              client = OpenAI()

              run_step = client.beta.threads.runs.steps.retrieve(
                  thread_id="thread_abc123",
                  run_id="run_abc123",
                  step_id="step_abc123"
              )

              print(run_step)
            node.js: |
              import OpenAI from "openai";
              const openai = new OpenAI();

              async function main() {
                const runStep = await openai.beta.threads.runs.steps.retrieve(
                  "thread_abc123",
                  "run_abc123",
                  "step_abc123"
                );
                console.log(runStep);
              }

              main();
          response: |
            {
              "id": "step_abc123",
              "object": "thread.run.step",
              "created_at": 1699063291,
              "run_id": "run_abc123",
              "assistant_id": "asst_abc123",
              "thread_id": "thread_abc123",
              "type": "message_creation",
              "status": "completed",
              "cancelled_at": null,
              "completed_at": 1699063291,
              "expired_at": null,
              "failed_at": null,
              "last_error": null,
              "step_details": {
                "type": "message_creation",
                "message_creation": {
                  "message_id": "msg_abc123"
                }
              },
              "usage": {
                "prompt_tokens": 123,
                "completion_tokens": 456,
                "total_tokens": 579
              }
            }
      x-accepts: application/json
  /assistants/{assistant_id}/files:
    get:
      operationId: listAssistantFiles
      parameters:
      - description: The ID of the assistant the file belongs to.
        explode: false
        in: path
        name: assistant_id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      - description: |
          Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: |
          A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAssistantFilesResponse'
          description: OK
      summary: Returns a list of assistant files.
      tags:
      - Assistants
      x-oaiMeta:
        name: List assistant files
        group: assistants
        beta: true
        returns: "A list of [assistant file](/docs/api-reference/assistants/file-object)\
          \ objects."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/assistants/asst_abc123/files \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -H "OpenAI-Beta: assistants=v1"
            python: |
              from openai import OpenAI
              client = OpenAI()

              assistant_files = client.beta.assistants.files.list(
                assistant_id="asst_abc123"
              )
              print(assistant_files)
            node.js: |
              import OpenAI from "openai";
              const openai = new OpenAI();

              async function main() {
                const assistantFiles = await openai.beta.assistants.files.list(
                  "asst_abc123"
                );
                console.log(assistantFiles);
              }

              main();
          response: |
            {
              "object": "list",
              "data": [
                {
                  "id": "file-abc123",
                  "object": "assistant.file",
                  "created_at": 1699060412,
                  "assistant_id": "asst_abc123"
                },
                {
                  "id": "file-abc456",
                  "object": "assistant.file",
                  "created_at": 1699060412,
                  "assistant_id": "asst_abc123"
                }
              ],
              "first_id": "file-abc123",
              "last_id": "file-abc456",
              "has_more": false
            }
      x-accepts: application/json
    post:
      operationId: createAssistantFile
      parameters:
      - description: |
          The ID of the assistant for which to create a File.
        explode: false
        in: path
        name: assistant_id
        required: true
        schema:
          example: file-abc123
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssistantFileRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantFileObject'
          description: OK
      summary: "Create an assistant file by attaching a [File](/docs/api-reference/files)\
        \ to an [assistant](/docs/api-reference/assistants)."
      tags:
      - Assistants
      x-oaiMeta:
        name: Create assistant file
        group: assistants
        beta: true
        returns: "An [assistant file](/docs/api-reference/assistants/file-object)\
          \ object."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/assistants/asst_abc123/files \
                  -H 'Authorization: Bearer $OPENAI_API_KEY"' \
                  -H 'Content-Type: application/json' \
                  -H 'OpenAI-Beta: assistants=v1' \
                  -d '{
                    "file_id": "file-abc123"
                  }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              assistant_file = client.beta.assistants.files.create(
                assistant_id="asst_abc123",
                file_id="file-abc123"
              )
              print(assistant_file)
            node.js: |
              import OpenAI from "openai";
              const openai = new OpenAI();

              async function main() {
                const myAssistantFile = await openai.beta.assistants.files.create(
                  "asst_abc123",
                  {
                    file_id: "file-abc123"
                  }
                );
                console.log(myAssistantFile);
              }

              main();
          response: |
            {
              "id": "file-abc123",
              "object": "assistant.file",
              "created_at": 1699055364,
              "assistant_id": "asst_abc123"
            }
      x-content-type: application/json
      x-accepts: application/json
  /assistants/{assistant_id}/files/{file_id}:
    delete:
      operationId: deleteAssistantFile
      parameters:
      - description: The ID of the assistant that the file belongs to.
        explode: false
        in: path
        name: assistant_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the file to delete.
        explode: false
        in: path
        name: file_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAssistantFileResponse'
          description: OK
      summary: Delete an assistant file.
      tags:
      - Assistants
      x-oaiMeta:
        name: Delete assistant file
        group: assistants
        beta: true
        returns: Deletion status
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/assistants/asst_abc123/files/file-abc123 \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -H "OpenAI-Beta: assistants=v1" \
                -X DELETE
            python: |
              from openai import OpenAI
              client = OpenAI()

              deleted_assistant_file = client.beta.assistants.files.delete(
                  assistant_id="asst_abc123",
                  file_id="file-abc123"
              )
              print(deleted_assistant_file)
            node.js: |
              import OpenAI from "openai";
              const openai = new OpenAI();

              async function main() {
                const deletedAssistantFile = await openai.beta.assistants.files.del(
                  "asst_abc123",
                  "file-abc123"
                );
                console.log(deletedAssistantFile);
              }

              main();
          response: |
            {
              id: "file-abc123",
              object: "assistant.file.deleted",
              deleted: true
            }
      x-accepts: application/json
    get:
      operationId: getAssistantFile
      parameters:
      - description: The ID of the assistant who the file belongs to.
        explode: false
        in: path
        name: assistant_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the file we're getting.
        explode: false
        in: path
        name: file_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantFileObject'
          description: OK
      summary: Retrieves an AssistantFile.
      tags:
      - Assistants
      x-oaiMeta:
        name: Retrieve assistant file
        group: assistants
        beta: true
        returns: "The [assistant file](/docs/api-reference/assistants/file-object)\
          \ object matching the specified ID."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/assistants/asst_abc123/files/file-abc123 \
                -H 'Authorization: Bearer $OPENAI_API_KEY"' \
                -H 'Content-Type: application/json' \
                -H 'OpenAI-Beta: assistants=v1'
            python: |
              from openai import OpenAI
              client = OpenAI()

              assistant_file = client.beta.assistants.files.retrieve(
                assistant_id="asst_abc123",
                file_id="file-abc123"
              )
              print(assistant_file)
            node.js: |
              import OpenAI from "openai";
              const openai = new OpenAI();

              async function main() {
                const myAssistantFile = await openai.beta.assistants.files.retrieve(
                  "asst_abc123",
                  "file-abc123"
                );
                console.log(myAssistantFile);
              }

              main();
          response: |
            {
              "id": "file-abc123",
              "object": "assistant.file",
              "created_at": 1699055364,
              "assistant_id": "asst_abc123"
            }
      x-accepts: application/json
  /threads/{thread_id}/messages/{message_id}/files:
    get:
      operationId: listMessageFiles
      parameters:
      - description: The ID of the thread that the message and files belong to.
        explode: false
        in: path
        name: thread_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the message that the files belongs to.
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      - description: |
          Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: |
          A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessageFilesResponse'
          description: OK
      summary: Returns a list of message files.
      tags:
      - Assistants
      x-oaiMeta:
        name: List message files
        group: threads
        beta: true
        returns: "A list of [message file](/docs/api-reference/messages/file-object)\
          \ objects."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_abc123/messages/msg_abc123/files \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -H "OpenAI-Beta: assistants=v1"
            python: |
              from openai import OpenAI
              client = OpenAI()

              message_files = client.beta.threads.messages.files.list(
                thread_id="thread_abc123",
                message_id="msg_abc123"
              )
              print(message_files)
            node.js: |
              import OpenAI from "openai";
              const openai = new OpenAI();

              async function main() {
                const messageFiles = await openai.beta.threads.messages.files.list(
                  "thread_abc123",
                  "msg_abc123"
                );
                console.log(messageFiles);
              }

              main();
          response: |
            {
              "object": "list",
              "data": [
                {
                  "id": "file-abc123",
                  "object": "thread.message.file",
                  "created_at": 1699061776,
                  "message_id": "msg_abc123"
                },
                {
                  "id": "file-abc123",
                  "object": "thread.message.file",
                  "created_at": 1699061776,
                  "message_id": "msg_abc123"
                }
              ],
              "first_id": "file-abc123",
              "last_id": "file-abc123",
              "has_more": false
            }
      x-accepts: application/json
  /threads/{thread_id}/messages/{message_id}/files/{file_id}:
    get:
      operationId: getMessageFile
      parameters:
      - description: The ID of the thread to which the message and File belong.
        explode: false
        in: path
        name: thread_id
        required: true
        schema:
          example: thread_abc123
          type: string
        style: simple
      - description: The ID of the message the file belongs to.
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          example: msg_abc123
          type: string
        style: simple
      - description: The ID of the file being retrieved.
        explode: false
        in: path
        name: file_id
        required: true
        schema:
          example: file-abc123
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageFileObject'
          description: OK
      summary: Retrieves a message file.
      tags:
      - Assistants
      x-oaiMeta:
        name: Retrieve message file
        group: threads
        beta: true
        returns: "The [message file](/docs/api-reference/messages/file-object) object."
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/threads/thread_abc123/messages/msg_abc123/files/file-abc123 \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -H "OpenAI-Beta: assistants=v1"
            python: |
              from openai import OpenAI
              client = OpenAI()

              message_files = client.beta.threads.messages.files.retrieve(
                  thread_id="thread_abc123",
                  message_id="msg_abc123",
                  file_id="file-abc123"
              )
              print(message_files)
            node.js: |
              import OpenAI from "openai";
              const openai = new OpenAI();

              async function main() {
                const messageFile = await openai.beta.threads.messages.files.retrieve(
                  "thread_abc123",
                  "msg_abc123",
                  "file-abc123"
                );
                console.log(messageFile);
              }

              main();
          response: |
            {
              "id": "file-abc123",
              "object": "thread.message.file",
              "created_at": 1699061776,
              "message_id": "msg_abc123"
            }
      x-accepts: application/json
components:
  schemas:
    Error:
      properties:
        code:
          nullable: true
          type: string
        message:
          nullable: false
          type: string
        param:
          nullable: true
          type: string
        type:
          nullable: false
          type: string
      required:
      - code
      - message
      - param
      - type
      type: object
    ErrorResponse:
      properties:
        error:
          $ref: '#/components/schemas/Error'
      required:
      - error
      type: object
    ListModelsResponse:
      example:
        data:
        - created: 0
          owned_by: owned_by
          id: id
          object: model
        - created: 0
          owned_by: owned_by
          id: id
          object: model
        object: list
      properties:
        object:
          enum:
          - list
          type: string
        data:
          items:
            $ref: '#/components/schemas/Model'
          type: array
      required:
      - data
      - object
      type: object
    DeleteModelResponse:
      example:
        deleted: true
        id: id
        object: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
      required:
      - deleted
      - id
      - object
      type: object
    CreateCompletionRequest:
      example:
        logit_bias:
          key: 1
        seed: -2147483648
        max_tokens: 16
        presence_penalty: 0.25495066265333133
        echo: false
        suffix: test.
        "n": 1
        logprobs: 2
        top_p: 1
        frequency_penalty: 0.4109824732281613
        best_of: 1
        stop: |2+

        stream: false
        temperature: 1
        model: CreateCompletionRequest_model
        prompt: This is a test.
        user: user-1234
      properties:
        model:
          $ref: '#/components/schemas/CreateCompletionRequest_model'
        prompt:
          $ref: '#/components/schemas/CreateCompletionRequest_prompt'
        best_of:
          default: 1
          description: |
            Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.

            When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.

            **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
          maximum: 20
          minimum: 0
          nullable: true
          type: integer
        echo:
          default: false
          description: |
            Echo back the prompt in addition to the completion
          nullable: true
          type: boolean
        frequency_penalty:
          default: 0
          description: |
            Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.

            [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
          maximum: 2
          minimum: -2
          nullable: true
          type: number
        logit_bias:
          additionalProperties:
            type: integer
          description: |
            Modify the likelihood of specified tokens appearing in the completion.

            Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.

            As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
          nullable: true
          type: object
          x-oaiTypeLabel: map
        logprobs:
          description: |
            Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.

            The maximum value for `logprobs` is 5.
          maximum: 5
          minimum: 0
          nullable: true
          type: integer
        max_tokens:
          default: 16
          description: |
            The maximum number of [tokens](/tokenizer) that can be generated in the completion.

            The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
          example: 16
          minimum: 0
          nullable: true
          type: integer
        "n":
          default: 1
          description: |
            How many completions to generate for each prompt.

            **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
          example: 1
          maximum: 128
          minimum: 1
          nullable: true
          type: integer
        presence_penalty:
          default: 0
          description: |
            Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.

            [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
          maximum: 2
          minimum: -2
          nullable: true
          type: number
        seed:
          description: |
            If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.

            Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          nullable: true
          type: integer
        stop:
          $ref: '#/components/schemas/CreateCompletionRequest_stop'
        stream:
          default: false
          description: |
            Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
          nullable: true
          type: boolean
        suffix:
          description: |
            The suffix that comes after a completion of inserted text.

            This parameter is only supported for `gpt-3.5-turbo-instruct`.
          example: test.
          nullable: true
          type: string
        temperature:
          default: 1
          description: |
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        top_p:
          default: 1
          description: |
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or `temperature` but not both.
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
        user:
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
          example: user-1234
          type: string
      required:
      - model
      - prompt
      type: object
    CreateCompletionResponse:
      description: |
        Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).
      example:
        created: 5
        usage:
          completion_tokens: 7
          prompt_tokens: 9
          total_tokens: 3
        model: model
        id: id
        choices:
        - finish_reason: stop
          index: 0
          text: text
          logprobs:
            top_logprobs:
            - key: 5.962133916683182
            - key: 5.962133916683182
            token_logprobs:
            - 1.4658129805029452
            - 1.4658129805029452
            tokens:
            - tokens
            - tokens
            text_offset:
            - 6
            - 6
        - finish_reason: stop
          index: 0
          text: text
          logprobs:
            top_logprobs:
            - key: 5.962133916683182
            - key: 5.962133916683182
            token_logprobs:
            - 1.4658129805029452
            - 1.4658129805029452
            tokens:
            - tokens
            - tokens
            text_offset:
            - 6
            - 6
        system_fingerprint: system_fingerprint
        object: text_completion
      properties:
        id:
          description: A unique identifier for the completion.
          type: string
        choices:
          description: The list of completion choices the model generated for the
            input prompt.
          items:
            $ref: '#/components/schemas/CreateCompletionResponse_choices_inner'
          type: array
        created:
          description: The Unix timestamp (in seconds) of when the completion was
            created.
          type: integer
        model:
          description: The model used for completion.
          type: string
        system_fingerprint:
          description: |
            This fingerprint represents the backend configuration that the model runs with.

            Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
          type: string
        object:
          description: "The object type, which is always \"text_completion\""
          enum:
          - text_completion
          type: string
        usage:
          $ref: '#/components/schemas/CompletionUsage'
      required:
      - choices
      - created
      - id
      - model
      - object
      type: object
      x-oaiMeta:
        name: The completion object
        legacy: true
        example: |
          {
            "id": "cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7",
            "object": "text_completion",
            "created": 1589478378,
            "model": "gpt-4-turbo",
            "choices": [
              {
                "text": "\n\nThis is indeed a test",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
              }
            ],
            "usage": {
              "prompt_tokens": 5,
              "completion_tokens": 7,
              "total_tokens": 12
            }
          }
    ChatCompletionRequestMessageContentPart:
      oneOf:
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartImage'
      x-oaiExpandable: true
    ChatCompletionRequestMessageContentPartImage:
      properties:
        type:
          description: The type of the content part.
          enum:
          - image_url
          type: string
        image_url:
          $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartImage_image_url'
      required:
      - image_url
      - type
      title: Image content part
      type: object
    ChatCompletionRequestMessageContentPartText:
      properties:
        type:
          description: The type of the content part.
          enum:
          - text
          type: string
        text:
          description: The text content.
          type: string
      required:
      - text
      - type
      title: Text content part
      type: object
    ChatCompletionRequestMessage:
      oneOf:
      - $ref: '#/components/schemas/ChatCompletionRequestSystemMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestUserMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestToolMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestFunctionMessage'
      x-oaiExpandable: true
    ChatCompletionRequestSystemMessage:
      example:
        role: system
        name: name
        content: content
      properties:
        content:
          description: The contents of the system message.
          type: string
        role:
          description: "The role of the messages author, in this case `system`."
          enum:
          - system
          type: string
        name:
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
          type: string
      required:
      - content
      - role
      title: System message
      type: object
    ChatCompletionRequestUserMessage:
      properties:
        content:
          $ref: '#/components/schemas/ChatCompletionRequestUserMessage_content'
        role:
          description: "The role of the messages author, in this case `user`."
          enum:
          - user
          type: string
        name:
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
          type: string
      required:
      - content
      - role
      title: User message
      type: object
    ChatCompletionRequestAssistantMessage:
      properties:
        content:
          description: |
            The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
          nullable: true
          type: string
        role:
          description: "The role of the messages author, in this case `assistant`."
          enum:
          - assistant
          type: string
        name:
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
          type: string
        tool_calls:
          description: "The tool calls generated by the model, such as function calls."
          items:
            $ref: '#/components/schemas/ChatCompletionMessageToolCall'
          type: array
        function_call:
          $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage_function_call'
      required:
      - role
      title: Assistant message
      type: object
    ChatCompletionRequestToolMessage:
      properties:
        role:
          description: "The role of the messages author, in this case `tool`."
          enum:
          - tool
          type: string
        content:
          description: The contents of the tool message.
          type: string
        tool_call_id:
          description: Tool call that this message is responding to.
          type: string
      required:
      - content
      - role
      - tool_call_id
      title: Tool message
      type: object
    ChatCompletionRequestFunctionMessage:
      deprecated: true
      properties:
        role:
          description: "The role of the messages author, in this case `function`."
          enum:
          - function
          type: string
        content:
          description: The contents of the function message.
          nullable: true
          type: string
        name:
          description: The name of the function to call.
          type: string
      required:
      - content
      - name
      - role
      title: Function message
      type: object
    FunctionParameters:
      additionalProperties: true
      description: "The parameters the functions accepts, described as a JSON Schema\
        \ object. See the [guide](/docs/guides/text-generation/function-calling) for\
        \ examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/)\
        \ for documentation about the format. \n\nOmitting `parameters` defines a\
        \ function with an empty parameter list."
      type: object
    ChatCompletionFunctions:
      deprecated: true
      example:
        name: name
        description: description
        parameters:
          key: ""
      properties:
        description:
          description: "A description of what the function does, used by the model\
            \ to choose when and how to call the function."
          type: string
        name:
          description: "The name of the function to be called. Must be a-z, A-Z, 0-9,\
            \ or contain underscores and dashes, with a maximum length of 64."
          type: string
        parameters:
          additionalProperties: true
          description: "The parameters the functions accepts, described as a JSON\
            \ Schema object. See the [guide](/docs/guides/text-generation/function-calling)\
            \ for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/)\
            \ for documentation about the format. \n\nOmitting `parameters` defines\
            \ a function with an empty parameter list."
          type: object
      required:
      - name
      type: object
    ChatCompletionFunctionCallOption:
      description: |
        Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
      properties:
        name:
          description: The name of the function to call.
          type: string
      required:
      - name
      type: object
    ChatCompletionTool:
      example:
        function:
          name: name
          description: description
          parameters:
            key: ""
        type: function
      properties:
        type:
          description: "The type of the tool. Currently, only `function` is supported."
          enum:
          - function
          type: string
        function:
          $ref: '#/components/schemas/FunctionObject'
      required:
      - function
      - type
      type: object
    FunctionObject:
      example:
        name: name
        description: description
        parameters:
          key: ""
      properties:
        description:
          description: "A description of what the function does, used by the model\
            \ to choose when and how to call the function."
          type: string
        name:
          description: "The name of the function to be called. Must be a-z, A-Z, 0-9,\
            \ or contain underscores and dashes, with a maximum length of 64."
          type: string
        parameters:
          additionalProperties: true
          description: "The parameters the functions accepts, described as a JSON\
            \ Schema object. See the [guide](/docs/guides/text-generation/function-calling)\
            \ for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/)\
            \ for documentation about the format. \n\nOmitting `parameters` defines\
            \ a function with an empty parameter list."
          type: object
      required:
      - name
      type: object
    ChatCompletionToolChoiceOption:
      description: |
        Controls which (if any) function is called by the model.
        `none` means the model will not call a function and instead generates a message.
        `auto` means the model can pick between generating a message or calling a function.
        Specifying a particular function via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that function.

        `none` is the default when no functions are present. `auto` is the default if functions are present.
      oneOf:
      - description: |
          `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
        enum:
        - none
        - auto
        type: string
      - $ref: '#/components/schemas/ChatCompletionNamedToolChoice'
      x-oaiExpandable: true
    ChatCompletionNamedToolChoice:
      description: Specifies a tool the model should use. Use to force the model to
        call a specific function.
      properties:
        type:
          description: "The type of the tool. Currently, only `function` is supported."
          enum:
          - function
          type: string
        function:
          $ref: '#/components/schemas/ChatCompletionNamedToolChoice_function'
      required:
      - function
      - type
      type: object
    ChatCompletionMessageToolCalls:
      description: "The tool calls generated by the model, such as function calls."
      items:
        $ref: '#/components/schemas/ChatCompletionMessageToolCall'
      type: array
    ChatCompletionMessageToolCall:
      example:
        function:
          name: name
          arguments: arguments
        id: id
        type: function
      properties:
        id:
          description: The ID of the tool call.
          type: string
        type:
          description: "The type of the tool. Currently, only `function` is supported."
          enum:
          - function
          type: string
        function:
          $ref: '#/components/schemas/ChatCompletionMessageToolCall_function'
      required:
      - function
      - id
      - type
      type: object
    ChatCompletionMessageToolCallChunk:
      properties:
        index:
          type: integer
        id:
          description: The ID of the tool call.
          type: string
        type:
          description: "The type of the tool. Currently, only `function` is supported."
          enum:
          - function
          type: string
        function:
          $ref: '#/components/schemas/ChatCompletionMessageToolCallChunk_function'
      required:
      - index
      type: object
    ChatCompletionRole:
      description: The role of the author of a message
      enum:
      - system
      - user
      - assistant
      - tool
      - function
      type: string
    ChatCompletionResponseMessage:
      description: A chat completion message generated by the model.
      example:
        role: assistant
        function_call:
          name: name
          arguments: arguments
        tool_calls:
        - function:
            name: name
            arguments: arguments
          id: id
          type: function
        - function:
            name: name
            arguments: arguments
          id: id
          type: function
        content: content
      properties:
        content:
          description: The contents of the message.
          nullable: true
          type: string
        tool_calls:
          description: "The tool calls generated by the model, such as function calls."
          items:
            $ref: '#/components/schemas/ChatCompletionMessageToolCall'
          type: array
        role:
          description: The role of the author of this message.
          enum:
          - assistant
          type: string
        function_call:
          $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage_function_call'
      required:
      - content
      - role
      type: object
    ChatCompletionStreamResponseDelta:
      description: A chat completion delta generated by streamed model responses.
      properties:
        content:
          description: The contents of the chunk message.
          nullable: true
          type: string
        function_call:
          $ref: '#/components/schemas/ChatCompletionStreamResponseDelta_function_call'
        tool_calls:
          items:
            $ref: '#/components/schemas/ChatCompletionMessageToolCallChunk'
          type: array
        role:
          description: The role of the author of this message.
          enum:
          - system
          - user
          - assistant
          - tool
          type: string
      type: object
    CreateChatCompletionRequest:
      example:
        top_logprobs: 2
        logit_bias:
          key: 6
        seed: -2147483648
        functions:
        - name: name
          description: description
          parameters:
            key: ""
        - name: name
          description: description
          parameters:
            key: ""
        - name: name
          description: description
          parameters:
            key: ""
        - name: name
          description: description
          parameters:
            key: ""
        - name: name
          description: description
          parameters:
            key: ""
        max_tokens: 5
        function_call: none
        presence_penalty: 0.25495066265333133
        tools:
        - function:
            name: name
            description: description
            parameters:
              key: ""
          type: function
        - function:
            name: name
            description: description
            parameters:
              key: ""
          type: function
        "n": 1
        logprobs: false
        top_p: 1
        frequency_penalty: -1.6796687238155954
        response_format:
          type: json_object
        stop: CreateChatCompletionRequest_stop
        stream: false
        temperature: 1
        messages:
        - role: system
          name: name
          content: content
        - role: system
          name: name
          content: content
        tool_choice: none
        model: gpt-4-turbo
        user: user-1234
      properties:
        messages:
          description: "A list of messages comprising the conversation so far. [Example\
            \ Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models)."
          items:
            $ref: '#/components/schemas/ChatCompletionRequestMessage'
          minItems: 1
          type: array
        model:
          $ref: '#/components/schemas/CreateChatCompletionRequest_model'
        frequency_penalty:
          default: 0
          description: |
            Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.

            [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
          maximum: 2
          minimum: -2
          nullable: true
          type: number
        logit_bias:
          additionalProperties:
            type: integer
          description: |
            Modify the likelihood of specified tokens appearing in the completion.

            Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
          nullable: true
          type: object
          x-oaiTypeLabel: map
        logprobs:
          default: false
          description: "Whether to return log probabilities of the output tokens or\
            \ not. If true, returns the log probabilities of each output token returned\
            \ in the `content` of `message`."
          nullable: true
          type: boolean
        top_logprobs:
          description: "An integer between 0 and 20 specifying the number of most\
            \ likely tokens to return at each token position, each with an associated\
            \ log probability. `logprobs` must be set to `true` if this parameter\
            \ is used."
          maximum: 20
          minimum: 0
          nullable: true
          type: integer
        max_tokens:
          description: |
            The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.

            The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
          nullable: true
          type: integer
        "n":
          default: 1
          description: How many chat completion choices to generate for each input
            message. Note that you will be charged based on the number of generated
            tokens across all of the choices. Keep `n` as `1` to minimize costs.
          example: 1
          maximum: 128
          minimum: 1
          nullable: true
          type: integer
        presence_penalty:
          default: 0
          description: |
            Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.

            [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
          maximum: 2
          minimum: -2
          nullable: true
          type: number
        response_format:
          $ref: '#/components/schemas/CreateChatCompletionRequest_response_format'
        seed:
          description: |
            This feature is in Beta.
            If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
            Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          nullable: true
          type: integer
          x-oaiMeta:
            beta: true
        stop:
          $ref: '#/components/schemas/CreateChatCompletionRequest_stop'
        stream:
          default: false
          description: |
            If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
          nullable: true
          type: boolean
        temperature:
          default: 1
          description: |
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        top_p:
          default: 1
          description: |
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or `temperature` but not both.
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
        tools:
          description: |
            A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
          items:
            $ref: '#/components/schemas/ChatCompletionTool'
          type: array
        tool_choice:
          $ref: '#/components/schemas/ChatCompletionToolChoiceOption'
        user:
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
          example: user-1234
          type: string
        function_call:
          $ref: '#/components/schemas/CreateChatCompletionRequest_function_call'
        functions:
          deprecated: true
          description: |
            Deprecated in favor of `tools`.

            A list of functions the model may generate JSON inputs for.
          items:
            $ref: '#/components/schemas/ChatCompletionFunctions'
          maxItems: 128
          minItems: 1
          type: array
      required:
      - messages
      - model
      type: object
    CreateChatCompletionResponse:
      description: "Represents a chat completion response returned by model, based\
        \ on the provided input."
      example:
        created: 2
        usage:
          completion_tokens: 7
          prompt_tokens: 9
          total_tokens: 3
        model: model
        id: id
        choices:
        - finish_reason: stop
          index: 0
          message:
            role: assistant
            function_call:
              name: name
              arguments: arguments
            tool_calls:
            - function:
                name: name
                arguments: arguments
              id: id
              type: function
            - function:
                name: name
                arguments: arguments
              id: id
              type: function
            content: content
          logprobs:
            content:
            - top_logprobs:
              - logprob: 5.962133916683182
                bytes:
                - 5
                - 5
                token: token
              - logprob: 5.962133916683182
                bytes:
                - 5
                - 5
                token: token
              logprob: 6.027456183070403
              bytes:
              - 1
              - 1
              token: token
            - top_logprobs:
              - logprob: 5.962133916683182
                bytes:
                - 5
                - 5
                token: token
              - logprob: 5.962133916683182
                bytes:
                - 5
                - 5
                token: token
              logprob: 6.027456183070403
              bytes:
              - 1
              - 1
              token: token
        - finish_reason: stop
          index: 0
          message:
            role: assistant
            function_call:
              name: name
              arguments: arguments
            tool_calls:
            - function:
                name: name
                arguments: arguments
              id: id
              type: function
            - function:
                name: name
                arguments: arguments
              id: id
              type: function
            content: content
          logprobs:
            content:
            - top_logprobs:
              - logprob: 5.962133916683182
                bytes:
                - 5
                - 5
                token: token
              - logprob: 5.962133916683182
                bytes:
                - 5
                - 5
                token: token
              logprob: 6.027456183070403
              bytes:
              - 1
              - 1
              token: token
            - top_logprobs:
              - logprob: 5.962133916683182
                bytes:
                - 5
                - 5
                token: token
              - logprob: 5.962133916683182
                bytes:
                - 5
                - 5
                token: token
              logprob: 6.027456183070403
              bytes:
              - 1
              - 1
              token: token
        system_fingerprint: system_fingerprint
        object: chat.completion
      properties:
        id:
          description: A unique identifier for the chat completion.
          type: string
        choices:
          description: A list of chat completion choices. Can be more than one if
            `n` is greater than 1.
          items:
            $ref: '#/components/schemas/CreateChatCompletionResponse_choices_inner'
          type: array
        created:
          description: The Unix timestamp (in seconds) of when the chat completion
            was created.
          type: integer
        model:
          description: The model used for the chat completion.
          type: string
        system_fingerprint:
          description: |
            This fingerprint represents the backend configuration that the model runs with.

            Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
          type: string
        object:
          description: "The object type, which is always `chat.completion`."
          enum:
          - chat.completion
          type: string
        usage:
          $ref: '#/components/schemas/CompletionUsage'
      required:
      - choices
      - created
      - id
      - model
      - object
      type: object
      x-oaiMeta:
        name: The chat completion object
        group: chat
        example: |
          {
            "id": "chatcmpl-123",
            "object": "chat.completion",
            "created": 1677652288,
            "model": "gpt-3.5-turbo-0125",
            "system_fingerprint": "fp_44709d6fcb",
            "choices": [{
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "\n\nHello there, how may I assist you today?",
              },
              "logprobs": null,
              "finish_reason": "stop"
            }],
            "usage": {
              "prompt_tokens": 9,
              "completion_tokens": 12,
              "total_tokens": 21
            }
          }
    CreateChatCompletionFunctionResponse:
      description: "Represents a chat completion response returned by model, based\
        \ on the provided input."
      properties:
        id:
          description: A unique identifier for the chat completion.
          type: string
        choices:
          description: A list of chat completion choices. Can be more than one if
            `n` is greater than 1.
          items:
            $ref: '#/components/schemas/CreateChatCompletionFunctionResponse_choices_inner'
          type: array
        created:
          description: The Unix timestamp (in seconds) of when the chat completion
            was created.
          type: integer
        model:
          description: The model used for the chat completion.
          type: string
        system_fingerprint:
          description: |
            This fingerprint represents the backend configuration that the model runs with.

            Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
          type: string
        object:
          description: "The object type, which is always `chat.completion`."
          enum:
          - chat.completion
          type: string
        usage:
          $ref: '#/components/schemas/CompletionUsage'
      required:
      - choices
      - created
      - id
      - model
      - object
      type: object
      x-oaiMeta:
        name: The chat completion object
        group: chat
        example: |
          {
            "id": "chatcmpl-abc123",
            "object": "chat.completion",
            "created": 1699896916,
            "model": "gpt-3.5-turbo-0125",
            "choices": [
              {
                "index": 0,
                "message": {
                  "role": "assistant",
                  "content": null,
                  "tool_calls": [
                    {
                      "id": "call_abc123",
                      "type": "function",
                      "function": {
                        "name": "get_current_weather",
                        "arguments": "{\n\"location\": \"Boston, MA\"\n}"
                      }
                    }
                  ]
                },
                "logprobs": null,
                "finish_reason": "tool_calls"
              }
            ],
            "usage": {
              "prompt_tokens": 82,
              "completion_tokens": 17,
              "total_tokens": 99
            }
          }
    ChatCompletionTokenLogprob:
      example:
        top_logprobs:
        - logprob: 5.962133916683182
          bytes:
          - 5
          - 5
          token: token
        - logprob: 5.962133916683182
          bytes:
          - 5
          - 5
          token: token
        logprob: 6.027456183070403
        bytes:
        - 1
        - 1
        token: token
      properties:
        token:
          description: The token.
          type: string
        logprob:
          description: "The log probability of this token, if it is within the top\
            \ 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify\
            \ that the token is very unlikely."
          type: number
        bytes:
          description: A list of integers representing the UTF-8 bytes representation
            of the token. Useful in instances where characters are represented by
            multiple tokens and their byte representations must be combined to generate
            the correct text representation. Can be `null` if there is no bytes representation
            for the token.
          items:
            type: integer
          nullable: true
          type: array
        top_logprobs:
          description: "List of the most likely tokens and their log probability,\
            \ at this token position. In rare cases, there may be fewer than the number\
            \ of requested `top_logprobs` returned."
          items:
            $ref: '#/components/schemas/ChatCompletionTokenLogprob_top_logprobs_inner'
          type: array
      required:
      - bytes
      - logprob
      - token
      - top_logprobs
      type: object
    ListPaginatedFineTuningJobsResponse:
      example:
        data:
        - training_file: training_file
          result_files:
          - file-abc123
          - file-abc123
          finished_at: 6
          seed: 5
          fine_tuned_model: fine_tuned_model
          validation_file: validation_file
          created_at: 0
          error:
            code: code
            param: param
            message: message
          organization_id: organization_id
          hyperparameters:
            n_epochs: auto
          model: model
          id: id
          trained_tokens: 1
          integrations:
          - wandb:
              name: name
              project: my-wandb-project
              entity: entity
              tags:
              - custom-tag
              - custom-tag
            type: wandb
          - wandb:
              name: name
              project: my-wandb-project
              entity: entity
              tags:
              - custom-tag
              - custom-tag
            type: wandb
          - wandb:
              name: name
              project: my-wandb-project
              entity: entity
              tags:
              - custom-tag
              - custom-tag
            type: wandb
          - wandb:
              name: name
              project: my-wandb-project
              entity: entity
              tags:
              - custom-tag
              - custom-tag
            type: wandb
          - wandb:
              name: name
              project: my-wandb-project
              entity: entity
              tags:
              - custom-tag
              - custom-tag
            type: wandb
          object: fine_tuning.job
          status: validating_files
        - training_file: training_file
          result_files:
          - file-abc123
          - file-abc123
          finished_at: 6
          seed: 5
          fine_tuned_model: fine_tuned_model
          validation_file: validation_file
          created_at: 0
          error:
            code: code
            param: param
            message: message
          organization_id: organization_id
          hyperparameters:
            n_epochs: auto
          model: model
          id: id
          trained_tokens: 1
          integrations:
          - wandb:
              name: name
              project: my-wandb-project
              entity: entity
              tags:
              - custom-tag
              - custom-tag
            type: wandb
          - wandb:
              name: name
              project: my-wandb-project
              entity: entity
              tags:
              - custom-tag
              - custom-tag
            type: wandb
          - wandb:
              name: name
              project: my-wandb-project
              entity: entity
              tags:
              - custom-tag
              - custom-tag
            type: wandb
          - wandb:
              name: name
              project: my-wandb-project
              entity: entity
              tags:
              - custom-tag
              - custom-tag
            type: wandb
          - wandb:
              name: name
              project: my-wandb-project
              entity: entity
              tags:
              - custom-tag
              - custom-tag
            type: wandb
          object: fine_tuning.job
          status: validating_files
        has_more: true
        object: list
      properties:
        data:
          items:
            $ref: '#/components/schemas/FineTuningJob'
          type: array
        has_more:
          type: boolean
        object:
          enum:
          - list
          type: string
      required:
      - data
      - has_more
      - object
      type: object
    CreateChatCompletionStreamResponse:
      description: "Represents a streamed chunk of a chat completion response returned\
        \ by model, based on the provided input."
      properties:
        id:
          description: A unique identifier for the chat completion. Each chunk has
            the same ID.
          type: string
        choices:
          description: A list of chat completion choices. Can be more than one if
            `n` is greater than 1.
          items:
            $ref: '#/components/schemas/CreateChatCompletionStreamResponse_choices_inner'
          type: array
        created:
          description: The Unix timestamp (in seconds) of when the chat completion
            was created. Each chunk has the same timestamp.
          type: integer
        model:
          description: The model to generate the completion.
          type: string
        system_fingerprint:
          description: |
            This fingerprint represents the backend configuration that the model runs with.
            Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
          type: string
        object:
          description: "The object type, which is always `chat.completion.chunk`."
          enum:
          - chat.completion.chunk
          type: string
      required:
      - choices
      - created
      - id
      - model
      - object
      type: object
      x-oaiMeta:
        name: The chat completion chunk object
        group: chat
        example: |
          {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0125", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"role":"assistant","content":""},"logprobs":null,"finish_reason":null}]}

          {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0125", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"Hello"},"logprobs":null,"finish_reason":null}]}

          ....

          {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0125", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{},"logprobs":null,"finish_reason":"stop"}]}
    CreateChatCompletionImageResponse:
      description: "Represents a streamed chunk of a chat completion response returned\
        \ by model, based on the provided input."
      type: object
      x-oaiMeta:
        name: The chat completion chunk object
        group: chat
        example: |
          {
            "id": "chatcmpl-123",
            "object": "chat.completion",
            "created": 1677652288,
            "model": "gpt-3.5-turbo-0125",
            "system_fingerprint": "fp_44709d6fcb",
            "choices": [{
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "\n\nThis image shows a wooden boardwalk extending through a lush green marshland.",
              },
              "logprobs": null,
              "finish_reason": "stop"
            }],
            "usage": {
              "prompt_tokens": 9,
              "completion_tokens": 12,
              "total_tokens": 21
            }
          }
    CreateImageRequest:
      example:
        response_format: url
        size: 1024x1024
        model: dall-e-3
        style: vivid
        prompt: A cute baby sea otter
        user: user-1234
        "n": 1
        quality: standard
      properties:
        prompt:
          description: A text description of the desired image(s). The maximum length
            is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
          example: A cute baby sea otter
          type: string
        model:
          $ref: '#/components/schemas/CreateImageRequest_model'
        "n":
          default: 1
          description: "The number of images to generate. Must be between 1 and 10.\
            \ For `dall-e-3`, only `n=1` is supported."
          example: 1
          maximum: 10
          minimum: 1
          nullable: true
          type: integer
        quality:
          default: standard
          description: The quality of the image that will be generated. `hd` creates
            images with finer details and greater consistency across the image. This
            param is only supported for `dall-e-3`.
          enum:
          - standard
          - hd
          example: standard
          type: string
        response_format:
          default: url
          description: The format in which the generated images are returned. Must
            be one of `url` or `b64_json`. URLs are only valid for 60 minutes after
            the image has been generated.
          enum:
          - url
          - b64_json
          example: url
          nullable: true
          type: string
        size:
          default: 1024x1024
          description: "The size of the generated images. Must be one of `256x256`,\
            \ `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`,\
            \ `1792x1024`, or `1024x1792` for `dall-e-3` models."
          enum:
          - 256x256
          - 512x512
          - 1024x1024
          - 1792x1024
          - 1024x1792
          example: 1024x1024
          nullable: true
          type: string
        style:
          default: vivid
          description: "The style of the generated images. Must be one of `vivid`\
            \ or `natural`. Vivid causes the model to lean towards generating hyper-real\
            \ and dramatic images. Natural causes the model to produce more natural,\
            \ less hyper-real looking images. This param is only supported for `dall-e-3`."
          enum:
          - vivid
          - natural
          example: vivid
          nullable: true
          type: string
        user:
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
          example: user-1234
          type: string
      required:
      - prompt
      type: object
    ImagesResponse:
      example:
        data:
        - revised_prompt: revised_prompt
          b64_json: b64_json
          url: url
        - revised_prompt: revised_prompt
          b64_json: b64_json
          url: url
        created: 0
      properties:
        created:
          type: integer
        data:
          items:
            $ref: '#/components/schemas/Image'
          type: array
      required:
      - created
      - data
    Image:
      description: Represents the url or the content of an image generated by the
        OpenAI API.
      example:
        revised_prompt: revised_prompt
        b64_json: b64_json
        url: url
      properties:
        b64_json:
          description: "The base64-encoded JSON of the generated image, if `response_format`\
            \ is `b64_json`."
          type: string
        url:
          description: "The URL of the generated image, if `response_format` is `url`\
            \ (default)."
          type: string
        revised_prompt:
          description: "The prompt that was used to generate the image, if there was\
            \ any revision to the prompt."
          type: string
      type: object
      x-oaiMeta:
        name: The image object
        example: |
          {
            "url": "...",
            "revised_prompt": "..."
          }
    CreateImageEditRequest:
      properties:
        image:
          description: "The image to edit. Must be a valid PNG file, less than 4MB,\
            \ and square. If mask is not provided, image must have transparency, which\
            \ will be used as the mask."
          format: binary
          type: string
        prompt:
          description: A text description of the desired image(s). The maximum length
            is 1000 characters.
          example: A cute baby sea otter wearing a beret
          type: string
        mask:
          description: "An additional image whose fully transparent areas (e.g. where\
            \ alpha is zero) indicate where `image` should be edited. Must be a valid\
            \ PNG file, less than 4MB, and have the same dimensions as `image`."
          format: binary
          type: string
        model:
          $ref: '#/components/schemas/CreateImageEditRequest_model'
        "n":
          default: 1
          description: The number of images to generate. Must be between 1 and 10.
          example: 1
          maximum: 10
          minimum: 1
          nullable: true
          type: integer
        size:
          default: 1024x1024
          description: "The size of the generated images. Must be one of `256x256`,\
            \ `512x512`, or `1024x1024`."
          enum:
          - 256x256
          - 512x512
          - 1024x1024
          example: 1024x1024
          nullable: true
          type: string
        response_format:
          default: url
          description: The format in which the generated images are returned. Must
            be one of `url` or `b64_json`. URLs are only valid for 60 minutes after
            the image has been generated.
          enum:
          - url
          - b64_json
          example: url
          nullable: true
          type: string
        user:
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
          example: user-1234
          type: string
      required:
      - image
      - prompt
      type: object
    CreateImageVariationRequest:
      properties:
        image:
          description: "The image to use as the basis for the variation(s). Must be\
            \ a valid PNG file, less than 4MB, and square."
          format: binary
          type: string
        model:
          $ref: '#/components/schemas/CreateImageEditRequest_model'
        "n":
          default: 1
          description: "The number of images to generate. Must be between 1 and 10.\
            \ For `dall-e-3`, only `n=1` is supported."
          example: 1
          maximum: 10
          minimum: 1
          nullable: true
          type: integer
        response_format:
          default: url
          description: The format in which the generated images are returned. Must
            be one of `url` or `b64_json`. URLs are only valid for 60 minutes after
            the image has been generated.
          enum:
          - url
          - b64_json
          example: url
          nullable: true
          type: string
        size:
          default: 1024x1024
          description: "The size of the generated images. Must be one of `256x256`,\
            \ `512x512`, or `1024x1024`."
          enum:
          - 256x256
          - 512x512
          - 1024x1024
          example: 1024x1024
          nullable: true
          type: string
        user:
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
          example: user-1234
          type: string
      required:
      - image
      type: object
    CreateModerationRequest:
      example:
        input: I want to kill them.
        model: text-moderation-stable
      properties:
        input:
          $ref: '#/components/schemas/CreateModerationRequest_input'
        model:
          $ref: '#/components/schemas/CreateModerationRequest_model'
      required:
      - input
      type: object
    CreateModerationResponse:
      description: Represents if a given text input is potentially harmful.
      example:
        model: model
        id: id
        results:
        - category_scores:
            self-harm/intent: 2.3021358869347655
            hate/threatening: 6.027456183070403
            self-harm/instructions: 7.061401241503109
            sexual/minors: 3.616076749251911
            harassment/threatening: 5.962133916683182
            hate: 0.8008281904610115
            self-harm: 5.637376656633329
            harassment: 1.4658129805029452
            sexual: 9.301444243932576
            violence/graphic: 4.145608029883936
            violence: 2.027123023002322
          flagged: true
          categories:
            self-harm/intent: true
            hate/threatening: true
            self-harm/instructions: true
            sexual/minors: true
            harassment/threatening: true
            hate: true
            self-harm: true
            harassment: true
            sexual: true
            violence/graphic: true
            violence: true
        - category_scores:
            self-harm/intent: 2.3021358869347655
            hate/threatening: 6.027456183070403
            self-harm/instructions: 7.061401241503109
            sexual/minors: 3.616076749251911
            harassment/threatening: 5.962133916683182
            hate: 0.8008281904610115
            self-harm: 5.637376656633329
            harassment: 1.4658129805029452
            sexual: 9.301444243932576
            violence/graphic: 4.145608029883936
            violence: 2.027123023002322
          flagged: true
          categories:
            self-harm/intent: true
            hate/threatening: true
            self-harm/instructions: true
            sexual/minors: true
            harassment/threatening: true
            hate: true
            self-harm: true
            harassment: true
            sexual: true
            violence/graphic: true
            violence: true
      properties:
        id:
          description: The unique identifier for the moderation request.
          type: string
        model:
          description: The model used to generate the moderation results.
          type: string
        results:
          description: A list of moderation objects.
          items:
            $ref: '#/components/schemas/CreateModerationResponse_results_inner'
          type: array
      required:
      - id
      - model
      - results
      type: object
      x-oaiMeta:
        name: The moderation object
        example: |
          {
            "id": "modr-XXXXX",
            "model": "text-moderation-005",
            "results": [
              {
                "flagged": true,
                "categories": {
                  "sexual": false,
                  "hate": false,
                  "harassment": false,
                  "self-harm": false,
                  "sexual/minors": false,
                  "hate/threatening": false,
                  "violence/graphic": false,
                  "self-harm/intent": false,
                  "self-harm/instructions": false,
                  "harassment/threatening": true,
                  "violence": true,
                },
                "category_scores": {
                  "sexual": 1.2282071e-06,
                  "hate": 0.010696256,
                  "harassment": 0.29842457,
                  "self-harm": 1.5236925e-08,
                  "sexual/minors": 5.7246268e-08,
                  "hate/threatening": 0.0060676364,
                  "violence/graphic": 4.435014e-06,
                  "self-harm/intent": 8.098441e-10,
                  "self-harm/instructions": 2.8498655e-11,
                  "harassment/threatening": 0.63055265,
                  "violence": 0.99011886,
                }
              }
            ]
          }
    ListFilesResponse:
      example:
        data:
        - filename: filename
          purpose: fine-tune
          bytes: 0
          created_at: 6
          id: id
          status_details: status_details
          object: file
          status: uploaded
        - filename: filename
          purpose: fine-tune
          bytes: 0
          created_at: 6
          id: id
          status_details: status_details
          object: file
          status: uploaded
        object: list
      properties:
        data:
          items:
            $ref: '#/components/schemas/OpenAIFile'
          type: array
        object:
          enum:
          - list
          type: string
      required:
      - data
      - object
      type: object
    CreateFileRequest:
      additionalProperties: false
      properties:
        file:
          description: |
            The File object (not file name) to be uploaded.
          format: binary
          type: string
        purpose:
          description: |
            The intended purpose of the uploaded file.

            Use "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tuning) and "assistants" for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning.
          enum:
          - fine-tune
          - assistants
          type: string
      required:
      - file
      - purpose
      type: object
    DeleteFileResponse:
      example:
        deleted: true
        id: id
        object: file
      properties:
        id:
          type: string
        object:
          enum:
          - file
          type: string
        deleted:
          type: boolean
      required:
      - deleted
      - id
      - object
      type: object
    CreateFineTuningJobRequest:
      example:
        training_file: file-abc123
        seed: 42
        validation_file: file-abc123
        hyperparameters:
          batch_size: auto
          n_epochs: auto
          learning_rate_multiplier: auto
        model: gpt-3.5-turbo
        suffix: suffix
        integrations:
        - wandb:
            name: name
            project: my-wandb-project
            entity: entity
            tags:
            - custom-tag
            - custom-tag
          type: wandb
        - wandb:
            name: name
            project: my-wandb-project
            entity: entity
            tags:
            - custom-tag
            - custom-tag
          type: wandb
      properties:
        model:
          $ref: '#/components/schemas/CreateFineTuningJobRequest_model'
        training_file:
          description: |
            The ID of an uploaded file that contains training data.

            See [upload file](/docs/api-reference/files/upload) for how to upload a file.

            Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.

            See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
          example: file-abc123
          type: string
        hyperparameters:
          $ref: '#/components/schemas/CreateFineTuningJobRequest_hyperparameters'
        suffix:
          description: |
            A string of up to 18 characters that will be added to your fine-tuned model name.

            For example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`.
          maxLength: 40
          minLength: 1
          nullable: true
          type: string
        validation_file:
          description: |
            The ID of an uploaded file that contains validation data.

            If you provide this file, the data is used to generate validation
            metrics periodically during fine-tuning. These metrics can be viewed in
            the fine-tuning results file.
            The same data should not be present in both train and validation files.

            Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.

            See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
          example: file-abc123
          nullable: true
          type: string
        integrations:
          description: A list of integrations to enable for your fine-tuning job.
          items:
            $ref: '#/components/schemas/CreateFineTuningJobRequest_integrations_inner'
          nullable: true
          type: array
        seed:
          description: |
            The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.
            If a seed is not specified, one will be generated for you.
          example: 42
          maximum: 2147483647
          minimum: 0
          nullable: true
          type: integer
      required:
      - model
      - training_file
      type: object
    ListFineTuningJobEventsResponse:
      example:
        data:
        - level: info
          created_at: 0
          id: id
          message: message
          object: fine_tuning.job.event
        - level: info
          created_at: 0
          id: id
          message: message
          object: fine_tuning.job.event
        object: list
      properties:
        data:
          items:
            $ref: '#/components/schemas/FineTuningJobEvent'
          type: array
        object:
          enum:
          - list
          type: string
      required:
      - data
      - object
      type: object
    ListFineTuningJobCheckpointsResponse:
      example:
        first_id: first_id
        data:
        - step_number: 6
          created_at: 0
          fine_tuning_job_id: fine_tuning_job_id
          id: id
          metrics:
            full_valid_mean_token_accuracy: 3.616076749251911
            valid_loss: 2.3021358869347655
            full_valid_loss: 9.301444243932576
            train_mean_token_accuracy: 5.637376656633329
            valid_mean_token_accuracy: 7.061401241503109
            train_loss: 5.962133916683182
            step: 1.4658129805029452
          fine_tuned_model_checkpoint: fine_tuned_model_checkpoint
          object: fine_tuning.job.checkpoint
        - step_number: 6
          created_at: 0
          fine_tuning_job_id: fine_tuning_job_id
          id: id
          metrics:
            full_valid_mean_token_accuracy: 3.616076749251911
            valid_loss: 2.3021358869347655
            full_valid_loss: 9.301444243932576
            train_mean_token_accuracy: 5.637376656633329
            valid_mean_token_accuracy: 7.061401241503109
            train_loss: 5.962133916683182
            step: 1.4658129805029452
          fine_tuned_model_checkpoint: fine_tuned_model_checkpoint
          object: fine_tuning.job.checkpoint
        last_id: last_id
        has_more: true
        object: list
      properties:
        data:
          items:
            $ref: '#/components/schemas/FineTuningJobCheckpoint'
          type: array
        object:
          enum:
          - list
          type: string
        first_id:
          nullable: true
          type: string
        last_id:
          nullable: true
          type: string
        has_more:
          type: boolean
      required:
      - data
      - has_more
      - object
      type: object
    CreateEmbeddingRequest:
      additionalProperties: false
      example:
        input: The quick brown fox jumped over the lazy dog
        encoding_format: float
        model: text-embedding-3-small
        user: user-1234
        dimensions: 1
      properties:
        input:
          $ref: '#/components/schemas/CreateEmbeddingRequest_input'
        model:
          $ref: '#/components/schemas/CreateEmbeddingRequest_model'
        encoding_format:
          default: float
          description: "The format to return the embeddings in. Can be either `float`\
            \ or [`base64`](https://pypi.org/project/pybase64/)."
          enum:
          - float
          - base64
          example: float
          type: string
        dimensions:
          description: |
            The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
          minimum: 1
          type: integer
        user:
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
          example: user-1234
          type: string
      required:
      - input
      - model
      type: object
    CreateEmbeddingResponse:
      example:
        data:
        - index: 0
          embedding:
          - 6.027456183070403
          - 6.027456183070403
          object: embedding
        - index: 0
          embedding:
          - 6.027456183070403
          - 6.027456183070403
          object: embedding
        usage:
          prompt_tokens: 1
          total_tokens: 5
        model: model
        object: list
      properties:
        data:
          description: The list of embeddings generated by the model.
          items:
            $ref: '#/components/schemas/Embedding'
          type: array
        model:
          description: The name of the model used to generate the embedding.
          type: string
        object:
          description: "The object type, which is always \"list\"."
          enum:
          - list
          type: string
        usage:
          $ref: '#/components/schemas/CreateEmbeddingResponse_usage'
      required:
      - data
      - model
      - object
      - usage
      type: object
    CreateTranscriptionRequest:
      additionalProperties: false
      properties:
        file:
          description: |
            The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
          format: binary
          type: string
          x-oaiTypeLabel: file
        model:
          $ref: '#/components/schemas/CreateTranscriptionRequest_model'
        language:
          description: |
            The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.
          type: string
        prompt:
          description: |
            An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
          type: string
        response_format:
          default: json
          description: |
            The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
          enum:
          - json
          - text
          - srt
          - verbose_json
          - vtt
          type: string
        temperature:
          default: 0
          description: |
            The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
          type: number
        timestamp_granularities[]:
          default:
          - segment
          description: |
            The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.
          items:
            enum:
            - word
            - segment
            type: string
          type: array
      required:
      - file
      - model
      type: object
    CreateTranscriptionResponseJson:
      description: "Represents a transcription response returned by model, based on\
        \ the provided input."
      example:
        text: text
      properties:
        text:
          description: The transcribed text.
          type: string
      required:
      - text
      type: object
      x-oaiMeta:
        name: The transcription object
        group: audio
        example: |
          {
            "text": "Imagine the wildest idea that you've ever had, and you're curious about how it might scale to something that's a 100, a 1,000 times bigger. This is a place where you can get to do that."
          }
    TranscriptionSegment:
      properties:
        id:
          description: Unique identifier of the segment.
          type: integer
        seek:
          description: Seek offset of the segment.
          type: integer
        start:
          description: Start time of the segment in seconds.
          format: float
          type: number
        end:
          description: End time of the segment in seconds.
          format: float
          type: number
        text:
          description: Text content of the segment.
          type: string
        tokens:
          description: Array of token IDs for the text content.
          items:
            type: integer
          type: array
        temperature:
          description: Temperature parameter used for generating the segment.
          format: float
          type: number
        avg_logprob:
          description: "Average logprob of the segment. If the value is lower than\
            \ -1, consider the logprobs failed."
          format: float
          type: number
        compression_ratio:
          description: "Compression ratio of the segment. If the value is greater\
            \ than 2.4, consider the compression failed."
          format: float
          type: number
        no_speech_prob:
          description: "Probability of no speech in the segment. If the value is higher\
            \ than 1.0 and the `avg_logprob` is below -1, consider this segment silent."
          format: float
          type: number
      required:
      - avg_logprob
      - compression_ratio
      - end
      - id
      - no_speech_prob
      - seek
      - start
      - temperature
      - text
      - tokens
      type: object
    TranscriptionWord:
      properties:
        word:
          description: The text content of the word.
          type: string
        start:
          description: Start time of the word in seconds.
          format: float
          type: number
        end:
          description: End time of the word in seconds.
          format: float
          type: number
      required:
      - end
      - start
      - word
      type: object
    CreateTranscriptionResponseVerboseJson:
      description: "Represents a verbose json transcription response returned by model,\
        \ based on the provided input."
      properties:
        language:
          description: The language of the input audio.
          type: string
        duration:
          description: The duration of the input audio.
          type: string
        text:
          description: The transcribed text.
          type: string
        words:
          description: Extracted words and their corresponding timestamps.
          items:
            $ref: '#/components/schemas/TranscriptionWord'
          type: array
        segments:
          description: Segments of the transcribed text and their corresponding details.
          items:
            $ref: '#/components/schemas/TranscriptionSegment'
          type: array
      required:
      - duration
      - language
      - text
      type: object
      x-oaiMeta:
        name: The transcription object
        group: audio
        example: |
          {
            "task": "transcribe",
            "language": "english",
            "duration": 8.470000267028809,
            "text": "The beach was a popular spot on a hot summer day. People were swimming in the ocean, building sandcastles, and playing beach volleyball.",
            "segments": [
              {
                "id": 0,
                "seek": 0,
                "start": 0.0,
                "end": 3.319999933242798,
                "text": " The beach was a popular spot on a hot summer day.",
                "tokens": [
                  50364, 440, 7534, 390, 257, 3743, 4008, 322, 257, 2368, 4266, 786, 13, 50530
                ],
                "temperature": 0.0,
                "avg_logprob": -0.2860786020755768,
                "compression_ratio": 1.2363636493682861,
                "no_speech_prob": 0.00985979475080967
              },
              ...
            ]
          }
    CreateTranslationRequest:
      additionalProperties: false
      properties:
        file:
          description: |
            The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
          format: binary
          type: string
          x-oaiTypeLabel: file
        model:
          $ref: '#/components/schemas/CreateTranscriptionRequest_model'
        prompt:
          description: |
            An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.
          type: string
        response_format:
          default: json
          description: |
            The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
          type: string
        temperature:
          default: 0
          description: |
            The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
          type: number
      required:
      - file
      - model
      type: object
    CreateTranslationResponseJson:
      example:
        text: text
      properties:
        text:
          type: string
      required:
      - text
      type: object
    CreateTranslationResponseVerboseJson:
      properties:
        language:
          description: The language of the output translation (always `english`).
          type: string
        duration:
          description: The duration of the input audio.
          type: string
        text:
          description: The translated text.
          type: string
        segments:
          description: Segments of the translated text and their corresponding details.
          items:
            $ref: '#/components/schemas/TranscriptionSegment'
          type: array
      required:
      - duration
      - language
      - text
      type: object
    CreateSpeechRequest:
      additionalProperties: false
      example:
        voice: alloy
        input: input
        response_format: mp3
        model: CreateSpeechRequest_model
        speed: 0.5503105714228793
      properties:
        model:
          $ref: '#/components/schemas/CreateSpeechRequest_model'
        input:
          description: The text to generate audio for. The maximum length is 4096
            characters.
          maxLength: 4096
          type: string
        voice:
          description: "The voice to use when generating the audio. Supported voices\
            \ are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews\
            \ of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options)."
          enum:
          - alloy
          - echo
          - fable
          - onyx
          - nova
          - shimmer
          type: string
        response_format:
          default: mp3
          description: "The format to audio in. Supported formats are `mp3`, `opus`,\
            \ `aac`, `flac`, `wav`, and `pcm`."
          enum:
          - mp3
          - opus
          - aac
          - flac
          - wav
          - pcm
          type: string
        speed:
          default: 1.0
          description: The speed of the generated audio. Select a value from `0.25`
            to `4.0`. `1.0` is the default.
          maximum: 4.0
          minimum: 0.25
          type: number
      required:
      - input
      - model
      - voice
      type: object
    Model:
      description: Describes an OpenAI model offering that can be used with the API.
      example:
        created: 0
        owned_by: owned_by
        id: id
        object: model
      properties:
        id:
          description: "The model identifier, which can be referenced in the API endpoints."
          type: string
        created:
          description: The Unix timestamp (in seconds) when the model was created.
          type: integer
        object:
          description: "The object type, which is always \"model\"."
          enum:
          - model
          type: string
        owned_by:
          description: The organization that owns the model.
          type: string
      required:
      - created
      - id
      - object
      - owned_by
      title: Model
      x-oaiMeta:
        name: The model object
        example: |
          {
            "id": "VAR_model_id",
            "object": "model",
            "created": 1686935002,
            "owned_by": "openai"
          }
    OpenAIFile:
      description: The `File` object represents a document that has been uploaded
        to OpenAI.
      example:
        filename: filename
        purpose: fine-tune
        bytes: 0
        created_at: 6
        id: id
        status_details: status_details
        object: file
        status: uploaded
      properties:
        id:
          description: "The file identifier, which can be referenced in the API endpoints."
          type: string
        bytes:
          description: "The size of the file, in bytes."
          type: integer
        created_at:
          description: The Unix timestamp (in seconds) for when the file was created.
          type: integer
        filename:
          description: The name of the file.
          type: string
        object:
          description: "The object type, which is always `file`."
          enum:
          - file
          type: string
        purpose:
          description: "The intended purpose of the file. Supported values are `fine-tune`,\
            \ `fine-tune-results`, `assistants`, and `assistants_output`."
          enum:
          - fine-tune
          - fine-tune-results
          - assistants
          - assistants_output
          type: string
        status:
          deprecated: true
          description: "Deprecated. The current status of the file, which can be either\
            \ `uploaded`, `processed`, or `error`."
          enum:
          - uploaded
          - processed
          - error
          type: string
        status_details:
          deprecated: true
          description: "Deprecated. For details on why a fine-tuning training file\
            \ failed validation, see the `error` field on `fine_tuning.job`."
          type: string
      required:
      - bytes
      - created_at
      - filename
      - id
      - object
      - purpose
      - status
      title: OpenAIFile
      x-oaiMeta:
        name: The file object
        example: |
          {
            "id": "file-abc123",
            "object": "file",
            "bytes": 120000,
            "created_at": 1677610602,
            "filename": "salesOverview.pdf",
            "purpose": "assistants",
          }
    Embedding:
      description: |
        Represents an embedding vector returned by embedding endpoint.
      example:
        index: 0
        embedding:
        - 6.027456183070403
        - 6.027456183070403
        object: embedding
      properties:
        index:
          description: The index of the embedding in the list of embeddings.
          type: integer
        embedding:
          description: |
            The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).
          items:
            type: number
          type: array
        object:
          description: "The object type, which is always \"embedding\"."
          enum:
          - embedding
          type: string
      required:
      - embedding
      - index
      - object
      type: object
      x-oaiMeta:
        name: The embedding object
        example: |
          {
            "object": "embedding",
            "embedding": [
              0.0023064255,
              -0.009327292,
              .... (1536 floats total for ada-002)
              -0.0028842222,
            ],
            "index": 0
          }
    FineTuningJob:
      description: |
        The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.
      example:
        training_file: training_file
        result_files:
        - file-abc123
        - file-abc123
        finished_at: 6
        seed: 5
        fine_tuned_model: fine_tuned_model
        validation_file: validation_file
        created_at: 0
        error:
          code: code
          param: param
          message: message
        organization_id: organization_id
        hyperparameters:
          n_epochs: auto
        model: model
        id: id
        trained_tokens: 1
        integrations:
        - wandb:
            name: name
            project: my-wandb-project
            entity: entity
            tags:
            - custom-tag
            - custom-tag
          type: wandb
        - wandb:
            name: name
            project: my-wandb-project
            entity: entity
            tags:
            - custom-tag
            - custom-tag
          type: wandb
        - wandb:
            name: name
            project: my-wandb-project
            entity: entity
            tags:
            - custom-tag
            - custom-tag
          type: wandb
        - wandb:
            name: name
            project: my-wandb-project
            entity: entity
            tags:
            - custom-tag
            - custom-tag
          type: wandb
        - wandb:
            name: name
            project: my-wandb-project
            entity: entity
            tags:
            - custom-tag
            - custom-tag
          type: wandb
        object: fine_tuning.job
        status: validating_files
      properties:
        id:
          description: "The object identifier, which can be referenced in the API\
            \ endpoints."
          type: string
        created_at:
          description: The Unix timestamp (in seconds) for when the fine-tuning job
            was created.
          type: integer
        error:
          $ref: '#/components/schemas/FineTuningJob_error'
        fine_tuned_model:
          description: The name of the fine-tuned model that is being created. The
            value will be null if the fine-tuning job is still running.
          nullable: true
          type: string
        finished_at:
          description: The Unix timestamp (in seconds) for when the fine-tuning job
            was finished. The value will be null if the fine-tuning job is still running.
          nullable: true
          type: integer
        hyperparameters:
          $ref: '#/components/schemas/FineTuningJob_hyperparameters'
        model:
          description: The base model that is being fine-tuned.
          type: string
        object:
          description: "The object type, which is always \"fine_tuning.job\"."
          enum:
          - fine_tuning.job
          type: string
        organization_id:
          description: The organization that owns the fine-tuning job.
          type: string
        result_files:
          description: "The compiled results file ID(s) for the fine-tuning job. You\
            \ can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents)."
          items:
            example: file-abc123
            type: string
          type: array
        status:
          description: "The current status of the fine-tuning job, which can be either\
            \ `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`."
          enum:
          - validating_files
          - queued
          - running
          - succeeded
          - failed
          - cancelled
          type: string
        trained_tokens:
          description: The total number of billable tokens processed by this fine-tuning
            job. The value will be null if the fine-tuning job is still running.
          nullable: true
          type: integer
        training_file:
          description: "The file ID used for training. You can retrieve the training\
            \ data with the [Files API](/docs/api-reference/files/retrieve-contents)."
          type: string
        validation_file:
          description: "The file ID used for validation. You can retrieve the validation\
            \ results with the [Files API](/docs/api-reference/files/retrieve-contents)."
          nullable: true
          type: string
        integrations:
          description: A list of integrations to enable for this fine-tuning job.
          items:
            $ref: '#/components/schemas/FineTuningJob_integrations_inner'
          maxItems: 5
          nullable: true
          type: array
        seed:
          description: The seed used for the fine-tuning job.
          type: integer
      required:
      - created_at
      - error
      - fine_tuned_model
      - finished_at
      - hyperparameters
      - id
      - model
      - object
      - organization_id
      - result_files
      - seed
      - status
      - trained_tokens
      - training_file
      - validation_file
      title: FineTuningJob
      type: object
      x-oaiMeta:
        name: The fine-tuning job object
        example: |
          {
            "object": "fine_tuning.job",
            "id": "ftjob-abc123",
            "model": "davinci-002",
            "created_at": 1692661014,
            "finished_at": 1692661190,
            "fine_tuned_model": "ft:davinci-002:my-org:custom_suffix:7q8mpxmy",
            "organization_id": "org-123",
            "result_files": [
                "file-abc123"
            ],
            "status": "succeeded",
            "validation_file": null,
            "training_file": "file-abc123",
            "hyperparameters": {
                "n_epochs": 4,
                "batch_size": 1,
                "learning_rate_multiplier": 1.0
            },
            "trained_tokens": 5768,
            "integrations": [],
            "seed": 0
          }
    FineTuningIntegration:
      example:
        wandb:
          name: name
          project: my-wandb-project
          entity: entity
          tags:
          - custom-tag
          - custom-tag
        type: wandb
      properties:
        type:
          description: The type of the integration being enabled for the fine-tuning
            job
          enum:
          - wandb
          type: string
        wandb:
          $ref: '#/components/schemas/CreateFineTuningJobRequest_integrations_inner_wandb'
      required:
      - type
      - wandb
      title: Fine-Tuning Job Integration
      type: object
    FineTuningJobEvent:
      description: Fine-tuning job event object
      example:
        level: info
        created_at: 0
        id: id
        message: message
        object: fine_tuning.job.event
      properties:
        id:
          type: string
        created_at:
          type: integer
        level:
          enum:
          - info
          - warn
          - error
          type: string
        message:
          type: string
        object:
          enum:
          - fine_tuning.job.event
          type: string
      required:
      - created_at
      - id
      - level
      - message
      - object
      type: object
      x-oaiMeta:
        name: The fine-tuning job event object
        example: |
          {
            "object": "fine_tuning.job.event",
            "id": "ftevent-abc123"
            "created_at": 1677610602,
            "level": "info",
            "message": "Created fine-tuning job"
          }
    FineTuningJobCheckpoint:
      description: |
        The `fine_tuning.job.checkpoint` object represents a model checkpoint for a fine-tuning job that is ready to use.
      example:
        step_number: 6
        created_at: 0
        fine_tuning_job_id: fine_tuning_job_id
        id: id
        metrics:
          full_valid_mean_token_accuracy: 3.616076749251911
          valid_loss: 2.3021358869347655
          full_valid_loss: 9.301444243932576
          train_mean_token_accuracy: 5.637376656633329
          valid_mean_token_accuracy: 7.061401241503109
          train_loss: 5.962133916683182
          step: 1.4658129805029452
        fine_tuned_model_checkpoint: fine_tuned_model_checkpoint
        object: fine_tuning.job.checkpoint
      properties:
        id:
          description: "The checkpoint identifier, which can be referenced in the\
            \ API endpoints."
          type: string
        created_at:
          description: The Unix timestamp (in seconds) for when the checkpoint was
            created.
          type: integer
        fine_tuned_model_checkpoint:
          description: The name of the fine-tuned checkpoint model that is created.
          type: string
        step_number:
          description: The step number that the checkpoint was created at.
          type: integer
        metrics:
          $ref: '#/components/schemas/FineTuningJobCheckpoint_metrics'
        fine_tuning_job_id:
          description: The name of the fine-tuning job that this checkpoint was created
            from.
          type: string
        object:
          description: "The object type, which is always \"fine_tuning.job.checkpoint\"\
            ."
          enum:
          - fine_tuning.job.checkpoint
          type: string
      required:
      - created_at
      - fine_tuned_model_checkpoint
      - fine_tuning_job_id
      - id
      - metrics
      - object
      - step_number
      title: FineTuningJobCheckpoint
      type: object
      x-oaiMeta:
        name: The fine-tuning job checkpoint object
        example: |
          {
            "object": "fine_tuning.job.checkpoint",
            "id": "ftckpt_qtZ5Gyk4BLq1SfLFWp3RtO3P",
            "created_at": 1712211699,
            "fine_tuned_model_checkpoint": "ft:gpt-3.5-turbo-0125:my-org:custom_suffix:9ABel2dg:ckpt-step-88",
            "fine_tuning_job_id": "ftjob-fpbNQ3H1GrMehXRf8cO97xTN",
            "metrics": {
              "step": 88,
              "train_loss": 0.478,
              "train_mean_token_accuracy": 0.924,
              "valid_loss": 10.112,
              "valid_mean_token_accuracy": 0.145,
              "full_valid_loss": 0.567,
              "full_valid_mean_token_accuracy": 0.944
            },
            "step_number": 88
          }
    CompletionUsage:
      description: Usage statistics for the completion request.
      example:
        completion_tokens: 7
        prompt_tokens: 9
        total_tokens: 3
      properties:
        completion_tokens:
          description: Number of tokens in the generated completion.
          type: integer
        prompt_tokens:
          description: Number of tokens in the prompt.
          type: integer
        total_tokens:
          description: Total number of tokens used in the request (prompt + completion).
          type: integer
      required:
      - completion_tokens
      - prompt_tokens
      - total_tokens
      type: object
    RunCompletionUsage:
      description: "Usage statistics related to the run. This value will be `null`\
        \ if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.)."
      example:
        completion_tokens: 7
        prompt_tokens: 9
        total_tokens: 3
      nullable: true
      properties:
        completion_tokens:
          description: Number of completion tokens used over the course of the run.
          type: integer
        prompt_tokens:
          description: Number of prompt tokens used over the course of the run.
          type: integer
        total_tokens:
          description: Total number of tokens used (prompt + completion).
          type: integer
      required:
      - completion_tokens
      - prompt_tokens
      - total_tokens
      type: object
    RunStepCompletionUsage:
      description: Usage statistics related to the run step. This value will be `null`
        while the run step's status is `in_progress`.
      example:
        completion_tokens: 2
        prompt_tokens: 7
        total_tokens: 9
      nullable: true
      properties:
        completion_tokens:
          description: Number of completion tokens used over the course of the run
            step.
          type: integer
        prompt_tokens:
          description: Number of prompt tokens used over the course of the run step.
          type: integer
        total_tokens:
          description: Total number of tokens used (prompt + completion).
          type: integer
      required:
      - completion_tokens
      - prompt_tokens
      - total_tokens
      type: object
    AssistantObject:
      description: Represents an `assistant` that can call the model and use tools.
      example:
        instructions: instructions
        metadata: "{}"
        name: name
        file_ids:
        - file_ids
        - file_ids
        - file_ids
        - file_ids
        - file_ids
        created_at: 0
        description: description
        model: model
        id: id
        tools:
        - type: code_interpreter
        - type: code_interpreter
        - type: code_interpreter
        - type: code_interpreter
        - type: code_interpreter
        object: assistant
      properties:
        id:
          description: "The identifier, which can be referenced in API endpoints."
          type: string
        object:
          description: "The object type, which is always `assistant`."
          enum:
          - assistant
          type: string
        created_at:
          description: The Unix timestamp (in seconds) for when the assistant was
            created.
          type: integer
        name:
          description: |
            The name of the assistant. The maximum length is 256 characters.
          maxLength: 256
          nullable: true
          type: string
        description:
          description: |
            The description of the assistant. The maximum length is 512 characters.
          maxLength: 512
          nullable: true
          type: string
        model:
          description: |
            ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
          type: string
        instructions:
          description: |
            The system instructions that the assistant uses. The maximum length is 256,000 characters.
          maxLength: 256000
          nullable: true
          type: string
        tools:
          default: []
          description: |
            A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
          items:
            $ref: '#/components/schemas/AssistantObject_tools_inner'
          maxItems: 128
          type: array
        file_ids:
          default: []
          description: |
            A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
          items:
            type: string
          maxItems: 20
          type: array
        metadata:
          description: |
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          nullable: true
          type: object
          x-oaiTypeLabel: map
      required:
      - created_at
      - description
      - file_ids
      - id
      - instructions
      - metadata
      - model
      - name
      - object
      - tools
      title: Assistant
      type: object
      x-oaiMeta:
        name: The assistant object
        beta: true
        example: |
          {
            "id": "asst_abc123",
            "object": "assistant",
            "created_at": 1698984975,
            "name": "Math Tutor",
            "description": null,
            "model": "gpt-4-turbo",
            "instructions": "You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
            "tools": [
              {
                "type": "code_interpreter"
              }
            ],
            "file_ids": [],
            "metadata": {}
          }
    CreateAssistantRequest:
      additionalProperties: false
      example:
        instructions: instructions
        metadata: "{}"
        name: name
        file_ids:
        - file_ids
        - file_ids
        - file_ids
        - file_ids
        - file_ids
        description: description
        model: gpt-4-turbo
        tools:
        - type: code_interpreter
        - type: code_interpreter
        - type: code_interpreter
        - type: code_interpreter
        - type: code_interpreter
      properties:
        model:
          $ref: '#/components/schemas/CreateAssistantRequest_model'
        name:
          description: |
            The name of the assistant. The maximum length is 256 characters.
          maxLength: 256
          nullable: true
          type: string
        description:
          description: |
            The description of the assistant. The maximum length is 512 characters.
          maxLength: 512
          nullable: true
          type: string
        instructions:
          description: |
            The system instructions that the assistant uses. The maximum length is 256,000 characters.
          maxLength: 256000
          nullable: true
          type: string
        tools:
          default: []
          description: |
            A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
          items:
            $ref: '#/components/schemas/AssistantObject_tools_inner'
          maxItems: 128
          type: array
        file_ids:
          default: []
          description: |
            A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
          items:
            type: string
          maxItems: 20
          type: array
        metadata:
          description: |
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          nullable: true
          type: object
          x-oaiTypeLabel: map
      required:
      - model
      type: object
    ModifyAssistantRequest:
      additionalProperties: false
      example:
        instructions: instructions
        metadata: "{}"
        name: name
        file_ids:
        - file_ids
        - file_ids
        - file_ids
        - file_ids
        - file_ids
        description: description
        model: model
        tools:
        - type: code_interpreter
        - type: code_interpreter
        - type: code_interpreter
        - type: code_interpreter
        - type: code_interpreter
      properties:
        model:
          type: string
        name:
          description: |
            The name of the assistant. The maximum length is 256 characters.
          maxLength: 256
          nullable: true
          type: string
        description:
          description: |
            The description of the assistant. The maximum length is 512 characters.
          maxLength: 512
          nullable: true
          type: string
        instructions:
          description: |
            The system instructions that the assistant uses. The maximum length is 256,000 characters.
          maxLength: 256000
          nullable: true
          type: string
        tools:
          default: []
          description: |
            A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
          items:
            $ref: '#/components/schemas/AssistantObject_tools_inner'
          maxItems: 128
          type: array
        file_ids:
          default: []
          description: |
            A list of [File](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. If a file was previously attached to the list but does not show up in the list, it will be deleted from the assistant.
          items:
            type: string
          maxItems: 20
          type: array
        metadata:
          description: |
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          nullable: true
          type: object
          x-oaiTypeLabel: map
      type: object
    DeleteAssistantResponse:
      example:
        deleted: true
        id: id
        object: assistant.deleted
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          enum:
          - assistant.deleted
          type: string
      required:
      - deleted
      - id
      - object
      type: object
    ListAssistantsResponse:
      example:
        first_id: asst_abc123
        data:
        - instructions: instructions
          metadata: "{}"
          name: name
          file_ids:
          - file_ids
          - file_ids
          - file_ids
          - file_ids
          - file_ids
          created_at: 0
          description: description
          model: model
          id: id
          tools:
          - type: code_interpreter
          - type: code_interpreter
          - type: code_interpreter
          - type: code_interpreter
          - type: code_interpreter
          object: assistant
        - instructions: instructions
          metadata: "{}"
          name: name
          file_ids:
          - file_ids
          - file_ids
          - file_ids
          - file_ids
          - file_ids
          created_at: 0
          description: description
          model: model
          id: id
          tools:
          - type: code_interpreter
          - type: code_interpreter
          - type: code_interpreter
          - type: code_interpreter
          - type: code_interpreter
          object: assistant
        last_id: asst_abc456
        has_more: false
        object: list
      properties:
        object:
          example: list
          type: string
        data:
          items:
            $ref: '#/components/schemas/AssistantObject'
          type: array
        first_id:
          example: asst_abc123
          type: string
        last_id:
          example: asst_abc456
          type: string
        has_more:
          example: false
          type: boolean
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      type: object
      x-oaiMeta:
        name: List assistants response object
        group: chat
        example: |
          {
            "object": "list",
            "data": [
              {
                "id": "asst_abc123",
                "object": "assistant",
                "created_at": 1698982736,
                "name": "Coding Tutor",
                "description": null,
                "model": "gpt-4-turbo",
                "instructions": "You are a helpful assistant designed to make me better at coding!",
                "tools": [],
                "file_ids": [],
                "metadata": {}
              },
              {
                "id": "asst_abc456",
                "object": "assistant",
                "created_at": 1698982718,
                "name": "My Assistant",
                "description": null,
                "model": "gpt-4-turbo",
                "instructions": "You are a helpful assistant designed to make me better at coding!",
                "tools": [],
                "file_ids": [],
                "metadata": {}
              },
              {
                "id": "asst_abc789",
                "object": "assistant",
                "created_at": 1698982643,
                "name": null,
                "description": null,
                "model": "gpt-4-turbo",
                "instructions": null,
                "tools": [],
                "file_ids": [],
                "metadata": {}
              }
            ],
            "first_id": "asst_abc123",
            "last_id": "asst_abc789",
            "has_more": false
          }
    AssistantToolsCode:
      example:
        type: code_interpreter
      properties:
        type:
          description: "The type of tool being defined: `code_interpreter`"
          enum:
          - code_interpreter
          type: string
      required:
      - type
      title: Code interpreter tool
      type: object
    AssistantToolsRetrieval:
      properties:
        type:
          description: "The type of tool being defined: `retrieval`"
          enum:
          - retrieval
          type: string
      required:
      - type
      title: Retrieval tool
      type: object
    AssistantToolsFunction:
      properties:
        type:
          description: "The type of tool being defined: `function`"
          enum:
          - function
          type: string
        function:
          $ref: '#/components/schemas/FunctionObject'
      required:
      - function
      - type
      title: Function tool
      type: object
    TruncationObject:
      example:
        last_messages: 1
        type: auto
      properties:
        type:
          description: "The truncation strategy to use for the thread. The default\
            \ is `auto`. If set to `last_messages`, the thread will be truncated to\
            \ the n most recent messages in the thread. When set to `auto`, messages\
            \ in the middle of the thread will be dropped to fit the context length\
            \ of the model, `max_prompt_tokens`."
          enum:
          - auto
          - last_messages
          type: string
        last_messages:
          description: The number of most recent messages from the thread when constructing
            the context for the run.
          minimum: 1
          nullable: true
          type: integer
      required:
      - strategy
      title: Thread Truncation Controls
      type: object
    AssistantsApiToolChoiceOption:
      description: |
        Controls which (if any) tool is called by the model.
        `none` means the model will not call any tools and instead generates a message.
        `auto` is the default value and means the model can pick between generating a message or calling a tool.
        Specifying a particular tool like `{"type": "TOOL_TYPE"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
      oneOf:
      - description: |
          `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
        enum:
        - none
        - auto
        type: string
      - $ref: '#/components/schemas/AssistantsApiNamedToolChoice'
      x-oaiExpandable: true
    AssistantsApiNamedToolChoice:
      description: Specifies a tool the model should use. Use to force the model to
        call a specific tool.
      properties:
        type:
          description: "The type of the tool. If type is `function`, the function\
            \ name must be set"
          enum:
          - function
          - code_interpreter
          - retrieval
          type: string
        function:
          $ref: '#/components/schemas/ChatCompletionNamedToolChoice_function'
      required:
      - type
      type: object
    AssistantsApiResponseFormatOption:
      description: |
        Specifies the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.

        Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.

        **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
      oneOf:
      - description: |
          `auto` is the default value
        enum:
        - none
        - auto
        type: string
      - $ref: '#/components/schemas/AssistantsApiResponseFormat'
      x-oaiExpandable: true
    AssistantsApiResponseFormat:
      description: |
        An object describing the expected output of the model. If `json_object` only `function` type `tools` are allowed to be passed to the Run. If `text` the model can return text or any value needed.
      properties:
        type:
          default: text
          description: Must be one of `text` or `json_object`.
          enum:
          - text
          - json_object
          example: json_object
          type: string
      type: object
    RunObject:
      description: "Represents an execution run on a [thread](/docs/api-reference/threads)."
      example:
        cancelled_at: 5
        instructions: instructions
        metadata: "{}"
        assistant_id: assistant_id
        required_action:
          submit_tool_outputs:
            tool_calls:
            - function:
                name: name
                arguments: arguments
              id: id
              type: function
            - function:
                name: name
                arguments: arguments
              id: id
              type: function
          type: submit_tool_outputs
        usage:
          completion_tokens: 7
          prompt_tokens: 9
          total_tokens: 3
        created_at: 0
        tools:
        - type: code_interpreter
        - type: code_interpreter
        - type: code_interpreter
        - type: code_interpreter
        - type: code_interpreter
        max_completion_tokens: 256
        thread_id: thread_id
        expires_at: 6
        response_format: none
        file_ids:
        - file_ids
        - file_ids
        temperature: 2.027123023002322
        tool_choice: none
        model: model
        id: id
        last_error:
          code: server_error
          message: message
        incomplete_details:
          reason: max_completion_tokens
        truncation_strategy:
          last_messages: 1
          type: auto
        completed_at: 2
        started_at: 1
        failed_at: 5
        max_prompt_tokens: 256
        object: thread.run
        status: queued
      properties:
        id:
          description: "The identifier, which can be referenced in API endpoints."
          type: string
        object:
          description: "The object type, which is always `thread.run`."
          enum:
          - thread.run
          type: string
        created_at:
          description: The Unix timestamp (in seconds) for when the run was created.
          type: integer
        thread_id:
          description: "The ID of the [thread](/docs/api-reference/threads) that was\
            \ executed on as a part of this run."
          type: string
        assistant_id:
          description: "The ID of the [assistant](/docs/api-reference/assistants)\
            \ used for execution of this run."
          type: string
        status:
          description: "The status of the run, which can be either `queued`, `in_progress`,\
            \ `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`,\
            \ or `expired`."
          enum:
          - queued
          - in_progress
          - requires_action
          - cancelling
          - cancelled
          - failed
          - completed
          - expired
          type: string
        required_action:
          $ref: '#/components/schemas/RunObject_required_action'
        last_error:
          $ref: '#/components/schemas/RunObject_last_error'
        expires_at:
          description: The Unix timestamp (in seconds) for when the run will expire.
          nullable: true
          type: integer
        started_at:
          description: The Unix timestamp (in seconds) for when the run was started.
          nullable: true
          type: integer
        cancelled_at:
          description: The Unix timestamp (in seconds) for when the run was cancelled.
          nullable: true
          type: integer
        failed_at:
          description: The Unix timestamp (in seconds) for when the run failed.
          nullable: true
          type: integer
        completed_at:
          description: The Unix timestamp (in seconds) for when the run was completed.
          nullable: true
          type: integer
        incomplete_details:
          $ref: '#/components/schemas/RunObject_incomplete_details'
        model:
          description: "The model that the [assistant](/docs/api-reference/assistants)\
            \ used for this run."
          type: string
        instructions:
          description: "The instructions that the [assistant](/docs/api-reference/assistants)\
            \ used for this run."
          type: string
        tools:
          default: []
          description: "The list of tools that the [assistant](/docs/api-reference/assistants)\
            \ used for this run."
          items:
            $ref: '#/components/schemas/AssistantObject_tools_inner'
          maxItems: 20
          type: array
        file_ids:
          default: []
          description: "The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants)\
            \ used for this run."
          items:
            type: string
          type: array
        metadata:
          description: |
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          nullable: true
          type: object
          x-oaiTypeLabel: map
        usage:
          $ref: '#/components/schemas/RunCompletionUsage'
        temperature:
          description: "The sampling temperature used for this run. If not set, defaults\
            \ to 1."
          nullable: true
          type: number
        max_prompt_tokens:
          description: |
            The maximum number of prompt tokens specified to have been used over the course of the run.
          minimum: 256
          nullable: true
          type: integer
        max_completion_tokens:
          description: |
            The maximum number of completion tokens specified to have been used over the course of the run.
          minimum: 256
          nullable: true
          type: integer
        truncation_strategy:
          $ref: '#/components/schemas/TruncationObject'
        tool_choice:
          $ref: '#/components/schemas/AssistantsApiToolChoiceOption'
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
      required:
      - assistant_id
      - cancelled_at
      - completed_at
      - created_at
      - expires_at
      - failed_at
      - file_ids
      - id
      - incomplete_details
      - instructions
      - last_error
      - max_completion_tokens
      - max_prompt_tokens
      - metadata
      - model
      - object
      - required_action
      - response_format
      - started_at
      - status
      - thread_id
      - tool_choice
      - tools
      - truncation_strategy
      - usage
      title: A run on a thread
      type: object
      x-oaiMeta:
        name: The run object
        beta: true
        example: |
          {
            "id": "run_abc123",
            "object": "thread.run",
            "created_at": 1698107661,
            "assistant_id": "asst_abc123",
            "thread_id": "thread_abc123",
            "status": "completed",
            "started_at": 1699073476,
            "expires_at": null,
            "cancelled_at": null,
            "failed_at": null,
            "completed_at": 1699073498,
            "last_error": null,
            "model": "gpt-4-turbo",
            "instructions": null,
            "tools": [{"type": "retrieval"}, {"type": "code_interpreter"}],
            "file_ids": [],
            "metadata": {},
            "incomplete_details": null,
            "usage": {
              "prompt_tokens": 123,
              "completion_tokens": 456,
              "total_tokens": 579
            },
            "temperature": 1,
            "max_prompt_tokens": 1000,
            "max_completion_tokens": 1000,
            "truncation_strategy": {
              "type": "auto",
              "last_messages": null
            },
            "response_format": "auto",
            "tool_choice": "auto"
          }
    CreateRunRequest:
      additionalProperties: false
      example:
        instructions: instructions
        additional_instructions: additional_instructions
        metadata: "{}"
        assistant_id: assistant_id
        additional_messages:
        - metadata: "{}"
          role: user
          file_ids:
          - file_ids
          - file_ids
          - file_ids
          - file_ids
          - file_ids
          content: content
        - metadata: "{}"
          role: user
          file_ids:
          - file_ids
          - file_ids
          - file_ids
          - file_ids
          - file_ids
          content: content
        tools:
        - type: code_interpreter
        - type: code_interpreter
        - type: code_interpreter
        - type: code_interpreter
        - type: code_interpreter
        truncation_strategy:
          last_messages: 1
          type: auto
        max_completion_tokens: 256
        response_format: none
        stream: true
        temperature: 1
        tool_choice: none
        model: gpt-4-turbo
        max_prompt_tokens: 256
      properties:
        assistant_id:
          description: "The ID of the [assistant](/docs/api-reference/assistants)\
            \ to use to execute this run."
          type: string
        model:
          $ref: '#/components/schemas/CreateRunRequest_model'
        instructions:
          description: "Overrides the [instructions](/docs/api-reference/assistants/createAssistant)\
            \ of the assistant. This is useful for modifying the behavior on a per-run\
            \ basis."
          nullable: true
          type: string
        additional_instructions:
          description: Appends additional instructions at the end of the instructions
            for the run. This is useful for modifying the behavior on a per-run basis
            without overriding other instructions.
          nullable: true
          type: string
        additional_messages:
          description: Adds additional messages to the thread before creating the
            run.
          items:
            $ref: '#/components/schemas/CreateMessageRequest'
          nullable: true
          type: array
        tools:
          description: Override the tools the assistant can use for this run. This
            is useful for modifying the behavior on a per-run basis.
          items:
            $ref: '#/components/schemas/AssistantObject_tools_inner'
          maxItems: 20
          nullable: true
          type: array
        metadata:
          description: |
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          nullable: true
          type: object
          x-oaiTypeLabel: map
        temperature:
          default: 1
          description: |
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        stream:
          description: |
            If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
          nullable: true
          type: boolean
        max_prompt_tokens:
          description: |
            The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `complete`. See `incomplete_details` for more info.
          minimum: 256
          nullable: true
          type: integer
        max_completion_tokens:
          description: |
            The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `complete`. See `incomplete_details` for more info.
          minimum: 256
          nullable: true
          type: integer
        truncation_strategy:
          $ref: '#/components/schemas/TruncationObject'
        tool_choice:
          $ref: '#/components/schemas/AssistantsApiToolChoiceOption'
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
      required:
      - assistant_id
      - thread_id
      type: object
    ListRunsResponse:
      example:
        first_id: run_abc123
        data:
        - cancelled_at: 5
          instructions: instructions
          metadata: "{}"
          assistant_id: assistant_id
          required_action:
            submit_tool_outputs:
              tool_calls:
              - function:
                  name: name
                  arguments: arguments
                id: id
                type: function
              - function:
                  name: name
                  arguments: arguments
                id: id
                type: function
            type: submit_tool_outputs
          usage:
            completion_tokens: 7
            prompt_tokens: 9
            total_tokens: 3
          created_at: 0
          tools:
          - type: code_interpreter
          - type: code_interpreter
          - type: code_interpreter
          - type: code_interpreter
          - type: code_interpreter
          max_completion_tokens: 256
          thread_id: thread_id
          expires_at: 6
          response_format: none
          file_ids:
          - file_ids
          - file_ids
          temperature: 2.027123023002322
          tool_choice: none
          model: model
          id: id
          last_error:
            code: server_error
            message: message
          incomplete_details:
            reason: max_completion_tokens
          truncation_strategy:
            last_messages: 1
            type: auto
          completed_at: 2
          started_at: 1
          failed_at: 5
          max_prompt_tokens: 256
          object: thread.run
          status: queued
        - cancelled_at: 5
          instructions: instructions
          metadata: "{}"
          assistant_id: assistant_id
          required_action:
            submit_tool_outputs:
              tool_calls:
              - function:
                  name: name
                  arguments: arguments
                id: id
                type: function
              - function:
                  name: name
                  arguments: arguments
                id: id
                type: function
            type: submit_tool_outputs
          usage:
            completion_tokens: 7
            prompt_tokens: 9
            total_tokens: 3
          created_at: 0
          tools:
          - type: code_interpreter
          - type: code_interpreter
          - type: code_interpreter
          - type: code_interpreter
          - type: code_interpreter
          max_completion_tokens: 256
          thread_id: thread_id
          expires_at: 6
          response_format: none
          file_ids:
          - file_ids
          - file_ids
          temperature: 2.027123023002322
          tool_choice: none
          model: model
          id: id
          last_error:
            code: server_error
            message: message
          incomplete_details:
            reason: max_completion_tokens
          truncation_strategy:
            last_messages: 1
            type: auto
          completed_at: 2
          started_at: 1
          failed_at: 5
          max_prompt_tokens: 256
          object: thread.run
          status: queued
        last_id: run_abc456
        has_more: false
        object: list
      properties:
        object:
          example: list
          type: string
        data:
          items:
            $ref: '#/components/schemas/RunObject'
          type: array
        first_id:
          example: run_abc123
          type: string
        last_id:
          example: run_abc456
          type: string
        has_more:
          example: false
          type: boolean
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      type: object
    ModifyRunRequest:
      additionalProperties: false
      example:
        metadata: "{}"
      properties:
        metadata:
          description: |
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          nullable: true
          type: object
          x-oaiTypeLabel: map
      type: object
    SubmitToolOutputsRunRequest:
      additionalProperties: false
      example:
        stream: true
        tool_outputs:
        - output: output
          tool_call_id: tool_call_id
        - output: output
          tool_call_id: tool_call_id
      properties:
        tool_outputs:
          description: A list of tools for which the outputs are being submitted.
          items:
            $ref: '#/components/schemas/SubmitToolOutputsRunRequest_tool_outputs_inner'
          type: array
        stream:
          description: |
            If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
          nullable: true
          type: boolean
      required:
      - tool_outputs
      type: object
    RunToolCallObject:
      description: Tool call objects
      example:
        function:
          name: name
          arguments: arguments
        id: id
        type: function
      properties:
        id:
          description: "The ID of the tool call. This ID must be referenced when you\
            \ submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs)\
            \ endpoint."
          type: string
        type:
          description: "The type of tool call the output is required for. For now,\
            \ this is always `function`."
          enum:
          - function
          type: string
        function:
          $ref: '#/components/schemas/RunToolCallObject_function'
      required:
      - function
      - id
      - type
      type: object
    CreateThreadAndRunRequest:
      additionalProperties: false
      example:
        instructions: instructions
        metadata: "{}"
        assistant_id: assistant_id
        thread:
          metadata: "{}"
          messages:
          - metadata: "{}"
            role: user
            file_ids:
            - file_ids
            - file_ids
            - file_ids
            - file_ids
            - file_ids
            content: content
          - metadata: "{}"
            role: user
            file_ids:
            - file_ids
            - file_ids
            - file_ids
            - file_ids
            - file_ids
            content: content
        tools:
        - type: code_interpreter
        - type: code_interpreter
        - type: code_interpreter
        - type: code_interpreter
        - type: code_interpreter
        truncation_strategy:
          last_messages: 1
          type: auto
        max_completion_tokens: 256
        response_format: none
        stream: true
        temperature: 1
        tool_choice: none
        model: gpt-4-turbo
        max_prompt_tokens: 256
      properties:
        assistant_id:
          description: "The ID of the [assistant](/docs/api-reference/assistants)\
            \ to use to execute this run."
          type: string
        thread:
          $ref: '#/components/schemas/CreateThreadRequest'
        model:
          $ref: '#/components/schemas/CreateRunRequest_model'
        instructions:
          description: Override the default system message of the assistant. This
            is useful for modifying the behavior on a per-run basis.
          nullable: true
          type: string
        tools:
          description: Override the tools the assistant can use for this run. This
            is useful for modifying the behavior on a per-run basis.
          items:
            $ref: '#/components/schemas/CreateThreadAndRunRequest_tools_inner'
          maxItems: 20
          nullable: true
          type: array
        metadata:
          description: |
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          nullable: true
          type: object
          x-oaiTypeLabel: map
        temperature:
          default: 1
          description: |
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        stream:
          description: |
            If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
          nullable: true
          type: boolean
        max_prompt_tokens:
          description: |
            The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `complete`. See `incomplete_details` for more info.
          minimum: 256
          nullable: true
          type: integer
        max_completion_tokens:
          description: |
            The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
          minimum: 256
          nullable: true
          type: integer
        truncation_strategy:
          $ref: '#/components/schemas/TruncationObject'
        tool_choice:
          $ref: '#/components/schemas/AssistantsApiToolChoiceOption'
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
      required:
      - assistant_id
      - thread_id
      type: object
    ThreadObject:
      description: "Represents a thread that contains [messages](/docs/api-reference/messages)."
      example:
        metadata: "{}"
        created_at: 0
        id: id
        object: thread
      properties:
        id:
          description: "The identifier, which can be referenced in API endpoints."
          type: string
        object:
          description: "The object type, which is always `thread`."
          enum:
          - thread
          type: string
        created_at:
          description: The Unix timestamp (in seconds) for when the thread was created.
          type: integer
        metadata:
          description: |
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          nullable: true
          type: object
          x-oaiTypeLabel: map
      required:
      - created_at
      - id
      - metadata
      - object
      title: Thread
      type: object
      x-oaiMeta:
        name: The thread object
        beta: true
        example: |
          {
            "id": "thread_abc123",
            "object": "thread",
            "created_at": 1698107661,
            "metadata": {}
          }
    CreateThreadRequest:
      additionalProperties: false
      example:
        metadata: "{}"
        messages:
        - metadata: "{}"
          role: user
          file_ids:
          - file_ids
          - file_ids
          - file_ids
          - file_ids
          - file_ids
          content: content
        - metadata: "{}"
          role: user
          file_ids:
          - file_ids
          - file_ids
          - file_ids
          - file_ids
          - file_ids
          content: content
      properties:
        messages:
          description: "A list of [messages](/docs/api-reference/messages) to start\
            \ the thread with."
          items:
            $ref: '#/components/schemas/CreateMessageRequest'
          type: array
        metadata:
          description: |
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          nullable: true
          type: object
          x-oaiTypeLabel: map
      type: object
    ModifyThreadRequest:
      additionalProperties: false
      example:
        metadata: "{}"
      properties:
        metadata:
          description: |
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          nullable: true
          type: object
          x-oaiTypeLabel: map
      type: object
    DeleteThreadResponse:
      example:
        deleted: true
        id: id
        object: thread.deleted
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          enum:
          - thread.deleted
          type: string
      required:
      - deleted
      - id
      - object
      type: object
    ListThreadsResponse:
      properties:
        object:
          example: list
          type: string
        data:
          items:
            $ref: '#/components/schemas/ThreadObject'
          type: array
        first_id:
          example: asst_abc123
          type: string
        last_id:
          example: asst_abc456
          type: string
        has_more:
          example: false
          type: boolean
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
    MessageObject:
      description: "Represents a message within a [thread](/docs/api-reference/threads)."
      example:
        metadata: "{}"
        role: user
        assistant_id: assistant_id
        run_id: run_id
        created_at: 0
        content:
        - image_file:
            file_id: file_id
          type: image_file
        - image_file:
            file_id: file_id
          type: image_file
        completed_at: 6
        thread_id: thread_id
        file_ids:
        - file_ids
        - file_ids
        - file_ids
        - file_ids
        - file_ids
        id: id
        incomplete_at: 1
        incomplete_details:
          reason: content_filter
        object: thread.message
        status: in_progress
      properties:
        id:
          description: "The identifier, which can be referenced in API endpoints."
          type: string
        object:
          description: "The object type, which is always `thread.message`."
          enum:
          - thread.message
          type: string
        created_at:
          description: The Unix timestamp (in seconds) for when the message was created.
          type: integer
        thread_id:
          description: "The [thread](/docs/api-reference/threads) ID that this message\
            \ belongs to."
          type: string
        status:
          description: "The status of the message, which can be either `in_progress`,\
            \ `incomplete`, or `completed`."
          enum:
          - in_progress
          - incomplete
          - completed
          type: string
        incomplete_details:
          $ref: '#/components/schemas/MessageObject_incomplete_details'
        completed_at:
          description: The Unix timestamp (in seconds) for when the message was completed.
          nullable: true
          type: integer
        incomplete_at:
          description: The Unix timestamp (in seconds) for when the message was marked
            as incomplete.
          nullable: true
          type: integer
        role:
          description: The entity that produced the message. One of `user` or `assistant`.
          enum:
          - user
          - assistant
          type: string
        content:
          description: The content of the message in array of text and/or images.
          items:
            $ref: '#/components/schemas/MessageObject_content_inner'
          type: array
        assistant_id:
          description: "If applicable, the ID of the [assistant](/docs/api-reference/assistants)\
            \ that authored this message."
          nullable: true
          type: string
        run_id:
          description: "The ID of the [run](/docs/api-reference/runs) associated with\
            \ the creation of this message. Value is `null` when messages are created\
            \ manually using the create message or create thread endpoints."
          nullable: true
          type: string
        file_ids:
          default: []
          description: "A list of [file](/docs/api-reference/files) IDs that the assistant\
            \ should use. Useful for tools like retrieval and code_interpreter that\
            \ can access files. A maximum of 10 files can be attached to a message."
          items:
            type: string
          maxItems: 10
          type: array
        metadata:
          description: |
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          nullable: true
          type: object
          x-oaiTypeLabel: map
      required:
      - assistant_id
      - completed_at
      - content
      - created_at
      - file_ids
      - id
      - incomplete_at
      - incomplete_details
      - metadata
      - object
      - role
      - run_id
      - status
      - thread_id
      title: The message object
      type: object
      x-oaiMeta:
        name: The message object
        beta: true
        example: |
          {
            "id": "msg_abc123",
            "object": "thread.message",
            "created_at": 1698983503,
            "thread_id": "thread_abc123",
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": {
                  "value": "Hi! How can I help you today?",
                  "annotations": []
                }
              }
            ],
            "file_ids": [],
            "assistant_id": "asst_abc123",
            "run_id": "run_abc123",
            "metadata": {}
          }
    MessageDeltaObject:
      description: |
        Represents a message delta i.e. any changed fields on a message during streaming.
      properties:
        id:
          description: "The identifier of the message, which can be referenced in\
            \ API endpoints."
          type: string
        object:
          description: "The object type, which is always `thread.message.delta`."
          enum:
          - thread.message.delta
          type: string
        delta:
          $ref: '#/components/schemas/MessageDeltaObject_delta'
      required:
      - delta
      - id
      - object
      title: Message delta object
      type: object
      x-oaiMeta:
        name: The message delta object
        beta: true
        example: |
          {
            "id": "msg_123",
            "object": "thread.message.delta",
            "delta": {
              "content": [
                {
                  "index": 0,
                  "type": "text",
                  "text": { "value": "Hello", "annotations": [] }
                }
              ]
            }
          }
    CreateMessageRequest:
      additionalProperties: false
      example:
        metadata: "{}"
        role: user
        file_ids:
        - file_ids
        - file_ids
        - file_ids
        - file_ids
        - file_ids
        content: content
      properties:
        role:
          description: |
            The role of the entity that is creating the message. Allowed values include:
            - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
            - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.
          enum:
          - user
          - assistant
          type: string
        content:
          description: The content of the message.
          maxLength: 256000
          minLength: 1
          type: string
        file_ids:
          default: []
          description: "A list of [File](/docs/api-reference/files) IDs that the message\
            \ should use. There can be a maximum of 10 files attached to a message.\
            \ Useful for tools like `retrieval` and `code_interpreter` that can access\
            \ and use files."
          items:
            type: string
          maxItems: 10
          minItems: 1
          type: array
        metadata:
          description: |
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          nullable: true
          type: object
          x-oaiTypeLabel: map
      required:
      - content
      - role
      type: object
    ModifyMessageRequest:
      additionalProperties: false
      example:
        metadata: "{}"
      properties:
        metadata:
          description: |
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          nullable: true
          type: object
          x-oaiTypeLabel: map
      type: object
    DeleteMessageResponse:
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          enum:
          - thread.message.deleted
          type: string
      required:
      - deleted
      - id
      - object
      type: object
    ListMessagesResponse:
      example:
        first_id: msg_abc123
        data:
        - metadata: "{}"
          role: user
          assistant_id: assistant_id
          run_id: run_id
          created_at: 0
          content:
          - image_file:
              file_id: file_id
            type: image_file
          - image_file:
              file_id: file_id
            type: image_file
          completed_at: 6
          thread_id: thread_id
          file_ids:
          - file_ids
          - file_ids
          - file_ids
          - file_ids
          - file_ids
          id: id
          incomplete_at: 1
          incomplete_details:
            reason: content_filter
          object: thread.message
          status: in_progress
        - metadata: "{}"
          role: user
          assistant_id: assistant_id
          run_id: run_id
          created_at: 0
          content:
          - image_file:
              file_id: file_id
            type: image_file
          - image_file:
              file_id: file_id
            type: image_file
          completed_at: 6
          thread_id: thread_id
          file_ids:
          - file_ids
          - file_ids
          - file_ids
          - file_ids
          - file_ids
          id: id
          incomplete_at: 1
          incomplete_details:
            reason: content_filter
          object: thread.message
          status: in_progress
        last_id: msg_abc123
        has_more: false
        object: list
      properties:
        object:
          example: list
          type: string
        data:
          items:
            $ref: '#/components/schemas/MessageObject'
          type: array
        first_id:
          example: msg_abc123
          type: string
        last_id:
          example: msg_abc123
          type: string
        has_more:
          example: false
          type: boolean
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
    MessageContentImageFileObject:
      description: "References an image [File](/docs/api-reference/files) in the content\
        \ of a message."
      example:
        image_file:
          file_id: file_id
        type: image_file
      properties:
        type:
          description: Always `image_file`.
          enum:
          - image_file
          type: string
        image_file:
          $ref: '#/components/schemas/MessageContentImageFileObject_image_file'
      required:
      - image_file
      - type
      title: Image file
      type: object
    MessageDeltaContentImageFileObject:
      description: "References an image [File](/docs/api-reference/files) in the content\
        \ of a message."
      properties:
        index:
          description: The index of the content part in the message.
          type: integer
        type:
          description: Always `image_file`.
          enum:
          - image_file
          type: string
        image_file:
          $ref: '#/components/schemas/MessageDeltaContentImageFileObject_image_file'
      required:
      - index
      - type
      title: Image file
      type: object
    MessageContentTextObject:
      description: The text content that is part of a message.
      properties:
        type:
          description: Always `text`.
          enum:
          - text
          type: string
        text:
          $ref: '#/components/schemas/MessageContentTextObject_text'
      required:
      - text
      - type
      title: Text
      type: object
    MessageContentTextAnnotationsFileCitationObject:
      description: A citation within the message that points to a specific quote from
        a specific File associated with the assistant or the message. Generated when
        the assistant uses the "retrieval" tool to search files.
      properties:
        type:
          description: Always `file_citation`.
          enum:
          - file_citation
          type: string
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        file_citation:
          $ref: '#/components/schemas/MessageContentTextAnnotationsFileCitationObject_file_citation'
        start_index:
          minimum: 0
          type: integer
        end_index:
          minimum: 0
          type: integer
      required:
      - end_index
      - file_citation
      - start_index
      - text
      - type
      title: File citation
      type: object
    MessageContentTextAnnotationsFilePathObject:
      description: A URL for the file that's generated when the assistant used the
        `code_interpreter` tool to generate a file.
      properties:
        type:
          description: Always `file_path`.
          enum:
          - file_path
          type: string
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        file_path:
          $ref: '#/components/schemas/MessageContentTextAnnotationsFilePathObject_file_path'
        start_index:
          minimum: 0
          type: integer
        end_index:
          minimum: 0
          type: integer
      required:
      - end_index
      - file_path
      - start_index
      - text
      - type
      title: File path
      type: object
    MessageDeltaContentTextObject:
      description: The text content that is part of a message.
      properties:
        index:
          description: The index of the content part in the message.
          type: integer
        type:
          description: Always `text`.
          enum:
          - text
          type: string
        text:
          $ref: '#/components/schemas/MessageDeltaContentTextObject_text'
      required:
      - index
      - type
      title: Text
      type: object
    MessageDeltaContentTextAnnotationsFileCitationObject:
      description: A citation within the message that points to a specific quote from
        a specific File associated with the assistant or the message. Generated when
        the assistant uses the "retrieval" tool to search files.
      properties:
        index:
          description: The index of the annotation in the text content part.
          type: integer
        type:
          description: Always `file_citation`.
          enum:
          - file_citation
          type: string
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        file_citation:
          $ref: '#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject_file_citation'
        start_index:
          minimum: 0
          type: integer
        end_index:
          minimum: 0
          type: integer
      required:
      - index
      - type
      title: File citation
      type: object
    MessageDeltaContentTextAnnotationsFilePathObject:
      description: A URL for the file that's generated when the assistant used the
        `code_interpreter` tool to generate a file.
      properties:
        index:
          description: The index of the annotation in the text content part.
          type: integer
        type:
          description: Always `file_path`.
          enum:
          - file_path
          type: string
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        file_path:
          $ref: '#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject_file_path'
        start_index:
          minimum: 0
          type: integer
        end_index:
          minimum: 0
          type: integer
      required:
      - index
      - type
      title: File path
      type: object
    RunStepObject:
      description: |
        Represents a step in execution of a run.
      example:
        cancelled_at: 1
        metadata: "{}"
        assistant_id: assistant_id
        run_id: run_id
        usage:
          completion_tokens: 2
          prompt_tokens: 7
          total_tokens: 9
        created_at: 0
        expired_at: 6
        type: message_creation
        step_details:
          message_creation:
            message_id: message_id
          type: message_creation
        completed_at: 5
        thread_id: thread_id
        id: id
        last_error:
          code: server_error
          message: message
        failed_at: 5
        object: thread.run.step
        status: in_progress
      properties:
        id:
          description: "The identifier of the run step, which can be referenced in\
            \ API endpoints."
          type: string
        object:
          description: "The object type, which is always `thread.run.step`."
          enum:
          - thread.run.step
          type: string
        created_at:
          description: The Unix timestamp (in seconds) for when the run step was created.
          type: integer
        assistant_id:
          description: "The ID of the [assistant](/docs/api-reference/assistants)\
            \ associated with the run step."
          type: string
        thread_id:
          description: "The ID of the [thread](/docs/api-reference/threads) that was\
            \ run."
          type: string
        run_id:
          description: "The ID of the [run](/docs/api-reference/runs) that this run\
            \ step is a part of."
          type: string
        type:
          description: "The type of run step, which can be either `message_creation`\
            \ or `tool_calls`."
          enum:
          - message_creation
          - tool_calls
          type: string
        status:
          description: "The status of the run step, which can be either `in_progress`,\
            \ `cancelled`, `failed`, `completed`, or `expired`."
          enum:
          - in_progress
          - cancelled
          - failed
          - completed
          - expired
          type: string
        step_details:
          $ref: '#/components/schemas/RunStepObject_step_details'
        last_error:
          $ref: '#/components/schemas/RunStepObject_last_error'
        expired_at:
          description: The Unix timestamp (in seconds) for when the run step expired.
            A step is considered expired if the parent run is expired.
          nullable: true
          type: integer
        cancelled_at:
          description: The Unix timestamp (in seconds) for when the run step was cancelled.
          nullable: true
          type: integer
        failed_at:
          description: The Unix timestamp (in seconds) for when the run step failed.
          nullable: true
          type: integer
        completed_at:
          description: The Unix timestamp (in seconds) for when the run step completed.
          nullable: true
          type: integer
        metadata:
          description: |
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          nullable: true
          type: object
          x-oaiTypeLabel: map
        usage:
          $ref: '#/components/schemas/RunStepCompletionUsage'
      required:
      - assistant_id
      - cancelled_at
      - completed_at
      - created_at
      - expired_at
      - failed_at
      - id
      - last_error
      - metadata
      - object
      - run_id
      - status
      - step_details
      - thread_id
      - type
      - usage
      title: Run steps
      type: object
      x-oaiMeta:
        name: The run step object
        beta: true
        example: |
          {
            "id": "step_abc123",
            "object": "thread.run.step",
            "created_at": 1699063291,
            "run_id": "run_abc123",
            "assistant_id": "asst_abc123",
            "thread_id": "thread_abc123",
            "type": "message_creation",
            "status": "completed",
            "cancelled_at": null,
            "completed_at": 1699063291,
            "expired_at": null,
            "failed_at": null,
            "last_error": null,
            "step_details": {
              "type": "message_creation",
              "message_creation": {
                "message_id": "msg_abc123"
              }
            },
            "usage": {
              "prompt_tokens": 123,
              "completion_tokens": 456,
              "total_tokens": 579
            }
          }
    RunStepDeltaObject:
      description: |
        Represents a run step delta i.e. any changed fields on a run step during streaming.
      properties:
        id:
          description: "The identifier of the run step, which can be referenced in\
            \ API endpoints."
          type: string
        object:
          description: "The object type, which is always `thread.run.step.delta`."
          enum:
          - thread.run.step.delta
          type: string
        delta:
          $ref: '#/components/schemas/RunStepDeltaObject_delta'
      required:
      - delta
      - id
      - object
      title: Run step delta object
      type: object
      x-oaiMeta:
        name: The run step delta object
        beta: true
        example: |
          {
            "id": "step_123",
            "object": "thread.run.step.delta",
            "delta": {
              "step_details": {
                "type": "tool_calls",
                "tool_calls": [
                  {
                    "index": 0,
                    "id": "call_123",
                    "type": "code_interpreter",
                    "code_interpreter": { "input": "", "outputs": [] }
                  }
                ]
              }
            }
          }
    ListRunStepsResponse:
      example:
        first_id: step_abc123
        data:
        - cancelled_at: 1
          metadata: "{}"
          assistant_id: assistant_id
          run_id: run_id
          usage:
            completion_tokens: 2
            prompt_tokens: 7
            total_tokens: 9
          created_at: 0
          expired_at: 6
          type: message_creation
          step_details:
            message_creation:
              message_id: message_id
            type: message_creation
          completed_at: 5
          thread_id: thread_id
          id: id
          last_error:
            code: server_error
            message: message
          failed_at: 5
          object: thread.run.step
          status: in_progress
        - cancelled_at: 1
          metadata: "{}"
          assistant_id: assistant_id
          run_id: run_id
          usage:
            completion_tokens: 2
            prompt_tokens: 7
            total_tokens: 9
          created_at: 0
          expired_at: 6
          type: message_creation
          step_details:
            message_creation:
              message_id: message_id
            type: message_creation
          completed_at: 5
          thread_id: thread_id
          id: id
          last_error:
            code: server_error
            message: message
          failed_at: 5
          object: thread.run.step
          status: in_progress
        last_id: step_abc456
        has_more: false
        object: list
      properties:
        object:
          example: list
          type: string
        data:
          items:
            $ref: '#/components/schemas/RunStepObject'
          type: array
        first_id:
          example: step_abc123
          type: string
        last_id:
          example: step_abc456
          type: string
        has_more:
          example: false
          type: boolean
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
    RunStepDetailsMessageCreationObject:
      description: Details of the message creation by the run step.
      example:
        message_creation:
          message_id: message_id
        type: message_creation
      properties:
        type:
          description: Always `message_creation`.
          enum:
          - message_creation
          type: string
        message_creation:
          $ref: '#/components/schemas/RunStepDetailsMessageCreationObject_message_creation'
      required:
      - message_creation
      - type
      title: Message creation
      type: object
    RunStepDeltaStepDetailsMessageCreationObject:
      description: Details of the message creation by the run step.
      properties:
        type:
          description: Always `message_creation`.
          enum:
          - message_creation
          type: string
        message_creation:
          $ref: '#/components/schemas/RunStepDeltaStepDetailsMessageCreationObject_message_creation'
      required:
      - type
      title: Message creation
      type: object
    RunStepDetailsToolCallsObject:
      description: Details of the tool call.
      properties:
        type:
          description: Always `tool_calls`.
          enum:
          - tool_calls
          type: string
        tool_calls:
          description: |
            An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`.
          items:
            $ref: '#/components/schemas/RunStepDetailsToolCallsObject_tool_calls_inner'
          type: array
      required:
      - tool_calls
      - type
      title: Tool calls
      type: object
    RunStepDeltaStepDetailsToolCallsObject:
      description: Details of the tool call.
      properties:
        type:
          description: Always `tool_calls`.
          enum:
          - tool_calls
          type: string
        tool_calls:
          description: |
            An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`.
          items:
            $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsObject_tool_calls_inner'
          type: array
      required:
      - type
      title: Tool calls
      type: object
    RunStepDetailsToolCallsCodeObject:
      description: Details of the Code Interpreter tool call the run step was involved
        in.
      properties:
        id:
          description: The ID of the tool call.
          type: string
        type:
          description: The type of tool call. This is always going to be `code_interpreter`
            for this type of tool call.
          enum:
          - code_interpreter
          type: string
        code_interpreter:
          $ref: '#/components/schemas/RunStepDetailsToolCallsCodeObject_code_interpreter'
      required:
      - code_interpreter
      - id
      - type
      title: Code interpreter tool call
      type: object
    RunStepDeltaStepDetailsToolCallsCodeObject:
      description: Details of the Code Interpreter tool call the run step was involved
        in.
      properties:
        index:
          description: The index of the tool call in the tool calls array.
          type: integer
        id:
          description: The ID of the tool call.
          type: string
        type:
          description: The type of tool call. This is always going to be `code_interpreter`
            for this type of tool call.
          enum:
          - code_interpreter
          type: string
        code_interpreter:
          $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject_code_interpreter'
      required:
      - index
      - type
      title: Code interpreter tool call
      type: object
    RunStepDetailsToolCallsCodeOutputLogsObject:
      description: Text output from the Code Interpreter tool call as part of a run
        step.
      properties:
        type:
          description: Always `logs`.
          enum:
          - logs
          type: string
        logs:
          description: The text output from the Code Interpreter tool call.
          type: string
      required:
      - logs
      - type
      title: Code interpreter log output
      type: object
    RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject:
      description: Text output from the Code Interpreter tool call as part of a run
        step.
      properties:
        index:
          description: The index of the output in the outputs array.
          type: integer
        type:
          description: Always `logs`.
          enum:
          - logs
          type: string
        logs:
          description: The text output from the Code Interpreter tool call.
          type: string
      required:
      - index
      - type
      title: Code interpreter log output
      type: object
    RunStepDetailsToolCallsCodeOutputImageObject:
      properties:
        type:
          description: Always `image`.
          enum:
          - image
          type: string
        image:
          $ref: '#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject_image'
      required:
      - image
      - type
      title: Code interpreter image output
      type: object
    RunStepDeltaStepDetailsToolCallsCodeOutputImageObject:
      properties:
        index:
          description: The index of the output in the outputs array.
          type: integer
        type:
          description: Always `image`.
          enum:
          - image
          type: string
        image:
          $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputImageObject_image'
      required:
      - index
      - type
      title: Code interpreter image output
      type: object
    RunStepDetailsToolCallsRetrievalObject:
      properties:
        id:
          description: The ID of the tool call object.
          type: string
        type:
          description: The type of tool call. This is always going to be `retrieval`
            for this type of tool call.
          enum:
          - retrieval
          type: string
        retrieval:
          description: "For now, this is always going to be an empty object."
          type: object
          x-oaiTypeLabel: map
      required:
      - id
      - retrieval
      - type
      title: Retrieval tool call
      type: object
    RunStepDeltaStepDetailsToolCallsRetrievalObject:
      properties:
        index:
          description: The index of the tool call in the tool calls array.
          type: integer
        id:
          description: The ID of the tool call object.
          type: string
        type:
          description: The type of tool call. This is always going to be `retrieval`
            for this type of tool call.
          enum:
          - retrieval
          type: string
        retrieval:
          description: "For now, this is always going to be an empty object."
          type: object
          x-oaiTypeLabel: map
      required:
      - index
      - type
      title: Retrieval tool call
      type: object
    RunStepDetailsToolCallsFunctionObject:
      properties:
        id:
          description: The ID of the tool call object.
          type: string
        type:
          description: The type of tool call. This is always going to be `function`
            for this type of tool call.
          enum:
          - function
          type: string
        function:
          $ref: '#/components/schemas/RunStepDetailsToolCallsFunctionObject_function'
      required:
      - function
      - id
      - type
      title: Function tool call
      type: object
    RunStepDeltaStepDetailsToolCallsFunctionObject:
      properties:
        index:
          description: The index of the tool call in the tool calls array.
          type: integer
        id:
          description: The ID of the tool call object.
          type: string
        type:
          description: The type of tool call. This is always going to be `function`
            for this type of tool call.
          enum:
          - function
          type: string
        function:
          $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsFunctionObject_function'
      required:
      - index
      - type
      title: Function tool call
      type: object
    AssistantFileObject:
      description: "A list of [Files](/docs/api-reference/files) attached to an `assistant`."
      example:
        assistant_id: assistant_id
        created_at: 0
        id: id
        object: assistant.file
      properties:
        id:
          description: "The identifier, which can be referenced in API endpoints."
          type: string
        object:
          description: "The object type, which is always `assistant.file`."
          enum:
          - assistant.file
          type: string
        created_at:
          description: The Unix timestamp (in seconds) for when the assistant file
            was created.
          type: integer
        assistant_id:
          description: The assistant ID that the file is attached to.
          type: string
      required:
      - assistant_id
      - created_at
      - id
      - object
      title: Assistant files
      type: object
      x-oaiMeta:
        name: The assistant file object
        beta: true
        example: |
          {
            "id": "file-abc123",
            "object": "assistant.file",
            "created_at": 1699055364,
            "assistant_id": "asst_abc123"
          }
    CreateAssistantFileRequest:
      additionalProperties: false
      example:
        file_id: file_id
      properties:
        file_id:
          description: "A [File](/docs/api-reference/files) ID (with `purpose=\"assistants\"\
            `) that the assistant should use. Useful for tools like `retrieval` and\
            \ `code_interpreter` that can access files."
          type: string
      required:
      - file_id
      type: object
    DeleteAssistantFileResponse:
      description: "Deletes the association between the assistant and the file, but\
        \ does not delete the [File](/docs/api-reference/files) object itself."
      example:
        deleted: true
        id: id
        object: assistant.file.deleted
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          enum:
          - assistant.file.deleted
          type: string
      required:
      - deleted
      - id
      - object
      type: object
    ListAssistantFilesResponse:
      example:
        first_id: file-abc123
        data:
        - assistant_id: assistant_id
          created_at: 0
          id: id
          object: assistant.file
        - assistant_id: assistant_id
          created_at: 0
          id: id
          object: assistant.file
        last_id: file-abc456
        has_more: false
        object: list
      properties:
        object:
          example: list
          type: string
        data:
          items:
            $ref: '#/components/schemas/AssistantFileObject'
          type: array
        first_id:
          example: file-abc123
          type: string
        last_id:
          example: file-abc456
          type: string
        has_more:
          example: false
          type: boolean
      required:
      - data
      - first_id
      - has_more
      - items
      - last_id
      - object
    MessageFileObject:
      description: A list of files attached to a `message`.
      example:
        created_at: 0
        message_id: message_id
        id: id
        object: thread.message.file
      properties:
        id:
          description: "The identifier, which can be referenced in API endpoints."
          type: string
        object:
          description: "The object type, which is always `thread.message.file`."
          enum:
          - thread.message.file
          type: string
        created_at:
          description: The Unix timestamp (in seconds) for when the message file was
            created.
          type: integer
        message_id:
          description: "The ID of the [message](/docs/api-reference/messages) that\
            \ the [File](/docs/api-reference/files) is attached to."
          type: string
      required:
      - created_at
      - id
      - message_id
      - object
      title: Message files
      type: object
      x-oaiMeta:
        name: The message file object
        beta: true
        example: |
          {
            "id": "file-abc123",
            "object": "thread.message.file",
            "created_at": 1698107661,
            "message_id": "message_QLoItBbqwyAJEzlTy4y9kOMM",
            "file_id": "file-abc123"
          }
    ListMessageFilesResponse:
      example:
        first_id: file-abc123
        data:
        - created_at: 0
          message_id: message_id
          id: id
          object: thread.message.file
        - created_at: 0
          message_id: message_id
          id: id
          object: thread.message.file
        last_id: file-abc456
        has_more: false
        object: list
      properties:
        object:
          example: list
          type: string
        data:
          items:
            $ref: '#/components/schemas/MessageFileObject'
          type: array
        first_id:
          example: file-abc123
          type: string
        last_id:
          example: file-abc456
          type: string
        has_more:
          example: false
          type: boolean
      required:
      - data
      - first_id
      - has_more
      - items
      - last_id
      - object
    AssistantStreamEvent:
      description: |
        Represents an event emitted when streaming a Run.

        Each event in a server-sent events stream has an `event` and `data` property:

        ```
        event: thread.created
        data: {"id": "thread_123", "object": "thread", ...}
        ```

        We emit events whenever a new object is created, transitions to a new state, or is being
        streamed in parts (deltas). For example, we emit `thread.run.created` when a new run
        is created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses
        to create a message during a run, we emit a `thread.message.created event`, a
        `thread.message.in_progress` event, many `thread.message.delta` events, and finally a
        `thread.message.completed` event.

        We may add additional events over time, so we recommend handling unknown events gracefully
        in your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to
        integrate the Assistants API with streaming.
      oneOf:
      - $ref: '#/components/schemas/ThreadStreamEvent'
      - $ref: '#/components/schemas/RunStreamEvent'
      - $ref: '#/components/schemas/RunStepStreamEvent'
      - $ref: '#/components/schemas/MessageStreamEvent'
      - $ref: '#/components/schemas/ErrorEvent'
      - $ref: '#/components/schemas/DoneEvent'
      x-oaiMeta:
        name: Assistant stream events
        beta: true
    ThreadStreamEvent:
      oneOf:
      - $ref: '#/components/schemas/ThreadStreamEvent_oneOf'
    RunStreamEvent:
      oneOf:
      - $ref: '#/components/schemas/RunStreamEvent_oneOf'
      - $ref: '#/components/schemas/RunStreamEvent_oneOf_1'
      - $ref: '#/components/schemas/RunStreamEvent_oneOf_2'
      - $ref: '#/components/schemas/RunStreamEvent_oneOf_3'
      - $ref: '#/components/schemas/RunStreamEvent_oneOf_4'
      - $ref: '#/components/schemas/RunStreamEvent_oneOf_5'
      - $ref: '#/components/schemas/RunStreamEvent_oneOf_6'
      - $ref: '#/components/schemas/RunStreamEvent_oneOf_7'
      - $ref: '#/components/schemas/RunStreamEvent_oneOf_8'
    RunStepStreamEvent:
      oneOf:
      - $ref: '#/components/schemas/RunStepStreamEvent_oneOf'
      - $ref: '#/components/schemas/RunStepStreamEvent_oneOf_1'
      - $ref: '#/components/schemas/RunStepStreamEvent_oneOf_2'
      - $ref: '#/components/schemas/RunStepStreamEvent_oneOf_3'
      - $ref: '#/components/schemas/RunStepStreamEvent_oneOf_4'
      - $ref: '#/components/schemas/RunStepStreamEvent_oneOf_5'
      - $ref: '#/components/schemas/RunStepStreamEvent_oneOf_6'
    MessageStreamEvent:
      oneOf:
      - $ref: '#/components/schemas/MessageStreamEvent_oneOf'
      - $ref: '#/components/schemas/MessageStreamEvent_oneOf_1'
      - $ref: '#/components/schemas/MessageStreamEvent_oneOf_2'
      - $ref: '#/components/schemas/MessageStreamEvent_oneOf_3'
      - $ref: '#/components/schemas/MessageStreamEvent_oneOf_4'
    ErrorEvent:
      description: "Occurs when an [error](/docs/guides/error-codes/api-errors) occurs.\
        \ This can happen due to an internal server error or a timeout."
      properties:
        event:
          enum:
          - error
          type: string
        data:
          $ref: '#/components/schemas/Error'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is an [error](/docs/guides/error-codes/api-errors)"
    DoneEvent:
      description: Occurs when a stream ends.
      properties:
        event:
          enum:
          - done
          type: string
        data:
          enum:
          - "[DONE]"
          type: string
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is `[DONE]`"
    createTranscription_200_response:
      oneOf:
      - $ref: '#/components/schemas/CreateTranscriptionResponseJson'
      - $ref: '#/components/schemas/CreateTranscriptionResponseVerboseJson'
    createTranslation_200_response:
      oneOf:
      - $ref: '#/components/schemas/CreateTranslationResponseJson'
      - $ref: '#/components/schemas/CreateTranslationResponseVerboseJson'
    CreateCompletionRequest_model:
      anyOf:
      - type: string
      - enum:
        - gpt-3.5-turbo-instruct
        - davinci-002
        - babbage-002
        type: string
      description: |
        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
      x-oaiTypeLabel: string
    CreateCompletionRequest_prompt:
      default: <|endoftext|>
      description: |
        The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.

        Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
      nullable: true
      oneOf:
      - default: ""
        example: This is a test.
        type: string
      - items:
          default: ""
          example: This is a test.
          type: string
        type: array
      - example: "[1212, 318, 257, 1332, 13]"
        items:
          type: integer
        minItems: 1
        type: array
      - example: "[[1212, 318, 257, 1332, 13]]"
        items:
          items:
            type: integer
          minItems: 1
          type: array
        minItems: 1
        type: array
    CreateCompletionRequest_stop:
      default: null
      description: |
        Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
      nullable: true
      oneOf:
      - default: <|endoftext|>
        example: |2+

        nullable: true
        type: string
      - items:
          example: "[\"\\n\"]"
          type: string
        maxItems: 4
        minItems: 1
        type: array
    CreateCompletionResponse_choices_inner_logprobs:
      example:
        top_logprobs:
        - key: 5.962133916683182
        - key: 5.962133916683182
        token_logprobs:
        - 1.4658129805029452
        - 1.4658129805029452
        tokens:
        - tokens
        - tokens
        text_offset:
        - 6
        - 6
      nullable: true
      properties:
        text_offset:
          items:
            type: integer
          type: array
        token_logprobs:
          items:
            type: number
          type: array
        tokens:
          items:
            type: string
          type: array
        top_logprobs:
          items:
            additionalProperties:
              type: number
            type: object
          type: array
      type: object
    CreateCompletionResponse_choices_inner:
      example:
        finish_reason: stop
        index: 0
        text: text
        logprobs:
          top_logprobs:
          - key: 5.962133916683182
          - key: 5.962133916683182
          token_logprobs:
          - 1.4658129805029452
          - 1.4658129805029452
          tokens:
          - tokens
          - tokens
          text_offset:
          - 6
          - 6
      properties:
        finish_reason:
          description: |
            The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
            `length` if the maximum number of tokens specified in the request was reached,
            or `content_filter` if content was omitted due to a flag from our content filters.
          enum:
          - stop
          - length
          - content_filter
          type: string
        index:
          type: integer
        logprobs:
          $ref: '#/components/schemas/CreateCompletionResponse_choices_inner_logprobs'
        text:
          type: string
      required:
      - finish_reason
      - index
      - logprobs
      - text
      type: object
    ChatCompletionRequestMessageContentPartImage_image_url:
      properties:
        url:
          description: Either a URL of the image or the base64 encoded image data.
          format: uri
          type: string
        detail:
          default: auto
          description: "Specifies the detail level of the image. Learn more in the\
            \ [Vision guide](/docs/guides/vision/low-or-high-fidelity-image-understanding)."
          enum:
          - auto
          - low
          - high
          type: string
      required:
      - url
      type: object
    ChatCompletionRequestUserMessage_content:
      description: |
        The contents of the user message.
      oneOf:
      - description: The text contents of the message.
        title: Text content
        type: string
      - description: "An array of content parts with a defined type, each can be of\
          \ type `text` or `image_url` when passing in images. You can pass multiple\
          \ images by adding multiple `image_url` content parts. Image input is only\
          \ supported when using the `gpt-4-visual-preview` model."
        items:
          $ref: '#/components/schemas/ChatCompletionRequestMessageContentPart'
        minItems: 1
        title: Array of content parts
        type: array
      x-oaiExpandable: true
    ChatCompletionRequestAssistantMessage_function_call:
      deprecated: true
      description: "Deprecated and replaced by `tool_calls`. The name and arguments\
        \ of a function that should be called, as generated by the model."
      example:
        name: name
        arguments: arguments
      properties:
        arguments:
          description: "The arguments to call the function with, as generated by the\
            \ model in JSON format. Note that the model does not always generate valid\
            \ JSON, and may hallucinate parameters not defined by your function schema.\
            \ Validate the arguments in your code before calling your function."
          type: string
        name:
          description: The name of the function to call.
          type: string
      required:
      - arguments
      - name
      type: object
    ChatCompletionNamedToolChoice_function:
      properties:
        name:
          description: The name of the function to call.
          type: string
      required:
      - name
      type: object
    ChatCompletionMessageToolCall_function:
      description: The function that the model called.
      example:
        name: name
        arguments: arguments
      properties:
        name:
          description: The name of the function to call.
          type: string
        arguments:
          description: "The arguments to call the function with, as generated by the\
            \ model in JSON format. Note that the model does not always generate valid\
            \ JSON, and may hallucinate parameters not defined by your function schema.\
            \ Validate the arguments in your code before calling your function."
          type: string
      required:
      - arguments
      - name
      type: object
    ChatCompletionMessageToolCallChunk_function:
      properties:
        name:
          description: The name of the function to call.
          type: string
        arguments:
          description: "The arguments to call the function with, as generated by the\
            \ model in JSON format. Note that the model does not always generate valid\
            \ JSON, and may hallucinate parameters not defined by your function schema.\
            \ Validate the arguments in your code before calling your function."
          type: string
      type: object
    ChatCompletionStreamResponseDelta_function_call:
      deprecated: true
      description: "Deprecated and replaced by `tool_calls`. The name and arguments\
        \ of a function that should be called, as generated by the model."
      properties:
        arguments:
          description: "The arguments to call the function with, as generated by the\
            \ model in JSON format. Note that the model does not always generate valid\
            \ JSON, and may hallucinate parameters not defined by your function schema.\
            \ Validate the arguments in your code before calling your function."
          type: string
        name:
          description: The name of the function to call.
          type: string
      type: object
    CreateChatCompletionRequest_model:
      anyOf:
      - type: string
      - enum:
        - gpt-4-turbo
        - gpt-4-turbo-2024-04-09
        - gpt-4-0125-preview
        - gpt-4-turbo-preview
        - gpt-4-1106-preview
        - gpt-4-vision-preview
        - gpt-4
        - gpt-4-0314
        - gpt-4-0613
        - gpt-4-32k
        - gpt-4-32k-0314
        - gpt-4-32k-0613
        - gpt-3.5-turbo
        - gpt-3.5-turbo-16k
        - gpt-3.5-turbo-0301
        - gpt-3.5-turbo-0613
        - gpt-3.5-turbo-1106
        - gpt-3.5-turbo-0125
        - gpt-3.5-turbo-16k-0613
        type: string
      description: "ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility)\
        \ table for details on which models work with the Chat API."
      example: gpt-4-turbo
      x-oaiTypeLabel: string
    CreateChatCompletionRequest_response_format:
      description: |
        An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.

        Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.

        **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
      example:
        type: json_object
      properties:
        type:
          default: text
          description: Must be one of `text` or `json_object`.
          enum:
          - text
          - json_object
          example: json_object
          type: string
      type: object
    CreateChatCompletionRequest_stop:
      default: null
      description: |
        Up to 4 sequences where the API will stop generating further tokens.
      oneOf:
      - nullable: true
        type: string
      - items:
          type: string
        maxItems: 4
        minItems: 1
        type: array
    CreateChatCompletionRequest_function_call:
      deprecated: true
      description: |
        Deprecated in favor of `tool_choice`.

        Controls which (if any) function is called by the model.
        `none` means the model will not call a function and instead generates a message.
        `auto` means the model can pick between generating a message or calling a function.
        Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.

        `none` is the default when no functions are present. `auto` is the default if functions are present.
      oneOf:
      - description: |
          `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
        enum:
        - none
        - auto
        type: string
      - $ref: '#/components/schemas/ChatCompletionFunctionCallOption'
      x-oaiExpandable: true
    CreateChatCompletionResponse_choices_inner_logprobs:
      description: Log probability information for the choice.
      example:
        content:
        - top_logprobs:
          - logprob: 5.962133916683182
            bytes:
            - 5
            - 5
            token: token
          - logprob: 5.962133916683182
            bytes:
            - 5
            - 5
            token: token
          logprob: 6.027456183070403
          bytes:
          - 1
          - 1
          token: token
        - top_logprobs:
          - logprob: 5.962133916683182
            bytes:
            - 5
            - 5
            token: token
          - logprob: 5.962133916683182
            bytes:
            - 5
            - 5
            token: token
          logprob: 6.027456183070403
          bytes:
          - 1
          - 1
          token: token
      nullable: true
      properties:
        content:
          description: A list of message content tokens with log probability information.
          items:
            $ref: '#/components/schemas/ChatCompletionTokenLogprob'
          nullable: true
          type: array
      required:
      - content
      type: object
    CreateChatCompletionResponse_choices_inner:
      example:
        finish_reason: stop
        index: 0
        message:
          role: assistant
          function_call:
            name: name
            arguments: arguments
          tool_calls:
          - function:
              name: name
              arguments: arguments
            id: id
            type: function
          - function:
              name: name
              arguments: arguments
            id: id
            type: function
          content: content
        logprobs:
          content:
          - top_logprobs:
            - logprob: 5.962133916683182
              bytes:
              - 5
              - 5
              token: token
            - logprob: 5.962133916683182
              bytes:
              - 5
              - 5
              token: token
            logprob: 6.027456183070403
            bytes:
            - 1
            - 1
            token: token
          - top_logprobs:
            - logprob: 5.962133916683182
              bytes:
              - 5
              - 5
              token: token
            - logprob: 5.962133916683182
              bytes:
              - 5
              - 5
              token: token
            logprob: 6.027456183070403
            bytes:
            - 1
            - 1
            token: token
      properties:
        finish_reason:
          description: |
            The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
            `length` if the maximum number of tokens specified in the request was reached,
            `content_filter` if content was omitted due to a flag from our content filters,
            `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
          enum:
          - stop
          - length
          - tool_calls
          - content_filter
          - function_call
          type: string
        index:
          description: The index of the choice in the list of choices.
          type: integer
        message:
          $ref: '#/components/schemas/ChatCompletionResponseMessage'
        logprobs:
          $ref: '#/components/schemas/CreateChatCompletionResponse_choices_inner_logprobs'
      required:
      - finish_reason
      - index
      - logprobs
      - message
      type: object
    CreateChatCompletionFunctionResponse_choices_inner:
      properties:
        finish_reason:
          description: |
            The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.
          enum:
          - stop
          - length
          - function_call
          - content_filter
          type: string
        index:
          description: The index of the choice in the list of choices.
          type: integer
        message:
          $ref: '#/components/schemas/ChatCompletionResponseMessage'
      required:
      - finish_reason
      - index
      - logprobs
      - message
      type: object
    ChatCompletionTokenLogprob_top_logprobs_inner:
      example:
        logprob: 5.962133916683182
        bytes:
        - 5
        - 5
        token: token
      properties:
        token:
          description: The token.
          type: string
        logprob:
          description: "The log probability of this token, if it is within the top\
            \ 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify\
            \ that the token is very unlikely."
          type: number
        bytes:
          description: A list of integers representing the UTF-8 bytes representation
            of the token. Useful in instances where characters are represented by
            multiple tokens and their byte representations must be combined to generate
            the correct text representation. Can be `null` if there is no bytes representation
            for the token.
          items:
            type: integer
          nullable: true
          type: array
      required:
      - bytes
      - logprob
      - token
      type: object
    CreateChatCompletionStreamResponse_choices_inner:
      properties:
        delta:
          $ref: '#/components/schemas/ChatCompletionStreamResponseDelta'
        logprobs:
          $ref: '#/components/schemas/CreateChatCompletionResponse_choices_inner_logprobs'
        finish_reason:
          description: |
            The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
            `length` if the maximum number of tokens specified in the request was reached,
            `content_filter` if content was omitted due to a flag from our content filters,
            `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
          enum:
          - stop
          - length
          - tool_calls
          - content_filter
          - function_call
          nullable: true
          type: string
        index:
          description: The index of the choice in the list of choices.
          type: integer
      required:
      - delta
      - finish_reason
      - index
      type: object
    CreateImageRequest_model:
      anyOf:
      - type: string
      - enum:
        - dall-e-2
        - dall-e-3
        type: string
      default: dall-e-2
      description: The model to use for image generation.
      example: dall-e-3
      nullable: true
      x-oaiTypeLabel: string
    CreateImageEditRequest_model:
      anyOf:
      - type: string
      - enum:
        - dall-e-2
        type: string
      default: dall-e-2
      description: The model to use for image generation. Only `dall-e-2` is supported
        at this time.
      example: dall-e-2
      nullable: true
      x-oaiTypeLabel: string
    CreateModerationRequest_input:
      description: The input text to classify
      oneOf:
      - default: ""
        example: I want to kill them.
        type: string
      - items:
          default: ""
          example: I want to kill them.
          type: string
        type: array
    CreateModerationRequest_model:
      anyOf:
      - type: string
      - enum:
        - text-moderation-latest
        - text-moderation-stable
        type: string
      default: text-moderation-latest
      description: |
        Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.

        The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.
      example: text-moderation-stable
      nullable: false
      x-oaiTypeLabel: string
    CreateModerationResponse_results_inner_categories:
      description: "A list of the categories, and whether they are flagged or not."
      example:
        self-harm/intent: true
        hate/threatening: true
        self-harm/instructions: true
        sexual/minors: true
        harassment/threatening: true
        hate: true
        self-harm: true
        harassment: true
        sexual: true
        violence/graphic: true
        violence: true
      properties:
        hate:
          description: "Content that expresses, incites, or promotes hate based on\
            \ race, gender, ethnicity, religion, nationality, sexual orientation,\
            \ disability status, or caste. Hateful content aimed at non-protected\
            \ groups (e.g., chess players) is harassment."
          type: boolean
        hate/threatening:
          description: "Hateful content that also includes violence or serious harm\
            \ towards the targeted group based on race, gender, ethnicity, religion,\
            \ nationality, sexual orientation, disability status, or caste."
          type: boolean
        harassment:
          description: "Content that expresses, incites, or promotes harassing language\
            \ towards any target."
          type: boolean
        harassment/threatening:
          description: Harassment content that also includes violence or serious harm
            towards any target.
          type: boolean
        self-harm:
          description: "Content that promotes, encourages, or depicts acts of self-harm,\
            \ such as suicide, cutting, and eating disorders."
          type: boolean
        self-harm/intent:
          description: "Content where the speaker expresses that they are engaging\
            \ or intend to engage in acts of self-harm, such as suicide, cutting,\
            \ and eating disorders."
          type: boolean
        self-harm/instructions:
          description: "Content that encourages performing acts of self-harm, such\
            \ as suicide, cutting, and eating disorders, or that gives instructions\
            \ or advice on how to commit such acts."
          type: boolean
        sexual:
          description: "Content meant to arouse sexual excitement, such as the description\
            \ of sexual activity, or that promotes sexual services (excluding sex\
            \ education and wellness)."
          type: boolean
        sexual/minors:
          description: Sexual content that includes an individual who is under 18
            years old.
          type: boolean
        violence:
          description: "Content that depicts death, violence, or physical injury."
          type: boolean
        violence/graphic:
          description: "Content that depicts death, violence, or physical injury in\
            \ graphic detail."
          type: boolean
      required:
      - harassment
      - harassment/threatening
      - hate
      - hate/threatening
      - self-harm
      - self-harm/instructions
      - self-harm/intent
      - sexual
      - sexual/minors
      - violence
      - violence/graphic
      type: object
    CreateModerationResponse_results_inner_category_scores:
      description: A list of the categories along with their scores as predicted by
        model.
      example:
        self-harm/intent: 2.3021358869347655
        hate/threatening: 6.027456183070403
        self-harm/instructions: 7.061401241503109
        sexual/minors: 3.616076749251911
        harassment/threatening: 5.962133916683182
        hate: 0.8008281904610115
        self-harm: 5.637376656633329
        harassment: 1.4658129805029452
        sexual: 9.301444243932576
        violence/graphic: 4.145608029883936
        violence: 2.027123023002322
      properties:
        hate:
          description: The score for the category 'hate'.
          type: number
        hate/threatening:
          description: The score for the category 'hate/threatening'.
          type: number
        harassment:
          description: The score for the category 'harassment'.
          type: number
        harassment/threatening:
          description: The score for the category 'harassment/threatening'.
          type: number
        self-harm:
          description: The score for the category 'self-harm'.
          type: number
        self-harm/intent:
          description: The score for the category 'self-harm/intent'.
          type: number
        self-harm/instructions:
          description: The score for the category 'self-harm/instructions'.
          type: number
        sexual:
          description: The score for the category 'sexual'.
          type: number
        sexual/minors:
          description: The score for the category 'sexual/minors'.
          type: number
        violence:
          description: The score for the category 'violence'.
          type: number
        violence/graphic:
          description: The score for the category 'violence/graphic'.
          type: number
      required:
      - harassment
      - harassment/threatening
      - hate
      - hate/threatening
      - self-harm
      - self-harm/instructions
      - self-harm/intent
      - sexual
      - sexual/minors
      - violence
      - violence/graphic
      type: object
    CreateModerationResponse_results_inner:
      example:
        category_scores:
          self-harm/intent: 2.3021358869347655
          hate/threatening: 6.027456183070403
          self-harm/instructions: 7.061401241503109
          sexual/minors: 3.616076749251911
          harassment/threatening: 5.962133916683182
          hate: 0.8008281904610115
          self-harm: 5.637376656633329
          harassment: 1.4658129805029452
          sexual: 9.301444243932576
          violence/graphic: 4.145608029883936
          violence: 2.027123023002322
        flagged: true
        categories:
          self-harm/intent: true
          hate/threatening: true
          self-harm/instructions: true
          sexual/minors: true
          harassment/threatening: true
          hate: true
          self-harm: true
          harassment: true
          sexual: true
          violence/graphic: true
          violence: true
      properties:
        flagged:
          description: Whether any of the below categories are flagged.
          type: boolean
        categories:
          $ref: '#/components/schemas/CreateModerationResponse_results_inner_categories'
        category_scores:
          $ref: '#/components/schemas/CreateModerationResponse_results_inner_category_scores'
      required:
      - categories
      - category_scores
      - flagged
      type: object
    CreateFineTuningJobRequest_model:
      anyOf:
      - type: string
      - enum:
        - babbage-002
        - davinci-002
        - gpt-3.5-turbo
        type: string
      description: |
        The name of the model to fine-tune. You can select one of the
        [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned).
      example: gpt-3.5-turbo
      x-oaiTypeLabel: string
    CreateFineTuningJobRequest_hyperparameters_batch_size:
      default: auto
      description: |
        Number of examples in each batch. A larger batch size means that model parameters
        are updated less frequently, but with lower variance.
      oneOf:
      - enum:
        - auto
        type: string
      - maximum: 256
        minimum: 1
        type: integer
    CreateFineTuningJobRequest_hyperparameters_learning_rate_multiplier:
      default: auto
      description: |
        Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
        overfitting.
      oneOf:
      - enum:
        - auto
        type: string
      - exclusiveMinimum: true
        minimum: 0
        type: number
    CreateFineTuningJobRequest_hyperparameters_n_epochs:
      default: auto
      description: |
        The number of epochs to train the model for. An epoch refers to one full cycle
        through the training dataset.
      oneOf:
      - enum:
        - auto
        type: string
      - maximum: 50
        minimum: 1
        type: integer
    CreateFineTuningJobRequest_hyperparameters:
      description: The hyperparameters used for the fine-tuning job.
      example:
        batch_size: auto
        n_epochs: auto
        learning_rate_multiplier: auto
      properties:
        batch_size:
          $ref: '#/components/schemas/CreateFineTuningJobRequest_hyperparameters_batch_size'
        learning_rate_multiplier:
          $ref: '#/components/schemas/CreateFineTuningJobRequest_hyperparameters_learning_rate_multiplier'
        n_epochs:
          $ref: '#/components/schemas/CreateFineTuningJobRequest_hyperparameters_n_epochs'
      type: object
    CreateFineTuningJobRequest_integrations_inner_type:
      description: |
        The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.
      oneOf:
      - enum:
        - wandb
        type: string
    CreateFineTuningJobRequest_integrations_inner_wandb:
      description: |
        The settings for your integration with Weights and Biases. This payload specifies the project that
        metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
        to your run, and set a default entity (team, username, etc) to be associated with your run.
      example:
        name: name
        project: my-wandb-project
        entity: entity
        tags:
        - custom-tag
        - custom-tag
      properties:
        project:
          description: |
            The name of the project that the new run will be created under.
          example: my-wandb-project
          type: string
        name:
          description: |
            A display name to set for the run. If not set, we will use the Job ID as the name.
          nullable: true
          type: string
        entity:
          description: |
            The entity to use for the run. This allows you to set the team or username of the WandB user that you would
            like associated with the run. If not set, the default entity for the registered WandB API key is used.
          nullable: true
          type: string
        tags:
          description: |
            A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
            default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}".
          items:
            example: custom-tag
            type: string
          type: array
      required:
      - project
      type: object
    CreateFineTuningJobRequest_integrations_inner:
      example:
        wandb:
          name: name
          project: my-wandb-project
          entity: entity
          tags:
          - custom-tag
          - custom-tag
        type: wandb
      properties:
        type:
          $ref: '#/components/schemas/CreateFineTuningJobRequest_integrations_inner_type'
        wandb:
          $ref: '#/components/schemas/CreateFineTuningJobRequest_integrations_inner_wandb'
      required:
      - type
      - wandb
      type: object
    CreateEmbeddingRequest_input:
      description: |
        Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
      example: The quick brown fox jumped over the lazy dog
      oneOf:
      - default: ""
        description: The string that will be turned into an embedding.
        example: This is a test.
        title: string
        type: string
      - description: The array of strings that will be turned into an embedding.
        items:
          default: ""
          example: "['This is a test.']"
          type: string
        maxItems: 2048
        minItems: 1
        title: array
        type: array
      - description: The array of integers that will be turned into an embedding.
        example: "[1212, 318, 257, 1332, 13]"
        items:
          type: integer
        maxItems: 2048
        minItems: 1
        title: array
        type: array
      - description: The array of arrays containing integers that will be turned into
          an embedding.
        example: "[[1212, 318, 257, 1332, 13]]"
        items:
          items:
            type: integer
          minItems: 1
          type: array
        maxItems: 2048
        minItems: 1
        title: array
        type: array
      x-oaiExpandable: true
    CreateEmbeddingRequest_model:
      anyOf:
      - type: string
      - enum:
        - text-embedding-ada-002
        - text-embedding-3-small
        - text-embedding-3-large
        type: string
      description: |
        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
      example: text-embedding-3-small
      x-oaiTypeLabel: string
    CreateEmbeddingResponse_usage:
      description: The usage information for the request.
      example:
        prompt_tokens: 1
        total_tokens: 5
      properties:
        prompt_tokens:
          description: The number of tokens used by the prompt.
          type: integer
        total_tokens:
          description: The total number of tokens used by the request.
          type: integer
      required:
      - prompt_tokens
      - total_tokens
      type: object
    CreateTranscriptionRequest_model:
      anyOf:
      - type: string
      - enum:
        - whisper-1
        type: string
      description: |
        ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.
      example: whisper-1
      x-oaiTypeLabel: string
    CreateSpeechRequest_model:
      anyOf:
      - type: string
      - enum:
        - tts-1
        - tts-1-hd
        type: string
      description: |
        One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd`
      x-oaiTypeLabel: string
    FineTuningJob_error:
      description: "For fine-tuning jobs that have `failed`, this will contain more\
        \ information on the cause of the failure."
      example:
        code: code
        param: param
        message: message
      nullable: true
      properties:
        code:
          description: A machine-readable error code.
          type: string
        message:
          description: A human-readable error message.
          type: string
        param:
          description: "The parameter that was invalid, usually `training_file` or\
            \ `validation_file`. This field will be null if the failure was not parameter-specific."
          nullable: true
          type: string
      required:
      - code
      - message
      - param
      type: object
    FineTuningJob_hyperparameters_n_epochs:
      default: auto
      description: |-
        The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
        "auto" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
      oneOf:
      - enum:
        - auto
        type: string
      - maximum: 50
        minimum: 1
        type: integer
    FineTuningJob_hyperparameters:
      description: "The hyperparameters used for the fine-tuning job. See the [fine-tuning\
        \ guide](/docs/guides/fine-tuning) for more details."
      example:
        n_epochs: auto
      properties:
        n_epochs:
          $ref: '#/components/schemas/FineTuningJob_hyperparameters_n_epochs'
      required:
      - n_epochs
      type: object
    FineTuningJob_integrations_inner:
      oneOf:
      - $ref: '#/components/schemas/FineTuningIntegration'
      x-oaiExpandable: true
    FineTuningJobCheckpoint_metrics:
      description: Metrics at the step number during the fine-tuning job.
      example:
        full_valid_mean_token_accuracy: 3.616076749251911
        valid_loss: 2.3021358869347655
        full_valid_loss: 9.301444243932576
        train_mean_token_accuracy: 5.637376656633329
        valid_mean_token_accuracy: 7.061401241503109
        train_loss: 5.962133916683182
        step: 1.4658129805029452
      properties:
        step:
          type: number
        train_loss:
          type: number
        train_mean_token_accuracy:
          type: number
        valid_loss:
          type: number
        valid_mean_token_accuracy:
          type: number
        full_valid_loss:
          type: number
        full_valid_mean_token_accuracy:
          type: number
      type: object
    AssistantObject_tools_inner:
      oneOf:
      - $ref: '#/components/schemas/AssistantToolsCode'
      - $ref: '#/components/schemas/AssistantToolsRetrieval'
      - $ref: '#/components/schemas/AssistantToolsFunction'
      x-oaiExpandable: true
    CreateAssistantRequest_model:
      anyOf:
      - type: string
      - enum:
        - gpt-4-turbo
        - gpt-4-turbo-2024-04-09
        - gpt-4-0125-preview
        - gpt-4-turbo-preview
        - gpt-4-1106-preview
        - gpt-4-vision-preview
        - gpt-4
        - gpt-4-0314
        - gpt-4-0613
        - gpt-4-32k
        - gpt-4-32k-0314
        - gpt-4-32k-0613
        - gpt-3.5-turbo
        - gpt-3.5-turbo-16k
        - gpt-3.5-turbo-0613
        - gpt-3.5-turbo-1106
        - gpt-3.5-turbo-0125
        - gpt-3.5-turbo-16k-0613
        type: string
      description: |
        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
      example: gpt-4-turbo
      x-oaiTypeLabel: string
    RunObject_required_action_submit_tool_outputs:
      description: Details on the tool outputs needed for this run to continue.
      example:
        tool_calls:
        - function:
            name: name
            arguments: arguments
          id: id
          type: function
        - function:
            name: name
            arguments: arguments
          id: id
          type: function
      properties:
        tool_calls:
          description: A list of the relevant tool calls.
          items:
            $ref: '#/components/schemas/RunToolCallObject'
          type: array
      required:
      - tool_calls
      type: object
    RunObject_required_action:
      description: Details on the action required to continue the run. Will be `null`
        if no action is required.
      example:
        submit_tool_outputs:
          tool_calls:
          - function:
              name: name
              arguments: arguments
            id: id
            type: function
          - function:
              name: name
              arguments: arguments
            id: id
            type: function
        type: submit_tool_outputs
      nullable: true
      properties:
        type:
          description: "For now, this is always `submit_tool_outputs`."
          enum:
          - submit_tool_outputs
          type: string
        submit_tool_outputs:
          $ref: '#/components/schemas/RunObject_required_action_submit_tool_outputs'
      required:
      - submit_tool_outputs
      - type
      type: object
    RunObject_last_error:
      description: The last error associated with this run. Will be `null` if there
        are no errors.
      example:
        code: server_error
        message: message
      nullable: true
      properties:
        code:
          description: "One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`."
          enum:
          - server_error
          - rate_limit_exceeded
          - invalid_prompt
          type: string
        message:
          description: A human-readable description of the error.
          type: string
      required:
      - code
      - message
      type: object
    RunObject_incomplete_details:
      description: Details on why the run is incomplete. Will be `null` if the run
        is not incomplete.
      example:
        reason: max_completion_tokens
      nullable: true
      properties:
        reason:
          description: The reason why the run is incomplete. This will point to which
            specific token limit was reached over the course of the run.
          enum:
          - max_completion_tokens
          - max_prompt_tokens
          type: string
      type: object
    CreateRunRequest_model:
      anyOf:
      - type: string
      - enum:
        - gpt-4-turbo
        - gpt-4-turbo-2024-04-09
        - gpt-4-0125-preview
        - gpt-4-turbo-preview
        - gpt-4-1106-preview
        - gpt-4-vision-preview
        - gpt-4
        - gpt-4-0314
        - gpt-4-0613
        - gpt-4-32k
        - gpt-4-32k-0314
        - gpt-4-32k-0613
        - gpt-3.5-turbo
        - gpt-3.5-turbo-16k
        - gpt-3.5-turbo-0613
        - gpt-3.5-turbo-1106
        - gpt-3.5-turbo-0125
        - gpt-3.5-turbo-16k-0613
        type: string
      description: "The ID of the [Model](/docs/api-reference/models) to be used to\
        \ execute this run. If a value is provided here, it will override the model\
        \ associated with the assistant. If not, the model associated with the assistant\
        \ will be used."
      example: gpt-4-turbo
      nullable: true
      x-oaiTypeLabel: string
    SubmitToolOutputsRunRequest_tool_outputs_inner:
      example:
        output: output
        tool_call_id: tool_call_id
      properties:
        tool_call_id:
          description: The ID of the tool call in the `required_action` object within
            the run object the output is being submitted for.
          type: string
        output:
          description: The output of the tool call to be submitted to continue the
            run.
          type: string
      type: object
    RunToolCallObject_function:
      description: The function definition.
      example:
        name: name
        arguments: arguments
      properties:
        name:
          description: The name of the function.
          type: string
        arguments:
          description: The arguments that the model expects you to pass to the function.
          type: string
      required:
      - arguments
      - name
      type: object
    CreateThreadAndRunRequest_tools_inner:
      oneOf:
      - $ref: '#/components/schemas/AssistantToolsCode'
      - $ref: '#/components/schemas/AssistantToolsRetrieval'
      - $ref: '#/components/schemas/AssistantToolsFunction'
    MessageObject_incomplete_details:
      description: "On an incomplete message, details about why the message is incomplete."
      example:
        reason: content_filter
      nullable: true
      properties:
        reason:
          description: The reason the message is incomplete.
          enum:
          - content_filter
          - max_tokens
          - run_cancelled
          - run_expired
          - run_failed
          type: string
      required:
      - reason
      type: object
    MessageObject_content_inner:
      oneOf:
      - $ref: '#/components/schemas/MessageContentImageFileObject'
      - $ref: '#/components/schemas/MessageContentTextObject'
      x-oaiExpandable: true
    MessageDeltaObject_delta_content_inner:
      oneOf:
      - $ref: '#/components/schemas/MessageDeltaContentImageFileObject'
      - $ref: '#/components/schemas/MessageDeltaContentTextObject'
      x-oaiExpandable: true
    MessageDeltaObject_delta:
      description: The delta containing the fields that have changed on the Message.
      properties:
        role:
          description: The entity that produced the message. One of `user` or `assistant`.
          enum:
          - user
          - assistant
          type: string
        content:
          description: The content of the message in array of text and/or images.
          items:
            $ref: '#/components/schemas/MessageDeltaObject_delta_content_inner'
          type: array
        file_ids:
          default: []
          description: "A list of [file](/docs/api-reference/files) IDs that the assistant\
            \ should use. Useful for tools like retrieval and code_interpreter that\
            \ can access files. A maximum of 10 files can be attached to a message."
          items:
            type: string
          maxItems: 10
          type: array
      type: object
    MessageContentImageFileObject_image_file:
      example:
        file_id: file_id
      properties:
        file_id:
          description: "The [File](/docs/api-reference/files) ID of the image in the\
            \ message content."
          type: string
      required:
      - file_id
      type: object
    MessageDeltaContentImageFileObject_image_file:
      properties:
        file_id:
          description: "The [File](/docs/api-reference/files) ID of the image in the\
            \ message content."
          type: string
      type: object
    MessageContentTextObject_text_annotations_inner:
      oneOf:
      - $ref: '#/components/schemas/MessageContentTextAnnotationsFileCitationObject'
      - $ref: '#/components/schemas/MessageContentTextAnnotationsFilePathObject'
      x-oaiExpandable: true
    MessageContentTextObject_text:
      properties:
        value:
          description: The data that makes up the text.
          type: string
        annotations:
          items:
            $ref: '#/components/schemas/MessageContentTextObject_text_annotations_inner'
          type: array
      required:
      - annotations
      - value
      type: object
    MessageContentTextAnnotationsFileCitationObject_file_citation:
      properties:
        file_id:
          description: The ID of the specific File the citation is from.
          type: string
        quote:
          description: The specific quote in the file.
          type: string
      required:
      - file_id
      - quote
      type: object
    MessageContentTextAnnotationsFilePathObject_file_path:
      properties:
        file_id:
          description: The ID of the file that was generated.
          type: string
      required:
      - file_id
      type: object
    MessageDeltaContentTextObject_text_annotations_inner:
      oneOf:
      - $ref: '#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject'
      - $ref: '#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject'
      x-oaiExpandable: true
    MessageDeltaContentTextObject_text:
      properties:
        value:
          description: The data that makes up the text.
          type: string
        annotations:
          items:
            $ref: '#/components/schemas/MessageDeltaContentTextObject_text_annotations_inner'
          type: array
      type: object
    MessageDeltaContentTextAnnotationsFileCitationObject_file_citation:
      properties:
        file_id:
          description: The ID of the specific File the citation is from.
          type: string
        quote:
          description: The specific quote in the file.
          type: string
      type: object
    MessageDeltaContentTextAnnotationsFilePathObject_file_path:
      properties:
        file_id:
          description: The ID of the file that was generated.
          type: string
      type: object
    RunStepObject_step_details:
      description: The details of the run step.
      oneOf:
      - $ref: '#/components/schemas/RunStepDetailsMessageCreationObject'
      - $ref: '#/components/schemas/RunStepDetailsToolCallsObject'
      type: object
      x-oaiExpandable: true
    RunStepObject_last_error:
      description: The last error associated with this run step. Will be `null` if
        there are no errors.
      example:
        code: server_error
        message: message
      nullable: true
      properties:
        code:
          description: One of `server_error` or `rate_limit_exceeded`.
          enum:
          - server_error
          - rate_limit_exceeded
          type: string
        message:
          description: A human-readable description of the error.
          type: string
      required:
      - code
      - message
      type: object
    RunStepDeltaObject_delta_step_details:
      description: The details of the run step.
      oneOf:
      - $ref: '#/components/schemas/RunStepDeltaStepDetailsMessageCreationObject'
      - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsObject'
      type: object
      x-oaiExpandable: true
    RunStepDeltaObject_delta:
      description: The delta containing the fields that have changed on the run step.
      properties:
        step_details:
          $ref: '#/components/schemas/RunStepDeltaObject_delta_step_details'
      type: object
    RunStepDetailsMessageCreationObject_message_creation:
      example:
        message_id: message_id
      properties:
        message_id:
          description: The ID of the message that was created by this run step.
          type: string
      required:
      - message_id
      type: object
    RunStepDeltaStepDetailsMessageCreationObject_message_creation:
      properties:
        message_id:
          description: The ID of the message that was created by this run step.
          type: string
      type: object
    RunStepDetailsToolCallsObject_tool_calls_inner:
      oneOf:
      - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeObject'
      - $ref: '#/components/schemas/RunStepDetailsToolCallsRetrievalObject'
      - $ref: '#/components/schemas/RunStepDetailsToolCallsFunctionObject'
      x-oaiExpandable: true
    RunStepDeltaStepDetailsToolCallsObject_tool_calls_inner:
      oneOf:
      - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject'
      - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsRetrievalObject'
      - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsFunctionObject'
      x-oaiExpandable: true
    RunStepDetailsToolCallsCodeObject_code_interpreter_outputs_inner:
      oneOf:
      - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject'
      - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject'
      type: object
      x-oaiExpandable: true
    RunStepDetailsToolCallsCodeObject_code_interpreter:
      description: The Code Interpreter tool call definition.
      properties:
        input:
          description: The input to the Code Interpreter tool call.
          type: string
        outputs:
          description: "The outputs from the Code Interpreter tool call. Code Interpreter\
            \ can output one or more items, including text (`logs`) or images (`image`).\
            \ Each of these are represented by a different object type."
          items:
            $ref: '#/components/schemas/RunStepDetailsToolCallsCodeObject_code_interpreter_outputs_inner'
          type: array
      required:
      - input
      - outputs
      type: object
    RunStepDeltaStepDetailsToolCallsCodeObject_code_interpreter_outputs_inner:
      oneOf:
      - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject'
      - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputImageObject'
      type: object
      x-oaiExpandable: true
    RunStepDeltaStepDetailsToolCallsCodeObject_code_interpreter:
      description: The Code Interpreter tool call definition.
      properties:
        input:
          description: The input to the Code Interpreter tool call.
          type: string
        outputs:
          description: "The outputs from the Code Interpreter tool call. Code Interpreter\
            \ can output one or more items, including text (`logs`) or images (`image`).\
            \ Each of these are represented by a different object type."
          items:
            $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject_code_interpreter_outputs_inner'
          type: array
      type: object
    RunStepDetailsToolCallsCodeOutputImageObject_image:
      properties:
        file_id:
          description: "The [file](/docs/api-reference/files) ID of the image."
          type: string
      required:
      - file_id
      type: object
    RunStepDeltaStepDetailsToolCallsCodeOutputImageObject_image:
      properties:
        file_id:
          description: "The [file](/docs/api-reference/files) ID of the image."
          type: string
      type: object
    RunStepDetailsToolCallsFunctionObject_function:
      description: The definition of the function that was called.
      properties:
        name:
          description: The name of the function.
          type: string
        arguments:
          description: The arguments passed to the function.
          type: string
        output:
          description: "The output of the function. This will be `null` if the outputs\
            \ have not been [submitted](/docs/api-reference/runs/submitToolOutputs)\
            \ yet."
          nullable: true
          type: string
      required:
      - arguments
      - name
      - output
      type: object
    RunStepDeltaStepDetailsToolCallsFunctionObject_function:
      description: The definition of the function that was called.
      properties:
        name:
          description: The name of the function.
          type: string
        arguments:
          description: The arguments passed to the function.
          type: string
        output:
          description: "The output of the function. This will be `null` if the outputs\
            \ have not been [submitted](/docs/api-reference/runs/submitToolOutputs)\
            \ yet."
          nullable: true
          type: string
      type: object
    ThreadStreamEvent_oneOf:
      description: "Occurs when a new [thread](/docs/api-reference/threads/object)\
        \ is created."
      properties:
        event:
          enum:
          - thread.created
          type: string
        data:
          $ref: '#/components/schemas/ThreadObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [thread](/docs/api-reference/threads/object)"
    RunStreamEvent_oneOf:
      description: "Occurs when a new [run](/docs/api-reference/runs/object) is created."
      properties:
        event:
          enum:
          - thread.run.created
          type: string
        data:
          $ref: '#/components/schemas/RunObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
    RunStreamEvent_oneOf_1:
      description: "Occurs when a [run](/docs/api-reference/runs/object) moves to\
        \ a `queued` status."
      properties:
        event:
          enum:
          - thread.run.queued
          type: string
        data:
          $ref: '#/components/schemas/RunObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
    RunStreamEvent_oneOf_2:
      description: "Occurs when a [run](/docs/api-reference/runs/object) moves to\
        \ an `in_progress` status."
      properties:
        event:
          enum:
          - thread.run.in_progress
          type: string
        data:
          $ref: '#/components/schemas/RunObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
    RunStreamEvent_oneOf_3:
      description: "Occurs when a [run](/docs/api-reference/runs/object) moves to\
        \ a `requires_action` status."
      properties:
        event:
          enum:
          - thread.run.requires_action
          type: string
        data:
          $ref: '#/components/schemas/RunObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
    RunStreamEvent_oneOf_4:
      description: "Occurs when a [run](/docs/api-reference/runs/object) is completed."
      properties:
        event:
          enum:
          - thread.run.completed
          type: string
        data:
          $ref: '#/components/schemas/RunObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
    RunStreamEvent_oneOf_5:
      description: "Occurs when a [run](/docs/api-reference/runs/object) fails."
      properties:
        event:
          enum:
          - thread.run.failed
          type: string
        data:
          $ref: '#/components/schemas/RunObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
    RunStreamEvent_oneOf_6:
      description: "Occurs when a [run](/docs/api-reference/runs/object) moves to\
        \ a `cancelling` status."
      properties:
        event:
          enum:
          - thread.run.cancelling
          type: string
        data:
          $ref: '#/components/schemas/RunObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
    RunStreamEvent_oneOf_7:
      description: "Occurs when a [run](/docs/api-reference/runs/object) is cancelled."
      properties:
        event:
          enum:
          - thread.run.cancelled
          type: string
        data:
          $ref: '#/components/schemas/RunObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
    RunStreamEvent_oneOf_8:
      description: "Occurs when a [run](/docs/api-reference/runs/object) expires."
      properties:
        event:
          enum:
          - thread.run.expired
          type: string
        data:
          $ref: '#/components/schemas/RunObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
    RunStepStreamEvent_oneOf:
      description: "Occurs when a [run step](/docs/api-reference/runs/step-object)\
        \ is created."
      properties:
        event:
          enum:
          - thread.run.step.created
          type: string
        data:
          $ref: '#/components/schemas/RunStepObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [run step](/docs/api-reference/runs/step-object)"
    RunStepStreamEvent_oneOf_1:
      description: "Occurs when a [run step](/docs/api-reference/runs/step-object)\
        \ moves to an `in_progress` state."
      properties:
        event:
          enum:
          - thread.run.step.in_progress
          type: string
        data:
          $ref: '#/components/schemas/RunStepObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [run step](/docs/api-reference/runs/step-object)"
    RunStepStreamEvent_oneOf_2:
      description: "Occurs when parts of a [run step](/docs/api-reference/runs/step-object)\
        \ are being streamed."
      properties:
        event:
          enum:
          - thread.run.step.delta
          type: string
        data:
          $ref: '#/components/schemas/RunStepDeltaObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [run step delta](/docs/api-reference/assistants-streaming/run-step-delta-object)"
    RunStepStreamEvent_oneOf_3:
      description: "Occurs when a [run step](/docs/api-reference/runs/step-object)\
        \ is completed."
      properties:
        event:
          enum:
          - thread.run.step.completed
          type: string
        data:
          $ref: '#/components/schemas/RunStepObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [run step](/docs/api-reference/runs/step-object)"
    RunStepStreamEvent_oneOf_4:
      description: "Occurs when a [run step](/docs/api-reference/runs/step-object)\
        \ fails."
      properties:
        event:
          enum:
          - thread.run.step.failed
          type: string
        data:
          $ref: '#/components/schemas/RunStepObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [run step](/docs/api-reference/runs/step-object)"
    RunStepStreamEvent_oneOf_5:
      description: "Occurs when a [run step](/docs/api-reference/runs/step-object)\
        \ is cancelled."
      properties:
        event:
          enum:
          - thread.run.step.cancelled
          type: string
        data:
          $ref: '#/components/schemas/RunStepObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [run step](/docs/api-reference/runs/step-object)"
    RunStepStreamEvent_oneOf_6:
      description: "Occurs when a [run step](/docs/api-reference/runs/step-object)\
        \ expires."
      properties:
        event:
          enum:
          - thread.run.step.expired
          type: string
        data:
          $ref: '#/components/schemas/RunStepObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [run step](/docs/api-reference/runs/step-object)"
    MessageStreamEvent_oneOf:
      description: "Occurs when a [message](/docs/api-reference/messages/object) is\
        \ created."
      properties:
        event:
          enum:
          - thread.message.created
          type: string
        data:
          $ref: '#/components/schemas/MessageObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [message](/docs/api-reference/messages/object)"
    MessageStreamEvent_oneOf_1:
      description: "Occurs when a [message](/docs/api-reference/messages/object) moves\
        \ to an `in_progress` state."
      properties:
        event:
          enum:
          - thread.message.in_progress
          type: string
        data:
          $ref: '#/components/schemas/MessageObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [message](/docs/api-reference/messages/object)"
    MessageStreamEvent_oneOf_2:
      description: "Occurs when parts of a [Message](/docs/api-reference/messages/object)\
        \ are being streamed."
      properties:
        event:
          enum:
          - thread.message.delta
          type: string
        data:
          $ref: '#/components/schemas/MessageDeltaObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [message delta](/docs/api-reference/assistants-streaming/message-delta-object)"
    MessageStreamEvent_oneOf_3:
      description: "Occurs when a [message](/docs/api-reference/messages/object) is\
        \ completed."
      properties:
        event:
          enum:
          - thread.message.completed
          type: string
        data:
          $ref: '#/components/schemas/MessageObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [message](/docs/api-reference/messages/object)"
    MessageStreamEvent_oneOf_4:
      description: "Occurs when a [message](/docs/api-reference/messages/object) ends\
        \ before it is completed."
      properties:
        event:
          enum:
          - thread.message.incomplete
          type: string
        data:
          $ref: '#/components/schemas/MessageObject'
      required:
      - data
      - event
      type: object
      x-oaiMeta:
        dataDescription: "`data` is a [message](/docs/api-reference/messages/object)"
  securitySchemes:
    ApiKeyAuth:
      scheme: bearer
      type: http
x-oaiMeta:
  navigationGroups:
  - id: endpoints
    title: Endpoints
  - id: assistants
    title: Assistants
  - id: legacy
    title: Legacy
  groups:
  - id: audio
    title: Audio
    description: |
      Learn how to turn audio into text or text into audio.

      Related guide: [Speech to text](/docs/guides/speech-to-text)
    navigationGroup: endpoints
    sections:
    - type: endpoint
      key: createSpeech
      path: createSpeech
    - type: endpoint
      key: createTranscription
      path: createTranscription
    - type: endpoint
      key: createTranslation
      path: createTranslation
    - type: object
      key: CreateTranscriptionResponseJson
      path: json-object
    - type: object
      key: CreateTranscriptionResponseVerboseJson
      path: verbose-json-object
  - id: chat
    title: Chat
    description: |
      Given a list of messages comprising a conversation, the model will return a response.

      Related guide: [Chat Completions](/docs/guides/text-generation)
    navigationGroup: endpoints
    sections:
    - type: endpoint
      key: createChatCompletion
      path: create
    - type: object
      key: CreateChatCompletionResponse
      path: object
    - type: object
      key: CreateChatCompletionStreamResponse
      path: streaming
  - id: embeddings
    title: Embeddings
    description: |
      Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.

      Related guide: [Embeddings](/docs/guides/embeddings)
    navigationGroup: endpoints
    sections:
    - type: endpoint
      key: createEmbedding
      path: create
    - type: object
      key: Embedding
      path: object
  - id: fine-tuning
    title: Fine-tuning
    description: |
      Manage fine-tuning jobs to tailor a model to your specific training data.

      Related guide: [Fine-tune models](/docs/guides/fine-tuning)
    navigationGroup: endpoints
    sections:
    - type: endpoint
      key: createFineTuningJob
      path: create
    - type: endpoint
      key: listPaginatedFineTuningJobs
      path: list
    - type: endpoint
      key: listFineTuningEvents
      path: list-events
    - type: endpoint
      key: listFineTuningJobCheckpoints
      path: list-checkpoints
    - type: endpoint
      key: retrieveFineTuningJob
      path: retrieve
    - type: endpoint
      key: cancelFineTuningJob
      path: cancel
    - type: object
      key: FineTuningJob
      path: object
    - type: object
      key: FineTuningJobEvent
      path: event-object
    - type: object
      key: FineTuningJobCheckpoint
      path: checkpoint-object
  - id: files
    title: Files
    description: |
      Files are used to upload documents that can be used with features like [Assistants](/docs/api-reference/assistants) and [Fine-tuning](/docs/api-reference/fine-tuning).
    navigationGroup: endpoints
    sections:
    - type: endpoint
      key: createFile
      path: create
    - type: endpoint
      key: listFiles
      path: list
    - type: endpoint
      key: retrieveFile
      path: retrieve
    - type: endpoint
      key: deleteFile
      path: delete
    - type: endpoint
      key: downloadFile
      path: retrieve-contents
    - type: object
      key: OpenAIFile
      path: object
  - id: images
    title: Images
    description: |
      Given a prompt and/or an input image, the model will generate a new image.

      Related guide: [Image generation](/docs/guides/images)
    navigationGroup: endpoints
    sections:
    - type: endpoint
      key: createImage
      path: create
    - type: endpoint
      key: createImageEdit
      path: createEdit
    - type: endpoint
      key: createImageVariation
      path: createVariation
    - type: object
      key: Image
      path: object
  - id: models
    title: Models
    description: |
      List and describe the various models available in the API. You can refer to the [Models](/docs/models) documentation to understand what models are available and the differences between them.
    navigationGroup: endpoints
    sections:
    - type: endpoint
      key: listModels
      path: list
    - type: endpoint
      key: retrieveModel
      path: retrieve
    - type: endpoint
      key: deleteModel
      path: delete
    - type: object
      key: Model
      path: object
  - id: moderations
    title: Moderations
    description: |
      Given some input text, outputs if the model classifies it as potentially harmful across several categories.

      Related guide: [Moderations](/docs/guides/moderation)
    navigationGroup: endpoints
    sections:
    - type: endpoint
      key: createModeration
      path: create
    - type: object
      key: CreateModerationResponse
      path: object
  - id: assistants
    title: Assistants
    beta: true
    description: |
      Build assistants that can call models and use tools to perform tasks.

      [Get started with the Assistants API](/docs/assistants)
    navigationGroup: assistants
    sections:
    - type: endpoint
      key: createAssistant
      path: createAssistant
    - type: endpoint
      key: createAssistantFile
      path: createAssistantFile
    - type: endpoint
      key: listAssistants
      path: listAssistants
    - type: endpoint
      key: listAssistantFiles
      path: listAssistantFiles
    - type: endpoint
      key: getAssistant
      path: getAssistant
    - type: endpoint
      key: getAssistantFile
      path: getAssistantFile
    - type: endpoint
      key: modifyAssistant
      path: modifyAssistant
    - type: endpoint
      key: deleteAssistant
      path: deleteAssistant
    - type: endpoint
      key: deleteAssistantFile
      path: deleteAssistantFile
    - type: object
      key: AssistantObject
      path: object
    - type: object
      key: AssistantFileObject
      path: file-object
  - id: threads
    title: Threads
    beta: true
    description: |
      Create threads that assistants can interact with.

      Related guide: [Assistants](/docs/assistants/overview)
    navigationGroup: assistants
    sections:
    - type: endpoint
      key: createThread
      path: createThread
    - type: endpoint
      key: getThread
      path: getThread
    - type: endpoint
      key: modifyThread
      path: modifyThread
    - type: endpoint
      key: deleteThread
      path: deleteThread
    - type: object
      key: ThreadObject
      path: object
  - id: messages
    title: Messages
    beta: true
    description: |
      Create messages within threads

      Related guide: [Assistants](/docs/assistants/overview)
    navigationGroup: assistants
    sections:
    - type: endpoint
      key: createMessage
      path: createMessage
    - type: endpoint
      key: listMessages
      path: listMessages
    - type: endpoint
      key: listMessageFiles
      path: listMessageFiles
    - type: endpoint
      key: getMessage
      path: getMessage
    - type: endpoint
      key: getMessageFile
      path: getMessageFile
    - type: endpoint
      key: modifyMessage
      path: modifyMessage
    - type: object
      key: MessageObject
      path: object
    - type: object
      key: MessageFileObject
      path: file-object
  - id: runs
    title: Runs
    beta: true
    description: |
      Represents an execution run on a thread.

      Related guide: [Assistants](/docs/assistants/overview)
    navigationGroup: assistants
    sections:
    - type: endpoint
      key: createRun
      path: createRun
    - type: endpoint
      key: createThreadAndRun
      path: createThreadAndRun
    - type: endpoint
      key: listRuns
      path: listRuns
    - type: endpoint
      key: listRunSteps
      path: listRunSteps
    - type: endpoint
      key: getRun
      path: getRun
    - type: endpoint
      key: getRunStep
      path: getRunStep
    - type: endpoint
      key: modifyRun
      path: modifyRun
    - type: endpoint
      key: submitToolOuputsToRun
      path: submitToolOutputs
    - type: endpoint
      key: cancelRun
      path: cancelRun
    - type: object
      key: RunObject
      path: object
    - type: object
      key: RunStepObject
      path: step-object
  - id: assistants-streaming
    title: Streaming
    beta: true
    description: |
      Stream the result of executing a Run or resuming a Run after submitting tool outputs.

      You can stream events from the [Create Thread and Run](/docs/api-reference/runs/createThreadAndRun),
      [Create Run](/docs/api-reference/runs/createRun), and [Submit Tool Outputs](/docs/api-reference/runs/submitToolOutputs)
      endpoints by passing `"stream": true`. The response will be a [Server-Sent events](https://html.spec.whatwg.org/multipage/server-sent-events.html#server-sent-events) stream.

      Our Node and Python SDKs provide helpful utilities to make streaming easy. Reference the
      [Assistants API quickstart](/docs/assistants/overview) to learn more.
    navigationGroup: assistants
    sections:
    - type: object
      key: MessageDeltaObject
      path: message-delta-object
    - type: object
      key: RunStepDeltaObject
      path: run-step-delta-object
    - type: object
      key: AssistantStreamEvent
      path: events
  - id: completions
    title: Completions
    legacy: true
    navigationGroup: legacy
    description: |
      Given a prompt, the model will return one or more predicted completions along with the probabilities of alternative tokens at each position. Most developer should use our [Chat Completions API](/docs/guides/text-generation/text-generation-models) to leverage our best and newest models.
    sections:
    - type: endpoint
      key: createCompletion
      path: create
    - type: object
      key: CreateCompletionResponse
      path: object
