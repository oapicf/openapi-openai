/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.openapiopenai.model;

import java.util.Objects;
import com.github.oapicf.openapiopenai.model.DoneEvent;
import com.github.oapicf.openapiopenai.model.ErrorEvent;
import com.github.oapicf.openapiopenai.model.MessageStreamEvent;
import com.github.oapicf.openapiopenai.model.RunStepStreamEvent;
import com.github.oapicf.openapiopenai.model.RunStreamEvent;
import com.github.oapicf.openapiopenai.model.ThreadStreamEvent;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.github.oapicf.openapiopenai.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-14T13:36:26.918687560Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class AssistantStreamEvent extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AssistantStreamEvent.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AssistantStreamEvent.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AssistantStreamEvent' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ThreadStreamEvent> adapterThreadStreamEvent = gson.getDelegateAdapter(this, TypeToken.get(ThreadStreamEvent.class));
            final TypeAdapter<RunStreamEvent> adapterRunStreamEvent = gson.getDelegateAdapter(this, TypeToken.get(RunStreamEvent.class));
            final TypeAdapter<RunStepStreamEvent> adapterRunStepStreamEvent = gson.getDelegateAdapter(this, TypeToken.get(RunStepStreamEvent.class));
            final TypeAdapter<MessageStreamEvent> adapterMessageStreamEvent = gson.getDelegateAdapter(this, TypeToken.get(MessageStreamEvent.class));
            final TypeAdapter<ErrorEvent> adapterErrorEvent = gson.getDelegateAdapter(this, TypeToken.get(ErrorEvent.class));
            final TypeAdapter<DoneEvent> adapterDoneEvent = gson.getDelegateAdapter(this, TypeToken.get(DoneEvent.class));

            return (TypeAdapter<T>) new TypeAdapter<AssistantStreamEvent>() {
                @Override
                public void write(JsonWriter out, AssistantStreamEvent value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ThreadStreamEvent`
                    if (value.getActualInstance() instanceof ThreadStreamEvent) {
                      JsonElement element = adapterThreadStreamEvent.toJsonTree((ThreadStreamEvent)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `RunStreamEvent`
                    if (value.getActualInstance() instanceof RunStreamEvent) {
                      JsonElement element = adapterRunStreamEvent.toJsonTree((RunStreamEvent)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `RunStepStreamEvent`
                    if (value.getActualInstance() instanceof RunStepStreamEvent) {
                      JsonElement element = adapterRunStepStreamEvent.toJsonTree((RunStepStreamEvent)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `MessageStreamEvent`
                    if (value.getActualInstance() instanceof MessageStreamEvent) {
                      JsonElement element = adapterMessageStreamEvent.toJsonTree((MessageStreamEvent)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ErrorEvent`
                    if (value.getActualInstance() instanceof ErrorEvent) {
                      JsonElement element = adapterErrorEvent.toJsonTree((ErrorEvent)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `DoneEvent`
                    if (value.getActualInstance() instanceof DoneEvent) {
                      JsonElement element = adapterDoneEvent.toJsonTree((DoneEvent)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: DoneEvent, ErrorEvent, MessageStreamEvent, RunStepStreamEvent, RunStreamEvent, ThreadStreamEvent");
                }

                @Override
                public AssistantStreamEvent read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ThreadStreamEvent
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ThreadStreamEvent.validateJsonElement(jsonElement);
                      actualAdapter = adapterThreadStreamEvent;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ThreadStreamEvent'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ThreadStreamEvent failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ThreadStreamEvent'", e);
                    }
                    // deserialize RunStreamEvent
                    try {
                      // validate the JSON object to see if any exception is thrown
                      RunStreamEvent.validateJsonElement(jsonElement);
                      actualAdapter = adapterRunStreamEvent;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'RunStreamEvent'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for RunStreamEvent failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'RunStreamEvent'", e);
                    }
                    // deserialize RunStepStreamEvent
                    try {
                      // validate the JSON object to see if any exception is thrown
                      RunStepStreamEvent.validateJsonElement(jsonElement);
                      actualAdapter = adapterRunStepStreamEvent;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'RunStepStreamEvent'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for RunStepStreamEvent failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'RunStepStreamEvent'", e);
                    }
                    // deserialize MessageStreamEvent
                    try {
                      // validate the JSON object to see if any exception is thrown
                      MessageStreamEvent.validateJsonElement(jsonElement);
                      actualAdapter = adapterMessageStreamEvent;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'MessageStreamEvent'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for MessageStreamEvent failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'MessageStreamEvent'", e);
                    }
                    // deserialize ErrorEvent
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ErrorEvent.validateJsonElement(jsonElement);
                      actualAdapter = adapterErrorEvent;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ErrorEvent'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ErrorEvent failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ErrorEvent'", e);
                    }
                    // deserialize DoneEvent
                    try {
                      // validate the JSON object to see if any exception is thrown
                      DoneEvent.validateJsonElement(jsonElement);
                      actualAdapter = adapterDoneEvent;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'DoneEvent'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for DoneEvent failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'DoneEvent'", e);
                    }

                    if (match == 1) {
                        AssistantStreamEvent ret = new AssistantStreamEvent();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for AssistantStreamEvent: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public AssistantStreamEvent() {
        super("oneOf", Boolean.FALSE);
    }

    public AssistantStreamEvent(DoneEvent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AssistantStreamEvent(ErrorEvent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AssistantStreamEvent(MessageStreamEvent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AssistantStreamEvent(RunStepStreamEvent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AssistantStreamEvent(RunStreamEvent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AssistantStreamEvent(ThreadStreamEvent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ThreadStreamEvent", ThreadStreamEvent.class);
        schemas.put("RunStreamEvent", RunStreamEvent.class);
        schemas.put("RunStepStreamEvent", RunStepStreamEvent.class);
        schemas.put("MessageStreamEvent", MessageStreamEvent.class);
        schemas.put("ErrorEvent", ErrorEvent.class);
        schemas.put("DoneEvent", DoneEvent.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return AssistantStreamEvent.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * DoneEvent, ErrorEvent, MessageStreamEvent, RunStepStreamEvent, RunStreamEvent, ThreadStreamEvent
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ThreadStreamEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RunStreamEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RunStepStreamEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MessageStreamEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DoneEvent) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be DoneEvent, ErrorEvent, MessageStreamEvent, RunStepStreamEvent, RunStreamEvent, ThreadStreamEvent");
    }

    /**
     * Get the actual instance, which can be the following:
     * DoneEvent, ErrorEvent, MessageStreamEvent, RunStepStreamEvent, RunStreamEvent, ThreadStreamEvent
     *
     * @return The actual instance (DoneEvent, ErrorEvent, MessageStreamEvent, RunStepStreamEvent, RunStreamEvent, ThreadStreamEvent)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ThreadStreamEvent`. If the actual instance is not `ThreadStreamEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ThreadStreamEvent`
     * @throws ClassCastException if the instance is not `ThreadStreamEvent`
     */
    public ThreadStreamEvent getThreadStreamEvent() throws ClassCastException {
        return (ThreadStreamEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RunStreamEvent`. If the actual instance is not `RunStreamEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RunStreamEvent`
     * @throws ClassCastException if the instance is not `RunStreamEvent`
     */
    public RunStreamEvent getRunStreamEvent() throws ClassCastException {
        return (RunStreamEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RunStepStreamEvent`. If the actual instance is not `RunStepStreamEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RunStepStreamEvent`
     * @throws ClassCastException if the instance is not `RunStepStreamEvent`
     */
    public RunStepStreamEvent getRunStepStreamEvent() throws ClassCastException {
        return (RunStepStreamEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MessageStreamEvent`. If the actual instance is not `MessageStreamEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MessageStreamEvent`
     * @throws ClassCastException if the instance is not `MessageStreamEvent`
     */
    public MessageStreamEvent getMessageStreamEvent() throws ClassCastException {
        return (MessageStreamEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorEvent`. If the actual instance is not `ErrorEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorEvent`
     * @throws ClassCastException if the instance is not `ErrorEvent`
     */
    public ErrorEvent getErrorEvent() throws ClassCastException {
        return (ErrorEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DoneEvent`. If the actual instance is not `DoneEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DoneEvent`
     * @throws ClassCastException if the instance is not `DoneEvent`
     */
    public DoneEvent getDoneEvent() throws ClassCastException {
        return (DoneEvent)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AssistantStreamEvent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with ThreadStreamEvent
    try {
      ThreadStreamEvent.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ThreadStreamEvent failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RunStreamEvent
    try {
      RunStreamEvent.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RunStreamEvent failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RunStepStreamEvent
    try {
      RunStepStreamEvent.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RunStepStreamEvent failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with MessageStreamEvent
    try {
      MessageStreamEvent.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for MessageStreamEvent failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ErrorEvent
    try {
      ErrorEvent.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ErrorEvent failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DoneEvent
    try {
      DoneEvent.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for DoneEvent failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for AssistantStreamEvent with oneOf schemas: DoneEvent, ErrorEvent, MessageStreamEvent, RunStepStreamEvent, RunStreamEvent, ThreadStreamEvent. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
    }
  }

 /**
  * Create an instance of AssistantStreamEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AssistantStreamEvent
  * @throws IOException if the JSON string is invalid with respect to AssistantStreamEvent
  */
  public static AssistantStreamEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssistantStreamEvent.class);
  }

 /**
  * Convert an instance of AssistantStreamEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

