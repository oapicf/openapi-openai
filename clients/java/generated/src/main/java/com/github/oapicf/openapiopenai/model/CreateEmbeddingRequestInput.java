/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.openapiopenai.model;

import java.util.Objects;
import java.util.List;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.github.oapicf.openapiopenai.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-14T13:36:26.918687560Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CreateEmbeddingRequestInput extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CreateEmbeddingRequestInput.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateEmbeddingRequestInput.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateEmbeddingRequestInput' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<String> adapterString = gson.getDelegateAdapter(this, TypeToken.get(String.class));

            final Type typeInstance = new TypeToken<List<>>(){}.getType();
            final TypeAdapter<List<String>> adapterList = (TypeAdapter<List<>>) gson.getDelegateAdapter(this, TypeToken.get(typeInstance));

            final Type typeInstance = new TypeToken<List<>>(){}.getType();
            final TypeAdapter<List<Integer>> adapterList = (TypeAdapter<List<>>) gson.getDelegateAdapter(this, TypeToken.get(typeInstance));

            final Type typeInstance = new TypeToken<List<List>>(){}.getType();
            final TypeAdapter<List<List<Integer>>> adapterListList = (TypeAdapter<List<List>>) gson.getDelegateAdapter(this, TypeToken.get(typeInstance));

            return (TypeAdapter<T>) new TypeAdapter<CreateEmbeddingRequestInput>() {
                @Override
                public void write(JsonWriter out, CreateEmbeddingRequestInput value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `String`
                    if (value.getActualInstance() instanceof String) {
                      JsonPrimitive primitive = adapterString.toJsonTree((String)value.getActualInstance()).getAsJsonPrimitive();
                      elementAdapter.write(out, primitive);
                      return;
                    }
                    // check if the actual instance is of the type `List<String>`
                    if (value.getActualInstance() instanceof List<?>) {
                      JsonPrimitive primitive = adapterList<String>.toJsonTree((List<String>)value.getActualInstance()).getAsJsonPrimitive();
                      elementAdapter.write(out, primitive);
                      return;
                      List<?> list = (List<?>) value.getActualInstance();
        	            if(list.get(0) instanceof ) {
        		            JsonArray array = adapterList.toJsonTree((List<String>)value.getActualInstance()).getAsJsonArray();
                        elementAdapter.write(out, array);
                        return;
        	            }
                    }
                    // check if the actual instance is of the type `List<Integer>`
                    if (value.getActualInstance() instanceof List<?>) {
                      JsonPrimitive primitive = adapterList<Integer>.toJsonTree((List<Integer>)value.getActualInstance()).getAsJsonPrimitive();
                      elementAdapter.write(out, primitive);
                      return;
                      List<?> list = (List<?>) value.getActualInstance();
        	            if(list.get(0) instanceof ) {
        		            JsonArray array = adapterList.toJsonTree((List<Integer>)value.getActualInstance()).getAsJsonArray();
                        elementAdapter.write(out, array);
                        return;
        	            }
                    }
                    // check if the actual instance is of the type `List<List<Integer>>`
                    if (value.getActualInstance() instanceof List<?>) {
                      List<?> list = (List<?>) value.getActualInstance();
        	            if(list.get(0) instanceof List) {
        		            JsonArray array = adapterListList.toJsonTree((List<List<Integer>>)value.getActualInstance()).getAsJsonArray();
                        elementAdapter.write(out, array);
                        return;
        	            }
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: List<Integer>, List<List<Integer>>, List<String>, String");
                }

                @Override
                public CreateEmbeddingRequestInput read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize String
                    try {
                      // validate the JSON object to see if any exception is thrown
                      if(!jsonElement.getAsJsonPrimitive().isString()) {
                        throw new IllegalArgumentException(String.format("Expected json element to be of type String in the JSON string but got `%s`", jsonElement.toString()));
                      }
                      actualAdapter = adapterString;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'String'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for String failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'String'", e);
                    }
                    // deserialize List<String>
                    try {
                      // validate the JSON object to see if any exception is thrown
                      if(!jsonElement.getAsJsonPrimitive().isNumber()) {
                        throw new IllegalArgumentException(String.format("Expected json element to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
                      }
                      actualAdapter = adapterList<String>;
                      if (!jsonElement.isJsonArray()) {
                        throw new IllegalArgumentException(String.format("Expected json element to be a array type in the JSON string but got `%s`", jsonElement.toString()));
                      }

                      JsonArray array = jsonElement.getAsJsonArray();
                      // validate array items
                      for(JsonElement element : array) {
                      if(!element.getAsJsonPrimitive().isString()) {
                        throw new IllegalArgumentException(String.format("Expected array items to be of type String in the JSON string but got `%s`", jsonElement.toString()));
                      }
                      }
                      actualAdapter = adapterList;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'List<String>'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for List<String> failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'List<String>'", e);
                    }
                    // deserialize List<Integer>
                    try {
                      // validate the JSON object to see if any exception is thrown
                      if(!jsonElement.getAsJsonPrimitive().isNumber()) {
                        throw new IllegalArgumentException(String.format("Expected json element to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
                      }
                      actualAdapter = adapterList<Integer>;
                      if (!jsonElement.isJsonArray()) {
                        throw new IllegalArgumentException(String.format("Expected json element to be a array type in the JSON string but got `%s`", jsonElement.toString()));
                      }

                      JsonArray array = jsonElement.getAsJsonArray();
                      // validate array items
                      for(JsonElement element : array) {
                      if(!element.getAsJsonPrimitive().isNumber()) {
                        throw new IllegalArgumentException(String.format("Expected array items to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
                      }
                      }
                      actualAdapter = adapterList;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'List<Integer>'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for List<Integer> failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'List<Integer>'", e);
                    }
                    // deserialize List<List<Integer>>
                    try {
                      // validate the JSON object to see if any exception is thrown
                      if (!jsonElement.isJsonArray()) {
                        throw new IllegalArgumentException(String.format("Expected json element to be a array type in the JSON string but got `%s`", jsonElement.toString()));
                      }

                      JsonArray array = jsonElement.getAsJsonArray();
                      // validate array items
                      for(JsonElement element : array) {
                      if(!element.getAsJsonPrimitive().isNumber()) {
                        throw new IllegalArgumentException(String.format("Expected array items to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
                      }
                      }
                      actualAdapter = adapterListList;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'List<List<Integer>>'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for List<List<Integer>> failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'List<List<Integer>>'", e);
                    }

                    if (match == 1) {
                        CreateEmbeddingRequestInput ret = new CreateEmbeddingRequestInput();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for CreateEmbeddingRequestInput: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public CreateEmbeddingRequestInput() {
        super("oneOf", Boolean.FALSE);
    }

    public CreateEmbeddingRequestInput(List<Integer> o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreateEmbeddingRequestInput(List<List<Integer>> o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreateEmbeddingRequestInput(List<String> o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreateEmbeddingRequestInput(String o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("String", String.class);
        schemas.put("List<String>", List.class);
        schemas.put("List<Integer>", List.class);
        schemas.put("List<List<Integer>>", List.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return CreateEmbeddingRequestInput.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * List<Integer>, List<List<Integer>>, List<String>, String
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof String) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof List<?>) {
            List<?> list = (List<?>) instance;
        	if(list.get(0) instanceof ) {
        		super.setActualInstance(instance);
        		return;
        	}
        }

        if (instance instanceof List<?>) {
            List<?> list = (List<?>) instance;
        	if(list.get(0) instanceof ) {
        		super.setActualInstance(instance);
        		return;
        	}
        }

        if (instance instanceof List<?>) {
            List<?> list = (List<?>) instance;
        	if(list.get(0) instanceof List) {
        		super.setActualInstance(instance);
        		return;
        	}
        }

        throw new RuntimeException("Invalid instance type. Must be List<Integer>, List<List<Integer>>, List<String>, String");
    }

    /**
     * Get the actual instance, which can be the following:
     * List<Integer>, List<List<Integer>>, List<String>, String
     *
     * @return The actual instance (List<Integer>, List<List<Integer>>, List<String>, String)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `String`. If the actual instance is not `String`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `String`
     * @throws ClassCastException if the instance is not `String`
     */
    public String getString() throws ClassCastException {
        return (String)super.getActualInstance();
    }
    /**
     * Get the actual instance of `List<String>`. If the actual instance is not `List<String>`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `List<String>`
     * @throws ClassCastException if the instance is not `List<String>`
     */
    public List<String> getList() throws ClassCastException {
        return (List<String>)super.getActualInstance();
    }
    /**
     * Get the actual instance of `List<Integer>`. If the actual instance is not `List<Integer>`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `List<Integer>`
     * @throws ClassCastException if the instance is not `List<Integer>`
     */
    public List<Integer> getList() throws ClassCastException {
        return (List<Integer>)super.getActualInstance();
    }
    /**
     * Get the actual instance of `List<List<Integer>>`. If the actual instance is not `List<List<Integer>>`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `List<List<Integer>>`
     * @throws ClassCastException if the instance is not `List<List<Integer>>`
     */
    public List<List<Integer>> getListList() throws ClassCastException {
        return (List<List<Integer>>)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateEmbeddingRequestInput
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with String
    try {
      if(!jsonElement.getAsJsonPrimitive().isString()) {
        throw new IllegalArgumentException(String.format("Expected json element to be of type String in the JSON string but got `%s`", jsonElement.toString()));
      }
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for String failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with List<String>
    try {
      if(!jsonElement.getAsJsonPrimitive().isNumber()) {
        throw new IllegalArgumentException(String.format("Expected json element to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
      }
      if (!jsonElement.isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected json element to be a array type in the JSON string but got `%s`", jsonElement.toString()));
      }
      JsonArray array = jsonElement.getAsJsonArray();
      // validate array items
      for(JsonElement element : array) {
        if(!element.getAsJsonPrimitive().isString()) {
          throw new IllegalArgumentException(String.format("Expected array items to be of type String in the JSON string but got `%s`", jsonElement.toString()));
        }
      }
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for List<String> failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with List<Integer>
    try {
      if(!jsonElement.getAsJsonPrimitive().isNumber()) {
        throw new IllegalArgumentException(String.format("Expected json element to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
      }
      if (!jsonElement.isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected json element to be a array type in the JSON string but got `%s`", jsonElement.toString()));
      }
      JsonArray array = jsonElement.getAsJsonArray();
      // validate array items
      for(JsonElement element : array) {
        if(!element.getAsJsonPrimitive().isNumber()) {
          throw new IllegalArgumentException(String.format("Expected array items to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
        }
      }
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for List<Integer> failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with List<List<Integer>>
    try {
      if (!jsonElement.isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected json element to be a array type in the JSON string but got `%s`", jsonElement.toString()));
      }
      JsonArray array = jsonElement.getAsJsonArray();
      // validate array items
      for(JsonElement element : array) {
        if(!element.getAsJsonPrimitive().isNumber()) {
          throw new IllegalArgumentException(String.format("Expected array items to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
        }
      }
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for List<List<Integer>> failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for CreateEmbeddingRequestInput with oneOf schemas: List<Integer>, List<List<Integer>>, List<String>, String. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
    }
  }

 /**
  * Create an instance of CreateEmbeddingRequestInput given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateEmbeddingRequestInput
  * @throws IOException if the JSON string is invalid with respect to CreateEmbeddingRequestInput
  */
  public static CreateEmbeddingRequestInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateEmbeddingRequestInput.class);
  }

 /**
  * Convert an instance of CreateEmbeddingRequestInput to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

