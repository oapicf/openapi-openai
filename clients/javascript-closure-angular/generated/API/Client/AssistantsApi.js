/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.AssistantsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * Version: 2.0.0
* Generator version: 7.4.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://github.com/openai/openai-openapi/blob/master/LICENSE
 */

goog.provide('API.Client.AssistantsApi');

goog.require('API.Client.AssistantFileObject');
goog.require('API.Client.AssistantObject');
goog.require('API.Client.CreateAssistantFileRequest');
goog.require('API.Client.CreateAssistantRequest');
goog.require('API.Client.CreateMessageRequest');
goog.require('API.Client.CreateRunRequest');
goog.require('API.Client.CreateThreadAndRunRequest');
goog.require('API.Client.CreateThreadRequest');
goog.require('API.Client.DeleteAssistantFileResponse');
goog.require('API.Client.DeleteAssistantResponse');
goog.require('API.Client.DeleteThreadResponse');
goog.require('API.Client.ListAssistantFilesResponse');
goog.require('API.Client.ListAssistantsResponse');
goog.require('API.Client.ListMessageFilesResponse');
goog.require('API.Client.ListMessagesResponse');
goog.require('API.Client.ListRunStepsResponse');
goog.require('API.Client.ListRunsResponse');
goog.require('API.Client.MessageFileObject');
goog.require('API.Client.MessageObject');
goog.require('API.Client.ModifyAssistantRequest');
goog.require('API.Client.ModifyMessageRequest');
goog.require('API.Client.ModifyRunRequest');
goog.require('API.Client.ModifyThreadRequest');
goog.require('API.Client.RunObject');
goog.require('API.Client.RunStepObject');
goog.require('API.Client.SubmitToolOutputsRunRequest');
goog.require('API.Client.ThreadObject');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.AssistantsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('AssistantsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('AssistantsApiBasePath')) :
                   'https://api.openai.com/v1';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('AssistantsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('AssistantsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.AssistantsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Cancels a run that is &#x60;in_progress&#x60;.
 * 
 * @param {!string} threadId The ID of the thread to which this run belongs.
 * @param {!string} runId The ID of the run to cancel.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.RunObject>}
 */
API.Client.AssistantsApi.prototype.cancelRun = function(threadId, runId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads/{thread_id}/runs/{run_id}/cancel'
      .replace('{' + 'thread_id' + '}', String(threadId))
      .replace('{' + 'run_id' + '}', String(runId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'threadId' is set
  if (!threadId) {
    throw new Error('Missing required parameter threadId when calling cancelRun');
  }
  // verify required parameter 'runId' is set
  if (!runId) {
    throw new Error('Missing required parameter runId when calling cancelRun');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create an assistant with a model and instructions.
 * 
 * @param {!CreateAssistantRequest} createAssistantRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.AssistantObject>}
 */
API.Client.AssistantsApi.prototype.createAssistant = function(createAssistantRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/assistants';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'createAssistantRequest' is set
  if (!createAssistantRequest) {
    throw new Error('Missing required parameter createAssistantRequest when calling createAssistant');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createAssistantRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
 * 
 * @param {!string} assistantId The ID of the assistant for which to create a File. 
 * @param {!CreateAssistantFileRequest} createAssistantFileRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.AssistantFileObject>}
 */
API.Client.AssistantsApi.prototype.createAssistantFile = function(assistantId, createAssistantFileRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/assistants/{assistant_id}/files'
      .replace('{' + 'assistant_id' + '}', String(assistantId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'assistantId' is set
  if (!assistantId) {
    throw new Error('Missing required parameter assistantId when calling createAssistantFile');
  }
  // verify required parameter 'createAssistantFileRequest' is set
  if (!createAssistantFileRequest) {
    throw new Error('Missing required parameter createAssistantFileRequest when calling createAssistantFile');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createAssistantFileRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create a message.
 * 
 * @param {!string} threadId The ID of the [thread](/docs/api-reference/threads) to create a message for.
 * @param {!CreateMessageRequest} createMessageRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.MessageObject>}
 */
API.Client.AssistantsApi.prototype.createMessage = function(threadId, createMessageRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads/{thread_id}/messages'
      .replace('{' + 'thread_id' + '}', String(threadId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'threadId' is set
  if (!threadId) {
    throw new Error('Missing required parameter threadId when calling createMessage');
  }
  // verify required parameter 'createMessageRequest' is set
  if (!createMessageRequest) {
    throw new Error('Missing required parameter createMessageRequest when calling createMessage');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createMessageRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create a run.
 * 
 * @param {!string} threadId The ID of the thread to run.
 * @param {!CreateRunRequest} createRunRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.RunObject>}
 */
API.Client.AssistantsApi.prototype.createRun = function(threadId, createRunRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads/{thread_id}/runs'
      .replace('{' + 'thread_id' + '}', String(threadId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'threadId' is set
  if (!threadId) {
    throw new Error('Missing required parameter threadId when calling createRun');
  }
  // verify required parameter 'createRunRequest' is set
  if (!createRunRequest) {
    throw new Error('Missing required parameter createRunRequest when calling createRun');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createRunRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create a thread.
 * 
 * @param {!CreateThreadRequest=} opt_createThreadRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ThreadObject>}
 */
API.Client.AssistantsApi.prototype.createThread = function(opt_createThreadRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_createThreadRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create a thread and run it in one request.
 * 
 * @param {!CreateThreadAndRunRequest} createThreadAndRunRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.RunObject>}
 */
API.Client.AssistantsApi.prototype.createThreadAndRun = function(createThreadAndRunRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads/runs';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'createThreadAndRunRequest' is set
  if (!createThreadAndRunRequest) {
    throw new Error('Missing required parameter createThreadAndRunRequest when calling createThreadAndRun');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createThreadAndRunRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete an assistant.
 * 
 * @param {!string} assistantId The ID of the assistant to delete.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DeleteAssistantResponse>}
 */
API.Client.AssistantsApi.prototype.deleteAssistant = function(assistantId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/assistants/{assistant_id}'
      .replace('{' + 'assistant_id' + '}', String(assistantId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'assistantId' is set
  if (!assistantId) {
    throw new Error('Missing required parameter assistantId when calling deleteAssistant');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete an assistant file.
 * 
 * @param {!string} assistantId The ID of the assistant that the file belongs to.
 * @param {!string} fileId The ID of the file to delete.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DeleteAssistantFileResponse>}
 */
API.Client.AssistantsApi.prototype.deleteAssistantFile = function(assistantId, fileId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/assistants/{assistant_id}/files/{file_id}'
      .replace('{' + 'assistant_id' + '}', String(assistantId))
      .replace('{' + 'file_id' + '}', String(fileId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'assistantId' is set
  if (!assistantId) {
    throw new Error('Missing required parameter assistantId when calling deleteAssistantFile');
  }
  // verify required parameter 'fileId' is set
  if (!fileId) {
    throw new Error('Missing required parameter fileId when calling deleteAssistantFile');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete a thread.
 * 
 * @param {!string} threadId The ID of the thread to delete.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DeleteThreadResponse>}
 */
API.Client.AssistantsApi.prototype.deleteThread = function(threadId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads/{thread_id}'
      .replace('{' + 'thread_id' + '}', String(threadId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'threadId' is set
  if (!threadId) {
    throw new Error('Missing required parameter threadId when calling deleteThread');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieves an assistant.
 * 
 * @param {!string} assistantId The ID of the assistant to retrieve.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.AssistantObject>}
 */
API.Client.AssistantsApi.prototype.getAssistant = function(assistantId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/assistants/{assistant_id}'
      .replace('{' + 'assistant_id' + '}', String(assistantId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'assistantId' is set
  if (!assistantId) {
    throw new Error('Missing required parameter assistantId when calling getAssistant');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieves an AssistantFile.
 * 
 * @param {!string} assistantId The ID of the assistant who the file belongs to.
 * @param {!string} fileId The ID of the file we&#39;re getting.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.AssistantFileObject>}
 */
API.Client.AssistantsApi.prototype.getAssistantFile = function(assistantId, fileId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/assistants/{assistant_id}/files/{file_id}'
      .replace('{' + 'assistant_id' + '}', String(assistantId))
      .replace('{' + 'file_id' + '}', String(fileId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'assistantId' is set
  if (!assistantId) {
    throw new Error('Missing required parameter assistantId when calling getAssistantFile');
  }
  // verify required parameter 'fileId' is set
  if (!fileId) {
    throw new Error('Missing required parameter fileId when calling getAssistantFile');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve a message.
 * 
 * @param {!string} threadId The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
 * @param {!string} messageId The ID of the message to retrieve.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.MessageObject>}
 */
API.Client.AssistantsApi.prototype.getMessage = function(threadId, messageId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads/{thread_id}/messages/{message_id}'
      .replace('{' + 'thread_id' + '}', String(threadId))
      .replace('{' + 'message_id' + '}', String(messageId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'threadId' is set
  if (!threadId) {
    throw new Error('Missing required parameter threadId when calling getMessage');
  }
  // verify required parameter 'messageId' is set
  if (!messageId) {
    throw new Error('Missing required parameter messageId when calling getMessage');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieves a message file.
 * 
 * @param {!string} threadId The ID of the thread to which the message and File belong.
 * @param {!string} messageId The ID of the message the file belongs to.
 * @param {!string} fileId The ID of the file being retrieved.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.MessageFileObject>}
 */
API.Client.AssistantsApi.prototype.getMessageFile = function(threadId, messageId, fileId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads/{thread_id}/messages/{message_id}/files/{file_id}'
      .replace('{' + 'thread_id' + '}', String(threadId))
      .replace('{' + 'message_id' + '}', String(messageId))
      .replace('{' + 'file_id' + '}', String(fileId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'threadId' is set
  if (!threadId) {
    throw new Error('Missing required parameter threadId when calling getMessageFile');
  }
  // verify required parameter 'messageId' is set
  if (!messageId) {
    throw new Error('Missing required parameter messageId when calling getMessageFile');
  }
  // verify required parameter 'fileId' is set
  if (!fileId) {
    throw new Error('Missing required parameter fileId when calling getMessageFile');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieves a run.
 * 
 * @param {!string} threadId The ID of the [thread](/docs/api-reference/threads) that was run.
 * @param {!string} runId The ID of the run to retrieve.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.RunObject>}
 */
API.Client.AssistantsApi.prototype.getRun = function(threadId, runId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads/{thread_id}/runs/{run_id}'
      .replace('{' + 'thread_id' + '}', String(threadId))
      .replace('{' + 'run_id' + '}', String(runId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'threadId' is set
  if (!threadId) {
    throw new Error('Missing required parameter threadId when calling getRun');
  }
  // verify required parameter 'runId' is set
  if (!runId) {
    throw new Error('Missing required parameter runId when calling getRun');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieves a run step.
 * 
 * @param {!string} threadId The ID of the thread to which the run and run step belongs.
 * @param {!string} runId The ID of the run to which the run step belongs.
 * @param {!string} stepId The ID of the run step to retrieve.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.RunStepObject>}
 */
API.Client.AssistantsApi.prototype.getRunStep = function(threadId, runId, stepId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads/{thread_id}/runs/{run_id}/steps/{step_id}'
      .replace('{' + 'thread_id' + '}', String(threadId))
      .replace('{' + 'run_id' + '}', String(runId))
      .replace('{' + 'step_id' + '}', String(stepId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'threadId' is set
  if (!threadId) {
    throw new Error('Missing required parameter threadId when calling getRunStep');
  }
  // verify required parameter 'runId' is set
  if (!runId) {
    throw new Error('Missing required parameter runId when calling getRunStep');
  }
  // verify required parameter 'stepId' is set
  if (!stepId) {
    throw new Error('Missing required parameter stepId when calling getRunStep');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieves a thread.
 * 
 * @param {!string} threadId The ID of the thread to retrieve.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ThreadObject>}
 */
API.Client.AssistantsApi.prototype.getThread = function(threadId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads/{thread_id}'
      .replace('{' + 'thread_id' + '}', String(threadId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'threadId' is set
  if (!threadId) {
    throw new Error('Missing required parameter threadId when calling getThread');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Returns a list of assistant files.
 * 
 * @param {!string} assistantId The ID of the assistant the file belongs to.
 * @param {!number=} opt_limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
 * @param {!string=} opt_order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
 * @param {!string=} opt_after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
 * @param {!string=} opt_before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ListAssistantFilesResponse>}
 */
API.Client.AssistantsApi.prototype.listAssistantFiles = function(assistantId, opt_limit, opt_order, opt_after, opt_before, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/assistants/{assistant_id}/files'
      .replace('{' + 'assistant_id' + '}', String(assistantId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'assistantId' is set
  if (!assistantId) {
    throw new Error('Missing required parameter assistantId when calling listAssistantFiles');
  }
  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_order !== undefined) {
    queryParameters['order'] = opt_order;
  }

  if (opt_after !== undefined) {
    queryParameters['after'] = opt_after;
  }

  if (opt_before !== undefined) {
    queryParameters['before'] = opt_before;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Returns a list of assistants.
 * 
 * @param {!number=} opt_limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
 * @param {!string=} opt_order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
 * @param {!string=} opt_after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
 * @param {!string=} opt_before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ListAssistantsResponse>}
 */
API.Client.AssistantsApi.prototype.listAssistants = function(opt_limit, opt_order, opt_after, opt_before, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/assistants';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_order !== undefined) {
    queryParameters['order'] = opt_order;
  }

  if (opt_after !== undefined) {
    queryParameters['after'] = opt_after;
  }

  if (opt_before !== undefined) {
    queryParameters['before'] = opt_before;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Returns a list of message files.
 * 
 * @param {!string} threadId The ID of the thread that the message and files belong to.
 * @param {!string} messageId The ID of the message that the files belongs to.
 * @param {!number=} opt_limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
 * @param {!string=} opt_order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
 * @param {!string=} opt_after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
 * @param {!string=} opt_before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ListMessageFilesResponse>}
 */
API.Client.AssistantsApi.prototype.listMessageFiles = function(threadId, messageId, opt_limit, opt_order, opt_after, opt_before, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads/{thread_id}/messages/{message_id}/files'
      .replace('{' + 'thread_id' + '}', String(threadId))
      .replace('{' + 'message_id' + '}', String(messageId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'threadId' is set
  if (!threadId) {
    throw new Error('Missing required parameter threadId when calling listMessageFiles');
  }
  // verify required parameter 'messageId' is set
  if (!messageId) {
    throw new Error('Missing required parameter messageId when calling listMessageFiles');
  }
  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_order !== undefined) {
    queryParameters['order'] = opt_order;
  }

  if (opt_after !== undefined) {
    queryParameters['after'] = opt_after;
  }

  if (opt_before !== undefined) {
    queryParameters['before'] = opt_before;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Returns a list of messages for a given thread.
 * 
 * @param {!string} threadId The ID of the [thread](/docs/api-reference/threads) the messages belong to.
 * @param {!number=} opt_limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
 * @param {!string=} opt_order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
 * @param {!string=} opt_after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
 * @param {!string=} opt_before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
 * @param {!string=} opt_runId Filter messages by the run ID that generated them. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ListMessagesResponse>}
 */
API.Client.AssistantsApi.prototype.listMessages = function(threadId, opt_limit, opt_order, opt_after, opt_before, opt_runId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads/{thread_id}/messages'
      .replace('{' + 'thread_id' + '}', String(threadId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'threadId' is set
  if (!threadId) {
    throw new Error('Missing required parameter threadId when calling listMessages');
  }
  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_order !== undefined) {
    queryParameters['order'] = opt_order;
  }

  if (opt_after !== undefined) {
    queryParameters['after'] = opt_after;
  }

  if (opt_before !== undefined) {
    queryParameters['before'] = opt_before;
  }

  if (opt_runId !== undefined) {
    queryParameters['run_id'] = opt_runId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Returns a list of run steps belonging to a run.
 * 
 * @param {!string} threadId The ID of the thread the run and run steps belong to.
 * @param {!string} runId The ID of the run the run steps belong to.
 * @param {!number=} opt_limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
 * @param {!string=} opt_order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
 * @param {!string=} opt_after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
 * @param {!string=} opt_before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ListRunStepsResponse>}
 */
API.Client.AssistantsApi.prototype.listRunSteps = function(threadId, runId, opt_limit, opt_order, opt_after, opt_before, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads/{thread_id}/runs/{run_id}/steps'
      .replace('{' + 'thread_id' + '}', String(threadId))
      .replace('{' + 'run_id' + '}', String(runId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'threadId' is set
  if (!threadId) {
    throw new Error('Missing required parameter threadId when calling listRunSteps');
  }
  // verify required parameter 'runId' is set
  if (!runId) {
    throw new Error('Missing required parameter runId when calling listRunSteps');
  }
  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_order !== undefined) {
    queryParameters['order'] = opt_order;
  }

  if (opt_after !== undefined) {
    queryParameters['after'] = opt_after;
  }

  if (opt_before !== undefined) {
    queryParameters['before'] = opt_before;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Returns a list of runs belonging to a thread.
 * 
 * @param {!string} threadId The ID of the thread the run belongs to.
 * @param {!number=} opt_limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
 * @param {!string=} opt_order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
 * @param {!string=} opt_after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
 * @param {!string=} opt_before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ListRunsResponse>}
 */
API.Client.AssistantsApi.prototype.listRuns = function(threadId, opt_limit, opt_order, opt_after, opt_before, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads/{thread_id}/runs'
      .replace('{' + 'thread_id' + '}', String(threadId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'threadId' is set
  if (!threadId) {
    throw new Error('Missing required parameter threadId when calling listRuns');
  }
  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_order !== undefined) {
    queryParameters['order'] = opt_order;
  }

  if (opt_after !== undefined) {
    queryParameters['after'] = opt_after;
  }

  if (opt_before !== undefined) {
    queryParameters['before'] = opt_before;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Modifies an assistant.
 * 
 * @param {!string} assistantId The ID of the assistant to modify.
 * @param {!ModifyAssistantRequest} modifyAssistantRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.AssistantObject>}
 */
API.Client.AssistantsApi.prototype.modifyAssistant = function(assistantId, modifyAssistantRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/assistants/{assistant_id}'
      .replace('{' + 'assistant_id' + '}', String(assistantId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'assistantId' is set
  if (!assistantId) {
    throw new Error('Missing required parameter assistantId when calling modifyAssistant');
  }
  // verify required parameter 'modifyAssistantRequest' is set
  if (!modifyAssistantRequest) {
    throw new Error('Missing required parameter modifyAssistantRequest when calling modifyAssistant');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: modifyAssistantRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Modifies a message.
 * 
 * @param {!string} threadId The ID of the thread to which this message belongs.
 * @param {!string} messageId The ID of the message to modify.
 * @param {!ModifyMessageRequest} modifyMessageRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.MessageObject>}
 */
API.Client.AssistantsApi.prototype.modifyMessage = function(threadId, messageId, modifyMessageRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads/{thread_id}/messages/{message_id}'
      .replace('{' + 'thread_id' + '}', String(threadId))
      .replace('{' + 'message_id' + '}', String(messageId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'threadId' is set
  if (!threadId) {
    throw new Error('Missing required parameter threadId when calling modifyMessage');
  }
  // verify required parameter 'messageId' is set
  if (!messageId) {
    throw new Error('Missing required parameter messageId when calling modifyMessage');
  }
  // verify required parameter 'modifyMessageRequest' is set
  if (!modifyMessageRequest) {
    throw new Error('Missing required parameter modifyMessageRequest when calling modifyMessage');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: modifyMessageRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Modifies a run.
 * 
 * @param {!string} threadId The ID of the [thread](/docs/api-reference/threads) that was run.
 * @param {!string} runId The ID of the run to modify.
 * @param {!ModifyRunRequest} modifyRunRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.RunObject>}
 */
API.Client.AssistantsApi.prototype.modifyRun = function(threadId, runId, modifyRunRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads/{thread_id}/runs/{run_id}'
      .replace('{' + 'thread_id' + '}', String(threadId))
      .replace('{' + 'run_id' + '}', String(runId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'threadId' is set
  if (!threadId) {
    throw new Error('Missing required parameter threadId when calling modifyRun');
  }
  // verify required parameter 'runId' is set
  if (!runId) {
    throw new Error('Missing required parameter runId when calling modifyRun');
  }
  // verify required parameter 'modifyRunRequest' is set
  if (!modifyRunRequest) {
    throw new Error('Missing required parameter modifyRunRequest when calling modifyRun');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: modifyRunRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Modifies a thread.
 * 
 * @param {!string} threadId The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.
 * @param {!ModifyThreadRequest} modifyThreadRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ThreadObject>}
 */
API.Client.AssistantsApi.prototype.modifyThread = function(threadId, modifyThreadRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads/{thread_id}'
      .replace('{' + 'thread_id' + '}', String(threadId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'threadId' is set
  if (!threadId) {
    throw new Error('Missing required parameter threadId when calling modifyThread');
  }
  // verify required parameter 'modifyThreadRequest' is set
  if (!modifyThreadRequest) {
    throw new Error('Missing required parameter modifyThreadRequest when calling modifyThread');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: modifyThreadRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
 * 
 * @param {!string} threadId The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
 * @param {!string} runId The ID of the run that requires the tool output submission.
 * @param {!SubmitToolOutputsRunRequest} submitToolOutputsRunRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.RunObject>}
 */
API.Client.AssistantsApi.prototype.submitToolOuputsToRun = function(threadId, runId, submitToolOutputsRunRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/threads/{thread_id}/runs/{run_id}/submit_tool_outputs'
      .replace('{' + 'thread_id' + '}', String(threadId))
      .replace('{' + 'run_id' + '}', String(runId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'threadId' is set
  if (!threadId) {
    throw new Error('Missing required parameter threadId when calling submitToolOuputsToRun');
  }
  // verify required parameter 'runId' is set
  if (!runId) {
    throw new Error('Missing required parameter runId when calling submitToolOuputsToRun');
  }
  // verify required parameter 'submitToolOutputsRunRequest' is set
  if (!submitToolOutputsRunRequest) {
    throw new Error('Missing required parameter submitToolOutputsRunRequest when calling submitToolOuputsToRun');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: submitToolOutputsRunRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
