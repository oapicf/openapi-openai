/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.AudioApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * Version: 2.0.0
* Generator version: 7.4.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://github.com/openai/openai-openapi/blob/master/LICENSE
 */

goog.provide('API.Client.AudioApi');

goog.require('API.Client.CreateSpeechRequest');
goog.require('API.Client.CreateTranscriptionRequest_model');
goog.require('API.Client.createTranscription_200_response');
goog.require('API.Client.createTranslation_200_response');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.AudioApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('AudioApiBasePath') ?
                   /** @type {!string} */ ($injector.get('AudioApiBasePath')) :
                   'https://api.openai.com/v1';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('AudioApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('AudioApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.AudioApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Generates audio from the input text.
 * 
 * @param {!CreateSpeechRequest} createSpeechRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Object>}
 */
API.Client.AudioApi.prototype.createSpeech = function(createSpeechRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/audio/speech';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'createSpeechRequest' is set
  if (!createSpeechRequest) {
    throw new Error('Missing required parameter createSpeechRequest when calling createSpeech');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createSpeechRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Transcribes audio into the input language.
 * 
 * @param {!Object} file The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
 * @param {!API.Client.CreateTranscriptionRequest_model} model 
 * @param {!string=} opt_language The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
 * @param {!string=} opt_prompt An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
 * @param {!string=} opt_responseFormat The format of the transcript output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;. 
 * @param {!number=} opt_temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
 * @param {!Array<!string>=} opt_timestampGranularities The timestamp granularities to populate for this transcription. &#x60;response_format&#x60; must be set &#x60;verbose_json&#x60; to use timestamp granularities. Either or both of these options are supported: &#x60;word&#x60;, or &#x60;segment&#x60;. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.createTranscription_200_response>}
 */
API.Client.AudioApi.prototype.createTranscription = function(file, model, opt_language, opt_prompt, opt_responseFormat, opt_temperature, opt_timestampGranularities, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/audio/transcriptions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'file' is set
  if (!file) {
    throw new Error('Missing required parameter file when calling createTranscription');
  }
  // verify required parameter 'model' is set
  if (!model) {
    throw new Error('Missing required parameter model when calling createTranscription');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['file'] = file;

  formParams['model'] = model;

  formParams['language'] = opt_language;

  formParams['prompt'] = opt_prompt;

  formParams['response_format'] = opt_responseFormat;

  formParams['temperature'] = opt_temperature;

  formParams['timestamp_granularities[]'] = opt_timestampGranularities;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Translates audio into English.
 * 
 * @param {!Object} file The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
 * @param {!API.Client.CreateTranscriptionRequest_model} model 
 * @param {!string=} opt_prompt An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. 
 * @param {!string=} opt_responseFormat The format of the transcript output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;. 
 * @param {!number=} opt_temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.createTranslation_200_response>}
 */
API.Client.AudioApi.prototype.createTranslation = function(file, model, opt_prompt, opt_responseFormat, opt_temperature, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/audio/translations';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'file' is set
  if (!file) {
    throw new Error('Missing required parameter file when calling createTranslation');
  }
  // verify required parameter 'model' is set
  if (!model) {
    throw new Error('Missing required parameter model when calling createTranslation');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['file'] = file;

  formParams['model'] = model;

  formParams['prompt'] = opt_prompt;

  formParams['response_format'] = opt_responseFormat;

  formParams['temperature'] = opt_temperature;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
