/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.FilesApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * Version: 2.0.0
* Generator version: 7.9.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://github.com/openai/openai-openapi/blob/master/LICENSE
 */

goog.provide('API.Client.FilesApi');

goog.require('API.Client.DeleteFileResponse');
goog.require('API.Client.ListFilesResponse');
goog.require('API.Client.OpenAIFile');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.FilesApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('FilesApiBasePath') ?
                   /** @type {!string} */ ($injector.get('FilesApiBasePath')) :
                   'https://api.openai.com/v1';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('FilesApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('FilesApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.FilesApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports &#x60;.jsonl&#x60; files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. 
 * 
 * @param {!Object} file The File object (not file name) to be uploaded. 
 * @param {!string} purpose The intended purpose of the uploaded file.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tuning) and \\\&quot;assistants\\\&quot; for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.OpenAIFile>}
 */
API.Client.FilesApi.prototype.createFile = function(file, purpose, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/files';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'file' is set
  if (!file) {
    throw new Error('Missing required parameter file when calling createFile');
  }
  // verify required parameter 'purpose' is set
  if (!purpose) {
    throw new Error('Missing required parameter purpose when calling createFile');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['file'] = file;

  formParams['purpose'] = purpose;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete a file.
 * 
 * @param {!string} fileId The ID of the file to use for this request.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DeleteFileResponse>}
 */
API.Client.FilesApi.prototype.deleteFile = function(fileId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/files/{file_id}'
      .replace('{' + 'file_id' + '}', String(fileId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'fileId' is set
  if (!fileId) {
    throw new Error('Missing required parameter fileId when calling deleteFile');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Returns the contents of the specified file.
 * 
 * @param {!string} fileId The ID of the file to use for this request.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.FilesApi.prototype.downloadFile = function(fileId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/files/{file_id}/content'
      .replace('{' + 'file_id' + '}', String(fileId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'fileId' is set
  if (!fileId) {
    throw new Error('Missing required parameter fileId when calling downloadFile');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Returns a list of files that belong to the user&#39;s organization.
 * 
 * @param {!string=} opt_purpose Only return files with the given purpose.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ListFilesResponse>}
 */
API.Client.FilesApi.prototype.listFiles = function(opt_purpose, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/files';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_purpose !== undefined) {
    queryParameters['purpose'] = opt_purpose;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Returns information about a specific file.
 * 
 * @param {!string} fileId The ID of the file to use for this request.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.OpenAIFile>}
 */
API.Client.FilesApi.prototype.retrieveFile = function(fileId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/files/{file_id}'
      .replace('{' + 'file_id' + '}', String(fileId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'fileId' is set
  if (!fileId) {
    throw new Error('Missing required parameter fileId when calling retrieveFile');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
