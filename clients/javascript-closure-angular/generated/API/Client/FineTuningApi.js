/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.FineTuningApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * Version: 2.0.0
* Generator version: 7.9.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://github.com/openai/openai-openapi/blob/master/LICENSE
 */

goog.provide('API.Client.FineTuningApi');

goog.require('API.Client.CreateFineTuningJobRequest');
goog.require('API.Client.FineTuningJob');
goog.require('API.Client.ListFineTuningJobCheckpointsResponse');
goog.require('API.Client.ListFineTuningJobEventsResponse');
goog.require('API.Client.ListPaginatedFineTuningJobsResponse');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.FineTuningApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('FineTuningApiBasePath') ?
                   /** @type {!string} */ ($injector.get('FineTuningApiBasePath')) :
                   'https://api.openai.com/v1';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('FineTuningApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('FineTuningApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.FineTuningApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Immediately cancel a fine-tune job. 
 * 
 * @param {!string} fineTuningJobId The ID of the fine-tuning job to cancel. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.FineTuningJob>}
 */
API.Client.FineTuningApi.prototype.cancelFineTuningJob = function(fineTuningJobId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fine_tuning/jobs/{fine_tuning_job_id}/cancel'
      .replace('{' + 'fine_tuning_job_id' + '}', String(fineTuningJobId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'fineTuningJobId' is set
  if (!fineTuningJobId) {
    throw new Error('Missing required parameter fineTuningJobId when calling cancelFineTuningJob');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
 * 
 * @param {!CreateFineTuningJobRequest} createFineTuningJobRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.FineTuningJob>}
 */
API.Client.FineTuningApi.prototype.createFineTuningJob = function(createFineTuningJobRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fine_tuning/jobs';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'createFineTuningJobRequest' is set
  if (!createFineTuningJobRequest) {
    throw new Error('Missing required parameter createFineTuningJobRequest when calling createFineTuningJob');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createFineTuningJobRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get status updates for a fine-tuning job. 
 * 
 * @param {!string} fineTuningJobId The ID of the fine-tuning job to get events for. 
 * @param {!string=} opt_after Identifier for the last event from the previous pagination request.
 * @param {!number=} opt_limit Number of events to retrieve.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ListFineTuningJobEventsResponse>}
 */
API.Client.FineTuningApi.prototype.listFineTuningEvents = function(fineTuningJobId, opt_after, opt_limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fine_tuning/jobs/{fine_tuning_job_id}/events'
      .replace('{' + 'fine_tuning_job_id' + '}', String(fineTuningJobId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'fineTuningJobId' is set
  if (!fineTuningJobId) {
    throw new Error('Missing required parameter fineTuningJobId when calling listFineTuningEvents');
  }
  if (opt_after !== undefined) {
    queryParameters['after'] = opt_after;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List checkpoints for a fine-tuning job. 
 * 
 * @param {!string} fineTuningJobId The ID of the fine-tuning job to get checkpoints for. 
 * @param {!string=} opt_after Identifier for the last checkpoint ID from the previous pagination request.
 * @param {!number=} opt_limit Number of checkpoints to retrieve.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ListFineTuningJobCheckpointsResponse>}
 */
API.Client.FineTuningApi.prototype.listFineTuningJobCheckpoints = function(fineTuningJobId, opt_after, opt_limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints'
      .replace('{' + 'fine_tuning_job_id' + '}', String(fineTuningJobId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'fineTuningJobId' is set
  if (!fineTuningJobId) {
    throw new Error('Missing required parameter fineTuningJobId when calling listFineTuningJobCheckpoints');
  }
  if (opt_after !== undefined) {
    queryParameters['after'] = opt_after;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List your organization&#39;s fine-tuning jobs 
 * 
 * @param {!string=} opt_after Identifier for the last job from the previous pagination request.
 * @param {!number=} opt_limit Number of fine-tuning jobs to retrieve.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ListPaginatedFineTuningJobsResponse>}
 */
API.Client.FineTuningApi.prototype.listPaginatedFineTuningJobs = function(opt_after, opt_limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fine_tuning/jobs';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_after !== undefined) {
    queryParameters['after'] = opt_after;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
 * 
 * @param {!string} fineTuningJobId The ID of the fine-tuning job. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.FineTuningJob>}
 */
API.Client.FineTuningApi.prototype.retrieveFineTuningJob = function(fineTuningJobId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fine_tuning/jobs/{fine_tuning_job_id}'
      .replace('{' + 'fine_tuning_job_id' + '}', String(fineTuningJobId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'fineTuningJobId' is set
  if (!fineTuningJobId) {
    throw new Error('Missing required parameter fineTuningJobId when calling retrieveFineTuningJob');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
