/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.OpenAIApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * APIs for sampling from and fine-tuning language models
 * Version: 2.0.0
* Generator version: 7.4.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.OpenAIApi');

goog.require('API.Client.CreateChatCompletionRequest');
goog.require('API.Client.CreateChatCompletionResponse');
goog.require('API.Client.CreateCompletionRequest');
goog.require('API.Client.CreateCompletionResponse');
goog.require('API.Client.CreateEditRequest');
goog.require('API.Client.CreateEditResponse');
goog.require('API.Client.CreateEmbeddingRequest');
goog.require('API.Client.CreateEmbeddingResponse');
goog.require('API.Client.CreateFineTuneRequest');
goog.require('API.Client.CreateImageRequest');
goog.require('API.Client.CreateModerationRequest');
goog.require('API.Client.CreateModerationResponse');
goog.require('API.Client.CreateTranscriptionRequest_model');
goog.require('API.Client.CreateTranscriptionResponse');
goog.require('API.Client.CreateTranslationResponse');
goog.require('API.Client.DeleteFileResponse');
goog.require('API.Client.DeleteModelResponse');
goog.require('API.Client.FineTune');
goog.require('API.Client.ImagesResponse');
goog.require('API.Client.ListFilesResponse');
goog.require('API.Client.ListFineTuneEventsResponse');
goog.require('API.Client.ListFineTunesResponse');
goog.require('API.Client.ListModelsResponse');
goog.require('API.Client.Model');
goog.require('API.Client.OpenAIFile');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.OpenAIApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('OpenAIApiBasePath') ?
                   /** @type {!string} */ ($injector.get('OpenAIApiBasePath')) :
                   'https://api.openai.com/v1';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('OpenAIApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('OpenAIApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.OpenAIApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Immediately cancel a fine-tune job. 
 * 
 * @param {!string} fineTuneId The ID of the fine-tune job to cancel 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.FineTune>}
 */
API.Client.OpenAIApi.prototype.cancelFineTune = function(fineTuneId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fine-tunes/{fine_tune_id}/cancel'
      .replace('{' + 'fine_tune_id' + '}', String(fineTuneId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'fineTuneId' is set
  if (!fineTuneId) {
    throw new Error('Missing required parameter fineTuneId when calling cancelFineTune');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Creates a model response for the given chat conversation.
 * 
 * @param {!CreateChatCompletionRequest} createChatCompletionRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.CreateChatCompletionResponse>}
 */
API.Client.OpenAIApi.prototype.createChatCompletion = function(createChatCompletionRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/chat/completions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'createChatCompletionRequest' is set
  if (!createChatCompletionRequest) {
    throw new Error('Missing required parameter createChatCompletionRequest when calling createChatCompletion');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createChatCompletionRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Creates a completion for the provided prompt and parameters.
 * 
 * @param {!CreateCompletionRequest} createCompletionRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.CreateCompletionResponse>}
 */
API.Client.OpenAIApi.prototype.createCompletion = function(createCompletionRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/completions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'createCompletionRequest' is set
  if (!createCompletionRequest) {
    throw new Error('Missing required parameter createCompletionRequest when calling createCompletion');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createCompletionRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Creates a new edit for the provided input, instruction, and parameters.
 * 
 * @param {!CreateEditRequest} createEditRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.CreateEditResponse>}
 */
API.Client.OpenAIApi.prototype.createEdit = function(createEditRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edits';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'createEditRequest' is set
  if (!createEditRequest) {
    throw new Error('Missing required parameter createEditRequest when calling createEdit');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createEditRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Creates an embedding vector representing the input text.
 * 
 * @param {!CreateEmbeddingRequest} createEmbeddingRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.CreateEmbeddingResponse>}
 */
API.Client.OpenAIApi.prototype.createEmbedding = function(createEmbeddingRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/embeddings';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'createEmbeddingRequest' is set
  if (!createEmbeddingRequest) {
    throw new Error('Missing required parameter createEmbeddingRequest when calling createEmbedding');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createEmbeddingRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. 
 * 
 * @param {!Object} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\&quot;fine-tune\\\&quot;, each line is a JSON record with \\\&quot;prompt\\\&quot; and \\\&quot;completion\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data). 
 * @param {!string} purpose The intended purpose of the uploaded documents.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.OpenAIFile>}
 */
API.Client.OpenAIApi.prototype.createFile = function(file, purpose, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/files';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'file' is set
  if (!file) {
    throw new Error('Missing required parameter file when calling createFile');
  }
  // verify required parameter 'purpose' is set
  if (!purpose) {
    throw new Error('Missing required parameter purpose when calling createFile');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['file'] = file;

  formParams['purpose'] = purpose;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
 * 
 * @param {!CreateFineTuneRequest} createFineTuneRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.FineTune>}
 */
API.Client.OpenAIApi.prototype.createFineTune = function(createFineTuneRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fine-tunes';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'createFineTuneRequest' is set
  if (!createFineTuneRequest) {
    throw new Error('Missing required parameter createFineTuneRequest when calling createFineTune');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createFineTuneRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Creates an image given a prompt.
 * 
 * @param {!CreateImageRequest} createImageRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ImagesResponse>}
 */
API.Client.OpenAIApi.prototype.createImage = function(createImageRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/images/generations';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'createImageRequest' is set
  if (!createImageRequest) {
    throw new Error('Missing required parameter createImageRequest when calling createImage');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createImageRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Creates an edited or extended image given an original image and a prompt.
 * 
 * @param {!Object} image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
 * @param {!string} prompt A text description of the desired image(s). The maximum length is 1000 characters.
 * @param {!Object=} opt_mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.
 * @param {!number=} opt_n The number of images to generate. Must be between 1 and 10.
 * @param {!string=} opt_size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
 * @param {!string=} opt_responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.
 * @param {!string=} opt_user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ImagesResponse>}
 */
API.Client.OpenAIApi.prototype.createImageEdit = function(image, prompt, opt_mask, opt_n, opt_size, opt_responseFormat, opt_user, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/images/edits';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'image' is set
  if (!image) {
    throw new Error('Missing required parameter image when calling createImageEdit');
  }
  // verify required parameter 'prompt' is set
  if (!prompt) {
    throw new Error('Missing required parameter prompt when calling createImageEdit');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['image'] = image;

  formParams['mask'] = opt_mask;

  formParams['prompt'] = prompt;

  formParams['n'] = opt_n;

  formParams['size'] = opt_size;

  formParams['response_format'] = opt_responseFormat;

  formParams['user'] = opt_user;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Creates a variation of a given image.
 * 
 * @param {!Object} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
 * @param {!number=} opt_n The number of images to generate. Must be between 1 and 10.
 * @param {!string=} opt_size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
 * @param {!string=} opt_responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.
 * @param {!string=} opt_user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ImagesResponse>}
 */
API.Client.OpenAIApi.prototype.createImageVariation = function(image, opt_n, opt_size, opt_responseFormat, opt_user, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/images/variations';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'image' is set
  if (!image) {
    throw new Error('Missing required parameter image when calling createImageVariation');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['image'] = image;

  formParams['n'] = opt_n;

  formParams['size'] = opt_size;

  formParams['response_format'] = opt_responseFormat;

  formParams['user'] = opt_user;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Classifies if text violates OpenAI&#39;s Content Policy
 * 
 * @param {!CreateModerationRequest} createModerationRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.CreateModerationResponse>}
 */
API.Client.OpenAIApi.prototype.createModeration = function(createModerationRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/moderations';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'createModerationRequest' is set
  if (!createModerationRequest) {
    throw new Error('Missing required parameter createModerationRequest when calling createModeration');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createModerationRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Transcribes audio into the input language.
 * 
 * @param {!Object} file The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
 * @param {!API.Client.CreateTranscriptionRequest_model} model 
 * @param {!string=} opt_prompt An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
 * @param {!string=} opt_responseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
 * @param {!number=} opt_temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
 * @param {!string=} opt_language The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.CreateTranscriptionResponse>}
 */
API.Client.OpenAIApi.prototype.createTranscription = function(file, model, opt_prompt, opt_responseFormat, opt_temperature, opt_language, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/audio/transcriptions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'file' is set
  if (!file) {
    throw new Error('Missing required parameter file when calling createTranscription');
  }
  // verify required parameter 'model' is set
  if (!model) {
    throw new Error('Missing required parameter model when calling createTranscription');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['file'] = file;

  formParams['model'] = model;

  formParams['prompt'] = opt_prompt;

  formParams['response_format'] = opt_responseFormat;

  formParams['temperature'] = opt_temperature;

  formParams['language'] = opt_language;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Translates audio into English.
 * 
 * @param {!Object} file The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
 * @param {!API.Client.CreateTranscriptionRequest_model} model 
 * @param {!string=} opt_prompt An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. 
 * @param {!string=} opt_responseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
 * @param {!number=} opt_temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.CreateTranslationResponse>}
 */
API.Client.OpenAIApi.prototype.createTranslation = function(file, model, opt_prompt, opt_responseFormat, opt_temperature, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/audio/translations';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'file' is set
  if (!file) {
    throw new Error('Missing required parameter file when calling createTranslation');
  }
  // verify required parameter 'model' is set
  if (!model) {
    throw new Error('Missing required parameter model when calling createTranslation');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['file'] = file;

  formParams['model'] = model;

  formParams['prompt'] = opt_prompt;

  formParams['response_format'] = opt_responseFormat;

  formParams['temperature'] = opt_temperature;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete a file.
 * 
 * @param {!string} fileId The ID of the file to use for this request
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DeleteFileResponse>}
 */
API.Client.OpenAIApi.prototype.deleteFile = function(fileId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/files/{file_id}'
      .replace('{' + 'file_id' + '}', String(fileId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'fileId' is set
  if (!fileId) {
    throw new Error('Missing required parameter fileId when calling deleteFile');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete a fine-tuned model. You must have the Owner role in your organization.
 * 
 * @param {!string} model The model to delete
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DeleteModelResponse>}
 */
API.Client.OpenAIApi.prototype.deleteModel = function(model, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/models/{model}'
      .replace('{' + 'model' + '}', String(model));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'model' is set
  if (!model) {
    throw new Error('Missing required parameter model when calling deleteModel');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Returns the contents of the specified file
 * 
 * @param {!string} fileId The ID of the file to use for this request
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.OpenAIApi.prototype.downloadFile = function(fileId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/files/{file_id}/content'
      .replace('{' + 'file_id' + '}', String(fileId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'fileId' is set
  if (!fileId) {
    throw new Error('Missing required parameter fileId when calling downloadFile');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Returns a list of files that belong to the user&#39;s organization.
 * 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ListFilesResponse>}
 */
API.Client.OpenAIApi.prototype.listFiles = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/files';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get fine-grained status updates for a fine-tune job. 
 * 
 * @param {!string} fineTuneId The ID of the fine-tune job to get events for. 
 * @param {!boolean=} opt_stream Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ListFineTuneEventsResponse>}
 */
API.Client.OpenAIApi.prototype.listFineTuneEvents = function(fineTuneId, opt_stream, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fine-tunes/{fine_tune_id}/events'
      .replace('{' + 'fine_tune_id' + '}', String(fineTuneId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'fineTuneId' is set
  if (!fineTuneId) {
    throw new Error('Missing required parameter fineTuneId when calling listFineTuneEvents');
  }
  if (opt_stream !== undefined) {
    queryParameters['stream'] = opt_stream;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List your organization&#39;s fine-tuning jobs 
 * 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ListFineTunesResponse>}
 */
API.Client.OpenAIApi.prototype.listFineTunes = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fine-tunes';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Lists the currently available models, and provides basic information about each one such as the owner and availability.
 * 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ListModelsResponse>}
 */
API.Client.OpenAIApi.prototype.listModels = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/models';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Returns information about a specific file.
 * 
 * @param {!string} fileId The ID of the file to use for this request
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.OpenAIFile>}
 */
API.Client.OpenAIApi.prototype.retrieveFile = function(fileId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/files/{file_id}'
      .replace('{' + 'file_id' + '}', String(fileId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'fileId' is set
  if (!fileId) {
    throw new Error('Missing required parameter fileId when calling retrieveFile');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
 * 
 * @param {!string} fineTuneId The ID of the fine-tune job 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.FineTune>}
 */
API.Client.OpenAIApi.prototype.retrieveFineTune = function(fineTuneId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fine-tunes/{fine_tune_id}'
      .replace('{' + 'fine_tune_id' + '}', String(fineTuneId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'fineTuneId' is set
  if (!fineTuneId) {
    throw new Error('Missing required parameter fineTuneId when calling retrieveFineTune');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
 * 
 * @param {!string} model The ID of the model to use for this request
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Model>}
 */
API.Client.OpenAIApi.prototype.retrieveModel = function(model, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/models/{model}'
      .replace('{' + 'model' + '}', String(model));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'model' is set
  if (!model) {
    throw new Error('Missing required parameter model when calling retrieveModel');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
