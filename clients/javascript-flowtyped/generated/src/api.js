// @flow
/* eslint-disable no-use-before-define */
/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "https://api.openai.com/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}

/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 */
export type ChatCompletionFunctions = {
    /**
     * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
     * @type {string}
     * @memberof ChatCompletionFunctions
     */
    name: string;
    /**
     * The description of what the function does.
     * @type {string}
     * @memberof ChatCompletionFunctions
     */
    description?: string;
    /**
     * The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
     * @type {{ [key: string]: AnyType; }}
     * @memberof ChatCompletionFunctions
     */
    parameters?: { [key: string]: AnyType; };
}


            export type ChatCompletionRequestMessageRoleEnum = 'system' | 'user' | 'assistant' | 'function';
/**
 * 
 * @export
 */
export type ChatCompletionRequestMessage = {
    /**
     * The role of the messages author. One of `system`, `user`, `assistant`, or `function`.
     * @type {string}
     * @memberof ChatCompletionRequestMessage
     */
    role: ChatCompletionRequestMessageRoleEnum;
    /**
     * The contents of the message. `content` is required for all messages except assistant messages with function calls.
     * @type {string}
     * @memberof ChatCompletionRequestMessage
     */
    content?: string;
    /**
     * The name of the author of this message. `name` is required if role is `function`, and it should be the name of the function whose response is in the `content`. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
     * @type {string}
     * @memberof ChatCompletionRequestMessage
     */
    name?: string;
    /**
     * 
     * @type {ChatCompletionRequestMessageFunctionCall}
     * @memberof ChatCompletionRequestMessage
     */
    function_call?: ChatCompletionRequestMessageFunctionCall;
}

/**
 * The name and arguments of a function that should be called, as generated by the model.
 * @export
 */
export type ChatCompletionRequestMessageFunctionCall = {
    /**
     * The name of the function to call.
     * @type {string}
     * @memberof ChatCompletionRequestMessageFunctionCall
     */
    name?: string;
    /**
     * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
     * @type {string}
     * @memberof ChatCompletionRequestMessageFunctionCall
     */
    _arguments?: string;
}


            export type ChatCompletionResponseMessageRoleEnum = 'system' | 'user' | 'assistant' | 'function';
/**
 * 
 * @export
 */
export type ChatCompletionResponseMessage = {
    /**
     * The role of the author of this message.
     * @type {string}
     * @memberof ChatCompletionResponseMessage
     */
    role: ChatCompletionResponseMessageRoleEnum;
    /**
     * The contents of the message.
     * @type {string}
     * @memberof ChatCompletionResponseMessage
     */
    content?: string;
    /**
     * 
     * @type {ChatCompletionRequestMessageFunctionCall}
     * @memberof ChatCompletionResponseMessage
     */
    function_call?: ChatCompletionRequestMessageFunctionCall;
}


            export type ChatCompletionStreamResponseDeltaRoleEnum = 'system' | 'user' | 'assistant' | 'function';
/**
 * 
 * @export
 */
export type ChatCompletionStreamResponseDelta = {
    /**
     * The role of the author of this message.
     * @type {string}
     * @memberof ChatCompletionStreamResponseDelta
     */
    role?: ChatCompletionStreamResponseDeltaRoleEnum;
    /**
     * The contents of the chunk message.
     * @type {string}
     * @memberof ChatCompletionStreamResponseDelta
     */
    content?: string;
    /**
     * 
     * @type {ChatCompletionRequestMessageFunctionCall}
     * @memberof ChatCompletionStreamResponseDelta
     */
    function_call?: ChatCompletionRequestMessageFunctionCall;
}

/**
 * 
 * @export
 */
export type CreateChatCompletionRequest = {
    /**
     * 
     * @type {CreateChatCompletionRequestModel}
     * @memberof CreateChatCompletionRequest
     */
    model: CreateChatCompletionRequestModel;
    /**
     * A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).
     * @type {Array<ChatCompletionRequestMessage>}
     * @memberof CreateChatCompletionRequest
     */
    messages: Array<ChatCompletionRequestMessage>;
    /**
     * A list of functions the model may generate JSON inputs for.
     * @type {Array<ChatCompletionFunctions>}
     * @memberof CreateChatCompletionRequest
     */
    functions?: Array<ChatCompletionFunctions>;
    /**
     * 
     * @type {CreateChatCompletionRequestFunctionCall}
     * @memberof CreateChatCompletionRequest
     */
    function_call?: CreateChatCompletionRequestFunctionCall;
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
     * @type {number}
     * @memberof CreateChatCompletionRequest
     */
    temperature?: number;
    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
     * @type {number}
     * @memberof CreateChatCompletionRequest
     */
    top_p?: number;
    /**
     * How many chat completion choices to generate for each input message.
     * @type {number}
     * @memberof CreateChatCompletionRequest
     */
    n?: number;
    /**
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb). 
     * @type {boolean}
     * @memberof CreateChatCompletionRequest
     */
    stream?: boolean;
    /**
     * 
     * @type {CreateChatCompletionRequestStop}
     * @memberof CreateChatCompletionRequest
     */
    stop?: CreateChatCompletionRequestStop;
    /**
     * The maximum number of [tokens](/tokenizer) to generate in the chat completion.  The total length of input tokens and generated tokens is limited by the model\'s context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens. 
     * @type {number}
     * @memberof CreateChatCompletionRequest
     */
    max_tokens?: number;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model\'s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 
     * @type {number}
     * @memberof CreateChatCompletionRequest
     */
    presence_penalty?: number;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model\'s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 
     * @type {number}
     * @memberof CreateChatCompletionRequest
     */
    frequency_penalty?: number;
    /**
     * Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. 
     * @type {Object}
     * @memberof CreateChatCompletionRequest
     */
    logit_bias?: Object;
    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
     * @type {string}
     * @memberof CreateChatCompletionRequest
     */
    user?: string;
}

/**
 * Controls how the model responds to function calls. \"none\" means the model does not call a function, and responds to the end-user. \"auto\" means the model can pick between an end-user or calling a function.  Specifying a particular function via `{\"name\":\\ \"my_function\"}` forces the model to call that function. \"none\" is the default when no functions are present. \"auto\" is the default if functions are present.
 * @export
 */
export type CreateChatCompletionRequestFunctionCall = {
    /**
     * The name of the function to call.
     * @type {string}
     * @memberof CreateChatCompletionRequestFunctionCall
     */
    name: string;
}

/**
 * 
 * @export
 */
export type CreateChatCompletionRequestFunctionCallOneOf = {
    /**
     * The name of the function to call.
     * @type {string}
     * @memberof CreateChatCompletionRequestFunctionCallOneOf
     */
    name: string;
}

/**
 * ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
 * @export
 */
export type CreateChatCompletionRequestModel = {
}

/**
 * Up to 4 sequences where the API will stop generating further tokens. 
 * @export
 */
export type CreateChatCompletionRequestStop = {
}

/**
 * 
 * @export
 */
export type CreateChatCompletionResponse = {
    /**
     * 
     * @type {string}
     * @memberof CreateChatCompletionResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatCompletionResponse
     */
    _object: string;
    /**
     * 
     * @type {number}
     * @memberof CreateChatCompletionResponse
     */
    created: number;
    /**
     * 
     * @type {string}
     * @memberof CreateChatCompletionResponse
     */
    model: string;
    /**
     * 
     * @type {Array<CreateChatCompletionResponseChoicesInner>}
     * @memberof CreateChatCompletionResponse
     */
    choices: Array<CreateChatCompletionResponseChoicesInner>;
    /**
     * 
     * @type {CreateCompletionResponseUsage}
     * @memberof CreateChatCompletionResponse
     */
    usage?: CreateCompletionResponseUsage;
}


            export type CreateChatCompletionResponseChoicesInnerFinishReasonEnum = 'stop' | 'length' | 'function_call';
/**
 * 
 * @export
 */
export type CreateChatCompletionResponseChoicesInner = {
    /**
     * 
     * @type {number}
     * @memberof CreateChatCompletionResponseChoicesInner
     */
    index?: number;
    /**
     * 
     * @type {ChatCompletionResponseMessage}
     * @memberof CreateChatCompletionResponseChoicesInner
     */
    message?: ChatCompletionResponseMessage;
    /**
     * 
     * @type {string}
     * @memberof CreateChatCompletionResponseChoicesInner
     */
    finish_reason?: CreateChatCompletionResponseChoicesInnerFinishReasonEnum;
}

/**
 * 
 * @export
 */
export type CreateChatCompletionStreamResponse = {
    /**
     * 
     * @type {string}
     * @memberof CreateChatCompletionStreamResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatCompletionStreamResponse
     */
    _object: string;
    /**
     * 
     * @type {number}
     * @memberof CreateChatCompletionStreamResponse
     */
    created: number;
    /**
     * 
     * @type {string}
     * @memberof CreateChatCompletionStreamResponse
     */
    model: string;
    /**
     * 
     * @type {Array<CreateChatCompletionStreamResponseChoicesInner>}
     * @memberof CreateChatCompletionStreamResponse
     */
    choices: Array<CreateChatCompletionStreamResponseChoicesInner>;
}


            export type CreateChatCompletionStreamResponseChoicesInnerFinishReasonEnum = 'stop' | 'length' | 'function_call';
/**
 * 
 * @export
 */
export type CreateChatCompletionStreamResponseChoicesInner = {
    /**
     * 
     * @type {number}
     * @memberof CreateChatCompletionStreamResponseChoicesInner
     */
    index?: number;
    /**
     * 
     * @type {ChatCompletionStreamResponseDelta}
     * @memberof CreateChatCompletionStreamResponseChoicesInner
     */
    delta?: ChatCompletionStreamResponseDelta;
    /**
     * 
     * @type {string}
     * @memberof CreateChatCompletionStreamResponseChoicesInner
     */
    finish_reason?: CreateChatCompletionStreamResponseChoicesInnerFinishReasonEnum;
}

/**
 * 
 * @export
 */
export type CreateCompletionRequest = {
    /**
     * 
     * @type {CreateCompletionRequestModel}
     * @memberof CreateCompletionRequest
     */
    model: CreateCompletionRequestModel;
    /**
     * 
     * @type {CreateCompletionRequestPrompt}
     * @memberof CreateCompletionRequest
     */
    prompt: CreateCompletionRequestPrompt;
    /**
     * The suffix that comes after a completion of inserted text.
     * @type {string}
     * @memberof CreateCompletionRequest
     */
    suffix?: string;
    /**
     * The maximum number of [tokens](/tokenizer) to generate in the completion.  The token count of your prompt plus `max_tokens` cannot exceed the model\'s context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens. 
     * @type {number}
     * @memberof CreateCompletionRequest
     */
    max_tokens?: number;
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
     * @type {number}
     * @memberof CreateCompletionRequest
     */
    temperature?: number;
    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
     * @type {number}
     * @memberof CreateCompletionRequest
     */
    top_p?: number;
    /**
     * How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`. 
     * @type {number}
     * @memberof CreateCompletionRequest
     */
    n?: number;
    /**
     * Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb). 
     * @type {boolean}
     * @memberof CreateCompletionRequest
     */
    stream?: boolean;
    /**
     * Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5. 
     * @type {number}
     * @memberof CreateCompletionRequest
     */
    logprobs?: number;
    /**
     * Echo back the prompt in addition to the completion 
     * @type {boolean}
     * @memberof CreateCompletionRequest
     */
    echo?: boolean;
    /**
     * 
     * @type {CreateCompletionRequestStop}
     * @memberof CreateCompletionRequest
     */
    stop?: CreateCompletionRequestStop;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model\'s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 
     * @type {number}
     * @memberof CreateCompletionRequest
     */
    presence_penalty?: number;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model\'s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 
     * @type {number}
     * @memberof CreateCompletionRequest
     */
    frequency_penalty?: number;
    /**
     * Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.  When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`. 
     * @type {number}
     * @memberof CreateCompletionRequest
     */
    best_of?: number;
    /**
     * Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated. 
     * @type {Object}
     * @memberof CreateCompletionRequest
     */
    logit_bias?: Object;
    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
     * @type {string}
     * @memberof CreateCompletionRequest
     */
    user?: string;
}

/**
 * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
 * @export
 */
export type CreateCompletionRequestModel = {
}

/**
 * The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.  Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document. 
 * @export
 */
export type CreateCompletionRequestPrompt = {
}

/**
 * Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence. 
 * @export
 */
export type CreateCompletionRequestStop = {
}

/**
 * 
 * @export
 */
export type CreateCompletionResponse = {
    /**
     * 
     * @type {string}
     * @memberof CreateCompletionResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCompletionResponse
     */
    _object: string;
    /**
     * 
     * @type {number}
     * @memberof CreateCompletionResponse
     */
    created: number;
    /**
     * 
     * @type {string}
     * @memberof CreateCompletionResponse
     */
    model: string;
    /**
     * 
     * @type {Array<CreateCompletionResponseChoicesInner>}
     * @memberof CreateCompletionResponse
     */
    choices: Array<CreateCompletionResponseChoicesInner>;
    /**
     * 
     * @type {CreateCompletionResponseUsage}
     * @memberof CreateCompletionResponse
     */
    usage?: CreateCompletionResponseUsage;
}


            export type CreateCompletionResponseChoicesInnerFinishReasonEnum = 'stop' | 'length';
/**
 * 
 * @export
 */
export type CreateCompletionResponseChoicesInner = {
    /**
     * 
     * @type {string}
     * @memberof CreateCompletionResponseChoicesInner
     */
    text: string;
    /**
     * 
     * @type {number}
     * @memberof CreateCompletionResponseChoicesInner
     */
    index: number;
    /**
     * 
     * @type {CreateCompletionResponseChoicesInnerLogprobs}
     * @memberof CreateCompletionResponseChoicesInner
     */
    logprobs: CreateCompletionResponseChoicesInnerLogprobs;
    /**
     * 
     * @type {string}
     * @memberof CreateCompletionResponseChoicesInner
     */
    finish_reason: CreateCompletionResponseChoicesInnerFinishReasonEnum;
}

/**
 * 
 * @export
 */
export type CreateCompletionResponseChoicesInnerLogprobs = {
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateCompletionResponseChoicesInnerLogprobs
     */
    tokens?: Array<string>;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateCompletionResponseChoicesInnerLogprobs
     */
    token_logprobs?: Array<number>;
    /**
     * 
     * @type {Array<Object>}
     * @memberof CreateCompletionResponseChoicesInnerLogprobs
     */
    top_logprobs?: Array<Object>;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateCompletionResponseChoicesInnerLogprobs
     */
    text_offset?: Array<number>;
}

/**
 * 
 * @export
 */
export type CreateCompletionResponseUsage = {
    /**
     * 
     * @type {number}
     * @memberof CreateCompletionResponseUsage
     */
    prompt_tokens: number;
    /**
     * 
     * @type {number}
     * @memberof CreateCompletionResponseUsage
     */
    completion_tokens: number;
    /**
     * 
     * @type {number}
     * @memberof CreateCompletionResponseUsage
     */
    total_tokens: number;
}

/**
 * 
 * @export
 */
export type CreateEditRequest = {
    /**
     * 
     * @type {CreateEditRequestModel}
     * @memberof CreateEditRequest
     */
    model: CreateEditRequestModel;
    /**
     * The input text to use as a starting point for the edit.
     * @type {string}
     * @memberof CreateEditRequest
     */
    input?: string;
    /**
     * The instruction that tells the model how to edit the prompt.
     * @type {string}
     * @memberof CreateEditRequest
     */
    instruction: string;
    /**
     * How many edits to generate for the input and instruction.
     * @type {number}
     * @memberof CreateEditRequest
     */
    n?: number;
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
     * @type {number}
     * @memberof CreateEditRequest
     */
    temperature?: number;
    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
     * @type {number}
     * @memberof CreateEditRequest
     */
    top_p?: number;
}

/**
 * ID of the model to use. You can use the `text-davinci-edit-001` or `code-davinci-edit-001` model with this endpoint.
 * @export
 */
export type CreateEditRequestModel = {
}

/**
 * 
 * @export
 */
export type CreateEditResponse = {
    /**
     * 
     * @type {string}
     * @memberof CreateEditResponse
     */
    _object: string;
    /**
     * 
     * @type {number}
     * @memberof CreateEditResponse
     */
    created: number;
    /**
     * 
     * @type {Array<CreateEditResponseChoicesInner>}
     * @memberof CreateEditResponse
     */
    choices: Array<CreateEditResponseChoicesInner>;
    /**
     * 
     * @type {CreateCompletionResponseUsage}
     * @memberof CreateEditResponse
     */
    usage: CreateCompletionResponseUsage;
}


            export type CreateEditResponseChoicesInnerFinishReasonEnum = 'stop' | 'length';
/**
 * 
 * @export
 */
export type CreateEditResponseChoicesInner = {
    /**
     * 
     * @type {string}
     * @memberof CreateEditResponseChoicesInner
     */
    text?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateEditResponseChoicesInner
     */
    index?: number;
    /**
     * 
     * @type {CreateCompletionResponseChoicesInnerLogprobs}
     * @memberof CreateEditResponseChoicesInner
     */
    logprobs?: CreateCompletionResponseChoicesInnerLogprobs;
    /**
     * 
     * @type {string}
     * @memberof CreateEditResponseChoicesInner
     */
    finish_reason?: CreateEditResponseChoicesInnerFinishReasonEnum;
}

/**
 * 
 * @export
 */
export type CreateEmbeddingRequest = {
    /**
     * 
     * @type {CreateEmbeddingRequestModel}
     * @memberof CreateEmbeddingRequest
     */
    model: CreateEmbeddingRequestModel;
    /**
     * 
     * @type {CreateEmbeddingRequestInput}
     * @memberof CreateEmbeddingRequest
     */
    input: CreateEmbeddingRequestInput;
    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
     * @type {string}
     * @memberof CreateEmbeddingRequest
     */
    user?: string;
}

/**
 * Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. Each input must not exceed the max input tokens for the model (8191 tokens for `text-embedding-ada-002`). [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens. 
 * @export
 */
export type CreateEmbeddingRequestInput = {
}

/**
 * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
 * @export
 */
export type CreateEmbeddingRequestModel = {
}

/**
 * 
 * @export
 */
export type CreateEmbeddingResponse = {
    /**
     * 
     * @type {string}
     * @memberof CreateEmbeddingResponse
     */
    _object: string;
    /**
     * 
     * @type {string}
     * @memberof CreateEmbeddingResponse
     */
    model: string;
    /**
     * 
     * @type {Array<CreateEmbeddingResponseDataInner>}
     * @memberof CreateEmbeddingResponse
     */
    data: Array<CreateEmbeddingResponseDataInner>;
    /**
     * 
     * @type {CreateEmbeddingResponseUsage}
     * @memberof CreateEmbeddingResponse
     */
    usage: CreateEmbeddingResponseUsage;
}

/**
 * 
 * @export
 */
export type CreateEmbeddingResponseDataInner = {
    /**
     * 
     * @type {number}
     * @memberof CreateEmbeddingResponseDataInner
     */
    index: number;
    /**
     * 
     * @type {string}
     * @memberof CreateEmbeddingResponseDataInner
     */
    _object: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateEmbeddingResponseDataInner
     */
    embedding: Array<number>;
}

/**
 * 
 * @export
 */
export type CreateEmbeddingResponseUsage = {
    /**
     * 
     * @type {number}
     * @memberof CreateEmbeddingResponseUsage
     */
    prompt_tokens: number;
    /**
     * 
     * @type {number}
     * @memberof CreateEmbeddingResponseUsage
     */
    total_tokens: number;
}

/**
 * 
 * @export
 */
export type CreateFineTuneRequest = {
    /**
     * The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file, where each training example is a JSON object with the keys \"prompt\" and \"completion\". Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. 
     * @type {string}
     * @memberof CreateFineTuneRequest
     */
    training_file: string;
    /**
     * The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model). Your train and validation data should be mutually exclusive.  Your dataset must be formatted as a JSONL file, where each validation example is a JSON object with the keys \"prompt\" and \"completion\". Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. 
     * @type {string}
     * @memberof CreateFineTuneRequest
     */
    validation_file?: string;
    /**
     * 
     * @type {CreateFineTuneRequestModel}
     * @memberof CreateFineTuneRequest
     */
    model?: CreateFineTuneRequestModel;
    /**
     * The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. 
     * @type {number}
     * @memberof CreateFineTuneRequest
     */
    n_epochs?: number;
    /**
     * The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass.  By default, the batch size will be dynamically configured to be ~0.2% of the number of examples in the training set, capped at 256 - in general, we\'ve found that larger batch sizes tend to work better for larger datasets. 
     * @type {number}
     * @memberof CreateFineTuneRequest
     */
    batch_size?: number;
    /**
     * The learning rate multiplier to use for training. The fine-tuning learning rate is the original learning rate used for pretraining multiplied by this value.  By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on final `batch_size` (larger learning rates tend to perform better with larger batch sizes). We recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best results. 
     * @type {number}
     * @memberof CreateFineTuneRequest
     */
    learning_rate_multiplier?: number;
    /**
     * The weight to use for loss on the prompt tokens. This controls how much the model tries to learn to generate the prompt (as compared to the completion which always has a weight of 1.0), and can add a stabilizing effect to training when completions are short.  If prompts are extremely long (relative to completions), it may make sense to reduce this weight so as to avoid over-prioritizing learning the prompt. 
     * @type {number}
     * @memberof CreateFineTuneRequest
     */
    prompt_loss_weight?: number;
    /**
     * If set, we calculate classification-specific metrics such as accuracy and F-1 score using the validation set at the end of every epoch. These metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).  In order to compute classification metrics, you must provide a `validation_file`. Additionally, you must specify `classification_n_classes` for multiclass classification or `classification_positive_class` for binary classification. 
     * @type {boolean}
     * @memberof CreateFineTuneRequest
     */
    compute_classification_metrics?: boolean;
    /**
     * The number of classes in a classification task.  This parameter is required for multiclass classification. 
     * @type {number}
     * @memberof CreateFineTuneRequest
     */
    classification_n_classes?: number;
    /**
     * The positive class in binary classification.  This parameter is needed to generate precision, recall, and F1 metrics when doing binary classification. 
     * @type {string}
     * @memberof CreateFineTuneRequest
     */
    classification_positive_class?: string;
    /**
     * If this is provided, we calculate F-beta scores at the specified beta values. The F-beta score is a generalization of F-1 score. This is only used for binary classification.  With a beta of 1 (i.e. the F-1 score), precision and recall are given the same weight. A larger beta score puts more weight on recall and less on precision. A smaller beta score puts more weight on precision and less on recall. 
     * @type {Array<number>}
     * @memberof CreateFineTuneRequest
     */
    classification_betas?: Array<number>;
    /**
     * A string of up to 40 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`. 
     * @type {string}
     * @memberof CreateFineTuneRequest
     */
    suffix?: string;
}

/**
 * The name of the base model to fine-tune. You can select one of \"ada\", \"babbage\", \"curie\", \"davinci\", or a fine-tuned model created after 2022-04-21. To learn more about these models, see the [Models](https://platform.openai.com/docs/models) documentation. 
 * @export
 */
export type CreateFineTuneRequestModel = {
}


            export type CreateImageRequestSizeEnum = '256x256' | '512x512' | '1024x1024';

            export type CreateImageRequestResponseFormatEnum = 'url' | 'b64_json';
/**
 * 
 * @export
 */
export type CreateImageRequest = {
    /**
     * A text description of the desired image(s). The maximum length is 1000 characters.
     * @type {string}
     * @memberof CreateImageRequest
     */
    prompt: string;
    /**
     * The number of images to generate. Must be between 1 and 10.
     * @type {number}
     * @memberof CreateImageRequest
     */
    n?: number;
    /**
     * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
     * @type {string}
     * @memberof CreateImageRequest
     */
    size?: CreateImageRequestSizeEnum;
    /**
     * The format in which the generated images are returned. Must be one of `url` or `b64_json`.
     * @type {string}
     * @memberof CreateImageRequest
     */
    response_format?: CreateImageRequestResponseFormatEnum;
    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
     * @type {string}
     * @memberof CreateImageRequest
     */
    user?: string;
}

/**
 * 
 * @export
 */
export type CreateModerationRequest = {
    /**
     * 
     * @type {CreateModerationRequestInput}
     * @memberof CreateModerationRequest
     */
    input: CreateModerationRequestInput;
    /**
     * 
     * @type {CreateModerationRequestModel}
     * @memberof CreateModerationRequest
     */
    model?: CreateModerationRequestModel;
}

/**
 * The input text to classify
 * @export
 */
export type CreateModerationRequestInput = {
}

/**
 * Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.  The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`. 
 * @export
 */
export type CreateModerationRequestModel = {
}

/**
 * 
 * @export
 */
export type CreateModerationResponse = {
    /**
     * 
     * @type {string}
     * @memberof CreateModerationResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof CreateModerationResponse
     */
    model: string;
    /**
     * 
     * @type {Array<CreateModerationResponseResultsInner>}
     * @memberof CreateModerationResponse
     */
    results: Array<CreateModerationResponseResultsInner>;
}

/**
 * 
 * @export
 */
export type CreateModerationResponseResultsInner = {
    /**
     * 
     * @type {boolean}
     * @memberof CreateModerationResponseResultsInner
     */
    flagged: boolean;
    /**
     * 
     * @type {CreateModerationResponseResultsInnerCategories}
     * @memberof CreateModerationResponseResultsInner
     */
    categories: CreateModerationResponseResultsInnerCategories;
    /**
     * 
     * @type {CreateModerationResponseResultsInnerCategoryScores}
     * @memberof CreateModerationResponseResultsInner
     */
    category_scores: CreateModerationResponseResultsInnerCategoryScores;
}

/**
 * 
 * @export
 */
export type CreateModerationResponseResultsInnerCategories = {
    /**
     * 
     * @type {boolean}
     * @memberof CreateModerationResponseResultsInnerCategories
     */
    hate: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateModerationResponseResultsInnerCategories
     */
    hate_threatening: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateModerationResponseResultsInnerCategories
     */
    self_harm: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateModerationResponseResultsInnerCategories
     */
    sexual: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateModerationResponseResultsInnerCategories
     */
    sexual_minors: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateModerationResponseResultsInnerCategories
     */
    violence: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateModerationResponseResultsInnerCategories
     */
    violence_graphic: boolean;
}

/**
 * 
 * @export
 */
export type CreateModerationResponseResultsInnerCategoryScores = {
    /**
     * 
     * @type {number}
     * @memberof CreateModerationResponseResultsInnerCategoryScores
     */
    hate: number;
    /**
     * 
     * @type {number}
     * @memberof CreateModerationResponseResultsInnerCategoryScores
     */
    hate_threatening: number;
    /**
     * 
     * @type {number}
     * @memberof CreateModerationResponseResultsInnerCategoryScores
     */
    self_harm: number;
    /**
     * 
     * @type {number}
     * @memberof CreateModerationResponseResultsInnerCategoryScores
     */
    sexual: number;
    /**
     * 
     * @type {number}
     * @memberof CreateModerationResponseResultsInnerCategoryScores
     */
    sexual_minors: number;
    /**
     * 
     * @type {number}
     * @memberof CreateModerationResponseResultsInnerCategoryScores
     */
    violence: number;
    /**
     * 
     * @type {number}
     * @memberof CreateModerationResponseResultsInnerCategoryScores
     */
    violence_graphic: number;
}

/**
 * ID of the model to use. Only `whisper-1` is currently available. 
 * @export
 */
export type CreateTranscriptionRequestModel = {
}

/**
 * 
 * @export
 */
export type CreateTranscriptionResponse = {
    /**
     * 
     * @type {string}
     * @memberof CreateTranscriptionResponse
     */
    text: string;
}

/**
 * 
 * @export
 */
export type CreateTranslationResponse = {
    /**
     * 
     * @type {string}
     * @memberof CreateTranslationResponse
     */
    text: string;
}

/**
 * 
 * @export
 */
export type DeleteFileResponse = {
    /**
     * 
     * @type {string}
     * @memberof DeleteFileResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteFileResponse
     */
    _object: string;
    /**
     * 
     * @type {boolean}
     * @memberof DeleteFileResponse
     */
    deleted: boolean;
}

/**
 * 
 * @export
 */
export type DeleteModelResponse = {
    /**
     * 
     * @type {string}
     * @memberof DeleteModelResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteModelResponse
     */
    _object: string;
    /**
     * 
     * @type {boolean}
     * @memberof DeleteModelResponse
     */
    deleted: boolean;
}

/**
 * 
 * @export
 */
export type Error = {
    /**
     * 
     * @type {string}
     * @memberof Error
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof Error
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof Error
     */
    param: string;
    /**
     * 
     * @type {string}
     * @memberof Error
     */
    code: string;
}

/**
 * 
 * @export
 */
export type ErrorResponse = {
    /**
     * 
     * @type {Error}
     * @memberof ErrorResponse
     */
    error: Error;
}

/**
 * 
 * @export
 */
export type FineTune = {
    /**
     * 
     * @type {string}
     * @memberof FineTune
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof FineTune
     */
    _object: string;
    /**
     * 
     * @type {number}
     * @memberof FineTune
     */
    created_at: number;
    /**
     * 
     * @type {number}
     * @memberof FineTune
     */
    updated_at: number;
    /**
     * 
     * @type {string}
     * @memberof FineTune
     */
    model: string;
    /**
     * 
     * @type {string}
     * @memberof FineTune
     */
    fine_tuned_model: string;
    /**
     * 
     * @type {string}
     * @memberof FineTune
     */
    organization_id: string;
    /**
     * 
     * @type {string}
     * @memberof FineTune
     */
    status: string;
    /**
     * 
     * @type {Object}
     * @memberof FineTune
     */
    hyperparams: Object;
    /**
     * 
     * @type {Array<OpenAIFile>}
     * @memberof FineTune
     */
    training_files: Array<OpenAIFile>;
    /**
     * 
     * @type {Array<OpenAIFile>}
     * @memberof FineTune
     */
    validation_files: Array<OpenAIFile>;
    /**
     * 
     * @type {Array<OpenAIFile>}
     * @memberof FineTune
     */
    result_files: Array<OpenAIFile>;
    /**
     * 
     * @type {Array<FineTuneEvent>}
     * @memberof FineTune
     */
    events?: Array<FineTuneEvent>;
}

/**
 * 
 * @export
 */
export type FineTuneEvent = {
    /**
     * 
     * @type {string}
     * @memberof FineTuneEvent
     */
    _object: string;
    /**
     * 
     * @type {number}
     * @memberof FineTuneEvent
     */
    created_at: number;
    /**
     * 
     * @type {string}
     * @memberof FineTuneEvent
     */
    level: string;
    /**
     * 
     * @type {string}
     * @memberof FineTuneEvent
     */
    message: string;
}

/**
 * 
 * @export
 */
export type ImagesResponse = {
    /**
     * 
     * @type {number}
     * @memberof ImagesResponse
     */
    created: number;
    /**
     * 
     * @type {Array<ImagesResponseDataInner>}
     * @memberof ImagesResponse
     */
    data: Array<ImagesResponseDataInner>;
}

/**
 * 
 * @export
 */
export type ImagesResponseDataInner = {
    /**
     * 
     * @type {string}
     * @memberof ImagesResponseDataInner
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof ImagesResponseDataInner
     */
    b64_json?: string;
}

/**
 * 
 * @export
 */
export type ListFilesResponse = {
    /**
     * 
     * @type {string}
     * @memberof ListFilesResponse
     */
    _object: string;
    /**
     * 
     * @type {Array<OpenAIFile>}
     * @memberof ListFilesResponse
     */
    data: Array<OpenAIFile>;
}

/**
 * 
 * @export
 */
export type ListFineTuneEventsResponse = {
    /**
     * 
     * @type {string}
     * @memberof ListFineTuneEventsResponse
     */
    _object: string;
    /**
     * 
     * @type {Array<FineTuneEvent>}
     * @memberof ListFineTuneEventsResponse
     */
    data: Array<FineTuneEvent>;
}

/**
 * 
 * @export
 */
export type ListFineTunesResponse = {
    /**
     * 
     * @type {string}
     * @memberof ListFineTunesResponse
     */
    _object: string;
    /**
     * 
     * @type {Array<FineTune>}
     * @memberof ListFineTunesResponse
     */
    data: Array<FineTune>;
}

/**
 * 
 * @export
 */
export type ListModelsResponse = {
    /**
     * 
     * @type {string}
     * @memberof ListModelsResponse
     */
    _object: string;
    /**
     * 
     * @type {Array<Model>}
     * @memberof ListModelsResponse
     */
    data: Array<Model>;
}

/**
 * 
 * @export
 */
export type Model = {
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    _object: string;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    created: number;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    owned_by: string;
}

/**
 * 
 * @export
 */
export type OpenAIFile = {
    /**
     * 
     * @type {string}
     * @memberof OpenAIFile
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof OpenAIFile
     */
    _object: string;
    /**
     * 
     * @type {number}
     * @memberof OpenAIFile
     */
    bytes: number;
    /**
     * 
     * @type {number}
     * @memberof OpenAIFile
     */
    created_at: number;
    /**
     * 
     * @type {string}
     * @memberof OpenAIFile
     */
    filename: string;
    /**
     * 
     * @type {string}
     * @memberof OpenAIFile
     */
    purpose: string;
    /**
     * 
     * @type {string}
     * @memberof OpenAIFile
     */
    status?: string;
    /**
     * 
     * @type {Object}
     * @memberof OpenAIFile
     */
    status_details?: Object;
}



/**
 * OpenAIApi - fetch parameter creator
 * @export
 */
export const OpenAIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Immediately cancel a fine-tune job. 
         * @throws {RequiredError}
         */
        cancelFineTune(fineTuneId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'fineTuneId' is not null or undefined
            if (fineTuneId === null || fineTuneId === undefined) {
                throw new RequiredError('fineTuneId','Required parameter fineTuneId was null or undefined when calling cancelFineTune.');
            }
            const localVarPath = `/fine-tunes/{fine_tune_id}/cancel`
                .replace(`{${"fine_tune_id"}}`, encodeURIComponent(String(fineTuneId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a model response for the given chat conversation.
         * @throws {RequiredError}
         */
        createChatCompletion(createChatCompletionRequest: CreateChatCompletionRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'createChatCompletionRequest' is not null or undefined
            if (createChatCompletionRequest === null || createChatCompletionRequest === undefined) {
                throw new RequiredError('createChatCompletionRequest','Required parameter createChatCompletionRequest was null or undefined when calling createChatCompletion.');
            }
            const localVarPath = `/chat/completions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof createChatCompletionRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(createChatCompletionRequest != null ? createChatCompletionRequest : {}) : (((createChatCompletionRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a completion for the provided prompt and parameters.
         * @throws {RequiredError}
         */
        createCompletion(createCompletionRequest: CreateCompletionRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'createCompletionRequest' is not null or undefined
            if (createCompletionRequest === null || createCompletionRequest === undefined) {
                throw new RequiredError('createCompletionRequest','Required parameter createCompletionRequest was null or undefined when calling createCompletion.');
            }
            const localVarPath = `/completions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof createCompletionRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(createCompletionRequest != null ? createCompletionRequest : {}) : (((createCompletionRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new edit for the provided input, instruction, and parameters.
         * @throws {RequiredError}
         */
        createEdit(createEditRequest: CreateEditRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'createEditRequest' is not null or undefined
            if (createEditRequest === null || createEditRequest === undefined) {
                throw new RequiredError('createEditRequest','Required parameter createEditRequest was null or undefined when calling createEdit.');
            }
            const localVarPath = `/edits`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof createEditRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(createEditRequest != null ? createEditRequest : {}) : (((createEditRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an embedding vector representing the input text.
         * @throws {RequiredError}
         */
        createEmbedding(createEmbeddingRequest: CreateEmbeddingRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'createEmbeddingRequest' is not null or undefined
            if (createEmbeddingRequest === null || createEmbeddingRequest === undefined) {
                throw new RequiredError('createEmbeddingRequest','Required parameter createEmbeddingRequest was null or undefined when calling createEmbedding.');
            }
            const localVarPath = `/embeddings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof createEmbeddingRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(createEmbeddingRequest != null ? createEmbeddingRequest : {}) : (((createEmbeddingRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. 
         * @throws {RequiredError}
         */
        createFile(file: File, purpose: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling createFile.');
            }
            // verify required parameter 'purpose' is not null or undefined
            if (purpose === null || purpose === undefined) {
                throw new RequiredError('purpose','Required parameter purpose was null or undefined when calling createFile.');
            }
            const localVarPath = `/files`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();

            if (file !== undefined) {
                localVarFormParams.set('file', ((file:any):string));
            }

            if (purpose !== undefined) {
                localVarFormParams.set('purpose', ((purpose:any):string));
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams;

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
         * @throws {RequiredError}
         */
        createFineTune(createFineTuneRequest: CreateFineTuneRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'createFineTuneRequest' is not null or undefined
            if (createFineTuneRequest === null || createFineTuneRequest === undefined) {
                throw new RequiredError('createFineTuneRequest','Required parameter createFineTuneRequest was null or undefined when calling createFineTune.');
            }
            const localVarPath = `/fine-tunes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof createFineTuneRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(createFineTuneRequest != null ? createFineTuneRequest : {}) : (((createFineTuneRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an image given a prompt.
         * @throws {RequiredError}
         */
        createImage(createImageRequest: CreateImageRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'createImageRequest' is not null or undefined
            if (createImageRequest === null || createImageRequest === undefined) {
                throw new RequiredError('createImageRequest','Required parameter createImageRequest was null or undefined when calling createImage.');
            }
            const localVarPath = `/images/generations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof createImageRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(createImageRequest != null ? createImageRequest : {}) : (((createImageRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an edited or extended image given an original image and a prompt.
         * @throws {RequiredError}
         */
        createImageEdit(image: File, prompt: string, mask?: File, n?: number, size?: string, responseFormat?: string, user?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'image' is not null or undefined
            if (image === null || image === undefined) {
                throw new RequiredError('image','Required parameter image was null or undefined when calling createImageEdit.');
            }
            // verify required parameter 'prompt' is not null or undefined
            if (prompt === null || prompt === undefined) {
                throw new RequiredError('prompt','Required parameter prompt was null or undefined when calling createImageEdit.');
            }
            const localVarPath = `/images/edits`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();

            if (image !== undefined) {
                localVarFormParams.set('image', ((image:any):string));
            }

            if (mask !== undefined) {
                localVarFormParams.set('mask', ((mask:any):string));
            }

            if (prompt !== undefined) {
                localVarFormParams.set('prompt', ((prompt:any):string));
            }

            if (n !== undefined) {
                localVarFormParams.set('n', ((n:any):string));
            }

            if (size !== undefined) {
                localVarFormParams.set('size', ((size:any):string));
            }

            if (responseFormat !== undefined) {
                localVarFormParams.set('response_format', ((responseFormat:any):string));
            }

            if (user !== undefined) {
                localVarFormParams.set('user', ((user:any):string));
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams;

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a variation of a given image.
         * @throws {RequiredError}
         */
        createImageVariation(image: File, n?: number, size?: string, responseFormat?: string, user?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'image' is not null or undefined
            if (image === null || image === undefined) {
                throw new RequiredError('image','Required parameter image was null or undefined when calling createImageVariation.');
            }
            const localVarPath = `/images/variations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();

            if (image !== undefined) {
                localVarFormParams.set('image', ((image:any):string));
            }

            if (n !== undefined) {
                localVarFormParams.set('n', ((n:any):string));
            }

            if (size !== undefined) {
                localVarFormParams.set('size', ((size:any):string));
            }

            if (responseFormat !== undefined) {
                localVarFormParams.set('response_format', ((responseFormat:any):string));
            }

            if (user !== undefined) {
                localVarFormParams.set('user', ((user:any):string));
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams;

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Classifies if text violates OpenAI\'s Content Policy
         * @throws {RequiredError}
         */
        createModeration(createModerationRequest: CreateModerationRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'createModerationRequest' is not null or undefined
            if (createModerationRequest === null || createModerationRequest === undefined) {
                throw new RequiredError('createModerationRequest','Required parameter createModerationRequest was null or undefined when calling createModeration.');
            }
            const localVarPath = `/moderations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof createModerationRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(createModerationRequest != null ? createModerationRequest : {}) : (((createModerationRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Transcribes audio into the input language.
         * @throws {RequiredError}
         */
        createTranscription(file: File, model: CreateTranscriptionRequestModel, prompt?: string, responseFormat?: string, temperature?: number, language?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling createTranscription.');
            }
            // verify required parameter 'model' is not null or undefined
            if (model === null || model === undefined) {
                throw new RequiredError('model','Required parameter model was null or undefined when calling createTranscription.');
            }
            const localVarPath = `/audio/transcriptions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();

            if (file !== undefined) {
                localVarFormParams.set('file', ((file:any):string));
            }

            if (model !== undefined) {
                localVarFormParams.set('model', ((model:any):string));
            }

            if (prompt !== undefined) {
                localVarFormParams.set('prompt', ((prompt:any):string));
            }

            if (responseFormat !== undefined) {
                localVarFormParams.set('response_format', ((responseFormat:any):string));
            }

            if (temperature !== undefined) {
                localVarFormParams.set('temperature', ((temperature:any):string));
            }

            if (language !== undefined) {
                localVarFormParams.set('language', ((language:any):string));
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams;

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Translates audio into English.
         * @throws {RequiredError}
         */
        createTranslation(file: File, model: CreateTranscriptionRequestModel, prompt?: string, responseFormat?: string, temperature?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling createTranslation.');
            }
            // verify required parameter 'model' is not null or undefined
            if (model === null || model === undefined) {
                throw new RequiredError('model','Required parameter model was null or undefined when calling createTranslation.');
            }
            const localVarPath = `/audio/translations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();

            if (file !== undefined) {
                localVarFormParams.set('file', ((file:any):string));
            }

            if (model !== undefined) {
                localVarFormParams.set('model', ((model:any):string));
            }

            if (prompt !== undefined) {
                localVarFormParams.set('prompt', ((prompt:any):string));
            }

            if (responseFormat !== undefined) {
                localVarFormParams.set('response_format', ((responseFormat:any):string));
            }

            if (temperature !== undefined) {
                localVarFormParams.set('temperature', ((temperature:any):string));
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams;

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a file.
         * @throws {RequiredError}
         */
        deleteFile(fileId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling deleteFile.');
            }
            const localVarPath = `/files/{file_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a fine-tuned model. You must have the Owner role in your organization.
         * @throws {RequiredError}
         */
        deleteModel(model: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'model' is not null or undefined
            if (model === null || model === undefined) {
                throw new RequiredError('model','Required parameter model was null or undefined when calling deleteModel.');
            }
            const localVarPath = `/models/{model}`
                .replace(`{${"model"}}`, encodeURIComponent(String(model)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the contents of the specified file
         * @throws {RequiredError}
         */
        downloadFile(fileId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling downloadFile.');
            }
            const localVarPath = `/files/{file_id}/content`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of files that belong to the user\'s organization.
         * @throws {RequiredError}
         */
        listFiles(options: RequestOptions): FetchArgs {
            const localVarPath = `/files`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get fine-grained status updates for a fine-tune job. 
         * @throws {RequiredError}
         */
        listFineTuneEvents(fineTuneId: string, stream?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'fineTuneId' is not null or undefined
            if (fineTuneId === null || fineTuneId === undefined) {
                throw new RequiredError('fineTuneId','Required parameter fineTuneId was null or undefined when calling listFineTuneEvents.');
            }
            const localVarPath = `/fine-tunes/{fine_tune_id}/events`
                .replace(`{${"fine_tune_id"}}`, encodeURIComponent(String(fineTuneId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (stream !== undefined) {
                localVarQueryParameter['stream'] = ((stream:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List your organization\'s fine-tuning jobs 
         * @throws {RequiredError}
         */
        listFineTunes(options: RequestOptions): FetchArgs {
            const localVarPath = `/fine-tunes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.
         * @throws {RequiredError}
         */
        listModels(options: RequestOptions): FetchArgs {
            const localVarPath = `/models`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns information about a specific file.
         * @throws {RequiredError}
         */
        retrieveFile(fileId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling retrieveFile.');
            }
            const localVarPath = `/files/{file_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
         * @throws {RequiredError}
         */
        retrieveFineTune(fineTuneId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'fineTuneId' is not null or undefined
            if (fineTuneId === null || fineTuneId === undefined) {
                throw new RequiredError('fineTuneId','Required parameter fineTuneId was null or undefined when calling retrieveFineTune.');
            }
            const localVarPath = `/fine-tunes/{fine_tune_id}`
                .replace(`{${"fine_tune_id"}}`, encodeURIComponent(String(fineTuneId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
         * @throws {RequiredError}
         */
        retrieveModel(model: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'model' is not null or undefined
            if (model === null || model === undefined) {
                throw new RequiredError('model','Required parameter model was null or undefined when calling retrieveModel.');
            }
            const localVarPath = `/models/{model}`
                .replace(`{${"model"}}`, encodeURIComponent(String(model)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type OpenAIApiType = { 
    cancelFineTune(fineTuneId: string, options?: RequestOptions): Promise<FineTune>,

    createChatCompletion(createChatCompletionRequest: CreateChatCompletionRequest, options?: RequestOptions): Promise<CreateChatCompletionResponse>,

    createCompletion(createCompletionRequest: CreateCompletionRequest, options?: RequestOptions): Promise<CreateCompletionResponse>,

    createEdit(createEditRequest: CreateEditRequest, options?: RequestOptions): Promise<CreateEditResponse>,

    createEmbedding(createEmbeddingRequest: CreateEmbeddingRequest, options?: RequestOptions): Promise<CreateEmbeddingResponse>,

    createFile(file: File, purpose: string, options?: RequestOptions): Promise<OpenAIFile>,

    createFineTune(createFineTuneRequest: CreateFineTuneRequest, options?: RequestOptions): Promise<FineTune>,

    createImage(createImageRequest: CreateImageRequest, options?: RequestOptions): Promise<ImagesResponse>,

    createImageEdit(image: File, prompt: string, mask?: File, n?: number, size?: string, responseFormat?: string, user?: string, options?: RequestOptions): Promise<ImagesResponse>,

    createImageVariation(image: File, n?: number, size?: string, responseFormat?: string, user?: string, options?: RequestOptions): Promise<ImagesResponse>,

    createModeration(createModerationRequest: CreateModerationRequest, options?: RequestOptions): Promise<CreateModerationResponse>,

    createTranscription(file: File, model: CreateTranscriptionRequestModel, prompt?: string, responseFormat?: string, temperature?: number, language?: string, options?: RequestOptions): Promise<CreateTranscriptionResponse>,

    createTranslation(file: File, model: CreateTranscriptionRequestModel, prompt?: string, responseFormat?: string, temperature?: number, options?: RequestOptions): Promise<CreateTranslationResponse>,

    deleteFile(fileId: string, options?: RequestOptions): Promise<DeleteFileResponse>,

    deleteModel(model: string, options?: RequestOptions): Promise<DeleteModelResponse>,

    downloadFile(fileId: string, options?: RequestOptions): Promise<string>,

    listFiles(options?: RequestOptions): Promise<ListFilesResponse>,

    listFineTuneEvents(fineTuneId: string, stream?: boolean, options?: RequestOptions): Promise<ListFineTuneEventsResponse>,

    listFineTunes(options?: RequestOptions): Promise<ListFineTunesResponse>,

    listModels(options?: RequestOptions): Promise<ListModelsResponse>,

    retrieveFile(fileId: string, options?: RequestOptions): Promise<OpenAIFile>,

    retrieveFineTune(fineTuneId: string, options?: RequestOptions): Promise<FineTune>,

    retrieveModel(model: string, options?: RequestOptions): Promise<Model>,
}

/**
 * OpenAIApi - factory function to inject configuration 
 * @export
 */
export const OpenAIApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): OpenAIApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @summary Immediately cancel a fine-tune job. 
         * @throws {RequiredError}
         */
        cancelFineTune(fineTuneId: string, options?: RequestOptions = {}): Promise<FineTune> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).cancelFineTune(fineTuneId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Creates a model response for the given chat conversation.
         * @throws {RequiredError}
         */
        createChatCompletion(createChatCompletionRequest: CreateChatCompletionRequest, options?: RequestOptions = {}): Promise<CreateChatCompletionResponse> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).createChatCompletion(createChatCompletionRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Creates a completion for the provided prompt and parameters.
         * @throws {RequiredError}
         */
        createCompletion(createCompletionRequest: CreateCompletionRequest, options?: RequestOptions = {}): Promise<CreateCompletionResponse> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).createCompletion(createCompletionRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Creates a new edit for the provided input, instruction, and parameters.
         * @throws {RequiredError}
         */
        createEdit(createEditRequest: CreateEditRequest, options?: RequestOptions = {}): Promise<CreateEditResponse> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).createEdit(createEditRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Creates an embedding vector representing the input text.
         * @throws {RequiredError}
         */
        createEmbedding(createEmbeddingRequest: CreateEmbeddingRequest, options?: RequestOptions = {}): Promise<CreateEmbeddingResponse> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).createEmbedding(createEmbeddingRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. 
         * @throws {RequiredError}
         */
        createFile(file: File, purpose: string, options?: RequestOptions = {}): Promise<OpenAIFile> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).createFile(file, purpose, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
         * @throws {RequiredError}
         */
        createFineTune(createFineTuneRequest: CreateFineTuneRequest, options?: RequestOptions = {}): Promise<FineTune> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).createFineTune(createFineTuneRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Creates an image given a prompt.
         * @throws {RequiredError}
         */
        createImage(createImageRequest: CreateImageRequest, options?: RequestOptions = {}): Promise<ImagesResponse> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).createImage(createImageRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Creates an edited or extended image given an original image and a prompt.
         * @throws {RequiredError}
         */
        createImageEdit(image: File, prompt: string, mask?: File, n?: number, size?: string, responseFormat?: string, user?: string, options?: RequestOptions = {}): Promise<ImagesResponse> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).createImageEdit(image, prompt, mask, n, size, responseFormat, user, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Creates a variation of a given image.
         * @throws {RequiredError}
         */
        createImageVariation(image: File, n?: number, size?: string, responseFormat?: string, user?: string, options?: RequestOptions = {}): Promise<ImagesResponse> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).createImageVariation(image, n, size, responseFormat, user, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Classifies if text violates OpenAI\'s Content Policy
         * @throws {RequiredError}
         */
        createModeration(createModerationRequest: CreateModerationRequest, options?: RequestOptions = {}): Promise<CreateModerationResponse> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).createModeration(createModerationRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Transcribes audio into the input language.
         * @throws {RequiredError}
         */
        createTranscription(file: File, model: CreateTranscriptionRequestModel, prompt?: string, responseFormat?: string, temperature?: number, language?: string, options?: RequestOptions = {}): Promise<CreateTranscriptionResponse> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).createTranscription(file, model, prompt, responseFormat, temperature, language, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Translates audio into English.
         * @throws {RequiredError}
         */
        createTranslation(file: File, model: CreateTranscriptionRequestModel, prompt?: string, responseFormat?: string, temperature?: number, options?: RequestOptions = {}): Promise<CreateTranslationResponse> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).createTranslation(file, model, prompt, responseFormat, temperature, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Delete a file.
         * @throws {RequiredError}
         */
        deleteFile(fileId: string, options?: RequestOptions = {}): Promise<DeleteFileResponse> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).deleteFile(fileId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Delete a fine-tuned model. You must have the Owner role in your organization.
         * @throws {RequiredError}
         */
        deleteModel(model: string, options?: RequestOptions = {}): Promise<DeleteModelResponse> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).deleteModel(model, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Returns the contents of the specified file
         * @throws {RequiredError}
         */
        downloadFile(fileId: string, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).downloadFile(fileId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Returns a list of files that belong to the user\'s organization.
         * @throws {RequiredError}
         */
        listFiles(options?: RequestOptions = {}): Promise<ListFilesResponse> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).listFiles(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Get fine-grained status updates for a fine-tune job. 
         * @throws {RequiredError}
         */
        listFineTuneEvents(fineTuneId: string, stream?: boolean, options?: RequestOptions = {}): Promise<ListFineTuneEventsResponse> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).listFineTuneEvents(fineTuneId, stream, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary List your organization\'s fine-tuning jobs 
         * @throws {RequiredError}
         */
        listFineTunes(options?: RequestOptions = {}): Promise<ListFineTunesResponse> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).listFineTunes(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.
         * @throws {RequiredError}
         */
        listModels(options?: RequestOptions = {}): Promise<ListModelsResponse> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).listModels(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Returns information about a specific file.
         * @throws {RequiredError}
         */
        retrieveFile(fileId: string, options?: RequestOptions = {}): Promise<OpenAIFile> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).retrieveFile(fileId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
         * @throws {RequiredError}
         */
        retrieveFineTune(fineTuneId: string, options?: RequestOptions = {}): Promise<FineTune> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).retrieveFineTune(fineTuneId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
         * @throws {RequiredError}
         */
        retrieveModel(model: string, options?: RequestOptions = {}): Promise<Model> {
            const localVarFetchArgs = OpenAIApiFetchParamCreator(configuration).retrieveModel(model, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


export type ApiTypes = { 
    OpenAIApi: OpenAIApiType,
 }
