/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssistantFileObject from '../model/AssistantFileObject';
import AssistantObject from '../model/AssistantObject';
import CreateAssistantFileRequest from '../model/CreateAssistantFileRequest';
import CreateAssistantRequest from '../model/CreateAssistantRequest';
import CreateMessageRequest from '../model/CreateMessageRequest';
import CreateRunRequest from '../model/CreateRunRequest';
import CreateThreadAndRunRequest from '../model/CreateThreadAndRunRequest';
import CreateThreadRequest from '../model/CreateThreadRequest';
import DeleteAssistantFileResponse from '../model/DeleteAssistantFileResponse';
import DeleteAssistantResponse from '../model/DeleteAssistantResponse';
import DeleteThreadResponse from '../model/DeleteThreadResponse';
import ListAssistantFilesResponse from '../model/ListAssistantFilesResponse';
import ListAssistantsResponse from '../model/ListAssistantsResponse';
import ListMessageFilesResponse from '../model/ListMessageFilesResponse';
import ListMessagesResponse from '../model/ListMessagesResponse';
import ListRunStepsResponse from '../model/ListRunStepsResponse';
import ListRunsResponse from '../model/ListRunsResponse';
import MessageFileObject from '../model/MessageFileObject';
import MessageObject from '../model/MessageObject';
import ModifyAssistantRequest from '../model/ModifyAssistantRequest';
import ModifyMessageRequest from '../model/ModifyMessageRequest';
import ModifyRunRequest from '../model/ModifyRunRequest';
import ModifyThreadRequest from '../model/ModifyThreadRequest';
import RunObject from '../model/RunObject';
import RunStepObject from '../model/RunStepObject';
import SubmitToolOutputsRunRequest from '../model/SubmitToolOutputsRunRequest';
import ThreadObject from '../model/ThreadObject';

/**
* Assistants service.
* @module api/AssistantsApi
* @version 1.1.1-pre.0
*/
export default class AssistantsApi {

    /**
    * Constructs a new AssistantsApi. 
    * @alias module:api/AssistantsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelRun operation.
     * @callback module:api/AssistantsApi~cancelRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RunObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a run that is `in_progress`.
     * @param {String} threadId The ID of the thread to which this run belongs.
     * @param {String} runId The ID of the run to cancel.
     * @param {module:api/AssistantsApi~cancelRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RunObject}
     */
    cancelRun(threadId, runId, callback) {
      let postBody = null;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling cancelRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling cancelRun");
      }

      let pathParams = {
        'thread_id': threadId,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RunObject;
      return this.apiClient.callApi(
        '/threads/{thread_id}/runs/{run_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAssistant operation.
     * @callback module:api/AssistantsApi~createAssistantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssistantObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an assistant with a model and instructions.
     * @param {module:model/CreateAssistantRequest} createAssistantRequest 
     * @param {module:api/AssistantsApi~createAssistantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssistantObject}
     */
    createAssistant(createAssistantRequest, callback) {
      let postBody = createAssistantRequest;
      // verify the required parameter 'createAssistantRequest' is set
      if (createAssistantRequest === undefined || createAssistantRequest === null) {
        throw new Error("Missing the required parameter 'createAssistantRequest' when calling createAssistant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssistantObject;
      return this.apiClient.callApi(
        '/assistants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAssistantFile operation.
     * @callback module:api/AssistantsApi~createAssistantFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssistantFileObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
     * @param {String} assistantId The ID of the assistant for which to create a File. 
     * @param {module:model/CreateAssistantFileRequest} createAssistantFileRequest 
     * @param {module:api/AssistantsApi~createAssistantFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssistantFileObject}
     */
    createAssistantFile(assistantId, createAssistantFileRequest, callback) {
      let postBody = createAssistantFileRequest;
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling createAssistantFile");
      }
      // verify the required parameter 'createAssistantFileRequest' is set
      if (createAssistantFileRequest === undefined || createAssistantFileRequest === null) {
        throw new Error("Missing the required parameter 'createAssistantFileRequest' when calling createAssistantFile");
      }

      let pathParams = {
        'assistant_id': assistantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssistantFileObject;
      return this.apiClient.callApi(
        '/assistants/{assistant_id}/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMessage operation.
     * @callback module:api/AssistantsApi~createMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a message.
     * @param {String} threadId The ID of the [thread](/docs/api-reference/threads) to create a message for.
     * @param {module:model/CreateMessageRequest} createMessageRequest 
     * @param {module:api/AssistantsApi~createMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageObject}
     */
    createMessage(threadId, createMessageRequest, callback) {
      let postBody = createMessageRequest;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling createMessage");
      }
      // verify the required parameter 'createMessageRequest' is set
      if (createMessageRequest === undefined || createMessageRequest === null) {
        throw new Error("Missing the required parameter 'createMessageRequest' when calling createMessage");
      }

      let pathParams = {
        'thread_id': threadId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MessageObject;
      return this.apiClient.callApi(
        '/threads/{thread_id}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRun operation.
     * @callback module:api/AssistantsApi~createRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RunObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a run.
     * @param {String} threadId The ID of the thread to run.
     * @param {module:model/CreateRunRequest} createRunRequest 
     * @param {module:api/AssistantsApi~createRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RunObject}
     */
    createRun(threadId, createRunRequest, callback) {
      let postBody = createRunRequest;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling createRun");
      }
      // verify the required parameter 'createRunRequest' is set
      if (createRunRequest === undefined || createRunRequest === null) {
        throw new Error("Missing the required parameter 'createRunRequest' when calling createRun");
      }

      let pathParams = {
        'thread_id': threadId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RunObject;
      return this.apiClient.callApi(
        '/threads/{thread_id}/runs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createThread operation.
     * @callback module:api/AssistantsApi~createThreadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThreadObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a thread.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateThreadRequest} [createThreadRequest] 
     * @param {module:api/AssistantsApi~createThreadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThreadObject}
     */
    createThread(opts, callback) {
      opts = opts || {};
      let postBody = opts['createThreadRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThreadObject;
      return this.apiClient.callApi(
        '/threads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createThreadAndRun operation.
     * @callback module:api/AssistantsApi~createThreadAndRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RunObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a thread and run it in one request.
     * @param {module:model/CreateThreadAndRunRequest} createThreadAndRunRequest 
     * @param {module:api/AssistantsApi~createThreadAndRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RunObject}
     */
    createThreadAndRun(createThreadAndRunRequest, callback) {
      let postBody = createThreadAndRunRequest;
      // verify the required parameter 'createThreadAndRunRequest' is set
      if (createThreadAndRunRequest === undefined || createThreadAndRunRequest === null) {
        throw new Error("Missing the required parameter 'createThreadAndRunRequest' when calling createThreadAndRun");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RunObject;
      return this.apiClient.callApi(
        '/threads/runs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssistant operation.
     * @callback module:api/AssistantsApi~deleteAssistantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAssistantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an assistant.
     * @param {String} assistantId The ID of the assistant to delete.
     * @param {module:api/AssistantsApi~deleteAssistantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAssistantResponse}
     */
    deleteAssistant(assistantId, callback) {
      let postBody = null;
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling deleteAssistant");
      }

      let pathParams = {
        'assistant_id': assistantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteAssistantResponse;
      return this.apiClient.callApi(
        '/assistants/{assistant_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssistantFile operation.
     * @callback module:api/AssistantsApi~deleteAssistantFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAssistantFileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an assistant file.
     * @param {String} assistantId The ID of the assistant that the file belongs to.
     * @param {String} fileId The ID of the file to delete.
     * @param {module:api/AssistantsApi~deleteAssistantFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAssistantFileResponse}
     */
    deleteAssistantFile(assistantId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling deleteAssistantFile");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteAssistantFile");
      }

      let pathParams = {
        'assistant_id': assistantId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteAssistantFileResponse;
      return this.apiClient.callApi(
        '/assistants/{assistant_id}/files/{file_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteThread operation.
     * @callback module:api/AssistantsApi~deleteThreadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteThreadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a thread.
     * @param {String} threadId The ID of the thread to delete.
     * @param {module:api/AssistantsApi~deleteThreadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteThreadResponse}
     */
    deleteThread(threadId, callback) {
      let postBody = null;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling deleteThread");
      }

      let pathParams = {
        'thread_id': threadId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteThreadResponse;
      return this.apiClient.callApi(
        '/threads/{thread_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssistant operation.
     * @callback module:api/AssistantsApi~getAssistantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssistantObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an assistant.
     * @param {String} assistantId The ID of the assistant to retrieve.
     * @param {module:api/AssistantsApi~getAssistantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssistantObject}
     */
    getAssistant(assistantId, callback) {
      let postBody = null;
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling getAssistant");
      }

      let pathParams = {
        'assistant_id': assistantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssistantObject;
      return this.apiClient.callApi(
        '/assistants/{assistant_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssistantFile operation.
     * @callback module:api/AssistantsApi~getAssistantFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssistantFileObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an AssistantFile.
     * @param {String} assistantId The ID of the assistant who the file belongs to.
     * @param {String} fileId The ID of the file we're getting.
     * @param {module:api/AssistantsApi~getAssistantFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssistantFileObject}
     */
    getAssistantFile(assistantId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling getAssistantFile");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getAssistantFile");
      }

      let pathParams = {
        'assistant_id': assistantId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssistantFileObject;
      return this.apiClient.callApi(
        '/assistants/{assistant_id}/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessage operation.
     * @callback module:api/AssistantsApi~getMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a message.
     * @param {String} threadId The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
     * @param {String} messageId The ID of the message to retrieve.
     * @param {module:api/AssistantsApi~getMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageObject}
     */
    getMessage(threadId, messageId, callback) {
      let postBody = null;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling getMessage");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling getMessage");
      }

      let pathParams = {
        'thread_id': threadId,
        'message_id': messageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessageObject;
      return this.apiClient.callApi(
        '/threads/{thread_id}/messages/{message_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessageFile operation.
     * @callback module:api/AssistantsApi~getMessageFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageFileObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a message file.
     * @param {String} threadId The ID of the thread to which the message and File belong.
     * @param {String} messageId The ID of the message the file belongs to.
     * @param {String} fileId The ID of the file being retrieved.
     * @param {module:api/AssistantsApi~getMessageFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageFileObject}
     */
    getMessageFile(threadId, messageId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling getMessageFile");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling getMessageFile");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getMessageFile");
      }

      let pathParams = {
        'thread_id': threadId,
        'message_id': messageId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessageFileObject;
      return this.apiClient.callApi(
        '/threads/{thread_id}/messages/{message_id}/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRun operation.
     * @callback module:api/AssistantsApi~getRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RunObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a run.
     * @param {String} threadId The ID of the [thread](/docs/api-reference/threads) that was run.
     * @param {String} runId The ID of the run to retrieve.
     * @param {module:api/AssistantsApi~getRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RunObject}
     */
    getRun(threadId, runId, callback) {
      let postBody = null;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling getRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling getRun");
      }

      let pathParams = {
        'thread_id': threadId,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RunObject;
      return this.apiClient.callApi(
        '/threads/{thread_id}/runs/{run_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRunStep operation.
     * @callback module:api/AssistantsApi~getRunStepCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RunStepObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a run step.
     * @param {String} threadId The ID of the thread to which the run and run step belongs.
     * @param {String} runId The ID of the run to which the run step belongs.
     * @param {String} stepId The ID of the run step to retrieve.
     * @param {module:api/AssistantsApi~getRunStepCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RunStepObject}
     */
    getRunStep(threadId, runId, stepId, callback) {
      let postBody = null;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling getRunStep");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling getRunStep");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling getRunStep");
      }

      let pathParams = {
        'thread_id': threadId,
        'run_id': runId,
        'step_id': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RunStepObject;
      return this.apiClient.callApi(
        '/threads/{thread_id}/runs/{run_id}/steps/{step_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getThread operation.
     * @callback module:api/AssistantsApi~getThreadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThreadObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a thread.
     * @param {String} threadId The ID of the thread to retrieve.
     * @param {module:api/AssistantsApi~getThreadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThreadObject}
     */
    getThread(threadId, callback) {
      let postBody = null;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling getThread");
      }

      let pathParams = {
        'thread_id': threadId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThreadObject;
      return this.apiClient.callApi(
        '/threads/{thread_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssistantFiles operation.
     * @callback module:api/AssistantsApi~listAssistantFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssistantFilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of assistant files.
     * @param {String} assistantId The ID of the assistant the file belongs to.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param {module:model/String} [order = 'desc')] Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
     * @param {String} [after] A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
     * @param {String} [before] A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
     * @param {module:api/AssistantsApi~listAssistantFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssistantFilesResponse}
     */
    listAssistantFiles(assistantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling listAssistantFiles");
      }

      let pathParams = {
        'assistant_id': assistantId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'after': opts['after'],
        'before': opts['before']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAssistantFilesResponse;
      return this.apiClient.callApi(
        '/assistants/{assistant_id}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssistants operation.
     * @callback module:api/AssistantsApi~listAssistantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssistantsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of assistants.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param {module:model/String} [order = 'desc')] Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
     * @param {String} [after] A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
     * @param {String} [before] A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
     * @param {module:api/AssistantsApi~listAssistantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssistantsResponse}
     */
    listAssistants(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'after': opts['after'],
        'before': opts['before']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAssistantsResponse;
      return this.apiClient.callApi(
        '/assistants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMessageFiles operation.
     * @callback module:api/AssistantsApi~listMessageFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMessageFilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of message files.
     * @param {String} threadId The ID of the thread that the message and files belong to.
     * @param {String} messageId The ID of the message that the files belongs to.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param {module:model/String} [order = 'desc')] Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
     * @param {String} [after] A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
     * @param {String} [before] A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
     * @param {module:api/AssistantsApi~listMessageFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMessageFilesResponse}
     */
    listMessageFiles(threadId, messageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling listMessageFiles");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling listMessageFiles");
      }

      let pathParams = {
        'thread_id': threadId,
        'message_id': messageId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'after': opts['after'],
        'before': opts['before']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMessageFilesResponse;
      return this.apiClient.callApi(
        '/threads/{thread_id}/messages/{message_id}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMessages operation.
     * @callback module:api/AssistantsApi~listMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of messages for a given thread.
     * @param {String} threadId The ID of the [thread](/docs/api-reference/threads) the messages belong to.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param {module:model/String} [order = 'desc')] Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
     * @param {String} [after] A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
     * @param {String} [before] A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
     * @param {String} [runId] Filter messages by the run ID that generated them. 
     * @param {module:api/AssistantsApi~listMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMessagesResponse}
     */
    listMessages(threadId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling listMessages");
      }

      let pathParams = {
        'thread_id': threadId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'after': opts['after'],
        'before': opts['before'],
        'run_id': opts['runId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMessagesResponse;
      return this.apiClient.callApi(
        '/threads/{thread_id}/messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRunSteps operation.
     * @callback module:api/AssistantsApi~listRunStepsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRunStepsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of run steps belonging to a run.
     * @param {String} threadId The ID of the thread the run and run steps belong to.
     * @param {String} runId The ID of the run the run steps belong to.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param {module:model/String} [order = 'desc')] Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
     * @param {String} [after] A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
     * @param {String} [before] A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
     * @param {module:api/AssistantsApi~listRunStepsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRunStepsResponse}
     */
    listRunSteps(threadId, runId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling listRunSteps");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling listRunSteps");
      }

      let pathParams = {
        'thread_id': threadId,
        'run_id': runId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'after': opts['after'],
        'before': opts['before']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRunStepsResponse;
      return this.apiClient.callApi(
        '/threads/{thread_id}/runs/{run_id}/steps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRuns operation.
     * @callback module:api/AssistantsApi~listRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRunsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of runs belonging to a thread.
     * @param {String} threadId The ID of the thread the run belongs to.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param {module:model/String} [order = 'desc')] Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
     * @param {String} [after] A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
     * @param {String} [before] A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
     * @param {module:api/AssistantsApi~listRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRunsResponse}
     */
    listRuns(threadId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling listRuns");
      }

      let pathParams = {
        'thread_id': threadId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'after': opts['after'],
        'before': opts['before']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRunsResponse;
      return this.apiClient.callApi(
        '/threads/{thread_id}/runs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyAssistant operation.
     * @callback module:api/AssistantsApi~modifyAssistantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssistantObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies an assistant.
     * @param {String} assistantId The ID of the assistant to modify.
     * @param {module:model/ModifyAssistantRequest} modifyAssistantRequest 
     * @param {module:api/AssistantsApi~modifyAssistantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssistantObject}
     */
    modifyAssistant(assistantId, modifyAssistantRequest, callback) {
      let postBody = modifyAssistantRequest;
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling modifyAssistant");
      }
      // verify the required parameter 'modifyAssistantRequest' is set
      if (modifyAssistantRequest === undefined || modifyAssistantRequest === null) {
        throw new Error("Missing the required parameter 'modifyAssistantRequest' when calling modifyAssistant");
      }

      let pathParams = {
        'assistant_id': assistantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssistantObject;
      return this.apiClient.callApi(
        '/assistants/{assistant_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyMessage operation.
     * @callback module:api/AssistantsApi~modifyMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a message.
     * @param {String} threadId The ID of the thread to which this message belongs.
     * @param {String} messageId The ID of the message to modify.
     * @param {module:model/ModifyMessageRequest} modifyMessageRequest 
     * @param {module:api/AssistantsApi~modifyMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageObject}
     */
    modifyMessage(threadId, messageId, modifyMessageRequest, callback) {
      let postBody = modifyMessageRequest;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling modifyMessage");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling modifyMessage");
      }
      // verify the required parameter 'modifyMessageRequest' is set
      if (modifyMessageRequest === undefined || modifyMessageRequest === null) {
        throw new Error("Missing the required parameter 'modifyMessageRequest' when calling modifyMessage");
      }

      let pathParams = {
        'thread_id': threadId,
        'message_id': messageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MessageObject;
      return this.apiClient.callApi(
        '/threads/{thread_id}/messages/{message_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyRun operation.
     * @callback module:api/AssistantsApi~modifyRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RunObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a run.
     * @param {String} threadId The ID of the [thread](/docs/api-reference/threads) that was run.
     * @param {String} runId The ID of the run to modify.
     * @param {module:model/ModifyRunRequest} modifyRunRequest 
     * @param {module:api/AssistantsApi~modifyRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RunObject}
     */
    modifyRun(threadId, runId, modifyRunRequest, callback) {
      let postBody = modifyRunRequest;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling modifyRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling modifyRun");
      }
      // verify the required parameter 'modifyRunRequest' is set
      if (modifyRunRequest === undefined || modifyRunRequest === null) {
        throw new Error("Missing the required parameter 'modifyRunRequest' when calling modifyRun");
      }

      let pathParams = {
        'thread_id': threadId,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RunObject;
      return this.apiClient.callApi(
        '/threads/{thread_id}/runs/{run_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyThread operation.
     * @callback module:api/AssistantsApi~modifyThreadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThreadObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a thread.
     * @param {String} threadId The ID of the thread to modify. Only the `metadata` can be modified.
     * @param {module:model/ModifyThreadRequest} modifyThreadRequest 
     * @param {module:api/AssistantsApi~modifyThreadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThreadObject}
     */
    modifyThread(threadId, modifyThreadRequest, callback) {
      let postBody = modifyThreadRequest;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling modifyThread");
      }
      // verify the required parameter 'modifyThreadRequest' is set
      if (modifyThreadRequest === undefined || modifyThreadRequest === null) {
        throw new Error("Missing the required parameter 'modifyThreadRequest' when calling modifyThread");
      }

      let pathParams = {
        'thread_id': threadId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThreadObject;
      return this.apiClient.callApi(
        '/threads/{thread_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitToolOuputsToRun operation.
     * @callback module:api/AssistantsApi~submitToolOuputsToRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RunObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request. 
     * @param {String} threadId The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
     * @param {String} runId The ID of the run that requires the tool output submission.
     * @param {module:model/SubmitToolOutputsRunRequest} submitToolOutputsRunRequest 
     * @param {module:api/AssistantsApi~submitToolOuputsToRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RunObject}
     */
    submitToolOuputsToRun(threadId, runId, submitToolOutputsRunRequest, callback) {
      let postBody = submitToolOutputsRunRequest;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling submitToolOuputsToRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling submitToolOuputsToRun");
      }
      // verify the required parameter 'submitToolOutputsRunRequest' is set
      if (submitToolOutputsRunRequest === undefined || submitToolOutputsRunRequest === null) {
        throw new Error("Missing the required parameter 'submitToolOutputsRunRequest' when calling submitToolOuputsToRun");
      }

      let pathParams = {
        'thread_id': threadId,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RunObject;
      return this.apiClient.callApi(
        '/threads/{thread_id}/runs/{run_id}/submit_tool_outputs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
