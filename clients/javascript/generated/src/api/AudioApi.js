/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateSpeechRequest from '../model/CreateSpeechRequest';
import CreateTranscription200Response from '../model/CreateTranscription200Response';
import CreateTranscriptionRequestModel from '../model/CreateTranscriptionRequestModel';
import CreateTranslation200Response from '../model/CreateTranslation200Response';

/**
* Audio service.
* @module api/AudioApi
* @version 1.1.1-pre.0
*/
export default class AudioApi {

    /**
    * Constructs a new AudioApi. 
    * @alias module:api/AudioApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSpeech operation.
     * @callback module:api/AudioApi~createSpeechCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates audio from the input text.
     * @param {module:model/CreateSpeechRequest} createSpeechRequest 
     * @param {module:api/AudioApi~createSpeechCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    createSpeech(createSpeechRequest, callback) {
      let postBody = createSpeechRequest;
      // verify the required parameter 'createSpeechRequest' is set
      if (createSpeechRequest === undefined || createSpeechRequest === null) {
        throw new Error("Missing the required parameter 'createSpeechRequest' when calling createSpeech");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/audio/speech', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTranscription operation.
     * @callback module:api/AudioApi~createTranscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTranscription200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transcribes audio into the input language.
     * @param {File} file The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
     * @param {module:model/CreateTranscriptionRequestModel} model 
     * @param {Object} opts Optional parameters
     * @param {String} [language] The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
     * @param {String} [prompt] An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
     * @param {module:model/String} [responseFormat = 'json')] The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. 
     * @param {Number} [temperature = 0)] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
     * @param {Array.<module:model/String>} [timestampGranularities] The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency. 
     * @param {module:api/AudioApi~createTranscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTranscription200Response}
     */
    createTranscription(file, model, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createTranscription");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling createTranscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'model': model,
        'language': opts['language'],
        'prompt': opts['prompt'],
        'response_format': opts['responseFormat'],
        'temperature': opts['temperature'],
        'timestamp_granularities[]': this.apiClient.buildCollectionParam(opts['timestampGranularities'], 'csv')
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CreateTranscription200Response;
      return this.apiClient.callApi(
        '/audio/transcriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTranslation operation.
     * @callback module:api/AudioApi~createTranslationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTranslation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translates audio into English.
     * @param {File} file The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
     * @param {module:model/CreateTranscriptionRequestModel} model 
     * @param {Object} opts Optional parameters
     * @param {String} [prompt] An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. 
     * @param {String} [responseFormat = 'json')] The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. 
     * @param {Number} [temperature = 0)] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
     * @param {module:api/AudioApi~createTranslationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTranslation200Response}
     */
    createTranslation(file, model, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createTranslation");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling createTranslation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'model': model,
        'prompt': opts['prompt'],
        'response_format': opts['responseFormat'],
        'temperature': opts['temperature']
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CreateTranslation200Response;
      return this.apiClient.callApi(
        '/audio/translations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
