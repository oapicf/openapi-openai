/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteFileResponse from '../model/DeleteFileResponse';
import ListFilesResponse from '../model/ListFilesResponse';
import OpenAIFile from '../model/OpenAIFile';

/**
* Files service.
* @module api/FilesApi
* @version 1.1.1-pre.0
*/
export default class FilesApi {

    /**
    * Constructs a new FilesApi. 
    * @alias module:api/FilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createFile operation.
     * @callback module:api/FilesApi~createFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAIFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. 
     * @param {File} file The File object (not file name) to be uploaded. 
     * @param {module:model/String} purpose The intended purpose of the uploaded file.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tuning) and \\\"assistants\\\" for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning. 
     * @param {module:api/FilesApi~createFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAIFile}
     */
    createFile(file, purpose, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createFile");
      }
      // verify the required parameter 'purpose' is set
      if (purpose === undefined || purpose === null) {
        throw new Error("Missing the required parameter 'purpose' when calling createFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'purpose': purpose
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = OpenAIFile;
      return this.apiClient.callApi(
        '/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFile operation.
     * @callback module:api/FilesApi~deleteFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteFileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file.
     * @param {String} fileId The ID of the file to use for this request.
     * @param {module:api/FilesApi~deleteFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteFileResponse}
     */
    deleteFile(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteFile");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteFileResponse;
      return this.apiClient.callApi(
        '/files/{file_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadFile operation.
     * @callback module:api/FilesApi~downloadFileCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the contents of the specified file.
     * @param {String} fileId The ID of the file to use for this request.
     * @param {module:api/FilesApi~downloadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    downloadFile(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling downloadFile");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/files/{file_id}/content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFiles operation.
     * @callback module:api/FilesApi~listFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of files that belong to the user's organization.
     * @param {Object} opts Optional parameters
     * @param {String} [purpose] Only return files with the given purpose.
     * @param {module:api/FilesApi~listFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFilesResponse}
     */
    listFiles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'purpose': opts['purpose']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFilesResponse;
      return this.apiClient.callApi(
        '/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveFile operation.
     * @callback module:api/FilesApi~retrieveFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAIFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a specific file.
     * @param {String} fileId The ID of the file to use for this request.
     * @param {module:api/FilesApi~retrieveFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAIFile}
     */
    retrieveFile(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling retrieveFile");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAIFile;
      return this.apiClient.callApi(
        '/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
