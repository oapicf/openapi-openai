/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateImageEditRequestModel from '../model/CreateImageEditRequestModel';
import CreateImageRequest from '../model/CreateImageRequest';
import ImagesResponse from '../model/ImagesResponse';

/**
* Images service.
* @module api/ImagesApi
* @version 1.1.1-pre.0
*/
export default class ImagesApi {

    /**
    * Constructs a new ImagesApi. 
    * @alias module:api/ImagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createImage operation.
     * @callback module:api/ImagesApi~createImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an image given a prompt.
     * @param {module:model/CreateImageRequest} createImageRequest 
     * @param {module:api/ImagesApi~createImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagesResponse}
     */
    createImage(createImageRequest, callback) {
      let postBody = createImageRequest;
      // verify the required parameter 'createImageRequest' is set
      if (createImageRequest === undefined || createImageRequest === null) {
        throw new Error("Missing the required parameter 'createImageRequest' when calling createImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImagesResponse;
      return this.apiClient.callApi(
        '/images/generations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageEdit operation.
     * @callback module:api/ImagesApi~createImageEditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an edited or extended image given an original image and a prompt.
     * @param {File} image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
     * @param {String} prompt A text description of the desired image(s). The maximum length is 1000 characters.
     * @param {Object} opts Optional parameters
     * @param {File} [mask] An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
     * @param {module:model/CreateImageEditRequestModel} [model] 
     * @param {Number} [n = 1)] The number of images to generate. Must be between 1 and 10.
     * @param {module:model/String} [size = '1024x1024')] The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
     * @param {module:model/String} [responseFormat = 'url')] The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
     * @param {String} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
     * @param {module:api/ImagesApi~createImageEditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagesResponse}
     */
    createImageEdit(image, prompt, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling createImageEdit");
      }
      // verify the required parameter 'prompt' is set
      if (prompt === undefined || prompt === null) {
        throw new Error("Missing the required parameter 'prompt' when calling createImageEdit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': image,
        'prompt': prompt,
        'mask': opts['mask'],
        'model': opts['model'],
        'n': opts['n'],
        'size': opts['size'],
        'response_format': opts['responseFormat'],
        'user': opts['user']
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ImagesResponse;
      return this.apiClient.callApi(
        '/images/edits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageVariation operation.
     * @callback module:api/ImagesApi~createImageVariationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a variation of a given image.
     * @param {File} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateImageEditRequestModel} [model] 
     * @param {Number} [n = 1)] The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
     * @param {module:model/String} [responseFormat = 'url')] The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
     * @param {module:model/String} [size = '1024x1024')] The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
     * @param {String} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
     * @param {module:api/ImagesApi~createImageVariationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagesResponse}
     */
    createImageVariation(image, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling createImageVariation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': image,
        'model': opts['model'],
        'n': opts['n'],
        'response_format': opts['responseFormat'],
        'size': opts['size'],
        'user': opts['user']
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ImagesResponse;
      return this.apiClient.callApi(
        '/images/variations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
