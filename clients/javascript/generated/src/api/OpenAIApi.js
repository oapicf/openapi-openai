/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateChatCompletionRequest from '../model/CreateChatCompletionRequest';
import CreateChatCompletionResponse from '../model/CreateChatCompletionResponse';
import CreateCompletionRequest from '../model/CreateCompletionRequest';
import CreateCompletionResponse from '../model/CreateCompletionResponse';
import CreateEditRequest from '../model/CreateEditRequest';
import CreateEditResponse from '../model/CreateEditResponse';
import CreateEmbeddingRequest from '../model/CreateEmbeddingRequest';
import CreateEmbeddingResponse from '../model/CreateEmbeddingResponse';
import CreateFineTuneRequest from '../model/CreateFineTuneRequest';
import CreateImageRequest from '../model/CreateImageRequest';
import CreateModerationRequest from '../model/CreateModerationRequest';
import CreateModerationResponse from '../model/CreateModerationResponse';
import CreateTranscriptionRequestModel from '../model/CreateTranscriptionRequestModel';
import CreateTranscriptionResponse from '../model/CreateTranscriptionResponse';
import CreateTranslationResponse from '../model/CreateTranslationResponse';
import DeleteFileResponse from '../model/DeleteFileResponse';
import DeleteModelResponse from '../model/DeleteModelResponse';
import FineTune from '../model/FineTune';
import ImagesResponse from '../model/ImagesResponse';
import ListFilesResponse from '../model/ListFilesResponse';
import ListFineTuneEventsResponse from '../model/ListFineTuneEventsResponse';
import ListFineTunesResponse from '../model/ListFineTunesResponse';
import ListModelsResponse from '../model/ListModelsResponse';
import Model from '../model/Model';
import OpenAIFile from '../model/OpenAIFile';

/**
* OpenAI service.
* @module api/OpenAIApi
* @version 0.9.0-pre.0
*/
export default class OpenAIApi {

    /**
    * Constructs a new OpenAIApi. 
    * @alias module:api/OpenAIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelFineTune operation.
     * @callback module:api/OpenAIApi~cancelFineTuneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FineTune} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Immediately cancel a fine-tune job. 
     * @param {String} fineTuneId The ID of the fine-tune job to cancel 
     * @param {module:api/OpenAIApi~cancelFineTuneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FineTune}
     */
    cancelFineTune(fineTuneId, callback) {
      let postBody = null;
      // verify the required parameter 'fineTuneId' is set
      if (fineTuneId === undefined || fineTuneId === null) {
        throw new Error("Missing the required parameter 'fineTuneId' when calling cancelFineTune");
      }

      let pathParams = {
        'fine_tune_id': fineTuneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FineTune;
      return this.apiClient.callApi(
        '/fine-tunes/{fine_tune_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createChatCompletion operation.
     * @callback module:api/OpenAIApi~createChatCompletionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateChatCompletionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a model response for the given chat conversation.
     * @param {module:model/CreateChatCompletionRequest} createChatCompletionRequest 
     * @param {module:api/OpenAIApi~createChatCompletionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateChatCompletionResponse}
     */
    createChatCompletion(createChatCompletionRequest, callback) {
      let postBody = createChatCompletionRequest;
      // verify the required parameter 'createChatCompletionRequest' is set
      if (createChatCompletionRequest === undefined || createChatCompletionRequest === null) {
        throw new Error("Missing the required parameter 'createChatCompletionRequest' when calling createChatCompletion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateChatCompletionResponse;
      return this.apiClient.callApi(
        '/chat/completions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCompletion operation.
     * @callback module:api/OpenAIApi~createCompletionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCompletionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a completion for the provided prompt and parameters.
     * @param {module:model/CreateCompletionRequest} createCompletionRequest 
     * @param {module:api/OpenAIApi~createCompletionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCompletionResponse}
     */
    createCompletion(createCompletionRequest, callback) {
      let postBody = createCompletionRequest;
      // verify the required parameter 'createCompletionRequest' is set
      if (createCompletionRequest === undefined || createCompletionRequest === null) {
        throw new Error("Missing the required parameter 'createCompletionRequest' when calling createCompletion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCompletionResponse;
      return this.apiClient.callApi(
        '/completions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEdit operation.
     * @callback module:api/OpenAIApi~createEditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEditResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new edit for the provided input, instruction, and parameters.
     * @param {module:model/CreateEditRequest} createEditRequest 
     * @param {module:api/OpenAIApi~createEditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEditResponse}
     */
    createEdit(createEditRequest, callback) {
      let postBody = createEditRequest;
      // verify the required parameter 'createEditRequest' is set
      if (createEditRequest === undefined || createEditRequest === null) {
        throw new Error("Missing the required parameter 'createEditRequest' when calling createEdit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEditResponse;
      return this.apiClient.callApi(
        '/edits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEmbedding operation.
     * @callback module:api/OpenAIApi~createEmbeddingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEmbeddingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an embedding vector representing the input text.
     * @param {module:model/CreateEmbeddingRequest} createEmbeddingRequest 
     * @param {module:api/OpenAIApi~createEmbeddingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEmbeddingResponse}
     */
    createEmbedding(createEmbeddingRequest, callback) {
      let postBody = createEmbeddingRequest;
      // verify the required parameter 'createEmbeddingRequest' is set
      if (createEmbeddingRequest === undefined || createEmbeddingRequest === null) {
        throw new Error("Missing the required parameter 'createEmbeddingRequest' when calling createEmbedding");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEmbeddingResponse;
      return this.apiClient.callApi(
        '/embeddings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFile operation.
     * @callback module:api/OpenAIApi~createFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAIFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. 
     * @param {File} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the `purpose` is set to \\\"fine-tune\\\", each line is a JSON record with \\\"prompt\\\" and \\\"completion\\\" fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data). 
     * @param {String} purpose The intended purpose of the uploaded documents.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. 
     * @param {module:api/OpenAIApi~createFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAIFile}
     */
    createFile(file, purpose, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createFile");
      }
      // verify the required parameter 'purpose' is set
      if (purpose === undefined || purpose === null) {
        throw new Error("Missing the required parameter 'purpose' when calling createFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'purpose': purpose
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = OpenAIFile;
      return this.apiClient.callApi(
        '/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFineTune operation.
     * @callback module:api/OpenAIApi~createFineTuneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FineTune} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
     * @param {module:model/CreateFineTuneRequest} createFineTuneRequest 
     * @param {module:api/OpenAIApi~createFineTuneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FineTune}
     */
    createFineTune(createFineTuneRequest, callback) {
      let postBody = createFineTuneRequest;
      // verify the required parameter 'createFineTuneRequest' is set
      if (createFineTuneRequest === undefined || createFineTuneRequest === null) {
        throw new Error("Missing the required parameter 'createFineTuneRequest' when calling createFineTune");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FineTune;
      return this.apiClient.callApi(
        '/fine-tunes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createImage operation.
     * @callback module:api/OpenAIApi~createImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an image given a prompt.
     * @param {module:model/CreateImageRequest} createImageRequest 
     * @param {module:api/OpenAIApi~createImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagesResponse}
     */
    createImage(createImageRequest, callback) {
      let postBody = createImageRequest;
      // verify the required parameter 'createImageRequest' is set
      if (createImageRequest === undefined || createImageRequest === null) {
        throw new Error("Missing the required parameter 'createImageRequest' when calling createImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImagesResponse;
      return this.apiClient.callApi(
        '/images/generations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageEdit operation.
     * @callback module:api/OpenAIApi~createImageEditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an edited or extended image given an original image and a prompt.
     * @param {File} image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
     * @param {String} prompt A text description of the desired image(s). The maximum length is 1000 characters.
     * @param {Object} opts Optional parameters
     * @param {File} [mask] An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
     * @param {Number} [n = 1)] The number of images to generate. Must be between 1 and 10.
     * @param {module:model/String} [size = '1024x1024')] The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
     * @param {module:model/String} [responseFormat = 'url')] The format in which the generated images are returned. Must be one of `url` or `b64_json`.
     * @param {String} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
     * @param {module:api/OpenAIApi~createImageEditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagesResponse}
     */
    createImageEdit(image, prompt, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling createImageEdit");
      }
      // verify the required parameter 'prompt' is set
      if (prompt === undefined || prompt === null) {
        throw new Error("Missing the required parameter 'prompt' when calling createImageEdit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': image,
        'mask': opts['mask'],
        'prompt': prompt,
        'n': opts['n'],
        'size': opts['size'],
        'response_format': opts['responseFormat'],
        'user': opts['user']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ImagesResponse;
      return this.apiClient.callApi(
        '/images/edits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageVariation operation.
     * @callback module:api/OpenAIApi~createImageVariationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a variation of a given image.
     * @param {File} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
     * @param {Object} opts Optional parameters
     * @param {Number} [n = 1)] The number of images to generate. Must be between 1 and 10.
     * @param {module:model/String} [size = '1024x1024')] The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
     * @param {module:model/String} [responseFormat = 'url')] The format in which the generated images are returned. Must be one of `url` or `b64_json`.
     * @param {String} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
     * @param {module:api/OpenAIApi~createImageVariationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagesResponse}
     */
    createImageVariation(image, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling createImageVariation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': image,
        'n': opts['n'],
        'size': opts['size'],
        'response_format': opts['responseFormat'],
        'user': opts['user']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ImagesResponse;
      return this.apiClient.callApi(
        '/images/variations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createModeration operation.
     * @callback module:api/OpenAIApi~createModerationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModerationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Classifies if text violates OpenAI's Content Policy
     * @param {module:model/CreateModerationRequest} createModerationRequest 
     * @param {module:api/OpenAIApi~createModerationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModerationResponse}
     */
    createModeration(createModerationRequest, callback) {
      let postBody = createModerationRequest;
      // verify the required parameter 'createModerationRequest' is set
      if (createModerationRequest === undefined || createModerationRequest === null) {
        throw new Error("Missing the required parameter 'createModerationRequest' when calling createModeration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateModerationResponse;
      return this.apiClient.callApi(
        '/moderations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTranscription operation.
     * @callback module:api/OpenAIApi~createTranscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTranscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transcribes audio into the input language.
     * @param {File} file The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
     * @param {module:model/CreateTranscriptionRequestModel} model 
     * @param {Object} opts Optional parameters
     * @param {String} [prompt] An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
     * @param {String} [responseFormat = 'json')] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
     * @param {Number} [temperature = 0)] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
     * @param {String} [language] The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
     * @param {module:api/OpenAIApi~createTranscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTranscriptionResponse}
     */
    createTranscription(file, model, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createTranscription");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling createTranscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'model': model,
        'prompt': opts['prompt'],
        'response_format': opts['responseFormat'],
        'temperature': opts['temperature'],
        'language': opts['language']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CreateTranscriptionResponse;
      return this.apiClient.callApi(
        '/audio/transcriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTranslation operation.
     * @callback module:api/OpenAIApi~createTranslationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTranslationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translates audio into English.
     * @param {File} file The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
     * @param {module:model/CreateTranscriptionRequestModel} model 
     * @param {Object} opts Optional parameters
     * @param {String} [prompt] An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. 
     * @param {String} [responseFormat = 'json')] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
     * @param {Number} [temperature = 0)] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
     * @param {module:api/OpenAIApi~createTranslationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTranslationResponse}
     */
    createTranslation(file, model, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createTranslation");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling createTranslation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'model': model,
        'prompt': opts['prompt'],
        'response_format': opts['responseFormat'],
        'temperature': opts['temperature']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CreateTranslationResponse;
      return this.apiClient.callApi(
        '/audio/translations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFile operation.
     * @callback module:api/OpenAIApi~deleteFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteFileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file.
     * @param {String} fileId The ID of the file to use for this request
     * @param {module:api/OpenAIApi~deleteFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteFileResponse}
     */
    deleteFile(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteFile");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteFileResponse;
      return this.apiClient.callApi(
        '/files/{file_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModel operation.
     * @callback module:api/OpenAIApi~deleteModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a fine-tuned model. You must have the Owner role in your organization.
     * @param {String} model The model to delete
     * @param {module:api/OpenAIApi~deleteModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteModelResponse}
     */
    deleteModel(model, callback) {
      let postBody = null;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling deleteModel");
      }

      let pathParams = {
        'model': model
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteModelResponse;
      return this.apiClient.callApi(
        '/models/{model}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadFile operation.
     * @callback module:api/OpenAIApi~downloadFileCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the contents of the specified file
     * @param {String} fileId The ID of the file to use for this request
     * @param {module:api/OpenAIApi~downloadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    downloadFile(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling downloadFile");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/files/{file_id}/content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFiles operation.
     * @callback module:api/OpenAIApi~listFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of files that belong to the user's organization.
     * @param {module:api/OpenAIApi~listFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFilesResponse}
     */
    listFiles(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFilesResponse;
      return this.apiClient.callApi(
        '/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFineTuneEvents operation.
     * @callback module:api/OpenAIApi~listFineTuneEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFineTuneEventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get fine-grained status updates for a fine-tune job. 
     * @param {String} fineTuneId The ID of the fine-tune job to get events for. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [stream = false)] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a `data: [DONE]` message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned. 
     * @param {module:api/OpenAIApi~listFineTuneEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFineTuneEventsResponse}
     */
    listFineTuneEvents(fineTuneId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fineTuneId' is set
      if (fineTuneId === undefined || fineTuneId === null) {
        throw new Error("Missing the required parameter 'fineTuneId' when calling listFineTuneEvents");
      }

      let pathParams = {
        'fine_tune_id': fineTuneId
      };
      let queryParams = {
        'stream': opts['stream']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFineTuneEventsResponse;
      return this.apiClient.callApi(
        '/fine-tunes/{fine_tune_id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFineTunes operation.
     * @callback module:api/OpenAIApi~listFineTunesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFineTunesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List your organization's fine-tuning jobs 
     * @param {module:api/OpenAIApi~listFineTunesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFineTunesResponse}
     */
    listFineTunes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFineTunesResponse;
      return this.apiClient.callApi(
        '/fine-tunes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listModels operation.
     * @callback module:api/OpenAIApi~listModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListModelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the currently available models, and provides basic information about each one such as the owner and availability.
     * @param {module:api/OpenAIApi~listModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListModelsResponse}
     */
    listModels(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListModelsResponse;
      return this.apiClient.callApi(
        '/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveFile operation.
     * @callback module:api/OpenAIApi~retrieveFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAIFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a specific file.
     * @param {String} fileId The ID of the file to use for this request
     * @param {module:api/OpenAIApi~retrieveFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAIFile}
     */
    retrieveFile(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling retrieveFile");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAIFile;
      return this.apiClient.callApi(
        '/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveFineTune operation.
     * @callback module:api/OpenAIApi~retrieveFineTuneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FineTune} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
     * @param {String} fineTuneId The ID of the fine-tune job 
     * @param {module:api/OpenAIApi~retrieveFineTuneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FineTune}
     */
    retrieveFineTune(fineTuneId, callback) {
      let postBody = null;
      // verify the required parameter 'fineTuneId' is set
      if (fineTuneId === undefined || fineTuneId === null) {
        throw new Error("Missing the required parameter 'fineTuneId' when calling retrieveFineTune");
      }

      let pathParams = {
        'fine_tune_id': fineTuneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FineTune;
      return this.apiClient.callApi(
        '/fine-tunes/{fine_tune_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveModel operation.
     * @callback module:api/OpenAIApi~retrieveModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
     * @param {String} model The ID of the model to use for this request
     * @param {module:api/OpenAIApi~retrieveModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    retrieveModel(model, callback) {
      let postBody = null;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling retrieveModel");
      }

      let pathParams = {
        'model': model
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/models/{model}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
