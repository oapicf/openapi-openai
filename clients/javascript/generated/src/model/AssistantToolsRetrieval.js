/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssistantToolsRetrieval model module.
 * @module model/AssistantToolsRetrieval
 * @version 1.1.1-pre.0
 */
class AssistantToolsRetrieval {
    /**
     * Constructs a new <code>AssistantToolsRetrieval</code>.
     * @alias module:model/AssistantToolsRetrieval
     * @param type {module:model/AssistantToolsRetrieval.TypeEnum} The type of tool being defined: `retrieval`
     */
    constructor(type) { 
        
        AssistantToolsRetrieval.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>AssistantToolsRetrieval</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssistantToolsRetrieval} obj Optional instance to populate.
     * @return {module:model/AssistantToolsRetrieval} The populated <code>AssistantToolsRetrieval</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssistantToolsRetrieval();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssistantToolsRetrieval</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssistantToolsRetrieval</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AssistantToolsRetrieval.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

AssistantToolsRetrieval.RequiredProperties = ["type"];

/**
 * The type of tool being defined: `retrieval`
 * @member {module:model/AssistantToolsRetrieval.TypeEnum} type
 */
AssistantToolsRetrieval.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AssistantToolsRetrieval['TypeEnum'] = {

    /**
     * value: "retrieval"
     * @const
     */
    "retrieval": "retrieval"
};



export default AssistantToolsRetrieval;

