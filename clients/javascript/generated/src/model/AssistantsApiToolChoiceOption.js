/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssistantsApiNamedToolChoice from './AssistantsApiNamedToolChoice';
import ChatCompletionNamedToolChoiceFunction from './ChatCompletionNamedToolChoiceFunction';

/**
 * The AssistantsApiToolChoiceOption model module.
 * @module model/AssistantsApiToolChoiceOption
 * @version 1.0.1-pre.0
 */
class AssistantsApiToolChoiceOption {
    /**
     * Constructs a new <code>AssistantsApiToolChoiceOption</code>.
     * Controls which (if any) tool is called by the model. &#x60;none&#x60; means the model will not call any tools and instead generates a message. &#x60;auto&#x60; is the default value and means the model can pick between generating a message or calling a tool. Specifying a particular tool like &#x60;{\&quot;type\&quot;: \&quot;TOOL_TYPE\&quot;}&#x60; or &#x60;{\&quot;type\&quot;: \&quot;function\&quot;, \&quot;function\&quot;: {\&quot;name\&quot;: \&quot;my_function\&quot;}}&#x60; forces the model to call that tool. 
     * @alias module:model/AssistantsApiToolChoiceOption
     * @param {(module:model/AssistantsApiNamedToolChoice|module:model/String)} instance The actual instance to initialize AssistantsApiToolChoiceOption.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        // `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function. 
        try {
            // validate string
            if (!(typeof instance === 'string')) {
                throw new Error("Invalid value. Must be string. Input: " + JSON.stringify(instance));
            }
            this.actualInstance = instance;
            match++;
        } catch(err) {
            // json data failed to deserialize into String
            errorMessages.push("Failed to construct String: " + err)
        }

        try {
            if (typeof instance === "AssistantsApiNamedToolChoice") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AssistantsApiNamedToolChoice.validateJSON(instance); // throw an exception if no match
                // create AssistantsApiNamedToolChoice from JS object
                this.actualInstance = AssistantsApiNamedToolChoice.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AssistantsApiNamedToolChoice
            errorMessages.push("Failed to construct AssistantsApiNamedToolChoice: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `AssistantsApiToolChoiceOption` with oneOf schemas AssistantsApiNamedToolChoice, String. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `AssistantsApiToolChoiceOption` with oneOf schemas AssistantsApiNamedToolChoice, String. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>AssistantsApiToolChoiceOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssistantsApiToolChoiceOption} obj Optional instance to populate.
     * @return {module:model/AssistantsApiToolChoiceOption} The populated <code>AssistantsApiToolChoiceOption</code> instance.
     */
    static constructFromObject(data, obj) {
        return new AssistantsApiToolChoiceOption(data);
    }

    /**
     * Gets the actual instance, which can be <code>AssistantsApiNamedToolChoice</code>, <code>String</code>.
     * @return {(module:model/AssistantsApiNamedToolChoice|module:model/String)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>AssistantsApiNamedToolChoice</code>, <code>String</code>.
     * @param {(module:model/AssistantsApiNamedToolChoice|module:model/String)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = AssistantsApiToolChoiceOption.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of AssistantsApiToolChoiceOption from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/AssistantsApiToolChoiceOption} An instance of AssistantsApiToolChoiceOption.
     */
    static fromJSON = function(json_string){
        return AssistantsApiToolChoiceOption.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The type of the tool. If type is `function`, the function name must be set
 * @member {module:model/AssistantsApiToolChoiceOption.TypeEnum} type
 */
AssistantsApiToolChoiceOption.prototype['type'] = undefined;

/**
 * @member {module:model/ChatCompletionNamedToolChoiceFunction} function
 */
AssistantsApiToolChoiceOption.prototype['function'] = undefined;


AssistantsApiToolChoiceOption.OneOf = ["AssistantsApiNamedToolChoice", "String"];

export default AssistantsApiToolChoiceOption;

