/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChatCompletionMessageToolCall from './ChatCompletionMessageToolCall';
import ChatCompletionRequestAssistantMessage from './ChatCompletionRequestAssistantMessage';
import ChatCompletionRequestAssistantMessageFunctionCall from './ChatCompletionRequestAssistantMessageFunctionCall';
import ChatCompletionRequestFunctionMessage from './ChatCompletionRequestFunctionMessage';
import ChatCompletionRequestSystemMessage from './ChatCompletionRequestSystemMessage';
import ChatCompletionRequestToolMessage from './ChatCompletionRequestToolMessage';
import ChatCompletionRequestUserMessage from './ChatCompletionRequestUserMessage';

/**
 * The ChatCompletionRequestMessage model module.
 * @module model/ChatCompletionRequestMessage
 * @version 1.1.1-pre.0
 */
class ChatCompletionRequestMessage {
    /**
     * Constructs a new <code>ChatCompletionRequestMessage</code>.
     * @alias module:model/ChatCompletionRequestMessage
     * @param {(module:model/ChatCompletionRequestAssistantMessage|module:model/ChatCompletionRequestFunctionMessage|module:model/ChatCompletionRequestSystemMessage|module:model/ChatCompletionRequestToolMessage|module:model/ChatCompletionRequestUserMessage)} instance The actual instance to initialize ChatCompletionRequestMessage.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "ChatCompletionRequestSystemMessage") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChatCompletionRequestSystemMessage.validateJSON(instance); // throw an exception if no match
                // create ChatCompletionRequestSystemMessage from JS object
                this.actualInstance = ChatCompletionRequestSystemMessage.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChatCompletionRequestSystemMessage
            errorMessages.push("Failed to construct ChatCompletionRequestSystemMessage: " + err)
        }

        try {
            if (typeof instance === "ChatCompletionRequestUserMessage") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChatCompletionRequestUserMessage.validateJSON(instance); // throw an exception if no match
                // create ChatCompletionRequestUserMessage from JS object
                this.actualInstance = ChatCompletionRequestUserMessage.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChatCompletionRequestUserMessage
            errorMessages.push("Failed to construct ChatCompletionRequestUserMessage: " + err)
        }

        try {
            if (typeof instance === "ChatCompletionRequestAssistantMessage") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChatCompletionRequestAssistantMessage.validateJSON(instance); // throw an exception if no match
                // create ChatCompletionRequestAssistantMessage from JS object
                this.actualInstance = ChatCompletionRequestAssistantMessage.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChatCompletionRequestAssistantMessage
            errorMessages.push("Failed to construct ChatCompletionRequestAssistantMessage: " + err)
        }

        try {
            if (typeof instance === "ChatCompletionRequestToolMessage") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChatCompletionRequestToolMessage.validateJSON(instance); // throw an exception if no match
                // create ChatCompletionRequestToolMessage from JS object
                this.actualInstance = ChatCompletionRequestToolMessage.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChatCompletionRequestToolMessage
            errorMessages.push("Failed to construct ChatCompletionRequestToolMessage: " + err)
        }

        try {
            if (typeof instance === "ChatCompletionRequestFunctionMessage") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChatCompletionRequestFunctionMessage.validateJSON(instance); // throw an exception if no match
                // create ChatCompletionRequestFunctionMessage from JS object
                this.actualInstance = ChatCompletionRequestFunctionMessage.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChatCompletionRequestFunctionMessage
            errorMessages.push("Failed to construct ChatCompletionRequestFunctionMessage: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `ChatCompletionRequestMessage` with oneOf schemas ChatCompletionRequestAssistantMessage, ChatCompletionRequestFunctionMessage, ChatCompletionRequestSystemMessage, ChatCompletionRequestToolMessage, ChatCompletionRequestUserMessage. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `ChatCompletionRequestMessage` with oneOf schemas ChatCompletionRequestAssistantMessage, ChatCompletionRequestFunctionMessage, ChatCompletionRequestSystemMessage, ChatCompletionRequestToolMessage, ChatCompletionRequestUserMessage. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>ChatCompletionRequestMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatCompletionRequestMessage} obj Optional instance to populate.
     * @return {module:model/ChatCompletionRequestMessage} The populated <code>ChatCompletionRequestMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        return new ChatCompletionRequestMessage(data);
    }

    /**
     * Gets the actual instance, which can be <code>ChatCompletionRequestAssistantMessage</code>, <code>ChatCompletionRequestFunctionMessage</code>, <code>ChatCompletionRequestSystemMessage</code>, <code>ChatCompletionRequestToolMessage</code>, <code>ChatCompletionRequestUserMessage</code>.
     * @return {(module:model/ChatCompletionRequestAssistantMessage|module:model/ChatCompletionRequestFunctionMessage|module:model/ChatCompletionRequestSystemMessage|module:model/ChatCompletionRequestToolMessage|module:model/ChatCompletionRequestUserMessage)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ChatCompletionRequestAssistantMessage</code>, <code>ChatCompletionRequestFunctionMessage</code>, <code>ChatCompletionRequestSystemMessage</code>, <code>ChatCompletionRequestToolMessage</code>, <code>ChatCompletionRequestUserMessage</code>.
     * @param {(module:model/ChatCompletionRequestAssistantMessage|module:model/ChatCompletionRequestFunctionMessage|module:model/ChatCompletionRequestSystemMessage|module:model/ChatCompletionRequestToolMessage|module:model/ChatCompletionRequestUserMessage)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = ChatCompletionRequestMessage.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of ChatCompletionRequestMessage from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/ChatCompletionRequestMessage} An instance of ChatCompletionRequestMessage.
     */
    static fromJSON = function(json_string){
        return ChatCompletionRequestMessage.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The contents of the function message.
 * @member {String} content
 */
ChatCompletionRequestMessage.prototype['content'] = undefined;

/**
 * The role of the messages author, in this case `function`.
 * @member {module:model/ChatCompletionRequestMessage.RoleEnum} role
 */
ChatCompletionRequestMessage.prototype['role'] = undefined;

/**
 * The name of the function to call.
 * @member {String} name
 */
ChatCompletionRequestMessage.prototype['name'] = undefined;

/**
 * The tool calls generated by the model, such as function calls.
 * @member {Array.<module:model/ChatCompletionMessageToolCall>} tool_calls
 */
ChatCompletionRequestMessage.prototype['tool_calls'] = undefined;

/**
 * @member {module:model/ChatCompletionRequestAssistantMessageFunctionCall} function_call
 */
ChatCompletionRequestMessage.prototype['function_call'] = undefined;

/**
 * Tool call that this message is responding to.
 * @member {String} tool_call_id
 */
ChatCompletionRequestMessage.prototype['tool_call_id'] = undefined;


ChatCompletionRequestMessage.OneOf = ["ChatCompletionRequestAssistantMessage", "ChatCompletionRequestFunctionMessage", "ChatCompletionRequestSystemMessage", "ChatCompletionRequestToolMessage", "ChatCompletionRequestUserMessage"];

export default ChatCompletionRequestMessage;

