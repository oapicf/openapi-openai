/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateChatCompletionRequestStop model module.
 * @module model/CreateChatCompletionRequestStop
 * @version 0.9.0-pre.0
 */
class CreateChatCompletionRequestStop {
    /**
     * Constructs a new <code>CreateChatCompletionRequestStop</code>.
     * Up to 4 sequences where the API will stop generating further tokens. 
     * @alias module:model/CreateChatCompletionRequestStop
     * @param {(module:model/String|module:model/[String])} instance The actual instance to initialize CreateChatCompletionRequestStop.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            // validate string
            if (!(typeof instance === 'string')) {
                throw new Error("Invalid value. Must be string. Input: " + JSON.stringify(instance));
            }
            this.actualInstance = instance;
            match++;
        } catch(err) {
            // json data failed to deserialize into String
            errorMessages.push("Failed to construct String: " + err)
        }

        try {
            // validate array data type
            if (!Array.isArray(instance)) {
                throw new Error("Invalid data type. Expecting array. Input: " + instance);
            }
            if (instance.length > 4 || instance.length < 1) {
                throw new Error("Invalid array size. Minimim: 1. Maximum: 4. Input: " + instance);
            }
            // validate array of string
            for (const item of instance) {
                if (!(typeof item === 'number' && item % 1 === 0)) {
                    throw new Error("Invalid array items. Must be string. Input: " + instance);
                }
            }
            this.actualInstance = instance;
            match++;
        } catch(err) {
            // json data failed to deserialize into [String]
            errorMessages.push("Failed to construct [String]: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `CreateChatCompletionRequestStop` with oneOf schemas String, [String]. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `CreateChatCompletionRequestStop` with oneOf schemas String, [String]. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CreateChatCompletionRequestStop</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateChatCompletionRequestStop} obj Optional instance to populate.
     * @return {module:model/CreateChatCompletionRequestStop} The populated <code>CreateChatCompletionRequestStop</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CreateChatCompletionRequestStop(data);
    }

    /**
     * Gets the actual instance, which can be <code>String</code>, <code>[String]</code>.
     * @return {(module:model/String|module:model/[String])} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>String</code>, <code>[String]</code>.
     * @param {(module:model/String|module:model/[String])} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CreateChatCompletionRequestStop.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CreateChatCompletionRequestStop from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CreateChatCompletionRequestStop} An instance of CreateChatCompletionRequestStop.
     */
    static fromJSON = function(json_string){
        return CreateChatCompletionRequestStop.constructFromObject(JSON.parse(json_string));
    }
}


CreateChatCompletionRequestStop.OneOf = ["String", "[String]"];

export default CreateChatCompletionRequestStop;

