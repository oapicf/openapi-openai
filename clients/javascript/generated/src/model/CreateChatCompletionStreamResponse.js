/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateChatCompletionStreamResponseChoicesInner from './CreateChatCompletionStreamResponseChoicesInner';

/**
 * The CreateChatCompletionStreamResponse model module.
 * @module model/CreateChatCompletionStreamResponse
 * @version 0.9.0-pre.0
 */
class CreateChatCompletionStreamResponse {
    /**
     * Constructs a new <code>CreateChatCompletionStreamResponse</code>.
     * @alias module:model/CreateChatCompletionStreamResponse
     * @param id {String} 
     * @param object {String} 
     * @param created {Number} 
     * @param model {String} 
     * @param choices {Array.<module:model/CreateChatCompletionStreamResponseChoicesInner>} 
     */
    constructor(id, object, created, model, choices) { 
        
        CreateChatCompletionStreamResponse.initialize(this, id, object, created, model, choices);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, object, created, model, choices) { 
        obj['id'] = id;
        obj['object'] = object;
        obj['created'] = created;
        obj['model'] = model;
        obj['choices'] = choices;
    }

    /**
     * Constructs a <code>CreateChatCompletionStreamResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateChatCompletionStreamResponse} obj Optional instance to populate.
     * @return {module:model/CreateChatCompletionStreamResponse} The populated <code>CreateChatCompletionStreamResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateChatCompletionStreamResponse();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('choices')) {
                obj['choices'] = ApiClient.convertToType(data['choices'], [CreateChatCompletionStreamResponseChoicesInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateChatCompletionStreamResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateChatCompletionStreamResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateChatCompletionStreamResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        if (data['choices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['choices'])) {
                throw new Error("Expected the field `choices` to be an array in the JSON data but got " + data['choices']);
            }
            // validate the optional field `choices` (array)
            for (const item of data['choices']) {
                CreateChatCompletionStreamResponseChoicesInner.validateJSON(item);
            };
        }

        return true;
    }


}

CreateChatCompletionStreamResponse.RequiredProperties = ["id", "object", "created", "model", "choices"];

/**
 * @member {String} id
 */
CreateChatCompletionStreamResponse.prototype['id'] = undefined;

/**
 * @member {String} object
 */
CreateChatCompletionStreamResponse.prototype['object'] = undefined;

/**
 * @member {Number} created
 */
CreateChatCompletionStreamResponse.prototype['created'] = undefined;

/**
 * @member {String} model
 */
CreateChatCompletionStreamResponse.prototype['model'] = undefined;

/**
 * @member {Array.<module:model/CreateChatCompletionStreamResponseChoicesInner>} choices
 */
CreateChatCompletionStreamResponse.prototype['choices'] = undefined;






export default CreateChatCompletionStreamResponse;

