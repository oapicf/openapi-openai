/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateEditRequestModel from './CreateEditRequestModel';

/**
 * The CreateEditRequest model module.
 * @module model/CreateEditRequest
 * @version 0.9.0-pre.0
 */
class CreateEditRequest {
    /**
     * Constructs a new <code>CreateEditRequest</code>.
     * @alias module:model/CreateEditRequest
     * @param model {module:model/CreateEditRequestModel} 
     * @param instruction {String} The instruction that tells the model how to edit the prompt.
     */
    constructor(model, instruction) { 
        
        CreateEditRequest.initialize(this, model, instruction);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, model, instruction) { 
        obj['model'] = model;
        obj['instruction'] = instruction;
    }

    /**
     * Constructs a <code>CreateEditRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateEditRequest} obj Optional instance to populate.
     * @return {module:model/CreateEditRequest} The populated <code>CreateEditRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateEditRequest();

            if (data.hasOwnProperty('model')) {
                obj['model'] = CreateEditRequestModel.constructFromObject(data['model']);
            }
            if (data.hasOwnProperty('input')) {
                obj['input'] = ApiClient.convertToType(data['input'], 'String');
            }
            if (data.hasOwnProperty('instruction')) {
                obj['instruction'] = ApiClient.convertToType(data['instruction'], 'String');
            }
            if (data.hasOwnProperty('n')) {
                obj['n'] = ApiClient.convertToType(data['n'], 'Number');
            }
            if (data.hasOwnProperty('temperature')) {
                obj['temperature'] = ApiClient.convertToType(data['temperature'], 'Number');
            }
            if (data.hasOwnProperty('top_p')) {
                obj['top_p'] = ApiClient.convertToType(data['top_p'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateEditRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateEditRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateEditRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `model`
        if (data['model']) { // data not null
          CreateEditRequestModel.validateJSON(data['model']);
        }
        // ensure the json data is a string
        if (data['input'] && !(typeof data['input'] === 'string' || data['input'] instanceof String)) {
            throw new Error("Expected the field `input` to be a primitive type in the JSON string but got " + data['input']);
        }
        // ensure the json data is a string
        if (data['instruction'] && !(typeof data['instruction'] === 'string' || data['instruction'] instanceof String)) {
            throw new Error("Expected the field `instruction` to be a primitive type in the JSON string but got " + data['instruction']);
        }

        return true;
    }


}

CreateEditRequest.RequiredProperties = ["model", "instruction"];

/**
 * @member {module:model/CreateEditRequestModel} model
 */
CreateEditRequest.prototype['model'] = undefined;

/**
 * The input text to use as a starting point for the edit.
 * @member {String} input
 * @default ''
 */
CreateEditRequest.prototype['input'] = '';

/**
 * The instruction that tells the model how to edit the prompt.
 * @member {String} instruction
 */
CreateEditRequest.prototype['instruction'] = undefined;

/**
 * How many edits to generate for the input and instruction.
 * @member {Number} n
 * @default 1
 */
CreateEditRequest.prototype['n'] = 1;

/**
 * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
 * @member {Number} temperature
 * @default 1
 */
CreateEditRequest.prototype['temperature'] = 1;

/**
 * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
 * @member {Number} top_p
 * @default 1
 */
CreateEditRequest.prototype['top_p'] = 1;






export default CreateEditRequest;

