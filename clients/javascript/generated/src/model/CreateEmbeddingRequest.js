/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateEmbeddingRequestInput from './CreateEmbeddingRequestInput';
import CreateEmbeddingRequestModel from './CreateEmbeddingRequestModel';

/**
 * The CreateEmbeddingRequest model module.
 * @module model/CreateEmbeddingRequest
 * @version 1.1.1-pre.0
 */
class CreateEmbeddingRequest {
    /**
     * Constructs a new <code>CreateEmbeddingRequest</code>.
     * @alias module:model/CreateEmbeddingRequest
     * @param input {module:model/CreateEmbeddingRequestInput} 
     * @param model {module:model/CreateEmbeddingRequestModel} 
     */
    constructor(input, model) { 
        
        CreateEmbeddingRequest.initialize(this, input, model);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, input, model) { 
        obj['input'] = input;
        obj['model'] = model;
        obj['encoding_format'] = 'float';
    }

    /**
     * Constructs a <code>CreateEmbeddingRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateEmbeddingRequest} obj Optional instance to populate.
     * @return {module:model/CreateEmbeddingRequest} The populated <code>CreateEmbeddingRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateEmbeddingRequest();

            if (data.hasOwnProperty('input')) {
                obj['input'] = CreateEmbeddingRequestInput.constructFromObject(data['input']);
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = CreateEmbeddingRequestModel.constructFromObject(data['model']);
            }
            if (data.hasOwnProperty('encoding_format')) {
                obj['encoding_format'] = ApiClient.convertToType(data['encoding_format'], 'String');
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], 'Number');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateEmbeddingRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateEmbeddingRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateEmbeddingRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `input`
        if (data['input']) { // data not null
          CreateEmbeddingRequestInput.validateJSON(data['input']);
        }
        // validate the optional field `model`
        if (data['model']) { // data not null
          CreateEmbeddingRequestModel.validateJSON(data['model']);
        }
        // ensure the json data is a string
        if (data['encoding_format'] && !(typeof data['encoding_format'] === 'string' || data['encoding_format'] instanceof String)) {
            throw new Error("Expected the field `encoding_format` to be a primitive type in the JSON string but got " + data['encoding_format']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }

        return true;
    }


}

CreateEmbeddingRequest.RequiredProperties = ["input", "model"];

/**
 * @member {module:model/CreateEmbeddingRequestInput} input
 */
CreateEmbeddingRequest.prototype['input'] = undefined;

/**
 * @member {module:model/CreateEmbeddingRequestModel} model
 */
CreateEmbeddingRequest.prototype['model'] = undefined;

/**
 * The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
 * @member {module:model/CreateEmbeddingRequest.EncodingFormatEnum} encoding_format
 * @default 'float'
 */
CreateEmbeddingRequest.prototype['encoding_format'] = 'float';

/**
 * The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models. 
 * @member {Number} dimensions
 */
CreateEmbeddingRequest.prototype['dimensions'] = undefined;

/**
 * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
 * @member {String} user
 */
CreateEmbeddingRequest.prototype['user'] = undefined;





/**
 * Allowed values for the <code>encoding_format</code> property.
 * @enum {String}
 * @readonly
 */
CreateEmbeddingRequest['EncodingFormatEnum'] = {

    /**
     * value: "float"
     * @const
     */
    "float": "float",

    /**
     * value: "base64"
     * @const
     */
    "base64": "base64"
};



export default CreateEmbeddingRequest;

