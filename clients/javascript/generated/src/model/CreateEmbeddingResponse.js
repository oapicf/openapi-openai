/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateEmbeddingResponseDataInner from './CreateEmbeddingResponseDataInner';
import CreateEmbeddingResponseUsage from './CreateEmbeddingResponseUsage';

/**
 * The CreateEmbeddingResponse model module.
 * @module model/CreateEmbeddingResponse
 * @version 0.9.0-pre.0
 */
class CreateEmbeddingResponse {
    /**
     * Constructs a new <code>CreateEmbeddingResponse</code>.
     * @alias module:model/CreateEmbeddingResponse
     * @param object {String} 
     * @param model {String} 
     * @param data {Array.<module:model/CreateEmbeddingResponseDataInner>} 
     * @param usage {module:model/CreateEmbeddingResponseUsage} 
     */
    constructor(object, model, data, usage) { 
        
        CreateEmbeddingResponse.initialize(this, object, model, data, usage);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, object, model, data, usage) { 
        obj['object'] = object;
        obj['model'] = model;
        obj['data'] = data;
        obj['usage'] = usage;
    }

    /**
     * Constructs a <code>CreateEmbeddingResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateEmbeddingResponse} obj Optional instance to populate.
     * @return {module:model/CreateEmbeddingResponse} The populated <code>CreateEmbeddingResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateEmbeddingResponse();

            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [CreateEmbeddingResponseDataInner]);
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = CreateEmbeddingResponseUsage.constructFromObject(data['usage']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateEmbeddingResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateEmbeddingResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateEmbeddingResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        if (data['data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data'])) {
                throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
            }
            // validate the optional field `data` (array)
            for (const item of data['data']) {
                CreateEmbeddingResponseDataInner.validateJSON(item);
            };
        }
        // validate the optional field `usage`
        if (data['usage']) { // data not null
          CreateEmbeddingResponseUsage.validateJSON(data['usage']);
        }

        return true;
    }


}

CreateEmbeddingResponse.RequiredProperties = ["object", "model", "data", "usage"];

/**
 * @member {String} object
 */
CreateEmbeddingResponse.prototype['object'] = undefined;

/**
 * @member {String} model
 */
CreateEmbeddingResponse.prototype['model'] = undefined;

/**
 * @member {Array.<module:model/CreateEmbeddingResponseDataInner>} data
 */
CreateEmbeddingResponse.prototype['data'] = undefined;

/**
 * @member {module:model/CreateEmbeddingResponseUsage} usage
 */
CreateEmbeddingResponse.prototype['usage'] = undefined;






export default CreateEmbeddingResponse;

