/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateModerationResponseResultsInner from './CreateModerationResponseResultsInner';

/**
 * The CreateModerationResponse model module.
 * @module model/CreateModerationResponse
 * @version 1.1.1-pre.0
 */
class CreateModerationResponse {
    /**
     * Constructs a new <code>CreateModerationResponse</code>.
     * Represents if a given text input is potentially harmful.
     * @alias module:model/CreateModerationResponse
     * @param id {String} The unique identifier for the moderation request.
     * @param model {String} The model used to generate the moderation results.
     * @param results {Array.<module:model/CreateModerationResponseResultsInner>} A list of moderation objects.
     */
    constructor(id, model, results) { 
        
        CreateModerationResponse.initialize(this, id, model, results);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, model, results) { 
        obj['id'] = id;
        obj['model'] = model;
        obj['results'] = results;
    }

    /**
     * Constructs a <code>CreateModerationResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateModerationResponse} obj Optional instance to populate.
     * @return {module:model/CreateModerationResponse} The populated <code>CreateModerationResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateModerationResponse();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('results')) {
                obj['results'] = ApiClient.convertToType(data['results'], [CreateModerationResponseResultsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateModerationResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateModerationResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateModerationResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        if (data['results']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['results'])) {
                throw new Error("Expected the field `results` to be an array in the JSON data but got " + data['results']);
            }
            // validate the optional field `results` (array)
            for (const item of data['results']) {
                CreateModerationResponseResultsInner.validateJSON(item);
            };
        }

        return true;
    }


}

CreateModerationResponse.RequiredProperties = ["id", "model", "results"];

/**
 * The unique identifier for the moderation request.
 * @member {String} id
 */
CreateModerationResponse.prototype['id'] = undefined;

/**
 * The model used to generate the moderation results.
 * @member {String} model
 */
CreateModerationResponse.prototype['model'] = undefined;

/**
 * A list of moderation objects.
 * @member {Array.<module:model/CreateModerationResponseResultsInner>} results
 */
CreateModerationResponse.prototype['results'] = undefined;






export default CreateModerationResponse;

