/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateTranscriptionResponseJson from './CreateTranscriptionResponseJson';
import CreateTranscriptionResponseVerboseJson from './CreateTranscriptionResponseVerboseJson';
import TranscriptionSegment from './TranscriptionSegment';
import TranscriptionWord from './TranscriptionWord';

/**
 * The CreateTranscription200Response model module.
 * @module model/CreateTranscription200Response
 * @version 1.1.1-pre.0
 */
class CreateTranscription200Response {
    /**
     * Constructs a new <code>CreateTranscription200Response</code>.
     * @alias module:model/CreateTranscription200Response
     * @param {(module:model/CreateTranscriptionResponseJson|module:model/CreateTranscriptionResponseVerboseJson)} instance The actual instance to initialize CreateTranscription200Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "CreateTranscriptionResponseJson") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CreateTranscriptionResponseJson.validateJSON(instance); // throw an exception if no match
                // create CreateTranscriptionResponseJson from JS object
                this.actualInstance = CreateTranscriptionResponseJson.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CreateTranscriptionResponseJson
            errorMessages.push("Failed to construct CreateTranscriptionResponseJson: " + err)
        }

        try {
            if (typeof instance === "CreateTranscriptionResponseVerboseJson") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CreateTranscriptionResponseVerboseJson.validateJSON(instance); // throw an exception if no match
                // create CreateTranscriptionResponseVerboseJson from JS object
                this.actualInstance = CreateTranscriptionResponseVerboseJson.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CreateTranscriptionResponseVerboseJson
            errorMessages.push("Failed to construct CreateTranscriptionResponseVerboseJson: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `CreateTranscription200Response` with oneOf schemas CreateTranscriptionResponseJson, CreateTranscriptionResponseVerboseJson. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `CreateTranscription200Response` with oneOf schemas CreateTranscriptionResponseJson, CreateTranscriptionResponseVerboseJson. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CreateTranscription200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateTranscription200Response} obj Optional instance to populate.
     * @return {module:model/CreateTranscription200Response} The populated <code>CreateTranscription200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CreateTranscription200Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>CreateTranscriptionResponseJson</code>, <code>CreateTranscriptionResponseVerboseJson</code>.
     * @return {(module:model/CreateTranscriptionResponseJson|module:model/CreateTranscriptionResponseVerboseJson)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>CreateTranscriptionResponseJson</code>, <code>CreateTranscriptionResponseVerboseJson</code>.
     * @param {(module:model/CreateTranscriptionResponseJson|module:model/CreateTranscriptionResponseVerboseJson)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CreateTranscription200Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CreateTranscription200Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CreateTranscription200Response} An instance of CreateTranscription200Response.
     */
    static fromJSON = function(json_string){
        return CreateTranscription200Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The transcribed text.
 * @member {String} text
 */
CreateTranscription200Response.prototype['text'] = undefined;

/**
 * The language of the input audio.
 * @member {String} language
 */
CreateTranscription200Response.prototype['language'] = undefined;

/**
 * The duration of the input audio.
 * @member {String} duration
 */
CreateTranscription200Response.prototype['duration'] = undefined;

/**
 * Extracted words and their corresponding timestamps.
 * @member {Array.<module:model/TranscriptionWord>} words
 */
CreateTranscription200Response.prototype['words'] = undefined;

/**
 * Segments of the transcribed text and their corresponding details.
 * @member {Array.<module:model/TranscriptionSegment>} segments
 */
CreateTranscription200Response.prototype['segments'] = undefined;


CreateTranscription200Response.OneOf = ["CreateTranscriptionResponseJson", "CreateTranscriptionResponseVerboseJson"];

export default CreateTranscription200Response;

