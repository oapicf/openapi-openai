/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FineTuneEvent from './FineTuneEvent';
import OpenAIFile from './OpenAIFile';

/**
 * The FineTune model module.
 * @module model/FineTune
 * @version 0.9.0-pre.0
 */
class FineTune {
    /**
     * Constructs a new <code>FineTune</code>.
     * @alias module:model/FineTune
     * @param id {String} 
     * @param object {String} 
     * @param createdAt {Number} 
     * @param updatedAt {Number} 
     * @param model {String} 
     * @param fineTunedModel {String} 
     * @param organizationId {String} 
     * @param status {String} 
     * @param hyperparams {Object} 
     * @param trainingFiles {Array.<module:model/OpenAIFile>} 
     * @param validationFiles {Array.<module:model/OpenAIFile>} 
     * @param resultFiles {Array.<module:model/OpenAIFile>} 
     */
    constructor(id, object, createdAt, updatedAt, model, fineTunedModel, organizationId, status, hyperparams, trainingFiles, validationFiles, resultFiles) { 
        
        FineTune.initialize(this, id, object, createdAt, updatedAt, model, fineTunedModel, organizationId, status, hyperparams, trainingFiles, validationFiles, resultFiles);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, object, createdAt, updatedAt, model, fineTunedModel, organizationId, status, hyperparams, trainingFiles, validationFiles, resultFiles) { 
        obj['id'] = id;
        obj['object'] = object;
        obj['created_at'] = createdAt;
        obj['updated_at'] = updatedAt;
        obj['model'] = model;
        obj['fine_tuned_model'] = fineTunedModel;
        obj['organization_id'] = organizationId;
        obj['status'] = status;
        obj['hyperparams'] = hyperparams;
        obj['training_files'] = trainingFiles;
        obj['validation_files'] = validationFiles;
        obj['result_files'] = resultFiles;
    }

    /**
     * Constructs a <code>FineTune</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FineTune} obj Optional instance to populate.
     * @return {module:model/FineTune} The populated <code>FineTune</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FineTune();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Number');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Number');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('fine_tuned_model')) {
                obj['fine_tuned_model'] = ApiClient.convertToType(data['fine_tuned_model'], 'String');
            }
            if (data.hasOwnProperty('organization_id')) {
                obj['organization_id'] = ApiClient.convertToType(data['organization_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('hyperparams')) {
                obj['hyperparams'] = ApiClient.convertToType(data['hyperparams'], Object);
            }
            if (data.hasOwnProperty('training_files')) {
                obj['training_files'] = ApiClient.convertToType(data['training_files'], [OpenAIFile]);
            }
            if (data.hasOwnProperty('validation_files')) {
                obj['validation_files'] = ApiClient.convertToType(data['validation_files'], [OpenAIFile]);
            }
            if (data.hasOwnProperty('result_files')) {
                obj['result_files'] = ApiClient.convertToType(data['result_files'], [OpenAIFile]);
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [FineTuneEvent]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FineTune</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FineTune</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FineTune.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['fine_tuned_model'] && !(typeof data['fine_tuned_model'] === 'string' || data['fine_tuned_model'] instanceof String)) {
            throw new Error("Expected the field `fine_tuned_model` to be a primitive type in the JSON string but got " + data['fine_tuned_model']);
        }
        // ensure the json data is a string
        if (data['organization_id'] && !(typeof data['organization_id'] === 'string' || data['organization_id'] instanceof String)) {
            throw new Error("Expected the field `organization_id` to be a primitive type in the JSON string but got " + data['organization_id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['training_files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['training_files'])) {
                throw new Error("Expected the field `training_files` to be an array in the JSON data but got " + data['training_files']);
            }
            // validate the optional field `training_files` (array)
            for (const item of data['training_files']) {
                OpenAIFile.validateJSON(item);
            };
        }
        if (data['validation_files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['validation_files'])) {
                throw new Error("Expected the field `validation_files` to be an array in the JSON data but got " + data['validation_files']);
            }
            // validate the optional field `validation_files` (array)
            for (const item of data['validation_files']) {
                OpenAIFile.validateJSON(item);
            };
        }
        if (data['result_files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['result_files'])) {
                throw new Error("Expected the field `result_files` to be an array in the JSON data but got " + data['result_files']);
            }
            // validate the optional field `result_files` (array)
            for (const item of data['result_files']) {
                OpenAIFile.validateJSON(item);
            };
        }
        if (data['events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['events'])) {
                throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
            }
            // validate the optional field `events` (array)
            for (const item of data['events']) {
                FineTuneEvent.validateJSON(item);
            };
        }

        return true;
    }


}

FineTune.RequiredProperties = ["id", "object", "created_at", "updated_at", "model", "fine_tuned_model", "organization_id", "status", "hyperparams", "training_files", "validation_files", "result_files"];

/**
 * @member {String} id
 */
FineTune.prototype['id'] = undefined;

/**
 * @member {String} object
 */
FineTune.prototype['object'] = undefined;

/**
 * @member {Number} created_at
 */
FineTune.prototype['created_at'] = undefined;

/**
 * @member {Number} updated_at
 */
FineTune.prototype['updated_at'] = undefined;

/**
 * @member {String} model
 */
FineTune.prototype['model'] = undefined;

/**
 * @member {String} fine_tuned_model
 */
FineTune.prototype['fine_tuned_model'] = undefined;

/**
 * @member {String} organization_id
 */
FineTune.prototype['organization_id'] = undefined;

/**
 * @member {String} status
 */
FineTune.prototype['status'] = undefined;

/**
 * @member {Object} hyperparams
 */
FineTune.prototype['hyperparams'] = undefined;

/**
 * @member {Array.<module:model/OpenAIFile>} training_files
 */
FineTune.prototype['training_files'] = undefined;

/**
 * @member {Array.<module:model/OpenAIFile>} validation_files
 */
FineTune.prototype['validation_files'] = undefined;

/**
 * @member {Array.<module:model/OpenAIFile>} result_files
 */
FineTune.prototype['result_files'] = undefined;

/**
 * @member {Array.<module:model/FineTuneEvent>} events
 */
FineTune.prototype['events'] = undefined;






export default FineTune;

