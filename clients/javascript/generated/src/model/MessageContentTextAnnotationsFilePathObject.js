/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessageContentTextAnnotationsFilePathObjectFilePath from './MessageContentTextAnnotationsFilePathObjectFilePath';

/**
 * The MessageContentTextAnnotationsFilePathObject model module.
 * @module model/MessageContentTextAnnotationsFilePathObject
 * @version 1.1.1-pre.0
 */
class MessageContentTextAnnotationsFilePathObject {
    /**
     * Constructs a new <code>MessageContentTextAnnotationsFilePathObject</code>.
     * A URL for the file that&#39;s generated when the assistant used the &#x60;code_interpreter&#x60; tool to generate a file.
     * @alias module:model/MessageContentTextAnnotationsFilePathObject
     * @param type {module:model/MessageContentTextAnnotationsFilePathObject.TypeEnum} Always `file_path`.
     * @param text {String} The text in the message content that needs to be replaced.
     * @param filePath {module:model/MessageContentTextAnnotationsFilePathObjectFilePath} 
     * @param startIndex {Number} 
     * @param endIndex {Number} 
     */
    constructor(type, text, filePath, startIndex, endIndex) { 
        
        MessageContentTextAnnotationsFilePathObject.initialize(this, type, text, filePath, startIndex, endIndex);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, text, filePath, startIndex, endIndex) { 
        obj['type'] = type;
        obj['text'] = text;
        obj['file_path'] = filePath;
        obj['start_index'] = startIndex;
        obj['end_index'] = endIndex;
    }

    /**
     * Constructs a <code>MessageContentTextAnnotationsFilePathObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessageContentTextAnnotationsFilePathObject} obj Optional instance to populate.
     * @return {module:model/MessageContentTextAnnotationsFilePathObject} The populated <code>MessageContentTextAnnotationsFilePathObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessageContentTextAnnotationsFilePathObject();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('file_path')) {
                obj['file_path'] = MessageContentTextAnnotationsFilePathObjectFilePath.constructFromObject(data['file_path']);
            }
            if (data.hasOwnProperty('start_index')) {
                obj['start_index'] = ApiClient.convertToType(data['start_index'], 'Number');
            }
            if (data.hasOwnProperty('end_index')) {
                obj['end_index'] = ApiClient.convertToType(data['end_index'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessageContentTextAnnotationsFilePathObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessageContentTextAnnotationsFilePathObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MessageContentTextAnnotationsFilePathObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // validate the optional field `file_path`
        if (data['file_path']) { // data not null
          MessageContentTextAnnotationsFilePathObjectFilePath.validateJSON(data['file_path']);
        }

        return true;
    }


}

MessageContentTextAnnotationsFilePathObject.RequiredProperties = ["type", "text", "file_path", "start_index", "end_index"];

/**
 * Always `file_path`.
 * @member {module:model/MessageContentTextAnnotationsFilePathObject.TypeEnum} type
 */
MessageContentTextAnnotationsFilePathObject.prototype['type'] = undefined;

/**
 * The text in the message content that needs to be replaced.
 * @member {String} text
 */
MessageContentTextAnnotationsFilePathObject.prototype['text'] = undefined;

/**
 * @member {module:model/MessageContentTextAnnotationsFilePathObjectFilePath} file_path
 */
MessageContentTextAnnotationsFilePathObject.prototype['file_path'] = undefined;

/**
 * @member {Number} start_index
 */
MessageContentTextAnnotationsFilePathObject.prototype['start_index'] = undefined;

/**
 * @member {Number} end_index
 */
MessageContentTextAnnotationsFilePathObject.prototype['end_index'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
MessageContentTextAnnotationsFilePathObject['TypeEnum'] = {

    /**
     * value: "file_path"
     * @const
     */
    "file_path": "file_path"
};



export default MessageContentTextAnnotationsFilePathObject;

