/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessageObjectContentInner from './MessageObjectContentInner';
import MessageObjectIncompleteDetails from './MessageObjectIncompleteDetails';

/**
 * The MessageObject model module.
 * @module model/MessageObject
 * @version 1.1.1-pre.0
 */
class MessageObject {
    /**
     * Constructs a new <code>MessageObject</code>.
     * Represents a message within a [thread](/docs/api-reference/threads).
     * @alias module:model/MessageObject
     * @param id {String} The identifier, which can be referenced in API endpoints.
     * @param object {module:model/MessageObject.ObjectEnum} The object type, which is always `thread.message`.
     * @param createdAt {Number} The Unix timestamp (in seconds) for when the message was created.
     * @param threadId {String} The [thread](/docs/api-reference/threads) ID that this message belongs to.
     * @param status {module:model/MessageObject.StatusEnum} The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
     * @param incompleteDetails {module:model/MessageObjectIncompleteDetails} 
     * @param completedAt {Number} The Unix timestamp (in seconds) for when the message was completed.
     * @param incompleteAt {Number} The Unix timestamp (in seconds) for when the message was marked as incomplete.
     * @param role {module:model/MessageObject.RoleEnum} The entity that produced the message. One of `user` or `assistant`.
     * @param content {Array.<module:model/MessageObjectContentInner>} The content of the message in array of text and/or images.
     * @param assistantId {String} If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
     * @param runId {String} The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
     * @param fileIds {Array.<String>} A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
     * @param metadata {Object} Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
     */
    constructor(id, object, createdAt, threadId, status, incompleteDetails, completedAt, incompleteAt, role, content, assistantId, runId, fileIds, metadata) { 
        
        MessageObject.initialize(this, id, object, createdAt, threadId, status, incompleteDetails, completedAt, incompleteAt, role, content, assistantId, runId, fileIds, metadata);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, object, createdAt, threadId, status, incompleteDetails, completedAt, incompleteAt, role, content, assistantId, runId, fileIds, metadata) { 
        obj['id'] = id;
        obj['object'] = object;
        obj['created_at'] = createdAt;
        obj['thread_id'] = threadId;
        obj['status'] = status;
        obj['incomplete_details'] = incompleteDetails;
        obj['completed_at'] = completedAt;
        obj['incomplete_at'] = incompleteAt;
        obj['role'] = role;
        obj['content'] = content;
        obj['assistant_id'] = assistantId;
        obj['run_id'] = runId;
        obj['file_ids'] = fileIds;
        obj['metadata'] = metadata;
    }

    /**
     * Constructs a <code>MessageObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessageObject} obj Optional instance to populate.
     * @return {module:model/MessageObject} The populated <code>MessageObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessageObject();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Number');
            }
            if (data.hasOwnProperty('thread_id')) {
                obj['thread_id'] = ApiClient.convertToType(data['thread_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('incomplete_details')) {
                obj['incomplete_details'] = MessageObjectIncompleteDetails.constructFromObject(data['incomplete_details']);
            }
            if (data.hasOwnProperty('completed_at')) {
                obj['completed_at'] = ApiClient.convertToType(data['completed_at'], 'Number');
            }
            if (data.hasOwnProperty('incomplete_at')) {
                obj['incomplete_at'] = ApiClient.convertToType(data['incomplete_at'], 'Number');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], [MessageObjectContentInner]);
            }
            if (data.hasOwnProperty('assistant_id')) {
                obj['assistant_id'] = ApiClient.convertToType(data['assistant_id'], 'String');
            }
            if (data.hasOwnProperty('run_id')) {
                obj['run_id'] = ApiClient.convertToType(data['run_id'], 'String');
            }
            if (data.hasOwnProperty('file_ids')) {
                obj['file_ids'] = ApiClient.convertToType(data['file_ids'], ['String']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessageObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessageObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MessageObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['thread_id'] && !(typeof data['thread_id'] === 'string' || data['thread_id'] instanceof String)) {
            throw new Error("Expected the field `thread_id` to be a primitive type in the JSON string but got " + data['thread_id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `incomplete_details`
        if (data['incomplete_details']) { // data not null
          MessageObjectIncompleteDetails.validateJSON(data['incomplete_details']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        if (data['content']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['content'])) {
                throw new Error("Expected the field `content` to be an array in the JSON data but got " + data['content']);
            }
            // validate the optional field `content` (array)
            for (const item of data['content']) {
                MessageObjectContentInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['assistant_id'] && !(typeof data['assistant_id'] === 'string' || data['assistant_id'] instanceof String)) {
            throw new Error("Expected the field `assistant_id` to be a primitive type in the JSON string but got " + data['assistant_id']);
        }
        // ensure the json data is a string
        if (data['run_id'] && !(typeof data['run_id'] === 'string' || data['run_id'] instanceof String)) {
            throw new Error("Expected the field `run_id` to be a primitive type in the JSON string but got " + data['run_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['file_ids'])) {
            throw new Error("Expected the field `file_ids` to be an array in the JSON data but got " + data['file_ids']);
        }

        return true;
    }


}

MessageObject.RequiredProperties = ["id", "object", "created_at", "thread_id", "status", "incomplete_details", "completed_at", "incomplete_at", "role", "content", "assistant_id", "run_id", "file_ids", "metadata"];

/**
 * The identifier, which can be referenced in API endpoints.
 * @member {String} id
 */
MessageObject.prototype['id'] = undefined;

/**
 * The object type, which is always `thread.message`.
 * @member {module:model/MessageObject.ObjectEnum} object
 */
MessageObject.prototype['object'] = undefined;

/**
 * The Unix timestamp (in seconds) for when the message was created.
 * @member {Number} created_at
 */
MessageObject.prototype['created_at'] = undefined;

/**
 * The [thread](/docs/api-reference/threads) ID that this message belongs to.
 * @member {String} thread_id
 */
MessageObject.prototype['thread_id'] = undefined;

/**
 * The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
 * @member {module:model/MessageObject.StatusEnum} status
 */
MessageObject.prototype['status'] = undefined;

/**
 * @member {module:model/MessageObjectIncompleteDetails} incomplete_details
 */
MessageObject.prototype['incomplete_details'] = undefined;

/**
 * The Unix timestamp (in seconds) for when the message was completed.
 * @member {Number} completed_at
 */
MessageObject.prototype['completed_at'] = undefined;

/**
 * The Unix timestamp (in seconds) for when the message was marked as incomplete.
 * @member {Number} incomplete_at
 */
MessageObject.prototype['incomplete_at'] = undefined;

/**
 * The entity that produced the message. One of `user` or `assistant`.
 * @member {module:model/MessageObject.RoleEnum} role
 */
MessageObject.prototype['role'] = undefined;

/**
 * The content of the message in array of text and/or images.
 * @member {Array.<module:model/MessageObjectContentInner>} content
 */
MessageObject.prototype['content'] = undefined;

/**
 * If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
 * @member {String} assistant_id
 */
MessageObject.prototype['assistant_id'] = undefined;

/**
 * The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
 * @member {String} run_id
 */
MessageObject.prototype['run_id'] = undefined;

/**
 * A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
 * @member {Array.<String>} file_ids
 */
MessageObject.prototype['file_ids'] = undefined;

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
 * @member {Object} metadata
 */
MessageObject.prototype['metadata'] = undefined;





/**
 * Allowed values for the <code>object</code> property.
 * @enum {String}
 * @readonly
 */
MessageObject['ObjectEnum'] = {

    /**
     * value: "thread.message"
     * @const
     */
    "thread.message": "thread.message"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
MessageObject['StatusEnum'] = {

    /**
     * value: "in_progress"
     * @const
     */
    "in_progress": "in_progress",

    /**
     * value: "incomplete"
     * @const
     */
    "incomplete": "incomplete",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed"
};


/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
MessageObject['RoleEnum'] = {

    /**
     * value: "user"
     * @const
     */
    "user": "user",

    /**
     * value: "assistant"
     * @const
     */
    "assistant": "assistant"
};



export default MessageObject;

