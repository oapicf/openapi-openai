/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessageObject from './MessageObject';
import MessageStreamEventOneOf from './MessageStreamEventOneOf';
import MessageStreamEventOneOf1 from './MessageStreamEventOneOf1';
import MessageStreamEventOneOf2 from './MessageStreamEventOneOf2';
import MessageStreamEventOneOf3 from './MessageStreamEventOneOf3';
import MessageStreamEventOneOf4 from './MessageStreamEventOneOf4';

/**
 * The MessageStreamEvent model module.
 * @module model/MessageStreamEvent
 * @version 1.0.1-pre.0
 */
class MessageStreamEvent {
    /**
     * Constructs a new <code>MessageStreamEvent</code>.
     * @alias module:model/MessageStreamEvent
     * @param {(module:model/MessageStreamEventOneOf|module:model/MessageStreamEventOneOf1|module:model/MessageStreamEventOneOf2|module:model/MessageStreamEventOneOf3|module:model/MessageStreamEventOneOf4)} instance The actual instance to initialize MessageStreamEvent.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "MessageStreamEventOneOf") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessageStreamEventOneOf.validateJSON(instance); // throw an exception if no match
                // create MessageStreamEventOneOf from JS object
                this.actualInstance = MessageStreamEventOneOf.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessageStreamEventOneOf
            errorMessages.push("Failed to construct MessageStreamEventOneOf: " + err)
        }

        try {
            if (typeof instance === "MessageStreamEventOneOf1") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessageStreamEventOneOf1.validateJSON(instance); // throw an exception if no match
                // create MessageStreamEventOneOf1 from JS object
                this.actualInstance = MessageStreamEventOneOf1.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessageStreamEventOneOf1
            errorMessages.push("Failed to construct MessageStreamEventOneOf1: " + err)
        }

        try {
            if (typeof instance === "MessageStreamEventOneOf2") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessageStreamEventOneOf2.validateJSON(instance); // throw an exception if no match
                // create MessageStreamEventOneOf2 from JS object
                this.actualInstance = MessageStreamEventOneOf2.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessageStreamEventOneOf2
            errorMessages.push("Failed to construct MessageStreamEventOneOf2: " + err)
        }

        try {
            if (typeof instance === "MessageStreamEventOneOf3") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessageStreamEventOneOf3.validateJSON(instance); // throw an exception if no match
                // create MessageStreamEventOneOf3 from JS object
                this.actualInstance = MessageStreamEventOneOf3.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessageStreamEventOneOf3
            errorMessages.push("Failed to construct MessageStreamEventOneOf3: " + err)
        }

        try {
            if (typeof instance === "MessageStreamEventOneOf4") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessageStreamEventOneOf4.validateJSON(instance); // throw an exception if no match
                // create MessageStreamEventOneOf4 from JS object
                this.actualInstance = MessageStreamEventOneOf4.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessageStreamEventOneOf4
            errorMessages.push("Failed to construct MessageStreamEventOneOf4: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `MessageStreamEvent` with oneOf schemas MessageStreamEventOneOf, MessageStreamEventOneOf1, MessageStreamEventOneOf2, MessageStreamEventOneOf3, MessageStreamEventOneOf4. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `MessageStreamEvent` with oneOf schemas MessageStreamEventOneOf, MessageStreamEventOneOf1, MessageStreamEventOneOf2, MessageStreamEventOneOf3, MessageStreamEventOneOf4. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>MessageStreamEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessageStreamEvent} obj Optional instance to populate.
     * @return {module:model/MessageStreamEvent} The populated <code>MessageStreamEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        return new MessageStreamEvent(data);
    }

    /**
     * Gets the actual instance, which can be <code>MessageStreamEventOneOf</code>, <code>MessageStreamEventOneOf1</code>, <code>MessageStreamEventOneOf2</code>, <code>MessageStreamEventOneOf3</code>, <code>MessageStreamEventOneOf4</code>.
     * @return {(module:model/MessageStreamEventOneOf|module:model/MessageStreamEventOneOf1|module:model/MessageStreamEventOneOf2|module:model/MessageStreamEventOneOf3|module:model/MessageStreamEventOneOf4)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>MessageStreamEventOneOf</code>, <code>MessageStreamEventOneOf1</code>, <code>MessageStreamEventOneOf2</code>, <code>MessageStreamEventOneOf3</code>, <code>MessageStreamEventOneOf4</code>.
     * @param {(module:model/MessageStreamEventOneOf|module:model/MessageStreamEventOneOf1|module:model/MessageStreamEventOneOf2|module:model/MessageStreamEventOneOf3|module:model/MessageStreamEventOneOf4)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = MessageStreamEvent.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of MessageStreamEvent from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/MessageStreamEvent} An instance of MessageStreamEvent.
     */
    static fromJSON = function(json_string){
        return MessageStreamEvent.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/MessageStreamEvent.EventEnum} event
 */
MessageStreamEvent.prototype['event'] = undefined;

/**
 * @member {module:model/MessageObject} data
 */
MessageStreamEvent.prototype['data'] = undefined;


MessageStreamEvent.OneOf = ["MessageStreamEventOneOf", "MessageStreamEventOneOf1", "MessageStreamEventOneOf2", "MessageStreamEventOneOf3", "MessageStreamEventOneOf4"];

export default MessageStreamEvent;

