/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssistantObjectToolsInner from './AssistantObjectToolsInner';
import AssistantsApiResponseFormatOption from './AssistantsApiResponseFormatOption';
import AssistantsApiToolChoiceOption from './AssistantsApiToolChoiceOption';
import RunCompletionUsage from './RunCompletionUsage';
import RunObjectIncompleteDetails from './RunObjectIncompleteDetails';
import RunObjectLastError from './RunObjectLastError';
import RunObjectRequiredAction from './RunObjectRequiredAction';
import TruncationObject from './TruncationObject';

/**
 * The RunObject model module.
 * @module model/RunObject
 * @version 1.1.1-pre.0
 */
class RunObject {
    /**
     * Constructs a new <code>RunObject</code>.
     * Represents an execution run on a [thread](/docs/api-reference/threads).
     * @alias module:model/RunObject
     * @param id {String} The identifier, which can be referenced in API endpoints.
     * @param object {module:model/RunObject.ObjectEnum} The object type, which is always `thread.run`.
     * @param createdAt {Number} The Unix timestamp (in seconds) for when the run was created.
     * @param threadId {String} The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
     * @param assistantId {String} The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
     * @param status {module:model/RunObject.StatusEnum} The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
     * @param requiredAction {module:model/RunObjectRequiredAction} 
     * @param lastError {module:model/RunObjectLastError} 
     * @param expiresAt {Number} The Unix timestamp (in seconds) for when the run will expire.
     * @param startedAt {Number} The Unix timestamp (in seconds) for when the run was started.
     * @param cancelledAt {Number} The Unix timestamp (in seconds) for when the run was cancelled.
     * @param failedAt {Number} The Unix timestamp (in seconds) for when the run failed.
     * @param completedAt {Number} The Unix timestamp (in seconds) for when the run was completed.
     * @param incompleteDetails {module:model/RunObjectIncompleteDetails} 
     * @param model {String} The model that the [assistant](/docs/api-reference/assistants) used for this run.
     * @param instructions {String} The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
     * @param tools {Array.<module:model/AssistantObjectToolsInner>} The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
     * @param fileIds {Array.<String>} The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
     * @param metadata {Object} Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
     * @param usage {module:model/RunCompletionUsage} 
     * @param maxPromptTokens {Number} The maximum number of prompt tokens specified to have been used over the course of the run. 
     * @param maxCompletionTokens {Number} The maximum number of completion tokens specified to have been used over the course of the run. 
     * @param truncationStrategy {module:model/TruncationObject} 
     * @param toolChoice {module:model/AssistantsApiToolChoiceOption} 
     * @param responseFormat {module:model/AssistantsApiResponseFormatOption} 
     */
    constructor(id, object, createdAt, threadId, assistantId, status, requiredAction, lastError, expiresAt, startedAt, cancelledAt, failedAt, completedAt, incompleteDetails, model, instructions, tools, fileIds, metadata, usage, maxPromptTokens, maxCompletionTokens, truncationStrategy, toolChoice, responseFormat) { 
        
        RunObject.initialize(this, id, object, createdAt, threadId, assistantId, status, requiredAction, lastError, expiresAt, startedAt, cancelledAt, failedAt, completedAt, incompleteDetails, model, instructions, tools, fileIds, metadata, usage, maxPromptTokens, maxCompletionTokens, truncationStrategy, toolChoice, responseFormat);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, object, createdAt, threadId, assistantId, status, requiredAction, lastError, expiresAt, startedAt, cancelledAt, failedAt, completedAt, incompleteDetails, model, instructions, tools, fileIds, metadata, usage, maxPromptTokens, maxCompletionTokens, truncationStrategy, toolChoice, responseFormat) { 
        obj['id'] = id;
        obj['object'] = object;
        obj['created_at'] = createdAt;
        obj['thread_id'] = threadId;
        obj['assistant_id'] = assistantId;
        obj['status'] = status;
        obj['required_action'] = requiredAction;
        obj['last_error'] = lastError;
        obj['expires_at'] = expiresAt;
        obj['started_at'] = startedAt;
        obj['cancelled_at'] = cancelledAt;
        obj['failed_at'] = failedAt;
        obj['completed_at'] = completedAt;
        obj['incomplete_details'] = incompleteDetails;
        obj['model'] = model;
        obj['instructions'] = instructions;
        obj['tools'] = tools;
        obj['file_ids'] = fileIds;
        obj['metadata'] = metadata;
        obj['usage'] = usage;
        obj['max_prompt_tokens'] = maxPromptTokens;
        obj['max_completion_tokens'] = maxCompletionTokens;
        obj['truncation_strategy'] = truncationStrategy;
        obj['tool_choice'] = toolChoice;
        obj['response_format'] = responseFormat;
    }

    /**
     * Constructs a <code>RunObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunObject} obj Optional instance to populate.
     * @return {module:model/RunObject} The populated <code>RunObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunObject();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Number');
            }
            if (data.hasOwnProperty('thread_id')) {
                obj['thread_id'] = ApiClient.convertToType(data['thread_id'], 'String');
            }
            if (data.hasOwnProperty('assistant_id')) {
                obj['assistant_id'] = ApiClient.convertToType(data['assistant_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('required_action')) {
                obj['required_action'] = RunObjectRequiredAction.constructFromObject(data['required_action']);
            }
            if (data.hasOwnProperty('last_error')) {
                obj['last_error'] = RunObjectLastError.constructFromObject(data['last_error']);
            }
            if (data.hasOwnProperty('expires_at')) {
                obj['expires_at'] = ApiClient.convertToType(data['expires_at'], 'Number');
            }
            if (data.hasOwnProperty('started_at')) {
                obj['started_at'] = ApiClient.convertToType(data['started_at'], 'Number');
            }
            if (data.hasOwnProperty('cancelled_at')) {
                obj['cancelled_at'] = ApiClient.convertToType(data['cancelled_at'], 'Number');
            }
            if (data.hasOwnProperty('failed_at')) {
                obj['failed_at'] = ApiClient.convertToType(data['failed_at'], 'Number');
            }
            if (data.hasOwnProperty('completed_at')) {
                obj['completed_at'] = ApiClient.convertToType(data['completed_at'], 'Number');
            }
            if (data.hasOwnProperty('incomplete_details')) {
                obj['incomplete_details'] = RunObjectIncompleteDetails.constructFromObject(data['incomplete_details']);
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('instructions')) {
                obj['instructions'] = ApiClient.convertToType(data['instructions'], 'String');
            }
            if (data.hasOwnProperty('tools')) {
                obj['tools'] = ApiClient.convertToType(data['tools'], [AssistantObjectToolsInner]);
            }
            if (data.hasOwnProperty('file_ids')) {
                obj['file_ids'] = ApiClient.convertToType(data['file_ids'], ['String']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = RunCompletionUsage.constructFromObject(data['usage']);
            }
            if (data.hasOwnProperty('temperature')) {
                obj['temperature'] = ApiClient.convertToType(data['temperature'], 'Number');
            }
            if (data.hasOwnProperty('max_prompt_tokens')) {
                obj['max_prompt_tokens'] = ApiClient.convertToType(data['max_prompt_tokens'], 'Number');
            }
            if (data.hasOwnProperty('max_completion_tokens')) {
                obj['max_completion_tokens'] = ApiClient.convertToType(data['max_completion_tokens'], 'Number');
            }
            if (data.hasOwnProperty('truncation_strategy')) {
                obj['truncation_strategy'] = TruncationObject.constructFromObject(data['truncation_strategy']);
            }
            if (data.hasOwnProperty('tool_choice')) {
                obj['tool_choice'] = AssistantsApiToolChoiceOption.constructFromObject(data['tool_choice']);
            }
            if (data.hasOwnProperty('response_format')) {
                obj['response_format'] = AssistantsApiResponseFormatOption.constructFromObject(data['response_format']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RunObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['thread_id'] && !(typeof data['thread_id'] === 'string' || data['thread_id'] instanceof String)) {
            throw new Error("Expected the field `thread_id` to be a primitive type in the JSON string but got " + data['thread_id']);
        }
        // ensure the json data is a string
        if (data['assistant_id'] && !(typeof data['assistant_id'] === 'string' || data['assistant_id'] instanceof String)) {
            throw new Error("Expected the field `assistant_id` to be a primitive type in the JSON string but got " + data['assistant_id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `required_action`
        if (data['required_action']) { // data not null
          RunObjectRequiredAction.validateJSON(data['required_action']);
        }
        // validate the optional field `last_error`
        if (data['last_error']) { // data not null
          RunObjectLastError.validateJSON(data['last_error']);
        }
        // validate the optional field `incomplete_details`
        if (data['incomplete_details']) { // data not null
          RunObjectIncompleteDetails.validateJSON(data['incomplete_details']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['instructions'] && !(typeof data['instructions'] === 'string' || data['instructions'] instanceof String)) {
            throw new Error("Expected the field `instructions` to be a primitive type in the JSON string but got " + data['instructions']);
        }
        if (data['tools']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tools'])) {
                throw new Error("Expected the field `tools` to be an array in the JSON data but got " + data['tools']);
            }
            // validate the optional field `tools` (array)
            for (const item of data['tools']) {
                AssistantObjectToolsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['file_ids'])) {
            throw new Error("Expected the field `file_ids` to be an array in the JSON data but got " + data['file_ids']);
        }
        // validate the optional field `usage`
        if (data['usage']) { // data not null
          RunCompletionUsage.validateJSON(data['usage']);
        }
        // validate the optional field `truncation_strategy`
        if (data['truncation_strategy']) { // data not null
          TruncationObject.validateJSON(data['truncation_strategy']);
        }
        // validate the optional field `tool_choice`
        if (data['tool_choice']) { // data not null
          AssistantsApiToolChoiceOption.validateJSON(data['tool_choice']);
        }
        // validate the optional field `response_format`
        if (data['response_format']) { // data not null
          AssistantsApiResponseFormatOption.validateJSON(data['response_format']);
        }

        return true;
    }


}

RunObject.RequiredProperties = ["id", "object", "created_at", "thread_id", "assistant_id", "status", "required_action", "last_error", "expires_at", "started_at", "cancelled_at", "failed_at", "completed_at", "incomplete_details", "model", "instructions", "tools", "file_ids", "metadata", "usage", "max_prompt_tokens", "max_completion_tokens", "truncation_strategy", "tool_choice", "response_format"];

/**
 * The identifier, which can be referenced in API endpoints.
 * @member {String} id
 */
RunObject.prototype['id'] = undefined;

/**
 * The object type, which is always `thread.run`.
 * @member {module:model/RunObject.ObjectEnum} object
 */
RunObject.prototype['object'] = undefined;

/**
 * The Unix timestamp (in seconds) for when the run was created.
 * @member {Number} created_at
 */
RunObject.prototype['created_at'] = undefined;

/**
 * The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
 * @member {String} thread_id
 */
RunObject.prototype['thread_id'] = undefined;

/**
 * The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
 * @member {String} assistant_id
 */
RunObject.prototype['assistant_id'] = undefined;

/**
 * The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
 * @member {module:model/RunObject.StatusEnum} status
 */
RunObject.prototype['status'] = undefined;

/**
 * @member {module:model/RunObjectRequiredAction} required_action
 */
RunObject.prototype['required_action'] = undefined;

/**
 * @member {module:model/RunObjectLastError} last_error
 */
RunObject.prototype['last_error'] = undefined;

/**
 * The Unix timestamp (in seconds) for when the run will expire.
 * @member {Number} expires_at
 */
RunObject.prototype['expires_at'] = undefined;

/**
 * The Unix timestamp (in seconds) for when the run was started.
 * @member {Number} started_at
 */
RunObject.prototype['started_at'] = undefined;

/**
 * The Unix timestamp (in seconds) for when the run was cancelled.
 * @member {Number} cancelled_at
 */
RunObject.prototype['cancelled_at'] = undefined;

/**
 * The Unix timestamp (in seconds) for when the run failed.
 * @member {Number} failed_at
 */
RunObject.prototype['failed_at'] = undefined;

/**
 * The Unix timestamp (in seconds) for when the run was completed.
 * @member {Number} completed_at
 */
RunObject.prototype['completed_at'] = undefined;

/**
 * @member {module:model/RunObjectIncompleteDetails} incomplete_details
 */
RunObject.prototype['incomplete_details'] = undefined;

/**
 * The model that the [assistant](/docs/api-reference/assistants) used for this run.
 * @member {String} model
 */
RunObject.prototype['model'] = undefined;

/**
 * The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
 * @member {String} instructions
 */
RunObject.prototype['instructions'] = undefined;

/**
 * The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
 * @member {Array.<module:model/AssistantObjectToolsInner>} tools
 */
RunObject.prototype['tools'] = undefined;

/**
 * The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
 * @member {Array.<String>} file_ids
 */
RunObject.prototype['file_ids'] = undefined;

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
 * @member {Object} metadata
 */
RunObject.prototype['metadata'] = undefined;

/**
 * @member {module:model/RunCompletionUsage} usage
 */
RunObject.prototype['usage'] = undefined;

/**
 * The sampling temperature used for this run. If not set, defaults to 1.
 * @member {Number} temperature
 */
RunObject.prototype['temperature'] = undefined;

/**
 * The maximum number of prompt tokens specified to have been used over the course of the run. 
 * @member {Number} max_prompt_tokens
 */
RunObject.prototype['max_prompt_tokens'] = undefined;

/**
 * The maximum number of completion tokens specified to have been used over the course of the run. 
 * @member {Number} max_completion_tokens
 */
RunObject.prototype['max_completion_tokens'] = undefined;

/**
 * @member {module:model/TruncationObject} truncation_strategy
 */
RunObject.prototype['truncation_strategy'] = undefined;

/**
 * @member {module:model/AssistantsApiToolChoiceOption} tool_choice
 */
RunObject.prototype['tool_choice'] = undefined;

/**
 * @member {module:model/AssistantsApiResponseFormatOption} response_format
 */
RunObject.prototype['response_format'] = undefined;





/**
 * Allowed values for the <code>object</code> property.
 * @enum {String}
 * @readonly
 */
RunObject['ObjectEnum'] = {

    /**
     * value: "thread.run"
     * @const
     */
    "thread.run": "thread.run"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
RunObject['StatusEnum'] = {

    /**
     * value: "queued"
     * @const
     */
    "queued": "queued",

    /**
     * value: "in_progress"
     * @const
     */
    "in_progress": "in_progress",

    /**
     * value: "requires_action"
     * @const
     */
    "requires_action": "requires_action",

    /**
     * value: "cancelling"
     * @const
     */
    "cancelling": "cancelling",

    /**
     * value: "cancelled"
     * @const
     */
    "cancelled": "cancelled",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed",

    /**
     * value: "expired"
     * @const
     */
    "expired": "expired"
};



export default RunObject;

