/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RunToolCallObject from './RunToolCallObject';

/**
 * The RunObjectRequiredActionSubmitToolOutputs model module.
 * @module model/RunObjectRequiredActionSubmitToolOutputs
 * @version 1.0.1-pre.0
 */
class RunObjectRequiredActionSubmitToolOutputs {
    /**
     * Constructs a new <code>RunObjectRequiredActionSubmitToolOutputs</code>.
     * Details on the tool outputs needed for this run to continue.
     * @alias module:model/RunObjectRequiredActionSubmitToolOutputs
     * @param toolCalls {Array.<module:model/RunToolCallObject>} A list of the relevant tool calls.
     */
    constructor(toolCalls) { 
        
        RunObjectRequiredActionSubmitToolOutputs.initialize(this, toolCalls);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, toolCalls) { 
        obj['tool_calls'] = toolCalls;
    }

    /**
     * Constructs a <code>RunObjectRequiredActionSubmitToolOutputs</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunObjectRequiredActionSubmitToolOutputs} obj Optional instance to populate.
     * @return {module:model/RunObjectRequiredActionSubmitToolOutputs} The populated <code>RunObjectRequiredActionSubmitToolOutputs</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunObjectRequiredActionSubmitToolOutputs();

            if (data.hasOwnProperty('tool_calls')) {
                obj['tool_calls'] = ApiClient.convertToType(data['tool_calls'], [RunToolCallObject]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunObjectRequiredActionSubmitToolOutputs</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunObjectRequiredActionSubmitToolOutputs</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RunObjectRequiredActionSubmitToolOutputs.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['tool_calls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tool_calls'])) {
                throw new Error("Expected the field `tool_calls` to be an array in the JSON data but got " + data['tool_calls']);
            }
            // validate the optional field `tool_calls` (array)
            for (const item of data['tool_calls']) {
                RunToolCallObject.validateJSON(item);
            };
        }

        return true;
    }


}

RunObjectRequiredActionSubmitToolOutputs.RequiredProperties = ["tool_calls"];

/**
 * A list of the relevant tool calls.
 * @member {Array.<module:model/RunToolCallObject>} tool_calls
 */
RunObjectRequiredActionSubmitToolOutputs.prototype['tool_calls'] = undefined;






export default RunObjectRequiredActionSubmitToolOutputs;

