/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner from './RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner';

/**
 * The RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter model module.
 * @module model/RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter
 * @version 1.0.1-pre.0
 */
class RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter {
    /**
     * Constructs a new <code>RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter</code>.
     * The Code Interpreter tool call definition.
     * @alias module:model/RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter
     */
    constructor() { 
        
        RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter} obj Optional instance to populate.
     * @return {module:model/RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter} The populated <code>RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter();

            if (data.hasOwnProperty('input')) {
                obj['input'] = ApiClient.convertToType(data['input'], 'String');
            }
            if (data.hasOwnProperty('outputs')) {
                obj['outputs'] = ApiClient.convertToType(data['outputs'], [RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['input'] && !(typeof data['input'] === 'string' || data['input'] instanceof String)) {
            throw new Error("Expected the field `input` to be a primitive type in the JSON string but got " + data['input']);
        }
        if (data['outputs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputs'])) {
                throw new Error("Expected the field `outputs` to be an array in the JSON data but got " + data['outputs']);
            }
            // validate the optional field `outputs` (array)
            for (const item of data['outputs']) {
                RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The input to the Code Interpreter tool call.
 * @member {String} input
 */
RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter.prototype['input'] = undefined;

/**
 * The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
 * @member {Array.<module:model/RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner>} outputs
 */
RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter.prototype['outputs'] = undefined;






export default RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter;

