/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RunStepCompletionUsage from './RunStepCompletionUsage';
import RunStepObjectLastError from './RunStepObjectLastError';
import RunStepObjectStepDetails from './RunStepObjectStepDetails';

/**
 * The RunStepObject model module.
 * @module model/RunStepObject
 * @version 1.0.1-pre.0
 */
class RunStepObject {
    /**
     * Constructs a new <code>RunStepObject</code>.
     * Represents a step in execution of a run. 
     * @alias module:model/RunStepObject
     * @param id {String} The identifier of the run step, which can be referenced in API endpoints.
     * @param object {module:model/RunStepObject.ObjectEnum} The object type, which is always `thread.run.step`.
     * @param createdAt {Number} The Unix timestamp (in seconds) for when the run step was created.
     * @param assistantId {String} The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
     * @param threadId {String} The ID of the [thread](/docs/api-reference/threads) that was run.
     * @param runId {String} The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
     * @param type {module:model/RunStepObject.TypeEnum} The type of run step, which can be either `message_creation` or `tool_calls`.
     * @param status {module:model/RunStepObject.StatusEnum} The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
     * @param stepDetails {module:model/RunStepObjectStepDetails} 
     * @param lastError {module:model/RunStepObjectLastError} 
     * @param expiredAt {Number} The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
     * @param cancelledAt {Number} The Unix timestamp (in seconds) for when the run step was cancelled.
     * @param failedAt {Number} The Unix timestamp (in seconds) for when the run step failed.
     * @param completedAt {Number} The Unix timestamp (in seconds) for when the run step completed.
     * @param metadata {Object} Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
     * @param usage {module:model/RunStepCompletionUsage} 
     */
    constructor(id, object, createdAt, assistantId, threadId, runId, type, status, stepDetails, lastError, expiredAt, cancelledAt, failedAt, completedAt, metadata, usage) { 
        
        RunStepObject.initialize(this, id, object, createdAt, assistantId, threadId, runId, type, status, stepDetails, lastError, expiredAt, cancelledAt, failedAt, completedAt, metadata, usage);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, object, createdAt, assistantId, threadId, runId, type, status, stepDetails, lastError, expiredAt, cancelledAt, failedAt, completedAt, metadata, usage) { 
        obj['id'] = id;
        obj['object'] = object;
        obj['created_at'] = createdAt;
        obj['assistant_id'] = assistantId;
        obj['thread_id'] = threadId;
        obj['run_id'] = runId;
        obj['type'] = type;
        obj['status'] = status;
        obj['step_details'] = stepDetails;
        obj['last_error'] = lastError;
        obj['expired_at'] = expiredAt;
        obj['cancelled_at'] = cancelledAt;
        obj['failed_at'] = failedAt;
        obj['completed_at'] = completedAt;
        obj['metadata'] = metadata;
        obj['usage'] = usage;
    }

    /**
     * Constructs a <code>RunStepObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunStepObject} obj Optional instance to populate.
     * @return {module:model/RunStepObject} The populated <code>RunStepObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunStepObject();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Number');
            }
            if (data.hasOwnProperty('assistant_id')) {
                obj['assistant_id'] = ApiClient.convertToType(data['assistant_id'], 'String');
            }
            if (data.hasOwnProperty('thread_id')) {
                obj['thread_id'] = ApiClient.convertToType(data['thread_id'], 'String');
            }
            if (data.hasOwnProperty('run_id')) {
                obj['run_id'] = ApiClient.convertToType(data['run_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('step_details')) {
                obj['step_details'] = RunStepObjectStepDetails.constructFromObject(data['step_details']);
            }
            if (data.hasOwnProperty('last_error')) {
                obj['last_error'] = RunStepObjectLastError.constructFromObject(data['last_error']);
            }
            if (data.hasOwnProperty('expired_at')) {
                obj['expired_at'] = ApiClient.convertToType(data['expired_at'], 'Number');
            }
            if (data.hasOwnProperty('cancelled_at')) {
                obj['cancelled_at'] = ApiClient.convertToType(data['cancelled_at'], 'Number');
            }
            if (data.hasOwnProperty('failed_at')) {
                obj['failed_at'] = ApiClient.convertToType(data['failed_at'], 'Number');
            }
            if (data.hasOwnProperty('completed_at')) {
                obj['completed_at'] = ApiClient.convertToType(data['completed_at'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = RunStepCompletionUsage.constructFromObject(data['usage']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunStepObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunStepObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RunStepObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['assistant_id'] && !(typeof data['assistant_id'] === 'string' || data['assistant_id'] instanceof String)) {
            throw new Error("Expected the field `assistant_id` to be a primitive type in the JSON string but got " + data['assistant_id']);
        }
        // ensure the json data is a string
        if (data['thread_id'] && !(typeof data['thread_id'] === 'string' || data['thread_id'] instanceof String)) {
            throw new Error("Expected the field `thread_id` to be a primitive type in the JSON string but got " + data['thread_id']);
        }
        // ensure the json data is a string
        if (data['run_id'] && !(typeof data['run_id'] === 'string' || data['run_id'] instanceof String)) {
            throw new Error("Expected the field `run_id` to be a primitive type in the JSON string but got " + data['run_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `step_details`
        if (data['step_details']) { // data not null
          RunStepObjectStepDetails.validateJSON(data['step_details']);
        }
        // validate the optional field `last_error`
        if (data['last_error']) { // data not null
          RunStepObjectLastError.validateJSON(data['last_error']);
        }
        // validate the optional field `usage`
        if (data['usage']) { // data not null
          RunStepCompletionUsage.validateJSON(data['usage']);
        }

        return true;
    }


}

RunStepObject.RequiredProperties = ["id", "object", "created_at", "assistant_id", "thread_id", "run_id", "type", "status", "step_details", "last_error", "expired_at", "cancelled_at", "failed_at", "completed_at", "metadata", "usage"];

/**
 * The identifier of the run step, which can be referenced in API endpoints.
 * @member {String} id
 */
RunStepObject.prototype['id'] = undefined;

/**
 * The object type, which is always `thread.run.step`.
 * @member {module:model/RunStepObject.ObjectEnum} object
 */
RunStepObject.prototype['object'] = undefined;

/**
 * The Unix timestamp (in seconds) for when the run step was created.
 * @member {Number} created_at
 */
RunStepObject.prototype['created_at'] = undefined;

/**
 * The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
 * @member {String} assistant_id
 */
RunStepObject.prototype['assistant_id'] = undefined;

/**
 * The ID of the [thread](/docs/api-reference/threads) that was run.
 * @member {String} thread_id
 */
RunStepObject.prototype['thread_id'] = undefined;

/**
 * The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
 * @member {String} run_id
 */
RunStepObject.prototype['run_id'] = undefined;

/**
 * The type of run step, which can be either `message_creation` or `tool_calls`.
 * @member {module:model/RunStepObject.TypeEnum} type
 */
RunStepObject.prototype['type'] = undefined;

/**
 * The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
 * @member {module:model/RunStepObject.StatusEnum} status
 */
RunStepObject.prototype['status'] = undefined;

/**
 * @member {module:model/RunStepObjectStepDetails} step_details
 */
RunStepObject.prototype['step_details'] = undefined;

/**
 * @member {module:model/RunStepObjectLastError} last_error
 */
RunStepObject.prototype['last_error'] = undefined;

/**
 * The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
 * @member {Number} expired_at
 */
RunStepObject.prototype['expired_at'] = undefined;

/**
 * The Unix timestamp (in seconds) for when the run step was cancelled.
 * @member {Number} cancelled_at
 */
RunStepObject.prototype['cancelled_at'] = undefined;

/**
 * The Unix timestamp (in seconds) for when the run step failed.
 * @member {Number} failed_at
 */
RunStepObject.prototype['failed_at'] = undefined;

/**
 * The Unix timestamp (in seconds) for when the run step completed.
 * @member {Number} completed_at
 */
RunStepObject.prototype['completed_at'] = undefined;

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
 * @member {Object} metadata
 */
RunStepObject.prototype['metadata'] = undefined;

/**
 * @member {module:model/RunStepCompletionUsage} usage
 */
RunStepObject.prototype['usage'] = undefined;





/**
 * Allowed values for the <code>object</code> property.
 * @enum {String}
 * @readonly
 */
RunStepObject['ObjectEnum'] = {

    /**
     * value: "thread.run.step"
     * @const
     */
    "thread.run.step": "thread.run.step"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RunStepObject['TypeEnum'] = {

    /**
     * value: "message_creation"
     * @const
     */
    "message_creation": "message_creation",

    /**
     * value: "tool_calls"
     * @const
     */
    "tool_calls": "tool_calls"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
RunStepObject['StatusEnum'] = {

    /**
     * value: "in_progress"
     * @const
     */
    "in_progress": "in_progress",

    /**
     * value: "cancelled"
     * @const
     */
    "cancelled": "cancelled",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed",

    /**
     * value: "expired"
     * @const
     */
    "expired": "expired"
};



export default RunStepObject;

