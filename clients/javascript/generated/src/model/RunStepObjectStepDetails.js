/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RunStepDetailsMessageCreationObject from './RunStepDetailsMessageCreationObject';
import RunStepDetailsMessageCreationObjectMessageCreation from './RunStepDetailsMessageCreationObjectMessageCreation';
import RunStepDetailsToolCallsObject from './RunStepDetailsToolCallsObject';
import RunStepDetailsToolCallsObjectToolCallsInner from './RunStepDetailsToolCallsObjectToolCallsInner';

/**
 * The RunStepObjectStepDetails model module.
 * @module model/RunStepObjectStepDetails
 * @version 1.0.1-pre.0
 */
class RunStepObjectStepDetails {
    /**
     * Constructs a new <code>RunStepObjectStepDetails</code>.
     * The details of the run step.
     * @alias module:model/RunStepObjectStepDetails
     * @param {(module:model/RunStepDetailsMessageCreationObject|module:model/RunStepDetailsToolCallsObject)} instance The actual instance to initialize RunStepObjectStepDetails.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "RunStepDetailsMessageCreationObject") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RunStepDetailsMessageCreationObject.validateJSON(instance); // throw an exception if no match
                // create RunStepDetailsMessageCreationObject from JS object
                this.actualInstance = RunStepDetailsMessageCreationObject.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RunStepDetailsMessageCreationObject
            errorMessages.push("Failed to construct RunStepDetailsMessageCreationObject: " + err)
        }

        try {
            if (typeof instance === "RunStepDetailsToolCallsObject") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RunStepDetailsToolCallsObject.validateJSON(instance); // throw an exception if no match
                // create RunStepDetailsToolCallsObject from JS object
                this.actualInstance = RunStepDetailsToolCallsObject.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RunStepDetailsToolCallsObject
            errorMessages.push("Failed to construct RunStepDetailsToolCallsObject: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `RunStepObjectStepDetails` with oneOf schemas RunStepDetailsMessageCreationObject, RunStepDetailsToolCallsObject. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `RunStepObjectStepDetails` with oneOf schemas RunStepDetailsMessageCreationObject, RunStepDetailsToolCallsObject. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>RunStepObjectStepDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunStepObjectStepDetails} obj Optional instance to populate.
     * @return {module:model/RunStepObjectStepDetails} The populated <code>RunStepObjectStepDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        return new RunStepObjectStepDetails(data);
    }

    /**
     * Gets the actual instance, which can be <code>RunStepDetailsMessageCreationObject</code>, <code>RunStepDetailsToolCallsObject</code>.
     * @return {(module:model/RunStepDetailsMessageCreationObject|module:model/RunStepDetailsToolCallsObject)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>RunStepDetailsMessageCreationObject</code>, <code>RunStepDetailsToolCallsObject</code>.
     * @param {(module:model/RunStepDetailsMessageCreationObject|module:model/RunStepDetailsToolCallsObject)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = RunStepObjectStepDetails.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of RunStepObjectStepDetails from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/RunStepObjectStepDetails} An instance of RunStepObjectStepDetails.
     */
    static fromJSON = function(json_string){
        return RunStepObjectStepDetails.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Always `message_creation`.
 * @member {module:model/RunStepObjectStepDetails.TypeEnum} type
 */
RunStepObjectStepDetails.prototype['type'] = undefined;

/**
 * @member {module:model/RunStepDetailsMessageCreationObjectMessageCreation} message_creation
 */
RunStepObjectStepDetails.prototype['message_creation'] = undefined;

/**
 * An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`. 
 * @member {Array.<module:model/RunStepDetailsToolCallsObjectToolCallsInner>} tool_calls
 */
RunStepObjectStepDetails.prototype['tool_calls'] = undefined;


RunStepObjectStepDetails.OneOf = ["RunStepDetailsMessageCreationObject", "RunStepDetailsToolCallsObject"];

export default RunStepObjectStepDetails;

