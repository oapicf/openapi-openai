/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubmitToolOutputsRunRequestToolOutputsInner from './SubmitToolOutputsRunRequestToolOutputsInner';

/**
 * The SubmitToolOutputsRunRequest model module.
 * @module model/SubmitToolOutputsRunRequest
 * @version 1.0.1-pre.0
 */
class SubmitToolOutputsRunRequest {
    /**
     * Constructs a new <code>SubmitToolOutputsRunRequest</code>.
     * @alias module:model/SubmitToolOutputsRunRequest
     * @param toolOutputs {Array.<module:model/SubmitToolOutputsRunRequestToolOutputsInner>} A list of tools for which the outputs are being submitted.
     */
    constructor(toolOutputs) { 
        
        SubmitToolOutputsRunRequest.initialize(this, toolOutputs);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, toolOutputs) { 
        obj['tool_outputs'] = toolOutputs;
    }

    /**
     * Constructs a <code>SubmitToolOutputsRunRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubmitToolOutputsRunRequest} obj Optional instance to populate.
     * @return {module:model/SubmitToolOutputsRunRequest} The populated <code>SubmitToolOutputsRunRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubmitToolOutputsRunRequest();

            if (data.hasOwnProperty('tool_outputs')) {
                obj['tool_outputs'] = ApiClient.convertToType(data['tool_outputs'], [SubmitToolOutputsRunRequestToolOutputsInner]);
            }
            if (data.hasOwnProperty('stream')) {
                obj['stream'] = ApiClient.convertToType(data['stream'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubmitToolOutputsRunRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubmitToolOutputsRunRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubmitToolOutputsRunRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['tool_outputs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tool_outputs'])) {
                throw new Error("Expected the field `tool_outputs` to be an array in the JSON data but got " + data['tool_outputs']);
            }
            // validate the optional field `tool_outputs` (array)
            for (const item of data['tool_outputs']) {
                SubmitToolOutputsRunRequestToolOutputsInner.validateJSON(item);
            };
        }

        return true;
    }


}

SubmitToolOutputsRunRequest.RequiredProperties = ["tool_outputs"];

/**
 * A list of tools for which the outputs are being submitted.
 * @member {Array.<module:model/SubmitToolOutputsRunRequestToolOutputsInner>} tool_outputs
 */
SubmitToolOutputsRunRequest.prototype['tool_outputs'] = undefined;

/**
 * If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message. 
 * @member {Boolean} stream
 */
SubmitToolOutputsRunRequest.prototype['stream'] = undefined;






export default SubmitToolOutputsRunRequest;

