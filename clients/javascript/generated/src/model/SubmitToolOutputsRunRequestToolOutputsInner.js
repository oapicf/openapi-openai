/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubmitToolOutputsRunRequestToolOutputsInner model module.
 * @module model/SubmitToolOutputsRunRequestToolOutputsInner
 * @version 1.0.1-pre.0
 */
class SubmitToolOutputsRunRequestToolOutputsInner {
    /**
     * Constructs a new <code>SubmitToolOutputsRunRequestToolOutputsInner</code>.
     * @alias module:model/SubmitToolOutputsRunRequestToolOutputsInner
     */
    constructor() { 
        
        SubmitToolOutputsRunRequestToolOutputsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubmitToolOutputsRunRequestToolOutputsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubmitToolOutputsRunRequestToolOutputsInner} obj Optional instance to populate.
     * @return {module:model/SubmitToolOutputsRunRequestToolOutputsInner} The populated <code>SubmitToolOutputsRunRequestToolOutputsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubmitToolOutputsRunRequestToolOutputsInner();

            if (data.hasOwnProperty('tool_call_id')) {
                obj['tool_call_id'] = ApiClient.convertToType(data['tool_call_id'], 'String');
            }
            if (data.hasOwnProperty('output')) {
                obj['output'] = ApiClient.convertToType(data['output'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubmitToolOutputsRunRequestToolOutputsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubmitToolOutputsRunRequestToolOutputsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['tool_call_id'] && !(typeof data['tool_call_id'] === 'string' || data['tool_call_id'] instanceof String)) {
            throw new Error("Expected the field `tool_call_id` to be a primitive type in the JSON string but got " + data['tool_call_id']);
        }
        // ensure the json data is a string
        if (data['output'] && !(typeof data['output'] === 'string' || data['output'] instanceof String)) {
            throw new Error("Expected the field `output` to be a primitive type in the JSON string but got " + data['output']);
        }

        return true;
    }


}



/**
 * The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
 * @member {String} tool_call_id
 */
SubmitToolOutputsRunRequestToolOutputsInner.prototype['tool_call_id'] = undefined;

/**
 * The output of the tool call to be submitted to continue the run.
 * @member {String} output
 */
SubmitToolOutputsRunRequestToolOutputsInner.prototype['output'] = undefined;






export default SubmitToolOutputsRunRequestToolOutputsInner;

