/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenapiOpenai);
  }
}(this, function(expect, OpenapiOpenai) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenapiOpenai.AssistantsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AssistantsApi', function() {
    describe('cancelRun', function() {
      it('should call cancelRun successfully', function(done) {
        //uncomment below and update the code to test cancelRun
        //instance.cancelRun(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAssistant', function() {
      it('should call createAssistant successfully', function(done) {
        //uncomment below and update the code to test createAssistant
        //instance.createAssistant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAssistantFile', function() {
      it('should call createAssistantFile successfully', function(done) {
        //uncomment below and update the code to test createAssistantFile
        //instance.createAssistantFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMessage', function() {
      it('should call createMessage successfully', function(done) {
        //uncomment below and update the code to test createMessage
        //instance.createMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRun', function() {
      it('should call createRun successfully', function(done) {
        //uncomment below and update the code to test createRun
        //instance.createRun(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createThread', function() {
      it('should call createThread successfully', function(done) {
        //uncomment below and update the code to test createThread
        //instance.createThread(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createThreadAndRun', function() {
      it('should call createThreadAndRun successfully', function(done) {
        //uncomment below and update the code to test createThreadAndRun
        //instance.createThreadAndRun(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAssistant', function() {
      it('should call deleteAssistant successfully', function(done) {
        //uncomment below and update the code to test deleteAssistant
        //instance.deleteAssistant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAssistantFile', function() {
      it('should call deleteAssistantFile successfully', function(done) {
        //uncomment below and update the code to test deleteAssistantFile
        //instance.deleteAssistantFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteThread', function() {
      it('should call deleteThread successfully', function(done) {
        //uncomment below and update the code to test deleteThread
        //instance.deleteThread(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAssistant', function() {
      it('should call getAssistant successfully', function(done) {
        //uncomment below and update the code to test getAssistant
        //instance.getAssistant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAssistantFile', function() {
      it('should call getAssistantFile successfully', function(done) {
        //uncomment below and update the code to test getAssistantFile
        //instance.getAssistantFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMessage', function() {
      it('should call getMessage successfully', function(done) {
        //uncomment below and update the code to test getMessage
        //instance.getMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMessageFile', function() {
      it('should call getMessageFile successfully', function(done) {
        //uncomment below and update the code to test getMessageFile
        //instance.getMessageFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRun', function() {
      it('should call getRun successfully', function(done) {
        //uncomment below and update the code to test getRun
        //instance.getRun(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRunStep', function() {
      it('should call getRunStep successfully', function(done) {
        //uncomment below and update the code to test getRunStep
        //instance.getRunStep(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getThread', function() {
      it('should call getThread successfully', function(done) {
        //uncomment below and update the code to test getThread
        //instance.getThread(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAssistantFiles', function() {
      it('should call listAssistantFiles successfully', function(done) {
        //uncomment below and update the code to test listAssistantFiles
        //instance.listAssistantFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAssistants', function() {
      it('should call listAssistants successfully', function(done) {
        //uncomment below and update the code to test listAssistants
        //instance.listAssistants(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMessageFiles', function() {
      it('should call listMessageFiles successfully', function(done) {
        //uncomment below and update the code to test listMessageFiles
        //instance.listMessageFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMessages', function() {
      it('should call listMessages successfully', function(done) {
        //uncomment below and update the code to test listMessages
        //instance.listMessages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRunSteps', function() {
      it('should call listRunSteps successfully', function(done) {
        //uncomment below and update the code to test listRunSteps
        //instance.listRunSteps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRuns', function() {
      it('should call listRuns successfully', function(done) {
        //uncomment below and update the code to test listRuns
        //instance.listRuns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyAssistant', function() {
      it('should call modifyAssistant successfully', function(done) {
        //uncomment below and update the code to test modifyAssistant
        //instance.modifyAssistant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyMessage', function() {
      it('should call modifyMessage successfully', function(done) {
        //uncomment below and update the code to test modifyMessage
        //instance.modifyMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyRun', function() {
      it('should call modifyRun successfully', function(done) {
        //uncomment below and update the code to test modifyRun
        //instance.modifyRun(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyThread', function() {
      it('should call modifyThread successfully', function(done) {
        //uncomment below and update the code to test modifyThread
        //instance.modifyThread(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('submitToolOuputsToRun', function() {
      it('should call submitToolOuputsToRun successfully', function(done) {
        //uncomment below and update the code to test submitToolOuputsToRun
        //instance.submitToolOuputsToRun(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
