/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenapiOpenai);
  }
}(this, function(expect, OpenapiOpenai) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenapiOpenai.OpenAIApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OpenAIApi', function() {
    describe('cancelFineTune', function() {
      it('should call cancelFineTune successfully', function(done) {
        //uncomment below and update the code to test cancelFineTune
        //instance.cancelFineTune(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createChatCompletion', function() {
      it('should call createChatCompletion successfully', function(done) {
        //uncomment below and update the code to test createChatCompletion
        //instance.createChatCompletion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCompletion', function() {
      it('should call createCompletion successfully', function(done) {
        //uncomment below and update the code to test createCompletion
        //instance.createCompletion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEdit', function() {
      it('should call createEdit successfully', function(done) {
        //uncomment below and update the code to test createEdit
        //instance.createEdit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEmbedding', function() {
      it('should call createEmbedding successfully', function(done) {
        //uncomment below and update the code to test createEmbedding
        //instance.createEmbedding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFile', function() {
      it('should call createFile successfully', function(done) {
        //uncomment below and update the code to test createFile
        //instance.createFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFineTune', function() {
      it('should call createFineTune successfully', function(done) {
        //uncomment below and update the code to test createFineTune
        //instance.createFineTune(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createImage', function() {
      it('should call createImage successfully', function(done) {
        //uncomment below and update the code to test createImage
        //instance.createImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createImageEdit', function() {
      it('should call createImageEdit successfully', function(done) {
        //uncomment below and update the code to test createImageEdit
        //instance.createImageEdit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createImageVariation', function() {
      it('should call createImageVariation successfully', function(done) {
        //uncomment below and update the code to test createImageVariation
        //instance.createImageVariation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModeration', function() {
      it('should call createModeration successfully', function(done) {
        //uncomment below and update the code to test createModeration
        //instance.createModeration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTranscription', function() {
      it('should call createTranscription successfully', function(done) {
        //uncomment below and update the code to test createTranscription
        //instance.createTranscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTranslation', function() {
      it('should call createTranslation successfully', function(done) {
        //uncomment below and update the code to test createTranslation
        //instance.createTranslation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFile', function() {
      it('should call deleteFile successfully', function(done) {
        //uncomment below and update the code to test deleteFile
        //instance.deleteFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteModel', function() {
      it('should call deleteModel successfully', function(done) {
        //uncomment below and update the code to test deleteModel
        //instance.deleteModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadFile', function() {
      it('should call downloadFile successfully', function(done) {
        //uncomment below and update the code to test downloadFile
        //instance.downloadFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFiles', function() {
      it('should call listFiles successfully', function(done) {
        //uncomment below and update the code to test listFiles
        //instance.listFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFineTuneEvents', function() {
      it('should call listFineTuneEvents successfully', function(done) {
        //uncomment below and update the code to test listFineTuneEvents
        //instance.listFineTuneEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFineTunes', function() {
      it('should call listFineTunes successfully', function(done) {
        //uncomment below and update the code to test listFineTunes
        //instance.listFineTunes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listModels', function() {
      it('should call listModels successfully', function(done) {
        //uncomment below and update the code to test listModels
        //instance.listModels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveFile', function() {
      it('should call retrieveFile successfully', function(done) {
        //uncomment below and update the code to test retrieveFile
        //instance.retrieveFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveFineTune', function() {
      it('should call retrieveFineTune successfully', function(done) {
        //uncomment below and update the code to test retrieveFineTune
        //instance.retrieveFineTune(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveModel', function() {
      it('should call retrieveModel successfully', function(done) {
        //uncomment below and update the code to test retrieveModel
        //instance.retrieveModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
