package org.openapitools.model;

import com.fasterxml.jackson.annotation.JsonTypeName;
import io.swagger.annotations.ApiModel;
import javax.validation.constraints.*;
import javax.validation.Valid;

import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;


/**
 * The name and arguments of a function that should be called, as generated by the model.
 */
@ApiModel(description="The name and arguments of a function that should be called, as generated by the model.")

public class ChatCompletionRequestMessageFunctionCall  {
  
 /**
  * The name of the function to call.
  */
  @ApiModelProperty(value = "The name of the function to call.")
  private String name;

 /**
  * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
  */
  @ApiModelProperty(value = "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.")
  private String arguments;
 /**
  * The name of the function to call.
  * @return name
  */
  @JsonProperty("name")
  public String getName() {
    return name;
  }

  /**
   * Sets the <code>name</code> property.
   */
 public void setName(String name) {
    this.name = name;
  }

  /**
   * Sets the <code>name</code> property.
   */
  public ChatCompletionRequestMessageFunctionCall name(String name) {
    this.name = name;
    return this;
  }

 /**
  * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
  * @return arguments
  */
  @JsonProperty("arguments")
  public String getArguments() {
    return arguments;
  }

  /**
   * Sets the <code>arguments</code> property.
   */
 public void setArguments(String arguments) {
    this.arguments = arguments;
  }

  /**
   * Sets the <code>arguments</code> property.
   */
  public ChatCompletionRequestMessageFunctionCall arguments(String arguments) {
    this.arguments = arguments;
    return this;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChatCompletionRequestMessageFunctionCall chatCompletionRequestMessageFunctionCall = (ChatCompletionRequestMessageFunctionCall) o;
    return Objects.equals(this.name, chatCompletionRequestMessageFunctionCall.name) &&
        Objects.equals(this.arguments, chatCompletionRequestMessageFunctionCall.arguments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, arguments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChatCompletionRequestMessageFunctionCall {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

