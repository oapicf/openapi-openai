/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.api;

import org.openapitools.model.AssistantFileObject;
import org.openapitools.model.AssistantObject;
import org.openapitools.model.CreateAssistantFileRequest;
import org.openapitools.model.CreateAssistantRequest;
import org.openapitools.model.CreateMessageRequest;
import org.openapitools.model.CreateRunRequest;
import org.openapitools.model.CreateThreadAndRunRequest;
import org.openapitools.model.CreateThreadRequest;
import org.openapitools.model.DeleteAssistantFileResponse;
import org.openapitools.model.DeleteAssistantResponse;
import org.openapitools.model.DeleteThreadResponse;
import org.openapitools.model.ListAssistantFilesResponse;
import org.openapitools.model.ListAssistantsResponse;
import org.openapitools.model.ListMessageFilesResponse;
import org.openapitools.model.ListMessagesResponse;
import org.openapitools.model.ListRunStepsResponse;
import org.openapitools.model.ListRunsResponse;
import org.openapitools.model.MessageFileObject;
import org.openapitools.model.MessageObject;
import org.openapitools.model.ModifyAssistantRequest;
import org.openapitools.model.ModifyMessageRequest;
import org.openapitools.model.ModifyRunRequest;
import org.openapitools.model.ModifyThreadRequest;
import org.openapitools.model.RunObject;
import org.openapitools.model.RunStepObject;
import org.openapitools.model.SubmitToolOutputsRunRequest;
import org.openapitools.model.ThreadObject;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;
import org.apache.cxf.jaxrs.ext.multipart.Attachment;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;
import com.fasterxml.jackson.jaxrs.xml.JacksonXMLProvider;
import org.apache.cxf.jaxrs.provider.MultipartProvider;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * OpenAI API
 *
 * <p>The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * API tests for AssistantsApi.
 */
public class AssistantsApiTest {

    private AssistantsApi api;

    @Before
    public void setup() {
        List<?> providers = Arrays.asList(new JacksonJsonProvider(), new JacksonXMLProvider(), new MultipartProvider());

        api = JAXRSClientFactory.create("https://api.openai.com/v1", AssistantsApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client);
    }

    
    /**
     * Cancels a run that is &#x60;in_progress&#x60;.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void cancelRunTest() throws Exception {
        // TODO: assign appropriate parameter values
        String threadId = null;
        String runId = null;

        // TODO: delete this line and uncomment the next
        // RunObject response = api.cancelRun(threadId, runId);
        // TODO: complete test assertions
    }
    
    /**
     * Create an assistant with a model and instructions.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void createAssistantTest() throws Exception {
        // TODO: assign appropriate parameter values
        CreateAssistantRequest createAssistantRequest = null;

        // TODO: delete this line and uncomment the next
        // AssistantObject response = api.createAssistant(createAssistantRequest);
        // TODO: complete test assertions
    }
    
    /**
     * Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void createAssistantFileTest() throws Exception {
        // TODO: assign appropriate parameter values
        String assistantId = null;
        CreateAssistantFileRequest createAssistantFileRequest = null;

        // TODO: delete this line and uncomment the next
        // AssistantFileObject response = api.createAssistantFile(assistantId, createAssistantFileRequest);
        // TODO: complete test assertions
    }
    
    /**
     * Create a message.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void createMessageTest() throws Exception {
        // TODO: assign appropriate parameter values
        String threadId = null;
        CreateMessageRequest createMessageRequest = null;

        // TODO: delete this line and uncomment the next
        // MessageObject response = api.createMessage(threadId, createMessageRequest);
        // TODO: complete test assertions
    }
    
    /**
     * Create a run.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void createRunTest() throws Exception {
        // TODO: assign appropriate parameter values
        String threadId = null;
        CreateRunRequest createRunRequest = null;

        // TODO: delete this line and uncomment the next
        // RunObject response = api.createRun(threadId, createRunRequest);
        // TODO: complete test assertions
    }
    
    /**
     * Create a thread.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void createThreadTest() throws Exception {
        // TODO: assign appropriate parameter values
        CreateThreadRequest createThreadRequest = null;

        // TODO: delete this line and uncomment the next
        // ThreadObject response = api.createThread(createThreadRequest);
        // TODO: complete test assertions
    }
    
    /**
     * Create a thread and run it in one request.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void createThreadAndRunTest() throws Exception {
        // TODO: assign appropriate parameter values
        CreateThreadAndRunRequest createThreadAndRunRequest = null;

        // TODO: delete this line and uncomment the next
        // RunObject response = api.createThreadAndRun(createThreadAndRunRequest);
        // TODO: complete test assertions
    }
    
    /**
     * Delete an assistant.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void deleteAssistantTest() throws Exception {
        // TODO: assign appropriate parameter values
        String assistantId = null;

        // TODO: delete this line and uncomment the next
        // DeleteAssistantResponse response = api.deleteAssistant(assistantId);
        // TODO: complete test assertions
    }
    
    /**
     * Delete an assistant file.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void deleteAssistantFileTest() throws Exception {
        // TODO: assign appropriate parameter values
        String assistantId = null;
        String fileId = null;

        // TODO: delete this line and uncomment the next
        // DeleteAssistantFileResponse response = api.deleteAssistantFile(assistantId, fileId);
        // TODO: complete test assertions
    }
    
    /**
     * Delete a thread.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void deleteThreadTest() throws Exception {
        // TODO: assign appropriate parameter values
        String threadId = null;

        // TODO: delete this line and uncomment the next
        // DeleteThreadResponse response = api.deleteThread(threadId);
        // TODO: complete test assertions
    }
    
    /**
     * Retrieves an assistant.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void getAssistantTest() throws Exception {
        // TODO: assign appropriate parameter values
        String assistantId = null;

        // TODO: delete this line and uncomment the next
        // AssistantObject response = api.getAssistant(assistantId);
        // TODO: complete test assertions
    }
    
    /**
     * Retrieves an AssistantFile.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void getAssistantFileTest() throws Exception {
        // TODO: assign appropriate parameter values
        String assistantId = null;
        String fileId = null;

        // TODO: delete this line and uncomment the next
        // AssistantFileObject response = api.getAssistantFile(assistantId, fileId);
        // TODO: complete test assertions
    }
    
    /**
     * Retrieve a message.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void getMessageTest() throws Exception {
        // TODO: assign appropriate parameter values
        String threadId = null;
        String messageId = null;

        // TODO: delete this line and uncomment the next
        // MessageObject response = api.getMessage(threadId, messageId);
        // TODO: complete test assertions
    }
    
    /**
     * Retrieves a message file.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void getMessageFileTest() throws Exception {
        // TODO: assign appropriate parameter values
        String threadId = null;
        String messageId = null;
        String fileId = null;

        // TODO: delete this line and uncomment the next
        // MessageFileObject response = api.getMessageFile(threadId, messageId, fileId);
        // TODO: complete test assertions
    }
    
    /**
     * Retrieves a run.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void getRunTest() throws Exception {
        // TODO: assign appropriate parameter values
        String threadId = null;
        String runId = null;

        // TODO: delete this line and uncomment the next
        // RunObject response = api.getRun(threadId, runId);
        // TODO: complete test assertions
    }
    
    /**
     * Retrieves a run step.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void getRunStepTest() throws Exception {
        // TODO: assign appropriate parameter values
        String threadId = null;
        String runId = null;
        String stepId = null;

        // TODO: delete this line and uncomment the next
        // RunStepObject response = api.getRunStep(threadId, runId, stepId);
        // TODO: complete test assertions
    }
    
    /**
     * Retrieves a thread.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void getThreadTest() throws Exception {
        // TODO: assign appropriate parameter values
        String threadId = null;

        // TODO: delete this line and uncomment the next
        // ThreadObject response = api.getThread(threadId);
        // TODO: complete test assertions
    }
    
    /**
     * Returns a list of assistant files.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void listAssistantFilesTest() throws Exception {
        // TODO: assign appropriate parameter values
        String assistantId = null;
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;

        // TODO: delete this line and uncomment the next
        // ListAssistantFilesResponse response = api.listAssistantFiles(assistantId, limit, order, after, before);
        // TODO: complete test assertions
    }
    
    /**
     * Returns a list of assistants.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void listAssistantsTest() throws Exception {
        // TODO: assign appropriate parameter values
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;

        // TODO: delete this line and uncomment the next
        // ListAssistantsResponse response = api.listAssistants(limit, order, after, before);
        // TODO: complete test assertions
    }
    
    /**
     * Returns a list of message files.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void listMessageFilesTest() throws Exception {
        // TODO: assign appropriate parameter values
        String threadId = null;
        String messageId = null;
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;

        // TODO: delete this line and uncomment the next
        // ListMessageFilesResponse response = api.listMessageFiles(threadId, messageId, limit, order, after, before);
        // TODO: complete test assertions
    }
    
    /**
     * Returns a list of messages for a given thread.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void listMessagesTest() throws Exception {
        // TODO: assign appropriate parameter values
        String threadId = null;
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;
        String runId = null;

        // TODO: delete this line and uncomment the next
        // ListMessagesResponse response = api.listMessages(threadId, limit, order, after, before, runId);
        // TODO: complete test assertions
    }
    
    /**
     * Returns a list of run steps belonging to a run.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void listRunStepsTest() throws Exception {
        // TODO: assign appropriate parameter values
        String threadId = null;
        String runId = null;
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;

        // TODO: delete this line and uncomment the next
        // ListRunStepsResponse response = api.listRunSteps(threadId, runId, limit, order, after, before);
        // TODO: complete test assertions
    }
    
    /**
     * Returns a list of runs belonging to a thread.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void listRunsTest() throws Exception {
        // TODO: assign appropriate parameter values
        String threadId = null;
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;

        // TODO: delete this line and uncomment the next
        // ListRunsResponse response = api.listRuns(threadId, limit, order, after, before);
        // TODO: complete test assertions
    }
    
    /**
     * Modifies an assistant.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void modifyAssistantTest() throws Exception {
        // TODO: assign appropriate parameter values
        String assistantId = null;
        ModifyAssistantRequest modifyAssistantRequest = null;

        // TODO: delete this line and uncomment the next
        // AssistantObject response = api.modifyAssistant(assistantId, modifyAssistantRequest);
        // TODO: complete test assertions
    }
    
    /**
     * Modifies a message.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void modifyMessageTest() throws Exception {
        // TODO: assign appropriate parameter values
        String threadId = null;
        String messageId = null;
        ModifyMessageRequest modifyMessageRequest = null;

        // TODO: delete this line and uncomment the next
        // MessageObject response = api.modifyMessage(threadId, messageId, modifyMessageRequest);
        // TODO: complete test assertions
    }
    
    /**
     * Modifies a run.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void modifyRunTest() throws Exception {
        // TODO: assign appropriate parameter values
        String threadId = null;
        String runId = null;
        ModifyRunRequest modifyRunRequest = null;

        // TODO: delete this line and uncomment the next
        // RunObject response = api.modifyRun(threadId, runId, modifyRunRequest);
        // TODO: complete test assertions
    }
    
    /**
     * Modifies a thread.
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void modifyThreadTest() throws Exception {
        // TODO: assign appropriate parameter values
        String threadId = null;
        ModifyThreadRequest modifyThreadRequest = null;

        // TODO: delete this line and uncomment the next
        // ThreadObject response = api.modifyThread(threadId, modifyThreadRequest);
        // TODO: complete test assertions
    }
    
    /**
     * When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void submitToolOuputsToRunTest() throws Exception {
        // TODO: assign appropriate parameter values
        String threadId = null;
        String runId = null;
        SubmitToolOutputsRunRequest submitToolOutputsRunRequest = null;

        // TODO: delete this line and uncomment the next
        // RunObject response = api.submitToolOuputsToRun(threadId, runId, submitToolOutputsRunRequest);
        // TODO: complete test assertions
    }
    
}
