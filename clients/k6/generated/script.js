/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * Generator version: 7.4.0
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "https://api.openai.com/v1";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.

export default function() {
    group("/assistants/{assistant_id}/files", () => {
        let assistantId = 'TODO_EDIT_THE_ASSISTANT_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let before = 'TODO_EDIT_THE_BEFORE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let after = 'TODO_EDIT_THE_AFTER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let order = 'TODO_EDIT_THE_ORDER'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: listAssistantFiles
        {
            let url = BASE_URL + `/assistants/${assistant_id}/files?limit=${limit}&order=${order}&after=${after}&before=${before}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: createAssistantFile
        {
            let url = BASE_URL + `/assistants/${assistant_id}/files`;
            // TODO: edit the parameters of the request body.
            let body = {"fileId": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/files/{file_id}/content", () => {
        let fileId = 'TODO_EDIT_THE_FILE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: downloadFile
        {
            let url = BASE_URL + `/files/${file_id}/content`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/audio/speech", () => {

        // Request No. 1: createSpeech
        {
            let url = BASE_URL + `/audio/speech`;
            // TODO: edit the parameters of the request body.
            let body = {"model": {}, "input": "string", "voice": "string", "responseFormat": "string", "speed": "bigdecimal"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/octet-stream"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/models", () => {

        // Request No. 1: listModels
        {
            let url = BASE_URL + `/models`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints", () => {
        let fineTuningJobId = 'TODO_EDIT_THE_FINE_TUNING_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let after = 'TODO_EDIT_THE_AFTER'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: listFineTuningJobCheckpoints
        {
            let url = BASE_URL + `/fine_tuning/jobs/${fine_tuning_job_id}/checkpoints?after=${after}&limit=${limit}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/threads", () => {

        // Request No. 1: createThread
        {
            let url = BASE_URL + `/threads`;
            // TODO: edit the parameters of the request body.
            let body = {"messages": "list", "metadata": "object"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/chat/completions", () => {

        // Request No. 1: createChatCompletion
        {
            let url = BASE_URL + `/chat/completions`;
            // TODO: edit the parameters of the request body.
            let body = {"messages": "list", "model": {}, "frequencyPenalty": "bigdecimal", "logitBias": "map", "logprobs": "boolean", "topLogprobs": "integer", "maxTokens": "integer", "n": "integer", "presencePenalty": "bigdecimal", "responseFormat": {"type": "string"}, "seed": "integer", "stop": {}, "stream": "boolean", "temperature": "bigdecimal", "topP": "bigdecimal", "tools": "list", "toolChoice": {"type": "string", "function": "chatcompletionnamedtoolchoice_function"}, "user": "string", "functionCall": {"name": "string"}, "functions": "list"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/assistants/{assistant_id}", () => {
        let assistantId = 'TODO_EDIT_THE_ASSISTANT_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getAssistant
        {
            let url = BASE_URL + `/assistants/${assistant_id}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: deleteAssistant
        {
            let url = BASE_URL + `/assistants/${assistant_id}`;
            let request = http.del(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/embeddings", () => {

        // Request No. 1: createEmbedding
        {
            let url = BASE_URL + `/embeddings`;
            // TODO: edit the parameters of the request body.
            let body = {"input": {}, "model": {}, "encodingFormat": "string", "dimensions": "integer", "user": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/completions", () => {

        // Request No. 1: createCompletion
        {
            let url = BASE_URL + `/completions`;
            // TODO: edit the parameters of the request body.
            let body = {"model": {}, "prompt": {}, "bestOf": "integer", "echo": "boolean", "frequencyPenalty": "bigdecimal", "logitBias": "map", "logprobs": "integer", "maxTokens": "integer", "n": "integer", "presencePenalty": "bigdecimal", "seed": "integer", "stop": {}, "stream": "boolean", "suffix": "string", "temperature": "bigdecimal", "topP": "bigdecimal", "user": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/threads/{thread_id}/messages/{message_id}/files/{file_id}", () => {
        let threadId = 'TODO_EDIT_THE_THREAD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let messageId = 'TODO_EDIT_THE_MESSAGE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let fileId = 'TODO_EDIT_THE_FILE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getMessageFile
        {
            let url = BASE_URL + `/threads/${thread_id}/messages/${message_id}/files/${file_id}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/threads/{thread_id}/runs/{run_id}/steps/{step_id}", () => {
        let threadId = 'TODO_EDIT_THE_THREAD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let stepId = 'TODO_EDIT_THE_STEP_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let runId = 'TODO_EDIT_THE_RUN_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getRunStep
        {
            let url = BASE_URL + `/threads/${thread_id}/runs/${run_id}/steps/${step_id}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/audio/transcriptions", () => {

        // Request No. 1: createTranscription
        {
            let url = BASE_URL + `/audio/transcriptions`;
            // TODO: edit the parameters of the request body.
            let body = {"file": http.file(open("/path/to/file.bin", "b"), "test.bin"), "model": {}, "language": "string", "prompt": "string", "responseFormat": "string", "temperature": "bigdecimal", "timestampGranularitiesLeft_Square_BracketRight_Square_Bracket": "list"};
            let params = {headers: {"Content-Type": "multipart/form-data", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/models/{model}", () => {
        let model = 'TODO_EDIT_THE_MODEL'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: retrieveModel
        {
            let url = BASE_URL + `/models/${model}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: deleteModel
        {
            let url = BASE_URL + `/models/${model}`;
            let request = http.del(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/images/edits", () => {

        // Request No. 1: createImageEdit
        {
            let url = BASE_URL + `/images/edits`;
            // TODO: edit the parameters of the request body.
            let body = {"image": http.file(open("/path/to/file.bin", "b"), "test.bin"), "prompt": "string", "mask": http.file(open("/path/to/file.bin", "b"), "test.bin"), "model": {}, "n": "integer", "size": "string", "responseFormat": "string", "user": "string"};
            let params = {headers: {"Content-Type": "multipart/form-data", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/files/{file_id}", () => {
        let fileId = 'TODO_EDIT_THE_FILE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: retrieveFile
        {
            let url = BASE_URL + `/files/${file_id}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: deleteFile
        {
            let url = BASE_URL + `/files/${file_id}`;
            let request = http.del(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/assistants/{assistant_id}/files/{file_id}", () => {
        let assistantId = 'TODO_EDIT_THE_ASSISTANT_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let fileId = 'TODO_EDIT_THE_FILE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getAssistantFile
        {
            let url = BASE_URL + `/assistants/${assistant_id}/files/${file_id}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: deleteAssistantFile
        {
            let url = BASE_URL + `/assistants/${assistant_id}/files/${file_id}`;
            let request = http.del(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/fine_tuning/jobs/{fine_tuning_job_id}/cancel", () => {
        let fineTuningJobId = 'TODO_EDIT_THE_FINE_TUNING_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: cancelFineTuningJob
        {
            let url = BASE_URL + `/fine_tuning/jobs/${fine_tuning_job_id}/cancel`;
            let request = http.post(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/threads/{thread_id}/messages/{message_id}", () => {
        let threadId = 'TODO_EDIT_THE_THREAD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let messageId = 'TODO_EDIT_THE_MESSAGE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getMessage
        {
            let url = BASE_URL + `/threads/${thread_id}/messages/${message_id}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: modifyMessage
        {
            let url = BASE_URL + `/threads/${thread_id}/messages/${message_id}`;
            // TODO: edit the parameters of the request body.
            let body = {"metadata": "object"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/threads/{thread_id}/messages", () => {
        let threadId = 'TODO_EDIT_THE_THREAD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let before = 'TODO_EDIT_THE_BEFORE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let after = 'TODO_EDIT_THE_AFTER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let runId = 'TODO_EDIT_THE_RUN_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let order = 'TODO_EDIT_THE_ORDER'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: listMessages
        {
            let url = BASE_URL + `/threads/${thread_id}/messages?limit=${limit}&order=${order}&after=${after}&before=${before}&run_id=${run_id}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: createMessage
        {
            let url = BASE_URL + `/threads/${thread_id}/messages`;
            // TODO: edit the parameters of the request body.
            let body = {"role": "string", "content": "string", "fileIds": "list", "metadata": "object"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/threads/{thread_id}/runs/{run_id}/cancel", () => {
        let threadId = 'TODO_EDIT_THE_THREAD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let runId = 'TODO_EDIT_THE_RUN_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: cancelRun
        {
            let url = BASE_URL + `/threads/${thread_id}/runs/${run_id}/cancel`;
            let request = http.post(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/images/generations", () => {

        // Request No. 1: createImage
        {
            let url = BASE_URL + `/images/generations`;
            // TODO: edit the parameters of the request body.
            let body = {"prompt": "string", "model": {}, "n": "integer", "quality": "string", "responseFormat": "string", "size": "string", "style": "string", "user": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/threads/{thread_id}/runs", () => {
        let threadId = 'TODO_EDIT_THE_THREAD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let before = 'TODO_EDIT_THE_BEFORE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let after = 'TODO_EDIT_THE_AFTER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let order = 'TODO_EDIT_THE_ORDER'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: listRuns
        {
            let url = BASE_URL + `/threads/${thread_id}/runs?limit=${limit}&order=${order}&after=${after}&before=${before}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: createRun
        {
            let url = BASE_URL + `/threads/${thread_id}/runs`;
            // TODO: edit the parameters of the request body.
            let body = {"assistantId": "string", "model": {}, "instructions": "string", "additionalInstructions": "string", "additionalMessages": "list", "tools": "list", "metadata": "object", "temperature": "bigdecimal", "stream": "boolean", "maxPromptTokens": "integer", "maxCompletionTokens": "integer", "truncationStrategy": {"type": "string", "lastMessages": "integer"}, "toolChoice": {"type": "string", "function": "chatcompletionnamedtoolchoice_function"}, "responseFormat": {"type": "string"}};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/images/variations", () => {

        // Request No. 1: createImageVariation
        {
            let url = BASE_URL + `/images/variations`;
            // TODO: edit the parameters of the request body.
            let body = {"image": http.file(open("/path/to/file.bin", "b"), "test.bin"), "model": {}, "n": "integer", "responseFormat": "string", "size": "string", "user": "string"};
            let params = {headers: {"Content-Type": "multipart/form-data", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/threads/runs", () => {

        // Request No. 1: createThreadAndRun
        {
            let url = BASE_URL + `/threads/runs`;
            // TODO: edit the parameters of the request body.
            let body = {"assistantId": "string", "thread": {"messages": "list", "metadata": "object"}, "model": {}, "instructions": "string", "tools": "list", "metadata": "object", "temperature": "bigdecimal", "stream": "boolean", "maxPromptTokens": "integer", "maxCompletionTokens": "integer", "truncationStrategy": {"type": "string", "lastMessages": "integer"}, "toolChoice": {"type": "string", "function": "chatcompletionnamedtoolchoice_function"}, "responseFormat": {"type": "string"}};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/files", () => {
        let purpose = 'TODO_EDIT_THE_PURPOSE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: listFiles
        {
            let url = BASE_URL + `/files?purpose=${purpose}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: createFile
        {
            let url = BASE_URL + `/files`;
            // TODO: edit the parameters of the request body.
            let body = {"file": http.file(open("/path/to/file.bin", "b"), "test.bin"), "purpose": "string"};
            let params = {headers: {"Content-Type": "multipart/form-data", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/threads/{thread_id}/runs/{run_id}/submit_tool_outputs", () => {
        let threadId = 'TODO_EDIT_THE_THREAD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let runId = 'TODO_EDIT_THE_RUN_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: submitToolOuputsToRun
        {
            let url = BASE_URL + `/threads/${thread_id}/runs/${run_id}/submit_tool_outputs`;
            // TODO: edit the parameters of the request body.
            let body = {"toolOutputs": "list", "stream": "boolean"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/threads/{thread_id}/messages/{message_id}/files", () => {
        let threadId = 'TODO_EDIT_THE_THREAD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let before = 'TODO_EDIT_THE_BEFORE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let messageId = 'TODO_EDIT_THE_MESSAGE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let after = 'TODO_EDIT_THE_AFTER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let order = 'TODO_EDIT_THE_ORDER'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: listMessageFiles
        {
            let url = BASE_URL + `/threads/${thread_id}/messages/${message_id}/files?limit=${limit}&order=${order}&after=${after}&before=${before}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/fine_tuning/jobs/{fine_tuning_job_id}", () => {
        let fineTuningJobId = 'TODO_EDIT_THE_FINE_TUNING_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: retrieveFineTuningJob
        {
            let url = BASE_URL + `/fine_tuning/jobs/${fine_tuning_job_id}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/fine_tuning/jobs/{fine_tuning_job_id}/events", () => {
        let fineTuningJobId = 'TODO_EDIT_THE_FINE_TUNING_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let after = 'TODO_EDIT_THE_AFTER'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: listFineTuningEvents
        {
            let url = BASE_URL + `/fine_tuning/jobs/${fine_tuning_job_id}/events?after=${after}&limit=${limit}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/threads/{thread_id}/runs/{run_id}/steps", () => {
        let threadId = 'TODO_EDIT_THE_THREAD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let before = 'TODO_EDIT_THE_BEFORE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let runId = 'TODO_EDIT_THE_RUN_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let after = 'TODO_EDIT_THE_AFTER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let order = 'TODO_EDIT_THE_ORDER'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: listRunSteps
        {
            let url = BASE_URL + `/threads/${thread_id}/runs/${run_id}/steps?limit=${limit}&order=${order}&after=${after}&before=${before}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/assistants", () => {
        let before = 'TODO_EDIT_THE_BEFORE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let after = 'TODO_EDIT_THE_AFTER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let order = 'TODO_EDIT_THE_ORDER'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: listAssistants
        {
            let url = BASE_URL + `/assistants?limit=${limit}&order=${order}&after=${after}&before=${before}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: createAssistant
        {
            let url = BASE_URL + `/assistants`;
            // TODO: edit the parameters of the request body.
            let body = {"model": {}, "name": "string", "description": "string", "instructions": "string", "tools": "list", "fileIds": "list", "metadata": "object"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/moderations", () => {

        // Request No. 1: createModeration
        {
            let url = BASE_URL + `/moderations`;
            // TODO: edit the parameters of the request body.
            let body = {"input": {}, "model": {}};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/threads/{thread_id}", () => {
        let threadId = 'TODO_EDIT_THE_THREAD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getThread
        {
            let url = BASE_URL + `/threads/${thread_id}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: deleteThread
        {
            let url = BASE_URL + `/threads/${thread_id}`;
            let request = http.del(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/threads/{thread_id}/runs/{run_id}", () => {
        let threadId = 'TODO_EDIT_THE_THREAD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let runId = 'TODO_EDIT_THE_RUN_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getRun
        {
            let url = BASE_URL + `/threads/${thread_id}/runs/${run_id}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: modifyRun
        {
            let url = BASE_URL + `/threads/${thread_id}/runs/${run_id}`;
            // TODO: edit the parameters of the request body.
            let body = {"metadata": "object"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/audio/translations", () => {

        // Request No. 1: createTranslation
        {
            let url = BASE_URL + `/audio/translations`;
            // TODO: edit the parameters of the request body.
            let body = {"file": http.file(open("/path/to/file.bin", "b"), "test.bin"), "model": {}, "prompt": "string", "responseFormat": "string", "temperature": "bigdecimal"};
            let params = {headers: {"Content-Type": "multipart/form-data", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/fine_tuning/jobs", () => {
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let after = 'TODO_EDIT_THE_AFTER'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: listPaginatedFineTuningJobs
        {
            let url = BASE_URL + `/fine_tuning/jobs?after=${after}&limit=${limit}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: createFineTuningJob
        {
            let url = BASE_URL + `/fine_tuning/jobs`;
            // TODO: edit the parameters of the request body.
            let body = {"model": {}, "trainingFile": "string", "hyperparameters": {"batchSize": "createfinetuningjobrequest_hyperparameters_batch_size", "learningRateMultiplier": "createfinetuningjobrequest_hyperparameters_learning_rate_multiplier", "nEpochs": "createfinetuningjobrequest_hyperparameters_n_epochs"}, "suffix": "string", "validationFile": "string", "integrations": "list", "seed": "integer"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

}
