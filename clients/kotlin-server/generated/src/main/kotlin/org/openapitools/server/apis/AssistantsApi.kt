/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.apis

import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import org.openapitools.server.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import org.openapitools.server.infrastructure.ApiPrincipal
import org.openapitools.server.models.AssistantFileObject
import org.openapitools.server.models.AssistantObject
import org.openapitools.server.models.CreateAssistantFileRequest
import org.openapitools.server.models.CreateAssistantRequest
import org.openapitools.server.models.CreateMessageRequest
import org.openapitools.server.models.CreateRunRequest
import org.openapitools.server.models.CreateThreadAndRunRequest
import org.openapitools.server.models.CreateThreadRequest
import org.openapitools.server.models.DeleteAssistantFileResponse
import org.openapitools.server.models.DeleteAssistantResponse
import org.openapitools.server.models.DeleteThreadResponse
import org.openapitools.server.models.ListAssistantFilesResponse
import org.openapitools.server.models.ListAssistantsResponse
import org.openapitools.server.models.ListMessageFilesResponse
import org.openapitools.server.models.ListMessagesResponse
import org.openapitools.server.models.ListRunStepsResponse
import org.openapitools.server.models.ListRunsResponse
import org.openapitools.server.models.MessageFileObject
import org.openapitools.server.models.MessageObject
import org.openapitools.server.models.ModifyAssistantRequest
import org.openapitools.server.models.ModifyMessageRequest
import org.openapitools.server.models.ModifyRunRequest
import org.openapitools.server.models.ModifyThreadRequest
import org.openapitools.server.models.RunObject
import org.openapitools.server.models.RunStepObject
import org.openapitools.server.models.SubmitToolOutputsRunRequest
import org.openapitools.server.models.ThreadObject

fun Route.AssistantsApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("ApiKeyAuth") {
    post<Paths.cancelRun> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "cancelled_at" : 5,
              "instructions" : "instructions",
              "metadata" : "{}",
              "assistant_id" : "assistant_id",
              "required_action" : {
                "submit_tool_outputs" : {
                  "tool_calls" : [ {
                    "function" : {
                      "name" : "name",
                      "arguments" : "arguments"
                    },
                    "id" : "id",
                    "type" : "function"
                  }, {
                    "function" : {
                      "name" : "name",
                      "arguments" : "arguments"
                    },
                    "id" : "id",
                    "type" : "function"
                  } ]
                },
                "type" : "submit_tool_outputs"
              },
              "usage" : {
                "completion_tokens" : 7,
                "prompt_tokens" : 9,
                "total_tokens" : 3
              },
              "created_at" : 0,
              "tools" : [ {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              } ],
              "max_completion_tokens" : 256,
              "thread_id" : "thread_id",
              "expires_at" : 6,
              "response_format" : "none",
              "file_ids" : [ "file_ids", "file_ids" ],
              "temperature" : 2.027123023002322,
              "tool_choice" : "none",
              "model" : "model",
              "id" : "id",
              "last_error" : {
                "code" : "server_error",
                "message" : "message"
              },
              "incomplete_details" : {
                "reason" : "max_completion_tokens"
              },
              "truncation_strategy" : {
                "last_messages" : 1,
                "type" : "auto"
              },
              "completed_at" : 2,
              "started_at" : 1,
              "failed_at" : 5,
              "max_prompt_tokens" : 256,
              "object" : "thread.run",
              "status" : "queued"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    post<Paths.createAssistant> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "instructions" : "instructions",
              "metadata" : "{}",
              "name" : "name",
              "file_ids" : [ "file_ids", "file_ids", "file_ids", "file_ids", "file_ids" ],
              "created_at" : 0,
              "description" : "description",
              "model" : "model",
              "id" : "id",
              "tools" : [ {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              } ],
              "object" : "assistant"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    post<Paths.createAssistantFile> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "assistant_id" : "assistant_id",
              "created_at" : 0,
              "id" : "id",
              "object" : "assistant.file"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    post<Paths.createMessage> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "metadata" : "{}",
              "role" : "user",
              "assistant_id" : "assistant_id",
              "run_id" : "run_id",
              "created_at" : 0,
              "content" : [ {
                "image_file" : {
                  "file_id" : "file_id"
                },
                "type" : "image_file"
              }, {
                "image_file" : {
                  "file_id" : "file_id"
                },
                "type" : "image_file"
              } ],
              "completed_at" : 6,
              "thread_id" : "thread_id",
              "file_ids" : [ "file_ids", "file_ids", "file_ids", "file_ids", "file_ids" ],
              "id" : "id",
              "incomplete_at" : 1,
              "incomplete_details" : {
                "reason" : "content_filter"
              },
              "object" : "thread.message",
              "status" : "in_progress"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    post<Paths.createRun> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "cancelled_at" : 5,
              "instructions" : "instructions",
              "metadata" : "{}",
              "assistant_id" : "assistant_id",
              "required_action" : {
                "submit_tool_outputs" : {
                  "tool_calls" : [ {
                    "function" : {
                      "name" : "name",
                      "arguments" : "arguments"
                    },
                    "id" : "id",
                    "type" : "function"
                  }, {
                    "function" : {
                      "name" : "name",
                      "arguments" : "arguments"
                    },
                    "id" : "id",
                    "type" : "function"
                  } ]
                },
                "type" : "submit_tool_outputs"
              },
              "usage" : {
                "completion_tokens" : 7,
                "prompt_tokens" : 9,
                "total_tokens" : 3
              },
              "created_at" : 0,
              "tools" : [ {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              } ],
              "max_completion_tokens" : 256,
              "thread_id" : "thread_id",
              "expires_at" : 6,
              "response_format" : "none",
              "file_ids" : [ "file_ids", "file_ids" ],
              "temperature" : 2.027123023002322,
              "tool_choice" : "none",
              "model" : "model",
              "id" : "id",
              "last_error" : {
                "code" : "server_error",
                "message" : "message"
              },
              "incomplete_details" : {
                "reason" : "max_completion_tokens"
              },
              "truncation_strategy" : {
                "last_messages" : 1,
                "type" : "auto"
              },
              "completed_at" : 2,
              "started_at" : 1,
              "failed_at" : 5,
              "max_prompt_tokens" : 256,
              "object" : "thread.run",
              "status" : "queued"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    post<Paths.createThread> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "metadata" : "{}",
              "created_at" : 0,
              "id" : "id",
              "object" : "thread"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    post<Paths.createThreadAndRun> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "cancelled_at" : 5,
              "instructions" : "instructions",
              "metadata" : "{}",
              "assistant_id" : "assistant_id",
              "required_action" : {
                "submit_tool_outputs" : {
                  "tool_calls" : [ {
                    "function" : {
                      "name" : "name",
                      "arguments" : "arguments"
                    },
                    "id" : "id",
                    "type" : "function"
                  }, {
                    "function" : {
                      "name" : "name",
                      "arguments" : "arguments"
                    },
                    "id" : "id",
                    "type" : "function"
                  } ]
                },
                "type" : "submit_tool_outputs"
              },
              "usage" : {
                "completion_tokens" : 7,
                "prompt_tokens" : 9,
                "total_tokens" : 3
              },
              "created_at" : 0,
              "tools" : [ {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              } ],
              "max_completion_tokens" : 256,
              "thread_id" : "thread_id",
              "expires_at" : 6,
              "response_format" : "none",
              "file_ids" : [ "file_ids", "file_ids" ],
              "temperature" : 2.027123023002322,
              "tool_choice" : "none",
              "model" : "model",
              "id" : "id",
              "last_error" : {
                "code" : "server_error",
                "message" : "message"
              },
              "incomplete_details" : {
                "reason" : "max_completion_tokens"
              },
              "truncation_strategy" : {
                "last_messages" : 1,
                "type" : "auto"
              },
              "completed_at" : 2,
              "started_at" : 1,
              "failed_at" : 5,
              "max_prompt_tokens" : 256,
              "object" : "thread.run",
              "status" : "queued"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    delete<Paths.deleteAssistant> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "deleted" : true,
              "id" : "id",
              "object" : "assistant.deleted"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    delete<Paths.deleteAssistantFile> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "deleted" : true,
              "id" : "id",
              "object" : "assistant.file.deleted"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    delete<Paths.deleteThread> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "deleted" : true,
              "id" : "id",
              "object" : "thread.deleted"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    get<Paths.getAssistant> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "instructions" : "instructions",
              "metadata" : "{}",
              "name" : "name",
              "file_ids" : [ "file_ids", "file_ids", "file_ids", "file_ids", "file_ids" ],
              "created_at" : 0,
              "description" : "description",
              "model" : "model",
              "id" : "id",
              "tools" : [ {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              } ],
              "object" : "assistant"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    get<Paths.getAssistantFile> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "assistant_id" : "assistant_id",
              "created_at" : 0,
              "id" : "id",
              "object" : "assistant.file"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    get<Paths.getMessage> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "metadata" : "{}",
              "role" : "user",
              "assistant_id" : "assistant_id",
              "run_id" : "run_id",
              "created_at" : 0,
              "content" : [ {
                "image_file" : {
                  "file_id" : "file_id"
                },
                "type" : "image_file"
              }, {
                "image_file" : {
                  "file_id" : "file_id"
                },
                "type" : "image_file"
              } ],
              "completed_at" : 6,
              "thread_id" : "thread_id",
              "file_ids" : [ "file_ids", "file_ids", "file_ids", "file_ids", "file_ids" ],
              "id" : "id",
              "incomplete_at" : 1,
              "incomplete_details" : {
                "reason" : "content_filter"
              },
              "object" : "thread.message",
              "status" : "in_progress"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    get<Paths.getMessageFile> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "created_at" : 0,
              "message_id" : "message_id",
              "id" : "id",
              "object" : "thread.message.file"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    get<Paths.getRun> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "cancelled_at" : 5,
              "instructions" : "instructions",
              "metadata" : "{}",
              "assistant_id" : "assistant_id",
              "required_action" : {
                "submit_tool_outputs" : {
                  "tool_calls" : [ {
                    "function" : {
                      "name" : "name",
                      "arguments" : "arguments"
                    },
                    "id" : "id",
                    "type" : "function"
                  }, {
                    "function" : {
                      "name" : "name",
                      "arguments" : "arguments"
                    },
                    "id" : "id",
                    "type" : "function"
                  } ]
                },
                "type" : "submit_tool_outputs"
              },
              "usage" : {
                "completion_tokens" : 7,
                "prompt_tokens" : 9,
                "total_tokens" : 3
              },
              "created_at" : 0,
              "tools" : [ {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              } ],
              "max_completion_tokens" : 256,
              "thread_id" : "thread_id",
              "expires_at" : 6,
              "response_format" : "none",
              "file_ids" : [ "file_ids", "file_ids" ],
              "temperature" : 2.027123023002322,
              "tool_choice" : "none",
              "model" : "model",
              "id" : "id",
              "last_error" : {
                "code" : "server_error",
                "message" : "message"
              },
              "incomplete_details" : {
                "reason" : "max_completion_tokens"
              },
              "truncation_strategy" : {
                "last_messages" : 1,
                "type" : "auto"
              },
              "completed_at" : 2,
              "started_at" : 1,
              "failed_at" : 5,
              "max_prompt_tokens" : 256,
              "object" : "thread.run",
              "status" : "queued"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    get<Paths.getRunStep> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "cancelled_at" : 1,
              "metadata" : "{}",
              "assistant_id" : "assistant_id",
              "run_id" : "run_id",
              "usage" : {
                "completion_tokens" : 2,
                "prompt_tokens" : 7,
                "total_tokens" : 9
              },
              "created_at" : 0,
              "expired_at" : 6,
              "type" : "message_creation",
              "step_details" : {
                "message_creation" : {
                  "message_id" : "message_id"
                },
                "type" : "message_creation"
              },
              "completed_at" : 5,
              "thread_id" : "thread_id",
              "id" : "id",
              "last_error" : {
                "code" : "server_error",
                "message" : "message"
              },
              "failed_at" : 5,
              "object" : "thread.run.step",
              "status" : "in_progress"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    get<Paths.getThread> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "metadata" : "{}",
              "created_at" : 0,
              "id" : "id",
              "object" : "thread"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    get<Paths.listAssistantFiles> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "first_id" : "file-abc123",
              "data" : [ {
                "assistant_id" : "assistant_id",
                "created_at" : 0,
                "id" : "id",
                "object" : "assistant.file"
              }, {
                "assistant_id" : "assistant_id",
                "created_at" : 0,
                "id" : "id",
                "object" : "assistant.file"
              } ],
              "last_id" : "file-abc456",
              "has_more" : false,
              "object" : "list"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    get<Paths.listAssistants> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "first_id" : "asst_abc123",
              "data" : [ {
                "instructions" : "instructions",
                "metadata" : "{}",
                "name" : "name",
                "file_ids" : [ "file_ids", "file_ids", "file_ids", "file_ids", "file_ids" ],
                "created_at" : 0,
                "description" : "description",
                "model" : "model",
                "id" : "id",
                "tools" : [ {
                  "type" : "code_interpreter"
                }, {
                  "type" : "code_interpreter"
                }, {
                  "type" : "code_interpreter"
                }, {
                  "type" : "code_interpreter"
                }, {
                  "type" : "code_interpreter"
                } ],
                "object" : "assistant"
              }, {
                "instructions" : "instructions",
                "metadata" : "{}",
                "name" : "name",
                "file_ids" : [ "file_ids", "file_ids", "file_ids", "file_ids", "file_ids" ],
                "created_at" : 0,
                "description" : "description",
                "model" : "model",
                "id" : "id",
                "tools" : [ {
                  "type" : "code_interpreter"
                }, {
                  "type" : "code_interpreter"
                }, {
                  "type" : "code_interpreter"
                }, {
                  "type" : "code_interpreter"
                }, {
                  "type" : "code_interpreter"
                } ],
                "object" : "assistant"
              } ],
              "last_id" : "asst_abc456",
              "has_more" : false,
              "object" : "list"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    get<Paths.listMessageFiles> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "first_id" : "file-abc123",
              "data" : [ {
                "created_at" : 0,
                "message_id" : "message_id",
                "id" : "id",
                "object" : "thread.message.file"
              }, {
                "created_at" : 0,
                "message_id" : "message_id",
                "id" : "id",
                "object" : "thread.message.file"
              } ],
              "last_id" : "file-abc456",
              "has_more" : false,
              "object" : "list"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    get<Paths.listMessages> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "first_id" : "msg_abc123",
              "data" : [ {
                "metadata" : "{}",
                "role" : "user",
                "assistant_id" : "assistant_id",
                "run_id" : "run_id",
                "created_at" : 0,
                "content" : [ {
                  "image_file" : {
                    "file_id" : "file_id"
                  },
                  "type" : "image_file"
                }, {
                  "image_file" : {
                    "file_id" : "file_id"
                  },
                  "type" : "image_file"
                } ],
                "completed_at" : 6,
                "thread_id" : "thread_id",
                "file_ids" : [ "file_ids", "file_ids", "file_ids", "file_ids", "file_ids" ],
                "id" : "id",
                "incomplete_at" : 1,
                "incomplete_details" : {
                  "reason" : "content_filter"
                },
                "object" : "thread.message",
                "status" : "in_progress"
              }, {
                "metadata" : "{}",
                "role" : "user",
                "assistant_id" : "assistant_id",
                "run_id" : "run_id",
                "created_at" : 0,
                "content" : [ {
                  "image_file" : {
                    "file_id" : "file_id"
                  },
                  "type" : "image_file"
                }, {
                  "image_file" : {
                    "file_id" : "file_id"
                  },
                  "type" : "image_file"
                } ],
                "completed_at" : 6,
                "thread_id" : "thread_id",
                "file_ids" : [ "file_ids", "file_ids", "file_ids", "file_ids", "file_ids" ],
                "id" : "id",
                "incomplete_at" : 1,
                "incomplete_details" : {
                  "reason" : "content_filter"
                },
                "object" : "thread.message",
                "status" : "in_progress"
              } ],
              "last_id" : "msg_abc123",
              "has_more" : false,
              "object" : "list"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    get<Paths.listRunSteps> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "first_id" : "step_abc123",
              "data" : [ {
                "cancelled_at" : 1,
                "metadata" : "{}",
                "assistant_id" : "assistant_id",
                "run_id" : "run_id",
                "usage" : {
                  "completion_tokens" : 2,
                  "prompt_tokens" : 7,
                  "total_tokens" : 9
                },
                "created_at" : 0,
                "expired_at" : 6,
                "type" : "message_creation",
                "step_details" : {
                  "message_creation" : {
                    "message_id" : "message_id"
                  },
                  "type" : "message_creation"
                },
                "completed_at" : 5,
                "thread_id" : "thread_id",
                "id" : "id",
                "last_error" : {
                  "code" : "server_error",
                  "message" : "message"
                },
                "failed_at" : 5,
                "object" : "thread.run.step",
                "status" : "in_progress"
              }, {
                "cancelled_at" : 1,
                "metadata" : "{}",
                "assistant_id" : "assistant_id",
                "run_id" : "run_id",
                "usage" : {
                  "completion_tokens" : 2,
                  "prompt_tokens" : 7,
                  "total_tokens" : 9
                },
                "created_at" : 0,
                "expired_at" : 6,
                "type" : "message_creation",
                "step_details" : {
                  "message_creation" : {
                    "message_id" : "message_id"
                  },
                  "type" : "message_creation"
                },
                "completed_at" : 5,
                "thread_id" : "thread_id",
                "id" : "id",
                "last_error" : {
                  "code" : "server_error",
                  "message" : "message"
                },
                "failed_at" : 5,
                "object" : "thread.run.step",
                "status" : "in_progress"
              } ],
              "last_id" : "step_abc456",
              "has_more" : false,
              "object" : "list"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    get<Paths.listRuns> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "first_id" : "run_abc123",
              "data" : [ {
                "cancelled_at" : 5,
                "instructions" : "instructions",
                "metadata" : "{}",
                "assistant_id" : "assistant_id",
                "required_action" : {
                  "submit_tool_outputs" : {
                    "tool_calls" : [ {
                      "function" : {
                        "name" : "name",
                        "arguments" : "arguments"
                      },
                      "id" : "id",
                      "type" : "function"
                    }, {
                      "function" : {
                        "name" : "name",
                        "arguments" : "arguments"
                      },
                      "id" : "id",
                      "type" : "function"
                    } ]
                  },
                  "type" : "submit_tool_outputs"
                },
                "usage" : {
                  "completion_tokens" : 7,
                  "prompt_tokens" : 9,
                  "total_tokens" : 3
                },
                "created_at" : 0,
                "tools" : [ {
                  "type" : "code_interpreter"
                }, {
                  "type" : "code_interpreter"
                }, {
                  "type" : "code_interpreter"
                }, {
                  "type" : "code_interpreter"
                }, {
                  "type" : "code_interpreter"
                } ],
                "max_completion_tokens" : 256,
                "thread_id" : "thread_id",
                "expires_at" : 6,
                "response_format" : "none",
                "file_ids" : [ "file_ids", "file_ids" ],
                "temperature" : 2.027123023002322,
                "tool_choice" : "none",
                "model" : "model",
                "id" : "id",
                "last_error" : {
                  "code" : "server_error",
                  "message" : "message"
                },
                "incomplete_details" : {
                  "reason" : "max_completion_tokens"
                },
                "truncation_strategy" : {
                  "last_messages" : 1,
                  "type" : "auto"
                },
                "completed_at" : 2,
                "started_at" : 1,
                "failed_at" : 5,
                "max_prompt_tokens" : 256,
                "object" : "thread.run",
                "status" : "queued"
              }, {
                "cancelled_at" : 5,
                "instructions" : "instructions",
                "metadata" : "{}",
                "assistant_id" : "assistant_id",
                "required_action" : {
                  "submit_tool_outputs" : {
                    "tool_calls" : [ {
                      "function" : {
                        "name" : "name",
                        "arguments" : "arguments"
                      },
                      "id" : "id",
                      "type" : "function"
                    }, {
                      "function" : {
                        "name" : "name",
                        "arguments" : "arguments"
                      },
                      "id" : "id",
                      "type" : "function"
                    } ]
                  },
                  "type" : "submit_tool_outputs"
                },
                "usage" : {
                  "completion_tokens" : 7,
                  "prompt_tokens" : 9,
                  "total_tokens" : 3
                },
                "created_at" : 0,
                "tools" : [ {
                  "type" : "code_interpreter"
                }, {
                  "type" : "code_interpreter"
                }, {
                  "type" : "code_interpreter"
                }, {
                  "type" : "code_interpreter"
                }, {
                  "type" : "code_interpreter"
                } ],
                "max_completion_tokens" : 256,
                "thread_id" : "thread_id",
                "expires_at" : 6,
                "response_format" : "none",
                "file_ids" : [ "file_ids", "file_ids" ],
                "temperature" : 2.027123023002322,
                "tool_choice" : "none",
                "model" : "model",
                "id" : "id",
                "last_error" : {
                  "code" : "server_error",
                  "message" : "message"
                },
                "incomplete_details" : {
                  "reason" : "max_completion_tokens"
                },
                "truncation_strategy" : {
                  "last_messages" : 1,
                  "type" : "auto"
                },
                "completed_at" : 2,
                "started_at" : 1,
                "failed_at" : 5,
                "max_prompt_tokens" : 256,
                "object" : "thread.run",
                "status" : "queued"
              } ],
              "last_id" : "run_abc456",
              "has_more" : false,
              "object" : "list"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    post<Paths.modifyAssistant> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "instructions" : "instructions",
              "metadata" : "{}",
              "name" : "name",
              "file_ids" : [ "file_ids", "file_ids", "file_ids", "file_ids", "file_ids" ],
              "created_at" : 0,
              "description" : "description",
              "model" : "model",
              "id" : "id",
              "tools" : [ {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              } ],
              "object" : "assistant"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    post<Paths.modifyMessage> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "metadata" : "{}",
              "role" : "user",
              "assistant_id" : "assistant_id",
              "run_id" : "run_id",
              "created_at" : 0,
              "content" : [ {
                "image_file" : {
                  "file_id" : "file_id"
                },
                "type" : "image_file"
              }, {
                "image_file" : {
                  "file_id" : "file_id"
                },
                "type" : "image_file"
              } ],
              "completed_at" : 6,
              "thread_id" : "thread_id",
              "file_ids" : [ "file_ids", "file_ids", "file_ids", "file_ids", "file_ids" ],
              "id" : "id",
              "incomplete_at" : 1,
              "incomplete_details" : {
                "reason" : "content_filter"
              },
              "object" : "thread.message",
              "status" : "in_progress"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    post<Paths.modifyRun> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "cancelled_at" : 5,
              "instructions" : "instructions",
              "metadata" : "{}",
              "assistant_id" : "assistant_id",
              "required_action" : {
                "submit_tool_outputs" : {
                  "tool_calls" : [ {
                    "function" : {
                      "name" : "name",
                      "arguments" : "arguments"
                    },
                    "id" : "id",
                    "type" : "function"
                  }, {
                    "function" : {
                      "name" : "name",
                      "arguments" : "arguments"
                    },
                    "id" : "id",
                    "type" : "function"
                  } ]
                },
                "type" : "submit_tool_outputs"
              },
              "usage" : {
                "completion_tokens" : 7,
                "prompt_tokens" : 9,
                "total_tokens" : 3
              },
              "created_at" : 0,
              "tools" : [ {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              } ],
              "max_completion_tokens" : 256,
              "thread_id" : "thread_id",
              "expires_at" : 6,
              "response_format" : "none",
              "file_ids" : [ "file_ids", "file_ids" ],
              "temperature" : 2.027123023002322,
              "tool_choice" : "none",
              "model" : "model",
              "id" : "id",
              "last_error" : {
                "code" : "server_error",
                "message" : "message"
              },
              "incomplete_details" : {
                "reason" : "max_completion_tokens"
              },
              "truncation_strategy" : {
                "last_messages" : 1,
                "type" : "auto"
              },
              "completed_at" : 2,
              "started_at" : 1,
              "failed_at" : 5,
              "max_prompt_tokens" : 256,
              "object" : "thread.run",
              "status" : "queued"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    post<Paths.modifyThread> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "metadata" : "{}",
              "created_at" : 0,
              "id" : "id",
              "object" : "thread"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    post<Paths.submitToolOuputsToRun> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "cancelled_at" : 5,
              "instructions" : "instructions",
              "metadata" : "{}",
              "assistant_id" : "assistant_id",
              "required_action" : {
                "submit_tool_outputs" : {
                  "tool_calls" : [ {
                    "function" : {
                      "name" : "name",
                      "arguments" : "arguments"
                    },
                    "id" : "id",
                    "type" : "function"
                  }, {
                    "function" : {
                      "name" : "name",
                      "arguments" : "arguments"
                    },
                    "id" : "id",
                    "type" : "function"
                  } ]
                },
                "type" : "submit_tool_outputs"
              },
              "usage" : {
                "completion_tokens" : 7,
                "prompt_tokens" : 9,
                "total_tokens" : 3
              },
              "created_at" : 0,
              "tools" : [ {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              }, {
                "type" : "code_interpreter"
              } ],
              "max_completion_tokens" : 256,
              "thread_id" : "thread_id",
              "expires_at" : 6,
              "response_format" : "none",
              "file_ids" : [ "file_ids", "file_ids" ],
              "temperature" : 2.027123023002322,
              "tool_choice" : "none",
              "model" : "model",
              "id" : "id",
              "last_error" : {
                "code" : "server_error",
                "message" : "message"
              },
              "incomplete_details" : {
                "reason" : "max_completion_tokens"
              },
              "truncation_strategy" : {
                "last_messages" : 1,
                "type" : "auto"
              },
              "completed_at" : 2,
              "started_at" : 1,
              "failed_at" : 5,
              "max_prompt_tokens" : 256,
              "object" : "thread.run",
              "status" : "queued"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

}
