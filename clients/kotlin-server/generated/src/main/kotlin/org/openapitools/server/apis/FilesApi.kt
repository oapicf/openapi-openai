/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.apis

import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import org.openapitools.server.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import org.openapitools.server.infrastructure.ApiPrincipal
import org.openapitools.server.models.DeleteFileResponse
import org.openapitools.server.models.ListFilesResponse
import org.openapitools.server.models.OpenAIFile

fun Route.FilesApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("ApiKeyAuth") {
    post<Paths.createFile> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "filename" : "filename",
              "purpose" : "fine-tune",
              "bytes" : 0,
              "created_at" : 6,
              "id" : "id",
              "status_details" : "status_details",
              "object" : "file",
              "status" : "uploaded"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    delete<Paths.deleteFile> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "deleted" : true,
              "id" : "id",
              "object" : "file"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    get<Paths.downloadFile> {
        
        val principal = null!!
        
        
        call.respond(HttpStatusCode.NotImplemented)
        
    }
    }

    authenticate("ApiKeyAuth") {
    get<Paths.listFiles> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "data" : [ {
                "filename" : "filename",
                "purpose" : "fine-tune",
                "bytes" : 0,
                "created_at" : 6,
                "id" : "id",
                "status_details" : "status_details",
                "object" : "file",
                "status" : "uploaded"
              }, {
                "filename" : "filename",
                "purpose" : "fine-tune",
                "bytes" : 0,
                "created_at" : 6,
                "id" : "id",
                "status_details" : "status_details",
                "object" : "file",
                "status" : "uploaded"
              } ],
              "object" : "list"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("ApiKeyAuth") {
    get<Paths.retrieveFile> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "filename" : "filename",
              "purpose" : "fine-tune",
              "bytes" : 0,
              "created_at" : 6,
              "id" : "id",
              "status_details" : "status_details",
              "object" : "file",
              "status" : "uploaded"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

}
