/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.apis

import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import org.openapitools.server.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import org.openapitools.server.infrastructure.ApiPrincipal
import org.openapitools.server.models.CreateChatCompletionRequest
import org.openapitools.server.models.CreateChatCompletionResponse
import org.openapitools.server.models.CreateCompletionRequest
import org.openapitools.server.models.CreateCompletionResponse
import org.openapitools.server.models.CreateEditRequest
import org.openapitools.server.models.CreateEditResponse
import org.openapitools.server.models.CreateEmbeddingRequest
import org.openapitools.server.models.CreateEmbeddingResponse
import org.openapitools.server.models.CreateFineTuneRequest
import org.openapitools.server.models.CreateImageRequest
import org.openapitools.server.models.CreateModerationRequest
import org.openapitools.server.models.CreateModerationResponse
import org.openapitools.server.models.CreateTranscriptionRequestModel
import org.openapitools.server.models.CreateTranscriptionResponse
import org.openapitools.server.models.CreateTranslationResponse
import org.openapitools.server.models.DeleteFileResponse
import org.openapitools.server.models.DeleteModelResponse
import org.openapitools.server.models.FineTune
import org.openapitools.server.models.ImagesResponse
import org.openapitools.server.models.ListFilesResponse
import org.openapitools.server.models.ListFineTuneEventsResponse
import org.openapitools.server.models.ListFineTunesResponse
import org.openapitools.server.models.ListModelsResponse
import org.openapitools.server.models.Model
import org.openapitools.server.models.OpenAIFile

fun Route.OpenAIApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    post<Paths.cancelFineTune> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "result_files" : [ {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          }, {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          } ],
          "hyperparams" : "{}",
          "fine_tuned_model" : "fine_tuned_model",
          "created_at" : 0,
          "training_files" : [ {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          }, {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          } ],
          "updated_at" : 6,
          "organization_id" : "organization_id",
          "model" : "model",
          "id" : "id",
          "events" : [ {
            "level" : "level",
            "created_at" : 1,
            "message" : "message",
            "object" : "object"
          }, {
            "level" : "level",
            "created_at" : 1,
            "message" : "message",
            "object" : "object"
          } ],
          "object" : "object",
          "status" : "status",
          "validation_files" : [ {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          }, {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          } ]
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    post<Paths.createChatCompletion> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "created" : 0,
          "usage" : {
            "completion_tokens" : 5,
            "prompt_tokens" : 1,
            "total_tokens" : 5
          },
          "model" : "model",
          "id" : "id",
          "choices" : [ {
            "finish_reason" : "stop",
            "index" : 6,
            "message" : {
              "role" : "system",
              "function_call" : {
                "name" : "name",
                "arguments" : "arguments"
              },
              "content" : "content"
            }
          }, {
            "finish_reason" : "stop",
            "index" : 6,
            "message" : {
              "role" : "system",
              "function_call" : {
                "name" : "name",
                "arguments" : "arguments"
              },
              "content" : "content"
            }
          } ],
          "object" : "object"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    post<Paths.createCompletion> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "created" : 0,
          "usage" : {
            "completion_tokens" : 5,
            "prompt_tokens" : 1,
            "total_tokens" : 5
          },
          "model" : "model",
          "id" : "id",
          "choices" : [ {
            "finish_reason" : "stop",
            "index" : 6,
            "text" : "text",
            "logprobs" : {
              "top_logprobs" : [ "{}", "{}" ],
              "token_logprobs" : [ 1.4658129805029452, 1.4658129805029452 ],
              "tokens" : [ "tokens", "tokens" ],
              "text_offset" : [ 5, 5 ]
            }
          }, {
            "finish_reason" : "stop",
            "index" : 6,
            "text" : "text",
            "logprobs" : {
              "top_logprobs" : [ "{}", "{}" ],
              "token_logprobs" : [ 1.4658129805029452, 1.4658129805029452 ],
              "tokens" : [ "tokens", "tokens" ],
              "text_offset" : [ 5, 5 ]
            }
          } ],
          "object" : "object"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    post<Paths.createEdit> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "created" : 0,
          "usage" : {
            "completion_tokens" : 5,
            "prompt_tokens" : 1,
            "total_tokens" : 5
          },
          "choices" : [ {
            "finish_reason" : "stop",
            "index" : 6,
            "text" : "text",
            "logprobs" : {
              "top_logprobs" : [ "{}", "{}" ],
              "token_logprobs" : [ 1.4658129805029452, 1.4658129805029452 ],
              "tokens" : [ "tokens", "tokens" ],
              "text_offset" : [ 5, 5 ]
            }
          }, {
            "finish_reason" : "stop",
            "index" : 6,
            "text" : "text",
            "logprobs" : {
              "top_logprobs" : [ "{}", "{}" ],
              "token_logprobs" : [ 1.4658129805029452, 1.4658129805029452 ],
              "tokens" : [ "tokens", "tokens" ],
              "text_offset" : [ 5, 5 ]
            }
          } ],
          "object" : "object"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    post<Paths.createEmbedding> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "data" : [ {
            "index" : 0,
            "embedding" : [ 6.027456183070403, 6.027456183070403 ],
            "object" : "object"
          }, {
            "index" : 0,
            "embedding" : [ 6.027456183070403, 6.027456183070403 ],
            "object" : "object"
          } ],
          "usage" : {
            "prompt_tokens" : 1,
            "total_tokens" : 5
          },
          "model" : "model",
          "object" : "object"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    post<Paths.createFile> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "filename" : "filename",
          "purpose" : "purpose",
          "bytes" : 0,
          "created_at" : 6,
          "id" : "id",
          "status_details" : "{}",
          "object" : "object",
          "status" : "status"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    post<Paths.createFineTune> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "result_files" : [ {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          }, {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          } ],
          "hyperparams" : "{}",
          "fine_tuned_model" : "fine_tuned_model",
          "created_at" : 0,
          "training_files" : [ {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          }, {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          } ],
          "updated_at" : 6,
          "organization_id" : "organization_id",
          "model" : "model",
          "id" : "id",
          "events" : [ {
            "level" : "level",
            "created_at" : 1,
            "message" : "message",
            "object" : "object"
          }, {
            "level" : "level",
            "created_at" : 1,
            "message" : "message",
            "object" : "object"
          } ],
          "object" : "object",
          "status" : "status",
          "validation_files" : [ {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          }, {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          } ]
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    post<Paths.createImage> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "data" : [ {
            "b64_json" : "b64_json",
            "url" : "url"
          }, {
            "b64_json" : "b64_json",
            "url" : "url"
          } ],
          "created" : 0
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    post<Paths.createImageEdit> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "data" : [ {
            "b64_json" : "b64_json",
            "url" : "url"
          }, {
            "b64_json" : "b64_json",
            "url" : "url"
          } ],
          "created" : 0
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    post<Paths.createImageVariation> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "data" : [ {
            "b64_json" : "b64_json",
            "url" : "url"
          }, {
            "b64_json" : "b64_json",
            "url" : "url"
          } ],
          "created" : 0
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    post<Paths.createModeration> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "model" : "model",
          "id" : "id",
          "results" : [ {
            "category_scores" : {
              "hate/threatening" : 6.027456183070403,
              "sexual/minors" : 5.637376656633329,
              "hate" : 0.8008281904610115,
              "self-harm" : 1.4658129805029452,
              "sexual" : 5.962133916683182,
              "violence/graphic" : 7.061401241503109,
              "violence" : 2.3021358869347655
            },
            "flagged" : true,
            "categories" : {
              "hate/threatening" : true,
              "sexual/minors" : true,
              "hate" : true,
              "self-harm" : true,
              "sexual" : true,
              "violence/graphic" : true,
              "violence" : true
            }
          }, {
            "category_scores" : {
              "hate/threatening" : 6.027456183070403,
              "sexual/minors" : 5.637376656633329,
              "hate" : 0.8008281904610115,
              "self-harm" : 1.4658129805029452,
              "sexual" : 5.962133916683182,
              "violence/graphic" : 7.061401241503109,
              "violence" : 2.3021358869347655
            },
            "flagged" : true,
            "categories" : {
              "hate/threatening" : true,
              "sexual/minors" : true,
              "hate" : true,
              "self-harm" : true,
              "sexual" : true,
              "violence/graphic" : true,
              "violence" : true
            }
          } ]
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    post<Paths.createTranscription> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "text" : "text"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    post<Paths.createTranslation> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "text" : "text"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    delete<Paths.deleteFile> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "deleted" : true,
          "id" : "id",
          "object" : "object"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    delete<Paths.deleteModel> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "deleted" : true,
          "id" : "id",
          "object" : "object"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    get<Paths.downloadFile> {
        call.respond(HttpStatusCode.NotImplemented)
        
    }

    get<Paths.listFiles> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "data" : [ {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          }, {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          } ],
          "object" : "object"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    get<Paths.listFineTuneEvents> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "data" : [ {
            "level" : "level",
            "created_at" : 1,
            "message" : "message",
            "object" : "object"
          }, {
            "level" : "level",
            "created_at" : 1,
            "message" : "message",
            "object" : "object"
          } ],
          "object" : "object"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    get<Paths.listFineTunes> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "data" : [ {
            "result_files" : [ {
              "filename" : "filename",
              "purpose" : "purpose",
              "bytes" : 0,
              "created_at" : 6,
              "id" : "id",
              "status_details" : "{}",
              "object" : "object",
              "status" : "status"
            }, {
              "filename" : "filename",
              "purpose" : "purpose",
              "bytes" : 0,
              "created_at" : 6,
              "id" : "id",
              "status_details" : "{}",
              "object" : "object",
              "status" : "status"
            } ],
            "hyperparams" : "{}",
            "fine_tuned_model" : "fine_tuned_model",
            "created_at" : 0,
            "training_files" : [ {
              "filename" : "filename",
              "purpose" : "purpose",
              "bytes" : 0,
              "created_at" : 6,
              "id" : "id",
              "status_details" : "{}",
              "object" : "object",
              "status" : "status"
            }, {
              "filename" : "filename",
              "purpose" : "purpose",
              "bytes" : 0,
              "created_at" : 6,
              "id" : "id",
              "status_details" : "{}",
              "object" : "object",
              "status" : "status"
            } ],
            "updated_at" : 6,
            "organization_id" : "organization_id",
            "model" : "model",
            "id" : "id",
            "events" : [ {
              "level" : "level",
              "created_at" : 1,
              "message" : "message",
              "object" : "object"
            }, {
              "level" : "level",
              "created_at" : 1,
              "message" : "message",
              "object" : "object"
            } ],
            "object" : "object",
            "status" : "status",
            "validation_files" : [ {
              "filename" : "filename",
              "purpose" : "purpose",
              "bytes" : 0,
              "created_at" : 6,
              "id" : "id",
              "status_details" : "{}",
              "object" : "object",
              "status" : "status"
            }, {
              "filename" : "filename",
              "purpose" : "purpose",
              "bytes" : 0,
              "created_at" : 6,
              "id" : "id",
              "status_details" : "{}",
              "object" : "object",
              "status" : "status"
            } ]
          }, {
            "result_files" : [ {
              "filename" : "filename",
              "purpose" : "purpose",
              "bytes" : 0,
              "created_at" : 6,
              "id" : "id",
              "status_details" : "{}",
              "object" : "object",
              "status" : "status"
            }, {
              "filename" : "filename",
              "purpose" : "purpose",
              "bytes" : 0,
              "created_at" : 6,
              "id" : "id",
              "status_details" : "{}",
              "object" : "object",
              "status" : "status"
            } ],
            "hyperparams" : "{}",
            "fine_tuned_model" : "fine_tuned_model",
            "created_at" : 0,
            "training_files" : [ {
              "filename" : "filename",
              "purpose" : "purpose",
              "bytes" : 0,
              "created_at" : 6,
              "id" : "id",
              "status_details" : "{}",
              "object" : "object",
              "status" : "status"
            }, {
              "filename" : "filename",
              "purpose" : "purpose",
              "bytes" : 0,
              "created_at" : 6,
              "id" : "id",
              "status_details" : "{}",
              "object" : "object",
              "status" : "status"
            } ],
            "updated_at" : 6,
            "organization_id" : "organization_id",
            "model" : "model",
            "id" : "id",
            "events" : [ {
              "level" : "level",
              "created_at" : 1,
              "message" : "message",
              "object" : "object"
            }, {
              "level" : "level",
              "created_at" : 1,
              "message" : "message",
              "object" : "object"
            } ],
            "object" : "object",
            "status" : "status",
            "validation_files" : [ {
              "filename" : "filename",
              "purpose" : "purpose",
              "bytes" : 0,
              "created_at" : 6,
              "id" : "id",
              "status_details" : "{}",
              "object" : "object",
              "status" : "status"
            }, {
              "filename" : "filename",
              "purpose" : "purpose",
              "bytes" : 0,
              "created_at" : 6,
              "id" : "id",
              "status_details" : "{}",
              "object" : "object",
              "status" : "status"
            } ]
          } ],
          "object" : "object"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    get<Paths.listModels> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "data" : [ {
            "created" : 0,
            "owned_by" : "owned_by",
            "id" : "id",
            "object" : "object"
          }, {
            "created" : 0,
            "owned_by" : "owned_by",
            "id" : "id",
            "object" : "object"
          } ],
          "object" : "object"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    get<Paths.retrieveFile> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "filename" : "filename",
          "purpose" : "purpose",
          "bytes" : 0,
          "created_at" : 6,
          "id" : "id",
          "status_details" : "{}",
          "object" : "object",
          "status" : "status"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    get<Paths.retrieveFineTune> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "result_files" : [ {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          }, {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          } ],
          "hyperparams" : "{}",
          "fine_tuned_model" : "fine_tuned_model",
          "created_at" : 0,
          "training_files" : [ {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          }, {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          } ],
          "updated_at" : 6,
          "organization_id" : "organization_id",
          "model" : "model",
          "id" : "id",
          "events" : [ {
            "level" : "level",
            "created_at" : 1,
            "message" : "message",
            "object" : "object"
          }, {
            "level" : "level",
            "created_at" : 1,
            "message" : "message",
            "object" : "object"
          } ],
          "object" : "object",
          "status" : "status",
          "validation_files" : [ {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          }, {
            "filename" : "filename",
            "purpose" : "purpose",
            "bytes" : 0,
            "created_at" : 6,
            "id" : "id",
            "status_details" : "{}",
            "object" : "object",
            "status" : "status"
          } ]
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    get<Paths.retrieveModel> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "created" : 0,
          "owned_by" : "owned_by",
          "id" : "id",
          "object" : "object"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

}
