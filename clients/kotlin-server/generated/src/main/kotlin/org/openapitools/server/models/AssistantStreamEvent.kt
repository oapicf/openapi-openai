/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.models

import org.openapitools.server.models.DoneEvent
import org.openapitools.server.models.ErrorEvent
import org.openapitools.server.models.MessageStreamEvent
import org.openapitools.server.models.RunStepStreamEvent
import org.openapitools.server.models.RunStreamEvent
import org.openapitools.server.models.ThreadStreamEvent

/**
 * Represents an event emitted when streaming a Run.  Each event in a server-sent events stream has an `event` and `data` property:  ``` event: thread.created data: {\"id\": \"thread_123\", \"object\": \"thread\", ...} ```  We emit events whenever a new object is created, transitions to a new state, or is being streamed in parts (deltas). For example, we emit `thread.run.created` when a new run is created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses to create a message during a run, we emit a `thread.message.created event`, a `thread.message.in_progress` event, many `thread.message.delta` events, and finally a `thread.message.completed` event.  We may add additional events over time, so we recommend handling unknown events gracefully in your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to integrate the Assistants API with streaming. 
 * @param event 
 * @param `data` 
 */
data class AssistantStreamEvent(
    val event: AssistantStreamEvent.Event,
    val `data`: AssistantStreamEvent.`Data`
) 
{
    /**
    * 
    * Values: done
    */
    enum class Event(val value: kotlin.String){
        done("done");
    }
    /**
    * 
    * Values: Left_Square_BracketDONERight_Square_Bracket
    */
    enum class `Data`(val value: kotlin.String){
        Left_Square_BracketDONERight_Square_Bracket("[DONE]");
    }
}

