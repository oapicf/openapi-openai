/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.models

import org.openapitools.server.models.MessageObjectContentInner
import org.openapitools.server.models.MessageObjectIncompleteDetails

/**
 * Represents a message within a [thread](/docs/api-reference/threads).
 * @param id The identifier, which can be referenced in API endpoints.
 * @param `object` The object type, which is always `thread.message`.
 * @param createdAt The Unix timestamp (in seconds) for when the message was created.
 * @param threadId The [thread](/docs/api-reference/threads) ID that this message belongs to.
 * @param status The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
 * @param incompleteDetails 
 * @param completedAt The Unix timestamp (in seconds) for when the message was completed.
 * @param incompleteAt The Unix timestamp (in seconds) for when the message was marked as incomplete.
 * @param role The entity that produced the message. One of `user` or `assistant`.
 * @param content The content of the message in array of text and/or images.
 * @param assistantId If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
 * @param runId The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
 * @param fileIds A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
 * @param metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
 */
data class MessageObject(
    /* The identifier, which can be referenced in API endpoints. */
    val id: kotlin.String,
    /* The object type, which is always `thread.message`. */
    val `object`: MessageObject.`Object`,
    /* The Unix timestamp (in seconds) for when the message was created. */
    val createdAt: kotlin.Int,
    /* The [thread](/docs/api-reference/threads) ID that this message belongs to. */
    val threadId: kotlin.String,
    /* The status of the message, which can be either `in_progress`, `incomplete`, or `completed`. */
    val status: MessageObject.Status,
    val incompleteDetails: MessageObjectIncompleteDetails,
    /* The Unix timestamp (in seconds) for when the message was completed. */
    val completedAt: kotlin.Int,
    /* The Unix timestamp (in seconds) for when the message was marked as incomplete. */
    val incompleteAt: kotlin.Int,
    /* The entity that produced the message. One of `user` or `assistant`. */
    val role: MessageObject.Role,
    /* The content of the message in array of text and/or images. */
    val content: kotlin.collections.List<MessageObjectContentInner>,
    /* If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message. */
    val assistantId: kotlin.String,
    /* The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints. */
    val runId: kotlin.String,
    /* A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message. */
    val fileIds: kotlin.collections.List<kotlin.String>,
    /* Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.  */
    val metadata: kotlin.Any
) 
{
    /**
    * The object type, which is always `thread.message`.
    * Values: threadPeriodMessage
    */
    enum class `Object`(val value: kotlin.String){
        threadPeriodMessage("thread.message");
    }
    /**
    * The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
    * Values: in_progress,incomplete,completed
    */
    enum class Status(val value: kotlin.String){
        in_progress("in_progress"),
        incomplete("incomplete"),
        completed("completed");
    }
    /**
    * The entity that produced the message. One of `user` or `assistant`.
    * Values: user,assistant
    */
    enum class Role(val value: kotlin.String){
        user("user"),
        assistant("assistant");
    }
}

