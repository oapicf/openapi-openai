/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model

import org.openapitools.server.api.model.CreateCompletionResponseChoicesInnerLogprobs

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * 
 * @param finishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, or `content_filter` if content was omitted due to a flag from our content filters. 
 * @param index 
 * @param logprobs 
 * @param text 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class CreateCompletionResponseChoicesInner (
    /* The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, or `content_filter` if content was omitted due to a flag from our content filters.  */
    @SerializedName("finishReason") private val _finishReason: CreateCompletionResponseChoicesInner.FinishReason?,
    @SerializedName("index") private val _index: kotlin.Int?,
    @SerializedName("logprobs") private val _logprobs: CreateCompletionResponseChoicesInnerLogprobs?,
    @SerializedName("text") private val _text: kotlin.String?
) {

    /**
    * The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, or `content_filter` if content was omitted due to a flag from our content filters. 
    * Values: stop,length,content_filter
    */
    enum class FinishReason(val value: kotlin.String){
    
        stop("stop"),
    
        length("length"),
    
        content_filter("content_filter");
    
    }

        val finishReason get() = _finishReason ?: throw IllegalArgumentException("finishReason is required")
                    
        val index get() = _index ?: throw IllegalArgumentException("index is required")
                    
        val logprobs get() = _logprobs ?: throw IllegalArgumentException("logprobs is required")
                    
        val text get() = _text ?: throw IllegalArgumentException("text is required")
                    
}

