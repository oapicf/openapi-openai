/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model

import org.openapitools.server.api.model.CreateEmbeddingResponseUsage
import org.openapitools.server.api.model.Embedding

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * 
 * @param &#x60;data&#x60; The list of embeddings generated by the model.
 * @param model The name of the model used to generate the embedding.
 * @param &#x60;object&#x60; The object type, which is always \"list\".
 * @param usage 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class CreateEmbeddingResponse (
    /* The list of embeddings generated by the model. */
    @SerializedName("`data`") private val _`data`: kotlin.Array<Embedding>?,
    /* The name of the model used to generate the embedding. */
    @SerializedName("model") private val _model: kotlin.String?,
    /* The object type, which is always \"list\". */
    @SerializedName("`object`") private val _`object`: CreateEmbeddingResponse.&#x60;Object&#x60;?,
    @SerializedName("usage") private val _usage: CreateEmbeddingResponseUsage?
) {

    /**
    * The object type, which is always \"list\".
    * Values: list
    */
    enum class &#x60;Object&#x60;(val value: kotlin.String){
    
        list("list");
    
    }

        val `data` get() = _`data` ?: throw IllegalArgumentException("`data` is required")
                    
        val model get() = _model ?: throw IllegalArgumentException("model is required")
                    
        val `object` get() = _`object` ?: throw IllegalArgumentException("`object` is required")
                    
        val usage get() = _usage ?: throw IllegalArgumentException("usage is required")
                    
}

