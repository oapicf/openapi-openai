/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model


        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * 
 * @param hate 
 * @param hateThreatening 
 * @param selfHarm 
 * @param sexual 
 * @param sexualMinors 
 * @param violence 
 * @param violenceGraphic 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class CreateModerationResponseResultsInnerCategories (
    @SerializedName("hate") private val _hate: kotlin.Boolean?,
    @SerializedName("hateThreatening") private val _hateThreatening: kotlin.Boolean?,
    @SerializedName("selfHarm") private val _selfHarm: kotlin.Boolean?,
    @SerializedName("sexual") private val _sexual: kotlin.Boolean?,
    @SerializedName("sexualMinors") private val _sexualMinors: kotlin.Boolean?,
    @SerializedName("violence") private val _violence: kotlin.Boolean?,
    @SerializedName("violenceGraphic") private val _violenceGraphic: kotlin.Boolean?
) {

        val hate get() = _hate ?: throw IllegalArgumentException("hate is required")
                    
        val hateThreatening get() = _hateThreatening ?: throw IllegalArgumentException("hateThreatening is required")
                    
        val selfHarm get() = _selfHarm ?: throw IllegalArgumentException("selfHarm is required")
                    
        val sexual get() = _sexual ?: throw IllegalArgumentException("sexual is required")
                    
        val sexualMinors get() = _sexualMinors ?: throw IllegalArgumentException("sexualMinors is required")
                    
        val violence get() = _violence ?: throw IllegalArgumentException("violence is required")
                    
        val violenceGraphic get() = _violenceGraphic ?: throw IllegalArgumentException("violenceGraphic is required")
                    
}

