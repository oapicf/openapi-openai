/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model


        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * Represents an embedding vector returned by embedding endpoint. 
 * @param index The index of the embedding in the list of embeddings.
 * @param embedding The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings). 
 * @param &#x60;object&#x60; The object type, which is always \"embedding\".
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class Embedding (
    /* The index of the embedding in the list of embeddings. */
    @SerializedName("index") private val _index: kotlin.Int?,
    /* The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).  */
    @SerializedName("embedding") private val _embedding: kotlin.Array<java.math.BigDecimal>?,
    /* The object type, which is always \"embedding\". */
    @SerializedName("`object`") private val _`object`: Embedding.&#x60;Object&#x60;?
) {

    /**
    * The object type, which is always \"embedding\".
    * Values: embedding
    */
    enum class &#x60;Object&#x60;(val value: kotlin.String){
    
        embedding("embedding");
    
    }

        val index get() = _index ?: throw IllegalArgumentException("index is required")
                    
        val embedding get() = _embedding ?: throw IllegalArgumentException("embedding is required")
                    
        val `object` get() = _`object` ?: throw IllegalArgumentException("`object` is required")
                    
}

