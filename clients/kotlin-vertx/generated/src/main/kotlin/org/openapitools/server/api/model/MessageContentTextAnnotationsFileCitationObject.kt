/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model

import org.openapitools.server.api.model.MessageContentTextAnnotationsFileCitationObjectFileCitation

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \"retrieval\" tool to search files.
 * @param type Always `file_citation`.
 * @param text The text in the message content that needs to be replaced.
 * @param fileCitation 
 * @param startIndex 
 * @param endIndex 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class MessageContentTextAnnotationsFileCitationObject (
    /* Always `file_citation`. */
    @SerializedName("type") private val _type: MessageContentTextAnnotationsFileCitationObject.Type?,
    /* The text in the message content that needs to be replaced. */
    @SerializedName("text") private val _text: kotlin.String?,
    @SerializedName("fileCitation") private val _fileCitation: MessageContentTextAnnotationsFileCitationObjectFileCitation?,
    @SerializedName("startIndex") private val _startIndex: kotlin.Int?,
    @SerializedName("endIndex") private val _endIndex: kotlin.Int?
) {

    /**
    * Always `file_citation`.
    * Values: file_citation
    */
    enum class Type(val value: kotlin.String){
    
        file_citation("file_citation");
    
    }

        val type get() = _type ?: throw IllegalArgumentException("type is required")
                    
        val text get() = _text ?: throw IllegalArgumentException("text is required")
                    
        val fileCitation get() = _fileCitation ?: throw IllegalArgumentException("fileCitation is required")
                    
        val startIndex get() = _startIndex ?: throw IllegalArgumentException("startIndex is required")
                    
        val endIndex get() = _endIndex ?: throw IllegalArgumentException("endIndex is required")
                    
}

