/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model

import org.openapitools.server.api.model.MessageObjectContentInner
import org.openapitools.server.api.model.MessageObjectIncompleteDetails

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * Represents a message within a [thread](/docs/api-reference/threads).
 * @param id The identifier, which can be referenced in API endpoints.
 * @param &#x60;object&#x60; The object type, which is always `thread.message`.
 * @param createdAt The Unix timestamp (in seconds) for when the message was created.
 * @param threadId The [thread](/docs/api-reference/threads) ID that this message belongs to.
 * @param status The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
 * @param incompleteDetails 
 * @param completedAt The Unix timestamp (in seconds) for when the message was completed.
 * @param incompleteAt The Unix timestamp (in seconds) for when the message was marked as incomplete.
 * @param role The entity that produced the message. One of `user` or `assistant`.
 * @param content The content of the message in array of text and/or images.
 * @param assistantId If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
 * @param runId The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
 * @param fileIds A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
 * @param metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class MessageObject (
    /* The identifier, which can be referenced in API endpoints. */
    @SerializedName("id") private val _id: kotlin.String?,
    /* The object type, which is always `thread.message`. */
    @SerializedName("`object`") private val _`object`: MessageObject.&#x60;Object&#x60;?,
    /* The Unix timestamp (in seconds) for when the message was created. */
    @SerializedName("createdAt") private val _createdAt: kotlin.Int?,
    /* The [thread](/docs/api-reference/threads) ID that this message belongs to. */
    @SerializedName("threadId") private val _threadId: kotlin.String?,
    /* The status of the message, which can be either `in_progress`, `incomplete`, or `completed`. */
    @SerializedName("status") private val _status: MessageObject.Status?,
    @SerializedName("incompleteDetails") private val _incompleteDetails: MessageObjectIncompleteDetails?,
    /* The Unix timestamp (in seconds) for when the message was completed. */
    @SerializedName("completedAt") private val _completedAt: kotlin.Int?,
    /* The Unix timestamp (in seconds) for when the message was marked as incomplete. */
    @SerializedName("incompleteAt") private val _incompleteAt: kotlin.Int?,
    /* The entity that produced the message. One of `user` or `assistant`. */
    @SerializedName("role") private val _role: MessageObject.Role?,
    /* The content of the message in array of text and/or images. */
    @SerializedName("content") private val _content: kotlin.Array<MessageObjectContentInner>?,
    /* If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message. */
    @SerializedName("assistantId") private val _assistantId: kotlin.String?,
    /* The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints. */
    @SerializedName("runId") private val _runId: kotlin.String?,
    /* A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message. */
    @SerializedName("fileIds") private val _fileIds: kotlin.Array<kotlin.String>?,
    /* Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.  */
    @SerializedName("metadata") private val _metadata: kotlin.Any?
) {

    /**
    * The object type, which is always `thread.message`.
    * Values: threadPeriodMessage
    */
    enum class &#x60;Object&#x60;(val value: kotlin.String){
    
        threadPeriodMessage("thread.message");
    
    }

    /**
    * The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
    * Values: in_progress,incomplete,completed
    */
    enum class Status(val value: kotlin.String){
    
        in_progress("in_progress"),
    
        incomplete("incomplete"),
    
        completed("completed");
    
    }

    /**
    * The entity that produced the message. One of `user` or `assistant`.
    * Values: user,assistant
    */
    enum class Role(val value: kotlin.String){
    
        user("user"),
    
        assistant("assistant");
    
    }

        val id get() = _id ?: throw IllegalArgumentException("id is required")
                    
        val `object` get() = _`object` ?: throw IllegalArgumentException("`object` is required")
                    
        val createdAt get() = _createdAt ?: throw IllegalArgumentException("createdAt is required")
                    
        val threadId get() = _threadId ?: throw IllegalArgumentException("threadId is required")
                    
        val status get() = _status ?: throw IllegalArgumentException("status is required")
                    
        val incompleteDetails get() = _incompleteDetails ?: throw IllegalArgumentException("incompleteDetails is required")
                    
        val completedAt get() = _completedAt ?: throw IllegalArgumentException("completedAt is required")
                    
        val incompleteAt get() = _incompleteAt ?: throw IllegalArgumentException("incompleteAt is required")
                    
        val role get() = _role ?: throw IllegalArgumentException("role is required")
                    
        val content get() = _content ?: throw IllegalArgumentException("content is required")
                    
        val assistantId get() = _assistantId ?: throw IllegalArgumentException("assistantId is required")
                    
        val runId get() = _runId ?: throw IllegalArgumentException("runId is required")
                    
        val fileIds get() = _fileIds ?: throw IllegalArgumentException("fileIds is required")
                    
        val metadata get() = _metadata ?: throw IllegalArgumentException("metadata is required")
                    
}

