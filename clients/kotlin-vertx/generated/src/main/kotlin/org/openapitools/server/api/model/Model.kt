/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model


        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * Describes an OpenAI model offering that can be used with the API.
 * @param id The model identifier, which can be referenced in the API endpoints.
 * @param created The Unix timestamp (in seconds) when the model was created.
 * @param &#x60;object&#x60; The object type, which is always \"model\".
 * @param ownedBy The organization that owns the model.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class Model (
    /* The model identifier, which can be referenced in the API endpoints. */
    @SerializedName("id") private val _id: kotlin.String?,
    /* The Unix timestamp (in seconds) when the model was created. */
    @SerializedName("created") private val _created: kotlin.Int?,
    /* The object type, which is always \"model\". */
    @SerializedName("`object`") private val _`object`: Model.&#x60;Object&#x60;?,
    /* The organization that owns the model. */
    @SerializedName("ownedBy") private val _ownedBy: kotlin.String?
) {

    /**
    * The object type, which is always \"model\".
    * Values: model
    */
    enum class &#x60;Object&#x60;(val value: kotlin.String){
    
        model("model");
    
    }

        val id get() = _id ?: throw IllegalArgumentException("id is required")
                    
        val created get() = _created ?: throw IllegalArgumentException("created is required")
                    
        val `object` get() = _`object` ?: throw IllegalArgumentException("`object` is required")
                    
        val ownedBy get() = _ownedBy ?: throw IllegalArgumentException("ownedBy is required")
                    
}

