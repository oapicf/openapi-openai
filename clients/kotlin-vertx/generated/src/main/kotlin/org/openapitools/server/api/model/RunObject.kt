/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model

import org.openapitools.server.api.model.AssistantObjectToolsInner
import org.openapitools.server.api.model.AssistantsApiResponseFormatOption
import org.openapitools.server.api.model.AssistantsApiToolChoiceOption
import org.openapitools.server.api.model.RunCompletionUsage
import org.openapitools.server.api.model.RunObjectIncompleteDetails
import org.openapitools.server.api.model.RunObjectLastError
import org.openapitools.server.api.model.RunObjectRequiredAction
import org.openapitools.server.api.model.TruncationObject

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * Represents an execution run on a [thread](/docs/api-reference/threads).
 * @param id The identifier, which can be referenced in API endpoints.
 * @param &#x60;object&#x60; The object type, which is always `thread.run`.
 * @param createdAt The Unix timestamp (in seconds) for when the run was created.
 * @param threadId The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
 * @param assistantId The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
 * @param status The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
 * @param requiredAction 
 * @param lastError 
 * @param expiresAt The Unix timestamp (in seconds) for when the run will expire.
 * @param startedAt The Unix timestamp (in seconds) for when the run was started.
 * @param cancelledAt The Unix timestamp (in seconds) for when the run was cancelled.
 * @param failedAt The Unix timestamp (in seconds) for when the run failed.
 * @param completedAt The Unix timestamp (in seconds) for when the run was completed.
 * @param incompleteDetails 
 * @param model The model that the [assistant](/docs/api-reference/assistants) used for this run.
 * @param instructions The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
 * @param tools The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
 * @param fileIds The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
 * @param metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
 * @param usage 
 * @param maxPromptTokens The maximum number of prompt tokens specified to have been used over the course of the run. 
 * @param maxCompletionTokens The maximum number of completion tokens specified to have been used over the course of the run. 
 * @param truncationStrategy 
 * @param toolChoice 
 * @param responseFormat 
 * @param temperature The sampling temperature used for this run. If not set, defaults to 1.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class RunObject (
    /* The identifier, which can be referenced in API endpoints. */
    @SerializedName("id") private val _id: kotlin.String?,
    /* The object type, which is always `thread.run`. */
    @SerializedName("`object`") private val _`object`: RunObject.&#x60;Object&#x60;?,
    /* The Unix timestamp (in seconds) for when the run was created. */
    @SerializedName("createdAt") private val _createdAt: kotlin.Int?,
    /* The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run. */
    @SerializedName("threadId") private val _threadId: kotlin.String?,
    /* The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run. */
    @SerializedName("assistantId") private val _assistantId: kotlin.String?,
    /* The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`. */
    @SerializedName("status") private val _status: RunObject.Status?,
    @SerializedName("requiredAction") private val _requiredAction: RunObjectRequiredAction?,
    @SerializedName("lastError") private val _lastError: RunObjectLastError?,
    /* The Unix timestamp (in seconds) for when the run will expire. */
    @SerializedName("expiresAt") private val _expiresAt: kotlin.Int?,
    /* The Unix timestamp (in seconds) for when the run was started. */
    @SerializedName("startedAt") private val _startedAt: kotlin.Int?,
    /* The Unix timestamp (in seconds) for when the run was cancelled. */
    @SerializedName("cancelledAt") private val _cancelledAt: kotlin.Int?,
    /* The Unix timestamp (in seconds) for when the run failed. */
    @SerializedName("failedAt") private val _failedAt: kotlin.Int?,
    /* The Unix timestamp (in seconds) for when the run was completed. */
    @SerializedName("completedAt") private val _completedAt: kotlin.Int?,
    @SerializedName("incompleteDetails") private val _incompleteDetails: RunObjectIncompleteDetails?,
    /* The model that the [assistant](/docs/api-reference/assistants) used for this run. */
    @SerializedName("model") private val _model: kotlin.String?,
    /* The instructions that the [assistant](/docs/api-reference/assistants) used for this run. */
    @SerializedName("instructions") private val _instructions: kotlin.String?,
    /* The list of tools that the [assistant](/docs/api-reference/assistants) used for this run. */
    @SerializedName("tools") private val _tools: kotlin.Array<AssistantObjectToolsInner>?,
    /* The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run. */
    @SerializedName("fileIds") private val _fileIds: kotlin.Array<kotlin.String>?,
    /* Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.  */
    @SerializedName("metadata") private val _metadata: kotlin.Any?,
    @SerializedName("usage") private val _usage: RunCompletionUsage?,
    /* The maximum number of prompt tokens specified to have been used over the course of the run.  */
    @SerializedName("maxPromptTokens") private val _maxPromptTokens: kotlin.Int?,
    /* The maximum number of completion tokens specified to have been used over the course of the run.  */
    @SerializedName("maxCompletionTokens") private val _maxCompletionTokens: kotlin.Int?,
    @SerializedName("truncationStrategy") private val _truncationStrategy: TruncationObject?,
    @SerializedName("toolChoice") private val _toolChoice: AssistantsApiToolChoiceOption?,
    @SerializedName("responseFormat") private val _responseFormat: AssistantsApiResponseFormatOption?,
    /* The sampling temperature used for this run. If not set, defaults to 1. */
    val temperature: java.math.BigDecimal? = null
) {

    /**
    * The object type, which is always `thread.run`.
    * Values: threadPeriodRun
    */
    enum class &#x60;Object&#x60;(val value: kotlin.String){
    
        threadPeriodRun("thread.run");
    
    }

    /**
    * The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
    * Values: queued,in_progress,requires_action,cancelling,cancelled,failed,completed,expired
    */
    enum class Status(val value: kotlin.String){
    
        queued("queued"),
    
        in_progress("in_progress"),
    
        requires_action("requires_action"),
    
        cancelling("cancelling"),
    
        cancelled("cancelled"),
    
        failed("failed"),
    
        completed("completed"),
    
        expired("expired");
    
    }

        val id get() = _id ?: throw IllegalArgumentException("id is required")
                    
        val `object` get() = _`object` ?: throw IllegalArgumentException("`object` is required")
                    
        val createdAt get() = _createdAt ?: throw IllegalArgumentException("createdAt is required")
                    
        val threadId get() = _threadId ?: throw IllegalArgumentException("threadId is required")
                    
        val assistantId get() = _assistantId ?: throw IllegalArgumentException("assistantId is required")
                    
        val status get() = _status ?: throw IllegalArgumentException("status is required")
                    
        val requiredAction get() = _requiredAction ?: throw IllegalArgumentException("requiredAction is required")
                    
        val lastError get() = _lastError ?: throw IllegalArgumentException("lastError is required")
                    
        val expiresAt get() = _expiresAt ?: throw IllegalArgumentException("expiresAt is required")
                    
        val startedAt get() = _startedAt ?: throw IllegalArgumentException("startedAt is required")
                    
        val cancelledAt get() = _cancelledAt ?: throw IllegalArgumentException("cancelledAt is required")
                    
        val failedAt get() = _failedAt ?: throw IllegalArgumentException("failedAt is required")
                    
        val completedAt get() = _completedAt ?: throw IllegalArgumentException("completedAt is required")
                    
        val incompleteDetails get() = _incompleteDetails ?: throw IllegalArgumentException("incompleteDetails is required")
                    
        val model get() = _model ?: throw IllegalArgumentException("model is required")
                    
        val instructions get() = _instructions ?: throw IllegalArgumentException("instructions is required")
                    
        val tools get() = _tools ?: throw IllegalArgumentException("tools is required")
                    
        val fileIds get() = _fileIds ?: throw IllegalArgumentException("fileIds is required")
                    
        val metadata get() = _metadata ?: throw IllegalArgumentException("metadata is required")
                    
        val usage get() = _usage ?: throw IllegalArgumentException("usage is required")
                    
        val maxPromptTokens get() = _maxPromptTokens ?: throw IllegalArgumentException("maxPromptTokens is required")
                    
        val maxCompletionTokens get() = _maxCompletionTokens ?: throw IllegalArgumentException("maxCompletionTokens is required")
                    
        val truncationStrategy get() = _truncationStrategy ?: throw IllegalArgumentException("truncationStrategy is required")
                    
        val toolChoice get() = _toolChoice ?: throw IllegalArgumentException("toolChoice is required")
                    
        val responseFormat get() = _responseFormat ?: throw IllegalArgumentException("responseFormat is required")
                    
}

