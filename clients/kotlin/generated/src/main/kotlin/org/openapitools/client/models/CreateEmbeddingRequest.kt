/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.CreateEmbeddingRequestInput
import org.openapitools.client.models.CreateEmbeddingRequestModel

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param input 
 * @param model 
 * @param encodingFormat The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
 * @param dimensions The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models. 
 * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
 */


data class CreateEmbeddingRequest (

    @Json(name = "input")
    val input: CreateEmbeddingRequestInput,

    @Json(name = "model")
    val model: CreateEmbeddingRequestModel,

    /* The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/). */
    @Json(name = "encoding_format")
    val encodingFormat: CreateEmbeddingRequest.EncodingFormat? = EncodingFormat.float,

    /* The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.  */
    @Json(name = "dimensions")
    val dimensions: kotlin.Int? = null,

    /* A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */
    @Json(name = "user")
    val user: kotlin.String? = null

) {

    /**
     * The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
     *
     * Values: float,base64
     */
    @JsonClass(generateAdapter = false)
    enum class EncodingFormat(val value: kotlin.String) {
        @Json(name = "float") float("float"),
        @Json(name = "base64") base64("base64");
    }

}

