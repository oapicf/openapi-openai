/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.AudioApi
import org.openapitools.client.models.CreateSpeechRequest
import org.openapitools.client.models.CreateTranscription200Response
import org.openapitools.client.models.CreateTranscriptionRequestModel
import org.openapitools.client.models.CreateTranslation200Response

class AudioApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of AudioApi
        //val apiInstance = AudioApi()

        // to test createSpeech
        should("test createSpeech") {
            // uncomment below to test createSpeech
            //val createSpeechRequest : CreateSpeechRequest =  // CreateSpeechRequest | 
            //val result : java.io.File = apiInstance.createSpeech(createSpeechRequest)
            //result shouldBe ("TODO")
        }

        // to test createTranscription
        should("test createTranscription") {
            // uncomment below to test createTranscription
            //val file : java.io.File = BINARY_DATA_HERE // java.io.File | The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
            //val model : CreateTranscriptionRequestModel =  // CreateTranscriptionRequestModel | 
            //val language : kotlin.String = language_example // kotlin.String | The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
            //val prompt : kotlin.String = prompt_example // kotlin.String | An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
            //val responseFormat : kotlin.String = responseFormat_example // kotlin.String | The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. 
            //val temperature : java.math.BigDecimal = 8.14 // java.math.BigDecimal | The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
            //val timestampGranularities : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency. 
            //val result : CreateTranscription200Response = apiInstance.createTranscription(file, model, language, prompt, responseFormat, temperature, timestampGranularities)
            //result shouldBe ("TODO")
        }

        // to test createTranslation
        should("test createTranslation") {
            // uncomment below to test createTranslation
            //val file : java.io.File = BINARY_DATA_HERE // java.io.File | The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
            //val model : CreateTranscriptionRequestModel =  // CreateTranscriptionRequestModel | 
            //val prompt : kotlin.String = prompt_example // kotlin.String | An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. 
            //val responseFormat : kotlin.String = responseFormat_example // kotlin.String | The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. 
            //val temperature : java.math.BigDecimal = 8.14 // java.math.BigDecimal | The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
            //val result : CreateTranslation200Response = apiInstance.createTranslation(file, model, prompt, responseFormat, temperature)
            //result shouldBe ("TODO")
        }

    }
}
