/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.OpenAIApi
import org.openapitools.client.models.CreateChatCompletionRequest
import org.openapitools.client.models.CreateChatCompletionResponse
import org.openapitools.client.models.CreateCompletionRequest
import org.openapitools.client.models.CreateCompletionResponse
import org.openapitools.client.models.CreateEditRequest
import org.openapitools.client.models.CreateEditResponse
import org.openapitools.client.models.CreateEmbeddingRequest
import org.openapitools.client.models.CreateEmbeddingResponse
import org.openapitools.client.models.CreateFineTuneRequest
import org.openapitools.client.models.CreateImageRequest
import org.openapitools.client.models.CreateModerationRequest
import org.openapitools.client.models.CreateModerationResponse
import org.openapitools.client.models.CreateTranscriptionRequestModel
import org.openapitools.client.models.CreateTranscriptionResponse
import org.openapitools.client.models.CreateTranslationResponse
import org.openapitools.client.models.DeleteFileResponse
import org.openapitools.client.models.DeleteModelResponse
import org.openapitools.client.models.FineTune
import org.openapitools.client.models.ImagesResponse
import org.openapitools.client.models.ListFilesResponse
import org.openapitools.client.models.ListFineTuneEventsResponse
import org.openapitools.client.models.ListFineTunesResponse
import org.openapitools.client.models.ListModelsResponse
import org.openapitools.client.models.Model
import org.openapitools.client.models.OpenAIFile

class OpenAIApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of OpenAIApi
        //val apiInstance = OpenAIApi()

        // to test cancelFineTune
        should("test cancelFineTune") {
            // uncomment below to test cancelFineTune
            //val fineTuneId : kotlin.String = ft-AF1WoRqd3aJAHsqc9NY7iL8F // kotlin.String | The ID of the fine-tune job to cancel 
            //val result : FineTune = apiInstance.cancelFineTune(fineTuneId)
            //result shouldBe ("TODO")
        }

        // to test createChatCompletion
        should("test createChatCompletion") {
            // uncomment below to test createChatCompletion
            //val createChatCompletionRequest : CreateChatCompletionRequest =  // CreateChatCompletionRequest | 
            //val result : CreateChatCompletionResponse = apiInstance.createChatCompletion(createChatCompletionRequest)
            //result shouldBe ("TODO")
        }

        // to test createCompletion
        should("test createCompletion") {
            // uncomment below to test createCompletion
            //val createCompletionRequest : CreateCompletionRequest =  // CreateCompletionRequest | 
            //val result : CreateCompletionResponse = apiInstance.createCompletion(createCompletionRequest)
            //result shouldBe ("TODO")
        }

        // to test createEdit
        should("test createEdit") {
            // uncomment below to test createEdit
            //val createEditRequest : CreateEditRequest =  // CreateEditRequest | 
            //val result : CreateEditResponse = apiInstance.createEdit(createEditRequest)
            //result shouldBe ("TODO")
        }

        // to test createEmbedding
        should("test createEmbedding") {
            // uncomment below to test createEmbedding
            //val createEmbeddingRequest : CreateEmbeddingRequest =  // CreateEmbeddingRequest | 
            //val result : CreateEmbeddingResponse = apiInstance.createEmbedding(createEmbeddingRequest)
            //result shouldBe ("TODO")
        }

        // to test createFile
        should("test createFile") {
            // uncomment below to test createFile
            //val file : java.io.File = BINARY_DATA_HERE // java.io.File | Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the `purpose` is set to \\\"fine-tune\\\", each line is a JSON record with \\\"prompt\\\" and \\\"completion\\\" fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data). 
            //val purpose : kotlin.String = purpose_example // kotlin.String | The intended purpose of the uploaded documents.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. 
            //val result : OpenAIFile = apiInstance.createFile(file, purpose)
            //result shouldBe ("TODO")
        }

        // to test createFineTune
        should("test createFineTune") {
            // uncomment below to test createFineTune
            //val createFineTuneRequest : CreateFineTuneRequest =  // CreateFineTuneRequest | 
            //val result : FineTune = apiInstance.createFineTune(createFineTuneRequest)
            //result shouldBe ("TODO")
        }

        // to test createImage
        should("test createImage") {
            // uncomment below to test createImage
            //val createImageRequest : CreateImageRequest =  // CreateImageRequest | 
            //val result : ImagesResponse = apiInstance.createImage(createImageRequest)
            //result shouldBe ("TODO")
        }

        // to test createImageEdit
        should("test createImageEdit") {
            // uncomment below to test createImageEdit
            //val image : java.io.File = BINARY_DATA_HERE // java.io.File | The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
            //val prompt : kotlin.String = prompt_example // kotlin.String | A text description of the desired image(s). The maximum length is 1000 characters.
            //val mask : java.io.File = BINARY_DATA_HERE // java.io.File | An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
            //val n : kotlin.Int = 56 // kotlin.Int | The number of images to generate. Must be between 1 and 10.
            //val size : kotlin.String = size_example // kotlin.String | The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
            //val responseFormat : kotlin.String = responseFormat_example // kotlin.String | The format in which the generated images are returned. Must be one of `url` or `b64_json`.
            //val user : kotlin.String = user_example // kotlin.String | A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
            //val result : ImagesResponse = apiInstance.createImageEdit(image, prompt, mask, n, size, responseFormat, user)
            //result shouldBe ("TODO")
        }

        // to test createImageVariation
        should("test createImageVariation") {
            // uncomment below to test createImageVariation
            //val image : java.io.File = BINARY_DATA_HERE // java.io.File | The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
            //val n : kotlin.Int = 56 // kotlin.Int | The number of images to generate. Must be between 1 and 10.
            //val size : kotlin.String = size_example // kotlin.String | The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
            //val responseFormat : kotlin.String = responseFormat_example // kotlin.String | The format in which the generated images are returned. Must be one of `url` or `b64_json`.
            //val user : kotlin.String = user_example // kotlin.String | A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
            //val result : ImagesResponse = apiInstance.createImageVariation(image, n, size, responseFormat, user)
            //result shouldBe ("TODO")
        }

        // to test createModeration
        should("test createModeration") {
            // uncomment below to test createModeration
            //val createModerationRequest : CreateModerationRequest =  // CreateModerationRequest | 
            //val result : CreateModerationResponse = apiInstance.createModeration(createModerationRequest)
            //result shouldBe ("TODO")
        }

        // to test createTranscription
        should("test createTranscription") {
            // uncomment below to test createTranscription
            //val file : java.io.File = BINARY_DATA_HERE // java.io.File | The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
            //val model : CreateTranscriptionRequestModel =  // CreateTranscriptionRequestModel | 
            //val prompt : kotlin.String = prompt_example // kotlin.String | An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
            //val responseFormat : kotlin.String = responseFormat_example // kotlin.String | The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
            //val temperature : java.math.BigDecimal = 8.14 // java.math.BigDecimal | The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
            //val language : kotlin.String = language_example // kotlin.String | The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
            //val result : CreateTranscriptionResponse = apiInstance.createTranscription(file, model, prompt, responseFormat, temperature, language)
            //result shouldBe ("TODO")
        }

        // to test createTranslation
        should("test createTranslation") {
            // uncomment below to test createTranslation
            //val file : java.io.File = BINARY_DATA_HERE // java.io.File | The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
            //val model : CreateTranscriptionRequestModel =  // CreateTranscriptionRequestModel | 
            //val prompt : kotlin.String = prompt_example // kotlin.String | An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. 
            //val responseFormat : kotlin.String = responseFormat_example // kotlin.String | The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
            //val temperature : java.math.BigDecimal = 8.14 // java.math.BigDecimal | The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
            //val result : CreateTranslationResponse = apiInstance.createTranslation(file, model, prompt, responseFormat, temperature)
            //result shouldBe ("TODO")
        }

        // to test deleteFile
        should("test deleteFile") {
            // uncomment below to test deleteFile
            //val fileId : kotlin.String = fileId_example // kotlin.String | The ID of the file to use for this request
            //val result : DeleteFileResponse = apiInstance.deleteFile(fileId)
            //result shouldBe ("TODO")
        }

        // to test deleteModel
        should("test deleteModel") {
            // uncomment below to test deleteModel
            //val model : kotlin.String = curie:ft-acmeco-2021-03-03-21-44-20 // kotlin.String | The model to delete
            //val result : DeleteModelResponse = apiInstance.deleteModel(model)
            //result shouldBe ("TODO")
        }

        // to test downloadFile
        should("test downloadFile") {
            // uncomment below to test downloadFile
            //val fileId : kotlin.String = fileId_example // kotlin.String | The ID of the file to use for this request
            //val result : kotlin.String = apiInstance.downloadFile(fileId)
            //result shouldBe ("TODO")
        }

        // to test listFiles
        should("test listFiles") {
            // uncomment below to test listFiles
            //val result : ListFilesResponse = apiInstance.listFiles()
            //result shouldBe ("TODO")
        }

        // to test listFineTuneEvents
        should("test listFineTuneEvents") {
            // uncomment below to test listFineTuneEvents
            //val fineTuneId : kotlin.String = ft-AF1WoRqd3aJAHsqc9NY7iL8F // kotlin.String | The ID of the fine-tune job to get events for. 
            //val stream : kotlin.Boolean = true // kotlin.Boolean | Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a `data: [DONE]` message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned. 
            //val result : ListFineTuneEventsResponse = apiInstance.listFineTuneEvents(fineTuneId, stream)
            //result shouldBe ("TODO")
        }

        // to test listFineTunes
        should("test listFineTunes") {
            // uncomment below to test listFineTunes
            //val result : ListFineTunesResponse = apiInstance.listFineTunes()
            //result shouldBe ("TODO")
        }

        // to test listModels
        should("test listModels") {
            // uncomment below to test listModels
            //val result : ListModelsResponse = apiInstance.listModels()
            //result shouldBe ("TODO")
        }

        // to test retrieveFile
        should("test retrieveFile") {
            // uncomment below to test retrieveFile
            //val fileId : kotlin.String = fileId_example // kotlin.String | The ID of the file to use for this request
            //val result : OpenAIFile = apiInstance.retrieveFile(fileId)
            //result shouldBe ("TODO")
        }

        // to test retrieveFineTune
        should("test retrieveFineTune") {
            // uncomment below to test retrieveFineTune
            //val fineTuneId : kotlin.String = ft-AF1WoRqd3aJAHsqc9NY7iL8F // kotlin.String | The ID of the fine-tune job 
            //val result : FineTune = apiInstance.retrieveFineTune(fineTuneId)
            //result shouldBe ("TODO")
        }

        // to test retrieveModel
        should("test retrieveModel") {
            // uncomment below to test retrieveModel
            //val model : kotlin.String = text-davinci-001 // kotlin.String | The ID of the model to use for this request
            //val result : Model = apiInstance.retrieveModel(model)
            //result shouldBe ("TODO")
        }

    }
}
