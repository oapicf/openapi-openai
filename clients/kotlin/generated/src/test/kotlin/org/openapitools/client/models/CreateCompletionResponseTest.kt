/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.CreateCompletionResponse
import org.openapitools.client.models.CompletionUsage
import org.openapitools.client.models.CreateCompletionResponseChoicesInner

class CreateCompletionResponseTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CreateCompletionResponse
        //val modelInstance = CreateCompletionResponse()

        // to test the property `id` - A unique identifier for the completion.
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `choices` - The list of completion choices the model generated for the input prompt.
        should("test choices") {
            // uncomment below to test the property
            //modelInstance.choices shouldBe ("TODO")
        }

        // to test the property `created` - The Unix timestamp (in seconds) of when the completion was created.
        should("test created") {
            // uncomment below to test the property
            //modelInstance.created shouldBe ("TODO")
        }

        // to test the property `model` - The model used for completion.
        should("test model") {
            // uncomment below to test the property
            //modelInstance.model shouldBe ("TODO")
        }

        // to test the property ``object`` - The object type, which is always \"text_completion\"
        should("test `object`") {
            // uncomment below to test the property
            //modelInstance.`object` shouldBe ("TODO")
        }

        // to test the property `systemFingerprint` - This fingerprint represents the backend configuration that the model runs with.  Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism. 
        should("test systemFingerprint") {
            // uncomment below to test the property
            //modelInstance.systemFingerprint shouldBe ("TODO")
        }

        // to test the property `usage`
        should("test usage") {
            // uncomment below to test the property
            //modelInstance.usage shouldBe ("TODO")
        }

    }
}
