/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.CreateEditRequest
import org.openapitools.client.models.CreateEditRequestModel

class CreateEditRequestTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CreateEditRequest
        //val modelInstance = CreateEditRequest()

        // to test the property `model`
        should("test model") {
            // uncomment below to test the property
            //modelInstance.model shouldBe ("TODO")
        }

        // to test the property `instruction` - The instruction that tells the model how to edit the prompt.
        should("test instruction") {
            // uncomment below to test the property
            //modelInstance.instruction shouldBe ("TODO")
        }

        // to test the property `input` - The input text to use as a starting point for the edit.
        should("test input") {
            // uncomment below to test the property
            //modelInstance.input shouldBe ("TODO")
        }

        // to test the property `n` - How many edits to generate for the input and instruction.
        should("test n") {
            // uncomment below to test the property
            //modelInstance.n shouldBe ("TODO")
        }

        // to test the property `temperature` - What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
        should("test temperature") {
            // uncomment below to test the property
            //modelInstance.temperature shouldBe ("TODO")
        }

        // to test the property `topP` - An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
        should("test topP") {
            // uncomment below to test the property
            //modelInstance.topP shouldBe ("TODO")
        }

    }
}
