/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.CreateRunRequest
import org.openapitools.client.models.AssistantObjectToolsInner
import org.openapitools.client.models.AssistantsApiResponseFormatOption
import org.openapitools.client.models.AssistantsApiToolChoiceOption
import org.openapitools.client.models.CreateMessageRequest
import org.openapitools.client.models.CreateRunRequestModel
import org.openapitools.client.models.TruncationObject

class CreateRunRequestTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CreateRunRequest
        //val modelInstance = CreateRunRequest()

        // to test the property `assistantId` - The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
        should("test assistantId") {
            // uncomment below to test the property
            //modelInstance.assistantId shouldBe ("TODO")
        }

        // to test the property `model`
        should("test model") {
            // uncomment below to test the property
            //modelInstance.model shouldBe ("TODO")
        }

        // to test the property `instructions` - Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
        should("test instructions") {
            // uncomment below to test the property
            //modelInstance.instructions shouldBe ("TODO")
        }

        // to test the property `additionalInstructions` - Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
        should("test additionalInstructions") {
            // uncomment below to test the property
            //modelInstance.additionalInstructions shouldBe ("TODO")
        }

        // to test the property `additionalMessages` - Adds additional messages to the thread before creating the run.
        should("test additionalMessages") {
            // uncomment below to test the property
            //modelInstance.additionalMessages shouldBe ("TODO")
        }

        // to test the property `tools` - Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
        should("test tools") {
            // uncomment below to test the property
            //modelInstance.tools shouldBe ("TODO")
        }

        // to test the property `metadata` - Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
        should("test metadata") {
            // uncomment below to test the property
            //modelInstance.metadata shouldBe ("TODO")
        }

        // to test the property `temperature` - What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. 
        should("test temperature") {
            // uncomment below to test the property
            //modelInstance.temperature shouldBe ("TODO")
        }

        // to test the property `stream` - If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message. 
        should("test stream") {
            // uncomment below to test the property
            //modelInstance.stream shouldBe ("TODO")
        }

        // to test the property `maxPromptTokens` - The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `complete`. See `incomplete_details` for more info. 
        should("test maxPromptTokens") {
            // uncomment below to test the property
            //modelInstance.maxPromptTokens shouldBe ("TODO")
        }

        // to test the property `maxCompletionTokens` - The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `complete`. See `incomplete_details` for more info. 
        should("test maxCompletionTokens") {
            // uncomment below to test the property
            //modelInstance.maxCompletionTokens shouldBe ("TODO")
        }

        // to test the property `truncationStrategy`
        should("test truncationStrategy") {
            // uncomment below to test the property
            //modelInstance.truncationStrategy shouldBe ("TODO")
        }

        // to test the property `toolChoice`
        should("test toolChoice") {
            // uncomment below to test the property
            //modelInstance.toolChoice shouldBe ("TODO")
        }

        // to test the property `responseFormat`
        should("test responseFormat") {
            // uncomment below to test the property
            //modelInstance.responseFormat shouldBe ("TODO")
        }

    }
}
