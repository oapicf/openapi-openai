/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.TranscriptionSegment

class TranscriptionSegmentTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of TranscriptionSegment
        //val modelInstance = TranscriptionSegment()

        // to test the property `id` - Unique identifier of the segment.
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `seek` - Seek offset of the segment.
        should("test seek") {
            // uncomment below to test the property
            //modelInstance.seek shouldBe ("TODO")
        }

        // to test the property `start` - Start time of the segment in seconds.
        should("test start") {
            // uncomment below to test the property
            //modelInstance.start shouldBe ("TODO")
        }

        // to test the property `end` - End time of the segment in seconds.
        should("test end") {
            // uncomment below to test the property
            //modelInstance.end shouldBe ("TODO")
        }

        // to test the property `text` - Text content of the segment.
        should("test text") {
            // uncomment below to test the property
            //modelInstance.text shouldBe ("TODO")
        }

        // to test the property `tokens` - Array of token IDs for the text content.
        should("test tokens") {
            // uncomment below to test the property
            //modelInstance.tokens shouldBe ("TODO")
        }

        // to test the property `temperature` - Temperature parameter used for generating the segment.
        should("test temperature") {
            // uncomment below to test the property
            //modelInstance.temperature shouldBe ("TODO")
        }

        // to test the property `avgLogprob` - Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
        should("test avgLogprob") {
            // uncomment below to test the property
            //modelInstance.avgLogprob shouldBe ("TODO")
        }

        // to test the property `compressionRatio` - Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
        should("test compressionRatio") {
            // uncomment below to test the property
            //modelInstance.compressionRatio shouldBe ("TODO")
        }

        // to test the property `noSpeechProb` - Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
        should("test noSpeechProb") {
            // uncomment below to test the property
            //modelInstance.noSpeechProb shouldBe ("TODO")
        }

    }
}
