

-- --------------------------------------------------------------------------
-- Table structure for table `ChatCompletionFunctions` generated from model 'chatCompletionFunctions'
--

CREATE TABLE IF NOT EXISTS `ChatCompletionFunctions` (
  `name` text NOT NULL /*The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.*/,
  `description` text /*The description of what the function does.*/,
  `parameters` blob /*The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.*/
); 


-- --------------------------------------------------------------------------
-- Table structure for table `ChatCompletionRequestMessage` generated from model 'chatCompletionRequestMessage'
--

CREATE TABLE IF NOT EXISTS `ChatCompletionRequestMessage` (
  `role` text NOT NULL /*The role of the messages author. One of &#x60;system&#x60;, &#x60;user&#x60;, &#x60;assistant&#x60;, or &#x60;function&#x60;.*/,
  `content` text /*The contents of the message. &#x60;content&#x60; is required for all messages except assistant messages with function calls.*/,
  `name` text /*The name of the author of this message. &#x60;name&#x60; is required if role is &#x60;function&#x60;, and it should be the name of the function whose response is in the &#x60;content&#x60;. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.*/,
  `function_call` long
); 


-- --------------------------------------------------------------------------
-- Table structure for table `ChatCompletionRequestMessage_function_call` generated from model 'chatCompletionRequestMessageFunctionCall'
-- The name and arguments of a function that should be called, as generated by the model.
--

CREATE TABLE IF NOT EXISTS `ChatCompletionRequestMessage_function_call` (
  `name` text /*The name of the function to call.*/,
  `arguments` text /*The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.*/
);  /*The name and arguments of a function that should be called, as generated by the model.*/


-- --------------------------------------------------------------------------
-- Table structure for table `ChatCompletionResponseMessage` generated from model 'chatCompletionResponseMessage'
--

CREATE TABLE IF NOT EXISTS `ChatCompletionResponseMessage` (
  `role` text NOT NULL /*The role of the author of this message.*/,
  `content` text /*The contents of the message.*/,
  `function_call` long
); 


-- --------------------------------------------------------------------------
-- Table structure for table `ChatCompletionStreamResponseDelta` generated from model 'chatCompletionStreamResponseDelta'
--

CREATE TABLE IF NOT EXISTS `ChatCompletionStreamResponseDelta` (
  `role` text /*The role of the author of this message.*/,
  `content` text /*The contents of the chunk message.*/,
  `function_call` long
); 


-- --------------------------------------------------------------------------
-- Table structure for table `CreateChatCompletionRequest` generated from model 'createChatCompletionRequest'
--

CREATE TABLE IF NOT EXISTS `CreateChatCompletionRequest` (
  `model` long NOT NULL,
  `function_call` long,
  `temperature` decimal /*What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both. */,
  `top_p` decimal /*An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. */,
  `n` int UNSIGNED /*How many chat completion choices to generate for each input message.*/,
  `stream` boolean /*If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a &#x60;data: [DONE]&#x60; message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb). */,
  `stop` long,
  `max_tokens` int /*The maximum number of [tokens](/tokenizer) to generate in the chat completion.  The total length of input tokens and generated tokens is limited by the model&#39;s context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens. */,
  `presence_penalty` decimal /*Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) */,
  `frequency_penalty` decimal /*Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) */,
  `logit_bias` blob /*Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. */,
  `user` text /*A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). */
); 

-- --------------------------------------------------------------------------
-- Table structure for table `CreateChatCompletionRequestChatCompletionRequestMessage` generated from model 'CreateChatCompletionRequestChatCompletionRequestMessage'

CREATE TABLE IF NOT EXISTS `CreateChatCompletionRequestChatCompletionRequestMessage` (
  `createChatCompletionRequest` long NOT NULL
  `chatCompletionRequestMessage` long NOT NULL
);

-- --------------------------------------------------------------------------
-- Table structure for table `CreateChatCompletionRequestChatCompletionFunctions` generated from model 'CreateChatCompletionRequestChatCompletionFunctions'

CREATE TABLE IF NOT EXISTS `CreateChatCompletionRequestChatCompletionFunctions` (
  `createChatCompletionRequest` long NOT NULL
  `chatCompletionFunctions` long NOT NULL
);


-- --------------------------------------------------------------------------
-- Table structure for table `CreateChatCompletionRequest_function_call` generated from model 'createChatCompletionRequestFunctionCall'
-- Controls how the model responds to function calls. \&quot;none\&quot; means the model does not call a function, and responds to the end-user. \&quot;auto\&quot; means the model can pick between an end-user or calling a function.  Specifying a particular function via &#x60;{\&quot;name\&quot;:\\ \&quot;my_function\&quot;}&#x60; forces the model to call that function. \&quot;none\&quot; is the default when no functions are present. \&quot;auto\&quot; is the default if functions are present.
--

CREATE TABLE IF NOT EXISTS `CreateChatCompletionRequest_function_call` (
  `name` text NOT NULL /*The name of the function to call.*/
);  /*Controls how the model responds to function calls. \&quot;none\&quot; means the model does not call a function, and responds to the end-user. \&quot;auto\&quot; means the model can pick between an end-user or calling a function.  Specifying a particular function via &#x60;{\&quot;name\&quot;:\\ \&quot;my_function\&quot;}&#x60; forces the model to call that function. \&quot;none\&quot; is the default when no functions are present. \&quot;auto\&quot; is the default if functions are present.*/


-- --------------------------------------------------------------------------
-- Table structure for table `CreateChatCompletionRequest_function_call_oneOf` generated from model 'createChatCompletionRequestFunctionCallOneOf'
--

CREATE TABLE IF NOT EXISTS `CreateChatCompletionRequest_function_call_oneOf` (
  `name` text NOT NULL /*The name of the function to call.*/
); 


-- --------------------------------------------------------------------------
-- Table structure for table `CreateChatCompletionResponse` generated from model 'createChatCompletionResponse'
--

CREATE TABLE IF NOT EXISTS `CreateChatCompletionResponse` (
  `id` text NOT NULL PRIMARY KEY,
  `object` text NOT NULL,
  `created` int NOT NULL,
  `model` text NOT NULL,
  `usage` long
); 

-- --------------------------------------------------------------------------
-- Table structure for table `CreateChatCompletionResponseCreateChatCompletionResponseChoicesInner` generated from model 'CreateChatCompletionResponseCreateChatCompletionResponseChoicesInner'

CREATE TABLE IF NOT EXISTS `CreateChatCompletionResponseCreateChatCompletionResponseChoicesInner` (
  `createChatCompletionResponse` long NOT NULL
  `createChatCompletionResponseChoicesInner` long NOT NULL
);


-- --------------------------------------------------------------------------
-- Table structure for table `CreateChatCompletionResponse_choices_inner` generated from model 'createChatCompletionResponseChoicesInner'
--

CREATE TABLE IF NOT EXISTS `CreateChatCompletionResponse_choices_inner` (
  `index` int,
  `message` long,
  `finish_reason` text
); 


-- --------------------------------------------------------------------------
-- Table structure for table `CreateChatCompletionStreamResponse` generated from model 'createChatCompletionStreamResponse'
--

CREATE TABLE IF NOT EXISTS `CreateChatCompletionStreamResponse` (
  `id` text NOT NULL PRIMARY KEY,
  `object` text NOT NULL,
  `created` int NOT NULL,
  `model` text NOT NULL,
); 

-- --------------------------------------------------------------------------
-- Table structure for table `CreateChatCompletionStreamResponseCreateChatCompletionStreamResponseChoicesInner` generated from model 'CreateChatCompletionStreamResponseCreateChatCompletionStreamResponseChoicesInner'

CREATE TABLE IF NOT EXISTS `CreateChatCompletionStreamResponseCreateChatCompletionStreamResponseChoicesInner` (
  `createChatCompletionStreamResponse` long NOT NULL
  `createChatCompletionStreamResponseChoicesInner` long NOT NULL
);


-- --------------------------------------------------------------------------
-- Table structure for table `CreateChatCompletionStreamResponse_choices_inner` generated from model 'createChatCompletionStreamResponseChoicesInner'
--

CREATE TABLE IF NOT EXISTS `CreateChatCompletionStreamResponse_choices_inner` (
  `index` int,
  `delta` long,
  `finish_reason` text
); 


-- --------------------------------------------------------------------------
-- Table structure for table `CreateCompletionRequest` generated from model 'createCompletionRequest'
--

CREATE TABLE IF NOT EXISTS `CreateCompletionRequest` (
  `model` long NOT NULL,
  `prompt` long NOT NULL,
  `suffix` text /*The suffix that comes after a completion of inserted text.*/,
  `max_tokens` int UNSIGNED /*The maximum number of [tokens](/tokenizer) to generate in the completion.  The token count of your prompt plus &#x60;max_tokens&#x60; cannot exceed the model&#39;s context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens. */,
  `temperature` decimal /*What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both. */,
  `top_p` decimal /*An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. */,
  `n` int UNSIGNED /*How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for &#x60;max_tokens&#x60; and &#x60;stop&#x60;. */,
  `stream` boolean /*Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a &#x60;data: [DONE]&#x60; message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb). */,
  `logprobs` int UNSIGNED /*Include the log probabilities on the &#x60;logprobs&#x60; most likely tokens, as well the chosen tokens. For example, if &#x60;logprobs&#x60; is 5, the API will return a list of the 5 most likely tokens. The API will always return the &#x60;logprob&#x60; of the sampled token, so there may be up to &#x60;logprobs+1&#x60; elements in the response.  The maximum value for &#x60;logprobs&#x60; is 5. */,
  `echo` boolean /*Echo back the prompt in addition to the completion */,
  `stop` long,
  `presence_penalty` decimal /*Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) */,
  `frequency_penalty` decimal /*Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) */,
  `best_of` int UNSIGNED /*Generates &#x60;best_of&#x60; completions server-side and returns the \&quot;best\&quot; (the one with the highest log probability per token). Results cannot be streamed.  When used with &#x60;n&#x60;, &#x60;best_of&#x60; controls the number of candidate completions and &#x60;n&#x60; specifies how many to return – &#x60;best_of&#x60; must be greater than &#x60;n&#x60;.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for &#x60;max_tokens&#x60; and &#x60;stop&#x60;. */,
  `logit_bias` blob /*Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view&#x3D;bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass &#x60;{\&quot;50256\&quot;: -100}&#x60; to prevent the &lt;|endoftext|&gt; token from being generated. */,
  `user` text /*A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). */
); 


-- --------------------------------------------------------------------------
-- Table structure for table `CreateCompletionResponse` generated from model 'createCompletionResponse'
--

CREATE TABLE IF NOT EXISTS `CreateCompletionResponse` (
  `id` text NOT NULL PRIMARY KEY,
  `object` text NOT NULL,
  `created` int NOT NULL,
  `model` text NOT NULL,
  `usage` long
); 

-- --------------------------------------------------------------------------
-- Table structure for table `CreateCompletionResponseCreateCompletionResponseChoicesInner` generated from model 'CreateCompletionResponseCreateCompletionResponseChoicesInner'

CREATE TABLE IF NOT EXISTS `CreateCompletionResponseCreateCompletionResponseChoicesInner` (
  `createCompletionResponse` long NOT NULL
  `createCompletionResponseChoicesInner` long NOT NULL
);


-- --------------------------------------------------------------------------
-- Table structure for table `CreateCompletionResponse_choices_inner` generated from model 'createCompletionResponseChoicesInner'
--

CREATE TABLE IF NOT EXISTS `CreateCompletionResponse_choices_inner` (
  `text` text NOT NULL,
  `index` int NOT NULL,
  `logprobs` long NOT NULL,
  `finish_reason` text NOT NULL
); 


-- --------------------------------------------------------------------------
-- Table structure for table `CreateCompletionResponse_choices_inner_logprobs` generated from model 'createCompletionResponseChoicesInnerLogprobs'
--

CREATE TABLE IF NOT EXISTS `CreateCompletionResponse_choices_inner_logprobs` (
); 

-- --------------------------------------------------------------------------
-- Table structure for table `CreateCompletionResponseChoicesInnerLogprobsTokens` generated from model 'CreateCompletionResponseChoicesInnerLogprobsTokens'

CREATE TABLE IF NOT EXISTS `CreateCompletionResponseChoicesInnerLogprobsTokens` (
  `createCompletionResponseChoicesInnerLogprobs` long NOT NULL
  `tokens` text NOT NULL
);

-- --------------------------------------------------------------------------
-- Table structure for table `CreateCompletionResponseChoicesInnerLogprobsTokenLogprobs` generated from model 'CreateCompletionResponseChoicesInnerLogprobsTokenLogprobs'

CREATE TABLE IF NOT EXISTS `CreateCompletionResponseChoicesInnerLogprobsTokenLogprobs` (
  `createCompletionResponseChoicesInnerLogprobs` long NOT NULL
  `tokenLogprobs` decimal NOT NULL
);

-- --------------------------------------------------------------------------
-- Table structure for table `CreateCompletionResponseChoicesInnerLogprobsTopLogprobs` generated from model 'CreateCompletionResponseChoicesInnerLogprobsTopLogprobs'

CREATE TABLE IF NOT EXISTS `CreateCompletionResponseChoicesInnerLogprobsTopLogprobs` (
  `createCompletionResponseChoicesInnerLogprobs` long NOT NULL
  `topLogprobs` blob NOT NULL
);

-- --------------------------------------------------------------------------
-- Table structure for table `CreateCompletionResponseChoicesInnerLogprobsTextOffset` generated from model 'CreateCompletionResponseChoicesInnerLogprobsTextOffset'

CREATE TABLE IF NOT EXISTS `CreateCompletionResponseChoicesInnerLogprobsTextOffset` (
  `createCompletionResponseChoicesInnerLogprobs` long NOT NULL
  `textOffset` int NOT NULL
);


-- --------------------------------------------------------------------------
-- Table structure for table `CreateCompletionResponse_usage` generated from model 'createCompletionResponseUsage'
--

CREATE TABLE IF NOT EXISTS `CreateCompletionResponse_usage` (
  `prompt_tokens` int NOT NULL,
  `completion_tokens` int NOT NULL,
  `total_tokens` int NOT NULL
); 


-- --------------------------------------------------------------------------
-- Table structure for table `CreateEditRequest` generated from model 'createEditRequest'
--

CREATE TABLE IF NOT EXISTS `CreateEditRequest` (
  `model` long NOT NULL,
  `instruction` text NOT NULL /*The instruction that tells the model how to edit the prompt.*/,
  `input` text /*The input text to use as a starting point for the edit.*/,
  `n` int UNSIGNED /*How many edits to generate for the input and instruction.*/,
  `temperature` decimal /*What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both. */,
  `top_p` decimal /*An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. */
); 


-- --------------------------------------------------------------------------
-- Table structure for table `CreateEditResponse` generated from model 'createEditResponse'
--

CREATE TABLE IF NOT EXISTS `CreateEditResponse` (
  `object` text NOT NULL,
  `created` int NOT NULL,
  `usage` long NOT NULL
); 

-- --------------------------------------------------------------------------
-- Table structure for table `CreateEditResponseCreateEditResponseChoicesInner` generated from model 'CreateEditResponseCreateEditResponseChoicesInner'

CREATE TABLE IF NOT EXISTS `CreateEditResponseCreateEditResponseChoicesInner` (
  `createEditResponse` long NOT NULL
  `createEditResponseChoicesInner` long NOT NULL
);


-- --------------------------------------------------------------------------
-- Table structure for table `CreateEditResponse_choices_inner` generated from model 'createEditResponseChoicesInner'
--

CREATE TABLE IF NOT EXISTS `CreateEditResponse_choices_inner` (
  `text` text,
  `index` int,
  `logprobs` long,
  `finish_reason` text
); 


-- --------------------------------------------------------------------------
-- Table structure for table `CreateEmbeddingRequest` generated from model 'createEmbeddingRequest'
--

CREATE TABLE IF NOT EXISTS `CreateEmbeddingRequest` (
  `model` long NOT NULL,
  `input` long NOT NULL,
  `user` text /*A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). */
); 


-- --------------------------------------------------------------------------
-- Table structure for table `CreateEmbeddingResponse` generated from model 'createEmbeddingResponse'
--

CREATE TABLE IF NOT EXISTS `CreateEmbeddingResponse` (
  `object` text NOT NULL,
  `model` text NOT NULL,
  `usage` long NOT NULL
); 

-- --------------------------------------------------------------------------
-- Table structure for table `CreateEmbeddingResponseCreateEmbeddingResponseDataInner` generated from model 'CreateEmbeddingResponseCreateEmbeddingResponseDataInner'

CREATE TABLE IF NOT EXISTS `CreateEmbeddingResponseCreateEmbeddingResponseDataInner` (
  `createEmbeddingResponse` long NOT NULL
  `createEmbeddingResponseDataInner` long NOT NULL
);


-- --------------------------------------------------------------------------
-- Table structure for table `CreateEmbeddingResponse_data_inner` generated from model 'createEmbeddingResponseDataInner'
--

CREATE TABLE IF NOT EXISTS `CreateEmbeddingResponse_data_inner` (
  `index` int NOT NULL,
  `object` text NOT NULL,
); 

-- --------------------------------------------------------------------------
-- Table structure for table `CreateEmbeddingResponseDataInnerEmbedding` generated from model 'CreateEmbeddingResponseDataInnerEmbedding'

CREATE TABLE IF NOT EXISTS `CreateEmbeddingResponseDataInnerEmbedding` (
  `createEmbeddingResponseDataInner` long NOT NULL
  `embedding` decimal NOT NULL
);


-- --------------------------------------------------------------------------
-- Table structure for table `CreateEmbeddingResponse_usage` generated from model 'createEmbeddingResponseUsage'
--

CREATE TABLE IF NOT EXISTS `CreateEmbeddingResponse_usage` (
  `prompt_tokens` int NOT NULL,
  `total_tokens` int NOT NULL
); 


-- --------------------------------------------------------------------------
-- Table structure for table `CreateFineTuneRequest` generated from model 'createFineTuneRequest'
--

CREATE TABLE IF NOT EXISTS `CreateFineTuneRequest` (
  `training_file` text NOT NULL /*The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file, where each training example is a JSON object with the keys \&quot;prompt\&quot; and \&quot;completion\&quot;. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. */,
  `validation_file` text /*The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model). Your train and validation data should be mutually exclusive.  Your dataset must be formatted as a JSONL file, where each validation example is a JSON object with the keys \&quot;prompt\&quot; and \&quot;completion\&quot;. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. */,
  `model` long,
  `n_epochs` int /*The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. */,
  `batch_size` int /*The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass.  By default, the batch size will be dynamically configured to be ~0.2% of the number of examples in the training set, capped at 256 - in general, we&#39;ve found that larger batch sizes tend to work better for larger datasets. */,
  `learning_rate_multiplier` decimal /*The learning rate multiplier to use for training. The fine-tuning learning rate is the original learning rate used for pretraining multiplied by this value.  By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on final &#x60;batch_size&#x60; (larger learning rates tend to perform better with larger batch sizes). We recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best results. */,
  `prompt_loss_weight` decimal /*The weight to use for loss on the prompt tokens. This controls how much the model tries to learn to generate the prompt (as compared to the completion which always has a weight of 1.0), and can add a stabilizing effect to training when completions are short.  If prompts are extremely long (relative to completions), it may make sense to reduce this weight so as to avoid over-prioritizing learning the prompt. */,
  `compute_classification_metrics` boolean /*If set, we calculate classification-specific metrics such as accuracy and F-1 score using the validation set at the end of every epoch. These metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).  In order to compute classification metrics, you must provide a &#x60;validation_file&#x60;. Additionally, you must specify &#x60;classification_n_classes&#x60; for multiclass classification or &#x60;classification_positive_class&#x60; for binary classification. */,
  `classification_n_classes` int /*The number of classes in a classification task.  This parameter is required for multiclass classification. */,
  `classification_positive_class` text /*The positive class in binary classification.  This parameter is needed to generate precision, recall, and F1 metrics when doing binary classification. */,
  `suffix` text /*A string of up to 40 characters that will be added to your fine-tuned model name.  For example, a &#x60;suffix&#x60; of \&quot;custom-model-name\&quot; would produce a model name like &#x60;ada:ft-your-org:custom-model-name-2022-02-15-04-21-04&#x60;. */
); 

-- --------------------------------------------------------------------------
-- Table structure for table `CreateFineTuneRequestClassificationBetas` generated from model 'CreateFineTuneRequestClassificationBetas'

CREATE TABLE IF NOT EXISTS `CreateFineTuneRequestClassificationBetas` (
  `createFineTuneRequest` long NOT NULL
  `classificationBetas` decimal NOT NULL
);


-- --------------------------------------------------------------------------
-- Table structure for table `CreateImageRequest` generated from model 'createImageRequest'
--

CREATE TABLE IF NOT EXISTS `CreateImageRequest` (
  `prompt` text NOT NULL /*A text description of the desired image(s). The maximum length is 1000 characters.*/,
  `n` int UNSIGNED /*The number of images to generate. Must be between 1 and 10.*/,
  `size` text /*The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.*/,
  `response_format` text /*The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.*/,
  `user` text /*A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). */
); 


-- --------------------------------------------------------------------------
-- Table structure for table `CreateModerationRequest` generated from model 'createModerationRequest'
--

CREATE TABLE IF NOT EXISTS `CreateModerationRequest` (
  `input` long NOT NULL,
  `model` long
); 


-- --------------------------------------------------------------------------
-- Table structure for table `CreateModerationResponse` generated from model 'createModerationResponse'
--

CREATE TABLE IF NOT EXISTS `CreateModerationResponse` (
  `id` text NOT NULL PRIMARY KEY,
  `model` text NOT NULL,
); 

-- --------------------------------------------------------------------------
-- Table structure for table `CreateModerationResponseCreateModerationResponseResultsInner` generated from model 'CreateModerationResponseCreateModerationResponseResultsInner'

CREATE TABLE IF NOT EXISTS `CreateModerationResponseCreateModerationResponseResultsInner` (
  `createModerationResponse` long NOT NULL
  `createModerationResponseResultsInner` long NOT NULL
);


-- --------------------------------------------------------------------------
-- Table structure for table `CreateModerationResponse_results_inner` generated from model 'createModerationResponseResultsInner'
--

CREATE TABLE IF NOT EXISTS `CreateModerationResponse_results_inner` (
  `flagged` boolean NOT NULL,
  `categories` long NOT NULL,
  `category_scores` long NOT NULL
); 


-- --------------------------------------------------------------------------
-- Table structure for table `CreateModerationResponse_results_inner_categories` generated from model 'createModerationResponseResultsInnerCategories'
--

CREATE TABLE IF NOT EXISTS `CreateModerationResponse_results_inner_categories` (
  `hate` boolean NOT NULL,
  `hatethreatening` boolean NOT NULL,
  `selfharm` boolean NOT NULL,
  `sexual` boolean NOT NULL,
  `sexualminors` boolean NOT NULL,
  `violence` boolean NOT NULL,
  `violencegraphic` boolean NOT NULL
); 


-- --------------------------------------------------------------------------
-- Table structure for table `CreateModerationResponse_results_inner_category_scores` generated from model 'createModerationResponseResultsInnerCategoryScores'
--

CREATE TABLE IF NOT EXISTS `CreateModerationResponse_results_inner_category_scores` (
  `hate` decimal NOT NULL,
  `hatethreatening` decimal NOT NULL,
  `selfharm` decimal NOT NULL,
  `sexual` decimal NOT NULL,
  `sexualminors` decimal NOT NULL,
  `violence` decimal NOT NULL,
  `violencegraphic` decimal NOT NULL
); 


-- --------------------------------------------------------------------------
-- Table structure for table `CreateTranscriptionResponse` generated from model 'createTranscriptionResponse'
--

CREATE TABLE IF NOT EXISTS `CreateTranscriptionResponse` (
  `text` text NOT NULL
); 


-- --------------------------------------------------------------------------
-- Table structure for table `CreateTranslationResponse` generated from model 'createTranslationResponse'
--

CREATE TABLE IF NOT EXISTS `CreateTranslationResponse` (
  `text` text NOT NULL
); 


-- --------------------------------------------------------------------------
-- Table structure for table `DeleteFileResponse` generated from model 'deleteFileResponse'
--

CREATE TABLE IF NOT EXISTS `DeleteFileResponse` (
  `id` text NOT NULL PRIMARY KEY,
  `object` text NOT NULL,
  `deleted` boolean NOT NULL
); 


-- --------------------------------------------------------------------------
-- Table structure for table `DeleteModelResponse` generated from model 'deleteModelResponse'
--

CREATE TABLE IF NOT EXISTS `DeleteModelResponse` (
  `id` text NOT NULL PRIMARY KEY,
  `object` text NOT NULL,
  `deleted` boolean NOT NULL
); 


-- --------------------------------------------------------------------------
-- Table structure for table `Error` generated from model 'error'
--

CREATE TABLE IF NOT EXISTS `Error` (
  `type` text NOT NULL,
  `message` text NOT NULL,
  `param` text NOT NULL,
  `code` text NOT NULL
); 


-- --------------------------------------------------------------------------
-- Table structure for table `ErrorResponse` generated from model 'errorResponse'
--

CREATE TABLE IF NOT EXISTS `ErrorResponse` (
  `error` long NOT NULL
); 


-- --------------------------------------------------------------------------
-- Table structure for table `FineTune` generated from model 'fineTune'
--

CREATE TABLE IF NOT EXISTS `FineTune` (
  `id` text NOT NULL PRIMARY KEY,
  `object` text NOT NULL,
  `created_at` int NOT NULL,
  `updated_at` int NOT NULL,
  `model` text NOT NULL,
  `fine_tuned_model` text NOT NULL,
  `organization_id` text NOT NULL,
  `status` text NOT NULL,
  `hyperparams` blob NOT NULL,
); 

-- --------------------------------------------------------------------------
-- Table structure for table `FineTuneOpenAIFile` generated from model 'FineTuneOpenAIFile'

CREATE TABLE IF NOT EXISTS `FineTuneOpenAIFile` (
  `fineTune` long NOT NULL
  `openAIFile` long NOT NULL
);

-- --------------------------------------------------------------------------
-- Table structure for table `FineTuneOpenAIFile` generated from model 'FineTuneOpenAIFile'

CREATE TABLE IF NOT EXISTS `FineTuneOpenAIFile` (
  `fineTune` long NOT NULL
  `openAIFile` long NOT NULL
);

-- --------------------------------------------------------------------------
-- Table structure for table `FineTuneOpenAIFile` generated from model 'FineTuneOpenAIFile'

CREATE TABLE IF NOT EXISTS `FineTuneOpenAIFile` (
  `fineTune` long NOT NULL
  `openAIFile` long NOT NULL
);

-- --------------------------------------------------------------------------
-- Table structure for table `FineTuneFineTuneEvent` generated from model 'FineTuneFineTuneEvent'

CREATE TABLE IF NOT EXISTS `FineTuneFineTuneEvent` (
  `fineTune` long NOT NULL
  `fineTuneEvent` long NOT NULL
);


-- --------------------------------------------------------------------------
-- Table structure for table `FineTuneEvent` generated from model 'fineTuneEvent'
--

CREATE TABLE IF NOT EXISTS `FineTuneEvent` (
  `object` text NOT NULL,
  `created_at` int NOT NULL,
  `level` text NOT NULL,
  `message` text NOT NULL
); 


-- --------------------------------------------------------------------------
-- Table structure for table `ImagesResponse` generated from model 'imagesResponse'
--

CREATE TABLE IF NOT EXISTS `ImagesResponse` (
  `created` int NOT NULL,
); 

-- --------------------------------------------------------------------------
-- Table structure for table `ImagesResponseImagesResponseDataInner` generated from model 'ImagesResponseImagesResponseDataInner'

CREATE TABLE IF NOT EXISTS `ImagesResponseImagesResponseDataInner` (
  `imagesResponse` long NOT NULL
  `imagesResponseDataInner` long NOT NULL
);


-- --------------------------------------------------------------------------
-- Table structure for table `ImagesResponse_data_inner` generated from model 'imagesResponseDataInner'
--

CREATE TABLE IF NOT EXISTS `ImagesResponse_data_inner` (
  `url` text,
  `b64_json` text
); 


-- --------------------------------------------------------------------------
-- Table structure for table `ListFilesResponse` generated from model 'listFilesResponse'
--

CREATE TABLE IF NOT EXISTS `ListFilesResponse` (
  `object` text NOT NULL,
); 

-- --------------------------------------------------------------------------
-- Table structure for table `ListFilesResponseOpenAIFile` generated from model 'ListFilesResponseOpenAIFile'

CREATE TABLE IF NOT EXISTS `ListFilesResponseOpenAIFile` (
  `listFilesResponse` long NOT NULL
  `openAIFile` long NOT NULL
);


-- --------------------------------------------------------------------------
-- Table structure for table `ListFineTuneEventsResponse` generated from model 'listFineTuneEventsResponse'
--

CREATE TABLE IF NOT EXISTS `ListFineTuneEventsResponse` (
  `object` text NOT NULL,
); 

-- --------------------------------------------------------------------------
-- Table structure for table `ListFineTuneEventsResponseFineTuneEvent` generated from model 'ListFineTuneEventsResponseFineTuneEvent'

CREATE TABLE IF NOT EXISTS `ListFineTuneEventsResponseFineTuneEvent` (
  `listFineTuneEventsResponse` long NOT NULL
  `fineTuneEvent` long NOT NULL
);


-- --------------------------------------------------------------------------
-- Table structure for table `ListFineTunesResponse` generated from model 'listFineTunesResponse'
--

CREATE TABLE IF NOT EXISTS `ListFineTunesResponse` (
  `object` text NOT NULL,
); 

-- --------------------------------------------------------------------------
-- Table structure for table `ListFineTunesResponseFineTune` generated from model 'ListFineTunesResponseFineTune'

CREATE TABLE IF NOT EXISTS `ListFineTunesResponseFineTune` (
  `listFineTunesResponse` long NOT NULL
  `fineTune` long NOT NULL
);


-- --------------------------------------------------------------------------
-- Table structure for table `ListModelsResponse` generated from model 'listModelsResponse'
--

CREATE TABLE IF NOT EXISTS `ListModelsResponse` (
  `object` text NOT NULL,
); 

-- --------------------------------------------------------------------------
-- Table structure for table `ListModelsResponseModel` generated from model 'ListModelsResponseModel'

CREATE TABLE IF NOT EXISTS `ListModelsResponseModel` (
  `listModelsResponse` long NOT NULL
  `model` long NOT NULL
);


-- --------------------------------------------------------------------------
-- Table structure for table `Model` generated from model 'model'
--

CREATE TABLE IF NOT EXISTS `Model` (
  `id` text NOT NULL PRIMARY KEY,
  `object` text NOT NULL,
  `created` int NOT NULL,
  `owned_by` text NOT NULL
); 


-- --------------------------------------------------------------------------
-- Table structure for table `OpenAIFile` generated from model 'openAIFile'
--

CREATE TABLE IF NOT EXISTS `OpenAIFile` (
  `id` text NOT NULL PRIMARY KEY,
  `object` text NOT NULL,
  `bytes` int NOT NULL,
  `created_at` int NOT NULL,
  `filename` text NOT NULL,
  `purpose` text NOT NULL,
  `status` text,
  `status_details` blob
); 



--
-- Table structure for table `_db_version`
--
CREATE TABLE IF NOT EXISTS `_db_version` (
  `version`    LONG    DEFAULT 1
);
