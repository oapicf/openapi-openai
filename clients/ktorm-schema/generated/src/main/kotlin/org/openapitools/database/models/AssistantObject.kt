/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Represents an `assistant` that can call the model and use tools.
 * @param id The identifier, which can be referenced in API endpoints.
 * @param object The object type, which is always `assistant`.
 * @param createdAt The Unix timestamp (in seconds) for when the assistant was created.
 * @param name The name of the assistant. The maximum length is 256 characters. 
 * @param description The description of the assistant. The maximum length is 512 characters. 
 * @param model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
 * @param instructions The system instructions that the assistant uses. The maximum length is 256,000 characters. 
 * @param tools A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`. 
 * @param fileIds A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. 
 * @param metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
 */
object AssistantObjects : BaseTable<AssistantObject>("AssistantObject") {
    val id = text("id") /* The identifier, which can be referenced in API endpoints. */
    val object = text("object").transform({ AssistantObject.Object.valueOf(it) }, { it.value }) /* The object type, which is always `assistant`. */
    val createdAt = int("created_at") /* The Unix timestamp (in seconds) for when the assistant was created. */
    val name = text("name") /* The name of the assistant. The maximum length is 256 characters.  */
    val description = text("description") /* The description of the assistant. The maximum length is 512 characters.  */
    val model = text("model") /* ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.  */
    val instructions = text("instructions") /* The system instructions that the assistant uses. The maximum length is 256,000 characters.  */
    val metadata = blob("metadata") /* Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.  */

    /**
     * Create an entity of type AssistantObject from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = AssistantObject(
        id = row[id] ?: "" /* kotlin.String */ /* The identifier, which can be referenced in API endpoints. */,
        object = row[object] ?: AssistantObject.Object.valueOf("") /* kotlin.String */ /* The object type, which is always `assistant`. */,
        createdAt = row[createdAt] ?: 0 /* kotlin.Int */ /* The Unix timestamp (in seconds) for when the assistant was created. */,
        name = row[name] ?: "" /* kotlin.String */ /* The name of the assistant. The maximum length is 256 characters.  */,
        description = row[description] ?: "" /* kotlin.String */ /* The description of the assistant. The maximum length is 512 characters.  */,
        model = row[model] ?: "" /* kotlin.String */ /* ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.  */,
        instructions = row[instructions] ?: "" /* kotlin.String */ /* The system instructions that the assistant uses. The maximum length is 256,000 characters.  */,
        tools = emptyList() /* kotlin.Array<AssistantObjectToolsInner> */ /* A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.  */,
        fileIds = emptyList() /* kotlin.Array<kotlin.String> */ /* A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.  */,
        metadata = row[metadata] /* kotlin.Any */ /* Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.  */
    )

    /**
    * Assign all the columns from the entity of type AssistantObject to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = AssistantObject()
    * database.update(AssistantObjects, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: AssistantObject) {
        this.apply {
            set(AssistantObjects.id, entity.id)
            set(AssistantObjects.object, entity.object)
            set(AssistantObjects.createdAt, entity.createdAt)
            set(AssistantObjects.name, entity.name)
            set(AssistantObjects.description, entity.description)
            set(AssistantObjects.model, entity.model)
            set(AssistantObjects.instructions, entity.instructions)
            set(AssistantObjects.metadata, entity.metadata)
        }
    }

}


object AssistantObjectAssistantObjectToolsInner : BaseTable<Pair<kotlin.Long, kotlin.Long>>("AssistantObjectAssistantObjectToolsInner") {
    val assistantObject = long("assistantObject")
    val assistantObjectToolsInner = long("assistantObjectToolsInner")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[assistantObject] ?: 0, row[assistantObjectToolsInner] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(AssistantObjectAssistantObjectToolsInner.assistantObject, entity.first)
            set(AssistantObjectAssistantObjectToolsInner.assistantObjectToolsInner, entity.second)
        }
    }

}

object AssistantObjectFileIds : BaseTable<Pair<kotlin.Long, kotlin.String>>("AssistantObjectFileIds") {
    val assistantObject = long("assistantObject")
    val fileIds = text("fileIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[assistantObject] ?: 0, row[fileIds] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AssistantObjectFileIds.assistantObject, entity.first)
            set(AssistantObjectFileIds.fileIds, entity.second)
        }
    }

}

