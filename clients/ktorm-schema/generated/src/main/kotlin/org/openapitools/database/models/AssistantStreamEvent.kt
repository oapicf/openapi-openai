/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Represents an event emitted when streaming a Run.  Each event in a server-sent events stream has an `event` and `data` property:  ``` event: thread.created data: {\"id\": \"thread_123\", \"object\": \"thread\", ...} ```  We emit events whenever a new object is created, transitions to a new state, or is being streamed in parts (deltas). For example, we emit `thread.run.created` when a new run is created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses to create a message during a run, we emit a `thread.message.created event`, a `thread.message.in_progress` event, many `thread.message.delta` events, and finally a `thread.message.completed` event.  We may add additional events over time, so we recommend handling unknown events gracefully in your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to integrate the Assistants API with streaming. 
 * @param event 
 * @param data 
 */
object AssistantStreamEvents : BaseTable<AssistantStreamEvent>("AssistantStreamEvent") {
    val event = text("event").transform({ AssistantStreamEvent.Event.valueOf(it) }, { it.value })
    val data = text("data").transform({ AssistantStreamEvent.Data.valueOf(it) }, { it.value })

    /**
     * Create an entity of type AssistantStreamEvent from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = AssistantStreamEvent(
        event = row[event] ?: AssistantStreamEvent.Event.valueOf("") /* kotlin.String */,
        data = row[data] ?: AssistantStreamEvent.Data.valueOf("") /* kotlin.String */
    )

    /**
    * Assign all the columns from the entity of type AssistantStreamEvent to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = AssistantStreamEvent()
    * database.update(AssistantStreamEvents, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: AssistantStreamEvent) {
        this.apply {
            set(AssistantStreamEvents.event, entity.event)
            set(AssistantStreamEvents.data, entity.data)
        }
    }

}


