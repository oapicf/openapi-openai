/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Controls which (if any) tool is called by the model. `none` means the model will not call any tools and instead generates a message. `auto` is the default value and means the model can pick between generating a message or calling a tool. Specifying a particular tool like `{\"type\": \"TOOL_TYPE\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool. 
 * @param type The type of the tool. If type is `function`, the function name must be set
 * @param function 
 */
object AssistantsApiToolChoiceOptions : BaseTable<AssistantsApiToolChoiceOption>("AssistantsApiToolChoiceOption") {
    val type = text("type").transform({ AssistantsApiToolChoiceOption.Type.valueOf(it) }, { it.value }) /* The type of the tool. If type is `function`, the function name must be set */
    val function = long("function") /* null */

    /**
     * Create an entity of type AssistantsApiToolChoiceOption from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = AssistantsApiToolChoiceOption(
        type = row[type] ?: AssistantsApiToolChoiceOption.Type.valueOf("") /* kotlin.String */ /* The type of the tool. If type is `function`, the function name must be set */,
        function = ChatCompletionNamedToolChoiceFunctions.createEntity(row, withReferences) /* ChatCompletionNamedToolChoiceFunction? */
    )

    /**
    * Assign all the columns from the entity of type AssistantsApiToolChoiceOption to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = AssistantsApiToolChoiceOption()
    * database.update(AssistantsApiToolChoiceOptions, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: AssistantsApiToolChoiceOption) {
        this.apply {
            set(AssistantsApiToolChoiceOptions.type, entity.type)
            set(AssistantsApiToolChoiceOptions.function, entity.function)
        }
    }

}


