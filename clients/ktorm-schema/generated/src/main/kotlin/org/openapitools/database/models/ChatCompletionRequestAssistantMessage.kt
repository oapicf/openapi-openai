/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param role The role of the messages author, in this case `assistant`.
 * @param content The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified. 
 * @param name An optional name for the participant. Provides the model information to differentiate between participants of the same role.
 * @param toolCalls The tool calls generated by the model, such as function calls.
 * @param functionCall 
 */
object ChatCompletionRequestAssistantMessages : BaseTable<ChatCompletionRequestAssistantMessage>("ChatCompletionRequestAssistantMessage") {
    val role = text("role").transform({ ChatCompletionRequestAssistantMessage.Role.valueOf(it) }, { it.value }) /* The role of the messages author, in this case `assistant`. */
    val content = text("content") /* null */ /* The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.  */
    val name = text("name") /* null */ /* An optional name for the participant. Provides the model information to differentiate between participants of the same role. */
    @Deprecated(message = "This property is deprecated.")
    val functionCall = long("function_call") /* null */

    /**
     * Create an entity of type ChatCompletionRequestAssistantMessage from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ChatCompletionRequestAssistantMessage(
        role = row[role] ?: ChatCompletionRequestAssistantMessage.Role.valueOf("") /* kotlin.String */ /* The role of the messages author, in this case `assistant`. */,
        content = row[content]  /* kotlin.String? */ /* The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.  */,
        name = row[name]  /* kotlin.String? */ /* An optional name for the participant. Provides the model information to differentiate between participants of the same role. */,
        toolCalls = emptyList() /* kotlin.Array<ChatCompletionMessageToolCall>? */ /* The tool calls generated by the model, such as function calls. */,
        functionCall = ChatCompletionRequestAssistantMessageFunctionCalls.createEntity(row, withReferences) /* ChatCompletionRequestAssistantMessageFunctionCall? */
    )

    /**
    * Assign all the columns from the entity of type ChatCompletionRequestAssistantMessage to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ChatCompletionRequestAssistantMessage()
    * database.update(ChatCompletionRequestAssistantMessages, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ChatCompletionRequestAssistantMessage) {
        this.apply {
            set(ChatCompletionRequestAssistantMessages.role, entity.role)
            set(ChatCompletionRequestAssistantMessages.content, entity.content)
            set(ChatCompletionRequestAssistantMessages.name, entity.name)
            set(ChatCompletionRequestAssistantMessages.functionCall, entity.functionCall)
        }
    }

}


object ChatCompletionRequestAssistantMessageChatCompletionMessageToolCall : BaseTable<Pair<kotlin.Long, kotlin.Long>>("ChatCompletionRequestAssistantMessageChatCompletionMessageToolCall") {
    val chatCompletionRequestAssistantMessage = long("chatCompletionRequestAssistantMessage")
    val chatCompletionMessageToolCall = long("chatCompletionMessageToolCall")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[chatCompletionRequestAssistantMessage] ?: 0, row[chatCompletionMessageToolCall] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(ChatCompletionRequestAssistantMessageChatCompletionMessageToolCall.chatCompletionRequestAssistantMessage, entity.first)
            set(ChatCompletionRequestAssistantMessageChatCompletionMessageToolCall.chatCompletionMessageToolCall, entity.second)
        }
    }

}

