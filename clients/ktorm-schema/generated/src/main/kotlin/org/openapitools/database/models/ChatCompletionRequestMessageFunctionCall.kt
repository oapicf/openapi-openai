/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * The name and arguments of a function that should be called, as generated by the model.
 * @param name The name of the function to call.
 * @param arguments The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
 */
object ChatCompletionRequestMessageFunctionCalls : BaseTable<ChatCompletionRequestMessageFunctionCall>("ChatCompletionRequestMessage_function_call") {
    val name = text("name") /* null */ /* The name of the function to call. */
    val arguments = text("arguments") /* null */ /* The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */

    /**
     * Create an entity of type ChatCompletionRequestMessageFunctionCall from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ChatCompletionRequestMessageFunctionCall(
        name = row[name]  /* kotlin.String? */ /* The name of the function to call. */,
        arguments = row[arguments]  /* kotlin.String? */ /* The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
    )

    /**
    * Assign all the columns from the entity of type ChatCompletionRequestMessageFunctionCall to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ChatCompletionRequestMessageFunctionCall()
    * database.update(ChatCompletionRequestMessageFunctionCalls, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ChatCompletionRequestMessageFunctionCall) {
        this.apply {
            set(ChatCompletionRequestMessageFunctionCalls.name, entity.name)
            set(ChatCompletionRequestMessageFunctionCalls.arguments, entity.arguments)
        }
    }

}


