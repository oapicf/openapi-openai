/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param role The role of the author of this message.
 * @param content The contents of the message.
 * @param functionCall 
 */
object ChatCompletionResponseMessages : BaseTable<ChatCompletionResponseMessage>("ChatCompletionResponseMessage") {
    val role = text("role").transform({ ChatCompletionResponseMessage.Role.valueOf(it) }, { it.value }) /* The role of the author of this message. */
    val content = text("content") /* null */ /* The contents of the message. */
    val functionCall = long("function_call") /* null */

    /**
     * Create an entity of type ChatCompletionResponseMessage from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ChatCompletionResponseMessage(
        role = row[role] ?: ChatCompletionResponseMessage.Role.valueOf("") /* kotlin.String */ /* The role of the author of this message. */,
        content = row[content]  /* kotlin.String? */ /* The contents of the message. */,
        functionCall = ChatCompletionRequestMessageFunctionCalls.createEntity(row, withReferences) /* ChatCompletionRequestMessageFunctionCall? */
    )

    /**
    * Assign all the columns from the entity of type ChatCompletionResponseMessage to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ChatCompletionResponseMessage()
    * database.update(ChatCompletionResponseMessages, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ChatCompletionResponseMessage) {
        this.apply {
            set(ChatCompletionResponseMessages.role, entity.role)
            set(ChatCompletionResponseMessages.content, entity.content)
            set(ChatCompletionResponseMessages.functionCall, entity.functionCall)
        }
    }

}


