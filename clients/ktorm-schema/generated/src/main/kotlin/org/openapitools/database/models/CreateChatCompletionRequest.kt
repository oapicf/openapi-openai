/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param messages A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
 * @param model 
 * @param frequencyPenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
 * @param logitBias Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. 
 * @param logprobs Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.
 * @param topLogprobs An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
 * @param maxTokens The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.  The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. 
 * @param n How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
 * @param presencePenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
 * @param responseFormat 
 * @param seed This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend. 
 * @param stop 
 * @param stream If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). 
 * @param temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
 * @param topP An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
 * @param tools A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported. 
 * @param toolChoice 
 * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
 * @param functionCall 
 * @param functions Deprecated in favor of `tools`.  A list of functions the model may generate JSON inputs for. 
 */
object CreateChatCompletionRequests : BaseTable<CreateChatCompletionRequest>("CreateChatCompletionRequest") {
    val model = long("model")
    val frequencyPenalty = decimal("frequency_penalty") /* null */ /* Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)  */
    val logitBias = blob("logit_bias") /* null */ /* Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  */
    val logprobs = boolean("logprobs") /* null */ /* Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`. */
    val topLogprobs = int("top_logprobs") /* null */ /* An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used. */
    val maxTokens = int("max_tokens") /* null */ /* The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.  The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.  */
    val n = int("n") /* null */ /* How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs. */
    val presencePenalty = decimal("presence_penalty") /* null */ /* Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)  */
    val responseFormat = long("response_format") /* null */
    val seed = int("seed") /* null */ /* This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.  */
    val stop = long("stop") /* null */
    val stream = boolean("stream") /* null */ /* If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).  */
    val temperature = decimal("temperature") /* null */ /* What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.  */
    val topP = decimal("top_p") /* null */ /* An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.  */
    val toolChoice = long("tool_choice") /* null */
    val user = text("user") /* null */ /* A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */
    @Deprecated(message = "This property is deprecated.")
    val functionCall = long("function_call") /* null */

    /**
     * Create an entity of type CreateChatCompletionRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CreateChatCompletionRequest(
        messages = emptyList() /* kotlin.Array<ChatCompletionRequestMessage> */ /* A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models). */,
        model = CreateChatCompletionRequestModels.createEntity(row, withReferences) /* CreateChatCompletionRequestModel */,
        frequencyPenalty = row[frequencyPenalty] ?: 0 /* java.math.BigDecimal? */ /* Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)  */,
        logitBias = row[logitBias]  /* kotlin.collections.Map<kotlin.String, kotlin.Int>? */ /* Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  */,
        logprobs = row[logprobs] ?: false /* kotlin.Boolean? */ /* Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`. */,
        topLogprobs = row[topLogprobs]  /* kotlin.Int? */ /* An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used. */,
        maxTokens = row[maxTokens]  /* kotlin.Int? */ /* The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.  The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.  */,
        n = row[n] ?: 1 /* kotlin.Int? */ /* How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs. */,
        presencePenalty = row[presencePenalty] ?: 0 /* java.math.BigDecimal? */ /* Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)  */,
        responseFormat = CreateChatCompletionRequestResponseFormats.createEntity(row, withReferences) /* CreateChatCompletionRequestResponseFormat? */,
        seed = row[seed]  /* kotlin.Int? */ /* This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.  */,
        stop = CreateChatCompletionRequestStops.createEntity(row, withReferences) /* CreateChatCompletionRequestStop? */,
        stream = row[stream] ?: false /* kotlin.Boolean? */ /* If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).  */,
        temperature = row[temperature] ?: 1 /* java.math.BigDecimal? */ /* What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.  */,
        topP = row[topP] ?: 1 /* java.math.BigDecimal? */ /* An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.  */,
        tools = emptyList() /* kotlin.Array<ChatCompletionTool>? */ /* A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.  */,
        toolChoice = ChatCompletionToolChoiceOptions.createEntity(row, withReferences) /* ChatCompletionToolChoiceOption? */,
        user = row[user]  /* kotlin.String? */ /* A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */,
        functionCall = CreateChatCompletionRequestFunctionCalls.createEntity(row, withReferences) /* CreateChatCompletionRequestFunctionCall? */,
        functions = emptyList() /* kotlin.Array<ChatCompletionFunctions>? */ /* Deprecated in favor of `tools`.  A list of functions the model may generate JSON inputs for.  */
    )

    /**
    * Assign all the columns from the entity of type CreateChatCompletionRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CreateChatCompletionRequest()
    * database.update(CreateChatCompletionRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CreateChatCompletionRequest) {
        this.apply {
            set(CreateChatCompletionRequests.model, entity.model)
            set(CreateChatCompletionRequests.frequencyPenalty, entity.frequencyPenalty)
            set(CreateChatCompletionRequests.logitBias, entity.logitBias)
            set(CreateChatCompletionRequests.logprobs, entity.logprobs)
            set(CreateChatCompletionRequests.topLogprobs, entity.topLogprobs)
            set(CreateChatCompletionRequests.maxTokens, entity.maxTokens)
            set(CreateChatCompletionRequests.n, entity.n)
            set(CreateChatCompletionRequests.presencePenalty, entity.presencePenalty)
            set(CreateChatCompletionRequests.responseFormat, entity.responseFormat)
            set(CreateChatCompletionRequests.seed, entity.seed)
            set(CreateChatCompletionRequests.stop, entity.stop)
            set(CreateChatCompletionRequests.stream, entity.stream)
            set(CreateChatCompletionRequests.temperature, entity.temperature)
            set(CreateChatCompletionRequests.topP, entity.topP)
            set(CreateChatCompletionRequests.toolChoice, entity.toolChoice)
            set(CreateChatCompletionRequests.user, entity.user)
            set(CreateChatCompletionRequests.functionCall, entity.functionCall)
        }
    }

}


object CreateChatCompletionRequestChatCompletionRequestMessage : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CreateChatCompletionRequestChatCompletionRequestMessage") {
    val createChatCompletionRequest = long("createChatCompletionRequest")
    val chatCompletionRequestMessage = long("chatCompletionRequestMessage")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[createChatCompletionRequest] ?: 0, row[chatCompletionRequestMessage] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CreateChatCompletionRequestChatCompletionRequestMessage.createChatCompletionRequest, entity.first)
            set(CreateChatCompletionRequestChatCompletionRequestMessage.chatCompletionRequestMessage, entity.second)
        }
    }

}

object CreateChatCompletionRequestChatCompletionTool : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CreateChatCompletionRequestChatCompletionTool") {
    val createChatCompletionRequest = long("createChatCompletionRequest")
    val chatCompletionTool = long("chatCompletionTool")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[createChatCompletionRequest] ?: 0, row[chatCompletionTool] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CreateChatCompletionRequestChatCompletionTool.createChatCompletionRequest, entity.first)
            set(CreateChatCompletionRequestChatCompletionTool.chatCompletionTool, entity.second)
        }
    }

}

object CreateChatCompletionRequestChatCompletionFunctions : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CreateChatCompletionRequestChatCompletionFunctions") {
    val createChatCompletionRequest = long("createChatCompletionRequest")
    val chatCompletionFunctions = long("chatCompletionFunctions")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[createChatCompletionRequest] ?: 0, row[chatCompletionFunctions] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CreateChatCompletionRequestChatCompletionFunctions.createChatCompletionRequest, entity.first)
            set(CreateChatCompletionRequestChatCompletionFunctions.chatCompletionFunctions, entity.second)
        }
    }

}

