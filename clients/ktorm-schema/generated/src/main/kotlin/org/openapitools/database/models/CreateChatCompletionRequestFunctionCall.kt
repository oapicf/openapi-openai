/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Controls how the model responds to function calls. \"none\" means the model does not call a function, and responds to the end-user. \"auto\" means the model can pick between an end-user or calling a function.  Specifying a particular function via `{\"name\":\\ \"my_function\"}` forces the model to call that function. \"none\" is the default when no functions are present. \"auto\" is the default if functions are present.
 * @param name The name of the function to call.
 */
object CreateChatCompletionRequestFunctionCalls : BaseTable<CreateChatCompletionRequestFunctionCall>("CreateChatCompletionRequest_function_call") {
    val name = text("name") /* The name of the function to call. */

    /**
     * Create an entity of type CreateChatCompletionRequestFunctionCall from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CreateChatCompletionRequestFunctionCall(
        name = row[name] ?: "" /* kotlin.String */ /* The name of the function to call. */
    )

    /**
    * Assign all the columns from the entity of type CreateChatCompletionRequestFunctionCall to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CreateChatCompletionRequestFunctionCall()
    * database.update(CreateChatCompletionRequestFunctionCalls, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CreateChatCompletionRequestFunctionCall) {
        this.apply {
            set(CreateChatCompletionRequestFunctionCalls.name, entity.name)
        }
    }

}


