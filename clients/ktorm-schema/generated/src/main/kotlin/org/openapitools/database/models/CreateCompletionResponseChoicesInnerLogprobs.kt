/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param tokens 
 * @param tokenLogprobs 
 * @param topLogprobs 
 * @param textOffset 
 */
object CreateCompletionResponseChoicesInnerLogprobss : BaseTable<CreateCompletionResponseChoicesInnerLogprobs>("CreateCompletionResponse_choices_inner_logprobs") {

    /**
     * Create an entity of type CreateCompletionResponseChoicesInnerLogprobs from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CreateCompletionResponseChoicesInnerLogprobs(
        tokens = emptyList() /* kotlin.Array<kotlin.String>? */,
        tokenLogprobs = emptyList() /* kotlin.Array<java.math.BigDecimal>? */,
        topLogprobs = emptyList() /* kotlin.Array<kotlin.Any>? */,
        textOffset = emptyList() /* kotlin.Array<kotlin.Int>? */
    )

    /**
    * Assign all the columns from the entity of type CreateCompletionResponseChoicesInnerLogprobs to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CreateCompletionResponseChoicesInnerLogprobs()
    * database.update(CreateCompletionResponseChoicesInnerLogprobss, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CreateCompletionResponseChoicesInnerLogprobs) {
        this.apply {
        }
    }

}


object CreateCompletionResponseChoicesInnerLogprobsTokens : BaseTable<Pair<kotlin.Long, kotlin.String>>("CreateCompletionResponseChoicesInnerLogprobsTokens") {
    val createCompletionResponseChoicesInnerLogprobs = long("createCompletionResponseChoicesInnerLogprobs")
    val tokens = text("tokens")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[createCompletionResponseChoicesInnerLogprobs] ?: 0, row[tokens] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(CreateCompletionResponseChoicesInnerLogprobsTokens.createCompletionResponseChoicesInnerLogprobs, entity.first)
            set(CreateCompletionResponseChoicesInnerLogprobsTokens.tokens, entity.second)
        }
    }

}

object CreateCompletionResponseChoicesInnerLogprobsTokenLogprobs : BaseTable<Pair<kotlin.Long, java.math.BigDecimal>>("CreateCompletionResponseChoicesInnerLogprobsTokenLogprobs") {
    val createCompletionResponseChoicesInnerLogprobs = long("createCompletionResponseChoicesInnerLogprobs")
    val tokenLogprobs = decimal("tokenLogprobs")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, java.math.BigDecimal> =
        Pair(row[createCompletionResponseChoicesInnerLogprobs] ?: 0, row[tokenLogprobs] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, java.math.BigDecimal>) {
        this.apply {
            set(CreateCompletionResponseChoicesInnerLogprobsTokenLogprobs.createCompletionResponseChoicesInnerLogprobs, entity.first)
            set(CreateCompletionResponseChoicesInnerLogprobsTokenLogprobs.tokenLogprobs, entity.second)
        }
    }

}

object CreateCompletionResponseChoicesInnerLogprobsTopLogprobs : BaseTable<Pair<kotlin.Long, kotlin.Any>>("CreateCompletionResponseChoicesInnerLogprobsTopLogprobs") {
    val createCompletionResponseChoicesInnerLogprobs = long("createCompletionResponseChoicesInnerLogprobs")
    val topLogprobs = blob("topLogprobs")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Any> =
        Pair(row[createCompletionResponseChoicesInnerLogprobs] ?: 0, row[topLogprobs] ?: )

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Any>) {
        this.apply {
            set(CreateCompletionResponseChoicesInnerLogprobsTopLogprobs.createCompletionResponseChoicesInnerLogprobs, entity.first)
            set(CreateCompletionResponseChoicesInnerLogprobsTopLogprobs.topLogprobs, entity.second)
        }
    }

}

object CreateCompletionResponseChoicesInnerLogprobsTextOffset : BaseTable<Pair<kotlin.Long, kotlin.Int>>("CreateCompletionResponseChoicesInnerLogprobsTextOffset") {
    val createCompletionResponseChoicesInnerLogprobs = long("createCompletionResponseChoicesInnerLogprobs")
    val textOffset = int("textOffset")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Int> =
        Pair(row[createCompletionResponseChoicesInnerLogprobs] ?: 0, row[textOffset] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Int>) {
        this.apply {
            set(CreateCompletionResponseChoicesInnerLogprobsTextOffset.createCompletionResponseChoicesInnerLogprobs, entity.first)
            set(CreateCompletionResponseChoicesInnerLogprobsTextOffset.textOffset, entity.second)
        }
    }

}

