/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param model 
 * @param input 
 * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
 */
object CreateEmbeddingRequests : BaseTable<CreateEmbeddingRequest>("CreateEmbeddingRequest") {
    val model = long("model")
    val input = long("input")
    val user = text("user") /* null */ /* A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */

    /**
     * Create an entity of type CreateEmbeddingRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CreateEmbeddingRequest(
        model = CreateEmbeddingRequestModels.createEntity(row, withReferences) /* CreateEmbeddingRequestModel */,
        input = CreateEmbeddingRequestInputs.createEntity(row, withReferences) /* CreateEmbeddingRequestInput */,
        user = row[user]  /* kotlin.String? */ /* A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */
    )

    /**
    * Assign all the columns from the entity of type CreateEmbeddingRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CreateEmbeddingRequest()
    * database.update(CreateEmbeddingRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CreateEmbeddingRequest) {
        this.apply {
            set(CreateEmbeddingRequests.model, entity.model)
            set(CreateEmbeddingRequests.input, entity.input)
            set(CreateEmbeddingRequests.user, entity.user)
        }
    }

}


