/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param object 
 * @param model 
 * @param data 
 * @param usage 
 */
object CreateEmbeddingResponses : BaseTable<CreateEmbeddingResponse>("CreateEmbeddingResponse") {
    val object = text("object")
    val model = text("model")
    val usage = long("usage")

    /**
     * Create an entity of type CreateEmbeddingResponse from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CreateEmbeddingResponse(
        object = row[object] ?: "" /* kotlin.String */,
        model = row[model] ?: "" /* kotlin.String */,
        data = emptyList() /* kotlin.Array<CreateEmbeddingResponseDataInner> */,
        usage = CreateEmbeddingResponseUsages.createEntity(row, withReferences) /* CreateEmbeddingResponseUsage */
    )

    /**
    * Assign all the columns from the entity of type CreateEmbeddingResponse to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CreateEmbeddingResponse()
    * database.update(CreateEmbeddingResponses, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CreateEmbeddingResponse) {
        this.apply {
            set(CreateEmbeddingResponses.object, entity.object)
            set(CreateEmbeddingResponses.model, entity.model)
            set(CreateEmbeddingResponses.usage, entity.usage)
        }
    }

}


object CreateEmbeddingResponseCreateEmbeddingResponseDataInner : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CreateEmbeddingResponseCreateEmbeddingResponseDataInner") {
    val createEmbeddingResponse = long("createEmbeddingResponse")
    val createEmbeddingResponseDataInner = long("createEmbeddingResponseDataInner")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[createEmbeddingResponse] ?: 0, row[createEmbeddingResponseDataInner] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CreateEmbeddingResponseCreateEmbeddingResponseDataInner.createEmbeddingResponse, entity.first)
            set(CreateEmbeddingResponseCreateEmbeddingResponseDataInner.createEmbeddingResponseDataInner, entity.second)
        }
    }

}

