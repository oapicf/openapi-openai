/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param model 
 * @param trainingFile The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
 * @param hyperparameters 
 * @param suffix A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`. 
 * @param validationFile The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
 * @param integrations A list of integrations to enable for your fine-tuning job.
 * @param seed The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases. If a seed is not specified, one will be generated for you. 
 */
object CreateFineTuningJobRequests : BaseTable<CreateFineTuningJobRequest>("CreateFineTuningJobRequest") {
    val model = long("model")
    val trainingFile = text("training_file") /* The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.  */
    val hyperparameters = long("hyperparameters") /* null */
    val suffix = text("suffix") /* null */ /* A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`.  */
    val validationFile = text("validation_file") /* null */ /* The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.  */
    val seed = int("seed") /* null */ /* The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases. If a seed is not specified, one will be generated for you.  */

    /**
     * Create an entity of type CreateFineTuningJobRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CreateFineTuningJobRequest(
        model = CreateFineTuningJobRequestModels.createEntity(row, withReferences) /* CreateFineTuningJobRequestModel */,
        trainingFile = row[trainingFile] ?: "" /* kotlin.String */ /* The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.  */,
        hyperparameters = CreateFineTuningJobRequestHyperparameterss.createEntity(row, withReferences) /* CreateFineTuningJobRequestHyperparameters? */,
        suffix = row[suffix]  /* kotlin.String? */ /* A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`.  */,
        validationFile = row[validationFile]  /* kotlin.String? */ /* The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.  */,
        integrations = emptyList() /* kotlin.Array<CreateFineTuningJobRequestIntegrationsInner>? */ /* A list of integrations to enable for your fine-tuning job. */,
        seed = row[seed]  /* kotlin.Int? */ /* The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases. If a seed is not specified, one will be generated for you.  */
    )

    /**
    * Assign all the columns from the entity of type CreateFineTuningJobRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CreateFineTuningJobRequest()
    * database.update(CreateFineTuningJobRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CreateFineTuningJobRequest) {
        this.apply {
            set(CreateFineTuningJobRequests.model, entity.model)
            set(CreateFineTuningJobRequests.trainingFile, entity.trainingFile)
            set(CreateFineTuningJobRequests.hyperparameters, entity.hyperparameters)
            set(CreateFineTuningJobRequests.suffix, entity.suffix)
            set(CreateFineTuningJobRequests.validationFile, entity.validationFile)
            set(CreateFineTuningJobRequests.seed, entity.seed)
        }
    }

}


object CreateFineTuningJobRequestCreateFineTuningJobRequestIntegrationsInner : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CreateFineTuningJobRequestCreateFineTuningJobRequestIntegrationsInner") {
    val createFineTuningJobRequest = long("createFineTuningJobRequest")
    val createFineTuningJobRequestIntegrationsInner = long("createFineTuningJobRequestIntegrationsInner")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[createFineTuningJobRequest] ?: 0, row[createFineTuningJobRequestIntegrationsInner] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CreateFineTuningJobRequestCreateFineTuningJobRequestIntegrationsInner.createFineTuningJobRequest, entity.first)
            set(CreateFineTuningJobRequestCreateFineTuningJobRequestIntegrationsInner.createFineTuningJobRequestIntegrationsInner, entity.second)
        }
    }

}

