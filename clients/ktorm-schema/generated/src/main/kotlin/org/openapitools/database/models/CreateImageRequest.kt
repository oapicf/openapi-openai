/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param prompt A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
 * @param model 
 * @param n The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
 * @param quality The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
 * @param responseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
 * @param propertySize The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
 * @param style The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
 * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
 */
object CreateImageRequests : BaseTable<CreateImageRequest>("CreateImageRequest") {
    val prompt = text("prompt") /* A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`. */
    val model = long("model") /* null */
    val n = int("n") /* null */ /* The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported. */
    val quality = text("quality").transform({ CreateImageRequest.Quality.valueOf(it ?: "standard") }, { it.value }) /* null */ /* The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`. */

    val responseFormat = text("response_format").transform({ CreateImageRequest.ResponseFormat.valueOf(it ?: "url") }, { it.value }) /* null */ /* The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. */

    val propertySize = text("size").transform({ CreateImageRequest.PropertySize.valueOf(it ?: "256x256") }, { it.value }) /* null */ /* The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models. */

    val style = text("style").transform({ CreateImageRequest.Style.valueOf(it ?: "vivid") }, { it.value }) /* null */ /* The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`. */

    val user = text("user") /* null */ /* A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */

    /**
     * Create an entity of type CreateImageRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CreateImageRequest(
        prompt = row[prompt] ?: "" /* kotlin.String */ /* A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`. */,
        model = CreateImageRequestModels.createEntity(row, withReferences) /* CreateImageRequestModel? */,
        n = row[n] ?: 1 /* kotlin.Int? */ /* The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported. */,
        quality = row[quality] ?: Quality.standard /* kotlin.String? */ /* The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`. */,
        responseFormat = row[responseFormat] ?: ResponseFormat.url /* kotlin.String? */ /* The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. */,
        propertySize = row[propertySize] ?: PropertySize._1024x1024 /* kotlin.String? */ /* The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models. */,
        style = row[style] ?: Style.vivid /* kotlin.String? */ /* The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`. */,
        user = row[user]  /* kotlin.String? */ /* A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */
    )

    /**
    * Assign all the columns from the entity of type CreateImageRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CreateImageRequest()
    * database.update(CreateImageRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CreateImageRequest) {
        this.apply {
            set(CreateImageRequests.prompt, entity.prompt)
            set(CreateImageRequests.model, entity.model)
            set(CreateImageRequests.n, entity.n)
            set(CreateImageRequests.quality, entity.quality)
            set(CreateImageRequests.responseFormat, entity.responseFormat)
            set(CreateImageRequests.propertySize, entity.propertySize)
            set(CreateImageRequests.style, entity.style)
            set(CreateImageRequests.user, entity.user)
        }
    }

}


