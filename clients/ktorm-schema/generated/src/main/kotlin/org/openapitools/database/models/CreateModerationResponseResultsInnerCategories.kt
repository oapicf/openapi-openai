/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param hate 
 * @param hateThreatening 
 * @param selfHarm 
 * @param sexual 
 * @param sexualMinors 
 * @param violence 
 * @param violenceGraphic 
 */
object CreateModerationResponseResultsInnerCategoriess : BaseTable<CreateModerationResponseResultsInnerCategories>("CreateModerationResponse_results_inner_categories") {
    val hate = boolean("hate")
    val hateThreatening = boolean("hatethreatening")
    val selfHarm = boolean("selfharm")
    val sexual = boolean("sexual")
    val sexualMinors = boolean("sexualminors")
    val violence = boolean("violence")
    val violenceGraphic = boolean("violencegraphic")

    /**
     * Create an entity of type CreateModerationResponseResultsInnerCategories from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CreateModerationResponseResultsInnerCategories(
        hate = row[hate] ?: false /* kotlin.Boolean */,
        hateThreatening = row[hateThreatening] ?: false /* kotlin.Boolean */,
        selfHarm = row[selfHarm] ?: false /* kotlin.Boolean */,
        sexual = row[sexual] ?: false /* kotlin.Boolean */,
        sexualMinors = row[sexualMinors] ?: false /* kotlin.Boolean */,
        violence = row[violence] ?: false /* kotlin.Boolean */,
        violenceGraphic = row[violenceGraphic] ?: false /* kotlin.Boolean */
    )

    /**
    * Assign all the columns from the entity of type CreateModerationResponseResultsInnerCategories to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CreateModerationResponseResultsInnerCategories()
    * database.update(CreateModerationResponseResultsInnerCategoriess, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CreateModerationResponseResultsInnerCategories) {
        this.apply {
            set(CreateModerationResponseResultsInnerCategoriess.hate, entity.hate)
            set(CreateModerationResponseResultsInnerCategoriess.hateThreatening, entity.hateThreatening)
            set(CreateModerationResponseResultsInnerCategoriess.selfHarm, entity.selfHarm)
            set(CreateModerationResponseResultsInnerCategoriess.sexual, entity.sexual)
            set(CreateModerationResponseResultsInnerCategoriess.sexualMinors, entity.sexualMinors)
            set(CreateModerationResponseResultsInnerCategoriess.violence, entity.violence)
            set(CreateModerationResponseResultsInnerCategoriess.violenceGraphic, entity.violenceGraphic)
        }
    }

}


