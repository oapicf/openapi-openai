/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param model 
 * @param input The text to generate audio for. The maximum length is 4096 characters.
 * @param voice The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
 * @param responseFormat The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
 * @param speed The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
 */
object CreateSpeechRequests : BaseTable<CreateSpeechRequest>("CreateSpeechRequest") {
    val model = long("model")
    val input = text("input") /* The text to generate audio for. The maximum length is 4096 characters. */
    val voice = text("voice").transform({ CreateSpeechRequest.Voice.valueOf(it) }, { it.value }) /* The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options). */
    val responseFormat = text("response_format").transform({ CreateSpeechRequest.ResponseFormat.valueOf(it ?: "mp3") }, { it.value }) /* null */ /* The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`. */

    val speed = decimal("speed") /* null */ /* The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default. */

    /**
     * Create an entity of type CreateSpeechRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CreateSpeechRequest(
        model = CreateSpeechRequestModels.createEntity(row, withReferences) /* CreateSpeechRequestModel */,
        input = row[input] ?: "" /* kotlin.String */ /* The text to generate audio for. The maximum length is 4096 characters. */,
        voice = row[voice] ?: CreateSpeechRequest.Voice.valueOf("") /* kotlin.String */ /* The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options). */,
        responseFormat = row[responseFormat] ?: ResponseFormat.mp3 /* kotlin.String? */ /* The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`. */,
        speed = row[speed] ?: 1.0 /* java.math.BigDecimal? */ /* The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default. */
    )

    /**
    * Assign all the columns from the entity of type CreateSpeechRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CreateSpeechRequest()
    * database.update(CreateSpeechRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CreateSpeechRequest) {
        this.apply {
            set(CreateSpeechRequests.model, entity.model)
            set(CreateSpeechRequests.input, entity.input)
            set(CreateSpeechRequests.voice, entity.voice)
            set(CreateSpeechRequests.responseFormat, entity.responseFormat)
            set(CreateSpeechRequests.speed, entity.speed)
        }
    }

}


