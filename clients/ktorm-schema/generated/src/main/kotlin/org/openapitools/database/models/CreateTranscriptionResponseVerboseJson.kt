/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Represents a verbose json transcription response returned by model, based on the provided input.
 * @param language The language of the input audio.
 * @param duration The duration of the input audio.
 * @param text The transcribed text.
 * @param words Extracted words and their corresponding timestamps.
 * @param segments Segments of the transcribed text and their corresponding details.
 */
object CreateTranscriptionResponseVerboseJsons : BaseTable<CreateTranscriptionResponseVerboseJson>("CreateTranscriptionResponseVerboseJson") {
    val language = text("language") /* The language of the input audio. */
    val duration = text("duration") /* The duration of the input audio. */
    val text = text("text") /* The transcribed text. */

    /**
     * Create an entity of type CreateTranscriptionResponseVerboseJson from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CreateTranscriptionResponseVerboseJson(
        language = row[language] ?: "" /* kotlin.String */ /* The language of the input audio. */,
        duration = row[duration] ?: "" /* kotlin.String */ /* The duration of the input audio. */,
        text = row[text] ?: "" /* kotlin.String */ /* The transcribed text. */,
        words = emptyList() /* kotlin.Array<TranscriptionWord>? */ /* Extracted words and their corresponding timestamps. */,
        segments = emptyList() /* kotlin.Array<TranscriptionSegment>? */ /* Segments of the transcribed text and their corresponding details. */
    )

    /**
    * Assign all the columns from the entity of type CreateTranscriptionResponseVerboseJson to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CreateTranscriptionResponseVerboseJson()
    * database.update(CreateTranscriptionResponseVerboseJsons, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CreateTranscriptionResponseVerboseJson) {
        this.apply {
            set(CreateTranscriptionResponseVerboseJsons.language, entity.language)
            set(CreateTranscriptionResponseVerboseJsons.duration, entity.duration)
            set(CreateTranscriptionResponseVerboseJsons.text, entity.text)
        }
    }

}


object CreateTranscriptionResponseVerboseJsonTranscriptionWord : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CreateTranscriptionResponseVerboseJsonTranscriptionWord") {
    val createTranscriptionResponseVerboseJson = long("createTranscriptionResponseVerboseJson")
    val transcriptionWord = long("transcriptionWord")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[createTranscriptionResponseVerboseJson] ?: 0, row[transcriptionWord] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CreateTranscriptionResponseVerboseJsonTranscriptionWord.createTranscriptionResponseVerboseJson, entity.first)
            set(CreateTranscriptionResponseVerboseJsonTranscriptionWord.transcriptionWord, entity.second)
        }
    }

}

object CreateTranscriptionResponseVerboseJsonTranscriptionSegment : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CreateTranscriptionResponseVerboseJsonTranscriptionSegment") {
    val createTranscriptionResponseVerboseJson = long("createTranscriptionResponseVerboseJson")
    val transcriptionSegment = long("transcriptionSegment")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[createTranscriptionResponseVerboseJson] ?: 0, row[transcriptionSegment] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CreateTranscriptionResponseVerboseJsonTranscriptionSegment.createTranscriptionResponseVerboseJson, entity.first)
            set(CreateTranscriptionResponseVerboseJsonTranscriptionSegment.transcriptionSegment, entity.second)
        }
    }

}

