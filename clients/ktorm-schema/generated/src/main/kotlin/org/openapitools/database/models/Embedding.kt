/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Represents an embedding vector returned by embedding endpoint. 
 * @param index The index of the embedding in the list of embeddings.
 * @param embedding The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings). 
 * @param object The object type, which is always \"embedding\".
 */
object Embeddings : BaseTable<Embedding>("Embedding") {
    val index = int("index") /* The index of the embedding in the list of embeddings. */
    val object = text("object").transform({ Embedding.Object.valueOf(it) }, { it.value }) /* The object type, which is always \"embedding\". */

    /**
     * Create an entity of type Embedding from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = Embedding(
        index = row[index] ?: 0 /* kotlin.Int */ /* The index of the embedding in the list of embeddings. */,
        embedding = emptyList() /* kotlin.Array<java.math.BigDecimal> */ /* The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).  */,
        object = row[object] ?: Embedding.Object.valueOf("") /* kotlin.String */ /* The object type, which is always \"embedding\". */
    )

    /**
    * Assign all the columns from the entity of type Embedding to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = Embedding()
    * database.update(Embeddings, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: Embedding) {
        this.apply {
            set(Embeddings.index, entity.index)
            set(Embeddings.object, entity.object)
        }
    }

}


object EmbeddingEmbedding : BaseTable<Pair<kotlin.Long, java.math.BigDecimal>>("EmbeddingEmbedding") {
    val embedding = long("embedding")
    val embedding = decimal("embedding")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, java.math.BigDecimal> =
        Pair(row[embedding] ?: 0, row[embedding] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, java.math.BigDecimal>) {
        this.apply {
            set(EmbeddingEmbedding.embedding, entity.first)
            set(EmbeddingEmbedding.embedding, entity.second)
        }
    }

}

