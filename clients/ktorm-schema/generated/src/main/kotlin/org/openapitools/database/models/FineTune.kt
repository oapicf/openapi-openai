/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param id 
 * @param object 
 * @param createdAt 
 * @param updatedAt 
 * @param model 
 * @param fineTunedModel 
 * @param organizationId 
 * @param status 
 * @param hyperparams 
 * @param trainingFiles 
 * @param validationFiles 
 * @param resultFiles 
 * @param events 
 */
object FineTunes : BaseTable<FineTune>("FineTune") {
    val id = text("id")
    val object = text("object")
    val createdAt = int("created_at")
    val updatedAt = int("updated_at")
    val model = text("model")
    val fineTunedModel = text("fine_tuned_model")
    val organizationId = text("organization_id")
    val status = text("status")
    val hyperparams = blob("hyperparams")

    /**
     * Create an entity of type FineTune from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = FineTune(
        id = row[id] ?: "" /* kotlin.String */,
        object = row[object] ?: "" /* kotlin.String */,
        createdAt = row[createdAt] ?: 0 /* kotlin.Int */,
        updatedAt = row[updatedAt] ?: 0 /* kotlin.Int */,
        model = row[model] ?: "" /* kotlin.String */,
        fineTunedModel = row[fineTunedModel] ?: "" /* kotlin.String */,
        organizationId = row[organizationId] ?: "" /* kotlin.String */,
        status = row[status] ?: "" /* kotlin.String */,
        hyperparams = row[hyperparams] /* kotlin.Any */,
        trainingFiles = emptyList() /* kotlin.Array<OpenAIFile> */,
        validationFiles = emptyList() /* kotlin.Array<OpenAIFile> */,
        resultFiles = emptyList() /* kotlin.Array<OpenAIFile> */,
        events = emptyList() /* kotlin.Array<FineTuneEvent>? */
    )

    /**
    * Assign all the columns from the entity of type FineTune to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = FineTune()
    * database.update(FineTunes, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: FineTune) {
        this.apply {
            set(FineTunes.id, entity.id)
            set(FineTunes.object, entity.object)
            set(FineTunes.createdAt, entity.createdAt)
            set(FineTunes.updatedAt, entity.updatedAt)
            set(FineTunes.model, entity.model)
            set(FineTunes.fineTunedModel, entity.fineTunedModel)
            set(FineTunes.organizationId, entity.organizationId)
            set(FineTunes.status, entity.status)
            set(FineTunes.hyperparams, entity.hyperparams)
        }
    }

}


object FineTuneOpenAIFile : BaseTable<Pair<kotlin.Long, kotlin.Long>>("FineTuneOpenAIFile") {
    val fineTune = long("fineTune")
    val openAIFile = long("openAIFile")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[fineTune] ?: 0, row[openAIFile] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(FineTuneOpenAIFile.fineTune, entity.first)
            set(FineTuneOpenAIFile.openAIFile, entity.second)
        }
    }

}

object FineTuneOpenAIFile : BaseTable<Pair<kotlin.Long, kotlin.Long>>("FineTuneOpenAIFile") {
    val fineTune = long("fineTune")
    val openAIFile = long("openAIFile")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[fineTune] ?: 0, row[openAIFile] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(FineTuneOpenAIFile.fineTune, entity.first)
            set(FineTuneOpenAIFile.openAIFile, entity.second)
        }
    }

}

object FineTuneOpenAIFile : BaseTable<Pair<kotlin.Long, kotlin.Long>>("FineTuneOpenAIFile") {
    val fineTune = long("fineTune")
    val openAIFile = long("openAIFile")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[fineTune] ?: 0, row[openAIFile] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(FineTuneOpenAIFile.fineTune, entity.first)
            set(FineTuneOpenAIFile.openAIFile, entity.second)
        }
    }

}

object FineTuneFineTuneEvent : BaseTable<Pair<kotlin.Long, kotlin.Long>>("FineTuneFineTuneEvent") {
    val fineTune = long("fineTune")
    val fineTuneEvent = long("fineTuneEvent")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[fineTune] ?: 0, row[fineTuneEvent] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(FineTuneFineTuneEvent.fineTune, entity.first)
            set(FineTuneFineTuneEvent.fineTuneEvent, entity.second)
        }
    }

}

