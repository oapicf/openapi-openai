/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param name The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
 * @param description A description of what the function does, used by the model to choose when and how to call the function.
 * @param parameters The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.   Omitting `parameters` defines a function with an empty parameter list.
 */
object FunctionObjects : BaseTable<FunctionObject>("FunctionObject") {
    val name = text("name") /* The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64. */
    val description = text("description") /* null */ /* A description of what the function does, used by the model to choose when and how to call the function. */
    val parameters = blob("parameters") /* null */ /* The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.   Omitting `parameters` defines a function with an empty parameter list. */

    /**
     * Create an entity of type FunctionObject from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = FunctionObject(
        name = row[name] ?: "" /* kotlin.String */ /* The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64. */,
        description = row[description]  /* kotlin.String? */ /* A description of what the function does, used by the model to choose when and how to call the function. */,
        parameters = row[parameters]  /* kotlin.collections.Map<kotlin.String, kotlin.Any>? */ /* The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.   Omitting `parameters` defines a function with an empty parameter list. */
    )

    /**
    * Assign all the columns from the entity of type FunctionObject to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = FunctionObject()
    * database.update(FunctionObjects, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: FunctionObject) {
        this.apply {
            set(FunctionObjects.name, entity.name)
            set(FunctionObjects.description, entity.description)
            set(FunctionObjects.parameters, entity.parameters)
        }
    }

}


