/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Represents the url or the content of an image generated by the OpenAI API.
 * @param b64Json The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
 * @param url The URL of the generated image, if `response_format` is `url` (default).
 * @param revisedPrompt The prompt that was used to generate the image, if there was any revision to the prompt.
 */
object Images : BaseTable<Image>("Image") {
    val b64Json = text("b64_json") /* null */ /* The base64-encoded JSON of the generated image, if `response_format` is `b64_json`. */
    val url = text("url") /* null */ /* The URL of the generated image, if `response_format` is `url` (default). */
    val revisedPrompt = text("revised_prompt") /* null */ /* The prompt that was used to generate the image, if there was any revision to the prompt. */

    /**
     * Create an entity of type Image from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = Image(
        b64Json = row[b64Json]  /* kotlin.String? */ /* The base64-encoded JSON of the generated image, if `response_format` is `b64_json`. */,
        url = row[url]  /* kotlin.String? */ /* The URL of the generated image, if `response_format` is `url` (default). */,
        revisedPrompt = row[revisedPrompt]  /* kotlin.String? */ /* The prompt that was used to generate the image, if there was any revision to the prompt. */
    )

    /**
    * Assign all the columns from the entity of type Image to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = Image()
    * database.update(Images, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: Image) {
        this.apply {
            set(Images.b64Json, entity.b64Json)
            set(Images.url, entity.url)
            set(Images.revisedPrompt, entity.revisedPrompt)
        }
    }

}


