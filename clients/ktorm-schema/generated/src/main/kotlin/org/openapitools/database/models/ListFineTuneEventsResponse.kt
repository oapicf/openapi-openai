/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param object 
 * @param data 
 */
object ListFineTuneEventsResponses : BaseTable<ListFineTuneEventsResponse>("ListFineTuneEventsResponse") {
    val object = text("object")

    /**
     * Create an entity of type ListFineTuneEventsResponse from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ListFineTuneEventsResponse(
        object = row[object] ?: "" /* kotlin.String */,
        data = emptyList() /* kotlin.Array<FineTuneEvent> */
    )

    /**
    * Assign all the columns from the entity of type ListFineTuneEventsResponse to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ListFineTuneEventsResponse()
    * database.update(ListFineTuneEventsResponses, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ListFineTuneEventsResponse) {
        this.apply {
            set(ListFineTuneEventsResponses.object, entity.object)
        }
    }

}


object ListFineTuneEventsResponseFineTuneEvent : BaseTable<Pair<kotlin.Long, kotlin.Long>>("ListFineTuneEventsResponseFineTuneEvent") {
    val listFineTuneEventsResponse = long("listFineTuneEventsResponse")
    val fineTuneEvent = long("fineTuneEvent")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[listFineTuneEventsResponse] ?: 0, row[fineTuneEvent] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(ListFineTuneEventsResponseFineTuneEvent.listFineTuneEventsResponse, entity.first)
            set(ListFineTuneEventsResponseFineTuneEvent.fineTuneEvent, entity.second)
        }
    }

}

