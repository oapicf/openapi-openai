/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Represents a message within a [thread](/docs/api-reference/threads).
 * @param id The identifier, which can be referenced in API endpoints.
 * @param object The object type, which is always `thread.message`.
 * @param createdAt The Unix timestamp (in seconds) for when the message was created.
 * @param threadId The [thread](/docs/api-reference/threads) ID that this message belongs to.
 * @param status The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
 * @param incompleteDetails 
 * @param completedAt The Unix timestamp (in seconds) for when the message was completed.
 * @param incompleteAt The Unix timestamp (in seconds) for when the message was marked as incomplete.
 * @param role The entity that produced the message. One of `user` or `assistant`.
 * @param content The content of the message in array of text and/or images.
 * @param assistantId If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
 * @param runId The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
 * @param fileIds A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
 * @param metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
 */
object MessageObjects : BaseTable<MessageObject>("MessageObject") {
    val id = text("id") /* The identifier, which can be referenced in API endpoints. */
    val object = text("object").transform({ MessageObject.Object.valueOf(it) }, { it.value }) /* The object type, which is always `thread.message`. */
    val createdAt = int("created_at") /* The Unix timestamp (in seconds) for when the message was created. */
    val threadId = text("thread_id") /* The [thread](/docs/api-reference/threads) ID that this message belongs to. */
    val status = text("status").transform({ MessageObject.Status.valueOf(it) }, { it.value }) /* The status of the message, which can be either `in_progress`, `incomplete`, or `completed`. */
    val incompleteDetails = long("incomplete_details")
    val completedAt = int("completed_at") /* The Unix timestamp (in seconds) for when the message was completed. */
    val incompleteAt = int("incomplete_at") /* The Unix timestamp (in seconds) for when the message was marked as incomplete. */
    val role = text("role").transform({ MessageObject.Role.valueOf(it) }, { it.value }) /* The entity that produced the message. One of `user` or `assistant`. */
    val assistantId = text("assistant_id") /* If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message. */
    val runId = text("run_id") /* The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints. */
    val metadata = blob("metadata") /* Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.  */

    /**
     * Create an entity of type MessageObject from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = MessageObject(
        id = row[id] ?: "" /* kotlin.String */ /* The identifier, which can be referenced in API endpoints. */,
        object = row[object] ?: MessageObject.Object.valueOf("") /* kotlin.String */ /* The object type, which is always `thread.message`. */,
        createdAt = row[createdAt] ?: 0 /* kotlin.Int */ /* The Unix timestamp (in seconds) for when the message was created. */,
        threadId = row[threadId] ?: "" /* kotlin.String */ /* The [thread](/docs/api-reference/threads) ID that this message belongs to. */,
        status = row[status] ?: MessageObject.Status.valueOf("") /* kotlin.String */ /* The status of the message, which can be either `in_progress`, `incomplete`, or `completed`. */,
        incompleteDetails = MessageObjectIncompleteDetailss.createEntity(row, withReferences) /* MessageObjectIncompleteDetails */,
        completedAt = row[completedAt] ?: 0 /* kotlin.Int */ /* The Unix timestamp (in seconds) for when the message was completed. */,
        incompleteAt = row[incompleteAt] ?: 0 /* kotlin.Int */ /* The Unix timestamp (in seconds) for when the message was marked as incomplete. */,
        role = row[role] ?: MessageObject.Role.valueOf("") /* kotlin.String */ /* The entity that produced the message. One of `user` or `assistant`. */,
        content = emptyList() /* kotlin.Array<MessageObjectContentInner> */ /* The content of the message in array of text and/or images. */,
        assistantId = row[assistantId] ?: "" /* kotlin.String */ /* If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message. */,
        runId = row[runId] ?: "" /* kotlin.String */ /* The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints. */,
        fileIds = emptyList() /* kotlin.Array<kotlin.String> */ /* A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message. */,
        metadata = row[metadata] /* kotlin.Any */ /* Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.  */
    )

    /**
    * Assign all the columns from the entity of type MessageObject to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = MessageObject()
    * database.update(MessageObjects, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: MessageObject) {
        this.apply {
            set(MessageObjects.id, entity.id)
            set(MessageObjects.object, entity.object)
            set(MessageObjects.createdAt, entity.createdAt)
            set(MessageObjects.threadId, entity.threadId)
            set(MessageObjects.status, entity.status)
            set(MessageObjects.incompleteDetails, entity.incompleteDetails)
            set(MessageObjects.completedAt, entity.completedAt)
            set(MessageObjects.incompleteAt, entity.incompleteAt)
            set(MessageObjects.role, entity.role)
            set(MessageObjects.assistantId, entity.assistantId)
            set(MessageObjects.runId, entity.runId)
            set(MessageObjects.metadata, entity.metadata)
        }
    }

}


object MessageObjectMessageObjectContentInner : BaseTable<Pair<kotlin.Long, kotlin.Long>>("MessageObjectMessageObjectContentInner") {
    val messageObject = long("messageObject")
    val messageObjectContentInner = long("messageObjectContentInner")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[messageObject] ?: 0, row[messageObjectContentInner] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(MessageObjectMessageObjectContentInner.messageObject, entity.first)
            set(MessageObjectMessageObjectContentInner.messageObjectContentInner, entity.second)
        }
    }

}

object MessageObjectFileIds : BaseTable<Pair<kotlin.Long, kotlin.String>>("MessageObjectFileIds") {
    val messageObject = long("messageObject")
    val fileIds = text("fileIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[messageObject] ?: 0, row[fileIds] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(MessageObjectFileIds.messageObject, entity.first)
            set(MessageObjectFileIds.fileIds, entity.second)
        }
    }

}

