/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * On an incomplete message, details about why the message is incomplete.
 * @param reason The reason the message is incomplete.
 */
object MessageObjectIncompleteDetailss : BaseTable<MessageObjectIncompleteDetails>("MessageObject_incomplete_details") {
    val reason = text("reason").transform({ MessageObjectIncompleteDetails.Reason.valueOf(it) }, { it.value }) /* The reason the message is incomplete. */

    /**
     * Create an entity of type MessageObjectIncompleteDetails from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = MessageObjectIncompleteDetails(
        reason = row[reason] ?: MessageObjectIncompleteDetails.Reason.valueOf("") /* kotlin.String */ /* The reason the message is incomplete. */
    )

    /**
    * Assign all the columns from the entity of type MessageObjectIncompleteDetails to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = MessageObjectIncompleteDetails()
    * database.update(MessageObjectIncompleteDetailss, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: MessageObjectIncompleteDetails) {
        this.apply {
            set(MessageObjectIncompleteDetailss.reason, entity.reason)
        }
    }

}


