/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Represents an execution run on a [thread](/docs/api-reference/threads).
 * @param id The identifier, which can be referenced in API endpoints.
 * @param object The object type, which is always `thread.run`.
 * @param createdAt The Unix timestamp (in seconds) for when the run was created.
 * @param threadId The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
 * @param assistantId The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
 * @param status The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
 * @param requiredAction 
 * @param lastError 
 * @param expiresAt The Unix timestamp (in seconds) for when the run will expire.
 * @param startedAt The Unix timestamp (in seconds) for when the run was started.
 * @param cancelledAt The Unix timestamp (in seconds) for when the run was cancelled.
 * @param failedAt The Unix timestamp (in seconds) for when the run failed.
 * @param completedAt The Unix timestamp (in seconds) for when the run was completed.
 * @param incompleteDetails 
 * @param model The model that the [assistant](/docs/api-reference/assistants) used for this run.
 * @param instructions The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
 * @param tools The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
 * @param fileIds The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
 * @param metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
 * @param usage 
 * @param maxPromptTokens The maximum number of prompt tokens specified to have been used over the course of the run. 
 * @param maxCompletionTokens The maximum number of completion tokens specified to have been used over the course of the run. 
 * @param truncationStrategy 
 * @param toolChoice 
 * @param responseFormat 
 * @param temperature The sampling temperature used for this run. If not set, defaults to 1.
 */
object RunObjects : BaseTable<RunObject>("RunObject") {
    val id = text("id") /* The identifier, which can be referenced in API endpoints. */
    val object = text("object").transform({ RunObject.Object.valueOf(it) }, { it.value }) /* The object type, which is always `thread.run`. */
    val createdAt = int("created_at") /* The Unix timestamp (in seconds) for when the run was created. */
    val threadId = text("thread_id") /* The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run. */
    val assistantId = text("assistant_id") /* The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run. */
    val status = text("status").transform({ RunObject.Status.valueOf(it) }, { it.value }) /* The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`. */
    val requiredAction = long("required_action")
    val lastError = long("last_error")
    val expiresAt = int("expires_at") /* The Unix timestamp (in seconds) for when the run will expire. */
    val startedAt = int("started_at") /* The Unix timestamp (in seconds) for when the run was started. */
    val cancelledAt = int("cancelled_at") /* The Unix timestamp (in seconds) for when the run was cancelled. */
    val failedAt = int("failed_at") /* The Unix timestamp (in seconds) for when the run failed. */
    val completedAt = int("completed_at") /* The Unix timestamp (in seconds) for when the run was completed. */
    val incompleteDetails = long("incomplete_details")
    val model = text("model") /* The model that the [assistant](/docs/api-reference/assistants) used for this run. */
    val instructions = text("instructions") /* The instructions that the [assistant](/docs/api-reference/assistants) used for this run. */
    val metadata = blob("metadata") /* Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.  */
    val usage = long("usage")
    val maxPromptTokens = int("max_prompt_tokens") /* The maximum number of prompt tokens specified to have been used over the course of the run.  */
    val maxCompletionTokens = int("max_completion_tokens") /* The maximum number of completion tokens specified to have been used over the course of the run.  */
    val truncationStrategy = long("truncation_strategy")
    val toolChoice = long("tool_choice")
    val responseFormat = long("response_format")
    val temperature = decimal("temperature") /* null */ /* The sampling temperature used for this run. If not set, defaults to 1. */

    /**
     * Create an entity of type RunObject from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = RunObject(
        id = row[id] ?: "" /* kotlin.String */ /* The identifier, which can be referenced in API endpoints. */,
        object = row[object] ?: RunObject.Object.valueOf("") /* kotlin.String */ /* The object type, which is always `thread.run`. */,
        createdAt = row[createdAt] ?: 0 /* kotlin.Int */ /* The Unix timestamp (in seconds) for when the run was created. */,
        threadId = row[threadId] ?: "" /* kotlin.String */ /* The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run. */,
        assistantId = row[assistantId] ?: "" /* kotlin.String */ /* The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run. */,
        status = row[status] ?: RunObject.Status.valueOf("") /* kotlin.String */ /* The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`. */,
        requiredAction = RunObjectRequiredActions.createEntity(row, withReferences) /* RunObjectRequiredAction */,
        lastError = RunObjectLastErrors.createEntity(row, withReferences) /* RunObjectLastError */,
        expiresAt = row[expiresAt] ?: 0 /* kotlin.Int */ /* The Unix timestamp (in seconds) for when the run will expire. */,
        startedAt = row[startedAt] ?: 0 /* kotlin.Int */ /* The Unix timestamp (in seconds) for when the run was started. */,
        cancelledAt = row[cancelledAt] ?: 0 /* kotlin.Int */ /* The Unix timestamp (in seconds) for when the run was cancelled. */,
        failedAt = row[failedAt] ?: 0 /* kotlin.Int */ /* The Unix timestamp (in seconds) for when the run failed. */,
        completedAt = row[completedAt] ?: 0 /* kotlin.Int */ /* The Unix timestamp (in seconds) for when the run was completed. */,
        incompleteDetails = RunObjectIncompleteDetailss.createEntity(row, withReferences) /* RunObjectIncompleteDetails */,
        model = row[model] ?: "" /* kotlin.String */ /* The model that the [assistant](/docs/api-reference/assistants) used for this run. */,
        instructions = row[instructions] ?: "" /* kotlin.String */ /* The instructions that the [assistant](/docs/api-reference/assistants) used for this run. */,
        tools = emptyList() /* kotlin.Array<AssistantObjectToolsInner> */ /* The list of tools that the [assistant](/docs/api-reference/assistants) used for this run. */,
        fileIds = emptyList() /* kotlin.Array<kotlin.String> */ /* The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run. */,
        metadata = row[metadata] /* kotlin.Any */ /* Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.  */,
        usage = RunCompletionUsages.createEntity(row, withReferences) /* RunCompletionUsage */,
        maxPromptTokens = row[maxPromptTokens] ?: 0 /* kotlin.Int */ /* The maximum number of prompt tokens specified to have been used over the course of the run.  */,
        maxCompletionTokens = row[maxCompletionTokens] ?: 0 /* kotlin.Int */ /* The maximum number of completion tokens specified to have been used over the course of the run.  */,
        truncationStrategy = TruncationObjects.createEntity(row, withReferences) /* TruncationObject */,
        toolChoice = AssistantsApiToolChoiceOptions.createEntity(row, withReferences) /* AssistantsApiToolChoiceOption */,
        responseFormat = AssistantsApiResponseFormatOptions.createEntity(row, withReferences) /* AssistantsApiResponseFormatOption */,
        temperature = row[temperature]  /* java.math.BigDecimal? */ /* The sampling temperature used for this run. If not set, defaults to 1. */
    )

    /**
    * Assign all the columns from the entity of type RunObject to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = RunObject()
    * database.update(RunObjects, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: RunObject) {
        this.apply {
            set(RunObjects.id, entity.id)
            set(RunObjects.object, entity.object)
            set(RunObjects.createdAt, entity.createdAt)
            set(RunObjects.threadId, entity.threadId)
            set(RunObjects.assistantId, entity.assistantId)
            set(RunObjects.status, entity.status)
            set(RunObjects.requiredAction, entity.requiredAction)
            set(RunObjects.lastError, entity.lastError)
            set(RunObjects.expiresAt, entity.expiresAt)
            set(RunObjects.startedAt, entity.startedAt)
            set(RunObjects.cancelledAt, entity.cancelledAt)
            set(RunObjects.failedAt, entity.failedAt)
            set(RunObjects.completedAt, entity.completedAt)
            set(RunObjects.incompleteDetails, entity.incompleteDetails)
            set(RunObjects.model, entity.model)
            set(RunObjects.instructions, entity.instructions)
            set(RunObjects.metadata, entity.metadata)
            set(RunObjects.usage, entity.usage)
            set(RunObjects.maxPromptTokens, entity.maxPromptTokens)
            set(RunObjects.maxCompletionTokens, entity.maxCompletionTokens)
            set(RunObjects.truncationStrategy, entity.truncationStrategy)
            set(RunObjects.toolChoice, entity.toolChoice)
            set(RunObjects.responseFormat, entity.responseFormat)
            set(RunObjects.temperature, entity.temperature)
        }
    }

}


object RunObjectAssistantObjectToolsInner : BaseTable<Pair<kotlin.Long, kotlin.Long>>("RunObjectAssistantObjectToolsInner") {
    val runObject = long("runObject")
    val assistantObjectToolsInner = long("assistantObjectToolsInner")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[runObject] ?: 0, row[assistantObjectToolsInner] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(RunObjectAssistantObjectToolsInner.runObject, entity.first)
            set(RunObjectAssistantObjectToolsInner.assistantObjectToolsInner, entity.second)
        }
    }

}

object RunObjectFileIds : BaseTable<Pair<kotlin.Long, kotlin.String>>("RunObjectFileIds") {
    val runObject = long("runObject")
    val fileIds = text("fileIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[runObject] ?: 0, row[fileIds] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(RunObjectFileIds.runObject, entity.first)
            set(RunObjectFileIds.fileIds, entity.second)
        }
    }

}

