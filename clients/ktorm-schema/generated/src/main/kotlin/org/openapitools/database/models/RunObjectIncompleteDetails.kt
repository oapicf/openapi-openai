/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Details on why the run is incomplete. Will be `null` if the run is not incomplete.
 * @param reason The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
 */
object RunObjectIncompleteDetailss : BaseTable<RunObjectIncompleteDetails>("RunObject_incomplete_details") {
    val reason = text("reason").transform({ RunObjectIncompleteDetails.Reason.valueOf(it ?: "max_completion_tokens") }, { it.value }) /* null */ /* The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run. */


    /**
     * Create an entity of type RunObjectIncompleteDetails from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = RunObjectIncompleteDetails(
        reason = row[reason]  /* kotlin.String? */ /* The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run. */
    )

    /**
    * Assign all the columns from the entity of type RunObjectIncompleteDetails to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = RunObjectIncompleteDetails()
    * database.update(RunObjectIncompleteDetailss, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: RunObjectIncompleteDetails) {
        this.apply {
            set(RunObjectIncompleteDetailss.reason, entity.reason)
        }
    }

}


