/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * The Code Interpreter tool call definition.
 * @param input The input to the Code Interpreter tool call.
 * @param outputs The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
 */
object RunStepDetailsToolCallsCodeObjectCodeInterpreters : BaseTable<RunStepDetailsToolCallsCodeObjectCodeInterpreter>("RunStepDetailsToolCallsCodeObject_code_interpreter") {
    val input = text("input") /* The input to the Code Interpreter tool call. */

    /**
     * Create an entity of type RunStepDetailsToolCallsCodeObjectCodeInterpreter from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = RunStepDetailsToolCallsCodeObjectCodeInterpreter(
        input = row[input] ?: "" /* kotlin.String */ /* The input to the Code Interpreter tool call. */,
        outputs = emptyList() /* kotlin.Array<RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner> */ /* The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type. */
    )

    /**
    * Assign all the columns from the entity of type RunStepDetailsToolCallsCodeObjectCodeInterpreter to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = RunStepDetailsToolCallsCodeObjectCodeInterpreter()
    * database.update(RunStepDetailsToolCallsCodeObjectCodeInterpreters, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: RunStepDetailsToolCallsCodeObjectCodeInterpreter) {
        this.apply {
            set(RunStepDetailsToolCallsCodeObjectCodeInterpreters.input, entity.input)
        }
    }

}


object RunStepDetailsToolCallsCodeObjectCodeInterpreterRunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner : BaseTable<Pair<kotlin.Long, kotlin.Long>>("RunStepDetailsToolCallsCodeObjectCodeInterpreterRunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner") {
    val runStepDetailsToolCallsCodeObjectCodeInterpreter = long("runStepDetailsToolCallsCodeObjectCodeInterpreter")
    val runStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner = long("runStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[runStepDetailsToolCallsCodeObjectCodeInterpreter] ?: 0, row[runStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(RunStepDetailsToolCallsCodeObjectCodeInterpreterRunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner.runStepDetailsToolCallsCodeObjectCodeInterpreter, entity.first)
            set(RunStepDetailsToolCallsCodeObjectCodeInterpreterRunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner.runStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner, entity.second)
        }
    }

}

