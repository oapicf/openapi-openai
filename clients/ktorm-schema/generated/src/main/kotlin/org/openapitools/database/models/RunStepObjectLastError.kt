/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * The last error associated with this run step. Will be `null` if there are no errors.
 * @param code One of `server_error` or `rate_limit_exceeded`.
 * @param message A human-readable description of the error.
 */
object RunStepObjectLastErrors : BaseTable<RunStepObjectLastError>("RunStepObject_last_error") {
    val code = text("code").transform({ RunStepObjectLastError.Code.valueOf(it) }, { it.value }) /* One of `server_error` or `rate_limit_exceeded`. */
    val message = text("message") /* A human-readable description of the error. */

    /**
     * Create an entity of type RunStepObjectLastError from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = RunStepObjectLastError(
        code = row[code] ?: RunStepObjectLastError.Code.valueOf("") /* kotlin.String */ /* One of `server_error` or `rate_limit_exceeded`. */,
        message = row[message] ?: "" /* kotlin.String */ /* A human-readable description of the error. */
    )

    /**
    * Assign all the columns from the entity of type RunStepObjectLastError to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = RunStepObjectLastError()
    * database.update(RunStepObjectLastErrors, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: RunStepObjectLastError) {
        this.apply {
            set(RunStepObjectLastErrors.code, entity.code)
            set(RunStepObjectLastErrors.message, entity.message)
        }
    }

}


