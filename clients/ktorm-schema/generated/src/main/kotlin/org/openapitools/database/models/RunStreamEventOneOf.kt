/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Occurs when a new [run](/docs/api-reference/runs/object) is created.
 * @param event 
 * @param data 
 */
object RunStreamEventOneOfs : BaseTable<RunStreamEventOneOf>("RunStreamEvent_oneOf") {
    val event = text("event").transform({ RunStreamEventOneOf.Event.valueOf(it) }, { it.value })
    val data = long("data")

    /**
     * Create an entity of type RunStreamEventOneOf from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = RunStreamEventOneOf(
        event = row[event] ?: RunStreamEventOneOf.Event.valueOf("") /* kotlin.String */,
        data = RunObjects.createEntity(row, withReferences) /* RunObject */
    )

    /**
    * Assign all the columns from the entity of type RunStreamEventOneOf to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = RunStreamEventOneOf()
    * database.update(RunStreamEventOneOfs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: RunStreamEventOneOf) {
        this.apply {
            set(RunStreamEventOneOfs.event, entity.event)
            set(RunStreamEventOneOfs.data, entity.data)
        }
    }

}


