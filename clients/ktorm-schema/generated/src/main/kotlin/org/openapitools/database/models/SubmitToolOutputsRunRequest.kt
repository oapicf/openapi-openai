/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param toolOutputs A list of tools for which the outputs are being submitted.
 * @param stream If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message. 
 */
object SubmitToolOutputsRunRequests : BaseTable<SubmitToolOutputsRunRequest>("SubmitToolOutputsRunRequest") {
    val stream = boolean("stream") /* null */ /* If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.  */

    /**
     * Create an entity of type SubmitToolOutputsRunRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = SubmitToolOutputsRunRequest(
        toolOutputs = emptyList() /* kotlin.Array<SubmitToolOutputsRunRequestToolOutputsInner> */ /* A list of tools for which the outputs are being submitted. */,
        stream = row[stream]  /* kotlin.Boolean? */ /* If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.  */
    )

    /**
    * Assign all the columns from the entity of type SubmitToolOutputsRunRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = SubmitToolOutputsRunRequest()
    * database.update(SubmitToolOutputsRunRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: SubmitToolOutputsRunRequest) {
        this.apply {
            set(SubmitToolOutputsRunRequests.stream, entity.stream)
        }
    }

}


object SubmitToolOutputsRunRequestSubmitToolOutputsRunRequestToolOutputsInner : BaseTable<Pair<kotlin.Long, kotlin.Long>>("SubmitToolOutputsRunRequestSubmitToolOutputsRunRequestToolOutputsInner") {
    val submitToolOutputsRunRequest = long("submitToolOutputsRunRequest")
    val submitToolOutputsRunRequestToolOutputsInner = long("submitToolOutputsRunRequestToolOutputsInner")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[submitToolOutputsRunRequest] ?: 0, row[submitToolOutputsRunRequestToolOutputsInner] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(SubmitToolOutputsRunRequestSubmitToolOutputsRunRequestToolOutputsInner.submitToolOutputsRunRequest, entity.first)
            set(SubmitToolOutputsRunRequestSubmitToolOutputsRunRequestToolOutputsInner.submitToolOutputsRunRequestToolOutputsInner, entity.second)
        }
    }

}

