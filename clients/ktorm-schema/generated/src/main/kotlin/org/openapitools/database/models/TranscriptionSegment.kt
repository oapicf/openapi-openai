/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param id Unique identifier of the segment.
 * @param seek Seek offset of the segment.
 * @param start Start time of the segment in seconds.
 * @param end End time of the segment in seconds.
 * @param text Text content of the segment.
 * @param tokens Array of token IDs for the text content.
 * @param temperature Temperature parameter used for generating the segment.
 * @param avgLogprob Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
 * @param compressionRatio Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
 * @param noSpeechProb Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
 */
object TranscriptionSegments : BaseTable<TranscriptionSegment>("TranscriptionSegment") {
    val id = int("id") /* Unique identifier of the segment. */
    val seek = int("seek") /* Seek offset of the segment. */
    val start = float("start") /* Start time of the segment in seconds. */
    val end = float("end") /* End time of the segment in seconds. */
    val text = text("text") /* Text content of the segment. */
    val temperature = float("temperature") /* Temperature parameter used for generating the segment. */
    val avgLogprob = float("avg_logprob") /* Average logprob of the segment. If the value is lower than -1, consider the logprobs failed. */
    val compressionRatio = float("compression_ratio") /* Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed. */
    val noSpeechProb = float("no_speech_prob") /* Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent. */

    /**
     * Create an entity of type TranscriptionSegment from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = TranscriptionSegment(
        id = row[id] ?: 0 /* kotlin.Int */ /* Unique identifier of the segment. */,
        seek = row[seek] ?: 0 /* kotlin.Int */ /* Seek offset of the segment. */,
        start = row[start] ?: 0 /* kotlin.Float */ /* Start time of the segment in seconds. */,
        end = row[end] ?: 0 /* kotlin.Float */ /* End time of the segment in seconds. */,
        text = row[text] ?: "" /* kotlin.String */ /* Text content of the segment. */,
        tokens = emptyList() /* kotlin.Array<kotlin.Int> */ /* Array of token IDs for the text content. */,
        temperature = row[temperature] ?: 0 /* kotlin.Float */ /* Temperature parameter used for generating the segment. */,
        avgLogprob = row[avgLogprob] ?: 0 /* kotlin.Float */ /* Average logprob of the segment. If the value is lower than -1, consider the logprobs failed. */,
        compressionRatio = row[compressionRatio] ?: 0 /* kotlin.Float */ /* Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed. */,
        noSpeechProb = row[noSpeechProb] ?: 0 /* kotlin.Float */ /* Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent. */
    )

    /**
    * Assign all the columns from the entity of type TranscriptionSegment to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = TranscriptionSegment()
    * database.update(TranscriptionSegments, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: TranscriptionSegment) {
        this.apply {
            set(TranscriptionSegments.id, entity.id)
            set(TranscriptionSegments.seek, entity.seek)
            set(TranscriptionSegments.start, entity.start)
            set(TranscriptionSegments.end, entity.end)
            set(TranscriptionSegments.text, entity.text)
            set(TranscriptionSegments.temperature, entity.temperature)
            set(TranscriptionSegments.avgLogprob, entity.avgLogprob)
            set(TranscriptionSegments.compressionRatio, entity.compressionRatio)
            set(TranscriptionSegments.noSpeechProb, entity.noSpeechProb)
        }
    }

}


object TranscriptionSegmentTokens : BaseTable<Pair<kotlin.Long, kotlin.Int>>("TranscriptionSegmentTokens") {
    val transcriptionSegment = long("transcriptionSegment")
    val tokens = int("tokens")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Int> =
        Pair(row[transcriptionSegment] ?: 0, row[tokens] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Int>) {
        this.apply {
            set(TranscriptionSegmentTokens.transcriptionSegment, entity.first)
            set(TranscriptionSegmentTokens.tokens, entity.second)
        }
    }

}

