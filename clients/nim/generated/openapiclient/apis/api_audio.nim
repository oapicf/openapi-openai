#
# OpenAI API
# 
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# The version of the OpenAPI document: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_create_speech_request
import ../models/model_create_transcription_request_model
import ../models/model_create_transcription_200_response
import ../models/model_create_translation_200_response

const basepath = "https://api.openai.com/v1"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc createSpeech*(httpClient: HttpClient, createSpeechRequest: CreateSpeechRequest): (Option[string], Response) =
  ## Generates audio from the input text.
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/audio/speech", $(%createSpeechRequest))
  constructResult[string](response)


proc createTranscription*(httpClient: HttpClient, file: string, model: CreateTranscriptionRequest_model, language: string, prompt: string, responseFormat: string, temperature: float, timestampGranularities: seq[TimestampGranularities]): (Option[createTranscription_200_response], Response) =
  ## Transcribes audio into the input language.
  httpClient.headers["Content-Type"] = "multipart/form-data"
  let query_for_api_call = newMultipartData({
    "file": $file, # The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
    "model": $model, # 
    "language": $language, # The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
    "prompt": $prompt, # An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
    "response_format": $responseFormat, # The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. 
    "temperature": $temperature, # The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
    "timestamp_granularities[]": $timestampGranularities.join(","), # The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency. 
  })

  let response = httpClient.post(basepath & "/audio/transcriptions", multipart=query_for_api_call)
  constructResult[createTranscription_200_response](response)


proc createTranslation*(httpClient: HttpClient, file: string, model: CreateTranscriptionRequest_model, prompt: string, responseFormat: string, temperature: float): (Option[createTranslation_200_response], Response) =
  ## Translates audio into English.
  httpClient.headers["Content-Type"] = "multipart/form-data"
  let query_for_api_call = newMultipartData({
    "file": $file, # The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
    "model": $model, # 
    "prompt": $prompt, # An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. 
    "response_format": $responseFormat, # The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. 
    "temperature": $temperature, # The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
  })

  let response = httpClient.post(basepath & "/audio/translations", multipart=query_for_api_call)
  constructResult[createTranslation_200_response](response)

