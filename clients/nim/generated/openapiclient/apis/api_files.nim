#
# OpenAI API
# 
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# The version of the OpenAPI document: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_delete_file_response
import ../models/model_list_files_response
import ../models/model_open_ai_file

const basepath = "https://api.openai.com/v1"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc createFile*(httpClient: HttpClient, file: string, purpose: string): (Option[OpenAIFile], Response) =
  ## Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. 
  httpClient.headers["Content-Type"] = "multipart/form-data"
  let query_for_api_call = newMultipartData({
    "file": $file, # The File object (not file name) to be uploaded. 
    "purpose": $purpose, # The intended purpose of the uploaded file.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tuning) and \\\"assistants\\\" for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning. 
  })

  let response = httpClient.post(basepath & "/files", multipart=query_for_api_call)
  constructResult[OpenAIFile](response)


proc deleteFile*(httpClient: HttpClient, fileId: string): (Option[DeleteFileResponse], Response) =
  ## Delete a file.

  let response = httpClient.delete(basepath & fmt"/files/{file_id}")
  constructResult[DeleteFileResponse](response)


proc downloadFile*(httpClient: HttpClient, fileId: string): (Option[string], Response) =
  ## Returns the contents of the specified file.

  let response = httpClient.get(basepath & fmt"/files/{file_id}/content")
  constructResult[string](response)


proc listFiles*(httpClient: HttpClient, purpose: string): (Option[ListFilesResponse], Response) =
  ## Returns a list of files that belong to the user's organization.
  let query_for_api_call = encodeQuery([
    ("purpose", $purpose), # Only return files with the given purpose.
  ])

  let response = httpClient.get(basepath & "/files" & "?" & query_for_api_call)
  constructResult[ListFilesResponse](response)


proc retrieveFile*(httpClient: HttpClient, fileId: string): (Option[OpenAIFile], Response) =
  ## Returns information about a specific file.

  let response = httpClient.get(basepath & fmt"/files/{file_id}")
  constructResult[OpenAIFile](response)

