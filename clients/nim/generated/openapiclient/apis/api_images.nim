#
# OpenAI API
# 
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# The version of the OpenAPI document: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_create_image_edit_request_model
import ../models/model_create_image_request
import ../models/model_images_response

const basepath = "https://api.openai.com/v1"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc createImage*(httpClient: HttpClient, createImageRequest: CreateImageRequest): (Option[ImagesResponse], Response) =
  ## Creates an image given a prompt.
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/images/generations", $(%createImageRequest))
  constructResult[ImagesResponse](response)


proc createImageEdit*(httpClient: HttpClient, image: string, prompt: string, mask: string, model: CreateImageEditRequest_model, n: int, size: string, responseFormat: string, user: string): (Option[ImagesResponse], Response) =
  ## Creates an edited or extended image given an original image and a prompt.
  httpClient.headers["Content-Type"] = "multipart/form-data"
  let query_for_api_call = newMultipartData({
    "image": $image, # The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
    "prompt": $prompt, # A text description of the desired image(s). The maximum length is 1000 characters.
    "mask": $mask, # An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
    "model": $model, # 
    "n": $n, # The number of images to generate. Must be between 1 and 10.
    "size": $size, # The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
    "response_format": $responseFormat, # The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
    "user": $user, # A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
  })

  let response = httpClient.post(basepath & "/images/edits", multipart=query_for_api_call)
  constructResult[ImagesResponse](response)


proc createImageVariation*(httpClient: HttpClient, image: string, model: CreateImageEditRequest_model, n: int, responseFormat: string, size: string, user: string): (Option[ImagesResponse], Response) =
  ## Creates a variation of a given image.
  httpClient.headers["Content-Type"] = "multipart/form-data"
  let query_for_api_call = newMultipartData({
    "image": $image, # The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
    "model": $model, # 
    "n": $n, # The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
    "response_format": $responseFormat, # The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
    "size": $size, # The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
    "user": $user, # A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
  })

  let response = httpClient.post(basepath & "/images/variations", multipart=query_for_api_call)
  constructResult[ImagesResponse](response)

