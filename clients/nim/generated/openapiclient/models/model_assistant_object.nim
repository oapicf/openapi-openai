#
# OpenAI API
# 
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# The version of the OpenAPI document: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by: https://openapi-generator.tech
#

import json
import tables

import model_assistant_object_tools_inner
import model_object

type `Object`* {.pure.} = enum
  Assistant

type AssistantObject* = object
  ## Represents an `assistant` that can call the model and use tools.
  id*: string ## The identifier, which can be referenced in API endpoints.
  `object`*: `Object` ## The object type, which is always `assistant`.
  createdAt*: int ## The Unix timestamp (in seconds) for when the assistant was created.
  name*: string ## The name of the assistant. The maximum length is 256 characters. 
  description*: string ## The description of the assistant. The maximum length is 512 characters. 
  model*: string ## ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
  instructions*: string ## The system instructions that the assistant uses. The maximum length is 256,000 characters. 
  tools*: seq[AssistantObject_tools_inner] ## A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`. 
  fileIds*: seq[string] ## A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. 
  metadata*: object ## Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 

func `%`*(v: `Object`): JsonNode =
  let str = case v:
    of `Object`.Assistant: "assistant"

  JsonNode(kind: JString, str: str)

func `$`*(v: `Object`): string =
  result = case v:
    of `Object`.Assistant: "assistant"
