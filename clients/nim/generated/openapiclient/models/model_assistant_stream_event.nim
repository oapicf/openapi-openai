#
# OpenAI API
# 
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# The version of the OpenAPI document: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by: https://openapi-generator.tech
#

import json
import tables

import model_done_event
import model_error_event
import model_message_stream_event
import model_run_step_stream_event
import model_run_stream_event
import model_thread_stream_event

type Event* {.pure.} = enum
  Done

type Data* {.pure.} = enum
  [DONE]

type AssistantStreamEvent* = object
  ## Represents an event emitted when streaming a Run.  Each event in a server-sent events stream has an `event` and `data` property:  ``` event: thread.created data: {\"id\": \"thread_123\", \"object\": \"thread\", ...} ```  We emit events whenever a new object is created, transitions to a new state, or is being streamed in parts (deltas). For example, we emit `thread.run.created` when a new run is created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses to create a message during a run, we emit a `thread.message.created event`, a `thread.message.in_progress` event, many `thread.message.delta` events, and finally a `thread.message.completed` event.  We may add additional events over time, so we recommend handling unknown events gracefully in your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to integrate the Assistants API with streaming. 
  event*: Event
  data*: Data

func `%`*(v: Event): JsonNode =
  let str = case v:
    of Event.Done: "done"

  JsonNode(kind: JString, str: str)

func `$`*(v: Event): string =
  result = case v:
    of Event.Done: "done"

func `%`*(v: Data): JsonNode =
  let str = case v:
    of Data.[DONE]: "[DONE]"

  JsonNode(kind: JString, str: str)

func `$`*(v: Data): string =
  result = case v:
    of Data.[DONE]: "[DONE]"
