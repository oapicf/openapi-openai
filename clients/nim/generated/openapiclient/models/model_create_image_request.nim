#
# OpenAI API
# 
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# The version of the OpenAPI document: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by: https://openapi-generator.tech
#

import json
import tables

import model_create_image_request_model

type Quality* {.pure.} = enum
  Standard
  Hd

type ResponseFormat* {.pure.} = enum
  Url
  B64Json

type Size* {.pure.} = enum
  `256x256`
  `512x512`
  `1024x1024`
  `1792x1024`
  `1024x1792`

type Style* {.pure.} = enum
  Vivid
  Natural

type CreateImageRequest* = object
  ## 
  prompt*: string ## A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
  model*: CreateImageRequest_model
  n*: int ## The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
  quality*: Quality ## The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
  responseFormat*: ResponseFormat ## The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
  size*: Size ## The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
  style*: Style ## The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
  user*: string ## A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 

func `%`*(v: Quality): JsonNode =
  let str = case v:
    of Quality.Standard: "standard"
    of Quality.Hd: "hd"

  JsonNode(kind: JString, str: str)

func `$`*(v: Quality): string =
  result = case v:
    of Quality.Standard: "standard"
    of Quality.Hd: "hd"

func `%`*(v: ResponseFormat): JsonNode =
  let str = case v:
    of ResponseFormat.Url: "url"
    of ResponseFormat.B64Json: "b64_json"

  JsonNode(kind: JString, str: str)

func `$`*(v: ResponseFormat): string =
  result = case v:
    of ResponseFormat.Url: "url"
    of ResponseFormat.B64Json: "b64_json"

func `%`*(v: Size): JsonNode =
  let str = case v:
    of Size.`256x256`: "256x256"
    of Size.`512x512`: "512x512"
    of Size.`1024x1024`: "1024x1024"
    of Size.`1792x1024`: "1792x1024"
    of Size.`1024x1792`: "1024x1792"

  JsonNode(kind: JString, str: str)

func `$`*(v: Size): string =
  result = case v:
    of Size.`256x256`: "256x256"
    of Size.`512x512`: "512x512"
    of Size.`1024x1024`: "1024x1024"
    of Size.`1792x1024`: "1792x1024"
    of Size.`1024x1792`: "1024x1792"

func `%`*(v: Style): JsonNode =
  let str = case v:
    of Style.Vivid: "vivid"
    of Style.Natural: "natural"

  JsonNode(kind: JString, str: str)

func `$`*(v: Style): string =
  result = case v:
    of Style.Vivid: "vivid"
    of Style.Natural: "natural"
