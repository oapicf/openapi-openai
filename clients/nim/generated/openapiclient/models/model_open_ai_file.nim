#
# OpenAI API
# 
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# The version of the OpenAPI document: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by: https://openapi-generator.tech
#

import json
import tables


type `Object`* {.pure.} = enum
  File

type Purpose* {.pure.} = enum
  FineTune
  FineTuneResults
  Assistants
  AssistantsOutput

type Status* {.pure.} = enum
  Uploaded
  Processed
  Error

type OpenAIFile* = object
  ## The `File` object represents a document that has been uploaded to OpenAI.
  id*: string ## The file identifier, which can be referenced in the API endpoints.
  bytes*: int ## The size of the file, in bytes.
  createdAt*: int ## The Unix timestamp (in seconds) for when the file was created.
  filename*: string ## The name of the file.
  `object`*: `Object` ## The object type, which is always `file`.
  purpose*: Purpose ## The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`, `assistants`, and `assistants_output`.
  status*: Status ## Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
  statusDetails*: string ## Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.

func `%`*(v: `Object`): JsonNode =
  let str = case v:
    of `Object`.File: "file"

  JsonNode(kind: JString, str: str)

func `$`*(v: `Object`): string =
  result = case v:
    of `Object`.File: "file"

func `%`*(v: Purpose): JsonNode =
  let str = case v:
    of Purpose.FineTune: "fine-tune"
    of Purpose.FineTuneResults: "fine-tune-results"
    of Purpose.Assistants: "assistants"
    of Purpose.AssistantsOutput: "assistants_output"

  JsonNode(kind: JString, str: str)

func `$`*(v: Purpose): string =
  result = case v:
    of Purpose.FineTune: "fine-tune"
    of Purpose.FineTuneResults: "fine-tune-results"
    of Purpose.Assistants: "assistants"
    of Purpose.AssistantsOutput: "assistants_output"

func `%`*(v: Status): JsonNode =
  let str = case v:
    of Status.Uploaded: "uploaded"
    of Status.Processed: "processed"
    of Status.Error: "error"

  JsonNode(kind: JString, str: str)

func `$`*(v: Status): string =
  result = case v:
    of Status.Uploaded: "uploaded"
    of Status.Processed: "processed"
    of Status.Error: "error"
