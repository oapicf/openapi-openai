#import <Foundation/Foundation.h>
#import "OAICreateFineTuningJobRequest.h"
#import "OAIFineTuningJob.h"
#import "OAIListFineTuningJobCheckpointsResponse.h"
#import "OAIListFineTuningJobEventsResponse.h"
#import "OAIListPaginatedFineTuningJobsResponse.h"
#import "OAIApi.h"

/**
* OpenAI API
* The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIFineTuningApi: NSObject <OAIApi>

extern NSString* kOAIFineTuningApiErrorDomain;
extern NSInteger kOAIFineTuningApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Immediately cancel a fine-tune job. 
/// 
///
/// @param fineTuningJobId The ID of the fine-tuning job to cancel. 
/// 
///  code:200 message:"OK"
///
/// @return OAIFineTuningJob*
-(NSURLSessionTask*) cancelFineTuningJobWithFineTuningJobId: (NSString*) fineTuningJobId
    completionHandler: (void (^)(OAIFineTuningJob* output, NSError* error)) handler;


/// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
/// 
///
/// @param createFineTuningJobRequest 
/// 
///  code:200 message:"OK"
///
/// @return OAIFineTuningJob*
-(NSURLSessionTask*) createFineTuningJobWithCreateFineTuningJobRequest: (OAICreateFineTuningJobRequest*) createFineTuningJobRequest
    completionHandler: (void (^)(OAIFineTuningJob* output, NSError* error)) handler;


/// Get status updates for a fine-tuning job. 
/// 
///
/// @param fineTuningJobId The ID of the fine-tuning job to get events for. 
/// @param after Identifier for the last event from the previous pagination request. (optional)
/// @param limit Number of events to retrieve. (optional) (default to @20)
/// 
///  code:200 message:"OK"
///
/// @return OAIListFineTuningJobEventsResponse*
-(NSURLSessionTask*) listFineTuningEventsWithFineTuningJobId: (NSString*) fineTuningJobId
    after: (NSString*) after
    limit: (NSNumber*) limit
    completionHandler: (void (^)(OAIListFineTuningJobEventsResponse* output, NSError* error)) handler;


/// List checkpoints for a fine-tuning job. 
/// 
///
/// @param fineTuningJobId The ID of the fine-tuning job to get checkpoints for. 
/// @param after Identifier for the last checkpoint ID from the previous pagination request. (optional)
/// @param limit Number of checkpoints to retrieve. (optional) (default to @10)
/// 
///  code:200 message:"OK"
///
/// @return OAIListFineTuningJobCheckpointsResponse*
-(NSURLSessionTask*) listFineTuningJobCheckpointsWithFineTuningJobId: (NSString*) fineTuningJobId
    after: (NSString*) after
    limit: (NSNumber*) limit
    completionHandler: (void (^)(OAIListFineTuningJobCheckpointsResponse* output, NSError* error)) handler;


/// List your organization's fine-tuning jobs 
/// 
///
/// @param after Identifier for the last job from the previous pagination request. (optional)
/// @param limit Number of fine-tuning jobs to retrieve. (optional) (default to @20)
/// 
///  code:200 message:"OK"
///
/// @return OAIListPaginatedFineTuningJobsResponse*
-(NSURLSessionTask*) listPaginatedFineTuningJobsWithAfter: (NSString*) after
    limit: (NSNumber*) limit
    completionHandler: (void (^)(OAIListPaginatedFineTuningJobsResponse* output, NSError* error)) handler;


/// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
/// 
///
/// @param fineTuningJobId The ID of the fine-tuning job. 
/// 
///  code:200 message:"OK"
///
/// @return OAIFineTuningJob*
-(NSURLSessionTask*) retrieveFineTuningJobWithFineTuningJobId: (NSString*) fineTuningJobId
    completionHandler: (void (^)(OAIFineTuningJob* output, NSError* error)) handler;



@end
