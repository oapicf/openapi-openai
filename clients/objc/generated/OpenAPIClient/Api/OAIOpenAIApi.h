#import <Foundation/Foundation.h>
#import "OAICreateChatCompletionRequest.h"
#import "OAICreateChatCompletionResponse.h"
#import "OAICreateCompletionRequest.h"
#import "OAICreateCompletionResponse.h"
#import "OAICreateEditRequest.h"
#import "OAICreateEditResponse.h"
#import "OAICreateEmbeddingRequest.h"
#import "OAICreateEmbeddingResponse.h"
#import "OAICreateFineTuneRequest.h"
#import "OAICreateImageRequest.h"
#import "OAICreateModerationRequest.h"
#import "OAICreateModerationResponse.h"
#import "OAICreateTranscriptionRequestModel.h"
#import "OAICreateTranscriptionResponse.h"
#import "OAICreateTranslationResponse.h"
#import "OAIDeleteFileResponse.h"
#import "OAIDeleteModelResponse.h"
#import "OAIFineTune.h"
#import "OAIImagesResponse.h"
#import "OAIListFilesResponse.h"
#import "OAIListFineTuneEventsResponse.h"
#import "OAIListFineTunesResponse.h"
#import "OAIListModelsResponse.h"
#import "OAIModel.h"
#import "OAIOpenAIFile.h"
#import "OAIApi.h"

/**
* OpenAI API
* APIs for sampling from and fine-tuning language models
*
* The version of the OpenAPI document: 2.0.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIOpenAIApi: NSObject <OAIApi>

extern NSString* kOAIOpenAIApiErrorDomain;
extern NSInteger kOAIOpenAIApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Immediately cancel a fine-tune job. 
/// 
///
/// @param fineTuneId The ID of the fine-tune job to cancel 
/// 
///  code:200 message:"OK"
///
/// @return OAIFineTune*
-(NSURLSessionTask*) cancelFineTuneWithFineTuneId: (NSString*) fineTuneId
    completionHandler: (void (^)(OAIFineTune* output, NSError* error)) handler;


/// Creates a model response for the given chat conversation.
/// 
///
/// @param createChatCompletionRequest 
/// 
///  code:200 message:"OK"
///
/// @return OAICreateChatCompletionResponse*
-(NSURLSessionTask*) createChatCompletionWithCreateChatCompletionRequest: (OAICreateChatCompletionRequest*) createChatCompletionRequest
    completionHandler: (void (^)(OAICreateChatCompletionResponse* output, NSError* error)) handler;


/// Creates a completion for the provided prompt and parameters.
/// 
///
/// @param createCompletionRequest 
/// 
///  code:200 message:"OK"
///
/// @return OAICreateCompletionResponse*
-(NSURLSessionTask*) createCompletionWithCreateCompletionRequest: (OAICreateCompletionRequest*) createCompletionRequest
    completionHandler: (void (^)(OAICreateCompletionResponse* output, NSError* error)) handler;


/// Creates a new edit for the provided input, instruction, and parameters.
/// 
///
/// @param createEditRequest 
/// 
///  code:200 message:"OK"
///
/// @return OAICreateEditResponse*
-(NSURLSessionTask*) createEditWithCreateEditRequest: (OAICreateEditRequest*) createEditRequest
    completionHandler: (void (^)(OAICreateEditResponse* output, NSError* error)) handler;


/// Creates an embedding vector representing the input text.
/// 
///
/// @param createEmbeddingRequest 
/// 
///  code:200 message:"OK"
///
/// @return OAICreateEmbeddingResponse*
-(NSURLSessionTask*) createEmbeddingWithCreateEmbeddingRequest: (OAICreateEmbeddingRequest*) createEmbeddingRequest
    completionHandler: (void (^)(OAICreateEmbeddingResponse* output, NSError* error)) handler;


/// Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. 
/// 
///
/// @param file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\&quot;fine-tune\\\&quot;, each line is a JSON record with \\\&quot;prompt\\\&quot; and \\\&quot;completion\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data). 
/// @param purpose The intended purpose of the uploaded documents.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. 
/// 
///  code:200 message:"OK"
///
/// @return OAIOpenAIFile*
-(NSURLSessionTask*) createFileWithFile: (NSURL*) file
    purpose: (NSString*) purpose
    completionHandler: (void (^)(OAIOpenAIFile* output, NSError* error)) handler;


/// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
/// 
///
/// @param createFineTuneRequest 
/// 
///  code:200 message:"OK"
///
/// @return OAIFineTune*
-(NSURLSessionTask*) createFineTuneWithCreateFineTuneRequest: (OAICreateFineTuneRequest*) createFineTuneRequest
    completionHandler: (void (^)(OAIFineTune* output, NSError* error)) handler;


/// Creates an image given a prompt.
/// 
///
/// @param createImageRequest 
/// 
///  code:200 message:"OK"
///
/// @return OAIImagesResponse*
-(NSURLSessionTask*) createImageWithCreateImageRequest: (OAICreateImageRequest*) createImageRequest
    completionHandler: (void (^)(OAIImagesResponse* output, NSError* error)) handler;


/// Creates an edited or extended image given an original image and a prompt.
/// 
///
/// @param image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
/// @param prompt A text description of the desired image(s). The maximum length is 1000 characters.
/// @param mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;. (optional)
/// @param n The number of images to generate. Must be between 1 and 10. (optional) (default to @1)
/// @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional) (default to @"1024x1024")
/// @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. (optional) (default to @"url")
/// @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIImagesResponse*
-(NSURLSessionTask*) createImageEditWithImage: (NSURL*) image
    prompt: (NSString*) prompt
    mask: (NSURL*) mask
    n: (NSNumber*) n
    size: (NSString*) size
    responseFormat: (NSString*) responseFormat
    user: (NSString*) user
    completionHandler: (void (^)(OAIImagesResponse* output, NSError* error)) handler;


/// Creates a variation of a given image.
/// 
///
/// @param image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
/// @param n The number of images to generate. Must be between 1 and 10. (optional) (default to @1)
/// @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional) (default to @"1024x1024")
/// @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. (optional) (default to @"url")
/// @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIImagesResponse*
-(NSURLSessionTask*) createImageVariationWithImage: (NSURL*) image
    n: (NSNumber*) n
    size: (NSString*) size
    responseFormat: (NSString*) responseFormat
    user: (NSString*) user
    completionHandler: (void (^)(OAIImagesResponse* output, NSError* error)) handler;


/// Classifies if text violates OpenAI's Content Policy
/// 
///
/// @param createModerationRequest 
/// 
///  code:200 message:"OK"
///
/// @return OAICreateModerationResponse*
-(NSURLSessionTask*) createModerationWithCreateModerationRequest: (OAICreateModerationRequest*) createModerationRequest
    completionHandler: (void (^)(OAICreateModerationResponse* output, NSError* error)) handler;


/// Transcribes audio into the input language.
/// 
///
/// @param file The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
/// @param model 
/// @param prompt An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.  (optional)
/// @param responseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.  (optional) (default to @"json")
/// @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.  (optional) (default to @0)
/// @param language The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.  (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAICreateTranscriptionResponse*
-(NSURLSessionTask*) createTranscriptionWithFile: (NSURL*) file
    model: (OAICreateTranscriptionRequestModel*) model
    prompt: (NSString*) prompt
    responseFormat: (NSString*) responseFormat
    temperature: (NSNumber*) temperature
    language: (NSString*) language
    completionHandler: (void (^)(OAICreateTranscriptionResponse* output, NSError* error)) handler;


/// Translates audio into English.
/// 
///
/// @param file The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
/// @param model 
/// @param prompt An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.  (optional)
/// @param responseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.  (optional) (default to @"json")
/// @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.  (optional) (default to @0)
/// 
///  code:200 message:"OK"
///
/// @return OAICreateTranslationResponse*
-(NSURLSessionTask*) createTranslationWithFile: (NSURL*) file
    model: (OAICreateTranscriptionRequestModel*) model
    prompt: (NSString*) prompt
    responseFormat: (NSString*) responseFormat
    temperature: (NSNumber*) temperature
    completionHandler: (void (^)(OAICreateTranslationResponse* output, NSError* error)) handler;


/// Delete a file.
/// 
///
/// @param fileId The ID of the file to use for this request
/// 
///  code:200 message:"OK"
///
/// @return OAIDeleteFileResponse*
-(NSURLSessionTask*) deleteFileWithFileId: (NSString*) fileId
    completionHandler: (void (^)(OAIDeleteFileResponse* output, NSError* error)) handler;


/// Delete a fine-tuned model. You must have the Owner role in your organization.
/// 
///
/// @param model The model to delete
/// 
///  code:200 message:"OK"
///
/// @return OAIDeleteModelResponse*
-(NSURLSessionTask*) deleteModelWithModel: (NSString*) model
    completionHandler: (void (^)(OAIDeleteModelResponse* output, NSError* error)) handler;


/// Returns the contents of the specified file
/// 
///
/// @param fileId The ID of the file to use for this request
/// 
///  code:200 message:"OK"
///
/// @return NSString*
-(NSURLSessionTask*) downloadFileWithFileId: (NSString*) fileId
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Returns a list of files that belong to the user's organization.
/// 
///
/// 
///  code:200 message:"OK"
///
/// @return OAIListFilesResponse*
-(NSURLSessionTask*) listFilesWithCompletionHandler: 
    (void (^)(OAIListFilesResponse* output, NSError* error)) handler;


/// Get fine-grained status updates for a fine-tune job. 
/// 
///
/// @param fineTuneId The ID of the fine-tune job to get events for. 
/// @param stream Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.  (optional) (default to @(NO))
/// 
///  code:200 message:"OK"
///
/// @return OAIListFineTuneEventsResponse*
-(NSURLSessionTask*) listFineTuneEventsWithFineTuneId: (NSString*) fineTuneId
    stream: (NSNumber*) stream
    completionHandler: (void (^)(OAIListFineTuneEventsResponse* output, NSError* error)) handler;


/// List your organization's fine-tuning jobs 
/// 
///
/// 
///  code:200 message:"OK"
///
/// @return OAIListFineTunesResponse*
-(NSURLSessionTask*) listFineTunesWithCompletionHandler: 
    (void (^)(OAIListFineTunesResponse* output, NSError* error)) handler;


/// Lists the currently available models, and provides basic information about each one such as the owner and availability.
/// 
///
/// 
///  code:200 message:"OK"
///
/// @return OAIListModelsResponse*
-(NSURLSessionTask*) listModelsWithCompletionHandler: 
    (void (^)(OAIListModelsResponse* output, NSError* error)) handler;


/// Returns information about a specific file.
/// 
///
/// @param fileId The ID of the file to use for this request
/// 
///  code:200 message:"OK"
///
/// @return OAIOpenAIFile*
-(NSURLSessionTask*) retrieveFileWithFileId: (NSString*) fileId
    completionHandler: (void (^)(OAIOpenAIFile* output, NSError* error)) handler;


/// Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
/// 
///
/// @param fineTuneId The ID of the fine-tune job 
/// 
///  code:200 message:"OK"
///
/// @return OAIFineTune*
-(NSURLSessionTask*) retrieveFineTuneWithFineTuneId: (NSString*) fineTuneId
    completionHandler: (void (^)(OAIFineTune* output, NSError* error)) handler;


/// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
/// 
///
/// @param model The ID of the model to use for this request
/// 
///  code:200 message:"OK"
///
/// @return OAIModel*
-(NSURLSessionTask*) retrieveModelWithModel: (NSString*) model
    completionHandler: (void (^)(OAIModel* output, NSError* error)) handler;



@end
