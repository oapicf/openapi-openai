<?php
/**
 * AssistantsApiInterface
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use OpenAPI\Server\Model\AssistantFileObject;
use OpenAPI\Server\Model\AssistantObject;
use OpenAPI\Server\Model\CreateAssistantFileRequest;
use OpenAPI\Server\Model\CreateAssistantRequest;
use OpenAPI\Server\Model\CreateMessageRequest;
use OpenAPI\Server\Model\CreateRunRequest;
use OpenAPI\Server\Model\CreateThreadAndRunRequest;
use OpenAPI\Server\Model\CreateThreadRequest;
use OpenAPI\Server\Model\DeleteAssistantFileResponse;
use OpenAPI\Server\Model\DeleteAssistantResponse;
use OpenAPI\Server\Model\DeleteThreadResponse;
use OpenAPI\Server\Model\ListAssistantFilesResponse;
use OpenAPI\Server\Model\ListAssistantsResponse;
use OpenAPI\Server\Model\ListMessageFilesResponse;
use OpenAPI\Server\Model\ListMessagesResponse;
use OpenAPI\Server\Model\ListRunStepsResponse;
use OpenAPI\Server\Model\ListRunsResponse;
use OpenAPI\Server\Model\MessageFileObject;
use OpenAPI\Server\Model\MessageObject;
use OpenAPI\Server\Model\ModifyAssistantRequest;
use OpenAPI\Server\Model\ModifyMessageRequest;
use OpenAPI\Server\Model\ModifyRunRequest;
use OpenAPI\Server\Model\ModifyThreadRequest;
use OpenAPI\Server\Model\RunObject;
use OpenAPI\Server\Model\RunStepObject;
use OpenAPI\Server\Model\SubmitToolOutputsRunRequest;
use OpenAPI\Server\Model\ThreadObject;

/**
 * AssistantsApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  OpenAPI\Server\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface AssistantsApiInterface
{

    /**
     * Sets authentication method ApiKeyAuth
     *
     * @param string|null $value Value of the ApiKeyAuth authentication method.
     *
     * @return void
     */
    public function setApiKeyAuth(?string $value): void;

    /**
     * Operation cancelRun
     *
     * Cancels a run that is `in_progress`.
     *
     * @param  string $threadId  The ID of the thread to which this run belongs. (required)
     * @param  string $runId  The ID of the run to cancel. (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function cancelRun(
        string $threadId,
        string $runId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createAssistant
     *
     * Create an assistant with a model and instructions.
     *
     * @param  CreateAssistantRequest $createAssistantRequest   (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createAssistant(
        CreateAssistantRequest $createAssistantRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createAssistantFile
     *
     * Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
     *
     * @param  string $assistantId  The ID of the assistant for which to create a File. (required)
     * @param  CreateAssistantFileRequest $createAssistantFileRequest   (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createAssistantFile(
        string $assistantId,
        CreateAssistantFileRequest $createAssistantFileRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createMessage
     *
     * Create a message.
     *
     * @param  string $threadId  The ID of the [thread](/docs/api-reference/threads) to create a message for. (required)
     * @param  CreateMessageRequest $createMessageRequest   (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createMessage(
        string $threadId,
        CreateMessageRequest $createMessageRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createRun
     *
     * Create a run.
     *
     * @param  string $threadId  The ID of the thread to run. (required)
     * @param  CreateRunRequest $createRunRequest   (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createRun(
        string $threadId,
        CreateRunRequest $createRunRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createThread
     *
     * Create a thread.
     *
     * @param  CreateThreadRequest|null $createThreadRequest   (optional)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createThread(
        ?CreateThreadRequest $createThreadRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createThreadAndRun
     *
     * Create a thread and run it in one request.
     *
     * @param  CreateThreadAndRunRequest $createThreadAndRunRequest   (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createThreadAndRun(
        CreateThreadAndRunRequest $createThreadAndRunRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation deleteAssistant
     *
     * Delete an assistant.
     *
     * @param  string $assistantId  The ID of the assistant to delete. (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function deleteAssistant(
        string $assistantId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation deleteAssistantFile
     *
     * Delete an assistant file.
     *
     * @param  string $assistantId  The ID of the assistant that the file belongs to. (required)
     * @param  string $fileId  The ID of the file to delete. (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function deleteAssistantFile(
        string $assistantId,
        string $fileId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation deleteThread
     *
     * Delete a thread.
     *
     * @param  string $threadId  The ID of the thread to delete. (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function deleteThread(
        string $threadId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation getAssistant
     *
     * Retrieves an assistant.
     *
     * @param  string $assistantId  The ID of the assistant to retrieve. (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function getAssistant(
        string $assistantId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation getAssistantFile
     *
     * Retrieves an AssistantFile.
     *
     * @param  string $assistantId  The ID of the assistant who the file belongs to. (required)
     * @param  string $fileId  The ID of the file we&#39;re getting. (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function getAssistantFile(
        string $assistantId,
        string $fileId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation getMessage
     *
     * Retrieve a message.
     *
     * @param  string $threadId  The ID of the [thread](/docs/api-reference/threads) to which this message belongs. (required)
     * @param  string $messageId  The ID of the message to retrieve. (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function getMessage(
        string $threadId,
        string $messageId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation getMessageFile
     *
     * Retrieves a message file.
     *
     * @param  string $threadId  The ID of the thread to which the message and File belong. (required)
     * @param  string $messageId  The ID of the message the file belongs to. (required)
     * @param  string $fileId  The ID of the file being retrieved. (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function getMessageFile(
        string $threadId,
        string $messageId,
        string $fileId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation getRun
     *
     * Retrieves a run.
     *
     * @param  string $threadId  The ID of the [thread](/docs/api-reference/threads) that was run. (required)
     * @param  string $runId  The ID of the run to retrieve. (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function getRun(
        string $threadId,
        string $runId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation getRunStep
     *
     * Retrieves a run step.
     *
     * @param  string $threadId  The ID of the thread to which the run and run step belongs. (required)
     * @param  string $runId  The ID of the run to which the run step belongs. (required)
     * @param  string $stepId  The ID of the run step to retrieve. (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function getRunStep(
        string $threadId,
        string $runId,
        string $stepId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation getThread
     *
     * Retrieves a thread.
     *
     * @param  string $threadId  The ID of the thread to retrieve. (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function getThread(
        string $threadId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation listAssistantFiles
     *
     * Returns a list of assistant files.
     *
     * @param  string $assistantId  The ID of the assistant the file belongs to. (required)
     * @param  int $limit  A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order  Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string|null $after  A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string|null $before  A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function listAssistantFiles(
        string $assistantId,
        int $limit,
        string $order,
        ?string $after,
        ?string $before,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation listAssistants
     *
     * Returns a list of assistants.
     *
     * @param  int $limit  A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order  Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string|null $after  A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string|null $before  A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function listAssistants(
        int $limit,
        string $order,
        ?string $after,
        ?string $before,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation listMessageFiles
     *
     * Returns a list of message files.
     *
     * @param  string $threadId  The ID of the thread that the message and files belong to. (required)
     * @param  string $messageId  The ID of the message that the files belongs to. (required)
     * @param  int $limit  A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order  Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string|null $after  A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string|null $before  A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function listMessageFiles(
        string $threadId,
        string $messageId,
        int $limit,
        string $order,
        ?string $after,
        ?string $before,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation listMessages
     *
     * Returns a list of messages for a given thread.
     *
     * @param  string $threadId  The ID of the [thread](/docs/api-reference/threads) the messages belong to. (required)
     * @param  int $limit  A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order  Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string|null $after  A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string|null $before  A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string|null $runId  Filter messages by the run ID that generated them. (optional)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function listMessages(
        string $threadId,
        int $limit,
        string $order,
        ?string $after,
        ?string $before,
        ?string $runId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation listRunSteps
     *
     * Returns a list of run steps belonging to a run.
     *
     * @param  string $threadId  The ID of the thread the run and run steps belong to. (required)
     * @param  string $runId  The ID of the run the run steps belong to. (required)
     * @param  int $limit  A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order  Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string|null $after  A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string|null $before  A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function listRunSteps(
        string $threadId,
        string $runId,
        int $limit,
        string $order,
        ?string $after,
        ?string $before,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation listRuns
     *
     * Returns a list of runs belonging to a thread.
     *
     * @param  string $threadId  The ID of the thread the run belongs to. (required)
     * @param  int $limit  A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order  Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string|null $after  A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string|null $before  A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function listRuns(
        string $threadId,
        int $limit,
        string $order,
        ?string $after,
        ?string $before,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation modifyAssistant
     *
     * Modifies an assistant.
     *
     * @param  string $assistantId  The ID of the assistant to modify. (required)
     * @param  ModifyAssistantRequest $modifyAssistantRequest   (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function modifyAssistant(
        string $assistantId,
        ModifyAssistantRequest $modifyAssistantRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation modifyMessage
     *
     * Modifies a message.
     *
     * @param  string $threadId  The ID of the thread to which this message belongs. (required)
     * @param  string $messageId  The ID of the message to modify. (required)
     * @param  ModifyMessageRequest $modifyMessageRequest   (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function modifyMessage(
        string $threadId,
        string $messageId,
        ModifyMessageRequest $modifyMessageRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation modifyRun
     *
     * Modifies a run.
     *
     * @param  string $threadId  The ID of the [thread](/docs/api-reference/threads) that was run. (required)
     * @param  string $runId  The ID of the run to modify. (required)
     * @param  ModifyRunRequest $modifyRunRequest   (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function modifyRun(
        string $threadId,
        string $runId,
        ModifyRunRequest $modifyRunRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation modifyThread
     *
     * Modifies a thread.
     *
     * @param  string $threadId  The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified. (required)
     * @param  ModifyThreadRequest $modifyThreadRequest   (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function modifyThread(
        string $threadId,
        ModifyThreadRequest $modifyThreadRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation submitToolOuputsToRun
     *
     * When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
     *
     * @param  string $threadId  The ID of the [thread](/docs/api-reference/threads) to which this run belongs. (required)
     * @param  string $runId  The ID of the run that requires the tool output submission. (required)
     * @param  SubmitToolOutputsRunRequest $submitToolOutputsRunRequest   (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function submitToolOuputsToRun(
        string $threadId,
        string $runId,
        SubmitToolOutputsRunRequest $submitToolOutputsRunRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;
}
