<?php
/**
 * AudioApiInterface
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use OpenAPI\Server\Model\CreateSpeechRequest;
use OpenAPI\Server\Model\CreateTranscription200Response;
use OpenAPI\Server\Model\CreateTranscriptionRequestModel;
use OpenAPI\Server\Model\CreateTranslation200Response;

/**
 * AudioApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  OpenAPI\Server\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface AudioApiInterface
{

    /**
     * Sets authentication method ApiKeyAuth
     *
     * @param string|null $value Value of the ApiKeyAuth authentication method.
     *
     * @return void
     */
    public function setApiKeyAuth(?string $value): void;

    /**
     * Operation createSpeech
     *
     * Generates audio from the input text.
     *
     * @param  CreateSpeechRequest $createSpeechRequest   (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createSpeech(
        CreateSpeechRequest $createSpeechRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createTranscription
     *
     * Transcribes audio into the input language.
     *
     * @param  UploadedFile $file  The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. (required)
     * @param  CreateTranscriptionRequestModel $model   (required)
     * @param  string|null $language  The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. (optional)
     * @param  string|null $prompt  An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. (optional)
     * @param  string $responseFormat  The format of the transcript output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;. (optional, default to 'json')
     * @param  float $temperature  The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. (optional, default to 0)
     * @param  array|null $timestampGranularities  The timestamp granularities to populate for this transcription. &#x60;response_format&#x60; must be set &#x60;verbose_json&#x60; to use timestamp granularities. Either or both of these options are supported: &#x60;word&#x60;, or &#x60;segment&#x60;. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency. (optional)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createTranscription(
        UploadedFile $file,
        CreateTranscriptionRequestModel $model,
        ?string $language,
        ?string $prompt,
        string $responseFormat,
        float $temperature,
        ?array $timestampGranularities,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createTranslation
     *
     * Translates audio into English.
     *
     * @param  UploadedFile $file  The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. (required)
     * @param  CreateTranscriptionRequestModel $model   (required)
     * @param  string|null $prompt  An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. (optional)
     * @param  string $responseFormat  The format of the transcript output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;. (optional, default to 'json')
     * @param  float $temperature  The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. (optional, default to 0)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createTranslation(
        UploadedFile $file,
        CreateTranscriptionRequestModel $model,
        ?string $prompt,
        string $responseFormat,
        float $temperature,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;
}
