<?php
/**
 * FilesApiInterface
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use OpenAPI\Server\Model\DeleteFileResponse;
use OpenAPI\Server\Model\ListFilesResponse;
use OpenAPI\Server\Model\OpenAIFile;

/**
 * FilesApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  OpenAPI\Server\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface FilesApiInterface
{

    /**
     * Sets authentication method ApiKeyAuth
     *
     * @param string|null $value Value of the ApiKeyAuth authentication method.
     *
     * @return void
     */
    public function setApiKeyAuth(?string $value): void;

    /**
     * Operation createFile
     *
     * Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
     *
     * @param  UploadedFile $file  The File object (not file name) to be uploaded. (required)
     * @param  string $purpose  The intended purpose of the uploaded file.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tuning) and \\\&quot;assistants\\\&quot; for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning. (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createFile(
        UploadedFile $file,
        string $purpose,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation deleteFile
     *
     * Delete a file.
     *
     * @param  string $fileId  The ID of the file to use for this request. (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function deleteFile(
        string $fileId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation downloadFile
     *
     * Returns the contents of the specified file.
     *
     * @param  string $fileId  The ID of the file to use for this request. (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function downloadFile(
        string $fileId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation listFiles
     *
     * Returns a list of files that belong to the user's organization.
     *
     * @param  string|null $purpose  Only return files with the given purpose. (optional)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function listFiles(
        ?string $purpose,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation retrieveFile
     *
     * Returns information about a specific file.
     *
     * @param  string $fileId  The ID of the file to use for this request. (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function retrieveFile(
        string $fileId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;
}
