<?php
/**
 * OpenAIApiInterface
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use OpenAPI\Server\Model\CreateChatCompletionRequest;
use OpenAPI\Server\Model\CreateChatCompletionResponse;
use OpenAPI\Server\Model\CreateCompletionRequest;
use OpenAPI\Server\Model\CreateCompletionResponse;
use OpenAPI\Server\Model\CreateEditRequest;
use OpenAPI\Server\Model\CreateEditResponse;
use OpenAPI\Server\Model\CreateEmbeddingRequest;
use OpenAPI\Server\Model\CreateEmbeddingResponse;
use OpenAPI\Server\Model\CreateFineTuneRequest;
use OpenAPI\Server\Model\CreateImageRequest;
use OpenAPI\Server\Model\CreateModerationRequest;
use OpenAPI\Server\Model\CreateModerationResponse;
use OpenAPI\Server\Model\CreateTranscriptionRequestModel;
use OpenAPI\Server\Model\CreateTranscriptionResponse;
use OpenAPI\Server\Model\CreateTranslationResponse;
use OpenAPI\Server\Model\DeleteFileResponse;
use OpenAPI\Server\Model\DeleteModelResponse;
use OpenAPI\Server\Model\FineTune;
use OpenAPI\Server\Model\ImagesResponse;
use OpenAPI\Server\Model\ListFilesResponse;
use OpenAPI\Server\Model\ListFineTuneEventsResponse;
use OpenAPI\Server\Model\ListFineTunesResponse;
use OpenAPI\Server\Model\ListModelsResponse;
use OpenAPI\Server\Model\Model;
use OpenAPI\Server\Model\OpenAIFile;

/**
 * OpenAIApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  OpenAPI\Server\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface OpenAIApiInterface
{

    /**
     * Operation cancelFineTune
     *
     * Immediately cancel a fine-tune job.
     *
     * @param  string $fineTuneId  The ID of the fine-tune job to cancel (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function cancelFineTune(
        string $fineTuneId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createChatCompletion
     *
     * Creates a model response for the given chat conversation.
     *
     * @param  CreateChatCompletionRequest $createChatCompletionRequest   (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createChatCompletion(
        CreateChatCompletionRequest $createChatCompletionRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createCompletion
     *
     * Creates a completion for the provided prompt and parameters.
     *
     * @param  CreateCompletionRequest $createCompletionRequest   (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createCompletion(
        CreateCompletionRequest $createCompletionRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createEdit
     *
     * Creates a new edit for the provided input, instruction, and parameters.
     *
     * @param  CreateEditRequest $createEditRequest   (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createEdit(
        CreateEditRequest $createEditRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createEmbedding
     *
     * Creates an embedding vector representing the input text.
     *
     * @param  CreateEmbeddingRequest $createEmbeddingRequest   (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createEmbedding(
        CreateEmbeddingRequest $createEmbeddingRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createFile
     *
     * Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.
     *
     * @param  UploadedFile $file  Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\&quot;fine-tune\\\&quot;, each line is a JSON record with \\\&quot;prompt\\\&quot; and \\\&quot;completion\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data). (required)
     * @param  string $purpose  The intended purpose of the uploaded documents.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createFile(
        UploadedFile $file,
        string $purpose,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createFineTune
     *
     * Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)
     *
     * @param  CreateFineTuneRequest $createFineTuneRequest   (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createFineTune(
        CreateFineTuneRequest $createFineTuneRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createImage
     *
     * Creates an image given a prompt.
     *
     * @param  CreateImageRequest $createImageRequest   (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createImage(
        CreateImageRequest $createImageRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createImageEdit
     *
     * Creates an edited or extended image given an original image and a prompt.
     *
     * @param  UploadedFile $image  The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask. (required)
     * @param  string $prompt  A text description of the desired image(s). The maximum length is 1000 characters. (required)
     * @param  UploadedFile|null $mask  An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;. (optional)
     * @param  int $n  The number of images to generate. Must be between 1 and 10. (optional, default to 1)
     * @param  string $size  The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to '1024x1024')
     * @param  string $responseFormat  The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. (optional, default to 'url')
     * @param  string|null $user  A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). (optional)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createImageEdit(
        UploadedFile $image,
        string $prompt,
        ?UploadedFile $mask,
        int $n,
        string $size,
        string $responseFormat,
        ?string $user,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createImageVariation
     *
     * Creates a variation of a given image.
     *
     * @param  UploadedFile $image  The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square. (required)
     * @param  int $n  The number of images to generate. Must be between 1 and 10. (optional, default to 1)
     * @param  string $size  The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to '1024x1024')
     * @param  string $responseFormat  The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. (optional, default to 'url')
     * @param  string|null $user  A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). (optional)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createImageVariation(
        UploadedFile $image,
        int $n,
        string $size,
        string $responseFormat,
        ?string $user,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createModeration
     *
     * Classifies if text violates OpenAI's Content Policy
     *
     * @param  CreateModerationRequest $createModerationRequest   (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createModeration(
        CreateModerationRequest $createModerationRequest,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createTranscription
     *
     * Transcribes audio into the input language.
     *
     * @param  UploadedFile $file  The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. (required)
     * @param  CreateTranscriptionRequestModel $model   (required)
     * @param  string|null $prompt  An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. (optional)
     * @param  string $responseFormat  The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. (optional, default to 'json')
     * @param  float $temperature  The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. (optional, default to 0)
     * @param  string|null $language  The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. (optional)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createTranscription(
        UploadedFile $file,
        CreateTranscriptionRequestModel $model,
        ?string $prompt,
        string $responseFormat,
        float $temperature,
        ?string $language,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation createTranslation
     *
     * Translates audio into English.
     *
     * @param  UploadedFile $file  The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. (required)
     * @param  CreateTranscriptionRequestModel $model   (required)
     * @param  string|null $prompt  An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. (optional)
     * @param  string $responseFormat  The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. (optional, default to 'json')
     * @param  float $temperature  The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. (optional, default to 0)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function createTranslation(
        UploadedFile $file,
        CreateTranscriptionRequestModel $model,
        ?string $prompt,
        string $responseFormat,
        float $temperature,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation deleteFile
     *
     * Delete a file.
     *
     * @param  string $fileId  The ID of the file to use for this request (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function deleteFile(
        string $fileId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation deleteModel
     *
     * Delete a fine-tuned model. You must have the Owner role in your organization.
     *
     * @param  string $model  The model to delete (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function deleteModel(
        string $model,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation downloadFile
     *
     * Returns the contents of the specified file
     *
     * @param  string $fileId  The ID of the file to use for this request (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function downloadFile(
        string $fileId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation listFiles
     *
     * Returns a list of files that belong to the user's organization.
     *
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function listFiles(
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation listFineTuneEvents
     *
     * Get fine-grained status updates for a fine-tune job.
     *
     * @param  string $fineTuneId  The ID of the fine-tune job to get events for. (required)
     * @param  bool $stream  Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned. (optional, default to false)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function listFineTuneEvents(
        string $fineTuneId,
        bool $stream,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation listFineTunes
     *
     * List your organization's fine-tuning jobs
     *
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function listFineTunes(
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation listModels
     *
     * Lists the currently available models, and provides basic information about each one such as the owner and availability.
     *
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function listModels(
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation retrieveFile
     *
     * Returns information about a specific file.
     *
     * @param  string $fileId  The ID of the file to use for this request (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function retrieveFile(
        string $fileId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation retrieveFineTune
     *
     * Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)
     *
     * @param  string $fineTuneId  The ID of the fine-tune job (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function retrieveFineTune(
        string $fineTuneId,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;

    /**
     * Operation retrieveModel
     *
     * Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
     *
     * @param  string $model  The ID of the model to use for this request (required)
     * @param  int     &$responseCode    The HTTP Response Code
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return array|object|null
     */
    public function retrieveModel(
        string $model,
        int &$responseCode,
        array &$responseHeaders
    ): array|object|null;
}
