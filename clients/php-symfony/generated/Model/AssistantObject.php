<?php
/**
 * AssistantObject
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the AssistantObject model.
 *
 * Represents an &#x60;assistant&#x60; that can call the model and use tools.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class AssistantObject 
{
        /**
     * The identifier, which can be referenced in API endpoints.
     *
     * @var string|null
     * @SerializedName("id")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $id = null;

    /**
     * The object type, which is always &#x60;assistant&#x60;.
     *
     * @var string|null
     * @SerializedName("object")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Choice(["assistant"])]
    #[Assert\Type("string")]
    protected ?string $object = null;

    /**
     * The Unix timestamp (in seconds) for when the assistant was created.
     *
     * @var int|null
     * @SerializedName("created_at")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $createdAt = null;

    /**
     * The name of the assistant. The maximum length is 256 characters.
     *
     * @var string|null
     * @SerializedName("name")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Length(max: 256)]
    protected ?string $name = null;

    /**
     * The description of the assistant. The maximum length is 512 characters.
     *
     * @var string|null
     * @SerializedName("description")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Length(max: 512)]
    protected ?string $description = null;

    /**
     * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
     *
     * @var string|null
     * @SerializedName("model")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $model = null;

    /**
     * The system instructions that the assistant uses. The maximum length is 256,000 characters.
     *
     * @var string|null
     * @SerializedName("instructions")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Length(max: 256000)]
    protected ?string $instructions = null;

    /**
     * A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types &#x60;code_interpreter&#x60;, &#x60;retrieval&#x60;, or &#x60;function&#x60;.
     *
     * @var AssistantObjectToolsInner[]|null
     * @SerializedName("tools")
     * @Type("array<OpenAPI\Server\Model\AssistantObjectToolsInner>")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\AssistantObjectToolsInner"),
    ])]
    #[Assert\Count(max: 128)]
    protected ?array $tools = null;

    /**
     * A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
     *
     * @var string[]|null
     * @SerializedName("file_ids")
     * @Type("array<string>")
    */
    #[Assert\NotNull]
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    #[Assert\Count(max: 20)]
    protected ?array $fileIds = null;

    /**
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
     *
     * @var array|null
     * @SerializedName("metadata")
     * @Type("array")
    */
    #[Assert\NotNull]
    #[Assert\Type("array")]
    protected ?array $metadata = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->object = array_key_exists('object', $data) ? $data['object'] : $this->object;
            $this->createdAt = array_key_exists('createdAt', $data) ? $data['createdAt'] : $this->createdAt;
            $this->name = array_key_exists('name', $data) ? $data['name'] : $this->name;
            $this->description = array_key_exists('description', $data) ? $data['description'] : $this->description;
            $this->model = array_key_exists('model', $data) ? $data['model'] : $this->model;
            $this->instructions = array_key_exists('instructions', $data) ? $data['instructions'] : $this->instructions;
            $this->tools = array_key_exists('tools', $data) ? $data['tools'] : $this->tools;
            $this->fileIds = array_key_exists('fileIds', $data) ? $data['fileIds'] : $this->fileIds;
            $this->metadata = array_key_exists('metadata', $data) ? $data['metadata'] : $this->metadata;
        }
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param string|null $id  The identifier, which can be referenced in API endpoints.
    *
    * @return $this
    */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets object.
     *
     * @return string|null
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
    * Sets object.
    *
    * @param string|null $object  The object type, which is always `assistant`.
    *
    * @return $this
    */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }




    /**
     * Gets createdAt.
     *
     * @return int|null
     */
    public function getCreatedAt(): ?int
    {
        return $this->createdAt;
    }

    /**
    * Sets createdAt.
    *
    * @param int|null $createdAt  The Unix timestamp (in seconds) for when the assistant was created.
    *
    * @return $this
    */
    public function setCreatedAt(?int $createdAt): self
    {
        $this->createdAt = $createdAt;

        return $this;
    }




    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
    * Sets name.
    *
    * @param string|null $name  The name of the assistant. The maximum length is 256 characters.
    *
    * @return $this
    */
    public function setName(?string $name): self
    {
        $this->name = $name;

        return $this;
    }




    /**
     * Gets description.
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
    * Sets description.
    *
    * @param string|null $description  The description of the assistant. The maximum length is 512 characters.
    *
    * @return $this
    */
    public function setDescription(?string $description): self
    {
        $this->description = $description;

        return $this;
    }




    /**
     * Gets model.
     *
     * @return string|null
     */
    public function getModel(): ?string
    {
        return $this->model;
    }

    /**
    * Sets model.
    *
    * @param string|null $model  ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
    *
    * @return $this
    */
    public function setModel(?string $model): self
    {
        $this->model = $model;

        return $this;
    }




    /**
     * Gets instructions.
     *
     * @return string|null
     */
    public function getInstructions(): ?string
    {
        return $this->instructions;
    }

    /**
    * Sets instructions.
    *
    * @param string|null $instructions  The system instructions that the assistant uses. The maximum length is 256,000 characters.
    *
    * @return $this
    */
    public function setInstructions(?string $instructions): self
    {
        $this->instructions = $instructions;

        return $this;
    }




    /**
     * Gets tools.
     *
     * @return AssistantObjectToolsInner[]|null
     */
    public function getTools(): ?array
    {
        return $this->tools;
    }

    /**
    * Sets tools.
    *
    * @param AssistantObjectToolsInner[]|null $tools  A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
    *
    * @return $this
    */
    public function setTools(?array $tools): self
    {
        $this->tools = $tools;

        return $this;
    }




    /**
     * Gets fileIds.
     *
     * @return string[]|null
     */
    public function getFileIds(): ?array
    {
        return $this->fileIds;
    }

    /**
    * Sets fileIds.
    *
    * @param string[]|null $fileIds  A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
    *
    * @return $this
    */
    public function setFileIds(?array $fileIds): self
    {
        $this->fileIds = $fileIds;

        return $this;
    }




    /**
     * Gets metadata.
     *
     * @return array|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
    * Sets metadata.
    *
    * @param array|null $metadata  Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
    *
    * @return $this
    */
    public function setMetadata(?array $metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }



}


