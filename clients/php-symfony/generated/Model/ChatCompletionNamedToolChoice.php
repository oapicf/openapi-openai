<?php
/**
 * ChatCompletionNamedToolChoice
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ChatCompletionNamedToolChoice model.
 *
 * Specifies a tool the model should use. Use to force the model to call a specific function.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class ChatCompletionNamedToolChoice 
{
        /**
     * The type of the tool. Currently, only &#x60;function&#x60; is supported.
     *
     * @var string|null
     * @SerializedName("type")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Choice(["function"])]
    #[Assert\Type("string")]
    protected ?string $type = null;

    /**
     * @var ChatCompletionNamedToolChoiceFunction|null
     * @SerializedName("function")
     * @Type("OpenAPI\Server\Model\ChatCompletionNamedToolChoiceFunction")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\Type("OpenAPI\Server\Model\ChatCompletionNamedToolChoiceFunction")]
    protected ?ChatCompletionNamedToolChoiceFunction $function = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->type = array_key_exists('type', $data) ? $data['type'] : $this->type;
            $this->function = array_key_exists('function', $data) ? $data['function'] : $this->function;
        }
    }

    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
    * Sets type.
    *
    * @param string|null $type  The type of the tool. Currently, only `function` is supported.
    *
    * @return $this
    */
    public function setType(?string $type): self
    {
        $this->type = $type;

        return $this;
    }




    /**
     * Gets function.
     *
     * @return ChatCompletionNamedToolChoiceFunction|null
     */
    public function getFunction(): ?ChatCompletionNamedToolChoiceFunction
    {
        return $this->function;
    }

    /**
    * Sets function.
    *
    * @param ChatCompletionNamedToolChoiceFunction|null $function
    *
    * @return $this
    */
    public function setFunction(?ChatCompletionNamedToolChoiceFunction $function): self
    {
        $this->function = $function;

        return $this;
    }



}


