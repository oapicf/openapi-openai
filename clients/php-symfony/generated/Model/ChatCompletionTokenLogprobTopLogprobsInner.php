<?php
/**
 * ChatCompletionTokenLogprobTopLogprobsInner
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ChatCompletionTokenLogprobTopLogprobsInner model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class ChatCompletionTokenLogprobTopLogprobsInner 
{
        /**
     * The token.
     *
     * @var string|null
     * @SerializedName("token")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $token = null;

    /**
     * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value &#x60;-9999.0&#x60; is used to signify that the token is very unlikely.
     *
     * @var float|null
     * @SerializedName("logprob")
     * @Type("float")
    */
    #[Assert\NotNull]
    #[Assert\Type("float")]
    protected ?float $logprob = null;

    /**
     * A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be &#x60;null&#x60; if there is no bytes representation for the token.
     *
     * @var int[]|null
     * @SerializedName("bytes")
     * @Type("array<int>")
    */
    #[Assert\NotNull]
    #[Assert\All([
        new Assert\Type("int"),
    ])]
    protected ?array $bytes = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->token = array_key_exists('token', $data) ? $data['token'] : $this->token;
            $this->logprob = array_key_exists('logprob', $data) ? $data['logprob'] : $this->logprob;
            $this->bytes = array_key_exists('bytes', $data) ? $data['bytes'] : $this->bytes;
        }
    }

    /**
     * Gets token.
     *
     * @return string|null
     */
    public function getToken(): ?string
    {
        return $this->token;
    }

    /**
    * Sets token.
    *
    * @param string|null $token  The token.
    *
    * @return $this
    */
    public function setToken(?string $token): self
    {
        $this->token = $token;

        return $this;
    }




    /**
     * Gets logprob.
     *
     * @return float|null
     */
    public function getLogprob(): ?float
    {
        return $this->logprob;
    }

    /**
    * Sets logprob.
    *
    * @param float|null $logprob  The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
    *
    * @return $this
    */
    public function setLogprob(?float $logprob): self
    {
        $this->logprob = $logprob;

        return $this;
    }




    /**
     * Gets bytes.
     *
     * @return int[]|null
     */
    public function getBytes(): ?array
    {
        return $this->bytes;
    }

    /**
    * Sets bytes.
    *
    * @param int[]|null $bytes  A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
    *
    * @return $this
    */
    public function setBytes(?array $bytes): self
    {
        $this->bytes = $bytes;

        return $this;
    }



}


