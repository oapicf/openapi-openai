<?php
/**
 * CreateChatCompletionRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CreateChatCompletionRequest model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CreateChatCompletionRequest 
{
        /**
     * A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
     *
     * @var ChatCompletionRequestMessage[]|null
     * @SerializedName("messages")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\ChatCompletionRequestMessage")
     * })
     * @Type("array<OpenAPI\Server\Model\ChatCompletionRequestMessage>")
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected ?array $messages = null;

    /**
     * @var CreateChatCompletionRequestModel|null
     * @SerializedName("model")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("OpenAPI\Server\Model\CreateChatCompletionRequestModel")
     * @Type("OpenAPI\Server\Model\CreateChatCompletionRequestModel")
     */
    protected ?CreateChatCompletionRequestModel $model = null;

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
     *
     * @var float|null
     * @SerializedName("frequency_penalty")
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThanOrEqual(-2)
     * @Assert\LessThanOrEqual(2)
     */
    protected ?float $frequencyPenalty = 0;

    /**
     * Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     *
     * @var int[]|null
     * @SerializedName("logit_bias")
     * @Assert\All({
     *   @Assert\Type("int")
     * })
     * @Type("array<string, int>")
     */
    protected ?array $logitBias = null;

    /**
     * Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the &#x60;content&#x60; of &#x60;message&#x60;.
     *
     * @var bool|null
     * @SerializedName("logprobs")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected ?bool $logprobs = false;

    /**
     * An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. &#x60;logprobs&#x60; must be set to &#x60;true&#x60; if this parameter is used.
     *
     * @var int|null
     * @SerializedName("top_logprobs")
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(0)
     * @Assert\LessThanOrEqual(20)
     */
    protected ?int $topLogprobs = null;

    /**
     * The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.  The total length of input tokens and generated tokens is limited by the model&#39;s context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
     *
     * @var int|null
     * @SerializedName("max_tokens")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $maxTokens = null;

    /**
     * How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep &#x60;n&#x60; as &#x60;1&#x60; to minimize costs.
     *
     * @var int|null
     * @SerializedName("n")
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(1)
     * @Assert\LessThanOrEqual(128)
     */
    protected ?int $n = 1;

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
     *
     * @var float|null
     * @SerializedName("presence_penalty")
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThanOrEqual(-2)
     * @Assert\LessThanOrEqual(2)
     */
    protected ?float $presencePenalty = 0;

    /**
     * @var CreateChatCompletionRequestResponseFormat|null
     * @SerializedName("response_format")
     * @Assert\Type("OpenAPI\Server\Model\CreateChatCompletionRequestResponseFormat")
     * @Type("OpenAPI\Server\Model\CreateChatCompletionRequestResponseFormat")
     */
    protected ?CreateChatCompletionRequestResponseFormat $responseFormat = null;

    /**
     * This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same &#x60;seed&#x60; and parameters should return the same result. Determinism is not guaranteed, and you should refer to the &#x60;system_fingerprint&#x60; response parameter to monitor changes in the backend.
     *
     * @var int|null
     * @SerializedName("seed")
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(-9223372036854775808)
     * @Assert\LessThanOrEqual(9223372036854775807)
     */
    protected ?int $seed = null;

    /**
     * @var CreateChatCompletionRequestStop|null
     * @SerializedName("stop")
     * @Assert\Type("OpenAPI\Server\Model\CreateChatCompletionRequestStop")
     * @Type("OpenAPI\Server\Model\CreateChatCompletionRequestStop")
     */
    protected ?CreateChatCompletionRequestStop $stop = null;

    /**
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a &#x60;data: [DONE]&#x60; message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
     *
     * @var bool|null
     * @SerializedName("stream")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected ?bool $stream = false;

    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both.
     *
     * @var float|null
     * @SerializedName("temperature")
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThanOrEqual(0)
     * @Assert\LessThanOrEqual(2)
     */
    protected ?float $temperature = 1;

    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both.
     *
     * @var float|null
     * @SerializedName("top_p")
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThanOrEqual(0)
     * @Assert\LessThanOrEqual(1)
     */
    protected ?float $topP = 1;

    /**
     * A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
     *
     * @var ChatCompletionTool[]|null
     * @SerializedName("tools")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\ChatCompletionTool")
     * })
     * @Type("array<OpenAPI\Server\Model\ChatCompletionTool>")
     */
    protected ?array $tools = null;

    /**
     * @var ChatCompletionToolChoiceOption|null
     * @SerializedName("tool_choice")
     * @Assert\Type("OpenAPI\Server\Model\ChatCompletionToolChoiceOption")
     * @Type("OpenAPI\Server\Model\ChatCompletionToolChoiceOption")
     */
    protected ?ChatCompletionToolChoiceOption $toolChoice = null;

    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     *
     * @var string|null
     * @SerializedName("user")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $user = null;

    /**
     * @var CreateChatCompletionRequestFunctionCall|null
     * @SerializedName("function_call")
     * @Assert\Type("OpenAPI\Server\Model\CreateChatCompletionRequestFunctionCall")
     * @Type("OpenAPI\Server\Model\CreateChatCompletionRequestFunctionCall")
     */
    protected ?CreateChatCompletionRequestFunctionCall $functionCall = null;

    /**
     * Deprecated in favor of &#x60;tools&#x60;.  A list of functions the model may generate JSON inputs for.
     *
     * @var ChatCompletionFunctions[]|null
     * @SerializedName("functions")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\ChatCompletionFunctions")
     * })
     * @Type("array<OpenAPI\Server\Model\ChatCompletionFunctions>")
     * @Assert\Count(
     *   max = 128
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected ?array $functions = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->messages = array_key_exists('messages', $data) ? $data['messages'] : $this->messages;
            $this->model = array_key_exists('model', $data) ? $data['model'] : $this->model;
            $this->frequencyPenalty = array_key_exists('frequencyPenalty', $data) ? $data['frequencyPenalty'] : $this->frequencyPenalty;
            $this->logitBias = array_key_exists('logitBias', $data) ? $data['logitBias'] : $this->logitBias;
            $this->logprobs = array_key_exists('logprobs', $data) ? $data['logprobs'] : $this->logprobs;
            $this->topLogprobs = array_key_exists('topLogprobs', $data) ? $data['topLogprobs'] : $this->topLogprobs;
            $this->maxTokens = array_key_exists('maxTokens', $data) ? $data['maxTokens'] : $this->maxTokens;
            $this->n = array_key_exists('n', $data) ? $data['n'] : $this->n;
            $this->presencePenalty = array_key_exists('presencePenalty', $data) ? $data['presencePenalty'] : $this->presencePenalty;
            $this->responseFormat = array_key_exists('responseFormat', $data) ? $data['responseFormat'] : $this->responseFormat;
            $this->seed = array_key_exists('seed', $data) ? $data['seed'] : $this->seed;
            $this->stop = array_key_exists('stop', $data) ? $data['stop'] : $this->stop;
            $this->stream = array_key_exists('stream', $data) ? $data['stream'] : $this->stream;
            $this->temperature = array_key_exists('temperature', $data) ? $data['temperature'] : $this->temperature;
            $this->topP = array_key_exists('topP', $data) ? $data['topP'] : $this->topP;
            $this->tools = array_key_exists('tools', $data) ? $data['tools'] : $this->tools;
            $this->toolChoice = array_key_exists('toolChoice', $data) ? $data['toolChoice'] : $this->toolChoice;
            $this->user = array_key_exists('user', $data) ? $data['user'] : $this->user;
            $this->functionCall = array_key_exists('functionCall', $data) ? $data['functionCall'] : $this->functionCall;
            $this->functions = array_key_exists('functions', $data) ? $data['functions'] : $this->functions;
        }
    }

    /**
     * Gets messages.
     *
     * @return ChatCompletionRequestMessage[]|null
     */
    public function getMessages(): ?array
    {
        return $this->messages;
    }



    /**
     * Sets messages.
     *
     * @param ChatCompletionRequestMessage[]|null $messages  A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
     *
     * @return $this
     */
    public function setMessages(?array $messages): self
    {
        $this->messages = $messages;

        return $this;
    }

    /**
     * Gets model.
     *
     * @return CreateChatCompletionRequestModel|null
     */
    public function getModel(): ?CreateChatCompletionRequestModel
    {
        return $this->model;
    }



    /**
     * Sets model.
     *
     * @param CreateChatCompletionRequestModel|null $model
     *
     * @return $this
     */
    public function setModel(?CreateChatCompletionRequestModel $model): self
    {
        $this->model = $model;

        return $this;
    }

    /**
     * Gets frequencyPenalty.
     *
     * @return float|null
     */
    public function getFrequencyPenalty(): ?float
    {
        return $this->frequencyPenalty;
    }



    /**
     * Sets frequencyPenalty.
     *
     * @param float|null $frequencyPenalty  Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
     *
     * @return $this
     */
    public function setFrequencyPenalty(?float $frequencyPenalty = null): self
    {
        $this->frequencyPenalty = $frequencyPenalty;

        return $this;
    }

    /**
     * Gets logitBias.
     *
     * @return int[]|null
     */
    public function getLogitBias(): ?array
    {
        return $this->logitBias;
    }



    /**
     * Sets logitBias.
     *
     * @param int[]|null $logitBias  Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     *
     * @return $this
     */
    public function setLogitBias(?array $logitBias = null): self
    {
        $this->logitBias = $logitBias;

        return $this;
    }

    /**
     * Gets logprobs.
     *
     * @return bool|null
     */
    public function isLogprobs(): ?bool
    {
        return $this->logprobs;
    }



    /**
     * Sets logprobs.
     *
     * @param bool|null $logprobs  Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.
     *
     * @return $this
     */
    public function setLogprobs(?bool $logprobs = null): self
    {
        $this->logprobs = $logprobs;

        return $this;
    }

    /**
     * Gets topLogprobs.
     *
     * @return int|null
     */
    public function getTopLogprobs(): ?int
    {
        return $this->topLogprobs;
    }



    /**
     * Sets topLogprobs.
     *
     * @param int|null $topLogprobs  An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
     *
     * @return $this
     */
    public function setTopLogprobs(?int $topLogprobs = null): self
    {
        $this->topLogprobs = $topLogprobs;

        return $this;
    }

    /**
     * Gets maxTokens.
     *
     * @return int|null
     */
    public function getMaxTokens(): ?int
    {
        return $this->maxTokens;
    }



    /**
     * Sets maxTokens.
     *
     * @param int|null $maxTokens  The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.  The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
     *
     * @return $this
     */
    public function setMaxTokens(?int $maxTokens = null): self
    {
        $this->maxTokens = $maxTokens;

        return $this;
    }

    /**
     * Gets n.
     *
     * @return int|null
     */
    public function getN(): ?int
    {
        return $this->n;
    }



    /**
     * Sets n.
     *
     * @param int|null $n  How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
     *
     * @return $this
     */
    public function setN(?int $n = null): self
    {
        $this->n = $n;

        return $this;
    }

    /**
     * Gets presencePenalty.
     *
     * @return float|null
     */
    public function getPresencePenalty(): ?float
    {
        return $this->presencePenalty;
    }



    /**
     * Sets presencePenalty.
     *
     * @param float|null $presencePenalty  Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
     *
     * @return $this
     */
    public function setPresencePenalty(?float $presencePenalty = null): self
    {
        $this->presencePenalty = $presencePenalty;

        return $this;
    }

    /**
     * Gets responseFormat.
     *
     * @return CreateChatCompletionRequestResponseFormat|null
     */
    public function getResponseFormat(): ?CreateChatCompletionRequestResponseFormat
    {
        return $this->responseFormat;
    }



    /**
     * Sets responseFormat.
     *
     * @param CreateChatCompletionRequestResponseFormat|null $responseFormat
     *
     * @return $this
     */
    public function setResponseFormat(?CreateChatCompletionRequestResponseFormat $responseFormat = null): self
    {
        $this->responseFormat = $responseFormat;

        return $this;
    }

    /**
     * Gets seed.
     *
     * @return int|null
     */
    public function getSeed(): ?int
    {
        return $this->seed;
    }



    /**
     * Sets seed.
     *
     * @param int|null $seed  This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
     *
     * @return $this
     */
    public function setSeed(?int $seed = null): self
    {
        $this->seed = $seed;

        return $this;
    }

    /**
     * Gets stop.
     *
     * @return CreateChatCompletionRequestStop|null
     */
    public function getStop(): ?CreateChatCompletionRequestStop
    {
        return $this->stop;
    }



    /**
     * Sets stop.
     *
     * @param CreateChatCompletionRequestStop|null $stop
     *
     * @return $this
     */
    public function setStop(?CreateChatCompletionRequestStop $stop = null): self
    {
        $this->stop = $stop;

        return $this;
    }

    /**
     * Gets stream.
     *
     * @return bool|null
     */
    public function isStream(): ?bool
    {
        return $this->stream;
    }



    /**
     * Sets stream.
     *
     * @param bool|null $stream  If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
     *
     * @return $this
     */
    public function setStream(?bool $stream = null): self
    {
        $this->stream = $stream;

        return $this;
    }

    /**
     * Gets temperature.
     *
     * @return float|null
     */
    public function getTemperature(): ?float
    {
        return $this->temperature;
    }



    /**
     * Sets temperature.
     *
     * @param float|null $temperature  What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.
     *
     * @return $this
     */
    public function setTemperature(?float $temperature = null): self
    {
        $this->temperature = $temperature;

        return $this;
    }

    /**
     * Gets topP.
     *
     * @return float|null
     */
    public function getTopP(): ?float
    {
        return $this->topP;
    }



    /**
     * Sets topP.
     *
     * @param float|null $topP  An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.
     *
     * @return $this
     */
    public function setTopP(?float $topP = null): self
    {
        $this->topP = $topP;

        return $this;
    }

    /**
     * Gets tools.
     *
     * @return ChatCompletionTool[]|null
     */
    public function getTools(): ?array
    {
        return $this->tools;
    }



    /**
     * Sets tools.
     *
     * @param ChatCompletionTool[]|null $tools  A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
     *
     * @return $this
     */
    public function setTools(?array $tools = null): self
    {
        $this->tools = $tools;

        return $this;
    }

    /**
     * Gets toolChoice.
     *
     * @return ChatCompletionToolChoiceOption|null
     */
    public function getToolChoice(): ?ChatCompletionToolChoiceOption
    {
        return $this->toolChoice;
    }



    /**
     * Sets toolChoice.
     *
     * @param ChatCompletionToolChoiceOption|null $toolChoice
     *
     * @return $this
     */
    public function setToolChoice(?ChatCompletionToolChoiceOption $toolChoice = null): self
    {
        $this->toolChoice = $toolChoice;

        return $this;
    }

    /**
     * Gets user.
     *
     * @return string|null
     */
    public function getUser(): ?string
    {
        return $this->user;
    }



    /**
     * Sets user.
     *
     * @param string|null $user  A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     *
     * @return $this
     */
    public function setUser(?string $user = null): self
    {
        $this->user = $user;

        return $this;
    }

    /**
     * Gets functionCall.
     *
     * @return CreateChatCompletionRequestFunctionCall|null
     */
    public function getFunctionCall(): ?CreateChatCompletionRequestFunctionCall
    {
        return $this->functionCall;
    }



    /**
     * Sets functionCall.
     *
     * @param CreateChatCompletionRequestFunctionCall|null $functionCall
     *
     * @return $this
     */
    public function setFunctionCall(?CreateChatCompletionRequestFunctionCall $functionCall = null): self
    {
        $this->functionCall = $functionCall;

        return $this;
    }

    /**
     * Gets functions.
     *
     * @return ChatCompletionFunctions[]|null
     */
    public function getFunctions(): ?array
    {
        return $this->functions;
    }



    /**
     * Sets functions.
     *
     * @param ChatCompletionFunctions[]|null $functions  Deprecated in favor of `tools`.  A list of functions the model may generate JSON inputs for.
     *
     * @return $this
     */
    public function setFunctions(?array $functions = null): self
    {
        $this->functions = $functions;

        return $this;
    }
}


