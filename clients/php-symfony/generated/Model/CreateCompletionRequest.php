<?php
/**
 * CreateCompletionRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CreateCompletionRequest model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CreateCompletionRequest 
{
        /**
     * @var CreateCompletionRequestModel|null
     * @SerializedName("model")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("OpenAPI\Server\Model\CreateCompletionRequestModel")
     * @Type("OpenAPI\Server\Model\CreateCompletionRequestModel")
     */
    protected ?CreateCompletionRequestModel $model = null;

    /**
     * @var CreateCompletionRequestPrompt|null
     * @SerializedName("prompt")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("OpenAPI\Server\Model\CreateCompletionRequestPrompt")
     * @Type("OpenAPI\Server\Model\CreateCompletionRequestPrompt")
     */
    protected ?CreateCompletionRequestPrompt $prompt = null;

    /**
     * Generates &#x60;best_of&#x60; completions server-side and returns the \&quot;best\&quot; (the one with the highest log probability per token). Results cannot be streamed.  When used with &#x60;n&#x60;, &#x60;best_of&#x60; controls the number of candidate completions and &#x60;n&#x60; specifies how many to return â€“ &#x60;best_of&#x60; must be greater than &#x60;n&#x60;.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for &#x60;max_tokens&#x60; and &#x60;stop&#x60;.
     *
     * @var int|null
     * @SerializedName("best_of")
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(0)
     * @Assert\LessThanOrEqual(20)
     */
    protected ?int $bestOf = 1;

    /**
     * Echo back the prompt in addition to the completion
     *
     * @var bool|null
     * @SerializedName("echo")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected ?bool $echo = false;

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
     *
     * @var float|null
     * @SerializedName("frequency_penalty")
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThanOrEqual(-2)
     * @Assert\LessThanOrEqual(2)
     */
    protected ?float $frequencyPenalty = 0;

    /**
     * Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view&#x3D;bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass &#x60;{\&quot;50256\&quot;: -100}&#x60; to prevent the &lt;|endoftext|&gt; token from being generated.
     *
     * @var int[]|null
     * @SerializedName("logit_bias")
     * @Assert\All({
     *   @Assert\Type("int")
     * })
     * @Type("array<string, int>")
     */
    protected ?array $logitBias = null;

    /**
     * Include the log probabilities on the &#x60;logprobs&#x60; most likely output tokens, as well the chosen tokens. For example, if &#x60;logprobs&#x60; is 5, the API will return a list of the 5 most likely tokens. The API will always return the &#x60;logprob&#x60; of the sampled token, so there may be up to &#x60;logprobs+1&#x60; elements in the response.  The maximum value for &#x60;logprobs&#x60; is 5.
     *
     * @var int|null
     * @SerializedName("logprobs")
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(0)
     * @Assert\LessThanOrEqual(5)
     */
    protected ?int $logprobs = null;

    /**
     * The maximum number of [tokens](/tokenizer) that can be generated in the completion.  The token count of your prompt plus &#x60;max_tokens&#x60; cannot exceed the model&#39;s context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
     *
     * @var int|null
     * @SerializedName("max_tokens")
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(0)
     */
    protected ?int $maxTokens = 16;

    /**
     * How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for &#x60;max_tokens&#x60; and &#x60;stop&#x60;.
     *
     * @var int|null
     * @SerializedName("n")
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(1)
     * @Assert\LessThanOrEqual(128)
     */
    protected ?int $n = 1;

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
     *
     * @var float|null
     * @SerializedName("presence_penalty")
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThanOrEqual(-2)
     * @Assert\LessThanOrEqual(2)
     */
    protected ?float $presencePenalty = 0;

    /**
     * If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same &#x60;seed&#x60; and parameters should return the same result.  Determinism is not guaranteed, and you should refer to the &#x60;system_fingerprint&#x60; response parameter to monitor changes in the backend.
     *
     * @var int|null
     * @SerializedName("seed")
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(-9223372036854775808)
     * @Assert\LessThanOrEqual(9223372036854775807)
     */
    protected ?int $seed = null;

    /**
     * @var CreateCompletionRequestStop|null
     * @SerializedName("stop")
     * @Assert\Type("OpenAPI\Server\Model\CreateCompletionRequestStop")
     * @Type("OpenAPI\Server\Model\CreateCompletionRequestStop")
     */
    protected ?CreateCompletionRequestStop $stop = null;

    /**
     * Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a &#x60;data: [DONE]&#x60; message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
     *
     * @var bool|null
     * @SerializedName("stream")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected ?bool $stream = false;

    /**
     * The suffix that comes after a completion of inserted text.  This parameter is only supported for &#x60;gpt-3.5-turbo-instruct&#x60;.
     *
     * @var string|null
     * @SerializedName("suffix")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $suffix = null;

    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both.
     *
     * @var float|null
     * @SerializedName("temperature")
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThanOrEqual(0)
     * @Assert\LessThanOrEqual(2)
     */
    protected ?float $temperature = 1;

    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both.
     *
     * @var float|null
     * @SerializedName("top_p")
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThanOrEqual(0)
     * @Assert\LessThanOrEqual(1)
     */
    protected ?float $topP = 1;

    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     *
     * @var string|null
     * @SerializedName("user")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $user = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->model = array_key_exists('model', $data) ? $data['model'] : $this->model;
            $this->prompt = array_key_exists('prompt', $data) ? $data['prompt'] : $this->prompt;
            $this->bestOf = array_key_exists('bestOf', $data) ? $data['bestOf'] : $this->bestOf;
            $this->echo = array_key_exists('echo', $data) ? $data['echo'] : $this->echo;
            $this->frequencyPenalty = array_key_exists('frequencyPenalty', $data) ? $data['frequencyPenalty'] : $this->frequencyPenalty;
            $this->logitBias = array_key_exists('logitBias', $data) ? $data['logitBias'] : $this->logitBias;
            $this->logprobs = array_key_exists('logprobs', $data) ? $data['logprobs'] : $this->logprobs;
            $this->maxTokens = array_key_exists('maxTokens', $data) ? $data['maxTokens'] : $this->maxTokens;
            $this->n = array_key_exists('n', $data) ? $data['n'] : $this->n;
            $this->presencePenalty = array_key_exists('presencePenalty', $data) ? $data['presencePenalty'] : $this->presencePenalty;
            $this->seed = array_key_exists('seed', $data) ? $data['seed'] : $this->seed;
            $this->stop = array_key_exists('stop', $data) ? $data['stop'] : $this->stop;
            $this->stream = array_key_exists('stream', $data) ? $data['stream'] : $this->stream;
            $this->suffix = array_key_exists('suffix', $data) ? $data['suffix'] : $this->suffix;
            $this->temperature = array_key_exists('temperature', $data) ? $data['temperature'] : $this->temperature;
            $this->topP = array_key_exists('topP', $data) ? $data['topP'] : $this->topP;
            $this->user = array_key_exists('user', $data) ? $data['user'] : $this->user;
        }
    }

    /**
     * Gets model.
     *
     * @return CreateCompletionRequestModel|null
     */
    public function getModel(): ?CreateCompletionRequestModel
    {
        return $this->model;
    }



    /**
     * Sets model.
     *
     * @param CreateCompletionRequestModel|null $model
     *
     * @return $this
     */
    public function setModel(?CreateCompletionRequestModel $model): self
    {
        $this->model = $model;

        return $this;
    }

    /**
     * Gets prompt.
     *
     * @return CreateCompletionRequestPrompt|null
     */
    public function getPrompt(): ?CreateCompletionRequestPrompt
    {
        return $this->prompt;
    }



    /**
     * Sets prompt.
     *
     * @param CreateCompletionRequestPrompt|null $prompt
     *
     * @return $this
     */
    public function setPrompt(?CreateCompletionRequestPrompt $prompt): self
    {
        $this->prompt = $prompt;

        return $this;
    }

    /**
     * Gets bestOf.
     *
     * @return int|null
     */
    public function getBestOf(): ?int
    {
        return $this->bestOf;
    }



    /**
     * Sets bestOf.
     *
     * @param int|null $bestOf  Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.  When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return â€“ `best_of` must be greater than `n`.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
     *
     * @return $this
     */
    public function setBestOf(?int $bestOf = null): self
    {
        $this->bestOf = $bestOf;

        return $this;
    }

    /**
     * Gets echo.
     *
     * @return bool|null
     */
    public function isEcho(): ?bool
    {
        return $this->echo;
    }



    /**
     * Sets echo.
     *
     * @param bool|null $echo  Echo back the prompt in addition to the completion
     *
     * @return $this
     */
    public function setEcho(?bool $echo = null): self
    {
        $this->echo = $echo;

        return $this;
    }

    /**
     * Gets frequencyPenalty.
     *
     * @return float|null
     */
    public function getFrequencyPenalty(): ?float
    {
        return $this->frequencyPenalty;
    }



    /**
     * Sets frequencyPenalty.
     *
     * @param float|null $frequencyPenalty  Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
     *
     * @return $this
     */
    public function setFrequencyPenalty(?float $frequencyPenalty = null): self
    {
        $this->frequencyPenalty = $frequencyPenalty;

        return $this;
    }

    /**
     * Gets logitBias.
     *
     * @return int[]|null
     */
    public function getLogitBias(): ?array
    {
        return $this->logitBias;
    }



    /**
     * Sets logitBias.
     *
     * @param int[]|null $logitBias  Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated.
     *
     * @return $this
     */
    public function setLogitBias(?array $logitBias = null): self
    {
        $this->logitBias = $logitBias;

        return $this;
    }

    /**
     * Gets logprobs.
     *
     * @return int|null
     */
    public function getLogprobs(): ?int
    {
        return $this->logprobs;
    }



    /**
     * Sets logprobs.
     *
     * @param int|null $logprobs  Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5.
     *
     * @return $this
     */
    public function setLogprobs(?int $logprobs = null): self
    {
        $this->logprobs = $logprobs;

        return $this;
    }

    /**
     * Gets maxTokens.
     *
     * @return int|null
     */
    public function getMaxTokens(): ?int
    {
        return $this->maxTokens;
    }



    /**
     * Sets maxTokens.
     *
     * @param int|null $maxTokens  The maximum number of [tokens](/tokenizer) that can be generated in the completion.  The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
     *
     * @return $this
     */
    public function setMaxTokens(?int $maxTokens = null): self
    {
        $this->maxTokens = $maxTokens;

        return $this;
    }

    /**
     * Gets n.
     *
     * @return int|null
     */
    public function getN(): ?int
    {
        return $this->n;
    }



    /**
     * Sets n.
     *
     * @param int|null $n  How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
     *
     * @return $this
     */
    public function setN(?int $n = null): self
    {
        $this->n = $n;

        return $this;
    }

    /**
     * Gets presencePenalty.
     *
     * @return float|null
     */
    public function getPresencePenalty(): ?float
    {
        return $this->presencePenalty;
    }



    /**
     * Sets presencePenalty.
     *
     * @param float|null $presencePenalty  Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
     *
     * @return $this
     */
    public function setPresencePenalty(?float $presencePenalty = null): self
    {
        $this->presencePenalty = $presencePenalty;

        return $this;
    }

    /**
     * Gets seed.
     *
     * @return int|null
     */
    public function getSeed(): ?int
    {
        return $this->seed;
    }



    /**
     * Sets seed.
     *
     * @param int|null $seed  If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.  Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
     *
     * @return $this
     */
    public function setSeed(?int $seed = null): self
    {
        $this->seed = $seed;

        return $this;
    }

    /**
     * Gets stop.
     *
     * @return CreateCompletionRequestStop|null
     */
    public function getStop(): ?CreateCompletionRequestStop
    {
        return $this->stop;
    }



    /**
     * Sets stop.
     *
     * @param CreateCompletionRequestStop|null $stop
     *
     * @return $this
     */
    public function setStop(?CreateCompletionRequestStop $stop = null): self
    {
        $this->stop = $stop;

        return $this;
    }

    /**
     * Gets stream.
     *
     * @return bool|null
     */
    public function isStream(): ?bool
    {
        return $this->stream;
    }



    /**
     * Sets stream.
     *
     * @param bool|null $stream  Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
     *
     * @return $this
     */
    public function setStream(?bool $stream = null): self
    {
        $this->stream = $stream;

        return $this;
    }

    /**
     * Gets suffix.
     *
     * @return string|null
     */
    public function getSuffix(): ?string
    {
        return $this->suffix;
    }



    /**
     * Sets suffix.
     *
     * @param string|null $suffix  The suffix that comes after a completion of inserted text.  This parameter is only supported for `gpt-3.5-turbo-instruct`.
     *
     * @return $this
     */
    public function setSuffix(?string $suffix = null): self
    {
        $this->suffix = $suffix;

        return $this;
    }

    /**
     * Gets temperature.
     *
     * @return float|null
     */
    public function getTemperature(): ?float
    {
        return $this->temperature;
    }



    /**
     * Sets temperature.
     *
     * @param float|null $temperature  What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.
     *
     * @return $this
     */
    public function setTemperature(?float $temperature = null): self
    {
        $this->temperature = $temperature;

        return $this;
    }

    /**
     * Gets topP.
     *
     * @return float|null
     */
    public function getTopP(): ?float
    {
        return $this->topP;
    }



    /**
     * Sets topP.
     *
     * @param float|null $topP  An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.
     *
     * @return $this
     */
    public function setTopP(?float $topP = null): self
    {
        $this->topP = $topP;

        return $this;
    }

    /**
     * Gets user.
     *
     * @return string|null
     */
    public function getUser(): ?string
    {
        return $this->user;
    }



    /**
     * Sets user.
     *
     * @param string|null $user  A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     *
     * @return $this
     */
    public function setUser(?string $user = null): self
    {
        $this->user = $user;

        return $this;
    }
}


