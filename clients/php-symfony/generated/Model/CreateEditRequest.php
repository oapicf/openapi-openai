<?php
/**
 * CreateEditRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CreateEditRequest model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CreateEditRequest 
{
        /**
     * @var CreateEditRequestModel|null
     * @SerializedName("model")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("OpenAPI\Server\Model\CreateEditRequestModel")
     * @Type("OpenAPI\Server\Model\CreateEditRequestModel")
     */
    protected ?CreateEditRequestModel $model = null;

    /**
     * The input text to use as a starting point for the edit.
     *
     * @var string|null
     * @SerializedName("input")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $input = '';

    /**
     * The instruction that tells the model how to edit the prompt.
     *
     * @var string|null
     * @SerializedName("instruction")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $instruction = null;

    /**
     * How many edits to generate for the input and instruction.
     *
     * @var int|null
     * @SerializedName("n")
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(1)
     * @Assert\LessThanOrEqual(20)
     */
    protected ?int $n = 1;

    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both.
     *
     * @var float|null
     * @SerializedName("temperature")
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThanOrEqual(0)
     * @Assert\LessThanOrEqual(2)
     */
    protected ?float $temperature = 1;

    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both.
     *
     * @var float|null
     * @SerializedName("top_p")
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThanOrEqual(0)
     * @Assert\LessThanOrEqual(1)
     */
    protected ?float $topP = 1;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->model = array_key_exists('model', $data) ? $data['model'] : $this->model;
            $this->input = array_key_exists('input', $data) ? $data['input'] : $this->input;
            $this->instruction = array_key_exists('instruction', $data) ? $data['instruction'] : $this->instruction;
            $this->n = array_key_exists('n', $data) ? $data['n'] : $this->n;
            $this->temperature = array_key_exists('temperature', $data) ? $data['temperature'] : $this->temperature;
            $this->topP = array_key_exists('topP', $data) ? $data['topP'] : $this->topP;
        }
    }

    /**
     * Gets model.
     *
     * @return CreateEditRequestModel|null
     */
    public function getModel(): ?CreateEditRequestModel
    {
        return $this->model;
    }



    /**
     * Sets model.
     *
     * @param CreateEditRequestModel|null $model
     *
     * @return $this
     */
    public function setModel(?CreateEditRequestModel $model): self
    {
        $this->model = $model;

        return $this;
    }

    /**
     * Gets input.
     *
     * @return string|null
     */
    public function getInput(): ?string
    {
        return $this->input;
    }



    /**
     * Sets input.
     *
     * @param string|null $input  The input text to use as a starting point for the edit.
     *
     * @return $this
     */
    public function setInput(?string $input = null): self
    {
        $this->input = $input;

        return $this;
    }

    /**
     * Gets instruction.
     *
     * @return string|null
     */
    public function getInstruction(): ?string
    {
        return $this->instruction;
    }



    /**
     * Sets instruction.
     *
     * @param string|null $instruction  The instruction that tells the model how to edit the prompt.
     *
     * @return $this
     */
    public function setInstruction(?string $instruction): self
    {
        $this->instruction = $instruction;

        return $this;
    }

    /**
     * Gets n.
     *
     * @return int|null
     */
    public function getN(): ?int
    {
        return $this->n;
    }



    /**
     * Sets n.
     *
     * @param int|null $n  How many edits to generate for the input and instruction.
     *
     * @return $this
     */
    public function setN(?int $n = null): self
    {
        $this->n = $n;

        return $this;
    }

    /**
     * Gets temperature.
     *
     * @return float|null
     */
    public function getTemperature(): ?float
    {
        return $this->temperature;
    }



    /**
     * Sets temperature.
     *
     * @param float|null $temperature  What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.
     *
     * @return $this
     */
    public function setTemperature(?float $temperature = null): self
    {
        $this->temperature = $temperature;

        return $this;
    }

    /**
     * Gets topP.
     *
     * @return float|null
     */
    public function getTopP(): ?float
    {
        return $this->topP;
    }



    /**
     * Sets topP.
     *
     * @param float|null $topP  An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.
     *
     * @return $this
     */
    public function setTopP(?float $topP = null): self
    {
        $this->topP = $topP;

        return $this;
    }
}


