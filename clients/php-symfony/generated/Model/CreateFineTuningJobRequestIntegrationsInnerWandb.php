<?php
/**
 * CreateFineTuningJobRequestIntegrationsInnerWandb
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CreateFineTuningJobRequestIntegrationsInnerWandb model.
 *
 * The settings for your integration with Weights and Biases. This payload specifies the project that metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags to your run, and set a default entity (team, username, etc) to be associated with your run.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CreateFineTuningJobRequestIntegrationsInnerWandb 
{
        /**
     * The name of the project that the new run will be created under.
     *
     * @var string|null
     * @SerializedName("project")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $project = null;

    /**
     * A display name to set for the run. If not set, we will use the Job ID as the name.
     *
     * @var string|null
     * @SerializedName("name")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $name = null;

    /**
     * The entity to use for the run. This allows you to set the team or username of the WandB user that you would like associated with the run. If not set, the default entity for the registered WandB API key is used.
     *
     * @var string|null
     * @SerializedName("entity")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $entity = null;

    /**
     * A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some default tags are generated by OpenAI: \&quot;openai/finetune\&quot;, \&quot;openai/{base-model}\&quot;, \&quot;openai/{ftjob-abcdef}\&quot;.
     *
     * @var string[]|null
     * @SerializedName("tags")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $tags = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->project = array_key_exists('project', $data) ? $data['project'] : $this->project;
            $this->name = array_key_exists('name', $data) ? $data['name'] : $this->name;
            $this->entity = array_key_exists('entity', $data) ? $data['entity'] : $this->entity;
            $this->tags = array_key_exists('tags', $data) ? $data['tags'] : $this->tags;
        }
    }

    /**
     * Gets project.
     *
     * @return string|null
     */
    public function getProject(): ?string
    {
        return $this->project;
    }

    /**
    * Sets project.
    *
    * @param string|null $project  The name of the project that the new run will be created under.
    *
    * @return $this
    */
    public function setProject(?string $project): self
    {
        $this->project = $project;

        return $this;
    }




    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
    * Sets name.
    *
    * @param string|null $name  A display name to set for the run. If not set, we will use the Job ID as the name.
    *
    * @return $this
    */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }




    /**
     * Gets entity.
     *
     * @return string|null
     */
    public function getEntity(): ?string
    {
        return $this->entity;
    }

    /**
    * Sets entity.
    *
    * @param string|null $entity  The entity to use for the run. This allows you to set the team or username of the WandB user that you would like associated with the run. If not set, the default entity for the registered WandB API key is used.
    *
    * @return $this
    */
    public function setEntity(?string $entity = null): self
    {
        $this->entity = $entity;

        return $this;
    }




    /**
     * Gets tags.
     *
     * @return string[]|null
     */
    public function getTags(): ?array
    {
        return $this->tags;
    }

    /**
    * Sets tags.
    *
    * @param string[]|null $tags  A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some default tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".
    *
    * @return $this
    */
    public function setTags(?array $tags = null): self
    {
        $this->tags = $tags;

        return $this;
    }



}


