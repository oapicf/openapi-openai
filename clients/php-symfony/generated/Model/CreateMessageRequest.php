<?php
/**
 * CreateMessageRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CreateMessageRequest model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CreateMessageRequest 
{
        /**
     * The role of the entity that is creating the message. Allowed values include: - &#x60;user&#x60;: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages. - &#x60;assistant&#x60;: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.
     *
     * @var string|null
     * @SerializedName("role")
     * @Assert\NotNull()
     * @Assert\Choice({ "user", "assistant" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $role = null;

    /**
     * The content of the message.
     *
     * @var string|null
     * @SerializedName("content")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 256000
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $content = null;

    /**
     * A list of [File](/docs/api-reference/files) IDs that the message should use. There can be a maximum of 10 files attached to a message. Useful for tools like &#x60;retrieval&#x60; and &#x60;code_interpreter&#x60; that can access and use files.
     *
     * @var string[]|null
     * @SerializedName("file_ids")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 10
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected ?array $fileIds = null;

    /**
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
     *
     * @var array|null
     * @SerializedName("metadata")
     * @Assert\Type("array")
     * @Type("array")
     */
    protected ?array $metadata = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->role = array_key_exists('role', $data) ? $data['role'] : $this->role;
            $this->content = array_key_exists('content', $data) ? $data['content'] : $this->content;
            $this->fileIds = array_key_exists('fileIds', $data) ? $data['fileIds'] : $this->fileIds;
            $this->metadata = array_key_exists('metadata', $data) ? $data['metadata'] : $this->metadata;
        }
    }

    /**
     * Gets role.
     *
     * @return string|null
     */
    public function getRole(): ?string
    {
        return $this->role;
    }



    /**
     * Sets role.
     *
     * @param string|null $role  The role of the entity that is creating the message. Allowed values include: - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages. - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.
     *
     * @return $this
     */
    public function setRole(?string $role): self
    {
        $this->role = $role;

        return $this;
    }

    /**
     * Gets content.
     *
     * @return string|null
     */
    public function getContent(): ?string
    {
        return $this->content;
    }



    /**
     * Sets content.
     *
     * @param string|null $content  The content of the message.
     *
     * @return $this
     */
    public function setContent(?string $content): self
    {
        $this->content = $content;

        return $this;
    }

    /**
     * Gets fileIds.
     *
     * @return string[]|null
     */
    public function getFileIds(): ?array
    {
        return $this->fileIds;
    }



    /**
     * Sets fileIds.
     *
     * @param string[]|null $fileIds  A list of [File](/docs/api-reference/files) IDs that the message should use. There can be a maximum of 10 files attached to a message. Useful for tools like `retrieval` and `code_interpreter` that can access and use files.
     *
     * @return $this
     */
    public function setFileIds(?array $fileIds = null): self
    {
        $this->fileIds = $fileIds;

        return $this;
    }

    /**
     * Gets metadata.
     *
     * @return array|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }



    /**
     * Sets metadata.
     *
     * @param array|null $metadata  Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
     *
     * @return $this
     */
    public function setMetadata(?array $metadata = null): self
    {
        $this->metadata = $metadata;

        return $this;
    }
}


