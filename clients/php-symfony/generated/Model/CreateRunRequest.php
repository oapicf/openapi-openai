<?php
/**
 * CreateRunRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CreateRunRequest model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CreateRunRequest 
{
        /**
     * The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
     *
     * @var string|null
     * @SerializedName("assistant_id")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $assistantId = null;

    /**
     * @var CreateRunRequestModel|null
     * @SerializedName("model")
     * @Assert\Type("OpenAPI\Server\Model\CreateRunRequestModel")
     * @Type("OpenAPI\Server\Model\CreateRunRequestModel")
     */
    protected ?CreateRunRequestModel $model = null;

    /**
     * Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
     *
     * @var string|null
     * @SerializedName("instructions")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $instructions = null;

    /**
     * Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
     *
     * @var string|null
     * @SerializedName("additional_instructions")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $additionalInstructions = null;

    /**
     * Adds additional messages to the thread before creating the run.
     *
     * @var CreateMessageRequest[]|null
     * @SerializedName("additional_messages")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\CreateMessageRequest")
     * })
     * @Type("array<OpenAPI\Server\Model\CreateMessageRequest>")
     */
    protected ?array $additionalMessages = null;

    /**
     * Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
     *
     * @var AssistantObjectToolsInner[]|null
     * @SerializedName("tools")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\AssistantObjectToolsInner")
     * })
     * @Type("array<OpenAPI\Server\Model\AssistantObjectToolsInner>")
     * @Assert\Count(
     *   max = 20
     * )
     */
    protected ?array $tools = null;

    /**
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
     *
     * @var array|null
     * @SerializedName("metadata")
     * @Assert\Type("array")
     * @Type("array")
     */
    protected ?array $metadata = null;

    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     *
     * @var float|null
     * @SerializedName("temperature")
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThanOrEqual(0)
     * @Assert\LessThanOrEqual(2)
     */
    protected ?float $temperature = 1;

    /**
     * If &#x60;true&#x60;, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a &#x60;data: [DONE]&#x60; message.
     *
     * @var bool|null
     * @SerializedName("stream")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected ?bool $stream = null;

    /**
     * The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status &#x60;complete&#x60;. See &#x60;incomplete_details&#x60; for more info.
     *
     * @var int|null
     * @SerializedName("max_prompt_tokens")
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(256)
     */
    protected ?int $maxPromptTokens = null;

    /**
     * The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status &#x60;complete&#x60;. See &#x60;incomplete_details&#x60; for more info.
     *
     * @var int|null
     * @SerializedName("max_completion_tokens")
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(256)
     */
    protected ?int $maxCompletionTokens = null;

    /**
     * @var TruncationObject|null
     * @SerializedName("truncation_strategy")
     * @Assert\Type("OpenAPI\Server\Model\TruncationObject")
     * @Type("OpenAPI\Server\Model\TruncationObject")
     */
    protected ?TruncationObject $truncationStrategy = null;

    /**
     * @var AssistantsApiToolChoiceOption|null
     * @SerializedName("tool_choice")
     * @Assert\Type("OpenAPI\Server\Model\AssistantsApiToolChoiceOption")
     * @Type("OpenAPI\Server\Model\AssistantsApiToolChoiceOption")
     */
    protected ?AssistantsApiToolChoiceOption $toolChoice = null;

    /**
     * @var AssistantsApiResponseFormatOption|null
     * @SerializedName("response_format")
     * @Assert\Type("OpenAPI\Server\Model\AssistantsApiResponseFormatOption")
     * @Type("OpenAPI\Server\Model\AssistantsApiResponseFormatOption")
     */
    protected ?AssistantsApiResponseFormatOption $responseFormat = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->assistantId = array_key_exists('assistantId', $data) ? $data['assistantId'] : $this->assistantId;
            $this->model = array_key_exists('model', $data) ? $data['model'] : $this->model;
            $this->instructions = array_key_exists('instructions', $data) ? $data['instructions'] : $this->instructions;
            $this->additionalInstructions = array_key_exists('additionalInstructions', $data) ? $data['additionalInstructions'] : $this->additionalInstructions;
            $this->additionalMessages = array_key_exists('additionalMessages', $data) ? $data['additionalMessages'] : $this->additionalMessages;
            $this->tools = array_key_exists('tools', $data) ? $data['tools'] : $this->tools;
            $this->metadata = array_key_exists('metadata', $data) ? $data['metadata'] : $this->metadata;
            $this->temperature = array_key_exists('temperature', $data) ? $data['temperature'] : $this->temperature;
            $this->stream = array_key_exists('stream', $data) ? $data['stream'] : $this->stream;
            $this->maxPromptTokens = array_key_exists('maxPromptTokens', $data) ? $data['maxPromptTokens'] : $this->maxPromptTokens;
            $this->maxCompletionTokens = array_key_exists('maxCompletionTokens', $data) ? $data['maxCompletionTokens'] : $this->maxCompletionTokens;
            $this->truncationStrategy = array_key_exists('truncationStrategy', $data) ? $data['truncationStrategy'] : $this->truncationStrategy;
            $this->toolChoice = array_key_exists('toolChoice', $data) ? $data['toolChoice'] : $this->toolChoice;
            $this->responseFormat = array_key_exists('responseFormat', $data) ? $data['responseFormat'] : $this->responseFormat;
        }
    }

    /**
     * Gets assistantId.
     *
     * @return string|null
     */
    public function getAssistantId(): ?string
    {
        return $this->assistantId;
    }



    /**
     * Sets assistantId.
     *
     * @param string|null $assistantId  The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
     *
     * @return $this
     */
    public function setAssistantId(?string $assistantId): self
    {
        $this->assistantId = $assistantId;

        return $this;
    }

    /**
     * Gets model.
     *
     * @return CreateRunRequestModel|null
     */
    public function getModel(): ?CreateRunRequestModel
    {
        return $this->model;
    }



    /**
     * Sets model.
     *
     * @param CreateRunRequestModel|null $model
     *
     * @return $this
     */
    public function setModel(?CreateRunRequestModel $model = null): self
    {
        $this->model = $model;

        return $this;
    }

    /**
     * Gets instructions.
     *
     * @return string|null
     */
    public function getInstructions(): ?string
    {
        return $this->instructions;
    }



    /**
     * Sets instructions.
     *
     * @param string|null $instructions  Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
     *
     * @return $this
     */
    public function setInstructions(?string $instructions = null): self
    {
        $this->instructions = $instructions;

        return $this;
    }

    /**
     * Gets additionalInstructions.
     *
     * @return string|null
     */
    public function getAdditionalInstructions(): ?string
    {
        return $this->additionalInstructions;
    }



    /**
     * Sets additionalInstructions.
     *
     * @param string|null $additionalInstructions  Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
     *
     * @return $this
     */
    public function setAdditionalInstructions(?string $additionalInstructions = null): self
    {
        $this->additionalInstructions = $additionalInstructions;

        return $this;
    }

    /**
     * Gets additionalMessages.
     *
     * @return CreateMessageRequest[]|null
     */
    public function getAdditionalMessages(): ?array
    {
        return $this->additionalMessages;
    }



    /**
     * Sets additionalMessages.
     *
     * @param CreateMessageRequest[]|null $additionalMessages  Adds additional messages to the thread before creating the run.
     *
     * @return $this
     */
    public function setAdditionalMessages(?array $additionalMessages = null): self
    {
        $this->additionalMessages = $additionalMessages;

        return $this;
    }

    /**
     * Gets tools.
     *
     * @return AssistantObjectToolsInner[]|null
     */
    public function getTools(): ?array
    {
        return $this->tools;
    }



    /**
     * Sets tools.
     *
     * @param AssistantObjectToolsInner[]|null $tools  Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
     *
     * @return $this
     */
    public function setTools(?array $tools = null): self
    {
        $this->tools = $tools;

        return $this;
    }

    /**
     * Gets metadata.
     *
     * @return array|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }



    /**
     * Sets metadata.
     *
     * @param array|null $metadata  Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
     *
     * @return $this
     */
    public function setMetadata(?array $metadata = null): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * Gets temperature.
     *
     * @return float|null
     */
    public function getTemperature(): ?float
    {
        return $this->temperature;
    }



    /**
     * Sets temperature.
     *
     * @param float|null $temperature  What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     *
     * @return $this
     */
    public function setTemperature(?float $temperature = null): self
    {
        $this->temperature = $temperature;

        return $this;
    }

    /**
     * Gets stream.
     *
     * @return bool|null
     */
    public function isStream(): ?bool
    {
        return $this->stream;
    }



    /**
     * Sets stream.
     *
     * @param bool|null $stream  If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
     *
     * @return $this
     */
    public function setStream(?bool $stream = null): self
    {
        $this->stream = $stream;

        return $this;
    }

    /**
     * Gets maxPromptTokens.
     *
     * @return int|null
     */
    public function getMaxPromptTokens(): ?int
    {
        return $this->maxPromptTokens;
    }



    /**
     * Sets maxPromptTokens.
     *
     * @param int|null $maxPromptTokens  The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `complete`. See `incomplete_details` for more info.
     *
     * @return $this
     */
    public function setMaxPromptTokens(?int $maxPromptTokens = null): self
    {
        $this->maxPromptTokens = $maxPromptTokens;

        return $this;
    }

    /**
     * Gets maxCompletionTokens.
     *
     * @return int|null
     */
    public function getMaxCompletionTokens(): ?int
    {
        return $this->maxCompletionTokens;
    }



    /**
     * Sets maxCompletionTokens.
     *
     * @param int|null $maxCompletionTokens  The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `complete`. See `incomplete_details` for more info.
     *
     * @return $this
     */
    public function setMaxCompletionTokens(?int $maxCompletionTokens = null): self
    {
        $this->maxCompletionTokens = $maxCompletionTokens;

        return $this;
    }

    /**
     * Gets truncationStrategy.
     *
     * @return TruncationObject|null
     */
    public function getTruncationStrategy(): ?TruncationObject
    {
        return $this->truncationStrategy;
    }



    /**
     * Sets truncationStrategy.
     *
     * @param TruncationObject|null $truncationStrategy
     *
     * @return $this
     */
    public function setTruncationStrategy(?TruncationObject $truncationStrategy = null): self
    {
        $this->truncationStrategy = $truncationStrategy;

        return $this;
    }

    /**
     * Gets toolChoice.
     *
     * @return AssistantsApiToolChoiceOption|null
     */
    public function getToolChoice(): ?AssistantsApiToolChoiceOption
    {
        return $this->toolChoice;
    }



    /**
     * Sets toolChoice.
     *
     * @param AssistantsApiToolChoiceOption|null $toolChoice
     *
     * @return $this
     */
    public function setToolChoice(?AssistantsApiToolChoiceOption $toolChoice = null): self
    {
        $this->toolChoice = $toolChoice;

        return $this;
    }

    /**
     * Gets responseFormat.
     *
     * @return AssistantsApiResponseFormatOption|null
     */
    public function getResponseFormat(): ?AssistantsApiResponseFormatOption
    {
        return $this->responseFormat;
    }



    /**
     * Sets responseFormat.
     *
     * @param AssistantsApiResponseFormatOption|null $responseFormat
     *
     * @return $this
     */
    public function setResponseFormat(?AssistantsApiResponseFormatOption $responseFormat = null): self
    {
        $this->responseFormat = $responseFormat;

        return $this;
    }
}


