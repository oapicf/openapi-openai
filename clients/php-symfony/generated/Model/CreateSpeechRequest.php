<?php
/**
 * CreateSpeechRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CreateSpeechRequest model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CreateSpeechRequest 
{
        /**
     * @var CreateSpeechRequestModel|null
     * @SerializedName("model")
     * @Type("OpenAPI\Server\Model\CreateSpeechRequestModel")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\Type("OpenAPI\Server\Model\CreateSpeechRequestModel")]
    protected ?CreateSpeechRequestModel $model = null;

    /**
     * The text to generate audio for. The maximum length is 4096 characters.
     *
     * @var string|null
     * @SerializedName("input")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Length(max: 4096)]
    protected ?string $input = null;

    /**
     * The voice to use when generating the audio. Supported voices are &#x60;alloy&#x60;, &#x60;echo&#x60;, &#x60;fable&#x60;, &#x60;onyx&#x60;, &#x60;nova&#x60;, and &#x60;shimmer&#x60;. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
     *
     * @var string|null
     * @SerializedName("voice")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Choice(["alloy", "echo", "fable", "onyx", "nova", "shimmer"])]
    #[Assert\Type("string")]
    protected ?string $voice = null;

    /**
     * The format to audio in. Supported formats are &#x60;mp3&#x60;, &#x60;opus&#x60;, &#x60;aac&#x60;, &#x60;flac&#x60;, &#x60;wav&#x60;, and &#x60;pcm&#x60;.
     *
     * @var string|null
     * @SerializedName("response_format")
     * @Type("string")
    */
    #[Assert\Choice(["mp3", "opus", "aac", "flac", "wav", "pcm"])]
    #[Assert\Type("string")]
    protected ?string $responseFormat = 'mp3';

    /**
     * The speed of the generated audio. Select a value from &#x60;0.25&#x60; to &#x60;4.0&#x60;. &#x60;1.0&#x60; is the default.
     *
     * @var float|null
     * @SerializedName("speed")
     * @Type("float")
    */
    #[Assert\Type("float")]
    #[Assert\GreaterThanOrEqual(0.25)]
    #[Assert\LessThanOrEqual(4.0)]
    protected ?float $speed = 1.0;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->model = array_key_exists('model', $data) ? $data['model'] : $this->model;
            $this->input = array_key_exists('input', $data) ? $data['input'] : $this->input;
            $this->voice = array_key_exists('voice', $data) ? $data['voice'] : $this->voice;
            $this->responseFormat = array_key_exists('responseFormat', $data) ? $data['responseFormat'] : $this->responseFormat;
            $this->speed = array_key_exists('speed', $data) ? $data['speed'] : $this->speed;
        }
    }

    /**
     * Gets model.
     *
     * @return CreateSpeechRequestModel|null
     */
    public function getModel(): ?CreateSpeechRequestModel
    {
        return $this->model;
    }

    /**
    * Sets model.
    *
    * @param CreateSpeechRequestModel|null $model
    *
    * @return $this
    */
    public function setModel(?CreateSpeechRequestModel $model): self
    {
        $this->model = $model;

        return $this;
    }




    /**
     * Gets input.
     *
     * @return string|null
     */
    public function getInput(): ?string
    {
        return $this->input;
    }

    /**
    * Sets input.
    *
    * @param string|null $input  The text to generate audio for. The maximum length is 4096 characters.
    *
    * @return $this
    */
    public function setInput(?string $input): self
    {
        $this->input = $input;

        return $this;
    }




    /**
     * Gets voice.
     *
     * @return string|null
     */
    public function getVoice(): ?string
    {
        return $this->voice;
    }

    /**
    * Sets voice.
    *
    * @param string|null $voice  The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
    *
    * @return $this
    */
    public function setVoice(?string $voice): self
    {
        $this->voice = $voice;

        return $this;
    }




    /**
     * Gets responseFormat.
     *
     * @return string|null
     */
    public function getResponseFormat(): ?string
    {
        return $this->responseFormat;
    }

    /**
    * Sets responseFormat.
    *
    * @param string|null $responseFormat  The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
    *
    * @return $this
    */
    public function setResponseFormat(?string $responseFormat = null): self
    {
        $this->responseFormat = $responseFormat;

        return $this;
    }




    /**
     * Gets speed.
     *
     * @return float|null
     */
    public function getSpeed(): ?float
    {
        return $this->speed;
    }

    /**
    * Sets speed.
    *
    * @param float|null $speed  The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
    *
    * @return $this
    */
    public function setSpeed(?float $speed = null): self
    {
        $this->speed = $speed;

        return $this;
    }



}


