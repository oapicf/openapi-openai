<?php
/**
 * Embedding
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the Embedding model.
 *
 * Represents an embedding vector returned by embedding endpoint.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class Embedding 
{
        /**
     * The index of the embedding in the list of embeddings.
     *
     * @var int|null
     * @SerializedName("index")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $index = null;

    /**
     * The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).
     *
     * @var float[]|null
     * @SerializedName("embedding")
     * @Assert\NotNull()
     * @Assert\All({
     *   @Assert\Type("float")
     * })
     * @Type("array<float>")
     */
    protected ?array $embedding = null;

    /**
     * The object type, which is always \&quot;embedding\&quot;.
     *
     * @var string|null
     * @SerializedName("object")
     * @Assert\NotNull()
     * @Assert\Choice({ "embedding" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $object = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->index = array_key_exists('index', $data) ? $data['index'] : $this->index;
            $this->embedding = array_key_exists('embedding', $data) ? $data['embedding'] : $this->embedding;
            $this->object = array_key_exists('object', $data) ? $data['object'] : $this->object;
        }
    }

    /**
     * Gets index.
     *
     * @return int|null
     */
    public function getIndex(): ?int
    {
        return $this->index;
    }



    /**
     * Sets index.
     *
     * @param int|null $index  The index of the embedding in the list of embeddings.
     *
     * @return $this
     */
    public function setIndex(?int $index): self
    {
        $this->index = $index;

        return $this;
    }

    /**
     * Gets embedding.
     *
     * @return float[]|null
     */
    public function getEmbedding(): ?array
    {
        return $this->embedding;
    }



    /**
     * Sets embedding.
     *
     * @param float[]|null $embedding  The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).
     *
     * @return $this
     */
    public function setEmbedding(?array $embedding): self
    {
        $this->embedding = $embedding;

        return $this;
    }

    /**
     * Gets object.
     *
     * @return string|null
     */
    public function getObject(): ?string
    {
        return $this->object;
    }



    /**
     * Sets object.
     *
     * @param string|null $object  The object type, which is always \"embedding\".
     *
     * @return $this
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }
}


