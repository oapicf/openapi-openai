<?php
/**
 * RunObject
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the RunObject model.
 *
 * Represents an execution run on a [thread](/docs/api-reference/threads).
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class RunObject 
{
        /**
     * The identifier, which can be referenced in API endpoints.
     *
     * @var string|null
     * @SerializedName("id")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $id = null;

    /**
     * The object type, which is always &#x60;thread.run&#x60;.
     *
     * @var string|null
     * @SerializedName("object")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Choice(["thread.run"])]
    #[Assert\Type("string")]
    protected ?string $object = null;

    /**
     * The Unix timestamp (in seconds) for when the run was created.
     *
     * @var int|null
     * @SerializedName("created_at")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $createdAt = null;

    /**
     * The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
     *
     * @var string|null
     * @SerializedName("thread_id")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $threadId = null;

    /**
     * The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
     *
     * @var string|null
     * @SerializedName("assistant_id")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $assistantId = null;

    /**
     * The status of the run, which can be either &#x60;queued&#x60;, &#x60;in_progress&#x60;, &#x60;requires_action&#x60;, &#x60;cancelling&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.
     *
     * @var string|null
     * @SerializedName("status")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Choice(["queued", "in_progress", "requires_action", "cancelling", "cancelled", "failed", "completed", "expired"])]
    #[Assert\Type("string")]
    protected ?string $status = null;

    /**
     * @var RunObjectRequiredAction|null
     * @SerializedName("required_action")
     * @Type("OpenAPI\Server\Model\RunObjectRequiredAction")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\Type("OpenAPI\Server\Model\RunObjectRequiredAction")]
    protected ?RunObjectRequiredAction $requiredAction = null;

    /**
     * @var RunObjectLastError|null
     * @SerializedName("last_error")
     * @Type("OpenAPI\Server\Model\RunObjectLastError")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\Type("OpenAPI\Server\Model\RunObjectLastError")]
    protected ?RunObjectLastError $lastError = null;

    /**
     * The Unix timestamp (in seconds) for when the run will expire.
     *
     * @var int|null
     * @SerializedName("expires_at")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $expiresAt = null;

    /**
     * The Unix timestamp (in seconds) for when the run was started.
     *
     * @var int|null
     * @SerializedName("started_at")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $startedAt = null;

    /**
     * The Unix timestamp (in seconds) for when the run was cancelled.
     *
     * @var int|null
     * @SerializedName("cancelled_at")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $cancelledAt = null;

    /**
     * The Unix timestamp (in seconds) for when the run failed.
     *
     * @var int|null
     * @SerializedName("failed_at")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $failedAt = null;

    /**
     * The Unix timestamp (in seconds) for when the run was completed.
     *
     * @var int|null
     * @SerializedName("completed_at")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $completedAt = null;

    /**
     * @var RunObjectIncompleteDetails|null
     * @SerializedName("incomplete_details")
     * @Type("OpenAPI\Server\Model\RunObjectIncompleteDetails")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\Type("OpenAPI\Server\Model\RunObjectIncompleteDetails")]
    protected ?RunObjectIncompleteDetails $incompleteDetails = null;

    /**
     * The model that the [assistant](/docs/api-reference/assistants) used for this run.
     *
     * @var string|null
     * @SerializedName("model")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $model = null;

    /**
     * The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
     *
     * @var string|null
     * @SerializedName("instructions")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $instructions = null;

    /**
     * The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
     *
     * @var AssistantObjectToolsInner[]|null
     * @SerializedName("tools")
     * @Type("array<OpenAPI\Server\Model\AssistantObjectToolsInner>")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\AssistantObjectToolsInner"),
    ])]
    #[Assert\Count(max: 20)]
    protected ?array $tools = null;

    /**
     * The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
     *
     * @var string[]|null
     * @SerializedName("file_ids")
     * @Type("array<string>")
    */
    #[Assert\NotNull]
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $fileIds = null;

    /**
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
     *
     * @var array|null
     * @SerializedName("metadata")
     * @Type("array")
    */
    #[Assert\NotNull]
    #[Assert\Type("array")]
    protected ?array $metadata = null;

    /**
     * @var RunCompletionUsage|null
     * @SerializedName("usage")
     * @Type("OpenAPI\Server\Model\RunCompletionUsage")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\Type("OpenAPI\Server\Model\RunCompletionUsage")]
    protected ?RunCompletionUsage $usage = null;

    /**
     * The sampling temperature used for this run. If not set, defaults to 1.
     *
     * @var float|null
     * @SerializedName("temperature")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $temperature = null;

    /**
     * The maximum number of prompt tokens specified to have been used over the course of the run.
     *
     * @var int|null
     * @SerializedName("max_prompt_tokens")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    #[Assert\GreaterThanOrEqual(256)]
    protected ?int $maxPromptTokens = null;

    /**
     * The maximum number of completion tokens specified to have been used over the course of the run.
     *
     * @var int|null
     * @SerializedName("max_completion_tokens")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    #[Assert\GreaterThanOrEqual(256)]
    protected ?int $maxCompletionTokens = null;

    /**
     * @var TruncationObject|null
     * @SerializedName("truncation_strategy")
     * @Type("OpenAPI\Server\Model\TruncationObject")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\Type("OpenAPI\Server\Model\TruncationObject")]
    protected ?TruncationObject $truncationStrategy = null;

    /**
     * @var AssistantsApiToolChoiceOption|null
     * @SerializedName("tool_choice")
     * @Type("OpenAPI\Server\Model\AssistantsApiToolChoiceOption")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\Type("OpenAPI\Server\Model\AssistantsApiToolChoiceOption")]
    protected ?AssistantsApiToolChoiceOption $toolChoice = null;

    /**
     * @var AssistantsApiResponseFormatOption|null
     * @SerializedName("response_format")
     * @Type("OpenAPI\Server\Model\AssistantsApiResponseFormatOption")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\Type("OpenAPI\Server\Model\AssistantsApiResponseFormatOption")]
    protected ?AssistantsApiResponseFormatOption $responseFormat = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->object = array_key_exists('object', $data) ? $data['object'] : $this->object;
            $this->createdAt = array_key_exists('createdAt', $data) ? $data['createdAt'] : $this->createdAt;
            $this->threadId = array_key_exists('threadId', $data) ? $data['threadId'] : $this->threadId;
            $this->assistantId = array_key_exists('assistantId', $data) ? $data['assistantId'] : $this->assistantId;
            $this->status = array_key_exists('status', $data) ? $data['status'] : $this->status;
            $this->requiredAction = array_key_exists('requiredAction', $data) ? $data['requiredAction'] : $this->requiredAction;
            $this->lastError = array_key_exists('lastError', $data) ? $data['lastError'] : $this->lastError;
            $this->expiresAt = array_key_exists('expiresAt', $data) ? $data['expiresAt'] : $this->expiresAt;
            $this->startedAt = array_key_exists('startedAt', $data) ? $data['startedAt'] : $this->startedAt;
            $this->cancelledAt = array_key_exists('cancelledAt', $data) ? $data['cancelledAt'] : $this->cancelledAt;
            $this->failedAt = array_key_exists('failedAt', $data) ? $data['failedAt'] : $this->failedAt;
            $this->completedAt = array_key_exists('completedAt', $data) ? $data['completedAt'] : $this->completedAt;
            $this->incompleteDetails = array_key_exists('incompleteDetails', $data) ? $data['incompleteDetails'] : $this->incompleteDetails;
            $this->model = array_key_exists('model', $data) ? $data['model'] : $this->model;
            $this->instructions = array_key_exists('instructions', $data) ? $data['instructions'] : $this->instructions;
            $this->tools = array_key_exists('tools', $data) ? $data['tools'] : $this->tools;
            $this->fileIds = array_key_exists('fileIds', $data) ? $data['fileIds'] : $this->fileIds;
            $this->metadata = array_key_exists('metadata', $data) ? $data['metadata'] : $this->metadata;
            $this->usage = array_key_exists('usage', $data) ? $data['usage'] : $this->usage;
            $this->temperature = array_key_exists('temperature', $data) ? $data['temperature'] : $this->temperature;
            $this->maxPromptTokens = array_key_exists('maxPromptTokens', $data) ? $data['maxPromptTokens'] : $this->maxPromptTokens;
            $this->maxCompletionTokens = array_key_exists('maxCompletionTokens', $data) ? $data['maxCompletionTokens'] : $this->maxCompletionTokens;
            $this->truncationStrategy = array_key_exists('truncationStrategy', $data) ? $data['truncationStrategy'] : $this->truncationStrategy;
            $this->toolChoice = array_key_exists('toolChoice', $data) ? $data['toolChoice'] : $this->toolChoice;
            $this->responseFormat = array_key_exists('responseFormat', $data) ? $data['responseFormat'] : $this->responseFormat;
        }
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param string|null $id  The identifier, which can be referenced in API endpoints.
    *
    * @return $this
    */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets object.
     *
     * @return string|null
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
    * Sets object.
    *
    * @param string|null $object  The object type, which is always `thread.run`.
    *
    * @return $this
    */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }




    /**
     * Gets createdAt.
     *
     * @return int|null
     */
    public function getCreatedAt(): ?int
    {
        return $this->createdAt;
    }

    /**
    * Sets createdAt.
    *
    * @param int|null $createdAt  The Unix timestamp (in seconds) for when the run was created.
    *
    * @return $this
    */
    public function setCreatedAt(?int $createdAt): self
    {
        $this->createdAt = $createdAt;

        return $this;
    }




    /**
     * Gets threadId.
     *
     * @return string|null
     */
    public function getThreadId(): ?string
    {
        return $this->threadId;
    }

    /**
    * Sets threadId.
    *
    * @param string|null $threadId  The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
    *
    * @return $this
    */
    public function setThreadId(?string $threadId): self
    {
        $this->threadId = $threadId;

        return $this;
    }




    /**
     * Gets assistantId.
     *
     * @return string|null
     */
    public function getAssistantId(): ?string
    {
        return $this->assistantId;
    }

    /**
    * Sets assistantId.
    *
    * @param string|null $assistantId  The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
    *
    * @return $this
    */
    public function setAssistantId(?string $assistantId): self
    {
        $this->assistantId = $assistantId;

        return $this;
    }




    /**
     * Gets status.
     *
     * @return string|null
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
    * Sets status.
    *
    * @param string|null $status  The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
    *
    * @return $this
    */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }




    /**
     * Gets requiredAction.
     *
     * @return RunObjectRequiredAction|null
     */
    public function getRequiredAction(): ?RunObjectRequiredAction
    {
        return $this->requiredAction;
    }

    /**
    * Sets requiredAction.
    *
    * @param RunObjectRequiredAction|null $requiredAction
    *
    * @return $this
    */
    public function setRequiredAction(?RunObjectRequiredAction $requiredAction): self
    {
        $this->requiredAction = $requiredAction;

        return $this;
    }




    /**
     * Gets lastError.
     *
     * @return RunObjectLastError|null
     */
    public function getLastError(): ?RunObjectLastError
    {
        return $this->lastError;
    }

    /**
    * Sets lastError.
    *
    * @param RunObjectLastError|null $lastError
    *
    * @return $this
    */
    public function setLastError(?RunObjectLastError $lastError): self
    {
        $this->lastError = $lastError;

        return $this;
    }




    /**
     * Gets expiresAt.
     *
     * @return int|null
     */
    public function getExpiresAt(): ?int
    {
        return $this->expiresAt;
    }

    /**
    * Sets expiresAt.
    *
    * @param int|null $expiresAt  The Unix timestamp (in seconds) for when the run will expire.
    *
    * @return $this
    */
    public function setExpiresAt(?int $expiresAt): self
    {
        $this->expiresAt = $expiresAt;

        return $this;
    }




    /**
     * Gets startedAt.
     *
     * @return int|null
     */
    public function getStartedAt(): ?int
    {
        return $this->startedAt;
    }

    /**
    * Sets startedAt.
    *
    * @param int|null $startedAt  The Unix timestamp (in seconds) for when the run was started.
    *
    * @return $this
    */
    public function setStartedAt(?int $startedAt): self
    {
        $this->startedAt = $startedAt;

        return $this;
    }




    /**
     * Gets cancelledAt.
     *
     * @return int|null
     */
    public function getCancelledAt(): ?int
    {
        return $this->cancelledAt;
    }

    /**
    * Sets cancelledAt.
    *
    * @param int|null $cancelledAt  The Unix timestamp (in seconds) for when the run was cancelled.
    *
    * @return $this
    */
    public function setCancelledAt(?int $cancelledAt): self
    {
        $this->cancelledAt = $cancelledAt;

        return $this;
    }




    /**
     * Gets failedAt.
     *
     * @return int|null
     */
    public function getFailedAt(): ?int
    {
        return $this->failedAt;
    }

    /**
    * Sets failedAt.
    *
    * @param int|null $failedAt  The Unix timestamp (in seconds) for when the run failed.
    *
    * @return $this
    */
    public function setFailedAt(?int $failedAt): self
    {
        $this->failedAt = $failedAt;

        return $this;
    }




    /**
     * Gets completedAt.
     *
     * @return int|null
     */
    public function getCompletedAt(): ?int
    {
        return $this->completedAt;
    }

    /**
    * Sets completedAt.
    *
    * @param int|null $completedAt  The Unix timestamp (in seconds) for when the run was completed.
    *
    * @return $this
    */
    public function setCompletedAt(?int $completedAt): self
    {
        $this->completedAt = $completedAt;

        return $this;
    }




    /**
     * Gets incompleteDetails.
     *
     * @return RunObjectIncompleteDetails|null
     */
    public function getIncompleteDetails(): ?RunObjectIncompleteDetails
    {
        return $this->incompleteDetails;
    }

    /**
    * Sets incompleteDetails.
    *
    * @param RunObjectIncompleteDetails|null $incompleteDetails
    *
    * @return $this
    */
    public function setIncompleteDetails(?RunObjectIncompleteDetails $incompleteDetails): self
    {
        $this->incompleteDetails = $incompleteDetails;

        return $this;
    }




    /**
     * Gets model.
     *
     * @return string|null
     */
    public function getModel(): ?string
    {
        return $this->model;
    }

    /**
    * Sets model.
    *
    * @param string|null $model  The model that the [assistant](/docs/api-reference/assistants) used for this run.
    *
    * @return $this
    */
    public function setModel(?string $model): self
    {
        $this->model = $model;

        return $this;
    }




    /**
     * Gets instructions.
     *
     * @return string|null
     */
    public function getInstructions(): ?string
    {
        return $this->instructions;
    }

    /**
    * Sets instructions.
    *
    * @param string|null $instructions  The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
    *
    * @return $this
    */
    public function setInstructions(?string $instructions): self
    {
        $this->instructions = $instructions;

        return $this;
    }




    /**
     * Gets tools.
     *
     * @return AssistantObjectToolsInner[]|null
     */
    public function getTools(): ?array
    {
        return $this->tools;
    }

    /**
    * Sets tools.
    *
    * @param AssistantObjectToolsInner[]|null $tools  The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
    *
    * @return $this
    */
    public function setTools(?array $tools): self
    {
        $this->tools = $tools;

        return $this;
    }




    /**
     * Gets fileIds.
     *
     * @return string[]|null
     */
    public function getFileIds(): ?array
    {
        return $this->fileIds;
    }

    /**
    * Sets fileIds.
    *
    * @param string[]|null $fileIds  The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
    *
    * @return $this
    */
    public function setFileIds(?array $fileIds): self
    {
        $this->fileIds = $fileIds;

        return $this;
    }




    /**
     * Gets metadata.
     *
     * @return array|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
    * Sets metadata.
    *
    * @param array|null $metadata  Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
    *
    * @return $this
    */
    public function setMetadata(?array $metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }




    /**
     * Gets usage.
     *
     * @return RunCompletionUsage|null
     */
    public function getUsage(): ?RunCompletionUsage
    {
        return $this->usage;
    }

    /**
    * Sets usage.
    *
    * @param RunCompletionUsage|null $usage
    *
    * @return $this
    */
    public function setUsage(?RunCompletionUsage $usage): self
    {
        $this->usage = $usage;

        return $this;
    }




    /**
     * Gets temperature.
     *
     * @return float|null
     */
    public function getTemperature(): ?float
    {
        return $this->temperature;
    }

    /**
    * Sets temperature.
    *
    * @param float|null $temperature  The sampling temperature used for this run. If not set, defaults to 1.
    *
    * @return $this
    */
    public function setTemperature(?float $temperature = null): self
    {
        $this->temperature = $temperature;

        return $this;
    }




    /**
     * Gets maxPromptTokens.
     *
     * @return int|null
     */
    public function getMaxPromptTokens(): ?int
    {
        return $this->maxPromptTokens;
    }

    /**
    * Sets maxPromptTokens.
    *
    * @param int|null $maxPromptTokens  The maximum number of prompt tokens specified to have been used over the course of the run.
    *
    * @return $this
    */
    public function setMaxPromptTokens(?int $maxPromptTokens): self
    {
        $this->maxPromptTokens = $maxPromptTokens;

        return $this;
    }




    /**
     * Gets maxCompletionTokens.
     *
     * @return int|null
     */
    public function getMaxCompletionTokens(): ?int
    {
        return $this->maxCompletionTokens;
    }

    /**
    * Sets maxCompletionTokens.
    *
    * @param int|null $maxCompletionTokens  The maximum number of completion tokens specified to have been used over the course of the run.
    *
    * @return $this
    */
    public function setMaxCompletionTokens(?int $maxCompletionTokens): self
    {
        $this->maxCompletionTokens = $maxCompletionTokens;

        return $this;
    }




    /**
     * Gets truncationStrategy.
     *
     * @return TruncationObject|null
     */
    public function getTruncationStrategy(): ?TruncationObject
    {
        return $this->truncationStrategy;
    }

    /**
    * Sets truncationStrategy.
    *
    * @param TruncationObject|null $truncationStrategy
    *
    * @return $this
    */
    public function setTruncationStrategy(?TruncationObject $truncationStrategy): self
    {
        $this->truncationStrategy = $truncationStrategy;

        return $this;
    }




    /**
     * Gets toolChoice.
     *
     * @return AssistantsApiToolChoiceOption|null
     */
    public function getToolChoice(): ?AssistantsApiToolChoiceOption
    {
        return $this->toolChoice;
    }

    /**
    * Sets toolChoice.
    *
    * @param AssistantsApiToolChoiceOption|null $toolChoice
    *
    * @return $this
    */
    public function setToolChoice(?AssistantsApiToolChoiceOption $toolChoice): self
    {
        $this->toolChoice = $toolChoice;

        return $this;
    }




    /**
     * Gets responseFormat.
     *
     * @return AssistantsApiResponseFormatOption|null
     */
    public function getResponseFormat(): ?AssistantsApiResponseFormatOption
    {
        return $this->responseFormat;
    }

    /**
    * Sets responseFormat.
    *
    * @param AssistantsApiResponseFormatOption|null $responseFormat
    *
    * @return $this
    */
    public function setResponseFormat(?AssistantsApiResponseFormatOption $responseFormat): self
    {
        $this->responseFormat = $responseFormat;

        return $this;
    }



}


