<?php
/**
 * RunStepObject
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the RunStepObject model.
 *
 * Represents a step in execution of a run.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class RunStepObject 
{
        /**
     * The identifier of the run step, which can be referenced in API endpoints.
     *
     * @var string|null
     * @SerializedName("id")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $id = null;

    /**
     * The object type, which is always &#x60;thread.run.step&#x60;.
     *
     * @var string|null
     * @SerializedName("object")
     * @Assert\NotNull()
     * @Assert\Choice({ "thread.run.step" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $object = null;

    /**
     * The Unix timestamp (in seconds) for when the run step was created.
     *
     * @var int|null
     * @SerializedName("created_at")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $createdAt = null;

    /**
     * The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
     *
     * @var string|null
     * @SerializedName("assistant_id")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $assistantId = null;

    /**
     * The ID of the [thread](/docs/api-reference/threads) that was run.
     *
     * @var string|null
     * @SerializedName("thread_id")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $threadId = null;

    /**
     * The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
     *
     * @var string|null
     * @SerializedName("run_id")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $runId = null;

    /**
     * The type of run step, which can be either &#x60;message_creation&#x60; or &#x60;tool_calls&#x60;.
     *
     * @var string|null
     * @SerializedName("type")
     * @Assert\NotNull()
     * @Assert\Choice({ "message_creation", "tool_calls" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $type = null;

    /**
     * The status of the run step, which can be either &#x60;in_progress&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.
     *
     * @var string|null
     * @SerializedName("status")
     * @Assert\NotNull()
     * @Assert\Choice({ "in_progress", "cancelled", "failed", "completed", "expired" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $status = null;

    /**
     * @var RunStepObjectStepDetails|null
     * @SerializedName("step_details")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("OpenAPI\Server\Model\RunStepObjectStepDetails")
     * @Type("OpenAPI\Server\Model\RunStepObjectStepDetails")
     */
    protected ?RunStepObjectStepDetails $stepDetails = null;

    /**
     * @var RunStepObjectLastError|null
     * @SerializedName("last_error")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("OpenAPI\Server\Model\RunStepObjectLastError")
     * @Type("OpenAPI\Server\Model\RunStepObjectLastError")
     */
    protected ?RunStepObjectLastError $lastError = null;

    /**
     * The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
     *
     * @var int|null
     * @SerializedName("expired_at")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $expiredAt = null;

    /**
     * The Unix timestamp (in seconds) for when the run step was cancelled.
     *
     * @var int|null
     * @SerializedName("cancelled_at")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $cancelledAt = null;

    /**
     * The Unix timestamp (in seconds) for when the run step failed.
     *
     * @var int|null
     * @SerializedName("failed_at")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $failedAt = null;

    /**
     * The Unix timestamp (in seconds) for when the run step completed.
     *
     * @var int|null
     * @SerializedName("completed_at")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $completedAt = null;

    /**
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
     *
     * @var array|null
     * @SerializedName("metadata")
     * @Assert\NotNull()
     * @Assert\Type("array")
     * @Type("array")
     */
    protected ?array $metadata = null;

    /**
     * @var RunStepCompletionUsage|null
     * @SerializedName("usage")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("OpenAPI\Server\Model\RunStepCompletionUsage")
     * @Type("OpenAPI\Server\Model\RunStepCompletionUsage")
     */
    protected ?RunStepCompletionUsage $usage = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->object = array_key_exists('object', $data) ? $data['object'] : $this->object;
            $this->createdAt = array_key_exists('createdAt', $data) ? $data['createdAt'] : $this->createdAt;
            $this->assistantId = array_key_exists('assistantId', $data) ? $data['assistantId'] : $this->assistantId;
            $this->threadId = array_key_exists('threadId', $data) ? $data['threadId'] : $this->threadId;
            $this->runId = array_key_exists('runId', $data) ? $data['runId'] : $this->runId;
            $this->type = array_key_exists('type', $data) ? $data['type'] : $this->type;
            $this->status = array_key_exists('status', $data) ? $data['status'] : $this->status;
            $this->stepDetails = array_key_exists('stepDetails', $data) ? $data['stepDetails'] : $this->stepDetails;
            $this->lastError = array_key_exists('lastError', $data) ? $data['lastError'] : $this->lastError;
            $this->expiredAt = array_key_exists('expiredAt', $data) ? $data['expiredAt'] : $this->expiredAt;
            $this->cancelledAt = array_key_exists('cancelledAt', $data) ? $data['cancelledAt'] : $this->cancelledAt;
            $this->failedAt = array_key_exists('failedAt', $data) ? $data['failedAt'] : $this->failedAt;
            $this->completedAt = array_key_exists('completedAt', $data) ? $data['completedAt'] : $this->completedAt;
            $this->metadata = array_key_exists('metadata', $data) ? $data['metadata'] : $this->metadata;
            $this->usage = array_key_exists('usage', $data) ? $data['usage'] : $this->usage;
        }
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->id;
    }



    /**
     * Sets id.
     *
     * @param string|null $id  The identifier of the run step, which can be referenced in API endpoints.
     *
     * @return $this
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets object.
     *
     * @return string|null
     */
    public function getObject(): ?string
    {
        return $this->object;
    }



    /**
     * Sets object.
     *
     * @param string|null $object  The object type, which is always `thread.run.step`.
     *
     * @return $this
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * Gets createdAt.
     *
     * @return int|null
     */
    public function getCreatedAt(): ?int
    {
        return $this->createdAt;
    }



    /**
     * Sets createdAt.
     *
     * @param int|null $createdAt  The Unix timestamp (in seconds) for when the run step was created.
     *
     * @return $this
     */
    public function setCreatedAt(?int $createdAt): self
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Gets assistantId.
     *
     * @return string|null
     */
    public function getAssistantId(): ?string
    {
        return $this->assistantId;
    }



    /**
     * Sets assistantId.
     *
     * @param string|null $assistantId  The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
     *
     * @return $this
     */
    public function setAssistantId(?string $assistantId): self
    {
        $this->assistantId = $assistantId;

        return $this;
    }

    /**
     * Gets threadId.
     *
     * @return string|null
     */
    public function getThreadId(): ?string
    {
        return $this->threadId;
    }



    /**
     * Sets threadId.
     *
     * @param string|null $threadId  The ID of the [thread](/docs/api-reference/threads) that was run.
     *
     * @return $this
     */
    public function setThreadId(?string $threadId): self
    {
        $this->threadId = $threadId;

        return $this;
    }

    /**
     * Gets runId.
     *
     * @return string|null
     */
    public function getRunId(): ?string
    {
        return $this->runId;
    }



    /**
     * Sets runId.
     *
     * @param string|null $runId  The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
     *
     * @return $this
     */
    public function setRunId(?string $runId): self
    {
        $this->runId = $runId;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->type;
    }



    /**
     * Sets type.
     *
     * @param string|null $type  The type of run step, which can be either `message_creation` or `tool_calls`.
     *
     * @return $this
     */
    public function setType(?string $type): self
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return string|null
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }



    /**
     * Sets status.
     *
     * @param string|null $status  The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
     *
     * @return $this
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Gets stepDetails.
     *
     * @return RunStepObjectStepDetails|null
     */
    public function getStepDetails(): ?RunStepObjectStepDetails
    {
        return $this->stepDetails;
    }



    /**
     * Sets stepDetails.
     *
     * @param RunStepObjectStepDetails|null $stepDetails
     *
     * @return $this
     */
    public function setStepDetails(?RunStepObjectStepDetails $stepDetails): self
    {
        $this->stepDetails = $stepDetails;

        return $this;
    }

    /**
     * Gets lastError.
     *
     * @return RunStepObjectLastError|null
     */
    public function getLastError(): ?RunStepObjectLastError
    {
        return $this->lastError;
    }



    /**
     * Sets lastError.
     *
     * @param RunStepObjectLastError|null $lastError
     *
     * @return $this
     */
    public function setLastError(?RunStepObjectLastError $lastError): self
    {
        $this->lastError = $lastError;

        return $this;
    }

    /**
     * Gets expiredAt.
     *
     * @return int|null
     */
    public function getExpiredAt(): ?int
    {
        return $this->expiredAt;
    }



    /**
     * Sets expiredAt.
     *
     * @param int|null $expiredAt  The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
     *
     * @return $this
     */
    public function setExpiredAt(?int $expiredAt): self
    {
        $this->expiredAt = $expiredAt;

        return $this;
    }

    /**
     * Gets cancelledAt.
     *
     * @return int|null
     */
    public function getCancelledAt(): ?int
    {
        return $this->cancelledAt;
    }



    /**
     * Sets cancelledAt.
     *
     * @param int|null $cancelledAt  The Unix timestamp (in seconds) for when the run step was cancelled.
     *
     * @return $this
     */
    public function setCancelledAt(?int $cancelledAt): self
    {
        $this->cancelledAt = $cancelledAt;

        return $this;
    }

    /**
     * Gets failedAt.
     *
     * @return int|null
     */
    public function getFailedAt(): ?int
    {
        return $this->failedAt;
    }



    /**
     * Sets failedAt.
     *
     * @param int|null $failedAt  The Unix timestamp (in seconds) for when the run step failed.
     *
     * @return $this
     */
    public function setFailedAt(?int $failedAt): self
    {
        $this->failedAt = $failedAt;

        return $this;
    }

    /**
     * Gets completedAt.
     *
     * @return int|null
     */
    public function getCompletedAt(): ?int
    {
        return $this->completedAt;
    }



    /**
     * Sets completedAt.
     *
     * @param int|null $completedAt  The Unix timestamp (in seconds) for when the run step completed.
     *
     * @return $this
     */
    public function setCompletedAt(?int $completedAt): self
    {
        $this->completedAt = $completedAt;

        return $this;
    }

    /**
     * Gets metadata.
     *
     * @return array|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }



    /**
     * Sets metadata.
     *
     * @param array|null $metadata  Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
     *
     * @return $this
     */
    public function setMetadata(?array $metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * Gets usage.
     *
     * @return RunStepCompletionUsage|null
     */
    public function getUsage(): ?RunStepCompletionUsage
    {
        return $this->usage;
    }



    /**
     * Sets usage.
     *
     * @param RunStepCompletionUsage|null $usage
     *
     * @return $this
     */
    public function setUsage(?RunStepCompletionUsage $usage): self
    {
        $this->usage = $usage;

        return $this;
    }
}


