<?php
/**
 * SubmitToolOutputsRunRequestToolOutputsInner
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the SubmitToolOutputsRunRequestToolOutputsInner model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class SubmitToolOutputsRunRequestToolOutputsInner 
{
        /**
     * The ID of the tool call in the &#x60;required_action&#x60; object within the run object the output is being submitted for.
     *
     * @var string|null
     * @SerializedName("tool_call_id")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $toolCallId = null;

    /**
     * The output of the tool call to be submitted to continue the run.
     *
     * @var string|null
     * @SerializedName("output")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $output = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->toolCallId = array_key_exists('toolCallId', $data) ? $data['toolCallId'] : $this->toolCallId;
            $this->output = array_key_exists('output', $data) ? $data['output'] : $this->output;
        }
    }

    /**
     * Gets toolCallId.
     *
     * @return string|null
     */
    public function getToolCallId(): ?string
    {
        return $this->toolCallId;
    }

    /**
    * Sets toolCallId.
    *
    * @param string|null $toolCallId  The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
    *
    * @return $this
    */
    public function setToolCallId(?string $toolCallId = null): self
    {
        $this->toolCallId = $toolCallId;

        return $this;
    }




    /**
     * Gets output.
     *
     * @return string|null
     */
    public function getOutput(): ?string
    {
        return $this->output;
    }

    /**
    * Sets output.
    *
    * @param string|null $output  The output of the tool call to be submitted to continue the run.
    *
    * @return $this
    */
    public function setOutput(?string $output = null): self
    {
        $this->output = $output;

        return $this;
    }



}


