<?php
/**
 * AssistantsApiInterfaceTest
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * AssistantsApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Api\AssistantsApiInterface
 */
class AssistantsApiInterfaceTest extends WebTestCase
{
    private static ?KernelBrowser $client = null;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        if (null === self::$client) {
            self::$client = static::createClient();
        }
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        static::ensureKernelShutdown();
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for cancelRun
     *
     * Cancels a run that is `in_progress`..
     *
     */
    public function testCancelRun(): void
    {
        $client = self::$client;

        $path = '/threads/{thread_id}/runs/{run_id}/cancel';
        $pattern = '{threadId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{runId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for cancelRun not implemented');
    }

    /**
     * Test case for createAssistant
     *
     * Create an assistant with a model and instructions..
     *
     */
    public function testCreateAssistant(): void
    {
        $client = self::$client;

        $path = '/assistants';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createAssistant not implemented');
    }

    /**
     * Test case for createAssistantFile
     *
     * Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants)..
     *
     */
    public function testCreateAssistantFile(): void
    {
        $client = self::$client;

        $path = '/assistants/{assistant_id}/files';
        $pattern = '{assistantId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createAssistantFile not implemented');
    }

    /**
     * Test case for createMessage
     *
     * Create a message..
     *
     */
    public function testCreateMessage(): void
    {
        $client = self::$client;

        $path = '/threads/{thread_id}/messages';
        $pattern = '{threadId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createMessage not implemented');
    }

    /**
     * Test case for createRun
     *
     * Create a run..
     *
     */
    public function testCreateRun(): void
    {
        $client = self::$client;

        $path = '/threads/{thread_id}/runs';
        $pattern = '{threadId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createRun not implemented');
    }

    /**
     * Test case for createThread
     *
     * Create a thread..
     *
     */
    public function testCreateThread(): void
    {
        $client = self::$client;

        $path = '/threads';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createThread not implemented');
    }

    /**
     * Test case for createThreadAndRun
     *
     * Create a thread and run it in one request..
     *
     */
    public function testCreateThreadAndRun(): void
    {
        $client = self::$client;

        $path = '/threads/runs';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createThreadAndRun not implemented');
    }

    /**
     * Test case for deleteAssistant
     *
     * Delete an assistant..
     *
     */
    public function testDeleteAssistant(): void
    {
        $client = self::$client;

        $path = '/assistants/{assistant_id}';
        $pattern = '{assistantId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteAssistant not implemented');
    }

    /**
     * Test case for deleteAssistantFile
     *
     * Delete an assistant file..
     *
     */
    public function testDeleteAssistantFile(): void
    {
        $client = self::$client;

        $path = '/assistants/{assistant_id}/files/{file_id}';
        $pattern = '{assistantId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{fileId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteAssistantFile not implemented');
    }

    /**
     * Test case for deleteThread
     *
     * Delete a thread..
     *
     */
    public function testDeleteThread(): void
    {
        $client = self::$client;

        $path = '/threads/{thread_id}';
        $pattern = '{threadId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteThread not implemented');
    }

    /**
     * Test case for getAssistant
     *
     * Retrieves an assistant..
     *
     */
    public function testGetAssistant(): void
    {
        $client = self::$client;

        $path = '/assistants/{assistant_id}';
        $pattern = '{assistantId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getAssistant not implemented');
    }

    /**
     * Test case for getAssistantFile
     *
     * Retrieves an AssistantFile..
     *
     */
    public function testGetAssistantFile(): void
    {
        $client = self::$client;

        $path = '/assistants/{assistant_id}/files/{file_id}';
        $pattern = '{assistantId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{fileId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getAssistantFile not implemented');
    }

    /**
     * Test case for getMessage
     *
     * Retrieve a message..
     *
     */
    public function testGetMessage(): void
    {
        $client = self::$client;

        $path = '/threads/{thread_id}/messages/{message_id}';
        $pattern = '{threadId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{messageId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getMessage not implemented');
    }

    /**
     * Test case for getMessageFile
     *
     * Retrieves a message file..
     *
     */
    public function testGetMessageFile(): void
    {
        $client = self::$client;

        $path = '/threads/{thread_id}/messages/{message_id}/files/{file_id}';
        $pattern = '{threadId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{messageId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{fileId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getMessageFile not implemented');
    }

    /**
     * Test case for getRun
     *
     * Retrieves a run..
     *
     */
    public function testGetRun(): void
    {
        $client = self::$client;

        $path = '/threads/{thread_id}/runs/{run_id}';
        $pattern = '{threadId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{runId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getRun not implemented');
    }

    /**
     * Test case for getRunStep
     *
     * Retrieves a run step..
     *
     */
    public function testGetRunStep(): void
    {
        $client = self::$client;

        $path = '/threads/{thread_id}/runs/{run_id}/steps/{step_id}';
        $pattern = '{threadId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{runId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{stepId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getRunStep not implemented');
    }

    /**
     * Test case for getThread
     *
     * Retrieves a thread..
     *
     */
    public function testGetThread(): void
    {
        $client = self::$client;

        $path = '/threads/{thread_id}';
        $pattern = '{threadId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getThread not implemented');
    }

    /**
     * Test case for listAssistantFiles
     *
     * Returns a list of assistant files..
     *
     */
    public function testListAssistantFiles(): void
    {
        $client = self::$client;

        $path = '/assistants/{assistant_id}/files';
        $pattern = '{assistantId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for listAssistantFiles not implemented');
    }

    /**
     * Test case for listAssistants
     *
     * Returns a list of assistants..
     *
     */
    public function testListAssistants(): void
    {
        $client = self::$client;

        $path = '/assistants';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for listAssistants not implemented');
    }

    /**
     * Test case for listMessageFiles
     *
     * Returns a list of message files..
     *
     */
    public function testListMessageFiles(): void
    {
        $client = self::$client;

        $path = '/threads/{thread_id}/messages/{message_id}/files';
        $pattern = '{threadId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{messageId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for listMessageFiles not implemented');
    }

    /**
     * Test case for listMessages
     *
     * Returns a list of messages for a given thread..
     *
     */
    public function testListMessages(): void
    {
        $client = self::$client;

        $path = '/threads/{thread_id}/messages';
        $pattern = '{threadId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for listMessages not implemented');
    }

    /**
     * Test case for listRunSteps
     *
     * Returns a list of run steps belonging to a run..
     *
     */
    public function testListRunSteps(): void
    {
        $client = self::$client;

        $path = '/threads/{thread_id}/runs/{run_id}/steps';
        $pattern = '{threadId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{runId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for listRunSteps not implemented');
    }

    /**
     * Test case for listRuns
     *
     * Returns a list of runs belonging to a thread..
     *
     */
    public function testListRuns(): void
    {
        $client = self::$client;

        $path = '/threads/{thread_id}/runs';
        $pattern = '{threadId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for listRuns not implemented');
    }

    /**
     * Test case for modifyAssistant
     *
     * Modifies an assistant..
     *
     */
    public function testModifyAssistant(): void
    {
        $client = self::$client;

        $path = '/assistants/{assistant_id}';
        $pattern = '{assistantId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for modifyAssistant not implemented');
    }

    /**
     * Test case for modifyMessage
     *
     * Modifies a message..
     *
     */
    public function testModifyMessage(): void
    {
        $client = self::$client;

        $path = '/threads/{thread_id}/messages/{message_id}';
        $pattern = '{threadId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{messageId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for modifyMessage not implemented');
    }

    /**
     * Test case for modifyRun
     *
     * Modifies a run..
     *
     */
    public function testModifyRun(): void
    {
        $client = self::$client;

        $path = '/threads/{thread_id}/runs/{run_id}';
        $pattern = '{threadId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{runId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for modifyRun not implemented');
    }

    /**
     * Test case for modifyThread
     *
     * Modifies a thread..
     *
     */
    public function testModifyThread(): void
    {
        $client = self::$client;

        $path = '/threads/{thread_id}';
        $pattern = '{threadId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for modifyThread not implemented');
    }

    /**
     * Test case for submitToolOuputsToRun
     *
     * When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request..
     *
     */
    public function testSubmitToolOuputsToRun(): void
    {
        $client = self::$client;

        $path = '/threads/{thread_id}/runs/{run_id}/submit_tool_outputs';
        $pattern = '{threadId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{runId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for submitToolOuputsToRun not implemented');
    }

    /**
     * @param string $regexp
     * @return mixed
     */
    protected function genTestData(string $regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast);
    }
}
