<?php
/**
 * OpenAIApiInterfaceTest
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * OpenAIApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Api\OpenAIApiInterface
 */
class OpenAIApiInterfaceTest extends WebTestCase
{
    private static ?KernelBrowser $client = null;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        if (null === self::$client) {
            self::$client = static::createClient();
        }
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        static::ensureKernelShutdown();
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for cancelFineTune
     *
     * Immediately cancel a fine-tune job..
     *
     */
    public function testCancelFineTune(): void
    {
        $client = self::$client;

        $path = '/fine-tunes/{fine_tune_id}/cancel';
        $pattern = '{fineTuneId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for cancelFineTune not implemented');
    }

    /**
     * Test case for createChatCompletion
     *
     * Creates a model response for the given chat conversation..
     *
     */
    public function testCreateChatCompletion(): void
    {
        $client = self::$client;

        $path = '/chat/completions';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createChatCompletion not implemented');
    }

    /**
     * Test case for createCompletion
     *
     * Creates a completion for the provided prompt and parameters..
     *
     */
    public function testCreateCompletion(): void
    {
        $client = self::$client;

        $path = '/completions';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createCompletion not implemented');
    }

    /**
     * Test case for createEdit
     *
     * Creates a new edit for the provided input, instruction, and parameters..
     *
     */
    public function testCreateEdit(): void
    {
        $client = self::$client;

        $path = '/edits';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createEdit not implemented');
    }

    /**
     * Test case for createEmbedding
     *
     * Creates an embedding vector representing the input text..
     *
     */
    public function testCreateEmbedding(): void
    {
        $client = self::$client;

        $path = '/embeddings';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createEmbedding not implemented');
    }

    /**
     * Test case for createFile
     *
     * Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit..
     *
     */
    public function testCreateFile(): void
    {
        $client = self::$client;

        $path = '/files';

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for createFile not implemented');
    }

    /**
     * Test case for createFineTune
     *
     * Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning).
     *
     */
    public function testCreateFineTune(): void
    {
        $client = self::$client;

        $path = '/fine-tunes';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createFineTune not implemented');
    }

    /**
     * Test case for createImage
     *
     * Creates an image given a prompt..
     *
     */
    public function testCreateImage(): void
    {
        $client = self::$client;

        $path = '/images/generations';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createImage not implemented');
    }

    /**
     * Test case for createImageEdit
     *
     * Creates an edited or extended image given an original image and a prompt..
     *
     */
    public function testCreateImageEdit(): void
    {
        $client = self::$client;

        $path = '/images/edits';

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for createImageEdit not implemented');
    }

    /**
     * Test case for createImageVariation
     *
     * Creates a variation of a given image..
     *
     */
    public function testCreateImageVariation(): void
    {
        $client = self::$client;

        $path = '/images/variations';

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for createImageVariation not implemented');
    }

    /**
     * Test case for createModeration
     *
     * Classifies if text violates OpenAI's Content Policy.
     *
     */
    public function testCreateModeration(): void
    {
        $client = self::$client;

        $path = '/moderations';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createModeration not implemented');
    }

    /**
     * Test case for createTranscription
     *
     * Transcribes audio into the input language..
     *
     */
    public function testCreateTranscription(): void
    {
        $client = self::$client;

        $path = '/audio/transcriptions';

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for createTranscription not implemented');
    }

    /**
     * Test case for createTranslation
     *
     * Translates audio into English..
     *
     */
    public function testCreateTranslation(): void
    {
        $client = self::$client;

        $path = '/audio/translations';

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for createTranslation not implemented');
    }

    /**
     * Test case for deleteFile
     *
     * Delete a file..
     *
     */
    public function testDeleteFile(): void
    {
        $client = self::$client;

        $path = '/files/{file_id}';
        $pattern = '{fileId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteFile not implemented');
    }

    /**
     * Test case for deleteModel
     *
     * Delete a fine-tuned model. You must have the Owner role in your organization..
     *
     */
    public function testDeleteModel(): void
    {
        $client = self::$client;

        $path = '/models/{model}';
        $pattern = '{model}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteModel not implemented');
    }

    /**
     * Test case for downloadFile
     *
     * Returns the contents of the specified file.
     *
     */
    public function testDownloadFile(): void
    {
        $client = self::$client;

        $path = '/files/{file_id}/content';
        $pattern = '{fileId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for downloadFile not implemented');
    }

    /**
     * Test case for listFiles
     *
     * Returns a list of files that belong to the user's organization..
     *
     */
    public function testListFiles(): void
    {
        $client = self::$client;

        $path = '/files';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for listFiles not implemented');
    }

    /**
     * Test case for listFineTuneEvents
     *
     * Get fine-grained status updates for a fine-tune job..
     *
     */
    public function testListFineTuneEvents(): void
    {
        $client = self::$client;

        $path = '/fine-tunes/{fine_tune_id}/events';
        $pattern = '{fineTuneId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for listFineTuneEvents not implemented');
    }

    /**
     * Test case for listFineTunes
     *
     * List your organization's fine-tuning jobs.
     *
     */
    public function testListFineTunes(): void
    {
        $client = self::$client;

        $path = '/fine-tunes';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for listFineTunes not implemented');
    }

    /**
     * Test case for listModels
     *
     * Lists the currently available models, and provides basic information about each one such as the owner and availability..
     *
     */
    public function testListModels(): void
    {
        $client = self::$client;

        $path = '/models';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for listModels not implemented');
    }

    /**
     * Test case for retrieveFile
     *
     * Returns information about a specific file..
     *
     */
    public function testRetrieveFile(): void
    {
        $client = self::$client;

        $path = '/files/{file_id}';
        $pattern = '{fileId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for retrieveFile not implemented');
    }

    /**
     * Test case for retrieveFineTune
     *
     * Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning).
     *
     */
    public function testRetrieveFineTune(): void
    {
        $client = self::$client;

        $path = '/fine-tunes/{fine_tune_id}';
        $pattern = '{fineTuneId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for retrieveFineTune not implemented');
    }

    /**
     * Test case for retrieveModel
     *
     * Retrieves a model instance, providing basic information about the model such as the owner and permissioning..
     *
     */
    public function testRetrieveModel(): void
    {
        $client = self::$client;

        $path = '/models/{model}';
        $pattern = '{model}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for retrieveModel not implemented');
    }

    /**
     * @param string $regexp
     * @return mixed
     */
    protected function genTestData(string $regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast);
    }
}
