<?php
/**
 * CreateFineTuneRequestTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\CreateFineTuneRequest;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * CreateFineTuneRequestTest Class Doc Comment
 *
 * @category    Class
 * @description CreateFineTuneRequest
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\CreateFineTuneRequest
 */
class CreateFineTuneRequestTest extends TestCase
{
    protected CreateFineTuneRequest|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(CreateFineTuneRequest::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(CreateFineTuneRequest::class));
        $this->assertInstanceOf(CreateFineTuneRequest::class, $this->object);
    }

    /**
     * Test attribute "trainingFile"
     *
     * @group unit
     * @small
     */
    public function testPropertyTrainingFile(): void
    {
        $this->markTestSkipped('Test for property trainingFile not implemented');
    }

    /**
     * Test attribute "validationFile"
     *
     * @group unit
     * @small
     */
    public function testPropertyValidationFile(): void
    {
        $this->markTestSkipped('Test for property validationFile not implemented');
    }

    /**
     * Test attribute "model"
     *
     * @group unit
     * @small
     */
    public function testPropertyModel(): void
    {
        $this->markTestSkipped('Test for property model not implemented');
    }

    /**
     * Test attribute "nEpochs"
     *
     * @group unit
     * @small
     */
    public function testPropertyNEpochs(): void
    {
        $this->markTestSkipped('Test for property nEpochs not implemented');
    }

    /**
     * Test attribute "batchSize"
     *
     * @group unit
     * @small
     */
    public function testPropertyBatchSize(): void
    {
        $this->markTestSkipped('Test for property batchSize not implemented');
    }

    /**
     * Test attribute "learningRateMultiplier"
     *
     * @group unit
     * @small
     */
    public function testPropertyLearningRateMultiplier(): void
    {
        $this->markTestSkipped('Test for property learningRateMultiplier not implemented');
    }

    /**
     * Test attribute "promptLossWeight"
     *
     * @group unit
     * @small
     */
    public function testPropertyPromptLossWeight(): void
    {
        $this->markTestSkipped('Test for property promptLossWeight not implemented');
    }

    /**
     * Test attribute "computeClassificationMetrics"
     *
     * @group unit
     * @small
     */
    public function testPropertyComputeClassificationMetrics(): void
    {
        $this->markTestSkipped('Test for property computeClassificationMetrics not implemented');
    }

    /**
     * Test attribute "classificationNClasses"
     *
     * @group unit
     * @small
     */
    public function testPropertyClassificationNClasses(): void
    {
        $this->markTestSkipped('Test for property classificationNClasses not implemented');
    }

    /**
     * Test attribute "classificationPositiveClass"
     *
     * @group unit
     * @small
     */
    public function testPropertyClassificationPositiveClass(): void
    {
        $this->markTestSkipped('Test for property classificationPositiveClass not implemented');
    }

    /**
     * Test attribute "classificationBetas"
     *
     * @group unit
     * @small
     */
    public function testPropertyClassificationBetas(): void
    {
        $this->markTestSkipped('Test for property classificationBetas not implemented');
    }

    /**
     * Test attribute "suffix"
     *
     * @group unit
     * @small
     */
    public function testPropertySuffix(): void
    {
        $this->markTestSkipped('Test for property suffix not implemented');
    }
}
