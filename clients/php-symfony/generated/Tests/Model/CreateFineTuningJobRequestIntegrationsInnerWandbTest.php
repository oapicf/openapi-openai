<?php
/**
 * CreateFineTuningJobRequestIntegrationsInnerWandbTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\CreateFineTuningJobRequestIntegrationsInnerWandb;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * CreateFineTuningJobRequestIntegrationsInnerWandbTest Class Doc Comment
 *
 * @category    Class
 * @description The settings for your integration with Weights and Biases. This payload specifies the project that metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags to your run, and set a default entity (team, username, etc) to be associated with your run.
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\CreateFineTuningJobRequestIntegrationsInnerWandb
 */
class CreateFineTuningJobRequestIntegrationsInnerWandbTest extends TestCase
{
    protected CreateFineTuningJobRequestIntegrationsInnerWandb|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(CreateFineTuningJobRequestIntegrationsInnerWandb::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(CreateFineTuningJobRequestIntegrationsInnerWandb::class));
        $this->assertInstanceOf(CreateFineTuningJobRequestIntegrationsInnerWandb::class, $this->object);
    }

    /**
     * Test attribute "project"
     *
     * @group unit
     * @small
     */
    public function testPropertyProject(): void
    {
        $this->markTestSkipped('Test for property project not implemented');
    }

    /**
     * Test attribute "name"
     *
     * @group unit
     * @small
     */
    public function testPropertyName(): void
    {
        $this->markTestSkipped('Test for property name not implemented');
    }

    /**
     * Test attribute "entity"
     *
     * @group unit
     * @small
     */
    public function testPropertyEntity(): void
    {
        $this->markTestSkipped('Test for property entity not implemented');
    }

    /**
     * Test attribute "tags"
     *
     * @group unit
     * @small
     */
    public function testPropertyTags(): void
    {
        $this->markTestSkipped('Test for property tags not implemented');
    }
}
