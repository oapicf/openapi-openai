<?php
/**
 * FineTuningJobTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\FineTuningJob;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * FineTuningJobTest Class Doc Comment
 *
 * @category    Class
 * @description The &#x60;fine_tuning.job&#x60; object represents a fine-tuning job that has been created through the API.
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\FineTuningJob
 */
class FineTuningJobTest extends TestCase
{
    protected FineTuningJob|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(FineTuningJob::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(FineTuningJob::class));
        $this->assertInstanceOf(FineTuningJob::class, $this->object);
    }

    /**
     * Test attribute "id"
     *
     * @group unit
     * @small
     */
    public function testPropertyId(): void
    {
        $this->markTestSkipped('Test for property id not implemented');
    }

    /**
     * Test attribute "createdAt"
     *
     * @group unit
     * @small
     */
    public function testPropertyCreatedAt(): void
    {
        $this->markTestSkipped('Test for property createdAt not implemented');
    }

    /**
     * Test attribute "error"
     *
     * @group unit
     * @small
     */
    public function testPropertyError(): void
    {
        $this->markTestSkipped('Test for property error not implemented');
    }

    /**
     * Test attribute "fineTunedModel"
     *
     * @group unit
     * @small
     */
    public function testPropertyFineTunedModel(): void
    {
        $this->markTestSkipped('Test for property fineTunedModel not implemented');
    }

    /**
     * Test attribute "finishedAt"
     *
     * @group unit
     * @small
     */
    public function testPropertyFinishedAt(): void
    {
        $this->markTestSkipped('Test for property finishedAt not implemented');
    }

    /**
     * Test attribute "hyperparameters"
     *
     * @group unit
     * @small
     */
    public function testPropertyHyperparameters(): void
    {
        $this->markTestSkipped('Test for property hyperparameters not implemented');
    }

    /**
     * Test attribute "model"
     *
     * @group unit
     * @small
     */
    public function testPropertyModel(): void
    {
        $this->markTestSkipped('Test for property model not implemented');
    }

    /**
     * Test attribute "object"
     *
     * @group unit
     * @small
     */
    public function testPropertyObject(): void
    {
        $this->markTestSkipped('Test for property object not implemented');
    }

    /**
     * Test attribute "organizationId"
     *
     * @group unit
     * @small
     */
    public function testPropertyOrganizationId(): void
    {
        $this->markTestSkipped('Test for property organizationId not implemented');
    }

    /**
     * Test attribute "resultFiles"
     *
     * @group unit
     * @small
     */
    public function testPropertyResultFiles(): void
    {
        $this->markTestSkipped('Test for property resultFiles not implemented');
    }

    /**
     * Test attribute "status"
     *
     * @group unit
     * @small
     */
    public function testPropertyStatus(): void
    {
        $this->markTestSkipped('Test for property status not implemented');
    }

    /**
     * Test attribute "trainedTokens"
     *
     * @group unit
     * @small
     */
    public function testPropertyTrainedTokens(): void
    {
        $this->markTestSkipped('Test for property trainedTokens not implemented');
    }

    /**
     * Test attribute "trainingFile"
     *
     * @group unit
     * @small
     */
    public function testPropertyTrainingFile(): void
    {
        $this->markTestSkipped('Test for property trainingFile not implemented');
    }

    /**
     * Test attribute "validationFile"
     *
     * @group unit
     * @small
     */
    public function testPropertyValidationFile(): void
    {
        $this->markTestSkipped('Test for property validationFile not implemented');
    }

    /**
     * Test attribute "integrations"
     *
     * @group unit
     * @small
     */
    public function testPropertyIntegrations(): void
    {
        $this->markTestSkipped('Test for property integrations not implemented');
    }

    /**
     * Test attribute "seed"
     *
     * @group unit
     * @small
     */
    public function testPropertySeed(): void
    {
        $this->markTestSkipped('Test for property seed not implemented');
    }
}
