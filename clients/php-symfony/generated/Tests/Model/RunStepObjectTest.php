<?php
/**
 * RunStepObjectTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\RunStepObject;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * RunStepObjectTest Class Doc Comment
 *
 * @category    Class
 * @description Represents a step in execution of a run.
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\RunStepObject
 */
class RunStepObjectTest extends TestCase
{
    protected RunStepObject|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(RunStepObject::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(RunStepObject::class));
        $this->assertInstanceOf(RunStepObject::class, $this->object);
    }

    /**
     * Test attribute "id"
     *
     * @group unit
     * @small
     */
    public function testPropertyId(): void
    {
        $this->markTestSkipped('Test for property id not implemented');
    }

    /**
     * Test attribute "object"
     *
     * @group unit
     * @small
     */
    public function testPropertyObject(): void
    {
        $this->markTestSkipped('Test for property object not implemented');
    }

    /**
     * Test attribute "createdAt"
     *
     * @group unit
     * @small
     */
    public function testPropertyCreatedAt(): void
    {
        $this->markTestSkipped('Test for property createdAt not implemented');
    }

    /**
     * Test attribute "assistantId"
     *
     * @group unit
     * @small
     */
    public function testPropertyAssistantId(): void
    {
        $this->markTestSkipped('Test for property assistantId not implemented');
    }

    /**
     * Test attribute "threadId"
     *
     * @group unit
     * @small
     */
    public function testPropertyThreadId(): void
    {
        $this->markTestSkipped('Test for property threadId not implemented');
    }

    /**
     * Test attribute "runId"
     *
     * @group unit
     * @small
     */
    public function testPropertyRunId(): void
    {
        $this->markTestSkipped('Test for property runId not implemented');
    }

    /**
     * Test attribute "type"
     *
     * @group unit
     * @small
     */
    public function testPropertyType(): void
    {
        $this->markTestSkipped('Test for property type not implemented');
    }

    /**
     * Test attribute "status"
     *
     * @group unit
     * @small
     */
    public function testPropertyStatus(): void
    {
        $this->markTestSkipped('Test for property status not implemented');
    }

    /**
     * Test attribute "stepDetails"
     *
     * @group unit
     * @small
     */
    public function testPropertyStepDetails(): void
    {
        $this->markTestSkipped('Test for property stepDetails not implemented');
    }

    /**
     * Test attribute "lastError"
     *
     * @group unit
     * @small
     */
    public function testPropertyLastError(): void
    {
        $this->markTestSkipped('Test for property lastError not implemented');
    }

    /**
     * Test attribute "expiredAt"
     *
     * @group unit
     * @small
     */
    public function testPropertyExpiredAt(): void
    {
        $this->markTestSkipped('Test for property expiredAt not implemented');
    }

    /**
     * Test attribute "cancelledAt"
     *
     * @group unit
     * @small
     */
    public function testPropertyCancelledAt(): void
    {
        $this->markTestSkipped('Test for property cancelledAt not implemented');
    }

    /**
     * Test attribute "failedAt"
     *
     * @group unit
     * @small
     */
    public function testPropertyFailedAt(): void
    {
        $this->markTestSkipped('Test for property failedAt not implemented');
    }

    /**
     * Test attribute "completedAt"
     *
     * @group unit
     * @small
     */
    public function testPropertyCompletedAt(): void
    {
        $this->markTestSkipped('Test for property completedAt not implemented');
    }

    /**
     * Test attribute "metadata"
     *
     * @group unit
     * @small
     */
    public function testPropertyMetadata(): void
    {
        $this->markTestSkipped('Test for property metadata not implemented');
    }

    /**
     * Test attribute "usage"
     *
     * @group unit
     * @small
     */
    public function testPropertyUsage(): void
    {
        $this->markTestSkipped('Test for property usage not implemented');
    }
}
