#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents an event emitted when streaming a Run.  Each event in a server-sent events stream has an `event` and `data` property:  ``` event: thread.created data: {""id"": ""thread_123"", ""object"": ""thread"", ...} ```  We emit events whenever a new object is created, transitions to a new state, or is being streamed in parts (deltas). For example, we emit `thread.run.created` when a new run is created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses to create a message during a run, we emit a `thread.message.created event`, a `thread.message.in_progress` event, many `thread.message.delta` events, and finally a `thread.message.completed` event.  We may add additional events over time, so we recommend handling unknown events gracefully in your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to integrate the Assistants API with streaming. 

.PARAMETER Json

JSON object

.OUTPUTS

AssistantStreamEvent<PSCustomObject>
#>
function ConvertFrom-JsonToAssistantStreamEvent {
    [CmdletBinding()]
    Param (
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        $match = 0
        $matchType = $null
        $matchInstance = $null

        # try to match DoneEvent defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToDoneEvent $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "DoneEvent"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'DoneEvent' defined in oneOf (AssistantStreamEvent). Proceeding to the next one if any."
        }

        # try to match ErrorEvent defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToErrorEvent $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "ErrorEvent"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'ErrorEvent' defined in oneOf (AssistantStreamEvent). Proceeding to the next one if any."
        }

        # try to match MessageStreamEvent defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToMessageStreamEvent $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "MessageStreamEvent"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'MessageStreamEvent' defined in oneOf (AssistantStreamEvent). Proceeding to the next one if any."
        }

        # try to match RunStepStreamEvent defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToRunStepStreamEvent $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "RunStepStreamEvent"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'RunStepStreamEvent' defined in oneOf (AssistantStreamEvent). Proceeding to the next one if any."
        }

        # try to match RunStreamEvent defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToRunStreamEvent $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "RunStreamEvent"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'RunStreamEvent' defined in oneOf (AssistantStreamEvent). Proceeding to the next one if any."
        }

        # try to match ThreadStreamEvent defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToThreadStreamEvent $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "ThreadStreamEvent"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'ThreadStreamEvent' defined in oneOf (AssistantStreamEvent). Proceeding to the next one if any."
        }

        if ($match -gt 1) {
            throw "Error! The JSON payload matches more than one type defined in oneOf schemas ([DoneEvent, ErrorEvent, MessageStreamEvent, RunStepStreamEvent, RunStreamEvent, ThreadStreamEvent]). JSON Payload: $($Json)"
        } elseif ($match -eq 1) {
            return [PSCustomObject]@{
                "ActualType" = ${matchType}
                "ActualInstance" = ${matchInstance}
                "OneOfSchemas" = @("DoneEvent", "ErrorEvent", "MessageStreamEvent", "RunStepStreamEvent", "RunStreamEvent", "ThreadStreamEvent")
            }
        } else {
            throw "Error! The JSON payload doesn't matches any type defined in oneOf schemas ([DoneEvent, ErrorEvent, MessageStreamEvent, RunStepStreamEvent, RunStreamEvent, ThreadStreamEvent]). JSON Payload: $($Json)"
        }
    }
}

