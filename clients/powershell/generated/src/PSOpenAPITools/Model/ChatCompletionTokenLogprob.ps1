#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Token
The token.
.PARAMETER Logprob
The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
.PARAMETER Bytes
A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
.PARAMETER TopLogprobs
List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
.OUTPUTS

ChatCompletionTokenLogprob<PSCustomObject>
#>

function Initialize-ChatCompletionTokenLogprob {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Token},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Logprob},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Bytes},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${TopLogprobs}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ChatCompletionTokenLogprob' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Token) {
            throw "invalid value for 'Token', 'Token' cannot be null."
        }

        if ($null -eq $Logprob) {
            throw "invalid value for 'Logprob', 'Logprob' cannot be null."
        }

        if ($null -eq $TopLogprobs) {
            throw "invalid value for 'TopLogprobs', 'TopLogprobs' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "token" = ${Token}
            "logprob" = ${Logprob}
            "bytes" = ${Bytes}
            "top_logprobs" = ${TopLogprobs}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ChatCompletionTokenLogprob<PSCustomObject>

.DESCRIPTION

Convert from JSON to ChatCompletionTokenLogprob<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ChatCompletionTokenLogprob<PSCustomObject>
#>
function ConvertFrom-JsonToChatCompletionTokenLogprob {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ChatCompletionTokenLogprob' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ChatCompletionTokenLogprob
        $AllProperties = ("token", "logprob", "bytes", "top_logprobs")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'token' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "token"))) {
            throw "Error! JSON cannot be serialized due to the required property 'token' missing."
        } else {
            $Token = $JsonParameters.PSobject.Properties["token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logprob"))) {
            throw "Error! JSON cannot be serialized due to the required property 'logprob' missing."
        } else {
            $Logprob = $JsonParameters.PSobject.Properties["logprob"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bytes"))) {
            throw "Error! JSON cannot be serialized due to the required property 'bytes' missing."
        } else {
            $Bytes = $JsonParameters.PSobject.Properties["bytes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "top_logprobs"))) {
            throw "Error! JSON cannot be serialized due to the required property 'top_logprobs' missing."
        } else {
            $TopLogprobs = $JsonParameters.PSobject.Properties["top_logprobs"].value
        }

        $PSO = [PSCustomObject]@{
            "token" = ${Token}
            "logprob" = ${Logprob}
            "bytes" = ${Bytes}
            "top_logprobs" = ${TopLogprobs}
        }

        return $PSO
    }

}

