#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Model
No description available.
.PARAMETER Name
The name of the assistant. The maximum length is 256 characters. 
.PARAMETER Description
The description of the assistant. The maximum length is 512 characters. 
.PARAMETER Instructions
The system instructions that the assistant uses. The maximum length is 256,000 characters. 
.PARAMETER Tools
A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`. 
.PARAMETER FileIds
A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. 
.PARAMETER Metadata
Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
.OUTPUTS

CreateAssistantRequest<PSCustomObject>
#>

function Initialize-CreateAssistantRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Model},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Instructions},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tools},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${FileIds},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Metadata}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateAssistantRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Model) {
            throw "invalid value for 'Model', 'Model' cannot be null."
        }

        if (!$Name -and $Name.length -gt 256) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 256."
        }

        if (!$Description -and $Description.length -gt 512) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 512."
        }

        if (!$Instructions -and $Instructions.length -gt 256000) {
            throw "invalid value for 'Instructions', the character length must be smaller than or equal to 256000."
        }

        if (!$Tools -and $Tools.length -gt 128) {
            throw "invalid value for 'Tools', number of items must be less than or equal to 128."
        }

        if (!$FileIds -and $FileIds.length -gt 20) {
            throw "invalid value for 'FileIds', number of items must be less than or equal to 20."
        }


        $PSO = [PSCustomObject]@{
            "model" = ${Model}
            "name" = ${Name}
            "description" = ${Description}
            "instructions" = ${Instructions}
            "tools" = ${Tools}
            "file_ids" = ${FileIds}
            "metadata" = ${Metadata}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateAssistantRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateAssistantRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateAssistantRequest<PSCustomObject>
#>
function ConvertFrom-JsonToCreateAssistantRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateAssistantRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateAssistantRequest
        $AllProperties = ("model", "name", "description", "instructions", "tools", "file_ids", "metadata")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'model' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) {
            throw "Error! JSON cannot be serialized due to the required property 'model' missing."
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instructions"))) { #optional property not found
            $Instructions = $null
        } else {
            $Instructions = $JsonParameters.PSobject.Properties["instructions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tools"))) { #optional property not found
            $Tools = $null
        } else {
            $Tools = $JsonParameters.PSobject.Properties["tools"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "file_ids"))) { #optional property not found
            $FileIds = $null
        } else {
            $FileIds = $JsonParameters.PSobject.Properties["file_ids"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadata"))) { #optional property not found
            $Metadata = $null
        } else {
            $Metadata = $JsonParameters.PSobject.Properties["metadata"].value
        }

        $PSO = [PSCustomObject]@{
            "model" = ${Model}
            "name" = ${Name}
            "description" = ${Description}
            "instructions" = ${Instructions}
            "tools" = ${Tools}
            "file_ids" = ${FileIds}
            "metadata" = ${Metadata}
        }

        return $PSO
    }

}

