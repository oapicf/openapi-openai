#
# OpenAI API
# APIs for sampling from and fine-tuning language models
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Model
No description available.
.PARAMETER Messages
A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).
.PARAMETER Functions
A list of functions the model may generate JSON inputs for.
.PARAMETER FunctionCall
No description available.
.PARAMETER Temperature
What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
.PARAMETER TopP
An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
.PARAMETER N
How many chat completion choices to generate for each input message.
.PARAMETER Stream
If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb). 
.PARAMETER Stop
No description available.
.PARAMETER MaxTokens
The maximum number of [tokens](/tokenizer) to generate in the chat completion.  The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens. 
.PARAMETER PresencePenalty
Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 
.PARAMETER FrequencyPenalty
Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 
.PARAMETER LogitBias
Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. 
.PARAMETER User
A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
.OUTPUTS

CreateChatCompletionRequest<PSCustomObject>
#>

function Initialize-CreateChatCompletionRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Model},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Messages},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Functions},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FunctionCall},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Temperature} = 1,
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${TopP} = 1,
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${N} = 1,
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Stream} = $false,
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Stop},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxTokens},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${PresencePenalty} = 0,
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${FrequencyPenalty} = 0,
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LogitBias},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${User}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateChatCompletionRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Model) {
            throw "invalid value for 'Model', 'Model' cannot be null."
        }

        if ($null -eq $Messages) {
            throw "invalid value for 'Messages', 'Messages' cannot be null."
        }

        if ($Messages.length -lt 1) {
            throw "invalid value for 'Messages', number of items must be greater than or equal to 1."
        }

        if (!$Functions -and $Functions.length -lt 1) {
            throw "invalid value for 'Functions', number of items must be greater than or equal to 1."
        }

        if ($Temperature -and $Temperature -gt 2) {
          throw "invalid value for 'Temperature', must be smaller than or equal to 2."
        }

        if ($Temperature -and $Temperature -lt 0) {
          throw "invalid value for 'Temperature', must be greater than or equal to 0."
        }

        if ($TopP -and $TopP -gt 1) {
          throw "invalid value for 'TopP', must be smaller than or equal to 1."
        }

        if ($TopP -and $TopP -lt 0) {
          throw "invalid value for 'TopP', must be greater than or equal to 0."
        }

        if ($N -and $N -gt 128) {
          throw "invalid value for 'N', must be smaller than or equal to 128."
        }

        if ($N -and $N -lt 1) {
          throw "invalid value for 'N', must be greater than or equal to 1."
        }

        if ($PresencePenalty -and $PresencePenalty -gt 2) {
          throw "invalid value for 'PresencePenalty', must be smaller than or equal to 2."
        }

        if ($PresencePenalty -and $PresencePenalty -lt -2) {
          throw "invalid value for 'PresencePenalty', must be greater than or equal to -2."
        }

        if ($FrequencyPenalty -and $FrequencyPenalty -gt 2) {
          throw "invalid value for 'FrequencyPenalty', must be smaller than or equal to 2."
        }

        if ($FrequencyPenalty -and $FrequencyPenalty -lt -2) {
          throw "invalid value for 'FrequencyPenalty', must be greater than or equal to -2."
        }


        $PSO = [PSCustomObject]@{
            "model" = ${Model}
            "messages" = ${Messages}
            "functions" = ${Functions}
            "function_call" = ${FunctionCall}
            "temperature" = ${Temperature}
            "top_p" = ${TopP}
            "n" = ${N}
            "stream" = ${Stream}
            "stop" = ${Stop}
            "max_tokens" = ${MaxTokens}
            "presence_penalty" = ${PresencePenalty}
            "frequency_penalty" = ${FrequencyPenalty}
            "logit_bias" = ${LogitBias}
            "user" = ${User}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateChatCompletionRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateChatCompletionRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateChatCompletionRequest<PSCustomObject>
#>
function ConvertFrom-JsonToCreateChatCompletionRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateChatCompletionRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateChatCompletionRequest
        $AllProperties = ("model", "messages", "functions", "function_call", "temperature", "top_p", "n", "stream", "stop", "max_tokens", "presence_penalty", "frequency_penalty", "logit_bias", "user")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'model' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) {
            throw "Error! JSON cannot be serialized due to the required property 'model' missing."
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "messages"))) {
            throw "Error! JSON cannot be serialized due to the required property 'messages' missing."
        } else {
            $Messages = $JsonParameters.PSobject.Properties["messages"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "functions"))) { #optional property not found
            $Functions = $null
        } else {
            $Functions = $JsonParameters.PSobject.Properties["functions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "function_call"))) { #optional property not found
            $FunctionCall = $null
        } else {
            $FunctionCall = $JsonParameters.PSobject.Properties["function_call"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "temperature"))) { #optional property not found
            $Temperature = $null
        } else {
            $Temperature = $JsonParameters.PSobject.Properties["temperature"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "top_p"))) { #optional property not found
            $TopP = $null
        } else {
            $TopP = $JsonParameters.PSobject.Properties["top_p"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "n"))) { #optional property not found
            $N = $null
        } else {
            $N = $JsonParameters.PSobject.Properties["n"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stream"))) { #optional property not found
            $Stream = $null
        } else {
            $Stream = $JsonParameters.PSobject.Properties["stream"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stop"))) { #optional property not found
            $Stop = $null
        } else {
            $Stop = $JsonParameters.PSobject.Properties["stop"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "max_tokens"))) { #optional property not found
            $MaxTokens = $null
        } else {
            $MaxTokens = $JsonParameters.PSobject.Properties["max_tokens"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "presence_penalty"))) { #optional property not found
            $PresencePenalty = $null
        } else {
            $PresencePenalty = $JsonParameters.PSobject.Properties["presence_penalty"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "frequency_penalty"))) { #optional property not found
            $FrequencyPenalty = $null
        } else {
            $FrequencyPenalty = $JsonParameters.PSobject.Properties["frequency_penalty"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logit_bias"))) { #optional property not found
            $LogitBias = $null
        } else {
            $LogitBias = $JsonParameters.PSobject.Properties["logit_bias"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user"))) { #optional property not found
            $User = $null
        } else {
            $User = $JsonParameters.PSobject.Properties["user"].value
        }

        $PSO = [PSCustomObject]@{
            "model" = ${Model}
            "messages" = ${Messages}
            "functions" = ${Functions}
            "function_call" = ${FunctionCall}
            "temperature" = ${Temperature}
            "top_p" = ${TopP}
            "n" = ${N}
            "stream" = ${Stream}
            "stop" = ${Stop}
            "max_tokens" = ${MaxTokens}
            "presence_penalty" = ${PresencePenalty}
            "frequency_penalty" = ${FrequencyPenalty}
            "logit_bias" = ${LogitBias}
            "user" = ${User}
        }

        return $PSO
    }

}

