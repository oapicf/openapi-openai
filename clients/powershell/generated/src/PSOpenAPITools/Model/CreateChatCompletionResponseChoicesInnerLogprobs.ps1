#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Log probability information for the choice.

.PARAMETER Content
A list of message content tokens with log probability information.
.OUTPUTS

CreateChatCompletionResponseChoicesInnerLogprobs<PSCustomObject>
#>

function Initialize-CreateChatCompletionResponseChoicesInnerLogprobs {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Content}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateChatCompletionResponseChoicesInnerLogprobs' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "content" = ${Content}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateChatCompletionResponseChoicesInnerLogprobs<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateChatCompletionResponseChoicesInnerLogprobs<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateChatCompletionResponseChoicesInnerLogprobs<PSCustomObject>
#>
function ConvertFrom-JsonToCreateChatCompletionResponseChoicesInnerLogprobs {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateChatCompletionResponseChoicesInnerLogprobs' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateChatCompletionResponseChoicesInnerLogprobs
        $AllProperties = ("content")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'content' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content"))) {
            throw "Error! JSON cannot be serialized due to the required property 'content' missing."
        } else {
            $Content = $JsonParameters.PSobject.Properties["content"].value
        }

        $PSO = [PSCustomObject]@{
            "content" = ${Content}
        }

        return $PSO
    }

}

