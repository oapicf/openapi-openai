#
# OpenAI API
# APIs for sampling from and fine-tuning language models
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PromptTokens
No description available.
.PARAMETER CompletionTokens
No description available.
.PARAMETER TotalTokens
No description available.
.OUTPUTS

CreateCompletionResponseUsage<PSCustomObject>
#>

function Initialize-CreateCompletionResponseUsage {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${PromptTokens},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${CompletionTokens},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${TotalTokens}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateCompletionResponseUsage' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $PromptTokens) {
            throw "invalid value for 'PromptTokens', 'PromptTokens' cannot be null."
        }

        if ($null -eq $CompletionTokens) {
            throw "invalid value for 'CompletionTokens', 'CompletionTokens' cannot be null."
        }

        if ($null -eq $TotalTokens) {
            throw "invalid value for 'TotalTokens', 'TotalTokens' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "prompt_tokens" = ${PromptTokens}
            "completion_tokens" = ${CompletionTokens}
            "total_tokens" = ${TotalTokens}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateCompletionResponseUsage<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateCompletionResponseUsage<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateCompletionResponseUsage<PSCustomObject>
#>
function ConvertFrom-JsonToCreateCompletionResponseUsage {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateCompletionResponseUsage' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateCompletionResponseUsage
        $AllProperties = ("prompt_tokens", "completion_tokens", "total_tokens")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'prompt_tokens' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prompt_tokens"))) {
            throw "Error! JSON cannot be serialized due to the required property 'prompt_tokens' missing."
        } else {
            $PromptTokens = $JsonParameters.PSobject.Properties["prompt_tokens"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "completion_tokens"))) {
            throw "Error! JSON cannot be serialized due to the required property 'completion_tokens' missing."
        } else {
            $CompletionTokens = $JsonParameters.PSobject.Properties["completion_tokens"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_tokens"))) {
            throw "Error! JSON cannot be serialized due to the required property 'total_tokens' missing."
        } else {
            $TotalTokens = $JsonParameters.PSobject.Properties["total_tokens"].value
        }

        $PSO = [PSCustomObject]@{
            "prompt_tokens" = ${PromptTokens}
            "completion_tokens" = ${CompletionTokens}
            "total_tokens" = ${TotalTokens}
        }

        return $PSO
    }

}

