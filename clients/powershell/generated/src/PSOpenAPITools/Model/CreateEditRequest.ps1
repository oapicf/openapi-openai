#
# OpenAI API
# APIs for sampling from and fine-tuning language models
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Model
No description available.
.PARAMETER VarInput
The input text to use as a starting point for the edit.
.PARAMETER Instruction
The instruction that tells the model how to edit the prompt.
.PARAMETER N
How many edits to generate for the input and instruction.
.PARAMETER Temperature
What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
.PARAMETER TopP
An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
.OUTPUTS

CreateEditRequest<PSCustomObject>
#>

function Initialize-CreateEditRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Model},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarInput} = "",
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Instruction},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${N} = 1,
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Temperature} = 1,
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${TopP} = 1
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateEditRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Model) {
            throw "invalid value for 'Model', 'Model' cannot be null."
        }

        if ($null -eq $Instruction) {
            throw "invalid value for 'Instruction', 'Instruction' cannot be null."
        }

        if ($N -and $N -gt 20) {
          throw "invalid value for 'N', must be smaller than or equal to 20."
        }

        if ($N -and $N -lt 1) {
          throw "invalid value for 'N', must be greater than or equal to 1."
        }

        if ($Temperature -and $Temperature -gt 2) {
          throw "invalid value for 'Temperature', must be smaller than or equal to 2."
        }

        if ($Temperature -and $Temperature -lt 0) {
          throw "invalid value for 'Temperature', must be greater than or equal to 0."
        }

        if ($TopP -and $TopP -gt 1) {
          throw "invalid value for 'TopP', must be smaller than or equal to 1."
        }

        if ($TopP -and $TopP -lt 0) {
          throw "invalid value for 'TopP', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "model" = ${Model}
            "input" = ${VarInput}
            "instruction" = ${Instruction}
            "n" = ${N}
            "temperature" = ${Temperature}
            "top_p" = ${TopP}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateEditRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateEditRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateEditRequest<PSCustomObject>
#>
function ConvertFrom-JsonToCreateEditRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateEditRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateEditRequest
        $AllProperties = ("model", "input", "instruction", "n", "temperature", "top_p")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'model' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) {
            throw "Error! JSON cannot be serialized due to the required property 'model' missing."
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instruction"))) {
            throw "Error! JSON cannot be serialized due to the required property 'instruction' missing."
        } else {
            $Instruction = $JsonParameters.PSobject.Properties["instruction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "input"))) { #optional property not found
            $VarInput = $null
        } else {
            $VarInput = $JsonParameters.PSobject.Properties["input"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "n"))) { #optional property not found
            $N = $null
        } else {
            $N = $JsonParameters.PSobject.Properties["n"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "temperature"))) { #optional property not found
            $Temperature = $null
        } else {
            $Temperature = $JsonParameters.PSobject.Properties["temperature"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "top_p"))) { #optional property not found
            $TopP = $null
        } else {
            $TopP = $JsonParameters.PSobject.Properties["top_p"].value
        }

        $PSO = [PSCustomObject]@{
            "model" = ${Model}
            "input" = ${VarInput}
            "instruction" = ${Instruction}
            "n" = ${N}
            "temperature" = ${Temperature}
            "top_p" = ${TopP}
        }

        return $PSO
    }

}

