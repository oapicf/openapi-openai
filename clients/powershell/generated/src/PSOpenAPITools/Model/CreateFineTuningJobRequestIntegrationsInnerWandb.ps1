#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The settings for your integration with Weights and Biases. This payload specifies the project that metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags to your run, and set a default entity (team, username, etc) to be associated with your run. 

.PARAMETER Project
The name of the project that the new run will be created under. 
.PARAMETER Name
A display name to set for the run. If not set, we will use the Job ID as the name. 
.PARAMETER Entity
The entity to use for the run. This allows you to set the team or username of the WandB user that you would like associated with the run. If not set, the default entity for the registered WandB API key is used. 
.PARAMETER Tags
A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some default tags are generated by OpenAI: ""openai/finetune"", ""openai/{base-model}"", ""openai/{ftjob-abcdef}"". 
.OUTPUTS

CreateFineTuningJobRequestIntegrationsInnerWandb<PSCustomObject>
#>

function Initialize-CreateFineTuningJobRequestIntegrationsInnerWandb {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Project},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Entity},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Tags}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateFineTuningJobRequestIntegrationsInnerWandb' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Project) {
            throw "invalid value for 'Project', 'Project' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "project" = ${Project}
            "name" = ${Name}
            "entity" = ${Entity}
            "tags" = ${Tags}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateFineTuningJobRequestIntegrationsInnerWandb<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateFineTuningJobRequestIntegrationsInnerWandb<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateFineTuningJobRequestIntegrationsInnerWandb<PSCustomObject>
#>
function ConvertFrom-JsonToCreateFineTuningJobRequestIntegrationsInnerWandb {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateFineTuningJobRequestIntegrationsInnerWandb' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateFineTuningJobRequestIntegrationsInnerWandb
        $AllProperties = ("project", "name", "entity", "tags")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'project' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "project"))) {
            throw "Error! JSON cannot be serialized due to the required property 'project' missing."
        } else {
            $Project = $JsonParameters.PSobject.Properties["project"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entity"))) { #optional property not found
            $Entity = $null
        } else {
            $Entity = $JsonParameters.PSobject.Properties["entity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        $PSO = [PSCustomObject]@{
            "project" = ${Project}
            "name" = ${Name}
            "entity" = ${Entity}
            "tags" = ${Tags}
        }

        return $PSO
    }

}

