#
# OpenAI API
# APIs for sampling from and fine-tuning language models
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Prompt
A text description of the desired image(s). The maximum length is 1000 characters.
.PARAMETER N
The number of images to generate. Must be between 1 and 10.
.PARAMETER Size
The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
.PARAMETER ResponseFormat
The format in which the generated images are returned. Must be one of `url` or `b64_json`.
.PARAMETER User
A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
.OUTPUTS

CreateImageRequest<PSCustomObject>
#>

function Initialize-CreateImageRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Prompt},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${N} = 1,
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("256x256", "512x512", "1024x1024")]
        [String]
        ${Size} = "1024x1024",
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("url", "b64_json")]
        [String]
        ${ResponseFormat} = "url",
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${User}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateImageRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Prompt) {
            throw "invalid value for 'Prompt', 'Prompt' cannot be null."
        }

        if ($N -and $N -gt 10) {
          throw "invalid value for 'N', must be smaller than or equal to 10."
        }

        if ($N -and $N -lt 1) {
          throw "invalid value for 'N', must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "prompt" = ${Prompt}
            "n" = ${N}
            "size" = ${Size}
            "response_format" = ${ResponseFormat}
            "user" = ${User}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateImageRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateImageRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateImageRequest<PSCustomObject>
#>
function ConvertFrom-JsonToCreateImageRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateImageRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateImageRequest
        $AllProperties = ("prompt", "n", "size", "response_format", "user")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'prompt' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prompt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'prompt' missing."
        } else {
            $Prompt = $JsonParameters.PSobject.Properties["prompt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "n"))) { #optional property not found
            $N = $null
        } else {
            $N = $JsonParameters.PSobject.Properties["n"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "response_format"))) { #optional property not found
            $ResponseFormat = $null
        } else {
            $ResponseFormat = $JsonParameters.PSobject.Properties["response_format"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user"))) { #optional property not found
            $User = $null
        } else {
            $User = $JsonParameters.PSobject.Properties["user"].value
        }

        $PSO = [PSCustomObject]@{
            "prompt" = ${Prompt}
            "n" = ${N}
            "size" = ${Size}
            "response_format" = ${ResponseFormat}
            "user" = ${User}
        }

        return $PSO
    }

}

