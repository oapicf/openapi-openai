#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A list of the categories, and whether they are flagged or not.

.PARAMETER Hate
Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.
.PARAMETER HateThreatening
Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
.PARAMETER Harassment
Content that expresses, incites, or promotes harassing language towards any target.
.PARAMETER HarassmentThreatening
Harassment content that also includes violence or serious harm towards any target.
.PARAMETER SelfHarm
Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
.PARAMETER SelfHarmIntent
Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.
.PARAMETER SelfHarmInstructions
Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
.PARAMETER Sexual
Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).
.PARAMETER SexualMinors
Sexual content that includes an individual who is under 18 years old.
.PARAMETER Violence
Content that depicts death, violence, or physical injury.
.PARAMETER ViolenceGraphic
Content that depicts death, violence, or physical injury in graphic detail.
.OUTPUTS

CreateModerationResponseResultsInnerCategories<PSCustomObject>
#>

function Initialize-CreateModerationResponseResultsInnerCategories {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Hate},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${HateThreatening},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Harassment},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${HarassmentThreatening},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${SelfHarm},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${SelfHarmIntent},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${SelfHarmInstructions},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Sexual},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${SexualMinors},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Violence},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${ViolenceGraphic}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateModerationResponseResultsInnerCategories' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Hate) {
            throw "invalid value for 'Hate', 'Hate' cannot be null."
        }

        if ($null -eq $HateThreatening) {
            throw "invalid value for 'HateThreatening', 'HateThreatening' cannot be null."
        }

        if ($null -eq $Harassment) {
            throw "invalid value for 'Harassment', 'Harassment' cannot be null."
        }

        if ($null -eq $HarassmentThreatening) {
            throw "invalid value for 'HarassmentThreatening', 'HarassmentThreatening' cannot be null."
        }

        if ($null -eq $SelfHarm) {
            throw "invalid value for 'SelfHarm', 'SelfHarm' cannot be null."
        }

        if ($null -eq $SelfHarmIntent) {
            throw "invalid value for 'SelfHarmIntent', 'SelfHarmIntent' cannot be null."
        }

        if ($null -eq $SelfHarmInstructions) {
            throw "invalid value for 'SelfHarmInstructions', 'SelfHarmInstructions' cannot be null."
        }

        if ($null -eq $Sexual) {
            throw "invalid value for 'Sexual', 'Sexual' cannot be null."
        }

        if ($null -eq $SexualMinors) {
            throw "invalid value for 'SexualMinors', 'SexualMinors' cannot be null."
        }

        if ($null -eq $Violence) {
            throw "invalid value for 'Violence', 'Violence' cannot be null."
        }

        if ($null -eq $ViolenceGraphic) {
            throw "invalid value for 'ViolenceGraphic', 'ViolenceGraphic' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "hate" = ${Hate}
            "hate/threatening" = ${HateThreatening}
            "harassment" = ${Harassment}
            "harassment/threatening" = ${HarassmentThreatening}
            "self-harm" = ${SelfHarm}
            "self-harm/intent" = ${SelfHarmIntent}
            "self-harm/instructions" = ${SelfHarmInstructions}
            "sexual" = ${Sexual}
            "sexual/minors" = ${SexualMinors}
            "violence" = ${Violence}
            "violence/graphic" = ${ViolenceGraphic}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateModerationResponseResultsInnerCategories<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateModerationResponseResultsInnerCategories<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateModerationResponseResultsInnerCategories<PSCustomObject>
#>
function ConvertFrom-JsonToCreateModerationResponseResultsInnerCategories {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateModerationResponseResultsInnerCategories' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateModerationResponseResultsInnerCategories
        $AllProperties = ("hate", "hate/threatening", "harassment", "harassment/threatening", "self-harm", "self-harm/intent", "self-harm/instructions", "sexual", "sexual/minors", "violence", "violence/graphic")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'hate' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hate"))) {
            throw "Error! JSON cannot be serialized due to the required property 'hate' missing."
        } else {
            $Hate = $JsonParameters.PSobject.Properties["hate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hate/threatening"))) {
            throw "Error! JSON cannot be serialized due to the required property 'hate/threatening' missing."
        } else {
            $HateThreatening = $JsonParameters.PSobject.Properties["hate/threatening"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "harassment"))) {
            throw "Error! JSON cannot be serialized due to the required property 'harassment' missing."
        } else {
            $Harassment = $JsonParameters.PSobject.Properties["harassment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "harassment/threatening"))) {
            throw "Error! JSON cannot be serialized due to the required property 'harassment/threatening' missing."
        } else {
            $HarassmentThreatening = $JsonParameters.PSobject.Properties["harassment/threatening"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self-harm"))) {
            throw "Error! JSON cannot be serialized due to the required property 'self-harm' missing."
        } else {
            $SelfHarm = $JsonParameters.PSobject.Properties["self-harm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self-harm/intent"))) {
            throw "Error! JSON cannot be serialized due to the required property 'self-harm/intent' missing."
        } else {
            $SelfHarmIntent = $JsonParameters.PSobject.Properties["self-harm/intent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self-harm/instructions"))) {
            throw "Error! JSON cannot be serialized due to the required property 'self-harm/instructions' missing."
        } else {
            $SelfHarmInstructions = $JsonParameters.PSobject.Properties["self-harm/instructions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sexual"))) {
            throw "Error! JSON cannot be serialized due to the required property 'sexual' missing."
        } else {
            $Sexual = $JsonParameters.PSobject.Properties["sexual"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sexual/minors"))) {
            throw "Error! JSON cannot be serialized due to the required property 'sexual/minors' missing."
        } else {
            $SexualMinors = $JsonParameters.PSobject.Properties["sexual/minors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "violence"))) {
            throw "Error! JSON cannot be serialized due to the required property 'violence' missing."
        } else {
            $Violence = $JsonParameters.PSobject.Properties["violence"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "violence/graphic"))) {
            throw "Error! JSON cannot be serialized due to the required property 'violence/graphic' missing."
        } else {
            $ViolenceGraphic = $JsonParameters.PSobject.Properties["violence/graphic"].value
        }

        $PSO = [PSCustomObject]@{
            "hate" = ${Hate}
            "hate/threatening" = ${HateThreatening}
            "harassment" = ${Harassment}
            "harassment/threatening" = ${HarassmentThreatening}
            "self-harm" = ${SelfHarm}
            "self-harm/intent" = ${SelfHarmIntent}
            "self-harm/instructions" = ${SelfHarmInstructions}
            "sexual" = ${Sexual}
            "sexual/minors" = ${SexualMinors}
            "violence" = ${Violence}
            "violence/graphic" = ${ViolenceGraphic}
        }

        return $PSO
    }

}

