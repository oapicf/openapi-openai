#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A list of the categories along with their scores as predicted by model.

.PARAMETER Hate
The score for the category 'hate'.
.PARAMETER HateThreatening
The score for the category 'hate/threatening'.
.PARAMETER Harassment
The score for the category 'harassment'.
.PARAMETER HarassmentThreatening
The score for the category 'harassment/threatening'.
.PARAMETER SelfHarm
The score for the category 'self-harm'.
.PARAMETER SelfHarmIntent
The score for the category 'self-harm/intent'.
.PARAMETER SelfHarmInstructions
The score for the category 'self-harm/instructions'.
.PARAMETER Sexual
The score for the category 'sexual'.
.PARAMETER SexualMinors
The score for the category 'sexual/minors'.
.PARAMETER Violence
The score for the category 'violence'.
.PARAMETER ViolenceGraphic
The score for the category 'violence/graphic'.
.OUTPUTS

CreateModerationResponseResultsInnerCategoryScores<PSCustomObject>
#>

function Initialize-CreateModerationResponseResultsInnerCategoryScores {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Hate},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${HateThreatening},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Harassment},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${HarassmentThreatening},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${SelfHarm},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${SelfHarmIntent},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${SelfHarmInstructions},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Sexual},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${SexualMinors},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Violence},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${ViolenceGraphic}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateModerationResponseResultsInnerCategoryScores' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Hate) {
            throw "invalid value for 'Hate', 'Hate' cannot be null."
        }

        if ($null -eq $HateThreatening) {
            throw "invalid value for 'HateThreatening', 'HateThreatening' cannot be null."
        }

        if ($null -eq $Harassment) {
            throw "invalid value for 'Harassment', 'Harassment' cannot be null."
        }

        if ($null -eq $HarassmentThreatening) {
            throw "invalid value for 'HarassmentThreatening', 'HarassmentThreatening' cannot be null."
        }

        if ($null -eq $SelfHarm) {
            throw "invalid value for 'SelfHarm', 'SelfHarm' cannot be null."
        }

        if ($null -eq $SelfHarmIntent) {
            throw "invalid value for 'SelfHarmIntent', 'SelfHarmIntent' cannot be null."
        }

        if ($null -eq $SelfHarmInstructions) {
            throw "invalid value for 'SelfHarmInstructions', 'SelfHarmInstructions' cannot be null."
        }

        if ($null -eq $Sexual) {
            throw "invalid value for 'Sexual', 'Sexual' cannot be null."
        }

        if ($null -eq $SexualMinors) {
            throw "invalid value for 'SexualMinors', 'SexualMinors' cannot be null."
        }

        if ($null -eq $Violence) {
            throw "invalid value for 'Violence', 'Violence' cannot be null."
        }

        if ($null -eq $ViolenceGraphic) {
            throw "invalid value for 'ViolenceGraphic', 'ViolenceGraphic' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "hate" = ${Hate}
            "hate/threatening" = ${HateThreatening}
            "harassment" = ${Harassment}
            "harassment/threatening" = ${HarassmentThreatening}
            "self-harm" = ${SelfHarm}
            "self-harm/intent" = ${SelfHarmIntent}
            "self-harm/instructions" = ${SelfHarmInstructions}
            "sexual" = ${Sexual}
            "sexual/minors" = ${SexualMinors}
            "violence" = ${Violence}
            "violence/graphic" = ${ViolenceGraphic}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateModerationResponseResultsInnerCategoryScores<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateModerationResponseResultsInnerCategoryScores<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateModerationResponseResultsInnerCategoryScores<PSCustomObject>
#>
function ConvertFrom-JsonToCreateModerationResponseResultsInnerCategoryScores {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateModerationResponseResultsInnerCategoryScores' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateModerationResponseResultsInnerCategoryScores
        $AllProperties = ("hate", "hate/threatening", "harassment", "harassment/threatening", "self-harm", "self-harm/intent", "self-harm/instructions", "sexual", "sexual/minors", "violence", "violence/graphic")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'hate' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hate"))) {
            throw "Error! JSON cannot be serialized due to the required property 'hate' missing."
        } else {
            $Hate = $JsonParameters.PSobject.Properties["hate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hate/threatening"))) {
            throw "Error! JSON cannot be serialized due to the required property 'hate/threatening' missing."
        } else {
            $HateThreatening = $JsonParameters.PSobject.Properties["hate/threatening"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "harassment"))) {
            throw "Error! JSON cannot be serialized due to the required property 'harassment' missing."
        } else {
            $Harassment = $JsonParameters.PSobject.Properties["harassment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "harassment/threatening"))) {
            throw "Error! JSON cannot be serialized due to the required property 'harassment/threatening' missing."
        } else {
            $HarassmentThreatening = $JsonParameters.PSobject.Properties["harassment/threatening"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self-harm"))) {
            throw "Error! JSON cannot be serialized due to the required property 'self-harm' missing."
        } else {
            $SelfHarm = $JsonParameters.PSobject.Properties["self-harm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self-harm/intent"))) {
            throw "Error! JSON cannot be serialized due to the required property 'self-harm/intent' missing."
        } else {
            $SelfHarmIntent = $JsonParameters.PSobject.Properties["self-harm/intent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self-harm/instructions"))) {
            throw "Error! JSON cannot be serialized due to the required property 'self-harm/instructions' missing."
        } else {
            $SelfHarmInstructions = $JsonParameters.PSobject.Properties["self-harm/instructions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sexual"))) {
            throw "Error! JSON cannot be serialized due to the required property 'sexual' missing."
        } else {
            $Sexual = $JsonParameters.PSobject.Properties["sexual"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sexual/minors"))) {
            throw "Error! JSON cannot be serialized due to the required property 'sexual/minors' missing."
        } else {
            $SexualMinors = $JsonParameters.PSobject.Properties["sexual/minors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "violence"))) {
            throw "Error! JSON cannot be serialized due to the required property 'violence' missing."
        } else {
            $Violence = $JsonParameters.PSobject.Properties["violence"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "violence/graphic"))) {
            throw "Error! JSON cannot be serialized due to the required property 'violence/graphic' missing."
        } else {
            $ViolenceGraphic = $JsonParameters.PSobject.Properties["violence/graphic"].value
        }

        $PSO = [PSCustomObject]@{
            "hate" = ${Hate}
            "hate/threatening" = ${HateThreatening}
            "harassment" = ${Harassment}
            "harassment/threatening" = ${HarassmentThreatening}
            "self-harm" = ${SelfHarm}
            "self-harm/intent" = ${SelfHarmIntent}
            "self-harm/instructions" = ${SelfHarmInstructions}
            "sexual" = ${Sexual}
            "sexual/minors" = ${SexualMinors}
            "violence" = ${Violence}
            "violence/graphic" = ${ViolenceGraphic}
        }

        return $PSO
    }

}

