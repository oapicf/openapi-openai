#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Model
No description available.
.PARAMETER VarInput
The text to generate audio for. The maximum length is 4096 characters.
.PARAMETER Voice
The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
.PARAMETER ResponseFormat
The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
.PARAMETER Speed
The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
.OUTPUTS

CreateSpeechRequest<PSCustomObject>
#>

function Initialize-CreateSpeechRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Model},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarInput},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("alloy", "echo", "fable", "onyx", "nova", "shimmer")]
        [String]
        ${Voice},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("mp3", "opus", "aac", "flac", "wav", "pcm")]
        [String]
        ${ResponseFormat} = "mp3",
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Speed} = 1.0
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateSpeechRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Model) {
            throw "invalid value for 'Model', 'Model' cannot be null."
        }

        if ($null -eq $VarInput) {
            throw "invalid value for 'VarInput', 'VarInput' cannot be null."
        }

        if ($VarInput.length -gt 4096) {
            throw "invalid value for 'VarInput', the character length must be smaller than or equal to 4096."
        }

        if ($null -eq $Voice) {
            throw "invalid value for 'Voice', 'Voice' cannot be null."
        }

        if ($Speed -and $Speed -gt 4.0) {
          throw "invalid value for 'Speed', must be smaller than or equal to 4.0."
        }

        if ($Speed -and $Speed -lt 0.25) {
          throw "invalid value for 'Speed', must be greater than or equal to 0.25."
        }


        $PSO = [PSCustomObject]@{
            "model" = ${Model}
            "input" = ${VarInput}
            "voice" = ${Voice}
            "response_format" = ${ResponseFormat}
            "speed" = ${Speed}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateSpeechRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateSpeechRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateSpeechRequest<PSCustomObject>
#>
function ConvertFrom-JsonToCreateSpeechRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateSpeechRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateSpeechRequest
        $AllProperties = ("model", "input", "voice", "response_format", "speed")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'model' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) {
            throw "Error! JSON cannot be serialized due to the required property 'model' missing."
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "input"))) {
            throw "Error! JSON cannot be serialized due to the required property 'input' missing."
        } else {
            $VarInput = $JsonParameters.PSobject.Properties["input"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "voice"))) {
            throw "Error! JSON cannot be serialized due to the required property 'voice' missing."
        } else {
            $Voice = $JsonParameters.PSobject.Properties["voice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "response_format"))) { #optional property not found
            $ResponseFormat = $null
        } else {
            $ResponseFormat = $JsonParameters.PSobject.Properties["response_format"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "speed"))) { #optional property not found
            $Speed = $null
        } else {
            $Speed = $JsonParameters.PSobject.Properties["speed"].value
        }

        $PSO = [PSCustomObject]@{
            "model" = ${Model}
            "input" = ${VarInput}
            "voice" = ${Voice}
            "response_format" = ${ResponseFormat}
            "speed" = ${Speed}
        }

        return $PSO
    }

}

