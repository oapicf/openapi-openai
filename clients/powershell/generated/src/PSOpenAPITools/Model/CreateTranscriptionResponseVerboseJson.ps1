#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents a verbose json transcription response returned by model, based on the provided input.

.PARAMETER Language
The language of the input audio.
.PARAMETER Duration
The duration of the input audio.
.PARAMETER Text
The transcribed text.
.PARAMETER Words
Extracted words and their corresponding timestamps.
.PARAMETER Segments
Segments of the transcribed text and their corresponding details.
.OUTPUTS

CreateTranscriptionResponseVerboseJson<PSCustomObject>
#>

function Initialize-CreateTranscriptionResponseVerboseJson {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Language},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Duration},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Text},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Words},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Segments}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateTranscriptionResponseVerboseJson' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Language) {
            throw "invalid value for 'Language', 'Language' cannot be null."
        }

        if ($null -eq $Duration) {
            throw "invalid value for 'Duration', 'Duration' cannot be null."
        }

        if ($null -eq $Text) {
            throw "invalid value for 'Text', 'Text' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "language" = ${Language}
            "duration" = ${Duration}
            "text" = ${Text}
            "words" = ${Words}
            "segments" = ${Segments}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateTranscriptionResponseVerboseJson<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateTranscriptionResponseVerboseJson<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateTranscriptionResponseVerboseJson<PSCustomObject>
#>
function ConvertFrom-JsonToCreateTranscriptionResponseVerboseJson {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateTranscriptionResponseVerboseJson' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateTranscriptionResponseVerboseJson
        $AllProperties = ("language", "duration", "text", "words", "segments")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'language' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "language"))) {
            throw "Error! JSON cannot be serialized due to the required property 'language' missing."
        } else {
            $Language = $JsonParameters.PSobject.Properties["language"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "duration"))) {
            throw "Error! JSON cannot be serialized due to the required property 'duration' missing."
        } else {
            $Duration = $JsonParameters.PSobject.Properties["duration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "text"))) {
            throw "Error! JSON cannot be serialized due to the required property 'text' missing."
        } else {
            $Text = $JsonParameters.PSobject.Properties["text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "words"))) { #optional property not found
            $Words = $null
        } else {
            $Words = $JsonParameters.PSobject.Properties["words"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "segments"))) { #optional property not found
            $Segments = $null
        } else {
            $Segments = $JsonParameters.PSobject.Properties["segments"].value
        }

        $PSO = [PSCustomObject]@{
            "language" = ${Language}
            "duration" = ${Duration}
            "text" = ${Text}
            "words" = ${Words}
            "segments" = ${Segments}
        }

        return $PSO
    }

}

