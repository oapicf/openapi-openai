#
# OpenAI API
# APIs for sampling from and fine-tuning language models
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Object
No description available.
.PARAMETER CreatedAt
No description available.
.PARAMETER UpdatedAt
No description available.
.PARAMETER Model
No description available.
.PARAMETER FineTunedModel
No description available.
.PARAMETER OrganizationId
No description available.
.PARAMETER Status
No description available.
.PARAMETER Hyperparams
No description available.
.PARAMETER TrainingFiles
No description available.
.PARAMETER ValidationFiles
No description available.
.PARAMETER ResultFiles
No description available.
.PARAMETER Events
No description available.
.OUTPUTS

FineTune<PSCustomObject>
#>

function Initialize-FineTune {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Object},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${CreatedAt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${UpdatedAt},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FineTunedModel},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OrganizationId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Hyperparams},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${TrainingFiles},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ValidationFiles},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ResultFiles},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Events}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => FineTune' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Object) {
            throw "invalid value for 'Object', 'Object' cannot be null."
        }

        if ($null -eq $CreatedAt) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }

        if ($null -eq $UpdatedAt) {
            throw "invalid value for 'UpdatedAt', 'UpdatedAt' cannot be null."
        }

        if ($null -eq $Model) {
            throw "invalid value for 'Model', 'Model' cannot be null."
        }

        if ($null -eq $OrganizationId) {
            throw "invalid value for 'OrganizationId', 'OrganizationId' cannot be null."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }

        if ($null -eq $Hyperparams) {
            throw "invalid value for 'Hyperparams', 'Hyperparams' cannot be null."
        }

        if ($null -eq $TrainingFiles) {
            throw "invalid value for 'TrainingFiles', 'TrainingFiles' cannot be null."
        }

        if ($null -eq $ValidationFiles) {
            throw "invalid value for 'ValidationFiles', 'ValidationFiles' cannot be null."
        }

        if ($null -eq $ResultFiles) {
            throw "invalid value for 'ResultFiles', 'ResultFiles' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "object" = ${Object}
            "created_at" = ${CreatedAt}
            "updated_at" = ${UpdatedAt}
            "model" = ${Model}
            "fine_tuned_model" = ${FineTunedModel}
            "organization_id" = ${OrganizationId}
            "status" = ${Status}
            "hyperparams" = ${Hyperparams}
            "training_files" = ${TrainingFiles}
            "validation_files" = ${ValidationFiles}
            "result_files" = ${ResultFiles}
            "events" = ${Events}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FineTune<PSCustomObject>

.DESCRIPTION

Convert from JSON to FineTune<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FineTune<PSCustomObject>
#>
function ConvertFrom-JsonToFineTune {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => FineTune' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FineTune
        $AllProperties = ("id", "object", "created_at", "updated_at", "model", "fine_tuned_model", "organization_id", "status", "hyperparams", "training_files", "validation_files", "result_files", "events")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "object"))) {
            throw "Error! JSON cannot be serialized due to the required property 'object' missing."
        } else {
            $Object = $JsonParameters.PSobject.Properties["object"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created_at' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["created_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updated_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'updated_at' missing."
        } else {
            $UpdatedAt = $JsonParameters.PSobject.Properties["updated_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) {
            throw "Error! JSON cannot be serialized due to the required property 'model' missing."
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fine_tuned_model"))) {
            throw "Error! JSON cannot be serialized due to the required property 'fine_tuned_model' missing."
        } else {
            $FineTunedModel = $JsonParameters.PSobject.Properties["fine_tuned_model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "organization_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'organization_id' missing."
        } else {
            $OrganizationId = $JsonParameters.PSobject.Properties["organization_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hyperparams"))) {
            throw "Error! JSON cannot be serialized due to the required property 'hyperparams' missing."
        } else {
            $Hyperparams = $JsonParameters.PSobject.Properties["hyperparams"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "training_files"))) {
            throw "Error! JSON cannot be serialized due to the required property 'training_files' missing."
        } else {
            $TrainingFiles = $JsonParameters.PSobject.Properties["training_files"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validation_files"))) {
            throw "Error! JSON cannot be serialized due to the required property 'validation_files' missing."
        } else {
            $ValidationFiles = $JsonParameters.PSobject.Properties["validation_files"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "result_files"))) {
            throw "Error! JSON cannot be serialized due to the required property 'result_files' missing."
        } else {
            $ResultFiles = $JsonParameters.PSobject.Properties["result_files"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "events"))) { #optional property not found
            $Events = $null
        } else {
            $Events = $JsonParameters.PSobject.Properties["events"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "object" = ${Object}
            "created_at" = ${CreatedAt}
            "updated_at" = ${UpdatedAt}
            "model" = ${Model}
            "fine_tuned_model" = ${FineTunedModel}
            "organization_id" = ${OrganizationId}
            "status" = ${Status}
            "hyperparams" = ${Hyperparams}
            "training_files" = ${TrainingFiles}
            "validation_files" = ${ValidationFiles}
            "result_files" = ${ResultFiles}
            "events" = ${Events}
        }

        return $PSO
    }

}

