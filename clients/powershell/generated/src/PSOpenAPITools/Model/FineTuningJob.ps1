#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The `fine_tuning.job` object represents a fine-tuning job that has been created through the API. 

.PARAMETER Id
The object identifier, which can be referenced in the API endpoints.
.PARAMETER CreatedAt
The Unix timestamp (in seconds) for when the fine-tuning job was created.
.PARAMETER VarError
No description available.
.PARAMETER FineTunedModel
The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
.PARAMETER FinishedAt
The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
.PARAMETER Hyperparameters
No description available.
.PARAMETER Model
The base model that is being fine-tuned.
.PARAMETER Object
The object type, which is always ""fine_tuning.job"".
.PARAMETER OrganizationId
The organization that owns the fine-tuning job.
.PARAMETER ResultFiles
The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
.PARAMETER Status
The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
.PARAMETER TrainedTokens
The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
.PARAMETER TrainingFile
The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
.PARAMETER ValidationFile
The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
.PARAMETER Integrations
A list of integrations to enable for this fine-tuning job.
.PARAMETER Seed
The seed used for the fine-tuning job.
.OUTPUTS

FineTuningJob<PSCustomObject>
#>

function Initialize-FineTuningJob {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${CreatedAt},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VarError},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FineTunedModel},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FinishedAt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Hyperparameters},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("fine_tuning.job")]
        [String]
        ${Object},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OrganizationId},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ResultFiles},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("validating_files", "queued", "running", "succeeded", "failed", "cancelled")]
        [String]
        ${Status},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TrainedTokens},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TrainingFile},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ValidationFile},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Integrations},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Seed}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => FineTuningJob' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $CreatedAt) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }

        if ($null -eq $Hyperparameters) {
            throw "invalid value for 'Hyperparameters', 'Hyperparameters' cannot be null."
        }

        if ($null -eq $Model) {
            throw "invalid value for 'Model', 'Model' cannot be null."
        }

        if ($null -eq $Object) {
            throw "invalid value for 'Object', 'Object' cannot be null."
        }

        if ($null -eq $OrganizationId) {
            throw "invalid value for 'OrganizationId', 'OrganizationId' cannot be null."
        }

        if ($null -eq $ResultFiles) {
            throw "invalid value for 'ResultFiles', 'ResultFiles' cannot be null."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }

        if ($null -eq $TrainingFile) {
            throw "invalid value for 'TrainingFile', 'TrainingFile' cannot be null."
        }

        if (!$Integrations -and $Integrations.length -gt 5) {
            throw "invalid value for 'Integrations', number of items must be less than or equal to 5."
        }

        if ($null -eq $Seed) {
            throw "invalid value for 'Seed', 'Seed' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "created_at" = ${CreatedAt}
            "error" = ${VarError}
            "fine_tuned_model" = ${FineTunedModel}
            "finished_at" = ${FinishedAt}
            "hyperparameters" = ${Hyperparameters}
            "model" = ${Model}
            "object" = ${Object}
            "organization_id" = ${OrganizationId}
            "result_files" = ${ResultFiles}
            "status" = ${Status}
            "trained_tokens" = ${TrainedTokens}
            "training_file" = ${TrainingFile}
            "validation_file" = ${ValidationFile}
            "integrations" = ${Integrations}
            "seed" = ${Seed}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FineTuningJob<PSCustomObject>

.DESCRIPTION

Convert from JSON to FineTuningJob<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FineTuningJob<PSCustomObject>
#>
function ConvertFrom-JsonToFineTuningJob {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => FineTuningJob' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FineTuningJob
        $AllProperties = ("id", "created_at", "error", "fine_tuned_model", "finished_at", "hyperparameters", "model", "object", "organization_id", "result_files", "status", "trained_tokens", "training_file", "validation_file", "integrations", "seed")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created_at' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["created_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "error"))) {
            throw "Error! JSON cannot be serialized due to the required property 'error' missing."
        } else {
            $VarError = $JsonParameters.PSobject.Properties["error"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fine_tuned_model"))) {
            throw "Error! JSON cannot be serialized due to the required property 'fine_tuned_model' missing."
        } else {
            $FineTunedModel = $JsonParameters.PSobject.Properties["fine_tuned_model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "finished_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'finished_at' missing."
        } else {
            $FinishedAt = $JsonParameters.PSobject.Properties["finished_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hyperparameters"))) {
            throw "Error! JSON cannot be serialized due to the required property 'hyperparameters' missing."
        } else {
            $Hyperparameters = $JsonParameters.PSobject.Properties["hyperparameters"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) {
            throw "Error! JSON cannot be serialized due to the required property 'model' missing."
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "object"))) {
            throw "Error! JSON cannot be serialized due to the required property 'object' missing."
        } else {
            $Object = $JsonParameters.PSobject.Properties["object"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "organization_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'organization_id' missing."
        } else {
            $OrganizationId = $JsonParameters.PSobject.Properties["organization_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "result_files"))) {
            throw "Error! JSON cannot be serialized due to the required property 'result_files' missing."
        } else {
            $ResultFiles = $JsonParameters.PSobject.Properties["result_files"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "trained_tokens"))) {
            throw "Error! JSON cannot be serialized due to the required property 'trained_tokens' missing."
        } else {
            $TrainedTokens = $JsonParameters.PSobject.Properties["trained_tokens"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "training_file"))) {
            throw "Error! JSON cannot be serialized due to the required property 'training_file' missing."
        } else {
            $TrainingFile = $JsonParameters.PSobject.Properties["training_file"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validation_file"))) {
            throw "Error! JSON cannot be serialized due to the required property 'validation_file' missing."
        } else {
            $ValidationFile = $JsonParameters.PSobject.Properties["validation_file"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "seed"))) {
            throw "Error! JSON cannot be serialized due to the required property 'seed' missing."
        } else {
            $Seed = $JsonParameters.PSobject.Properties["seed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "integrations"))) { #optional property not found
            $Integrations = $null
        } else {
            $Integrations = $JsonParameters.PSobject.Properties["integrations"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "created_at" = ${CreatedAt}
            "error" = ${VarError}
            "fine_tuned_model" = ${FineTunedModel}
            "finished_at" = ${FinishedAt}
            "hyperparameters" = ${Hyperparameters}
            "model" = ${Model}
            "object" = ${Object}
            "organization_id" = ${OrganizationId}
            "result_files" = ${ResultFiles}
            "status" = ${Status}
            "trained_tokens" = ${TrainedTokens}
            "training_file" = ${TrainingFile}
            "validation_file" = ${ValidationFile}
            "integrations" = ${Integrations}
            "seed" = ${Seed}
        }

        return $PSO
    }

}

