#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents the url or the content of an image generated by the OpenAI API.

.PARAMETER B64Json
The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
.PARAMETER Url
The URL of the generated image, if `response_format` is `url` (default).
.PARAMETER RevisedPrompt
The prompt that was used to generate the image, if there was any revision to the prompt.
.OUTPUTS

Image<PSCustomObject>
#>

function Initialize-Image {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${B64Json},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RevisedPrompt}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Image' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "b64_json" = ${B64Json}
            "url" = ${Url}
            "revised_prompt" = ${RevisedPrompt}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Image<PSCustomObject>

.DESCRIPTION

Convert from JSON to Image<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Image<PSCustomObject>
#>
function ConvertFrom-JsonToImage {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Image' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Image
        $AllProperties = ("b64_json", "url", "revised_prompt")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "b64_json"))) { #optional property not found
            $B64Json = $null
        } else {
            $B64Json = $JsonParameters.PSobject.Properties["b64_json"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) { #optional property not found
            $Url = $null
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "revised_prompt"))) { #optional property not found
            $RevisedPrompt = $null
        } else {
            $RevisedPrompt = $JsonParameters.PSobject.Properties["revised_prompt"].value
        }

        $PSO = [PSCustomObject]@{
            "b64_json" = ${B64Json}
            "url" = ${Url}
            "revised_prompt" = ${RevisedPrompt}
        }

        return $PSO
    }

}

