#
# OpenAI API
# APIs for sampling from and fine-tuning language models
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Url
No description available.
.PARAMETER B64Json
No description available.
.OUTPUTS

ImagesResponseDataInner<PSCustomObject>
#>

function Initialize-ImagesResponseDataInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${B64Json}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ImagesResponseDataInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "url" = ${Url}
            "b64_json" = ${B64Json}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ImagesResponseDataInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to ImagesResponseDataInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ImagesResponseDataInner<PSCustomObject>
#>
function ConvertFrom-JsonToImagesResponseDataInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ImagesResponseDataInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ImagesResponseDataInner
        $AllProperties = ("url", "b64_json")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) { #optional property not found
            $Url = $null
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "b64_json"))) { #optional property not found
            $B64Json = $null
        } else {
            $B64Json = $JsonParameters.PSobject.Properties["b64_json"].value
        }

        $PSO = [PSCustomObject]@{
            "url" = ${Url}
            "b64_json" = ${B64Json}
        }

        return $PSO
    }

}

