#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the ""retrieval"" tool to search files.

.PARAMETER Type
Always `file_citation`.
.PARAMETER Text
The text in the message content that needs to be replaced.
.PARAMETER FileCitation
No description available.
.PARAMETER StartIndex
No description available.
.PARAMETER EndIndex
No description available.
.OUTPUTS

MessageContentTextAnnotationsFileCitationObject<PSCustomObject>
#>

function Initialize-MessageContentTextAnnotationsFileCitationObject {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("file_citation")]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Text},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FileCitation},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${StartIndex},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${EndIndex}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => MessageContentTextAnnotationsFileCitationObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($null -eq $Text) {
            throw "invalid value for 'Text', 'Text' cannot be null."
        }

        if ($null -eq $FileCitation) {
            throw "invalid value for 'FileCitation', 'FileCitation' cannot be null."
        }

        if ($null -eq $StartIndex) {
            throw "invalid value for 'StartIndex', 'StartIndex' cannot be null."
        }

        if ($StartIndex -lt 0) {
          throw "invalid value for 'StartIndex', must be greater than or equal to 0."
        }

        if ($null -eq $EndIndex) {
            throw "invalid value for 'EndIndex', 'EndIndex' cannot be null."
        }

        if ($EndIndex -lt 0) {
          throw "invalid value for 'EndIndex', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "text" = ${Text}
            "file_citation" = ${FileCitation}
            "start_index" = ${StartIndex}
            "end_index" = ${EndIndex}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MessageContentTextAnnotationsFileCitationObject<PSCustomObject>

.DESCRIPTION

Convert from JSON to MessageContentTextAnnotationsFileCitationObject<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MessageContentTextAnnotationsFileCitationObject<PSCustomObject>
#>
function ConvertFrom-JsonToMessageContentTextAnnotationsFileCitationObject {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => MessageContentTextAnnotationsFileCitationObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in MessageContentTextAnnotationsFileCitationObject
        $AllProperties = ("type", "text", "file_citation", "start_index", "end_index")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "text"))) {
            throw "Error! JSON cannot be serialized due to the required property 'text' missing."
        } else {
            $Text = $JsonParameters.PSobject.Properties["text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "file_citation"))) {
            throw "Error! JSON cannot be serialized due to the required property 'file_citation' missing."
        } else {
            $FileCitation = $JsonParameters.PSobject.Properties["file_citation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "start_index"))) {
            throw "Error! JSON cannot be serialized due to the required property 'start_index' missing."
        } else {
            $StartIndex = $JsonParameters.PSobject.Properties["start_index"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "end_index"))) {
            throw "Error! JSON cannot be serialized due to the required property 'end_index' missing."
        } else {
            $EndIndex = $JsonParameters.PSobject.Properties["end_index"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "text" = ${Text}
            "file_citation" = ${FileCitation}
            "start_index" = ${StartIndex}
            "end_index" = ${EndIndex}
        }

        return $PSO
    }

}

