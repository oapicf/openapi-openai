#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the ""retrieval"" tool to search files.

.PARAMETER Index
The index of the annotation in the text content part.
.PARAMETER Type
Always `file_citation`.
.PARAMETER Text
The text in the message content that needs to be replaced.
.PARAMETER FileCitation
No description available.
.PARAMETER StartIndex
No description available.
.PARAMETER EndIndex
No description available.
.OUTPUTS

MessageDeltaContentTextAnnotationsFileCitationObject<PSCustomObject>
#>

function Initialize-MessageDeltaContentTextAnnotationsFileCitationObject {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Index},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("file_citation")]
        [String]
        ${Type},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Text},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FileCitation},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${StartIndex},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${EndIndex}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => MessageDeltaContentTextAnnotationsFileCitationObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Index) {
            throw "invalid value for 'Index', 'Index' cannot be null."
        }

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($StartIndex -and $StartIndex -lt 0) {
          throw "invalid value for 'StartIndex', must be greater than or equal to 0."
        }

        if ($EndIndex -and $EndIndex -lt 0) {
          throw "invalid value for 'EndIndex', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "index" = ${Index}
            "type" = ${Type}
            "text" = ${Text}
            "file_citation" = ${FileCitation}
            "start_index" = ${StartIndex}
            "end_index" = ${EndIndex}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MessageDeltaContentTextAnnotationsFileCitationObject<PSCustomObject>

.DESCRIPTION

Convert from JSON to MessageDeltaContentTextAnnotationsFileCitationObject<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MessageDeltaContentTextAnnotationsFileCitationObject<PSCustomObject>
#>
function ConvertFrom-JsonToMessageDeltaContentTextAnnotationsFileCitationObject {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => MessageDeltaContentTextAnnotationsFileCitationObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in MessageDeltaContentTextAnnotationsFileCitationObject
        $AllProperties = ("index", "type", "text", "file_citation", "start_index", "end_index")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'index' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "index"))) {
            throw "Error! JSON cannot be serialized due to the required property 'index' missing."
        } else {
            $Index = $JsonParameters.PSobject.Properties["index"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "text"))) { #optional property not found
            $Text = $null
        } else {
            $Text = $JsonParameters.PSobject.Properties["text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "file_citation"))) { #optional property not found
            $FileCitation = $null
        } else {
            $FileCitation = $JsonParameters.PSobject.Properties["file_citation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "start_index"))) { #optional property not found
            $StartIndex = $null
        } else {
            $StartIndex = $JsonParameters.PSobject.Properties["start_index"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "end_index"))) { #optional property not found
            $EndIndex = $null
        } else {
            $EndIndex = $JsonParameters.PSobject.Properties["end_index"].value
        }

        $PSO = [PSCustomObject]@{
            "index" = ${Index}
            "type" = ${Type}
            "text" = ${Text}
            "file_citation" = ${FileCitation}
            "start_index" = ${StartIndex}
            "end_index" = ${EndIndex}
        }

        return $PSO
    }

}

