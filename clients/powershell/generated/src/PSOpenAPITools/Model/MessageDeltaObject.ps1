#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents a message delta i.e. any changed fields on a message during streaming. 

.PARAMETER Id
The identifier of the message, which can be referenced in API endpoints.
.PARAMETER Object
The object type, which is always `thread.message.delta`.
.PARAMETER Delta
No description available.
.OUTPUTS

MessageDeltaObject<PSCustomObject>
#>

function Initialize-MessageDeltaObject {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("thread.message.delta")]
        [String]
        ${Object},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Delta}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => MessageDeltaObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Object) {
            throw "invalid value for 'Object', 'Object' cannot be null."
        }

        if ($null -eq $Delta) {
            throw "invalid value for 'Delta', 'Delta' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "object" = ${Object}
            "delta" = ${Delta}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MessageDeltaObject<PSCustomObject>

.DESCRIPTION

Convert from JSON to MessageDeltaObject<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MessageDeltaObject<PSCustomObject>
#>
function ConvertFrom-JsonToMessageDeltaObject {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => MessageDeltaObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in MessageDeltaObject
        $AllProperties = ("id", "object", "delta")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "object"))) {
            throw "Error! JSON cannot be serialized due to the required property 'object' missing."
        } else {
            $Object = $JsonParameters.PSobject.Properties["object"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "delta"))) {
            throw "Error! JSON cannot be serialized due to the required property 'delta' missing."
        } else {
            $Delta = $JsonParameters.PSobject.Properties["delta"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "object" = ${Object}
            "delta" = ${Delta}
        }

        return $PSO
    }

}

