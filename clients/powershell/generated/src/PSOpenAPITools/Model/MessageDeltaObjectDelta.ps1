#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The delta containing the fields that have changed on the Message.

.PARAMETER Role
The entity that produced the message. One of `user` or `assistant`.
.PARAMETER Content
The content of the message in array of text and/or images.
.PARAMETER FileIds
A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
.OUTPUTS

MessageDeltaObjectDelta<PSCustomObject>
#>

function Initialize-MessageDeltaObjectDelta {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("user", "assistant")]
        [String]
        ${Role},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Content},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${FileIds}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => MessageDeltaObjectDelta' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$FileIds -and $FileIds.length -gt 10) {
            throw "invalid value for 'FileIds', number of items must be less than or equal to 10."
        }


        $PSO = [PSCustomObject]@{
            "role" = ${Role}
            "content" = ${Content}
            "file_ids" = ${FileIds}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MessageDeltaObjectDelta<PSCustomObject>

.DESCRIPTION

Convert from JSON to MessageDeltaObjectDelta<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MessageDeltaObjectDelta<PSCustomObject>
#>
function ConvertFrom-JsonToMessageDeltaObjectDelta {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => MessageDeltaObjectDelta' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in MessageDeltaObjectDelta
        $AllProperties = ("role", "content", "file_ids")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "role"))) { #optional property not found
            $Role = $null
        } else {
            $Role = $JsonParameters.PSobject.Properties["role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content"))) { #optional property not found
            $Content = $null
        } else {
            $Content = $JsonParameters.PSobject.Properties["content"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "file_ids"))) { #optional property not found
            $FileIds = $null
        } else {
            $FileIds = $JsonParameters.PSobject.Properties["file_ids"].value
        }

        $PSO = [PSCustomObject]@{
            "role" = ${Role}
            "content" = ${Content}
            "file_ids" = ${FileIds}
        }

        return $PSO
    }

}

