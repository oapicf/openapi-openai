#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents a message within a [thread](/docs/api-reference/threads).

.PARAMETER Id
The identifier, which can be referenced in API endpoints.
.PARAMETER Object
The object type, which is always `thread.message`.
.PARAMETER CreatedAt
The Unix timestamp (in seconds) for when the message was created.
.PARAMETER ThreadId
The [thread](/docs/api-reference/threads) ID that this message belongs to.
.PARAMETER Status
The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
.PARAMETER IncompleteDetails
No description available.
.PARAMETER CompletedAt
The Unix timestamp (in seconds) for when the message was completed.
.PARAMETER IncompleteAt
The Unix timestamp (in seconds) for when the message was marked as incomplete.
.PARAMETER Role
The entity that produced the message. One of `user` or `assistant`.
.PARAMETER Content
The content of the message in array of text and/or images.
.PARAMETER AssistantId
If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
.PARAMETER RunId
The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
.PARAMETER FileIds
A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
.PARAMETER Metadata
Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
.OUTPUTS

MessageObject<PSCustomObject>
#>

function Initialize-MessageObject {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("thread.message")]
        [String]
        ${Object},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${CreatedAt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ThreadId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("in_progress", "incomplete", "completed")]
        [String]
        ${Status},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IncompleteDetails},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CompletedAt},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${IncompleteAt},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("user", "assistant")]
        [String]
        ${Role},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Content},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssistantId},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RunId},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${FileIds},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Metadata}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => MessageObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Object) {
            throw "invalid value for 'Object', 'Object' cannot be null."
        }

        if ($null -eq $CreatedAt) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }

        if ($null -eq $ThreadId) {
            throw "invalid value for 'ThreadId', 'ThreadId' cannot be null."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }

        if ($null -eq $Role) {
            throw "invalid value for 'Role', 'Role' cannot be null."
        }

        if ($null -eq $Content) {
            throw "invalid value for 'Content', 'Content' cannot be null."
        }

        if ($null -eq $FileIds) {
            throw "invalid value for 'FileIds', 'FileIds' cannot be null."
        }

        if ($FileIds.length -gt 10) {
            throw "invalid value for 'FileIds', number of items must be less than or equal to 10."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "object" = ${Object}
            "created_at" = ${CreatedAt}
            "thread_id" = ${ThreadId}
            "status" = ${Status}
            "incomplete_details" = ${IncompleteDetails}
            "completed_at" = ${CompletedAt}
            "incomplete_at" = ${IncompleteAt}
            "role" = ${Role}
            "content" = ${Content}
            "assistant_id" = ${AssistantId}
            "run_id" = ${RunId}
            "file_ids" = ${FileIds}
            "metadata" = ${Metadata}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MessageObject<PSCustomObject>

.DESCRIPTION

Convert from JSON to MessageObject<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MessageObject<PSCustomObject>
#>
function ConvertFrom-JsonToMessageObject {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => MessageObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in MessageObject
        $AllProperties = ("id", "object", "created_at", "thread_id", "status", "incomplete_details", "completed_at", "incomplete_at", "role", "content", "assistant_id", "run_id", "file_ids", "metadata")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "object"))) {
            throw "Error! JSON cannot be serialized due to the required property 'object' missing."
        } else {
            $Object = $JsonParameters.PSobject.Properties["object"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created_at' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["created_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "thread_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'thread_id' missing."
        } else {
            $ThreadId = $JsonParameters.PSobject.Properties["thread_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "incomplete_details"))) {
            throw "Error! JSON cannot be serialized due to the required property 'incomplete_details' missing."
        } else {
            $IncompleteDetails = $JsonParameters.PSobject.Properties["incomplete_details"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "completed_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'completed_at' missing."
        } else {
            $CompletedAt = $JsonParameters.PSobject.Properties["completed_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "incomplete_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'incomplete_at' missing."
        } else {
            $IncompleteAt = $JsonParameters.PSobject.Properties["incomplete_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "role"))) {
            throw "Error! JSON cannot be serialized due to the required property 'role' missing."
        } else {
            $Role = $JsonParameters.PSobject.Properties["role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content"))) {
            throw "Error! JSON cannot be serialized due to the required property 'content' missing."
        } else {
            $Content = $JsonParameters.PSobject.Properties["content"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assistant_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'assistant_id' missing."
        } else {
            $AssistantId = $JsonParameters.PSobject.Properties["assistant_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "run_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'run_id' missing."
        } else {
            $RunId = $JsonParameters.PSobject.Properties["run_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "file_ids"))) {
            throw "Error! JSON cannot be serialized due to the required property 'file_ids' missing."
        } else {
            $FileIds = $JsonParameters.PSobject.Properties["file_ids"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadata"))) {
            throw "Error! JSON cannot be serialized due to the required property 'metadata' missing."
        } else {
            $Metadata = $JsonParameters.PSobject.Properties["metadata"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "object" = ${Object}
            "created_at" = ${CreatedAt}
            "thread_id" = ${ThreadId}
            "status" = ${Status}
            "incomplete_details" = ${IncompleteDetails}
            "completed_at" = ${CompletedAt}
            "incomplete_at" = ${IncompleteAt}
            "role" = ${Role}
            "content" = ${Content}
            "assistant_id" = ${AssistantId}
            "run_id" = ${RunId}
            "file_ids" = ${FileIds}
            "metadata" = ${Metadata}
        }

        return $PSO
    }

}

