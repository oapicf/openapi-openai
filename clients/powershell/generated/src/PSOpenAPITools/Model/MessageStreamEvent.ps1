#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Json

JSON object

.OUTPUTS

MessageStreamEvent<PSCustomObject>
#>
function ConvertFrom-JsonToMessageStreamEvent {
    [CmdletBinding()]
    Param (
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        $match = 0
        $matchType = $null
        $matchInstance = $null

        # try to match MessageStreamEventOneOf defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToMessageStreamEventOneOf $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "MessageStreamEventOneOf"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'MessageStreamEventOneOf' defined in oneOf (MessageStreamEvent). Proceeding to the next one if any."
        }

        # try to match MessageStreamEventOneOf1 defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToMessageStreamEventOneOf1 $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "MessageStreamEventOneOf1"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'MessageStreamEventOneOf1' defined in oneOf (MessageStreamEvent). Proceeding to the next one if any."
        }

        # try to match MessageStreamEventOneOf2 defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToMessageStreamEventOneOf2 $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "MessageStreamEventOneOf2"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'MessageStreamEventOneOf2' defined in oneOf (MessageStreamEvent). Proceeding to the next one if any."
        }

        # try to match MessageStreamEventOneOf3 defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToMessageStreamEventOneOf3 $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "MessageStreamEventOneOf3"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'MessageStreamEventOneOf3' defined in oneOf (MessageStreamEvent). Proceeding to the next one if any."
        }

        # try to match MessageStreamEventOneOf4 defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToMessageStreamEventOneOf4 $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "MessageStreamEventOneOf4"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'MessageStreamEventOneOf4' defined in oneOf (MessageStreamEvent). Proceeding to the next one if any."
        }

        if ($match -gt 1) {
            throw "Error! The JSON payload matches more than one type defined in oneOf schemas ([MessageStreamEventOneOf, MessageStreamEventOneOf1, MessageStreamEventOneOf2, MessageStreamEventOneOf3, MessageStreamEventOneOf4]). JSON Payload: $($Json)"
        } elseif ($match -eq 1) {
            return [PSCustomObject]@{
                "ActualType" = ${matchType}
                "ActualInstance" = ${matchInstance}
                "OneOfSchemas" = @("MessageStreamEventOneOf", "MessageStreamEventOneOf1", "MessageStreamEventOneOf2", "MessageStreamEventOneOf3", "MessageStreamEventOneOf4")
            }
        } else {
            throw "Error! The JSON payload doesn't matches any type defined in oneOf schemas ([MessageStreamEventOneOf, MessageStreamEventOneOf1, MessageStreamEventOneOf2, MessageStreamEventOneOf3, MessageStreamEventOneOf4]). JSON Payload: $($Json)"
        }
    }
}

