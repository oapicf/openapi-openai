#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents an execution run on a [thread](/docs/api-reference/threads).

.PARAMETER Id
The identifier, which can be referenced in API endpoints.
.PARAMETER Object
The object type, which is always `thread.run`.
.PARAMETER CreatedAt
The Unix timestamp (in seconds) for when the run was created.
.PARAMETER ThreadId
The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
.PARAMETER AssistantId
The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
.PARAMETER Status
The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
.PARAMETER RequiredAction
No description available.
.PARAMETER LastError
No description available.
.PARAMETER ExpiresAt
The Unix timestamp (in seconds) for when the run will expire.
.PARAMETER StartedAt
The Unix timestamp (in seconds) for when the run was started.
.PARAMETER CancelledAt
The Unix timestamp (in seconds) for when the run was cancelled.
.PARAMETER FailedAt
The Unix timestamp (in seconds) for when the run failed.
.PARAMETER CompletedAt
The Unix timestamp (in seconds) for when the run was completed.
.PARAMETER IncompleteDetails
No description available.
.PARAMETER Model
The model that the [assistant](/docs/api-reference/assistants) used for this run.
.PARAMETER Instructions
The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
.PARAMETER Tools
The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
.PARAMETER FileIds
The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
.PARAMETER Metadata
Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
.PARAMETER Usage
No description available.
.PARAMETER Temperature
The sampling temperature used for this run. If not set, defaults to 1.
.PARAMETER MaxPromptTokens
The maximum number of prompt tokens specified to have been used over the course of the run. 
.PARAMETER MaxCompletionTokens
The maximum number of completion tokens specified to have been used over the course of the run. 
.PARAMETER TruncationStrategy
No description available.
.PARAMETER ToolChoice
No description available.
.PARAMETER ResponseFormat
No description available.
.OUTPUTS

RunObject<PSCustomObject>
#>

function Initialize-RunObject {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("thread.run")]
        [String]
        ${Object},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${CreatedAt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ThreadId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssistantId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("queued", "in_progress", "requires_action", "cancelling", "cancelled", "failed", "completed", "expired")]
        [String]
        ${Status},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RequiredAction},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LastError},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ExpiresAt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${StartedAt},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CancelledAt},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FailedAt},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CompletedAt},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IncompleteDetails},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Instructions},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tools},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${FileIds},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Metadata},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Usage},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Temperature},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxPromptTokens},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxCompletionTokens},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TruncationStrategy},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ToolChoice},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ResponseFormat}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => RunObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Object) {
            throw "invalid value for 'Object', 'Object' cannot be null."
        }

        if ($null -eq $CreatedAt) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }

        if ($null -eq $ThreadId) {
            throw "invalid value for 'ThreadId', 'ThreadId' cannot be null."
        }

        if ($null -eq $AssistantId) {
            throw "invalid value for 'AssistantId', 'AssistantId' cannot be null."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }

        if ($null -eq $Model) {
            throw "invalid value for 'Model', 'Model' cannot be null."
        }

        if ($null -eq $Instructions) {
            throw "invalid value for 'Instructions', 'Instructions' cannot be null."
        }

        if ($null -eq $Tools) {
            throw "invalid value for 'Tools', 'Tools' cannot be null."
        }

        if ($Tools.length -gt 20) {
            throw "invalid value for 'Tools', number of items must be less than or equal to 20."
        }

        if ($null -eq $FileIds) {
            throw "invalid value for 'FileIds', 'FileIds' cannot be null."
        }

        if ($MaxPromptTokens -lt 256) {
          throw "invalid value for 'MaxPromptTokens', must be greater than or equal to 256."
        }

        if ($MaxCompletionTokens -lt 256) {
          throw "invalid value for 'MaxCompletionTokens', must be greater than or equal to 256."
        }

        if ($null -eq $TruncationStrategy) {
            throw "invalid value for 'TruncationStrategy', 'TruncationStrategy' cannot be null."
        }

        if ($null -eq $ToolChoice) {
            throw "invalid value for 'ToolChoice', 'ToolChoice' cannot be null."
        }

        if ($null -eq $ResponseFormat) {
            throw "invalid value for 'ResponseFormat', 'ResponseFormat' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "object" = ${Object}
            "created_at" = ${CreatedAt}
            "thread_id" = ${ThreadId}
            "assistant_id" = ${AssistantId}
            "status" = ${Status}
            "required_action" = ${RequiredAction}
            "last_error" = ${LastError}
            "expires_at" = ${ExpiresAt}
            "started_at" = ${StartedAt}
            "cancelled_at" = ${CancelledAt}
            "failed_at" = ${FailedAt}
            "completed_at" = ${CompletedAt}
            "incomplete_details" = ${IncompleteDetails}
            "model" = ${Model}
            "instructions" = ${Instructions}
            "tools" = ${Tools}
            "file_ids" = ${FileIds}
            "metadata" = ${Metadata}
            "usage" = ${Usage}
            "temperature" = ${Temperature}
            "max_prompt_tokens" = ${MaxPromptTokens}
            "max_completion_tokens" = ${MaxCompletionTokens}
            "truncation_strategy" = ${TruncationStrategy}
            "tool_choice" = ${ToolChoice}
            "response_format" = ${ResponseFormat}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RunObject<PSCustomObject>

.DESCRIPTION

Convert from JSON to RunObject<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RunObject<PSCustomObject>
#>
function ConvertFrom-JsonToRunObject {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => RunObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RunObject
        $AllProperties = ("id", "object", "created_at", "thread_id", "assistant_id", "status", "required_action", "last_error", "expires_at", "started_at", "cancelled_at", "failed_at", "completed_at", "incomplete_details", "model", "instructions", "tools", "file_ids", "metadata", "usage", "temperature", "max_prompt_tokens", "max_completion_tokens", "truncation_strategy", "tool_choice", "response_format")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "object"))) {
            throw "Error! JSON cannot be serialized due to the required property 'object' missing."
        } else {
            $Object = $JsonParameters.PSobject.Properties["object"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created_at' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["created_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "thread_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'thread_id' missing."
        } else {
            $ThreadId = $JsonParameters.PSobject.Properties["thread_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assistant_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'assistant_id' missing."
        } else {
            $AssistantId = $JsonParameters.PSobject.Properties["assistant_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "required_action"))) {
            throw "Error! JSON cannot be serialized due to the required property 'required_action' missing."
        } else {
            $RequiredAction = $JsonParameters.PSobject.Properties["required_action"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_error"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_error' missing."
        } else {
            $LastError = $JsonParameters.PSobject.Properties["last_error"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expires_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'expires_at' missing."
        } else {
            $ExpiresAt = $JsonParameters.PSobject.Properties["expires_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "started_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'started_at' missing."
        } else {
            $StartedAt = $JsonParameters.PSobject.Properties["started_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cancelled_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cancelled_at' missing."
        } else {
            $CancelledAt = $JsonParameters.PSobject.Properties["cancelled_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failed_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'failed_at' missing."
        } else {
            $FailedAt = $JsonParameters.PSobject.Properties["failed_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "completed_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'completed_at' missing."
        } else {
            $CompletedAt = $JsonParameters.PSobject.Properties["completed_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "incomplete_details"))) {
            throw "Error! JSON cannot be serialized due to the required property 'incomplete_details' missing."
        } else {
            $IncompleteDetails = $JsonParameters.PSobject.Properties["incomplete_details"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) {
            throw "Error! JSON cannot be serialized due to the required property 'model' missing."
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instructions"))) {
            throw "Error! JSON cannot be serialized due to the required property 'instructions' missing."
        } else {
            $Instructions = $JsonParameters.PSobject.Properties["instructions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tools"))) {
            throw "Error! JSON cannot be serialized due to the required property 'tools' missing."
        } else {
            $Tools = $JsonParameters.PSobject.Properties["tools"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "file_ids"))) {
            throw "Error! JSON cannot be serialized due to the required property 'file_ids' missing."
        } else {
            $FileIds = $JsonParameters.PSobject.Properties["file_ids"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadata"))) {
            throw "Error! JSON cannot be serialized due to the required property 'metadata' missing."
        } else {
            $Metadata = $JsonParameters.PSobject.Properties["metadata"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usage"))) {
            throw "Error! JSON cannot be serialized due to the required property 'usage' missing."
        } else {
            $Usage = $JsonParameters.PSobject.Properties["usage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "max_prompt_tokens"))) {
            throw "Error! JSON cannot be serialized due to the required property 'max_prompt_tokens' missing."
        } else {
            $MaxPromptTokens = $JsonParameters.PSobject.Properties["max_prompt_tokens"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "max_completion_tokens"))) {
            throw "Error! JSON cannot be serialized due to the required property 'max_completion_tokens' missing."
        } else {
            $MaxCompletionTokens = $JsonParameters.PSobject.Properties["max_completion_tokens"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "truncation_strategy"))) {
            throw "Error! JSON cannot be serialized due to the required property 'truncation_strategy' missing."
        } else {
            $TruncationStrategy = $JsonParameters.PSobject.Properties["truncation_strategy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tool_choice"))) {
            throw "Error! JSON cannot be serialized due to the required property 'tool_choice' missing."
        } else {
            $ToolChoice = $JsonParameters.PSobject.Properties["tool_choice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "response_format"))) {
            throw "Error! JSON cannot be serialized due to the required property 'response_format' missing."
        } else {
            $ResponseFormat = $JsonParameters.PSobject.Properties["response_format"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "temperature"))) { #optional property not found
            $Temperature = $null
        } else {
            $Temperature = $JsonParameters.PSobject.Properties["temperature"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "object" = ${Object}
            "created_at" = ${CreatedAt}
            "thread_id" = ${ThreadId}
            "assistant_id" = ${AssistantId}
            "status" = ${Status}
            "required_action" = ${RequiredAction}
            "last_error" = ${LastError}
            "expires_at" = ${ExpiresAt}
            "started_at" = ${StartedAt}
            "cancelled_at" = ${CancelledAt}
            "failed_at" = ${FailedAt}
            "completed_at" = ${CompletedAt}
            "incomplete_details" = ${IncompleteDetails}
            "model" = ${Model}
            "instructions" = ${Instructions}
            "tools" = ${Tools}
            "file_ids" = ${FileIds}
            "metadata" = ${Metadata}
            "usage" = ${Usage}
            "temperature" = ${Temperature}
            "max_prompt_tokens" = ${MaxPromptTokens}
            "max_completion_tokens" = ${MaxCompletionTokens}
            "truncation_strategy" = ${TruncationStrategy}
            "tool_choice" = ${ToolChoice}
            "response_format" = ${ResponseFormat}
        }

        return $PSO
    }

}

