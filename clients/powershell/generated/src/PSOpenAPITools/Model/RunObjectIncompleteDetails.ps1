#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details on why the run is incomplete. Will be `null` if the run is not incomplete.

.PARAMETER Reason
The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
.OUTPUTS

RunObjectIncompleteDetails<PSCustomObject>
#>

function Initialize-RunObjectIncompleteDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("max_completion_tokens", "max_prompt_tokens")]
        [String]
        ${Reason}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => RunObjectIncompleteDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "reason" = ${Reason}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RunObjectIncompleteDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to RunObjectIncompleteDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RunObjectIncompleteDetails<PSCustomObject>
#>
function ConvertFrom-JsonToRunObjectIncompleteDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => RunObjectIncompleteDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RunObjectIncompleteDetails
        $AllProperties = ("reason")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reason"))) { #optional property not found
            $Reason = $null
        } else {
            $Reason = $JsonParameters.PSobject.Properties["reason"].value
        }

        $PSO = [PSCustomObject]@{
            "reason" = ${Reason}
        }

        return $PSO
    }

}

