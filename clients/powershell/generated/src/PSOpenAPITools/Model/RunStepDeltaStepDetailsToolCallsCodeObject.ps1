#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of the Code Interpreter tool call the run step was involved in.

.PARAMETER Index
The index of the tool call in the tool calls array.
.PARAMETER Id
The ID of the tool call.
.PARAMETER Type
The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
.PARAMETER CodeInterpreter
No description available.
.OUTPUTS

RunStepDeltaStepDetailsToolCallsCodeObject<PSCustomObject>
#>

function Initialize-RunStepDeltaStepDetailsToolCallsCodeObject {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Index},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("code_interpreter")]
        [String]
        ${Type},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CodeInterpreter}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => RunStepDeltaStepDetailsToolCallsCodeObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Index) {
            throw "invalid value for 'Index', 'Index' cannot be null."
        }

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "index" = ${Index}
            "id" = ${Id}
            "type" = ${Type}
            "code_interpreter" = ${CodeInterpreter}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RunStepDeltaStepDetailsToolCallsCodeObject<PSCustomObject>

.DESCRIPTION

Convert from JSON to RunStepDeltaStepDetailsToolCallsCodeObject<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RunStepDeltaStepDetailsToolCallsCodeObject<PSCustomObject>
#>
function ConvertFrom-JsonToRunStepDeltaStepDetailsToolCallsCodeObject {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => RunStepDeltaStepDetailsToolCallsCodeObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RunStepDeltaStepDetailsToolCallsCodeObject
        $AllProperties = ("index", "id", "type", "code_interpreter")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'index' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "index"))) {
            throw "Error! JSON cannot be serialized due to the required property 'index' missing."
        } else {
            $Index = $JsonParameters.PSobject.Properties["index"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code_interpreter"))) { #optional property not found
            $CodeInterpreter = $null
        } else {
            $CodeInterpreter = $JsonParameters.PSobject.Properties["code_interpreter"].value
        }

        $PSO = [PSCustomObject]@{
            "index" = ${Index}
            "id" = ${Id}
            "type" = ${Type}
            "code_interpreter" = ${CodeInterpreter}
        }

        return $PSO
    }

}

