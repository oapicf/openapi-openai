#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The definition of the function that was called.

.PARAMETER Name
The name of the function.
.PARAMETER Arguments
The arguments passed to the function.
.PARAMETER Output
The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
.OUTPUTS

RunStepDetailsToolCallsFunctionObjectFunction<PSCustomObject>
#>

function Initialize-RunStepDetailsToolCallsFunctionObjectFunction {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Arguments},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Output}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => RunStepDetailsToolCallsFunctionObjectFunction' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Arguments) {
            throw "invalid value for 'Arguments', 'Arguments' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "arguments" = ${Arguments}
            "output" = ${Output}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RunStepDetailsToolCallsFunctionObjectFunction<PSCustomObject>

.DESCRIPTION

Convert from JSON to RunStepDetailsToolCallsFunctionObjectFunction<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RunStepDetailsToolCallsFunctionObjectFunction<PSCustomObject>
#>
function ConvertFrom-JsonToRunStepDetailsToolCallsFunctionObjectFunction {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => RunStepDetailsToolCallsFunctionObjectFunction' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RunStepDetailsToolCallsFunctionObjectFunction
        $AllProperties = ("name", "arguments", "output")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "arguments"))) {
            throw "Error! JSON cannot be serialized due to the required property 'arguments' missing."
        } else {
            $Arguments = $JsonParameters.PSobject.Properties["arguments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "output"))) {
            throw "Error! JSON cannot be serialized due to the required property 'output' missing."
        } else {
            $Output = $JsonParameters.PSobject.Properties["output"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "arguments" = ${Arguments}
            "output" = ${Output}
        }

        return $PSO
    }

}

