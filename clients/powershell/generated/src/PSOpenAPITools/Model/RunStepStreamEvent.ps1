#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Json

JSON object

.OUTPUTS

RunStepStreamEvent<PSCustomObject>
#>
function ConvertFrom-JsonToRunStepStreamEvent {
    [CmdletBinding()]
    Param (
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        $match = 0
        $matchType = $null
        $matchInstance = $null

        # try to match RunStepStreamEventOneOf defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToRunStepStreamEventOneOf $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "RunStepStreamEventOneOf"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'RunStepStreamEventOneOf' defined in oneOf (RunStepStreamEvent). Proceeding to the next one if any."
        }

        # try to match RunStepStreamEventOneOf1 defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToRunStepStreamEventOneOf1 $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "RunStepStreamEventOneOf1"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'RunStepStreamEventOneOf1' defined in oneOf (RunStepStreamEvent). Proceeding to the next one if any."
        }

        # try to match RunStepStreamEventOneOf2 defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToRunStepStreamEventOneOf2 $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "RunStepStreamEventOneOf2"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'RunStepStreamEventOneOf2' defined in oneOf (RunStepStreamEvent). Proceeding to the next one if any."
        }

        # try to match RunStepStreamEventOneOf3 defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToRunStepStreamEventOneOf3 $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "RunStepStreamEventOneOf3"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'RunStepStreamEventOneOf3' defined in oneOf (RunStepStreamEvent). Proceeding to the next one if any."
        }

        # try to match RunStepStreamEventOneOf4 defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToRunStepStreamEventOneOf4 $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "RunStepStreamEventOneOf4"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'RunStepStreamEventOneOf4' defined in oneOf (RunStepStreamEvent). Proceeding to the next one if any."
        }

        # try to match RunStepStreamEventOneOf5 defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToRunStepStreamEventOneOf5 $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "RunStepStreamEventOneOf5"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'RunStepStreamEventOneOf5' defined in oneOf (RunStepStreamEvent). Proceeding to the next one if any."
        }

        # try to match RunStepStreamEventOneOf6 defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToRunStepStreamEventOneOf6 $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "RunStepStreamEventOneOf6"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'RunStepStreamEventOneOf6' defined in oneOf (RunStepStreamEvent). Proceeding to the next one if any."
        }

        if ($match -gt 1) {
            throw "Error! The JSON payload matches more than one type defined in oneOf schemas ([RunStepStreamEventOneOf, RunStepStreamEventOneOf1, RunStepStreamEventOneOf2, RunStepStreamEventOneOf3, RunStepStreamEventOneOf4, RunStepStreamEventOneOf5, RunStepStreamEventOneOf6]). JSON Payload: $($Json)"
        } elseif ($match -eq 1) {
            return [PSCustomObject]@{
                "ActualType" = ${matchType}
                "ActualInstance" = ${matchInstance}
                "OneOfSchemas" = @("RunStepStreamEventOneOf", "RunStepStreamEventOneOf1", "RunStepStreamEventOneOf2", "RunStepStreamEventOneOf3", "RunStepStreamEventOneOf4", "RunStepStreamEventOneOf5", "RunStepStreamEventOneOf6")
            }
        } else {
            throw "Error! The JSON payload doesn't matches any type defined in oneOf schemas ([RunStepStreamEventOneOf, RunStepStreamEventOneOf1, RunStepStreamEventOneOf2, RunStepStreamEventOneOf3, RunStepStreamEventOneOf4, RunStepStreamEventOneOf5, RunStepStreamEventOneOf6]). JSON Payload: $($Json)"
        }
    }
}

