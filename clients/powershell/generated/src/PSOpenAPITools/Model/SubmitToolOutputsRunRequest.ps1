#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ToolOutputs
A list of tools for which the outputs are being submitted.
.PARAMETER Stream
If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message. 
.OUTPUTS

SubmitToolOutputsRunRequest<PSCustomObject>
#>

function Initialize-SubmitToolOutputsRunRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ToolOutputs},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Stream}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SubmitToolOutputsRunRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ToolOutputs) {
            throw "invalid value for 'ToolOutputs', 'ToolOutputs' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "tool_outputs" = ${ToolOutputs}
            "stream" = ${Stream}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SubmitToolOutputsRunRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to SubmitToolOutputsRunRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SubmitToolOutputsRunRequest<PSCustomObject>
#>
function ConvertFrom-JsonToSubmitToolOutputsRunRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SubmitToolOutputsRunRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SubmitToolOutputsRunRequest
        $AllProperties = ("tool_outputs", "stream")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'tool_outputs' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tool_outputs"))) {
            throw "Error! JSON cannot be serialized due to the required property 'tool_outputs' missing."
        } else {
            $ToolOutputs = $JsonParameters.PSobject.Properties["tool_outputs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stream"))) { #optional property not found
            $Stream = $null
        } else {
            $Stream = $JsonParameters.PSobject.Properties["stream"].value
        }

        $PSO = [PSCustomObject]@{
            "tool_outputs" = ${ToolOutputs}
            "stream" = ${Stream}
        }

        return $PSO
    }

}

