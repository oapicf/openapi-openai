#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
Unique identifier of the segment.
.PARAMETER Seek
Seek offset of the segment.
.PARAMETER Start
Start time of the segment in seconds.
.PARAMETER VarEnd
End time of the segment in seconds.
.PARAMETER Text
Text content of the segment.
.PARAMETER Tokens
Array of token IDs for the text content.
.PARAMETER Temperature
Temperature parameter used for generating the segment.
.PARAMETER AvgLogprob
Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
.PARAMETER CompressionRatio
Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
.PARAMETER NoSpeechProb
Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
.OUTPUTS

TranscriptionSegment<PSCustomObject>
#>

function Initialize-TranscriptionSegment {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Seek},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Double]
        ${Start},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Double]
        ${VarEnd},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Text},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Tokens},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [Double]
        ${Temperature},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Double]
        ${AvgLogprob},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [Double]
        ${CompressionRatio},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Double]
        ${NoSpeechProb}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => TranscriptionSegment' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Seek) {
            throw "invalid value for 'Seek', 'Seek' cannot be null."
        }

        if ($null -eq $Start) {
            throw "invalid value for 'Start', 'Start' cannot be null."
        }

        if ($null -eq $VarEnd) {
            throw "invalid value for 'VarEnd', 'VarEnd' cannot be null."
        }

        if ($null -eq $Text) {
            throw "invalid value for 'Text', 'Text' cannot be null."
        }

        if ($null -eq $Tokens) {
            throw "invalid value for 'Tokens', 'Tokens' cannot be null."
        }

        if ($null -eq $Temperature) {
            throw "invalid value for 'Temperature', 'Temperature' cannot be null."
        }

        if ($null -eq $AvgLogprob) {
            throw "invalid value for 'AvgLogprob', 'AvgLogprob' cannot be null."
        }

        if ($null -eq $CompressionRatio) {
            throw "invalid value for 'CompressionRatio', 'CompressionRatio' cannot be null."
        }

        if ($null -eq $NoSpeechProb) {
            throw "invalid value for 'NoSpeechProb', 'NoSpeechProb' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "seek" = ${Seek}
            "start" = ${Start}
            "end" = ${VarEnd}
            "text" = ${Text}
            "tokens" = ${Tokens}
            "temperature" = ${Temperature}
            "avg_logprob" = ${AvgLogprob}
            "compression_ratio" = ${CompressionRatio}
            "no_speech_prob" = ${NoSpeechProb}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TranscriptionSegment<PSCustomObject>

.DESCRIPTION

Convert from JSON to TranscriptionSegment<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TranscriptionSegment<PSCustomObject>
#>
function ConvertFrom-JsonToTranscriptionSegment {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => TranscriptionSegment' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TranscriptionSegment
        $AllProperties = ("id", "seek", "start", "end", "text", "tokens", "temperature", "avg_logprob", "compression_ratio", "no_speech_prob")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "seek"))) {
            throw "Error! JSON cannot be serialized due to the required property 'seek' missing."
        } else {
            $Seek = $JsonParameters.PSobject.Properties["seek"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "start"))) {
            throw "Error! JSON cannot be serialized due to the required property 'start' missing."
        } else {
            $Start = $JsonParameters.PSobject.Properties["start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "end"))) {
            throw "Error! JSON cannot be serialized due to the required property 'end' missing."
        } else {
            $VarEnd = $JsonParameters.PSobject.Properties["end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "text"))) {
            throw "Error! JSON cannot be serialized due to the required property 'text' missing."
        } else {
            $Text = $JsonParameters.PSobject.Properties["text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tokens"))) {
            throw "Error! JSON cannot be serialized due to the required property 'tokens' missing."
        } else {
            $Tokens = $JsonParameters.PSobject.Properties["tokens"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "temperature"))) {
            throw "Error! JSON cannot be serialized due to the required property 'temperature' missing."
        } else {
            $Temperature = $JsonParameters.PSobject.Properties["temperature"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "avg_logprob"))) {
            throw "Error! JSON cannot be serialized due to the required property 'avg_logprob' missing."
        } else {
            $AvgLogprob = $JsonParameters.PSobject.Properties["avg_logprob"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "compression_ratio"))) {
            throw "Error! JSON cannot be serialized due to the required property 'compression_ratio' missing."
        } else {
            $CompressionRatio = $JsonParameters.PSobject.Properties["compression_ratio"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "no_speech_prob"))) {
            throw "Error! JSON cannot be serialized due to the required property 'no_speech_prob' missing."
        } else {
            $NoSpeechProb = $JsonParameters.PSobject.Properties["no_speech_prob"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "seek" = ${Seek}
            "start" = ${Start}
            "end" = ${VarEnd}
            "text" = ${Text}
            "tokens" = ${Tokens}
            "temperature" = ${Temperature}
            "avg_logprob" = ${AvgLogprob}
            "compression_ratio" = ${CompressionRatio}
            "no_speech_prob" = ${NoSpeechProb}
        }

        return $PSO
    }

}

