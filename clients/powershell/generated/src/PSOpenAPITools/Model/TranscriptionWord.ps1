#
# OpenAI API
# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
# Version: 2.0.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Word
The text content of the word.
.PARAMETER Start
Start time of the word in seconds.
.PARAMETER VarEnd
End time of the word in seconds.
.OUTPUTS

TranscriptionWord<PSCustomObject>
#>

function Initialize-TranscriptionWord {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Word},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Double]
        ${Start},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Double]
        ${VarEnd}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => TranscriptionWord' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Word) {
            throw "invalid value for 'Word', 'Word' cannot be null."
        }

        if ($null -eq $Start) {
            throw "invalid value for 'Start', 'Start' cannot be null."
        }

        if ($null -eq $VarEnd) {
            throw "invalid value for 'VarEnd', 'VarEnd' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "word" = ${Word}
            "start" = ${Start}
            "end" = ${VarEnd}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TranscriptionWord<PSCustomObject>

.DESCRIPTION

Convert from JSON to TranscriptionWord<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TranscriptionWord<PSCustomObject>
#>
function ConvertFrom-JsonToTranscriptionWord {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => TranscriptionWord' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TranscriptionWord
        $AllProperties = ("word", "start", "end")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'word' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "word"))) {
            throw "Error! JSON cannot be serialized due to the required property 'word' missing."
        } else {
            $Word = $JsonParameters.PSobject.Properties["word"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "start"))) {
            throw "Error! JSON cannot be serialized due to the required property 'start' missing."
        } else {
            $Start = $JsonParameters.PSobject.Properties["start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "end"))) {
            throw "Error! JSON cannot be serialized due to the required property 'end' missing."
        } else {
            $VarEnd = $JsonParameters.PSobject.Properties["end"].value
        }

        $PSO = [PSCustomObject]@{
            "word" = ${Word}
            "start" = ${Start}
            "end" = ${VarEnd}
        }

        return $PSO
    }

}

