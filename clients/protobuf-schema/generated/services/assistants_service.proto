/*
  OpenAI API

  The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

  The version of the OpenAPI document: 2.0.0

  Contact: blah+oapicf@cliffano.com

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.assistantsservice;

import "google/protobuf/empty.proto";
import public "models/assistant_file_object.proto";
import public "models/assistant_object.proto";
import public "models/create_assistant_file_request.proto";
import public "models/create_assistant_request.proto";
import public "models/create_message_request.proto";
import public "models/create_run_request.proto";
import public "models/create_thread_and_run_request.proto";
import public "models/create_thread_request.proto";
import public "models/delete_assistant_file_response.proto";
import public "models/delete_assistant_response.proto";
import public "models/delete_thread_response.proto";
import public "models/list_assistant_files_response.proto";
import public "models/list_assistants_response.proto";
import public "models/list_message_files_response.proto";
import public "models/list_messages_response.proto";
import public "models/list_run_steps_response.proto";
import public "models/list_runs_response.proto";
import public "models/message_file_object.proto";
import public "models/message_object.proto";
import public "models/modify_assistant_request.proto";
import public "models/modify_message_request.proto";
import public "models/modify_run_request.proto";
import public "models/modify_thread_request.proto";
import public "models/run_object.proto";
import public "models/run_step_object.proto";
import public "models/submit_tool_outputs_run_request.proto";
import public "models/thread_object.proto";

service AssistantsService {
  rpc CancelRun (CancelRunRequest) returns (RunObject);

  rpc CreateAssistant (CreateAssistantRequest) returns (AssistantObject);

  rpc CreateAssistantFile (CreateAssistantFileRequest) returns (AssistantFileObject);

  rpc CreateMessage (CreateMessageRequest) returns (MessageObject);

  rpc CreateRun (CreateRunRequest) returns (RunObject);

  rpc CreateThread (CreateThreadRequest) returns (ThreadObject);

  rpc CreateThreadAndRun (CreateThreadAndRunRequest) returns (RunObject);

  rpc DeleteAssistant (DeleteAssistantRequest) returns (DeleteAssistantResponse);

  rpc DeleteAssistantFile (DeleteAssistantFileRequest) returns (DeleteAssistantFileResponse);

  rpc DeleteThread (DeleteThreadRequest) returns (DeleteThreadResponse);

  rpc GetAssistant (GetAssistantRequest) returns (AssistantObject);

  rpc GetAssistantFile (GetAssistantFileRequest) returns (AssistantFileObject);

  rpc GetMessage (GetMessageRequest) returns (MessageObject);

  rpc GetMessageFile (GetMessageFileRequest) returns (MessageFileObject);

  rpc GetRun (GetRunRequest) returns (RunObject);

  rpc GetRunStep (GetRunStepRequest) returns (RunStepObject);

  rpc GetThread (GetThreadRequest) returns (ThreadObject);

  rpc ListAssistantFiles (ListAssistantFilesRequest) returns (ListAssistantFilesResponse);

  rpc ListAssistants (ListAssistantsRequest) returns (ListAssistantsResponse);

  rpc ListMessageFiles (ListMessageFilesRequest) returns (ListMessageFilesResponse);

  rpc ListMessages (ListMessagesRequest) returns (ListMessagesResponse);

  rpc ListRunSteps (ListRunStepsRequest) returns (ListRunStepsResponse);

  rpc ListRuns (ListRunsRequest) returns (ListRunsResponse);

  rpc ModifyAssistant (ModifyAssistantRequest) returns (AssistantObject);

  rpc ModifyMessage (ModifyMessageRequest) returns (MessageObject);

  rpc ModifyRun (ModifyRunRequest) returns (RunObject);

  rpc ModifyThread (ModifyThreadRequest) returns (ThreadObject);

  rpc SubmitToolOuputsToRun (SubmitToolOuputsToRunRequest) returns (RunObject);

}

message CancelRunRequest {
  // The ID of the thread to which this run belongs.
  string threadId = 1;
  // The ID of the run to cancel.
  string runId = 2;

}

message CreateAssistantRequest {
  CreateAssistantRequest createAssistantRequest = 1;

}

message CreateAssistantFileRequest {
  // The ID of the assistant for which to create a File. 
  string assistantId = 1;
  CreateAssistantFileRequest createAssistantFileRequest = 2;

}

message CreateMessageRequest {
  // The ID of the [thread](/docs/api-reference/threads) to create a message for.
  string threadId = 1;
  CreateMessageRequest createMessageRequest = 2;

}

message CreateRunRequest {
  // The ID of the thread to run.
  string threadId = 1;
  CreateRunRequest createRunRequest = 2;

}

message CreateThreadRequest {
  CreateThreadRequest createThreadRequest = 1;

}

message CreateThreadAndRunRequest {
  CreateThreadAndRunRequest createThreadAndRunRequest = 1;

}

message DeleteAssistantRequest {
  // The ID of the assistant to delete.
  string assistantId = 1;

}

message DeleteAssistantFileRequest {
  // The ID of the assistant that the file belongs to.
  string assistantId = 1;
  // The ID of the file to delete.
  string fileId = 2;

}

message DeleteThreadRequest {
  // The ID of the thread to delete.
  string threadId = 1;

}

message GetAssistantRequest {
  // The ID of the assistant to retrieve.
  string assistantId = 1;

}

message GetAssistantFileRequest {
  // The ID of the assistant who the file belongs to.
  string assistantId = 1;
  // The ID of the file we're getting.
  string fileId = 2;

}

message GetMessageRequest {
  // The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
  string threadId = 1;
  // The ID of the message to retrieve.
  string messageId = 2;

}

message GetMessageFileRequest {
  // The ID of the thread to which the message and File belong.
  string threadId = 1;
  // The ID of the message the file belongs to.
  string messageId = 2;
  // The ID of the file being retrieved.
  string fileId = 3;

}

message GetRunRequest {
  // The ID of the [thread](/docs/api-reference/threads) that was run.
  string threadId = 1;
  // The ID of the run to retrieve.
  string runId = 2;

}

message GetRunStepRequest {
  // The ID of the thread to which the run and run step belongs.
  string threadId = 1;
  // The ID of the run to which the run step belongs.
  string runId = 2;
  // The ID of the run step to retrieve.
  string stepId = 3;

}

message GetThreadRequest {
  // The ID of the thread to retrieve.
  string threadId = 1;

}

message ListAssistantFilesRequest {
  // The ID of the assistant the file belongs to.
  string assistantId = 1;
  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
  int32 limit = 2;
  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
  string order = 3;
  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
  string after = 4;
  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
  string before = 5;

}

message ListAssistantsRequest {
  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
  int32 limit = 1;
  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
  string order = 2;
  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
  string after = 3;
  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
  string before = 4;

}

message ListMessageFilesRequest {
  // The ID of the thread that the message and files belong to.
  string threadId = 1;
  // The ID of the message that the files belongs to.
  string messageId = 2;
  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
  int32 limit = 3;
  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
  string order = 4;
  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
  string after = 5;
  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
  string before = 6;

}

message ListMessagesRequest {
  // The ID of the [thread](/docs/api-reference/threads) the messages belong to.
  string threadId = 1;
  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
  int32 limit = 2;
  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
  string order = 3;
  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
  string after = 4;
  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
  string before = 5;
  // Filter messages by the run ID that generated them. 
  string runId = 6;

}

message ListRunStepsRequest {
  // The ID of the thread the run and run steps belong to.
  string threadId = 1;
  // The ID of the run the run steps belong to.
  string runId = 2;
  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
  int32 limit = 3;
  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
  string order = 4;
  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
  string after = 5;
  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
  string before = 6;

}

message ListRunsRequest {
  // The ID of the thread the run belongs to.
  string threadId = 1;
  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
  int32 limit = 2;
  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
  string order = 3;
  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
  string after = 4;
  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
  string before = 5;

}

message ModifyAssistantRequest {
  // The ID of the assistant to modify.
  string assistantId = 1;
  ModifyAssistantRequest modifyAssistantRequest = 2;

}

message ModifyMessageRequest {
  // The ID of the thread to which this message belongs.
  string threadId = 1;
  // The ID of the message to modify.
  string messageId = 2;
  ModifyMessageRequest modifyMessageRequest = 3;

}

message ModifyRunRequest {
  // The ID of the [thread](/docs/api-reference/threads) that was run.
  string threadId = 1;
  // The ID of the run to modify.
  string runId = 2;
  ModifyRunRequest modifyRunRequest = 3;

}

message ModifyThreadRequest {
  // The ID of the thread to modify. Only the `metadata` can be modified.
  string threadId = 1;
  ModifyThreadRequest modifyThreadRequest = 2;

}

message SubmitToolOuputsToRunRequest {
  // The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
  string threadId = 1;
  // The ID of the run that requires the tool output submission.
  string runId = 2;
  SubmitToolOutputsRunRequest submitToolOutputsRunRequest = 3;

}

