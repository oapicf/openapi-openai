/*
  OpenAI API

  The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

  The version of the OpenAPI document: 2.0.0

  Contact: blah+oapicf@cliffano.com

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.audioservice;

import "google/protobuf/empty.proto";
import public "models/create_speech_request.proto";
import public "models/create_transcription200_response.proto";
import public "models/create_transcription_request_model.proto";
import public "models/create_translation200_response.proto";

service AudioService {
  rpc CreateSpeech (CreateSpeechRequest) returns (CreateSpeechResponse);

  rpc CreateTranscription (CreateTranscriptionRequest) returns (CreateTranscription200Response);

  rpc CreateTranslation (CreateTranslationRequest) returns (CreateTranslation200Response);

}

message CreateSpeechRequest {
  CreateSpeechRequest createSpeechRequest = 1;

}

message CreateSpeechResponse {
  string data = 1;
}

message CreateTranscriptionRequest {
  // The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
  string file = 1;
  CreateTranscriptionRequestModel model = 2;
  // The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
  string language = 3;
  // An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
  string prompt = 4;
  // The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. 
  string responseFormat = 5;
  // The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
  float temperature = 6;
  // The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency. 
  repeated string timestampGranularitiesLeft_Square_BracketRight_Square_Bracket = 7;

}

message CreateTranslationRequest {
  // The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
  string file = 1;
  CreateTranscriptionRequestModel model = 2;
  // An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. 
  string prompt = 3;
  // The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. 
  string responseFormat = 4;
  // The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
  float temperature = 5;

}

