/*
  OpenAI API

  APIs for sampling from and fine-tuning language models

  The version of the OpenAPI document: 2.0.0

  Contact: blah+oapicf@cliffano.com

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.openaiservice;

import "google/protobuf/empty.proto";
import public "models/create_chat_completion_request.proto";
import public "models/create_chat_completion_response.proto";
import public "models/create_completion_request.proto";
import public "models/create_completion_response.proto";
import public "models/create_edit_request.proto";
import public "models/create_edit_response.proto";
import public "models/create_embedding_request.proto";
import public "models/create_embedding_response.proto";
import public "models/create_fine_tune_request.proto";
import public "models/create_image_request.proto";
import public "models/create_moderation_request.proto";
import public "models/create_moderation_response.proto";
import public "models/create_transcription_request_model.proto";
import public "models/create_transcription_response.proto";
import public "models/create_translation_response.proto";
import public "models/delete_file_response.proto";
import public "models/delete_model_response.proto";
import public "models/fine_tune.proto";
import public "models/images_response.proto";
import public "models/list_files_response.proto";
import public "models/list_fine_tune_events_response.proto";
import public "models/list_fine_tunes_response.proto";
import public "models/list_models_response.proto";
import public "models/model.proto";
import public "models/open_ai_file.proto";

service OpenAIService {
  rpc CancelFineTune (CancelFineTuneRequest) returns (FineTune);

  rpc CreateChatCompletion (CreateChatCompletionRequest) returns (CreateChatCompletionResponse);

  rpc CreateCompletion (CreateCompletionRequest) returns (CreateCompletionResponse);

  rpc CreateEdit (CreateEditRequest) returns (CreateEditResponse);

  rpc CreateEmbedding (CreateEmbeddingRequest) returns (CreateEmbeddingResponse);

  rpc CreateFile (CreateFileRequest) returns (OpenAIFile);

  rpc CreateFineTune (CreateFineTuneRequest) returns (FineTune);

  rpc CreateImage (CreateImageRequest) returns (ImagesResponse);

  rpc CreateImageEdit (CreateImageEditRequest) returns (ImagesResponse);

  rpc CreateImageVariation (CreateImageVariationRequest) returns (ImagesResponse);

  rpc CreateModeration (CreateModerationRequest) returns (CreateModerationResponse);

  rpc CreateTranscription (CreateTranscriptionRequest) returns (CreateTranscriptionResponse);

  rpc CreateTranslation (CreateTranslationRequest) returns (CreateTranslationResponse);

  rpc DeleteFile (DeleteFileRequest) returns (DeleteFileResponse);

  rpc DeleteModel (DeleteModelRequest) returns (DeleteModelResponse);

  rpc DownloadFile (DownloadFileRequest) returns (DownloadFileResponse);

  rpc ListFiles (google.protobuf.Empty) returns (ListFilesResponse);

  rpc ListFineTuneEvents (ListFineTuneEventsRequest) returns (ListFineTuneEventsResponse);

  rpc ListFineTunes (google.protobuf.Empty) returns (ListFineTunesResponse);

  rpc ListModels (google.protobuf.Empty) returns (ListModelsResponse);

  rpc RetrieveFile (RetrieveFileRequest) returns (OpenAIFile);

  rpc RetrieveFineTune (RetrieveFineTuneRequest) returns (FineTune);

  rpc RetrieveModel (RetrieveModelRequest) returns (Model);

}

message CancelFineTuneRequest {
  // The ID of the fine-tune job to cancel 
  string fineTuneId = 1;

}

message CreateChatCompletionRequest {
  CreateChatCompletionRequest createChatCompletionRequest = 1;

}

message CreateCompletionRequest {
  CreateCompletionRequest createCompletionRequest = 1;

}

message CreateEditRequest {
  CreateEditRequest createEditRequest = 1;

}

message CreateEmbeddingRequest {
  CreateEmbeddingRequest createEmbeddingRequest = 1;

}

message CreateFileRequest {
  // Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the `purpose` is set to \\\"fine-tune\\\", each line is a JSON record with \\\"prompt\\\" and \\\"completion\\\" fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data). 
  string file = 1;
  // The intended purpose of the uploaded documents.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. 
  string purpose = 2;

}

message CreateFineTuneRequest {
  CreateFineTuneRequest createFineTuneRequest = 1;

}

message CreateImageRequest {
  CreateImageRequest createImageRequest = 1;

}

message CreateImageEditRequest {
  // The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
  string image = 1;
  // A text description of the desired image(s). The maximum length is 1000 characters.
  string prompt = 2;
  // An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
  string mask = 3;
  // The number of images to generate. Must be between 1 and 10.
  optional int32 n = 4;
  // The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
  optional string size = 5;
  // The format in which the generated images are returned. Must be one of `url` or `b64_json`.
  optional string responseFormat = 6;
  // A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
  string user = 7;

}

message CreateImageVariationRequest {
  // The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
  string image = 1;
  // The number of images to generate. Must be between 1 and 10.
  optional int32 n = 2;
  // The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
  optional string size = 3;
  // The format in which the generated images are returned. Must be one of `url` or `b64_json`.
  optional string responseFormat = 4;
  // A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
  string user = 5;

}

message CreateModerationRequest {
  CreateModerationRequest createModerationRequest = 1;

}

message CreateTranscriptionRequest {
  // The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
  string file = 1;
  CreateTranscriptionRequestModel model = 2;
  // An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
  string prompt = 3;
  // The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
  string responseFormat = 4;
  // The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
  float temperature = 5;
  // The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
  string language = 6;

}

message CreateTranslationRequest {
  // The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
  string file = 1;
  CreateTranscriptionRequestModel model = 2;
  // An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. 
  string prompt = 3;
  // The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
  string responseFormat = 4;
  // The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
  float temperature = 5;

}

message DeleteFileRequest {
  // The ID of the file to use for this request
  string fileId = 1;

}

message DeleteModelRequest {
  // The model to delete
  string model = 1;

}

message DownloadFileRequest {
  // The ID of the file to use for this request
  string fileId = 1;

}

message DownloadFileResponse {
  string data = 1;
}

message ListFineTuneEventsRequest {
  // The ID of the fine-tune job to get events for. 
  string fineTuneId = 1;
  // Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a `data: [DONE]` message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned. 
  bool stream = 2;

}

message RetrieveFileRequest {
  // The ID of the file to use for this request
  string fileId = 1;

}

message RetrieveFineTuneRequest {
  // The ID of the fine-tune job 
  string fineTuneId = 1;

}

message RetrieveModelRequest {
  // The ID of the model to use for this request
  string model = 1;

}

