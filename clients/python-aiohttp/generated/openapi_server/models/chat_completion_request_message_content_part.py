# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chat_completion_request_message_content_part_image import ChatCompletionRequestMessageContentPartImage
from openapi_server.models.chat_completion_request_message_content_part_image_image_url import ChatCompletionRequestMessageContentPartImageImageUrl
from openapi_server.models.chat_completion_request_message_content_part_text import ChatCompletionRequestMessageContentPartText
from openapi_server import util


class ChatCompletionRequestMessageContentPart(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, text: str=None, image_url: ChatCompletionRequestMessageContentPartImageImageUrl=None):
        """ChatCompletionRequestMessageContentPart - a model defined in OpenAPI

        :param type: The type of this ChatCompletionRequestMessageContentPart.
        :param text: The text of this ChatCompletionRequestMessageContentPart.
        :param image_url: The image_url of this ChatCompletionRequestMessageContentPart.
        """
        self.openapi_types = {
            'type': str,
            'text': str,
            'image_url': ChatCompletionRequestMessageContentPartImageImageUrl
        }

        self.attribute_map = {
            'type': 'type',
            'text': 'text',
            'image_url': 'image_url'
        }

        self._type = type
        self._text = text
        self._image_url = image_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChatCompletionRequestMessageContentPart':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChatCompletionRequestMessageContentPart of this ChatCompletionRequestMessageContentPart.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ChatCompletionRequestMessageContentPart.

        The type of the content part.

        :return: The type of this ChatCompletionRequestMessageContentPart.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ChatCompletionRequestMessageContentPart.

        The type of the content part.

        :param type: The type of this ChatCompletionRequestMessageContentPart.
        :type type: str
        """
        allowed_values = ["text", "image_url"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def text(self):
        """Gets the text of this ChatCompletionRequestMessageContentPart.

        The text content.

        :return: The text of this ChatCompletionRequestMessageContentPart.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ChatCompletionRequestMessageContentPart.

        The text content.

        :param text: The text of this ChatCompletionRequestMessageContentPart.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def image_url(self):
        """Gets the image_url of this ChatCompletionRequestMessageContentPart.


        :return: The image_url of this ChatCompletionRequestMessageContentPart.
        :rtype: ChatCompletionRequestMessageContentPartImageImageUrl
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this ChatCompletionRequestMessageContentPart.


        :param image_url: The image_url of this ChatCompletionRequestMessageContentPart.
        :type image_url: ChatCompletionRequestMessageContentPartImageImageUrl
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")

        self._image_url = image_url
