# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChatCompletionTokenLogprobTopLogprobsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token: str=None, logprob: float=None, bytes: List[int]=None):
        """ChatCompletionTokenLogprobTopLogprobsInner - a model defined in OpenAPI

        :param token: The token of this ChatCompletionTokenLogprobTopLogprobsInner.
        :param logprob: The logprob of this ChatCompletionTokenLogprobTopLogprobsInner.
        :param bytes: The bytes of this ChatCompletionTokenLogprobTopLogprobsInner.
        """
        self.openapi_types = {
            'token': str,
            'logprob': float,
            'bytes': List[int]
        }

        self.attribute_map = {
            'token': 'token',
            'logprob': 'logprob',
            'bytes': 'bytes'
        }

        self._token = token
        self._logprob = logprob
        self._bytes = bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChatCompletionTokenLogprobTopLogprobsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChatCompletionTokenLogprob_top_logprobs_inner of this ChatCompletionTokenLogprobTopLogprobsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token(self):
        """Gets the token of this ChatCompletionTokenLogprobTopLogprobsInner.

        The token.

        :return: The token of this ChatCompletionTokenLogprobTopLogprobsInner.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ChatCompletionTokenLogprobTopLogprobsInner.

        The token.

        :param token: The token of this ChatCompletionTokenLogprobTopLogprobsInner.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def logprob(self):
        """Gets the logprob of this ChatCompletionTokenLogprobTopLogprobsInner.

        The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.

        :return: The logprob of this ChatCompletionTokenLogprobTopLogprobsInner.
        :rtype: float
        """
        return self._logprob

    @logprob.setter
    def logprob(self, logprob):
        """Sets the logprob of this ChatCompletionTokenLogprobTopLogprobsInner.

        The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.

        :param logprob: The logprob of this ChatCompletionTokenLogprobTopLogprobsInner.
        :type logprob: float
        """
        if logprob is None:
            raise ValueError("Invalid value for `logprob`, must not be `None`")

        self._logprob = logprob

    @property
    def bytes(self):
        """Gets the bytes of this ChatCompletionTokenLogprobTopLogprobsInner.

        A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.

        :return: The bytes of this ChatCompletionTokenLogprobTopLogprobsInner.
        :rtype: List[int]
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this ChatCompletionTokenLogprobTopLogprobsInner.

        A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.

        :param bytes: The bytes of this ChatCompletionTokenLogprobTopLogprobsInner.
        :type bytes: List[int]
        """
        if bytes is None:
            raise ValueError("Invalid value for `bytes`, must not be `None`")

        self._bytes = bytes
