# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.completion_usage import CompletionUsage
from openapi_server.models.create_chat_completion_response_choices_inner import CreateChatCompletionResponseChoicesInner
from openapi_server import util


class CreateChatCompletionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, choices: List[CreateChatCompletionResponseChoicesInner]=None, created: int=None, model: str=None, system_fingerprint: str=None, object: str=None, usage: CompletionUsage=None):
        """CreateChatCompletionResponse - a model defined in OpenAPI

        :param id: The id of this CreateChatCompletionResponse.
        :param choices: The choices of this CreateChatCompletionResponse.
        :param created: The created of this CreateChatCompletionResponse.
        :param model: The model of this CreateChatCompletionResponse.
        :param system_fingerprint: The system_fingerprint of this CreateChatCompletionResponse.
        :param object: The object of this CreateChatCompletionResponse.
        :param usage: The usage of this CreateChatCompletionResponse.
        """
        self.openapi_types = {
            'id': str,
            'choices': List[CreateChatCompletionResponseChoicesInner],
            'created': int,
            'model': str,
            'system_fingerprint': str,
            'object': str,
            'usage': CompletionUsage
        }

        self.attribute_map = {
            'id': 'id',
            'choices': 'choices',
            'created': 'created',
            'model': 'model',
            'system_fingerprint': 'system_fingerprint',
            'object': 'object',
            'usage': 'usage'
        }

        self._id = id
        self._choices = choices
        self._created = created
        self._model = model
        self._system_fingerprint = system_fingerprint
        self._object = object
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateChatCompletionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateChatCompletionResponse of this CreateChatCompletionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CreateChatCompletionResponse.

        A unique identifier for the chat completion.

        :return: The id of this CreateChatCompletionResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateChatCompletionResponse.

        A unique identifier for the chat completion.

        :param id: The id of this CreateChatCompletionResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def choices(self):
        """Gets the choices of this CreateChatCompletionResponse.

        A list of chat completion choices. Can be more than one if `n` is greater than 1.

        :return: The choices of this CreateChatCompletionResponse.
        :rtype: List[CreateChatCompletionResponseChoicesInner]
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this CreateChatCompletionResponse.

        A list of chat completion choices. Can be more than one if `n` is greater than 1.

        :param choices: The choices of this CreateChatCompletionResponse.
        :type choices: List[CreateChatCompletionResponseChoicesInner]
        """
        if choices is None:
            raise ValueError("Invalid value for `choices`, must not be `None`")

        self._choices = choices

    @property
    def created(self):
        """Gets the created of this CreateChatCompletionResponse.

        The Unix timestamp (in seconds) of when the chat completion was created.

        :return: The created of this CreateChatCompletionResponse.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CreateChatCompletionResponse.

        The Unix timestamp (in seconds) of when the chat completion was created.

        :param created: The created of this CreateChatCompletionResponse.
        :type created: int
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def model(self):
        """Gets the model of this CreateChatCompletionResponse.

        The model used for the chat completion.

        :return: The model of this CreateChatCompletionResponse.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this CreateChatCompletionResponse.

        The model used for the chat completion.

        :param model: The model of this CreateChatCompletionResponse.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")

        self._model = model

    @property
    def system_fingerprint(self):
        """Gets the system_fingerprint of this CreateChatCompletionResponse.

        This fingerprint represents the backend configuration that the model runs with.  Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism. 

        :return: The system_fingerprint of this CreateChatCompletionResponse.
        :rtype: str
        """
        return self._system_fingerprint

    @system_fingerprint.setter
    def system_fingerprint(self, system_fingerprint):
        """Sets the system_fingerprint of this CreateChatCompletionResponse.

        This fingerprint represents the backend configuration that the model runs with.  Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism. 

        :param system_fingerprint: The system_fingerprint of this CreateChatCompletionResponse.
        :type system_fingerprint: str
        """

        self._system_fingerprint = system_fingerprint

    @property
    def object(self):
        """Gets the object of this CreateChatCompletionResponse.

        The object type, which is always `chat.completion`.

        :return: The object of this CreateChatCompletionResponse.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this CreateChatCompletionResponse.

        The object type, which is always `chat.completion`.

        :param object: The object of this CreateChatCompletionResponse.
        :type object: str
        """
        allowed_values = ["chat.completion"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def usage(self):
        """Gets the usage of this CreateChatCompletionResponse.


        :return: The usage of this CreateChatCompletionResponse.
        :rtype: CompletionUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this CreateChatCompletionResponse.


        :param usage: The usage of this CreateChatCompletionResponse.
        :type usage: CompletionUsage
        """

        self._usage = usage
