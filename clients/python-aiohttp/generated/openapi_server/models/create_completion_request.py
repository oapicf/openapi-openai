# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_completion_request_model import CreateCompletionRequestModel
from openapi_server.models.create_completion_request_prompt import CreateCompletionRequestPrompt
from openapi_server.models.create_completion_request_stop import CreateCompletionRequestStop
from openapi_server import util


class CreateCompletionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model: CreateCompletionRequestModel=None, prompt: CreateCompletionRequestPrompt=None, suffix: str=None, max_tokens: int=16, temperature: float=1, top_p: float=1, n: int=1, stream: bool=False, logprobs: int=None, echo: bool=False, stop: CreateCompletionRequestStop=None, presence_penalty: float=0, frequency_penalty: float=0, best_of: int=1, logit_bias: object=None, user: str=None):
        """CreateCompletionRequest - a model defined in OpenAPI

        :param model: The model of this CreateCompletionRequest.
        :param prompt: The prompt of this CreateCompletionRequest.
        :param suffix: The suffix of this CreateCompletionRequest.
        :param max_tokens: The max_tokens of this CreateCompletionRequest.
        :param temperature: The temperature of this CreateCompletionRequest.
        :param top_p: The top_p of this CreateCompletionRequest.
        :param n: The n of this CreateCompletionRequest.
        :param stream: The stream of this CreateCompletionRequest.
        :param logprobs: The logprobs of this CreateCompletionRequest.
        :param echo: The echo of this CreateCompletionRequest.
        :param stop: The stop of this CreateCompletionRequest.
        :param presence_penalty: The presence_penalty of this CreateCompletionRequest.
        :param frequency_penalty: The frequency_penalty of this CreateCompletionRequest.
        :param best_of: The best_of of this CreateCompletionRequest.
        :param logit_bias: The logit_bias of this CreateCompletionRequest.
        :param user: The user of this CreateCompletionRequest.
        """
        self.openapi_types = {
            'model': CreateCompletionRequestModel,
            'prompt': CreateCompletionRequestPrompt,
            'suffix': str,
            'max_tokens': int,
            'temperature': float,
            'top_p': float,
            'n': int,
            'stream': bool,
            'logprobs': int,
            'echo': bool,
            'stop': CreateCompletionRequestStop,
            'presence_penalty': float,
            'frequency_penalty': float,
            'best_of': int,
            'logit_bias': object,
            'user': str
        }

        self.attribute_map = {
            'model': 'model',
            'prompt': 'prompt',
            'suffix': 'suffix',
            'max_tokens': 'max_tokens',
            'temperature': 'temperature',
            'top_p': 'top_p',
            'n': 'n',
            'stream': 'stream',
            'logprobs': 'logprobs',
            'echo': 'echo',
            'stop': 'stop',
            'presence_penalty': 'presence_penalty',
            'frequency_penalty': 'frequency_penalty',
            'best_of': 'best_of',
            'logit_bias': 'logit_bias',
            'user': 'user'
        }

        self._model = model
        self._prompt = prompt
        self._suffix = suffix
        self._max_tokens = max_tokens
        self._temperature = temperature
        self._top_p = top_p
        self._n = n
        self._stream = stream
        self._logprobs = logprobs
        self._echo = echo
        self._stop = stop
        self._presence_penalty = presence_penalty
        self._frequency_penalty = frequency_penalty
        self._best_of = best_of
        self._logit_bias = logit_bias
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCompletionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCompletionRequest of this CreateCompletionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model(self):
        """Gets the model of this CreateCompletionRequest.


        :return: The model of this CreateCompletionRequest.
        :rtype: CreateCompletionRequestModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this CreateCompletionRequest.


        :param model: The model of this CreateCompletionRequest.
        :type model: CreateCompletionRequestModel
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")

        self._model = model

    @property
    def prompt(self):
        """Gets the prompt of this CreateCompletionRequest.


        :return: The prompt of this CreateCompletionRequest.
        :rtype: CreateCompletionRequestPrompt
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt):
        """Sets the prompt of this CreateCompletionRequest.


        :param prompt: The prompt of this CreateCompletionRequest.
        :type prompt: CreateCompletionRequestPrompt
        """
        if prompt is None:
            raise ValueError("Invalid value for `prompt`, must not be `None`")

        self._prompt = prompt

    @property
    def suffix(self):
        """Gets the suffix of this CreateCompletionRequest.

        The suffix that comes after a completion of inserted text.

        :return: The suffix of this CreateCompletionRequest.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this CreateCompletionRequest.

        The suffix that comes after a completion of inserted text.

        :param suffix: The suffix of this CreateCompletionRequest.
        :type suffix: str
        """

        self._suffix = suffix

    @property
    def max_tokens(self):
        """Gets the max_tokens of this CreateCompletionRequest.

        The maximum number of [tokens](/tokenizer) to generate in the completion.  The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens. 

        :return: The max_tokens of this CreateCompletionRequest.
        :rtype: int
        """
        return self._max_tokens

    @max_tokens.setter
    def max_tokens(self, max_tokens):
        """Sets the max_tokens of this CreateCompletionRequest.

        The maximum number of [tokens](/tokenizer) to generate in the completion.  The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens. 

        :param max_tokens: The max_tokens of this CreateCompletionRequest.
        :type max_tokens: int
        """
        if max_tokens is not None and max_tokens < 0:
            raise ValueError("Invalid value for `max_tokens`, must be a value greater than or equal to `0`")

        self._max_tokens = max_tokens

    @property
    def temperature(self):
        """Gets the temperature of this CreateCompletionRequest.

        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 

        :return: The temperature of this CreateCompletionRequest.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this CreateCompletionRequest.

        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 

        :param temperature: The temperature of this CreateCompletionRequest.
        :type temperature: float
        """
        if temperature is not None and temperature > 2:
            raise ValueError("Invalid value for `temperature`, must be a value less than or equal to `2`")
        if temperature is not None and temperature < 0:
            raise ValueError("Invalid value for `temperature`, must be a value greater than or equal to `0`")

        self._temperature = temperature

    @property
    def top_p(self):
        """Gets the top_p of this CreateCompletionRequest.

        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 

        :return: The top_p of this CreateCompletionRequest.
        :rtype: float
        """
        return self._top_p

    @top_p.setter
    def top_p(self, top_p):
        """Sets the top_p of this CreateCompletionRequest.

        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 

        :param top_p: The top_p of this CreateCompletionRequest.
        :type top_p: float
        """
        if top_p is not None and top_p > 1:
            raise ValueError("Invalid value for `top_p`, must be a value less than or equal to `1`")
        if top_p is not None and top_p < 0:
            raise ValueError("Invalid value for `top_p`, must be a value greater than or equal to `0`")

        self._top_p = top_p

    @property
    def n(self):
        """Gets the n of this CreateCompletionRequest.

        How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`. 

        :return: The n of this CreateCompletionRequest.
        :rtype: int
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this CreateCompletionRequest.

        How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`. 

        :param n: The n of this CreateCompletionRequest.
        :type n: int
        """
        if n is not None and n > 128:
            raise ValueError("Invalid value for `n`, must be a value less than or equal to `128`")
        if n is not None and n < 1:
            raise ValueError("Invalid value for `n`, must be a value greater than or equal to `1`")

        self._n = n

    @property
    def stream(self):
        """Gets the stream of this CreateCompletionRequest.

        Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb). 

        :return: The stream of this CreateCompletionRequest.
        :rtype: bool
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this CreateCompletionRequest.

        Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb). 

        :param stream: The stream of this CreateCompletionRequest.
        :type stream: bool
        """

        self._stream = stream

    @property
    def logprobs(self):
        """Gets the logprobs of this CreateCompletionRequest.

        Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5. 

        :return: The logprobs of this CreateCompletionRequest.
        :rtype: int
        """
        return self._logprobs

    @logprobs.setter
    def logprobs(self, logprobs):
        """Sets the logprobs of this CreateCompletionRequest.

        Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5. 

        :param logprobs: The logprobs of this CreateCompletionRequest.
        :type logprobs: int
        """
        if logprobs is not None and logprobs > 5:
            raise ValueError("Invalid value for `logprobs`, must be a value less than or equal to `5`")
        if logprobs is not None and logprobs < 0:
            raise ValueError("Invalid value for `logprobs`, must be a value greater than or equal to `0`")

        self._logprobs = logprobs

    @property
    def echo(self):
        """Gets the echo of this CreateCompletionRequest.

        Echo back the prompt in addition to the completion 

        :return: The echo of this CreateCompletionRequest.
        :rtype: bool
        """
        return self._echo

    @echo.setter
    def echo(self, echo):
        """Sets the echo of this CreateCompletionRequest.

        Echo back the prompt in addition to the completion 

        :param echo: The echo of this CreateCompletionRequest.
        :type echo: bool
        """

        self._echo = echo

    @property
    def stop(self):
        """Gets the stop of this CreateCompletionRequest.


        :return: The stop of this CreateCompletionRequest.
        :rtype: CreateCompletionRequestStop
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """Sets the stop of this CreateCompletionRequest.


        :param stop: The stop of this CreateCompletionRequest.
        :type stop: CreateCompletionRequestStop
        """

        self._stop = stop

    @property
    def presence_penalty(self):
        """Gets the presence_penalty of this CreateCompletionRequest.

        Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 

        :return: The presence_penalty of this CreateCompletionRequest.
        :rtype: float
        """
        return self._presence_penalty

    @presence_penalty.setter
    def presence_penalty(self, presence_penalty):
        """Sets the presence_penalty of this CreateCompletionRequest.

        Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 

        :param presence_penalty: The presence_penalty of this CreateCompletionRequest.
        :type presence_penalty: float
        """
        if presence_penalty is not None and presence_penalty > 2:
            raise ValueError("Invalid value for `presence_penalty`, must be a value less than or equal to `2`")
        if presence_penalty is not None and presence_penalty < -2:
            raise ValueError("Invalid value for `presence_penalty`, must be a value greater than or equal to `-2`")

        self._presence_penalty = presence_penalty

    @property
    def frequency_penalty(self):
        """Gets the frequency_penalty of this CreateCompletionRequest.

        Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 

        :return: The frequency_penalty of this CreateCompletionRequest.
        :rtype: float
        """
        return self._frequency_penalty

    @frequency_penalty.setter
    def frequency_penalty(self, frequency_penalty):
        """Sets the frequency_penalty of this CreateCompletionRequest.

        Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 

        :param frequency_penalty: The frequency_penalty of this CreateCompletionRequest.
        :type frequency_penalty: float
        """
        if frequency_penalty is not None and frequency_penalty > 2:
            raise ValueError("Invalid value for `frequency_penalty`, must be a value less than or equal to `2`")
        if frequency_penalty is not None and frequency_penalty < -2:
            raise ValueError("Invalid value for `frequency_penalty`, must be a value greater than or equal to `-2`")

        self._frequency_penalty = frequency_penalty

    @property
    def best_of(self):
        """Gets the best_of of this CreateCompletionRequest.

        Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.  When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`. 

        :return: The best_of of this CreateCompletionRequest.
        :rtype: int
        """
        return self._best_of

    @best_of.setter
    def best_of(self, best_of):
        """Sets the best_of of this CreateCompletionRequest.

        Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.  When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`. 

        :param best_of: The best_of of this CreateCompletionRequest.
        :type best_of: int
        """
        if best_of is not None and best_of > 20:
            raise ValueError("Invalid value for `best_of`, must be a value less than or equal to `20`")
        if best_of is not None and best_of < 0:
            raise ValueError("Invalid value for `best_of`, must be a value greater than or equal to `0`")

        self._best_of = best_of

    @property
    def logit_bias(self):
        """Gets the logit_bias of this CreateCompletionRequest.

        Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated. 

        :return: The logit_bias of this CreateCompletionRequest.
        :rtype: object
        """
        return self._logit_bias

    @logit_bias.setter
    def logit_bias(self, logit_bias):
        """Sets the logit_bias of this CreateCompletionRequest.

        Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated. 

        :param logit_bias: The logit_bias of this CreateCompletionRequest.
        :type logit_bias: object
        """

        self._logit_bias = logit_bias

    @property
    def user(self):
        """Gets the user of this CreateCompletionRequest.

        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 

        :return: The user of this CreateCompletionRequest.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CreateCompletionRequest.

        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 

        :param user: The user of this CreateCompletionRequest.
        :type user: str
        """

        self._user = user
