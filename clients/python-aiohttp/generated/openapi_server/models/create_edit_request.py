# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_edit_request_model import CreateEditRequestModel
from openapi_server import util


class CreateEditRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model: CreateEditRequestModel=None, input: str='', instruction: str=None, n: int=1, temperature: float=1, top_p: float=1):
        """CreateEditRequest - a model defined in OpenAPI

        :param model: The model of this CreateEditRequest.
        :param input: The input of this CreateEditRequest.
        :param instruction: The instruction of this CreateEditRequest.
        :param n: The n of this CreateEditRequest.
        :param temperature: The temperature of this CreateEditRequest.
        :param top_p: The top_p of this CreateEditRequest.
        """
        self.openapi_types = {
            'model': CreateEditRequestModel,
            'input': str,
            'instruction': str,
            'n': int,
            'temperature': float,
            'top_p': float
        }

        self.attribute_map = {
            'model': 'model',
            'input': 'input',
            'instruction': 'instruction',
            'n': 'n',
            'temperature': 'temperature',
            'top_p': 'top_p'
        }

        self._model = model
        self._input = input
        self._instruction = instruction
        self._n = n
        self._temperature = temperature
        self._top_p = top_p

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEditRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEditRequest of this CreateEditRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model(self):
        """Gets the model of this CreateEditRequest.


        :return: The model of this CreateEditRequest.
        :rtype: CreateEditRequestModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this CreateEditRequest.


        :param model: The model of this CreateEditRequest.
        :type model: CreateEditRequestModel
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")

        self._model = model

    @property
    def input(self):
        """Gets the input of this CreateEditRequest.

        The input text to use as a starting point for the edit.

        :return: The input of this CreateEditRequest.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this CreateEditRequest.

        The input text to use as a starting point for the edit.

        :param input: The input of this CreateEditRequest.
        :type input: str
        """

        self._input = input

    @property
    def instruction(self):
        """Gets the instruction of this CreateEditRequest.

        The instruction that tells the model how to edit the prompt.

        :return: The instruction of this CreateEditRequest.
        :rtype: str
        """
        return self._instruction

    @instruction.setter
    def instruction(self, instruction):
        """Sets the instruction of this CreateEditRequest.

        The instruction that tells the model how to edit the prompt.

        :param instruction: The instruction of this CreateEditRequest.
        :type instruction: str
        """
        if instruction is None:
            raise ValueError("Invalid value for `instruction`, must not be `None`")

        self._instruction = instruction

    @property
    def n(self):
        """Gets the n of this CreateEditRequest.

        How many edits to generate for the input and instruction.

        :return: The n of this CreateEditRequest.
        :rtype: int
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this CreateEditRequest.

        How many edits to generate for the input and instruction.

        :param n: The n of this CreateEditRequest.
        :type n: int
        """
        if n is not None and n > 20:
            raise ValueError("Invalid value for `n`, must be a value less than or equal to `20`")
        if n is not None and n < 1:
            raise ValueError("Invalid value for `n`, must be a value greater than or equal to `1`")

        self._n = n

    @property
    def temperature(self):
        """Gets the temperature of this CreateEditRequest.

        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 

        :return: The temperature of this CreateEditRequest.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this CreateEditRequest.

        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 

        :param temperature: The temperature of this CreateEditRequest.
        :type temperature: float
        """
        if temperature is not None and temperature > 2:
            raise ValueError("Invalid value for `temperature`, must be a value less than or equal to `2`")
        if temperature is not None and temperature < 0:
            raise ValueError("Invalid value for `temperature`, must be a value greater than or equal to `0`")

        self._temperature = temperature

    @property
    def top_p(self):
        """Gets the top_p of this CreateEditRequest.

        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 

        :return: The top_p of this CreateEditRequest.
        :rtype: float
        """
        return self._top_p

    @top_p.setter
    def top_p(self, top_p):
        """Sets the top_p of this CreateEditRequest.

        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 

        :param top_p: The top_p of this CreateEditRequest.
        :type top_p: float
        """
        if top_p is not None and top_p > 1:
            raise ValueError("Invalid value for `top_p`, must be a value less than or equal to `1`")
        if top_p is not None and top_p < 0:
            raise ValueError("Invalid value for `top_p`, must be a value greater than or equal to `0`")

        self._top_p = top_p
