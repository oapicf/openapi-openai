# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_completion_response_choices_inner_logprobs import CreateCompletionResponseChoicesInnerLogprobs
from openapi_server import util


class CreateEditResponseChoicesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, text: str=None, index: int=None, logprobs: CreateCompletionResponseChoicesInnerLogprobs=None, finish_reason: str=None):
        """CreateEditResponseChoicesInner - a model defined in OpenAPI

        :param text: The text of this CreateEditResponseChoicesInner.
        :param index: The index of this CreateEditResponseChoicesInner.
        :param logprobs: The logprobs of this CreateEditResponseChoicesInner.
        :param finish_reason: The finish_reason of this CreateEditResponseChoicesInner.
        """
        self.openapi_types = {
            'text': str,
            'index': int,
            'logprobs': CreateCompletionResponseChoicesInnerLogprobs,
            'finish_reason': str
        }

        self.attribute_map = {
            'text': 'text',
            'index': 'index',
            'logprobs': 'logprobs',
            'finish_reason': 'finish_reason'
        }

        self._text = text
        self._index = index
        self._logprobs = logprobs
        self._finish_reason = finish_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEditResponseChoicesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEditResponse_choices_inner of this CreateEditResponseChoicesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self):
        """Gets the text of this CreateEditResponseChoicesInner.


        :return: The text of this CreateEditResponseChoicesInner.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CreateEditResponseChoicesInner.


        :param text: The text of this CreateEditResponseChoicesInner.
        :type text: str
        """

        self._text = text

    @property
    def index(self):
        """Gets the index of this CreateEditResponseChoicesInner.


        :return: The index of this CreateEditResponseChoicesInner.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this CreateEditResponseChoicesInner.


        :param index: The index of this CreateEditResponseChoicesInner.
        :type index: int
        """

        self._index = index

    @property
    def logprobs(self):
        """Gets the logprobs of this CreateEditResponseChoicesInner.


        :return: The logprobs of this CreateEditResponseChoicesInner.
        :rtype: CreateCompletionResponseChoicesInnerLogprobs
        """
        return self._logprobs

    @logprobs.setter
    def logprobs(self, logprobs):
        """Sets the logprobs of this CreateEditResponseChoicesInner.


        :param logprobs: The logprobs of this CreateEditResponseChoicesInner.
        :type logprobs: CreateCompletionResponseChoicesInnerLogprobs
        """

        self._logprobs = logprobs

    @property
    def finish_reason(self):
        """Gets the finish_reason of this CreateEditResponseChoicesInner.


        :return: The finish_reason of this CreateEditResponseChoicesInner.
        :rtype: str
        """
        return self._finish_reason

    @finish_reason.setter
    def finish_reason(self, finish_reason):
        """Sets the finish_reason of this CreateEditResponseChoicesInner.


        :param finish_reason: The finish_reason of this CreateEditResponseChoicesInner.
        :type finish_reason: str
        """
        allowed_values = ["stop", "length"]  # noqa: E501
        if finish_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `finish_reason` ({0}), must be one of {1}"
                .format(finish_reason, allowed_values)
            )

        self._finish_reason = finish_reason
