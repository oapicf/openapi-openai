# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateMessageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role: str=None, content: str=None, file_ids: List[str]=[], metadata: object=None):
        """CreateMessageRequest - a model defined in OpenAPI

        :param role: The role of this CreateMessageRequest.
        :param content: The content of this CreateMessageRequest.
        :param file_ids: The file_ids of this CreateMessageRequest.
        :param metadata: The metadata of this CreateMessageRequest.
        """
        self.openapi_types = {
            'role': str,
            'content': str,
            'file_ids': List[str],
            'metadata': object
        }

        self.attribute_map = {
            'role': 'role',
            'content': 'content',
            'file_ids': 'file_ids',
            'metadata': 'metadata'
        }

        self._role = role
        self._content = content
        self._file_ids = file_ids
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMessageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMessageRequest of this CreateMessageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role(self):
        """Gets the role of this CreateMessageRequest.

        The role of the entity that is creating the message. Allowed values include: - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages. - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation. 

        :return: The role of this CreateMessageRequest.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this CreateMessageRequest.

        The role of the entity that is creating the message. Allowed values include: - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages. - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation. 

        :param role: The role of this CreateMessageRequest.
        :type role: str
        """
        allowed_values = ["user", "assistant"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def content(self):
        """Gets the content of this CreateMessageRequest.

        The content of the message.

        :return: The content of this CreateMessageRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CreateMessageRequest.

        The content of the message.

        :param content: The content of this CreateMessageRequest.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")
        if content is not None and len(content) > 256000:
            raise ValueError("Invalid value for `content`, length must be less than or equal to `256000`")
        if content is not None and len(content) < 1:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `1`")

        self._content = content

    @property
    def file_ids(self):
        """Gets the file_ids of this CreateMessageRequest.

        A list of [File](/docs/api-reference/files) IDs that the message should use. There can be a maximum of 10 files attached to a message. Useful for tools like `retrieval` and `code_interpreter` that can access and use files.

        :return: The file_ids of this CreateMessageRequest.
        :rtype: List[str]
        """
        return self._file_ids

    @file_ids.setter
    def file_ids(self, file_ids):
        """Sets the file_ids of this CreateMessageRequest.

        A list of [File](/docs/api-reference/files) IDs that the message should use. There can be a maximum of 10 files attached to a message. Useful for tools like `retrieval` and `code_interpreter` that can access and use files.

        :param file_ids: The file_ids of this CreateMessageRequest.
        :type file_ids: List[str]
        """
        if file_ids is not None and len(file_ids) > 10:
            raise ValueError("Invalid value for `file_ids`, number of items must be less than or equal to `10`")
        if file_ids is not None and len(file_ids) < 1:
            raise ValueError("Invalid value for `file_ids`, number of items must be greater than or equal to `1`")

        self._file_ids = file_ids

    @property
    def metadata(self):
        """Gets the metadata of this CreateMessageRequest.

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 

        :return: The metadata of this CreateMessageRequest.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreateMessageRequest.

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 

        :param metadata: The metadata of this CreateMessageRequest.
        :type metadata: object
        """

        self._metadata = metadata
