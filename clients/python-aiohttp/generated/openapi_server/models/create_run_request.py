# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assistant_object_tools_inner import AssistantObjectToolsInner
from openapi_server.models.assistants_api_response_format_option import AssistantsApiResponseFormatOption
from openapi_server.models.assistants_api_tool_choice_option import AssistantsApiToolChoiceOption
from openapi_server.models.create_message_request import CreateMessageRequest
from openapi_server.models.create_run_request_model import CreateRunRequestModel
from openapi_server.models.truncation_object import TruncationObject
from openapi_server import util


class CreateRunRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assistant_id: str=None, model: CreateRunRequestModel=None, instructions: str=None, additional_instructions: str=None, additional_messages: List[CreateMessageRequest]=None, tools: List[AssistantObjectToolsInner]=None, metadata: object=None, temperature: float=1, stream: bool=None, max_prompt_tokens: int=None, max_completion_tokens: int=None, truncation_strategy: TruncationObject=None, tool_choice: AssistantsApiToolChoiceOption=None, response_format: AssistantsApiResponseFormatOption=None):
        """CreateRunRequest - a model defined in OpenAPI

        :param assistant_id: The assistant_id of this CreateRunRequest.
        :param model: The model of this CreateRunRequest.
        :param instructions: The instructions of this CreateRunRequest.
        :param additional_instructions: The additional_instructions of this CreateRunRequest.
        :param additional_messages: The additional_messages of this CreateRunRequest.
        :param tools: The tools of this CreateRunRequest.
        :param metadata: The metadata of this CreateRunRequest.
        :param temperature: The temperature of this CreateRunRequest.
        :param stream: The stream of this CreateRunRequest.
        :param max_prompt_tokens: The max_prompt_tokens of this CreateRunRequest.
        :param max_completion_tokens: The max_completion_tokens of this CreateRunRequest.
        :param truncation_strategy: The truncation_strategy of this CreateRunRequest.
        :param tool_choice: The tool_choice of this CreateRunRequest.
        :param response_format: The response_format of this CreateRunRequest.
        """
        self.openapi_types = {
            'assistant_id': str,
            'model': CreateRunRequestModel,
            'instructions': str,
            'additional_instructions': str,
            'additional_messages': List[CreateMessageRequest],
            'tools': List[AssistantObjectToolsInner],
            'metadata': object,
            'temperature': float,
            'stream': bool,
            'max_prompt_tokens': int,
            'max_completion_tokens': int,
            'truncation_strategy': TruncationObject,
            'tool_choice': AssistantsApiToolChoiceOption,
            'response_format': AssistantsApiResponseFormatOption
        }

        self.attribute_map = {
            'assistant_id': 'assistant_id',
            'model': 'model',
            'instructions': 'instructions',
            'additional_instructions': 'additional_instructions',
            'additional_messages': 'additional_messages',
            'tools': 'tools',
            'metadata': 'metadata',
            'temperature': 'temperature',
            'stream': 'stream',
            'max_prompt_tokens': 'max_prompt_tokens',
            'max_completion_tokens': 'max_completion_tokens',
            'truncation_strategy': 'truncation_strategy',
            'tool_choice': 'tool_choice',
            'response_format': 'response_format'
        }

        self._assistant_id = assistant_id
        self._model = model
        self._instructions = instructions
        self._additional_instructions = additional_instructions
        self._additional_messages = additional_messages
        self._tools = tools
        self._metadata = metadata
        self._temperature = temperature
        self._stream = stream
        self._max_prompt_tokens = max_prompt_tokens
        self._max_completion_tokens = max_completion_tokens
        self._truncation_strategy = truncation_strategy
        self._tool_choice = tool_choice
        self._response_format = response_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRunRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRunRequest of this CreateRunRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assistant_id(self):
        """Gets the assistant_id of this CreateRunRequest.

        The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.

        :return: The assistant_id of this CreateRunRequest.
        :rtype: str
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id):
        """Sets the assistant_id of this CreateRunRequest.

        The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.

        :param assistant_id: The assistant_id of this CreateRunRequest.
        :type assistant_id: str
        """
        if assistant_id is None:
            raise ValueError("Invalid value for `assistant_id`, must not be `None`")

        self._assistant_id = assistant_id

    @property
    def model(self):
        """Gets the model of this CreateRunRequest.


        :return: The model of this CreateRunRequest.
        :rtype: CreateRunRequestModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this CreateRunRequest.


        :param model: The model of this CreateRunRequest.
        :type model: CreateRunRequestModel
        """

        self._model = model

    @property
    def instructions(self):
        """Gets the instructions of this CreateRunRequest.

        Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.

        :return: The instructions of this CreateRunRequest.
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this CreateRunRequest.

        Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.

        :param instructions: The instructions of this CreateRunRequest.
        :type instructions: str
        """

        self._instructions = instructions

    @property
    def additional_instructions(self):
        """Gets the additional_instructions of this CreateRunRequest.

        Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.

        :return: The additional_instructions of this CreateRunRequest.
        :rtype: str
        """
        return self._additional_instructions

    @additional_instructions.setter
    def additional_instructions(self, additional_instructions):
        """Sets the additional_instructions of this CreateRunRequest.

        Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.

        :param additional_instructions: The additional_instructions of this CreateRunRequest.
        :type additional_instructions: str
        """

        self._additional_instructions = additional_instructions

    @property
    def additional_messages(self):
        """Gets the additional_messages of this CreateRunRequest.

        Adds additional messages to the thread before creating the run.

        :return: The additional_messages of this CreateRunRequest.
        :rtype: List[CreateMessageRequest]
        """
        return self._additional_messages

    @additional_messages.setter
    def additional_messages(self, additional_messages):
        """Sets the additional_messages of this CreateRunRequest.

        Adds additional messages to the thread before creating the run.

        :param additional_messages: The additional_messages of this CreateRunRequest.
        :type additional_messages: List[CreateMessageRequest]
        """

        self._additional_messages = additional_messages

    @property
    def tools(self):
        """Gets the tools of this CreateRunRequest.

        Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.

        :return: The tools of this CreateRunRequest.
        :rtype: List[AssistantObjectToolsInner]
        """
        return self._tools

    @tools.setter
    def tools(self, tools):
        """Sets the tools of this CreateRunRequest.

        Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.

        :param tools: The tools of this CreateRunRequest.
        :type tools: List[AssistantObjectToolsInner]
        """
        if tools is not None and len(tools) > 20:
            raise ValueError("Invalid value for `tools`, number of items must be less than or equal to `20`")

        self._tools = tools

    @property
    def metadata(self):
        """Gets the metadata of this CreateRunRequest.

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 

        :return: The metadata of this CreateRunRequest.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreateRunRequest.

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 

        :param metadata: The metadata of this CreateRunRequest.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def temperature(self):
        """Gets the temperature of this CreateRunRequest.

        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. 

        :return: The temperature of this CreateRunRequest.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this CreateRunRequest.

        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. 

        :param temperature: The temperature of this CreateRunRequest.
        :type temperature: float
        """
        if temperature is not None and temperature > 2:
            raise ValueError("Invalid value for `temperature`, must be a value less than or equal to `2`")
        if temperature is not None and temperature < 0:
            raise ValueError("Invalid value for `temperature`, must be a value greater than or equal to `0`")

        self._temperature = temperature

    @property
    def stream(self):
        """Gets the stream of this CreateRunRequest.

        If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message. 

        :return: The stream of this CreateRunRequest.
        :rtype: bool
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this CreateRunRequest.

        If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message. 

        :param stream: The stream of this CreateRunRequest.
        :type stream: bool
        """

        self._stream = stream

    @property
    def max_prompt_tokens(self):
        """Gets the max_prompt_tokens of this CreateRunRequest.

        The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `complete`. See `incomplete_details` for more info. 

        :return: The max_prompt_tokens of this CreateRunRequest.
        :rtype: int
        """
        return self._max_prompt_tokens

    @max_prompt_tokens.setter
    def max_prompt_tokens(self, max_prompt_tokens):
        """Sets the max_prompt_tokens of this CreateRunRequest.

        The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `complete`. See `incomplete_details` for more info. 

        :param max_prompt_tokens: The max_prompt_tokens of this CreateRunRequest.
        :type max_prompt_tokens: int
        """
        if max_prompt_tokens is not None and max_prompt_tokens < 256:
            raise ValueError("Invalid value for `max_prompt_tokens`, must be a value greater than or equal to `256`")

        self._max_prompt_tokens = max_prompt_tokens

    @property
    def max_completion_tokens(self):
        """Gets the max_completion_tokens of this CreateRunRequest.

        The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `complete`. See `incomplete_details` for more info. 

        :return: The max_completion_tokens of this CreateRunRequest.
        :rtype: int
        """
        return self._max_completion_tokens

    @max_completion_tokens.setter
    def max_completion_tokens(self, max_completion_tokens):
        """Sets the max_completion_tokens of this CreateRunRequest.

        The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `complete`. See `incomplete_details` for more info. 

        :param max_completion_tokens: The max_completion_tokens of this CreateRunRequest.
        :type max_completion_tokens: int
        """
        if max_completion_tokens is not None and max_completion_tokens < 256:
            raise ValueError("Invalid value for `max_completion_tokens`, must be a value greater than or equal to `256`")

        self._max_completion_tokens = max_completion_tokens

    @property
    def truncation_strategy(self):
        """Gets the truncation_strategy of this CreateRunRequest.


        :return: The truncation_strategy of this CreateRunRequest.
        :rtype: TruncationObject
        """
        return self._truncation_strategy

    @truncation_strategy.setter
    def truncation_strategy(self, truncation_strategy):
        """Sets the truncation_strategy of this CreateRunRequest.


        :param truncation_strategy: The truncation_strategy of this CreateRunRequest.
        :type truncation_strategy: TruncationObject
        """

        self._truncation_strategy = truncation_strategy

    @property
    def tool_choice(self):
        """Gets the tool_choice of this CreateRunRequest.


        :return: The tool_choice of this CreateRunRequest.
        :rtype: AssistantsApiToolChoiceOption
        """
        return self._tool_choice

    @tool_choice.setter
    def tool_choice(self, tool_choice):
        """Sets the tool_choice of this CreateRunRequest.


        :param tool_choice: The tool_choice of this CreateRunRequest.
        :type tool_choice: AssistantsApiToolChoiceOption
        """

        self._tool_choice = tool_choice

    @property
    def response_format(self):
        """Gets the response_format of this CreateRunRequest.


        :return: The response_format of this CreateRunRequest.
        :rtype: AssistantsApiResponseFormatOption
        """
        return self._response_format

    @response_format.setter
    def response_format(self, response_format):
        """Sets the response_format of this CreateRunRequest.


        :param response_format: The response_format of this CreateRunRequest.
        :type response_format: AssistantsApiResponseFormatOption
        """

        self._response_format = response_format
