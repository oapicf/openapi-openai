# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_delta_object_delta_content_inner import MessageDeltaObjectDeltaContentInner
from openapi_server import util


class MessageDeltaObjectDelta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role: str=None, content: List[MessageDeltaObjectDeltaContentInner]=None, file_ids: List[str]=[]):
        """MessageDeltaObjectDelta - a model defined in OpenAPI

        :param role: The role of this MessageDeltaObjectDelta.
        :param content: The content of this MessageDeltaObjectDelta.
        :param file_ids: The file_ids of this MessageDeltaObjectDelta.
        """
        self.openapi_types = {
            'role': str,
            'content': List[MessageDeltaObjectDeltaContentInner],
            'file_ids': List[str]
        }

        self.attribute_map = {
            'role': 'role',
            'content': 'content',
            'file_ids': 'file_ids'
        }

        self._role = role
        self._content = content
        self._file_ids = file_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageDeltaObjectDelta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageDeltaObject_delta of this MessageDeltaObjectDelta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role(self):
        """Gets the role of this MessageDeltaObjectDelta.

        The entity that produced the message. One of `user` or `assistant`.

        :return: The role of this MessageDeltaObjectDelta.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this MessageDeltaObjectDelta.

        The entity that produced the message. One of `user` or `assistant`.

        :param role: The role of this MessageDeltaObjectDelta.
        :type role: str
        """
        allowed_values = ["user", "assistant"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def content(self):
        """Gets the content of this MessageDeltaObjectDelta.

        The content of the message in array of text and/or images.

        :return: The content of this MessageDeltaObjectDelta.
        :rtype: List[MessageDeltaObjectDeltaContentInner]
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this MessageDeltaObjectDelta.

        The content of the message in array of text and/or images.

        :param content: The content of this MessageDeltaObjectDelta.
        :type content: List[MessageDeltaObjectDeltaContentInner]
        """

        self._content = content

    @property
    def file_ids(self):
        """Gets the file_ids of this MessageDeltaObjectDelta.

        A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.

        :return: The file_ids of this MessageDeltaObjectDelta.
        :rtype: List[str]
        """
        return self._file_ids

    @file_ids.setter
    def file_ids(self, file_ids):
        """Sets the file_ids of this MessageDeltaObjectDelta.

        A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.

        :param file_ids: The file_ids of this MessageDeltaObjectDelta.
        :type file_ids: List[str]
        """
        if file_ids is not None and len(file_ids) > 10:
            raise ValueError("Invalid value for `file_ids`, number of items must be less than or equal to `10`")

        self._file_ids = file_ids
