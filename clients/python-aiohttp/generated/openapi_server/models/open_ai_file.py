# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OpenAIFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, object: str=None, bytes: int=None, created_at: int=None, filename: str=None, purpose: str=None, status: str=None, status_details: object=None):
        """OpenAIFile - a model defined in OpenAPI

        :param id: The id of this OpenAIFile.
        :param object: The object of this OpenAIFile.
        :param bytes: The bytes of this OpenAIFile.
        :param created_at: The created_at of this OpenAIFile.
        :param filename: The filename of this OpenAIFile.
        :param purpose: The purpose of this OpenAIFile.
        :param status: The status of this OpenAIFile.
        :param status_details: The status_details of this OpenAIFile.
        """
        self.openapi_types = {
            'id': str,
            'object': str,
            'bytes': int,
            'created_at': int,
            'filename': str,
            'purpose': str,
            'status': str,
            'status_details': object
        }

        self.attribute_map = {
            'id': 'id',
            'object': 'object',
            'bytes': 'bytes',
            'created_at': 'created_at',
            'filename': 'filename',
            'purpose': 'purpose',
            'status': 'status',
            'status_details': 'status_details'
        }

        self._id = id
        self._object = object
        self._bytes = bytes
        self._created_at = created_at
        self._filename = filename
        self._purpose = purpose
        self._status = status
        self._status_details = status_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OpenAIFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OpenAIFile of this OpenAIFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this OpenAIFile.


        :return: The id of this OpenAIFile.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OpenAIFile.


        :param id: The id of this OpenAIFile.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def object(self):
        """Gets the object of this OpenAIFile.


        :return: The object of this OpenAIFile.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this OpenAIFile.


        :param object: The object of this OpenAIFile.
        :type object: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")

        self._object = object

    @property
    def bytes(self):
        """Gets the bytes of this OpenAIFile.


        :return: The bytes of this OpenAIFile.
        :rtype: int
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this OpenAIFile.


        :param bytes: The bytes of this OpenAIFile.
        :type bytes: int
        """
        if bytes is None:
            raise ValueError("Invalid value for `bytes`, must not be `None`")

        self._bytes = bytes

    @property
    def created_at(self):
        """Gets the created_at of this OpenAIFile.


        :return: The created_at of this OpenAIFile.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OpenAIFile.


        :param created_at: The created_at of this OpenAIFile.
        :type created_at: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def filename(self):
        """Gets the filename of this OpenAIFile.


        :return: The filename of this OpenAIFile.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this OpenAIFile.


        :param filename: The filename of this OpenAIFile.
        :type filename: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")

        self._filename = filename

    @property
    def purpose(self):
        """Gets the purpose of this OpenAIFile.


        :return: The purpose of this OpenAIFile.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this OpenAIFile.


        :param purpose: The purpose of this OpenAIFile.
        :type purpose: str
        """
        if purpose is None:
            raise ValueError("Invalid value for `purpose`, must not be `None`")

        self._purpose = purpose

    @property
    def status(self):
        """Gets the status of this OpenAIFile.


        :return: The status of this OpenAIFile.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OpenAIFile.


        :param status: The status of this OpenAIFile.
        :type status: str
        """

        self._status = status

    @property
    def status_details(self):
        """Gets the status_details of this OpenAIFile.


        :return: The status_details of this OpenAIFile.
        :rtype: object
        """
        return self._status_details

    @status_details.setter
    def status_details(self, status_details):
        """Sets the status_details of this OpenAIFile.


        :param status_details: The status_details of this OpenAIFile.
        :type status_details: object
        """

        self._status_details = status_details
