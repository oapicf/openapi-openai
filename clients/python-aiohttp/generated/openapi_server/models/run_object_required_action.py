# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.run_object_required_action_submit_tool_outputs import RunObjectRequiredActionSubmitToolOutputs
from openapi_server import util


class RunObjectRequiredAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, submit_tool_outputs: RunObjectRequiredActionSubmitToolOutputs=None):
        """RunObjectRequiredAction - a model defined in OpenAPI

        :param type: The type of this RunObjectRequiredAction.
        :param submit_tool_outputs: The submit_tool_outputs of this RunObjectRequiredAction.
        """
        self.openapi_types = {
            'type': str,
            'submit_tool_outputs': RunObjectRequiredActionSubmitToolOutputs
        }

        self.attribute_map = {
            'type': 'type',
            'submit_tool_outputs': 'submit_tool_outputs'
        }

        self._type = type
        self._submit_tool_outputs = submit_tool_outputs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunObjectRequiredAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunObject_required_action of this RunObjectRequiredAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this RunObjectRequiredAction.

        For now, this is always `submit_tool_outputs`.

        :return: The type of this RunObjectRequiredAction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RunObjectRequiredAction.

        For now, this is always `submit_tool_outputs`.

        :param type: The type of this RunObjectRequiredAction.
        :type type: str
        """
        allowed_values = ["submit_tool_outputs"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def submit_tool_outputs(self):
        """Gets the submit_tool_outputs of this RunObjectRequiredAction.


        :return: The submit_tool_outputs of this RunObjectRequiredAction.
        :rtype: RunObjectRequiredActionSubmitToolOutputs
        """
        return self._submit_tool_outputs

    @submit_tool_outputs.setter
    def submit_tool_outputs(self, submit_tool_outputs):
        """Sets the submit_tool_outputs of this RunObjectRequiredAction.


        :param submit_tool_outputs: The submit_tool_outputs of this RunObjectRequiredAction.
        :type submit_tool_outputs: RunObjectRequiredActionSubmitToolOutputs
        """
        if submit_tool_outputs is None:
            raise ValueError("Invalid value for `submit_tool_outputs`, must not be `None`")

        self._submit_tool_outputs = submit_tool_outputs
