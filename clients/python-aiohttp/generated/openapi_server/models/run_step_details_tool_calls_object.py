# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.run_step_details_tool_calls_object_tool_calls_inner import RunStepDetailsToolCallsObjectToolCallsInner
from openapi_server import util


class RunStepDetailsToolCallsObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, tool_calls: List[RunStepDetailsToolCallsObjectToolCallsInner]=None):
        """RunStepDetailsToolCallsObject - a model defined in OpenAPI

        :param type: The type of this RunStepDetailsToolCallsObject.
        :param tool_calls: The tool_calls of this RunStepDetailsToolCallsObject.
        """
        self.openapi_types = {
            'type': str,
            'tool_calls': List[RunStepDetailsToolCallsObjectToolCallsInner]
        }

        self.attribute_map = {
            'type': 'type',
            'tool_calls': 'tool_calls'
        }

        self._type = type
        self._tool_calls = tool_calls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunStepDetailsToolCallsObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunStepDetailsToolCallsObject of this RunStepDetailsToolCallsObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this RunStepDetailsToolCallsObject.

        Always `tool_calls`.

        :return: The type of this RunStepDetailsToolCallsObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RunStepDetailsToolCallsObject.

        Always `tool_calls`.

        :param type: The type of this RunStepDetailsToolCallsObject.
        :type type: str
        """
        allowed_values = ["tool_calls"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def tool_calls(self):
        """Gets the tool_calls of this RunStepDetailsToolCallsObject.

        An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`. 

        :return: The tool_calls of this RunStepDetailsToolCallsObject.
        :rtype: List[RunStepDetailsToolCallsObjectToolCallsInner]
        """
        return self._tool_calls

    @tool_calls.setter
    def tool_calls(self, tool_calls):
        """Sets the tool_calls of this RunStepDetailsToolCallsObject.

        An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`. 

        :param tool_calls: The tool_calls of this RunStepDetailsToolCallsObject.
        :type tool_calls: List[RunStepDetailsToolCallsObjectToolCallsInner]
        """
        if tool_calls is None:
            raise ValueError("Invalid value for `tool_calls`, must not be `None`")

        self._tool_calls = tool_calls
