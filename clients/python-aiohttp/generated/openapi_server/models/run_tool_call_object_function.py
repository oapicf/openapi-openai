# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RunToolCallObjectFunction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, arguments: str=None):
        """RunToolCallObjectFunction - a model defined in OpenAPI

        :param name: The name of this RunToolCallObjectFunction.
        :param arguments: The arguments of this RunToolCallObjectFunction.
        """
        self.openapi_types = {
            'name': str,
            'arguments': str
        }

        self.attribute_map = {
            'name': 'name',
            'arguments': 'arguments'
        }

        self._name = name
        self._arguments = arguments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunToolCallObjectFunction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunToolCallObject_function of this RunToolCallObjectFunction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this RunToolCallObjectFunction.

        The name of the function.

        :return: The name of this RunToolCallObjectFunction.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RunToolCallObjectFunction.

        The name of the function.

        :param name: The name of this RunToolCallObjectFunction.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def arguments(self):
        """Gets the arguments of this RunToolCallObjectFunction.

        The arguments that the model expects you to pass to the function.

        :return: The arguments of this RunToolCallObjectFunction.
        :rtype: str
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this RunToolCallObjectFunction.

        The arguments that the model expects you to pass to the function.

        :param arguments: The arguments of this RunToolCallObjectFunction.
        :type arguments: str
        """
        if arguments is None:
            raise ValueError("Invalid value for `arguments`, must not be `None`")

        self._arguments = arguments
