# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TranscriptionSegment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, seek: int=None, start: float=None, end: float=None, text: str=None, tokens: List[int]=None, temperature: float=None, avg_logprob: float=None, compression_ratio: float=None, no_speech_prob: float=None):
        """TranscriptionSegment - a model defined in OpenAPI

        :param id: The id of this TranscriptionSegment.
        :param seek: The seek of this TranscriptionSegment.
        :param start: The start of this TranscriptionSegment.
        :param end: The end of this TranscriptionSegment.
        :param text: The text of this TranscriptionSegment.
        :param tokens: The tokens of this TranscriptionSegment.
        :param temperature: The temperature of this TranscriptionSegment.
        :param avg_logprob: The avg_logprob of this TranscriptionSegment.
        :param compression_ratio: The compression_ratio of this TranscriptionSegment.
        :param no_speech_prob: The no_speech_prob of this TranscriptionSegment.
        """
        self.openapi_types = {
            'id': int,
            'seek': int,
            'start': float,
            'end': float,
            'text': str,
            'tokens': List[int],
            'temperature': float,
            'avg_logprob': float,
            'compression_ratio': float,
            'no_speech_prob': float
        }

        self.attribute_map = {
            'id': 'id',
            'seek': 'seek',
            'start': 'start',
            'end': 'end',
            'text': 'text',
            'tokens': 'tokens',
            'temperature': 'temperature',
            'avg_logprob': 'avg_logprob',
            'compression_ratio': 'compression_ratio',
            'no_speech_prob': 'no_speech_prob'
        }

        self._id = id
        self._seek = seek
        self._start = start
        self._end = end
        self._text = text
        self._tokens = tokens
        self._temperature = temperature
        self._avg_logprob = avg_logprob
        self._compression_ratio = compression_ratio
        self._no_speech_prob = no_speech_prob

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TranscriptionSegment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TranscriptionSegment of this TranscriptionSegment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TranscriptionSegment.

        Unique identifier of the segment.

        :return: The id of this TranscriptionSegment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TranscriptionSegment.

        Unique identifier of the segment.

        :param id: The id of this TranscriptionSegment.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def seek(self):
        """Gets the seek of this TranscriptionSegment.

        Seek offset of the segment.

        :return: The seek of this TranscriptionSegment.
        :rtype: int
        """
        return self._seek

    @seek.setter
    def seek(self, seek):
        """Sets the seek of this TranscriptionSegment.

        Seek offset of the segment.

        :param seek: The seek of this TranscriptionSegment.
        :type seek: int
        """
        if seek is None:
            raise ValueError("Invalid value for `seek`, must not be `None`")

        self._seek = seek

    @property
    def start(self):
        """Gets the start of this TranscriptionSegment.

        Start time of the segment in seconds.

        :return: The start of this TranscriptionSegment.
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this TranscriptionSegment.

        Start time of the segment in seconds.

        :param start: The start of this TranscriptionSegment.
        :type start: float
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")

        self._start = start

    @property
    def end(self):
        """Gets the end of this TranscriptionSegment.

        End time of the segment in seconds.

        :return: The end of this TranscriptionSegment.
        :rtype: float
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this TranscriptionSegment.

        End time of the segment in seconds.

        :param end: The end of this TranscriptionSegment.
        :type end: float
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")

        self._end = end

    @property
    def text(self):
        """Gets the text of this TranscriptionSegment.

        Text content of the segment.

        :return: The text of this TranscriptionSegment.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TranscriptionSegment.

        Text content of the segment.

        :param text: The text of this TranscriptionSegment.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def tokens(self):
        """Gets the tokens of this TranscriptionSegment.

        Array of token IDs for the text content.

        :return: The tokens of this TranscriptionSegment.
        :rtype: List[int]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this TranscriptionSegment.

        Array of token IDs for the text content.

        :param tokens: The tokens of this TranscriptionSegment.
        :type tokens: List[int]
        """
        if tokens is None:
            raise ValueError("Invalid value for `tokens`, must not be `None`")

        self._tokens = tokens

    @property
    def temperature(self):
        """Gets the temperature of this TranscriptionSegment.

        Temperature parameter used for generating the segment.

        :return: The temperature of this TranscriptionSegment.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this TranscriptionSegment.

        Temperature parameter used for generating the segment.

        :param temperature: The temperature of this TranscriptionSegment.
        :type temperature: float
        """
        if temperature is None:
            raise ValueError("Invalid value for `temperature`, must not be `None`")

        self._temperature = temperature

    @property
    def avg_logprob(self):
        """Gets the avg_logprob of this TranscriptionSegment.

        Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.

        :return: The avg_logprob of this TranscriptionSegment.
        :rtype: float
        """
        return self._avg_logprob

    @avg_logprob.setter
    def avg_logprob(self, avg_logprob):
        """Sets the avg_logprob of this TranscriptionSegment.

        Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.

        :param avg_logprob: The avg_logprob of this TranscriptionSegment.
        :type avg_logprob: float
        """
        if avg_logprob is None:
            raise ValueError("Invalid value for `avg_logprob`, must not be `None`")

        self._avg_logprob = avg_logprob

    @property
    def compression_ratio(self):
        """Gets the compression_ratio of this TranscriptionSegment.

        Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.

        :return: The compression_ratio of this TranscriptionSegment.
        :rtype: float
        """
        return self._compression_ratio

    @compression_ratio.setter
    def compression_ratio(self, compression_ratio):
        """Sets the compression_ratio of this TranscriptionSegment.

        Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.

        :param compression_ratio: The compression_ratio of this TranscriptionSegment.
        :type compression_ratio: float
        """
        if compression_ratio is None:
            raise ValueError("Invalid value for `compression_ratio`, must not be `None`")

        self._compression_ratio = compression_ratio

    @property
    def no_speech_prob(self):
        """Gets the no_speech_prob of this TranscriptionSegment.

        Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.

        :return: The no_speech_prob of this TranscriptionSegment.
        :rtype: float
        """
        return self._no_speech_prob

    @no_speech_prob.setter
    def no_speech_prob(self, no_speech_prob):
        """Sets the no_speech_prob of this TranscriptionSegment.

        Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.

        :param no_speech_prob: The no_speech_prob of this TranscriptionSegment.
        :type no_speech_prob: float
        """
        if no_speech_prob is None:
            raise ValueError("Invalid value for `no_speech_prob`, must not be `None`")

        self._no_speech_prob = no_speech_prob
