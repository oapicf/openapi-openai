# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.openapi_server.models.base_model import Model
from app.openapi_server.models.assistants_api_response_format import AssistantsApiResponseFormat  # noqa: F401,E501
from openapi_server import util


class AssistantsApiResponseFormatOption(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: str='text'):  # noqa: E501
        """AssistantsApiResponseFormatOption - a model defined in Swagger

        :param type: The type of this AssistantsApiResponseFormatOption.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'type': str
        }

        self.attribute_map = {
            'type': 'type'
        }

        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'AssistantsApiResponseFormatOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AssistantsApiResponseFormatOption of this AssistantsApiResponseFormatOption.  # noqa: E501
        :rtype: AssistantsApiResponseFormatOption
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this AssistantsApiResponseFormatOption.

        Must be one of `text` or `json_object`.  # noqa: E501

        :return: The type of this AssistantsApiResponseFormatOption.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this AssistantsApiResponseFormatOption.

        Must be one of `text` or `json_object`.  # noqa: E501

        :param type: The type of this AssistantsApiResponseFormatOption.
        :type type: str
        """
        allowed_values = ["text", "json_object"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
