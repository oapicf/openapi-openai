# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.openapi_server.models.base_model import Model
from app.openapi_server.models.create_fine_tune_request_model import CreateFineTuneRequestModel  # noqa: F401,E501
from openapi_server import util


class CreateFineTuneRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, training_file: str=None, validation_file: str=None, model: CreateFineTuneRequestModel=None, n_epochs: int=4, batch_size: int=None, learning_rate_multiplier: float=None, prompt_loss_weight: float=0.01, compute_classification_metrics: bool=False, classification_n_classes: int=None, classification_positive_class: str=None, classification_betas: List[float]=None, suffix: str=None):  # noqa: E501
        """CreateFineTuneRequest - a model defined in Swagger

        :param training_file: The training_file of this CreateFineTuneRequest.  # noqa: E501
        :type training_file: str
        :param validation_file: The validation_file of this CreateFineTuneRequest.  # noqa: E501
        :type validation_file: str
        :param model: The model of this CreateFineTuneRequest.  # noqa: E501
        :type model: CreateFineTuneRequestModel
        :param n_epochs: The n_epochs of this CreateFineTuneRequest.  # noqa: E501
        :type n_epochs: int
        :param batch_size: The batch_size of this CreateFineTuneRequest.  # noqa: E501
        :type batch_size: int
        :param learning_rate_multiplier: The learning_rate_multiplier of this CreateFineTuneRequest.  # noqa: E501
        :type learning_rate_multiplier: float
        :param prompt_loss_weight: The prompt_loss_weight of this CreateFineTuneRequest.  # noqa: E501
        :type prompt_loss_weight: float
        :param compute_classification_metrics: The compute_classification_metrics of this CreateFineTuneRequest.  # noqa: E501
        :type compute_classification_metrics: bool
        :param classification_n_classes: The classification_n_classes of this CreateFineTuneRequest.  # noqa: E501
        :type classification_n_classes: int
        :param classification_positive_class: The classification_positive_class of this CreateFineTuneRequest.  # noqa: E501
        :type classification_positive_class: str
        :param classification_betas: The classification_betas of this CreateFineTuneRequest.  # noqa: E501
        :type classification_betas: List[float]
        :param suffix: The suffix of this CreateFineTuneRequest.  # noqa: E501
        :type suffix: str
        """
        self.swagger_types = {
            'training_file': str,
            'validation_file': str,
            'model': CreateFineTuneRequestModel,
            'n_epochs': int,
            'batch_size': int,
            'learning_rate_multiplier': float,
            'prompt_loss_weight': float,
            'compute_classification_metrics': bool,
            'classification_n_classes': int,
            'classification_positive_class': str,
            'classification_betas': List[float],
            'suffix': str
        }

        self.attribute_map = {
            'training_file': 'training_file',
            'validation_file': 'validation_file',
            'model': 'model',
            'n_epochs': 'n_epochs',
            'batch_size': 'batch_size',
            'learning_rate_multiplier': 'learning_rate_multiplier',
            'prompt_loss_weight': 'prompt_loss_weight',
            'compute_classification_metrics': 'compute_classification_metrics',
            'classification_n_classes': 'classification_n_classes',
            'classification_positive_class': 'classification_positive_class',
            'classification_betas': 'classification_betas',
            'suffix': 'suffix'
        }

        self._training_file = training_file
        self._validation_file = validation_file
        self._model = model
        self._n_epochs = n_epochs
        self._batch_size = batch_size
        self._learning_rate_multiplier = learning_rate_multiplier
        self._prompt_loss_weight = prompt_loss_weight
        self._compute_classification_metrics = compute_classification_metrics
        self._classification_n_classes = classification_n_classes
        self._classification_positive_class = classification_positive_class
        self._classification_betas = classification_betas
        self._suffix = suffix

    @classmethod
    def from_dict(cls, dikt) -> 'CreateFineTuneRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateFineTuneRequest of this CreateFineTuneRequest.  # noqa: E501
        :rtype: CreateFineTuneRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def training_file(self) -> str:
        """Gets the training_file of this CreateFineTuneRequest.

        The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file, where each training example is a JSON object with the keys \"prompt\" and \"completion\". Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.   # noqa: E501

        :return: The training_file of this CreateFineTuneRequest.
        :rtype: str
        """
        return self._training_file

    @training_file.setter
    def training_file(self, training_file: str):
        """Sets the training_file of this CreateFineTuneRequest.

        The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file, where each training example is a JSON object with the keys \"prompt\" and \"completion\". Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.   # noqa: E501

        :param training_file: The training_file of this CreateFineTuneRequest.
        :type training_file: str
        """
        if training_file is None:
            raise ValueError("Invalid value for `training_file`, must not be `None`")  # noqa: E501

        self._training_file = training_file

    @property
    def validation_file(self) -> str:
        """Gets the validation_file of this CreateFineTuneRequest.

        The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model). Your train and validation data should be mutually exclusive.  Your dataset must be formatted as a JSONL file, where each validation example is a JSON object with the keys \"prompt\" and \"completion\". Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.   # noqa: E501

        :return: The validation_file of this CreateFineTuneRequest.
        :rtype: str
        """
        return self._validation_file

    @validation_file.setter
    def validation_file(self, validation_file: str):
        """Sets the validation_file of this CreateFineTuneRequest.

        The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model). Your train and validation data should be mutually exclusive.  Your dataset must be formatted as a JSONL file, where each validation example is a JSON object with the keys \"prompt\" and \"completion\". Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.   # noqa: E501

        :param validation_file: The validation_file of this CreateFineTuneRequest.
        :type validation_file: str
        """

        self._validation_file = validation_file

    @property
    def model(self) -> CreateFineTuneRequestModel:
        """Gets the model of this CreateFineTuneRequest.


        :return: The model of this CreateFineTuneRequest.
        :rtype: CreateFineTuneRequestModel
        """
        return self._model

    @model.setter
    def model(self, model: CreateFineTuneRequestModel):
        """Sets the model of this CreateFineTuneRequest.


        :param model: The model of this CreateFineTuneRequest.
        :type model: CreateFineTuneRequestModel
        """

        self._model = model

    @property
    def n_epochs(self) -> int:
        """Gets the n_epochs of this CreateFineTuneRequest.

        The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.   # noqa: E501

        :return: The n_epochs of this CreateFineTuneRequest.
        :rtype: int
        """
        return self._n_epochs

    @n_epochs.setter
    def n_epochs(self, n_epochs: int):
        """Sets the n_epochs of this CreateFineTuneRequest.

        The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.   # noqa: E501

        :param n_epochs: The n_epochs of this CreateFineTuneRequest.
        :type n_epochs: int
        """

        self._n_epochs = n_epochs

    @property
    def batch_size(self) -> int:
        """Gets the batch_size of this CreateFineTuneRequest.

        The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass.  By default, the batch size will be dynamically configured to be ~0.2% of the number of examples in the training set, capped at 256 - in general, we've found that larger batch sizes tend to work better for larger datasets.   # noqa: E501

        :return: The batch_size of this CreateFineTuneRequest.
        :rtype: int
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size: int):
        """Sets the batch_size of this CreateFineTuneRequest.

        The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass.  By default, the batch size will be dynamically configured to be ~0.2% of the number of examples in the training set, capped at 256 - in general, we've found that larger batch sizes tend to work better for larger datasets.   # noqa: E501

        :param batch_size: The batch_size of this CreateFineTuneRequest.
        :type batch_size: int
        """

        self._batch_size = batch_size

    @property
    def learning_rate_multiplier(self) -> float:
        """Gets the learning_rate_multiplier of this CreateFineTuneRequest.

        The learning rate multiplier to use for training. The fine-tuning learning rate is the original learning rate used for pretraining multiplied by this value.  By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on final `batch_size` (larger learning rates tend to perform better with larger batch sizes). We recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best results.   # noqa: E501

        :return: The learning_rate_multiplier of this CreateFineTuneRequest.
        :rtype: float
        """
        return self._learning_rate_multiplier

    @learning_rate_multiplier.setter
    def learning_rate_multiplier(self, learning_rate_multiplier: float):
        """Sets the learning_rate_multiplier of this CreateFineTuneRequest.

        The learning rate multiplier to use for training. The fine-tuning learning rate is the original learning rate used for pretraining multiplied by this value.  By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on final `batch_size` (larger learning rates tend to perform better with larger batch sizes). We recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best results.   # noqa: E501

        :param learning_rate_multiplier: The learning_rate_multiplier of this CreateFineTuneRequest.
        :type learning_rate_multiplier: float
        """

        self._learning_rate_multiplier = learning_rate_multiplier

    @property
    def prompt_loss_weight(self) -> float:
        """Gets the prompt_loss_weight of this CreateFineTuneRequest.

        The weight to use for loss on the prompt tokens. This controls how much the model tries to learn to generate the prompt (as compared to the completion which always has a weight of 1.0), and can add a stabilizing effect to training when completions are short.  If prompts are extremely long (relative to completions), it may make sense to reduce this weight so as to avoid over-prioritizing learning the prompt.   # noqa: E501

        :return: The prompt_loss_weight of this CreateFineTuneRequest.
        :rtype: float
        """
        return self._prompt_loss_weight

    @prompt_loss_weight.setter
    def prompt_loss_weight(self, prompt_loss_weight: float):
        """Sets the prompt_loss_weight of this CreateFineTuneRequest.

        The weight to use for loss on the prompt tokens. This controls how much the model tries to learn to generate the prompt (as compared to the completion which always has a weight of 1.0), and can add a stabilizing effect to training when completions are short.  If prompts are extremely long (relative to completions), it may make sense to reduce this weight so as to avoid over-prioritizing learning the prompt.   # noqa: E501

        :param prompt_loss_weight: The prompt_loss_weight of this CreateFineTuneRequest.
        :type prompt_loss_weight: float
        """

        self._prompt_loss_weight = prompt_loss_weight

    @property
    def compute_classification_metrics(self) -> bool:
        """Gets the compute_classification_metrics of this CreateFineTuneRequest.

        If set, we calculate classification-specific metrics such as accuracy and F-1 score using the validation set at the end of every epoch. These metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).  In order to compute classification metrics, you must provide a `validation_file`. Additionally, you must specify `classification_n_classes` for multiclass classification or `classification_positive_class` for binary classification.   # noqa: E501

        :return: The compute_classification_metrics of this CreateFineTuneRequest.
        :rtype: bool
        """
        return self._compute_classification_metrics

    @compute_classification_metrics.setter
    def compute_classification_metrics(self, compute_classification_metrics: bool):
        """Sets the compute_classification_metrics of this CreateFineTuneRequest.

        If set, we calculate classification-specific metrics such as accuracy and F-1 score using the validation set at the end of every epoch. These metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).  In order to compute classification metrics, you must provide a `validation_file`. Additionally, you must specify `classification_n_classes` for multiclass classification or `classification_positive_class` for binary classification.   # noqa: E501

        :param compute_classification_metrics: The compute_classification_metrics of this CreateFineTuneRequest.
        :type compute_classification_metrics: bool
        """

        self._compute_classification_metrics = compute_classification_metrics

    @property
    def classification_n_classes(self) -> int:
        """Gets the classification_n_classes of this CreateFineTuneRequest.

        The number of classes in a classification task.  This parameter is required for multiclass classification.   # noqa: E501

        :return: The classification_n_classes of this CreateFineTuneRequest.
        :rtype: int
        """
        return self._classification_n_classes

    @classification_n_classes.setter
    def classification_n_classes(self, classification_n_classes: int):
        """Sets the classification_n_classes of this CreateFineTuneRequest.

        The number of classes in a classification task.  This parameter is required for multiclass classification.   # noqa: E501

        :param classification_n_classes: The classification_n_classes of this CreateFineTuneRequest.
        :type classification_n_classes: int
        """

        self._classification_n_classes = classification_n_classes

    @property
    def classification_positive_class(self) -> str:
        """Gets the classification_positive_class of this CreateFineTuneRequest.

        The positive class in binary classification.  This parameter is needed to generate precision, recall, and F1 metrics when doing binary classification.   # noqa: E501

        :return: The classification_positive_class of this CreateFineTuneRequest.
        :rtype: str
        """
        return self._classification_positive_class

    @classification_positive_class.setter
    def classification_positive_class(self, classification_positive_class: str):
        """Sets the classification_positive_class of this CreateFineTuneRequest.

        The positive class in binary classification.  This parameter is needed to generate precision, recall, and F1 metrics when doing binary classification.   # noqa: E501

        :param classification_positive_class: The classification_positive_class of this CreateFineTuneRequest.
        :type classification_positive_class: str
        """

        self._classification_positive_class = classification_positive_class

    @property
    def classification_betas(self) -> List[float]:
        """Gets the classification_betas of this CreateFineTuneRequest.

        If this is provided, we calculate F-beta scores at the specified beta values. The F-beta score is a generalization of F-1 score. This is only used for binary classification.  With a beta of 1 (i.e. the F-1 score), precision and recall are given the same weight. A larger beta score puts more weight on recall and less on precision. A smaller beta score puts more weight on precision and less on recall.   # noqa: E501

        :return: The classification_betas of this CreateFineTuneRequest.
        :rtype: List[float]
        """
        return self._classification_betas

    @classification_betas.setter
    def classification_betas(self, classification_betas: List[float]):
        """Sets the classification_betas of this CreateFineTuneRequest.

        If this is provided, we calculate F-beta scores at the specified beta values. The F-beta score is a generalization of F-1 score. This is only used for binary classification.  With a beta of 1 (i.e. the F-1 score), precision and recall are given the same weight. A larger beta score puts more weight on recall and less on precision. A smaller beta score puts more weight on precision and less on recall.   # noqa: E501

        :param classification_betas: The classification_betas of this CreateFineTuneRequest.
        :type classification_betas: List[float]
        """

        self._classification_betas = classification_betas

    @property
    def suffix(self) -> str:
        """Gets the suffix of this CreateFineTuneRequest.

        A string of up to 40 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`.   # noqa: E501

        :return: The suffix of this CreateFineTuneRequest.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix: str):
        """Sets the suffix of this CreateFineTuneRequest.

        A string of up to 40 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`.   # noqa: E501

        :param suffix: The suffix of this CreateFineTuneRequest.
        :type suffix: str
        """
        if suffix is not None and len(suffix) > 40:
            raise ValueError("Invalid value for `suffix`, length must be less than or equal to `40`")  # noqa: E501
        if suffix is not None and len(suffix) < 1:
            raise ValueError("Invalid value for `suffix`, length must be greater than or equal to `1`")  # noqa: E501

        self._suffix = suffix
