# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.openapi_server.models.base_model import Model
from app.openapi_server.models.create_moderation_response_results_inner import CreateModerationResponseResultsInner  # noqa: F401,E501
from openapi_server import util


class CreateModerationResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, model: str=None, results: List[CreateModerationResponseResultsInner]=None):  # noqa: E501
        """CreateModerationResponse - a model defined in Swagger

        :param id: The id of this CreateModerationResponse.  # noqa: E501
        :type id: str
        :param model: The model of this CreateModerationResponse.  # noqa: E501
        :type model: str
        :param results: The results of this CreateModerationResponse.  # noqa: E501
        :type results: List[CreateModerationResponseResultsInner]
        """
        self.swagger_types = {
            'id': str,
            'model': str,
            'results': List[CreateModerationResponseResultsInner]
        }

        self.attribute_map = {
            'id': 'id',
            'model': 'model',
            'results': 'results'
        }

        self._id = id
        self._model = model
        self._results = results

    @classmethod
    def from_dict(cls, dikt) -> 'CreateModerationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateModerationResponse of this CreateModerationResponse.  # noqa: E501
        :rtype: CreateModerationResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this CreateModerationResponse.


        :return: The id of this CreateModerationResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this CreateModerationResponse.


        :param id: The id of this CreateModerationResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def model(self) -> str:
        """Gets the model of this CreateModerationResponse.


        :return: The model of this CreateModerationResponse.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this CreateModerationResponse.


        :param model: The model of this CreateModerationResponse.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def results(self) -> List[CreateModerationResponseResultsInner]:
        """Gets the results of this CreateModerationResponse.


        :return: The results of this CreateModerationResponse.
        :rtype: List[CreateModerationResponseResultsInner]
        """
        return self._results

    @results.setter
    def results(self, results: List[CreateModerationResponseResultsInner]):
        """Sets the results of this CreateModerationResponse.


        :param results: The results of this CreateModerationResponse.
        :type results: List[CreateModerationResponseResultsInner]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")  # noqa: E501

        self._results = results
