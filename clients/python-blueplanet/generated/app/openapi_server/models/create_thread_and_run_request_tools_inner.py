# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.openapi_server.models.base_model import Model
from app.openapi_server.models.assistant_tools_code import AssistantToolsCode  # noqa: F401,E501
from app.openapi_server.models.assistant_tools_function import AssistantToolsFunction  # noqa: F401,E501
from app.openapi_server.models.assistant_tools_retrieval import AssistantToolsRetrieval  # noqa: F401,E501
from app.openapi_server.models.function_object import FunctionObject  # noqa: F401,E501
from openapi_server import util


class CreateThreadAndRunRequestToolsInner(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, function: FunctionObject=None):  # noqa: E501
        """CreateThreadAndRunRequestToolsInner - a model defined in Swagger

        :param type: The type of this CreateThreadAndRunRequestToolsInner.  # noqa: E501
        :type type: str
        :param function: The function of this CreateThreadAndRunRequestToolsInner.  # noqa: E501
        :type function: FunctionObject
        """
        self.swagger_types = {
            'type': str,
            'function': FunctionObject
        }

        self.attribute_map = {
            'type': 'type',
            'function': 'function'
        }

        self._type = type
        self._function = function

    @classmethod
    def from_dict(cls, dikt) -> 'CreateThreadAndRunRequestToolsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateThreadAndRunRequest_tools_inner of this CreateThreadAndRunRequestToolsInner.  # noqa: E501
        :rtype: CreateThreadAndRunRequestToolsInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this CreateThreadAndRunRequestToolsInner.

        The type of tool being defined: `code_interpreter`  # noqa: E501

        :return: The type of this CreateThreadAndRunRequestToolsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this CreateThreadAndRunRequestToolsInner.

        The type of tool being defined: `code_interpreter`  # noqa: E501

        :param type: The type of this CreateThreadAndRunRequestToolsInner.
        :type type: str
        """
        allowed_values = ["code_interpreter", "retrieval", "function"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def function(self) -> FunctionObject:
        """Gets the function of this CreateThreadAndRunRequestToolsInner.


        :return: The function of this CreateThreadAndRunRequestToolsInner.
        :rtype: FunctionObject
        """
        return self._function

    @function.setter
    def function(self, function: FunctionObject):
        """Sets the function of this CreateThreadAndRunRequestToolsInner.


        :param function: The function of this CreateThreadAndRunRequestToolsInner.
        :type function: FunctionObject
        """
        if function is None:
            raise ValueError("Invalid value for `function`, must not be `None`")  # noqa: E501

        self._function = function
