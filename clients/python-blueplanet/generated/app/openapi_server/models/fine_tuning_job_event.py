# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.openapi_server.models.base_model import Model
from openapi_server import util


class FineTuningJobEvent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, created_at: int=None, level: str=None, message: str=None, object: str=None):  # noqa: E501
        """FineTuningJobEvent - a model defined in Swagger

        :param id: The id of this FineTuningJobEvent.  # noqa: E501
        :type id: str
        :param created_at: The created_at of this FineTuningJobEvent.  # noqa: E501
        :type created_at: int
        :param level: The level of this FineTuningJobEvent.  # noqa: E501
        :type level: str
        :param message: The message of this FineTuningJobEvent.  # noqa: E501
        :type message: str
        :param object: The object of this FineTuningJobEvent.  # noqa: E501
        :type object: str
        """
        self.swagger_types = {
            'id': str,
            'created_at': int,
            'level': str,
            'message': str,
            'object': str
        }

        self.attribute_map = {
            'id': 'id',
            'created_at': 'created_at',
            'level': 'level',
            'message': 'message',
            'object': 'object'
        }

        self._id = id
        self._created_at = created_at
        self._level = level
        self._message = message
        self._object = object

    @classmethod
    def from_dict(cls, dikt) -> 'FineTuningJobEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FineTuningJobEvent of this FineTuningJobEvent.  # noqa: E501
        :rtype: FineTuningJobEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this FineTuningJobEvent.


        :return: The id of this FineTuningJobEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this FineTuningJobEvent.


        :param id: The id of this FineTuningJobEvent.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self) -> int:
        """Gets the created_at of this FineTuningJobEvent.


        :return: The created_at of this FineTuningJobEvent.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: int):
        """Sets the created_at of this FineTuningJobEvent.


        :param created_at: The created_at of this FineTuningJobEvent.
        :type created_at: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def level(self) -> str:
        """Gets the level of this FineTuningJobEvent.


        :return: The level of this FineTuningJobEvent.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level: str):
        """Sets the level of this FineTuningJobEvent.


        :param level: The level of this FineTuningJobEvent.
        :type level: str
        """
        allowed_values = ["info", "warn", "error"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def message(self) -> str:
        """Gets the message of this FineTuningJobEvent.


        :return: The message of this FineTuningJobEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this FineTuningJobEvent.


        :param message: The message of this FineTuningJobEvent.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def object(self) -> str:
        """Gets the object of this FineTuningJobEvent.


        :return: The object of this FineTuningJobEvent.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object: str):
        """Sets the object of this FineTuningJobEvent.


        :param object: The object of this FineTuningJobEvent.
        :type object: str
        """
        allowed_values = ["fine_tuning.job.event"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"
                .format(object, allowed_values)
            )

        self._object = object
