# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.openapi_server.models.base_model import Model
from app.openapi_server.models.run_object import RunObject  # noqa: F401,E501
from app.openapi_server.models.run_stream_event_one_of import RunStreamEventOneOf  # noqa: F401,E501
from app.openapi_server.models.run_stream_event_one_of1 import RunStreamEventOneOf1  # noqa: F401,E501
from app.openapi_server.models.run_stream_event_one_of2 import RunStreamEventOneOf2  # noqa: F401,E501
from app.openapi_server.models.run_stream_event_one_of3 import RunStreamEventOneOf3  # noqa: F401,E501
from app.openapi_server.models.run_stream_event_one_of4 import RunStreamEventOneOf4  # noqa: F401,E501
from app.openapi_server.models.run_stream_event_one_of5 import RunStreamEventOneOf5  # noqa: F401,E501
from app.openapi_server.models.run_stream_event_one_of6 import RunStreamEventOneOf6  # noqa: F401,E501
from app.openapi_server.models.run_stream_event_one_of7 import RunStreamEventOneOf7  # noqa: F401,E501
from app.openapi_server.models.run_stream_event_one_of8 import RunStreamEventOneOf8  # noqa: F401,E501
from openapi_server import util


class RunStreamEvent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, event: str=None, data: RunObject=None):  # noqa: E501
        """RunStreamEvent - a model defined in Swagger

        :param event: The event of this RunStreamEvent.  # noqa: E501
        :type event: str
        :param data: The data of this RunStreamEvent.  # noqa: E501
        :type data: RunObject
        """
        self.swagger_types = {
            'event': str,
            'data': RunObject
        }

        self.attribute_map = {
            'event': 'event',
            'data': 'data'
        }

        self._event = event
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'RunStreamEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RunStreamEvent of this RunStreamEvent.  # noqa: E501
        :rtype: RunStreamEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self) -> str:
        """Gets the event of this RunStreamEvent.


        :return: The event of this RunStreamEvent.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event: str):
        """Sets the event of this RunStreamEvent.


        :param event: The event of this RunStreamEvent.
        :type event: str
        """
        allowed_values = ["thread.run.expired"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"
                .format(event, allowed_values)
            )

        self._event = event

    @property
    def data(self) -> RunObject:
        """Gets the data of this RunStreamEvent.


        :return: The data of this RunStreamEvent.
        :rtype: RunObject
        """
        return self._data

    @data.setter
    def data(self, data: RunObject):
        """Sets the data of this RunStreamEvent.


        :param data: The data of this RunStreamEvent.
        :type data: RunObject
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data
