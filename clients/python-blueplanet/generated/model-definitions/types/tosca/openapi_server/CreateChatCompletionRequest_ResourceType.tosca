"$schema"   = "http://cyaninc.com/json-schemas/tosca-lite-v1/definition-module#"
title       = "openapi_server CreateChatCompletionRequest"
package     = openapi_server
version     = "1.0"
description = "Defines a CreateChatCompletionRequest"
authors     = ["F. Bar (foo@bar.baz)"]

imports {
  Root = tosca.resourceTypes.Root
  ChatCompletionFunctions = openapi_server.resourceTypes.ChatCompletionFunctions
  ChatCompletionRequestMessage = openapi_server.resourceTypes.ChatCompletionRequestMessage
  ChatCompletionTool = openapi_server.resourceTypes.ChatCompletionTool
  ChatCompletionToolChoiceOption = openapi_server.resourceTypes.ChatCompletionToolChoiceOption
  CreateChatCompletionRequestFunctionCall = openapi_server.resourceTypes.CreateChatCompletionRequestFunctionCall
  CreateChatCompletionRequestModel = openapi_server.resourceTypes.CreateChatCompletionRequestModel
  CreateChatCompletionRequestResponseFormat = openapi_server.resourceTypes.CreateChatCompletionRequestResponseFormat
  CreateChatCompletionRequestStop = openapi_server.resourceTypes.CreateChatCompletionRequestStop
}
resourceTypes {

  CreateChatCompletionRequest {
    title = CreateChatCompletionRequest
    description = CreateChatCompletionRequest
    derivedFrom = Root
    properties {
        messages {
          type = array
          items.type = ChatCompletionRequestMessage
          description = "A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models)."
          optional = true
        }
        model {
          type = CreateChatCompletionRequestModel
          description = ""
          optional = true
        }
        frequency_penalty {
          type =  
          description = "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) "
          optional = false
        }
        logit_bias {
          # TODO
          description = "Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. "
          optional = false
        }
        logprobs {
          type =  boolean
          description = "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the &#x60;content&#x60; of &#x60;message&#x60;."
          optional = false
        }
        top_logprobs {
          type =  integer
          description = "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. &#x60;logprobs&#x60; must be set to &#x60;true&#x60; if this parameter is used."
          optional = false
        }
        max_tokens {
          type =  integer
          description = "The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.  The total length of input tokens and generated tokens is limited by the model&#39;s context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. "
          optional = false
        }
        n {
          type =  integer
          description = "How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep &#x60;n&#x60; as &#x60;1&#x60; to minimize costs."
          optional = false
        }
        presence_penalty {
          type =  
          description = "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) "
          optional = false
        }
        response_format {
          type = CreateChatCompletionRequestResponseFormat
          description = ""
          optional = false
        }
        seed {
          type =  integer
          description = "This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same &#x60;seed&#x60; and parameters should return the same result. Determinism is not guaranteed, and you should refer to the &#x60;system_fingerprint&#x60; response parameter to monitor changes in the backend. "
          optional = false
        }
        stop {
          type = CreateChatCompletionRequestStop
          description = ""
          optional = false
        }
        stream {
          type =  boolean
          description = "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a &#x60;data: [DONE]&#x60; message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). "
          optional = false
        }
        temperature {
          type =  
          description = "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both. "
          optional = false
        }
        top_p {
          type =  
          description = "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. "
          optional = false
        }
        tools {
          type = array
          items.type = ChatCompletionTool
          description = "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported. "
          optional = false
        }
        tool_choice {
          type = ChatCompletionToolChoiceOption
          description = ""
          optional = false
        }
        user {
          type =  string
          description = "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). "
          optional = false
        }
        function_call {
          type = CreateChatCompletionRequestFunctionCall
          description = ""
          optional = false
        }
        functions {
          type = array
          items.type = ChatCompletionFunctions
          description = "Deprecated in favor of &#x60;tools&#x60;.  A list of functions the model may generate JSON inputs for. "
          optional = false
        }
    }
  }
}

serviceTemplates {

  CreateChatCompletionRequest {
    title = CreateChatCompletionRequest
    description = CreateChatCompletionRequest
    implements = openapi_server.resourceTypes.CreateChatCompletionRequest

  }
}
