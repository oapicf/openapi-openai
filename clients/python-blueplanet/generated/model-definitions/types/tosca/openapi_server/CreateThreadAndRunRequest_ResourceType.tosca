"$schema"   = "http://cyaninc.com/json-schemas/tosca-lite-v1/definition-module#"
title       = "openapi_server CreateThreadAndRunRequest"
package     = openapi_server
version     = "1.0"
description = "Defines a CreateThreadAndRunRequest"
authors     = ["F. Bar (foo@bar.baz)"]

imports {
  Root = tosca.resourceTypes.Root
  AssistantsApiResponseFormatOption = openapi_server.resourceTypes.AssistantsApiResponseFormatOption
  AssistantsApiToolChoiceOption = openapi_server.resourceTypes.AssistantsApiToolChoiceOption
  CreateRunRequestModel = openapi_server.resourceTypes.CreateRunRequestModel
  CreateThreadAndRunRequestToolsInner = openapi_server.resourceTypes.CreateThreadAndRunRequestToolsInner
  CreateThreadRequest = openapi_server.resourceTypes.CreateThreadRequest
  TruncationObject = openapi_server.resourceTypes.TruncationObject
}
resourceTypes {

  CreateThreadAndRunRequest {
    title = CreateThreadAndRunRequest
    description = CreateThreadAndRunRequest
    derivedFrom = Root
    properties {
        assistant_id {
          type =  string
          description = "The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run."
          optional = true
        }
        thread {
          type = CreateThreadRequest
          description = ""
          optional = false
        }
        model {
          type = CreateRunRequestModel
          description = ""
          optional = false
        }
        instructions {
          type =  string
          description = "Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis."
          optional = false
        }
        tools {
          type = array
          items.type = CreateThreadAndRunRequestToolsInner
          description = "Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis."
          optional = false
        }
        metadata {
          type =  
          description = "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. "
          optional = false
        }
        temperature {
          type =  
          description = "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. "
          optional = false
        }
        stream {
          type =  boolean
          description = "If &#x60;true&#x60;, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a &#x60;data: [DONE]&#x60; message. "
          optional = false
        }
        max_prompt_tokens {
          type =  integer
          description = "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status &#x60;complete&#x60;. See &#x60;incomplete_details&#x60; for more info. "
          optional = false
        }
        max_completion_tokens {
          type =  integer
          description = "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status &#x60;incomplete&#x60;. See &#x60;incomplete_details&#x60; for more info. "
          optional = false
        }
        truncation_strategy {
          type = TruncationObject
          description = ""
          optional = false
        }
        tool_choice {
          type = AssistantsApiToolChoiceOption
          description = ""
          optional = false
        }
        response_format {
          type = AssistantsApiResponseFormatOption
          description = ""
          optional = false
        }
    }
  }
}

serviceTemplates {

  CreateThreadAndRunRequest {
    title = CreateThreadAndRunRequest
    description = CreateThreadAndRunRequest
    implements = openapi_server.resourceTypes.CreateThreadAndRunRequest

  }
}
