from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.chat_completion_stream_response_delta import ChatCompletionStreamResponseDelta
from openapi_server import util

from openapi_server.models.chat_completion_stream_response_delta import ChatCompletionStreamResponseDelta  # noqa: E501

class CreateChatCompletionStreamResponseChoicesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index=None, delta=None, finish_reason=None):  # noqa: E501
        """CreateChatCompletionStreamResponseChoicesInner - a model defined in OpenAPI

        :param index: The index of this CreateChatCompletionStreamResponseChoicesInner.  # noqa: E501
        :type index: int
        :param delta: The delta of this CreateChatCompletionStreamResponseChoicesInner.  # noqa: E501
        :type delta: ChatCompletionStreamResponseDelta
        :param finish_reason: The finish_reason of this CreateChatCompletionStreamResponseChoicesInner.  # noqa: E501
        :type finish_reason: str
        """
        self.openapi_types = {
            'index': int,
            'delta': ChatCompletionStreamResponseDelta,
            'finish_reason': str
        }

        self.attribute_map = {
            'index': 'index',
            'delta': 'delta',
            'finish_reason': 'finish_reason'
        }

        self._index = index
        self._delta = delta
        self._finish_reason = finish_reason

    @classmethod
    def from_dict(cls, dikt) -> 'CreateChatCompletionStreamResponseChoicesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateChatCompletionStreamResponse_choices_inner of this CreateChatCompletionStreamResponseChoicesInner.  # noqa: E501
        :rtype: CreateChatCompletionStreamResponseChoicesInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index(self) -> int:
        """Gets the index of this CreateChatCompletionStreamResponseChoicesInner.


        :return: The index of this CreateChatCompletionStreamResponseChoicesInner.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index: int):
        """Sets the index of this CreateChatCompletionStreamResponseChoicesInner.


        :param index: The index of this CreateChatCompletionStreamResponseChoicesInner.
        :type index: int
        """

        self._index = index

    @property
    def delta(self) -> ChatCompletionStreamResponseDelta:
        """Gets the delta of this CreateChatCompletionStreamResponseChoicesInner.


        :return: The delta of this CreateChatCompletionStreamResponseChoicesInner.
        :rtype: ChatCompletionStreamResponseDelta
        """
        return self._delta

    @delta.setter
    def delta(self, delta: ChatCompletionStreamResponseDelta):
        """Sets the delta of this CreateChatCompletionStreamResponseChoicesInner.


        :param delta: The delta of this CreateChatCompletionStreamResponseChoicesInner.
        :type delta: ChatCompletionStreamResponseDelta
        """

        self._delta = delta

    @property
    def finish_reason(self) -> str:
        """Gets the finish_reason of this CreateChatCompletionStreamResponseChoicesInner.


        :return: The finish_reason of this CreateChatCompletionStreamResponseChoicesInner.
        :rtype: str
        """
        return self._finish_reason

    @finish_reason.setter
    def finish_reason(self, finish_reason: str):
        """Sets the finish_reason of this CreateChatCompletionStreamResponseChoicesInner.


        :param finish_reason: The finish_reason of this CreateChatCompletionStreamResponseChoicesInner.
        :type finish_reason: str
        """
        allowed_values = ["stop", "length", "function_call"]  # noqa: E501
        if finish_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `finish_reason` ({0}), must be one of {1}"
                .format(finish_reason, allowed_values)
            )

        self._finish_reason = finish_reason
