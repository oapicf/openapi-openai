from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.create_completion_response_usage import CreateCompletionResponseUsage
from openapi_server.models.create_edit_response_choices_inner import CreateEditResponseChoicesInner
from openapi_server import util

from openapi_server.models.create_completion_response_usage import CreateCompletionResponseUsage  # noqa: E501
from openapi_server.models.create_edit_response_choices_inner import CreateEditResponseChoicesInner  # noqa: E501

class CreateEditResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object=None, created=None, choices=None, usage=None):  # noqa: E501
        """CreateEditResponse - a model defined in OpenAPI

        :param object: The object of this CreateEditResponse.  # noqa: E501
        :type object: str
        :param created: The created of this CreateEditResponse.  # noqa: E501
        :type created: int
        :param choices: The choices of this CreateEditResponse.  # noqa: E501
        :type choices: List[CreateEditResponseChoicesInner]
        :param usage: The usage of this CreateEditResponse.  # noqa: E501
        :type usage: CreateCompletionResponseUsage
        """
        self.openapi_types = {
            'object': str,
            'created': int,
            'choices': List[CreateEditResponseChoicesInner],
            'usage': CreateCompletionResponseUsage
        }

        self.attribute_map = {
            'object': 'object',
            'created': 'created',
            'choices': 'choices',
            'usage': 'usage'
        }

        self._object = object
        self._created = created
        self._choices = choices
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt) -> 'CreateEditResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateEditResponse of this CreateEditResponse.  # noqa: E501
        :rtype: CreateEditResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object(self) -> str:
        """Gets the object of this CreateEditResponse.


        :return: The object of this CreateEditResponse.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object: str):
        """Sets the object of this CreateEditResponse.


        :param object: The object of this CreateEditResponse.
        :type object: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501

        self._object = object

    @property
    def created(self) -> int:
        """Gets the created of this CreateEditResponse.


        :return: The created of this CreateEditResponse.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created: int):
        """Sets the created of this CreateEditResponse.


        :param created: The created of this CreateEditResponse.
        :type created: int
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def choices(self) -> List[CreateEditResponseChoicesInner]:
        """Gets the choices of this CreateEditResponse.


        :return: The choices of this CreateEditResponse.
        :rtype: List[CreateEditResponseChoicesInner]
        """
        return self._choices

    @choices.setter
    def choices(self, choices: List[CreateEditResponseChoicesInner]):
        """Sets the choices of this CreateEditResponse.


        :param choices: The choices of this CreateEditResponse.
        :type choices: List[CreateEditResponseChoicesInner]
        """
        if choices is None:
            raise ValueError("Invalid value for `choices`, must not be `None`")  # noqa: E501

        self._choices = choices

    @property
    def usage(self) -> CreateCompletionResponseUsage:
        """Gets the usage of this CreateEditResponse.


        :return: The usage of this CreateEditResponse.
        :rtype: CreateCompletionResponseUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage: CreateCompletionResponseUsage):
        """Sets the usage of this CreateEditResponse.


        :param usage: The usage of this CreateEditResponse.
        :type usage: CreateCompletionResponseUsage
        """
        if usage is None:
            raise ValueError("Invalid value for `usage`, must not be `None`")  # noqa: E501

        self._usage = usage
