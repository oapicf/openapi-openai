from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateImageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, prompt=None, n=1, size='1024x1024', response_format='url', user=None):  # noqa: E501
        """CreateImageRequest - a model defined in OpenAPI

        :param prompt: The prompt of this CreateImageRequest.  # noqa: E501
        :type prompt: str
        :param n: The n of this CreateImageRequest.  # noqa: E501
        :type n: int
        :param size: The size of this CreateImageRequest.  # noqa: E501
        :type size: str
        :param response_format: The response_format of this CreateImageRequest.  # noqa: E501
        :type response_format: str
        :param user: The user of this CreateImageRequest.  # noqa: E501
        :type user: str
        """
        self.openapi_types = {
            'prompt': str,
            'n': int,
            'size': str,
            'response_format': str,
            'user': str
        }

        self.attribute_map = {
            'prompt': 'prompt',
            'n': 'n',
            'size': 'size',
            'response_format': 'response_format',
            'user': 'user'
        }

        self._prompt = prompt
        self._n = n
        self._size = size
        self._response_format = response_format
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'CreateImageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateImageRequest of this CreateImageRequest.  # noqa: E501
        :rtype: CreateImageRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prompt(self) -> str:
        """Gets the prompt of this CreateImageRequest.

        A text description of the desired image(s). The maximum length is 1000 characters.  # noqa: E501

        :return: The prompt of this CreateImageRequest.
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt: str):
        """Sets the prompt of this CreateImageRequest.

        A text description of the desired image(s). The maximum length is 1000 characters.  # noqa: E501

        :param prompt: The prompt of this CreateImageRequest.
        :type prompt: str
        """
        if prompt is None:
            raise ValueError("Invalid value for `prompt`, must not be `None`")  # noqa: E501

        self._prompt = prompt

    @property
    def n(self) -> int:
        """Gets the n of this CreateImageRequest.

        The number of images to generate. Must be between 1 and 10.  # noqa: E501

        :return: The n of this CreateImageRequest.
        :rtype: int
        """
        return self._n

    @n.setter
    def n(self, n: int):
        """Sets the n of this CreateImageRequest.

        The number of images to generate. Must be between 1 and 10.  # noqa: E501

        :param n: The n of this CreateImageRequest.
        :type n: int
        """
        if n is not None and n > 10:  # noqa: E501
            raise ValueError("Invalid value for `n`, must be a value less than or equal to `10`")  # noqa: E501
        if n is not None and n < 1:  # noqa: E501
            raise ValueError("Invalid value for `n`, must be a value greater than or equal to `1`")  # noqa: E501

        self._n = n

    @property
    def size(self) -> str:
        """Gets the size of this CreateImageRequest.

        The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.  # noqa: E501

        :return: The size of this CreateImageRequest.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size: str):
        """Sets the size of this CreateImageRequest.

        The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.  # noqa: E501

        :param size: The size of this CreateImageRequest.
        :type size: str
        """
        allowed_values = [None,"256x256", "512x512", "1024x1024"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"
                .format(size, allowed_values)
            )

        self._size = size

    @property
    def response_format(self) -> str:
        """Gets the response_format of this CreateImageRequest.

        The format in which the generated images are returned. Must be one of `url` or `b64_json`.  # noqa: E501

        :return: The response_format of this CreateImageRequest.
        :rtype: str
        """
        return self._response_format

    @response_format.setter
    def response_format(self, response_format: str):
        """Sets the response_format of this CreateImageRequest.

        The format in which the generated images are returned. Must be one of `url` or `b64_json`.  # noqa: E501

        :param response_format: The response_format of this CreateImageRequest.
        :type response_format: str
        """
        allowed_values = [None,"url", "b64_json"]  # noqa: E501
        if response_format not in allowed_values:
            raise ValueError(
                "Invalid value for `response_format` ({0}), must be one of {1}"
                .format(response_format, allowed_values)
            )

        self._response_format = response_format

    @property
    def user(self) -> str:
        """Gets the user of this CreateImageRequest.

        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).   # noqa: E501

        :return: The user of this CreateImageRequest.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this CreateImageRequest.

        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).   # noqa: E501

        :param user: The user of this CreateImageRequest.
        :type user: str
        """

        self._user = user
