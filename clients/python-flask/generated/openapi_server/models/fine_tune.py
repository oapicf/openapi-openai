from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.fine_tune_event import FineTuneEvent
from openapi_server.models.open_ai_file import OpenAIFile
from openapi_server import util

from openapi_server.models.fine_tune_event import FineTuneEvent  # noqa: E501
from openapi_server.models.open_ai_file import OpenAIFile  # noqa: E501

class FineTune(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, object=None, created_at=None, updated_at=None, model=None, fine_tuned_model=None, organization_id=None, status=None, hyperparams=None, training_files=None, validation_files=None, result_files=None, events=None):  # noqa: E501
        """FineTune - a model defined in OpenAPI

        :param id: The id of this FineTune.  # noqa: E501
        :type id: str
        :param object: The object of this FineTune.  # noqa: E501
        :type object: str
        :param created_at: The created_at of this FineTune.  # noqa: E501
        :type created_at: int
        :param updated_at: The updated_at of this FineTune.  # noqa: E501
        :type updated_at: int
        :param model: The model of this FineTune.  # noqa: E501
        :type model: str
        :param fine_tuned_model: The fine_tuned_model of this FineTune.  # noqa: E501
        :type fine_tuned_model: str
        :param organization_id: The organization_id of this FineTune.  # noqa: E501
        :type organization_id: str
        :param status: The status of this FineTune.  # noqa: E501
        :type status: str
        :param hyperparams: The hyperparams of this FineTune.  # noqa: E501
        :type hyperparams: object
        :param training_files: The training_files of this FineTune.  # noqa: E501
        :type training_files: List[OpenAIFile]
        :param validation_files: The validation_files of this FineTune.  # noqa: E501
        :type validation_files: List[OpenAIFile]
        :param result_files: The result_files of this FineTune.  # noqa: E501
        :type result_files: List[OpenAIFile]
        :param events: The events of this FineTune.  # noqa: E501
        :type events: List[FineTuneEvent]
        """
        self.openapi_types = {
            'id': str,
            'object': str,
            'created_at': int,
            'updated_at': int,
            'model': str,
            'fine_tuned_model': str,
            'organization_id': str,
            'status': str,
            'hyperparams': object,
            'training_files': List[OpenAIFile],
            'validation_files': List[OpenAIFile],
            'result_files': List[OpenAIFile],
            'events': List[FineTuneEvent]
        }

        self.attribute_map = {
            'id': 'id',
            'object': 'object',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'model': 'model',
            'fine_tuned_model': 'fine_tuned_model',
            'organization_id': 'organization_id',
            'status': 'status',
            'hyperparams': 'hyperparams',
            'training_files': 'training_files',
            'validation_files': 'validation_files',
            'result_files': 'result_files',
            'events': 'events'
        }

        self._id = id
        self._object = object
        self._created_at = created_at
        self._updated_at = updated_at
        self._model = model
        self._fine_tuned_model = fine_tuned_model
        self._organization_id = organization_id
        self._status = status
        self._hyperparams = hyperparams
        self._training_files = training_files
        self._validation_files = validation_files
        self._result_files = result_files
        self._events = events

    @classmethod
    def from_dict(cls, dikt) -> 'FineTune':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FineTune of this FineTune.  # noqa: E501
        :rtype: FineTune
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this FineTune.


        :return: The id of this FineTune.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this FineTune.


        :param id: The id of this FineTune.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def object(self) -> str:
        """Gets the object of this FineTune.


        :return: The object of this FineTune.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object: str):
        """Sets the object of this FineTune.


        :param object: The object of this FineTune.
        :type object: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501

        self._object = object

    @property
    def created_at(self) -> int:
        """Gets the created_at of this FineTune.


        :return: The created_at of this FineTune.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: int):
        """Sets the created_at of this FineTune.


        :param created_at: The created_at of this FineTune.
        :type created_at: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self) -> int:
        """Gets the updated_at of this FineTune.


        :return: The updated_at of this FineTune.
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: int):
        """Sets the updated_at of this FineTune.


        :param updated_at: The updated_at of this FineTune.
        :type updated_at: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def model(self) -> str:
        """Gets the model of this FineTune.


        :return: The model of this FineTune.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this FineTune.


        :param model: The model of this FineTune.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def fine_tuned_model(self) -> str:
        """Gets the fine_tuned_model of this FineTune.


        :return: The fine_tuned_model of this FineTune.
        :rtype: str
        """
        return self._fine_tuned_model

    @fine_tuned_model.setter
    def fine_tuned_model(self, fine_tuned_model: str):
        """Sets the fine_tuned_model of this FineTune.


        :param fine_tuned_model: The fine_tuned_model of this FineTune.
        :type fine_tuned_model: str
        """
        if fine_tuned_model is None:
            raise ValueError("Invalid value for `fine_tuned_model`, must not be `None`")  # noqa: E501

        self._fine_tuned_model = fine_tuned_model

    @property
    def organization_id(self) -> str:
        """Gets the organization_id of this FineTune.


        :return: The organization_id of this FineTune.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id: str):
        """Sets the organization_id of this FineTune.


        :param organization_id: The organization_id of this FineTune.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def status(self) -> str:
        """Gets the status of this FineTune.


        :return: The status of this FineTune.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this FineTune.


        :param status: The status of this FineTune.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def hyperparams(self) -> object:
        """Gets the hyperparams of this FineTune.


        :return: The hyperparams of this FineTune.
        :rtype: object
        """
        return self._hyperparams

    @hyperparams.setter
    def hyperparams(self, hyperparams: object):
        """Sets the hyperparams of this FineTune.


        :param hyperparams: The hyperparams of this FineTune.
        :type hyperparams: object
        """
        if hyperparams is None:
            raise ValueError("Invalid value for `hyperparams`, must not be `None`")  # noqa: E501

        self._hyperparams = hyperparams

    @property
    def training_files(self) -> List[OpenAIFile]:
        """Gets the training_files of this FineTune.


        :return: The training_files of this FineTune.
        :rtype: List[OpenAIFile]
        """
        return self._training_files

    @training_files.setter
    def training_files(self, training_files: List[OpenAIFile]):
        """Sets the training_files of this FineTune.


        :param training_files: The training_files of this FineTune.
        :type training_files: List[OpenAIFile]
        """
        if training_files is None:
            raise ValueError("Invalid value for `training_files`, must not be `None`")  # noqa: E501

        self._training_files = training_files

    @property
    def validation_files(self) -> List[OpenAIFile]:
        """Gets the validation_files of this FineTune.


        :return: The validation_files of this FineTune.
        :rtype: List[OpenAIFile]
        """
        return self._validation_files

    @validation_files.setter
    def validation_files(self, validation_files: List[OpenAIFile]):
        """Sets the validation_files of this FineTune.


        :param validation_files: The validation_files of this FineTune.
        :type validation_files: List[OpenAIFile]
        """
        if validation_files is None:
            raise ValueError("Invalid value for `validation_files`, must not be `None`")  # noqa: E501

        self._validation_files = validation_files

    @property
    def result_files(self) -> List[OpenAIFile]:
        """Gets the result_files of this FineTune.


        :return: The result_files of this FineTune.
        :rtype: List[OpenAIFile]
        """
        return self._result_files

    @result_files.setter
    def result_files(self, result_files: List[OpenAIFile]):
        """Sets the result_files of this FineTune.


        :param result_files: The result_files of this FineTune.
        :type result_files: List[OpenAIFile]
        """
        if result_files is None:
            raise ValueError("Invalid value for `result_files`, must not be `None`")  # noqa: E501

        self._result_files = result_files

    @property
    def events(self) -> List[FineTuneEvent]:
        """Gets the events of this FineTune.


        :return: The events of this FineTune.
        :rtype: List[FineTuneEvent]
        """
        return self._events

    @events.setter
    def events(self, events: List[FineTuneEvent]):
        """Sets the events of this FineTune.


        :param events: The events of this FineTune.
        :type events: List[FineTuneEvent]
        """

        self._events = events
