from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Model(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, object=None, created=None, owned_by=None):  # noqa: E501
        """Model - a model defined in OpenAPI

        :param id: The id of this Model.  # noqa: E501
        :type id: str
        :param object: The object of this Model.  # noqa: E501
        :type object: str
        :param created: The created of this Model.  # noqa: E501
        :type created: int
        :param owned_by: The owned_by of this Model.  # noqa: E501
        :type owned_by: str
        """
        self.openapi_types = {
            'id': str,
            'object': str,
            'created': int,
            'owned_by': str
        }

        self.attribute_map = {
            'id': 'id',
            'object': 'object',
            'created': 'created',
            'owned_by': 'owned_by'
        }

        self._id = id
        self._object = object
        self._created = created
        self._owned_by = owned_by

    @classmethod
    def from_dict(cls, dikt) -> 'Model':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Model of this Model.  # noqa: E501
        :rtype: Model
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Model.


        :return: The id of this Model.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Model.


        :param id: The id of this Model.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def object(self) -> str:
        """Gets the object of this Model.


        :return: The object of this Model.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object: str):
        """Sets the object of this Model.


        :param object: The object of this Model.
        :type object: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501

        self._object = object

    @property
    def created(self) -> int:
        """Gets the created of this Model.


        :return: The created of this Model.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created: int):
        """Sets the created of this Model.


        :param created: The created of this Model.
        :type created: int
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def owned_by(self) -> str:
        """Gets the owned_by of this Model.


        :return: The owned_by of this Model.
        :rtype: str
        """
        return self._owned_by

    @owned_by.setter
    def owned_by(self, owned_by: str):
        """Sets the owned_by of this Model.


        :param owned_by: The owned_by of this Model.
        :type owned_by: str
        """
        if owned_by is None:
            raise ValueError("Invalid value for `owned_by`, must not be `None`")  # noqa: E501

        self._owned_by = owned_by
