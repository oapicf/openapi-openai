# coding: utf-8

"""
    OpenAI API

    APIs for sampling from and fine-tuning language models

    The version of the OpenAPI document: 2.0.0
    Contact: blah+oapicf@cliffano.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapiopenai.models.create_fine_tune_request_model import CreateFineTuneRequestModel
from typing import Optional, Set
from typing_extensions import Self

class CreateFineTuneRequest(BaseModel):
    """
    CreateFineTuneRequest
    """ # noqa: E501
    training_file: StrictStr = Field(description="The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file, where each training example is a JSON object with the keys \"prompt\" and \"completion\". Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. ")
    validation_file: Optional[StrictStr] = Field(default=None, description="The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model). Your train and validation data should be mutually exclusive.  Your dataset must be formatted as a JSONL file, where each validation example is a JSON object with the keys \"prompt\" and \"completion\". Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details. ")
    model: Optional[CreateFineTuneRequestModel] = None
    n_epochs: Optional[StrictInt] = Field(default=4, description="The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. ")
    batch_size: Optional[StrictInt] = Field(default=None, description="The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass.  By default, the batch size will be dynamically configured to be ~0.2% of the number of examples in the training set, capped at 256 - in general, we've found that larger batch sizes tend to work better for larger datasets. ")
    learning_rate_multiplier: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The learning rate multiplier to use for training. The fine-tuning learning rate is the original learning rate used for pretraining multiplied by this value.  By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on final `batch_size` (larger learning rates tend to perform better with larger batch sizes). We recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best results. ")
    prompt_loss_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.01, description="The weight to use for loss on the prompt tokens. This controls how much the model tries to learn to generate the prompt (as compared to the completion which always has a weight of 1.0), and can add a stabilizing effect to training when completions are short.  If prompts are extremely long (relative to completions), it may make sense to reduce this weight so as to avoid over-prioritizing learning the prompt. ")
    compute_classification_metrics: Optional[StrictBool] = Field(default=False, description="If set, we calculate classification-specific metrics such as accuracy and F-1 score using the validation set at the end of every epoch. These metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).  In order to compute classification metrics, you must provide a `validation_file`. Additionally, you must specify `classification_n_classes` for multiclass classification or `classification_positive_class` for binary classification. ")
    classification_n_classes: Optional[StrictInt] = Field(default=None, description="The number of classes in a classification task.  This parameter is required for multiclass classification. ")
    classification_positive_class: Optional[StrictStr] = Field(default=None, description="The positive class in binary classification.  This parameter is needed to generate precision, recall, and F1 metrics when doing binary classification. ")
    classification_betas: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="If this is provided, we calculate F-beta scores at the specified beta values. The F-beta score is a generalization of F-1 score. This is only used for binary classification.  With a beta of 1 (i.e. the F-1 score), precision and recall are given the same weight. A larger beta score puts more weight on recall and less on precision. A smaller beta score puts more weight on precision and less on recall. ")
    suffix: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=40)]] = Field(default=None, description="A string of up to 40 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`. ")
    __properties: ClassVar[List[str]] = ["training_file", "validation_file", "model", "n_epochs", "batch_size", "learning_rate_multiplier", "prompt_loss_weight", "compute_classification_metrics", "classification_n_classes", "classification_positive_class", "classification_betas", "suffix"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateFineTuneRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        # set to None if validation_file (nullable) is None
        # and model_fields_set contains the field
        if self.validation_file is None and "validation_file" in self.model_fields_set:
            _dict['validation_file'] = None

        # set to None if model (nullable) is None
        # and model_fields_set contains the field
        if self.model is None and "model" in self.model_fields_set:
            _dict['model'] = None

        # set to None if n_epochs (nullable) is None
        # and model_fields_set contains the field
        if self.n_epochs is None and "n_epochs" in self.model_fields_set:
            _dict['n_epochs'] = None

        # set to None if batch_size (nullable) is None
        # and model_fields_set contains the field
        if self.batch_size is None and "batch_size" in self.model_fields_set:
            _dict['batch_size'] = None

        # set to None if learning_rate_multiplier (nullable) is None
        # and model_fields_set contains the field
        if self.learning_rate_multiplier is None and "learning_rate_multiplier" in self.model_fields_set:
            _dict['learning_rate_multiplier'] = None

        # set to None if prompt_loss_weight (nullable) is None
        # and model_fields_set contains the field
        if self.prompt_loss_weight is None and "prompt_loss_weight" in self.model_fields_set:
            _dict['prompt_loss_weight'] = None

        # set to None if compute_classification_metrics (nullable) is None
        # and model_fields_set contains the field
        if self.compute_classification_metrics is None and "compute_classification_metrics" in self.model_fields_set:
            _dict['compute_classification_metrics'] = None

        # set to None if classification_n_classes (nullable) is None
        # and model_fields_set contains the field
        if self.classification_n_classes is None and "classification_n_classes" in self.model_fields_set:
            _dict['classification_n_classes'] = None

        # set to None if classification_positive_class (nullable) is None
        # and model_fields_set contains the field
        if self.classification_positive_class is None and "classification_positive_class" in self.model_fields_set:
            _dict['classification_positive_class'] = None

        # set to None if classification_betas (nullable) is None
        # and model_fields_set contains the field
        if self.classification_betas is None and "classification_betas" in self.model_fields_set:
            _dict['classification_betas'] = None

        # set to None if suffix (nullable) is None
        # and model_fields_set contains the field
        if self.suffix is None and "suffix" in self.model_fields_set:
            _dict['suffix'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateFineTuneRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "training_file": obj.get("training_file"),
            "validation_file": obj.get("validation_file"),
            "model": CreateFineTuneRequestModel.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "n_epochs": obj.get("n_epochs") if obj.get("n_epochs") is not None else 4,
            "batch_size": obj.get("batch_size"),
            "learning_rate_multiplier": obj.get("learning_rate_multiplier"),
            "prompt_loss_weight": obj.get("prompt_loss_weight") if obj.get("prompt_loss_weight") is not None else 0.01,
            "compute_classification_metrics": obj.get("compute_classification_metrics") if obj.get("compute_classification_metrics") is not None else False,
            "classification_n_classes": obj.get("classification_n_classes"),
            "classification_positive_class": obj.get("classification_positive_class"),
            "classification_betas": obj.get("classification_betas"),
            "suffix": obj.get("suffix")
        })
        return _obj


