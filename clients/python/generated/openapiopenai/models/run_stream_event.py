# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.0.0
    Contact: blah+oapicf@cliffano.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapiopenai.models.run_stream_event_one_of import RunStreamEventOneOf
from openapiopenai.models.run_stream_event_one_of1 import RunStreamEventOneOf1
from openapiopenai.models.run_stream_event_one_of2 import RunStreamEventOneOf2
from openapiopenai.models.run_stream_event_one_of3 import RunStreamEventOneOf3
from openapiopenai.models.run_stream_event_one_of4 import RunStreamEventOneOf4
from openapiopenai.models.run_stream_event_one_of5 import RunStreamEventOneOf5
from openapiopenai.models.run_stream_event_one_of6 import RunStreamEventOneOf6
from openapiopenai.models.run_stream_event_one_of7 import RunStreamEventOneOf7
from openapiopenai.models.run_stream_event_one_of8 import RunStreamEventOneOf8
from pydantic import StrictStr, Field
from typing import Union, List, Optional, Dict
from typing_extensions import Literal, Self

RUNSTREAMEVENT_ONE_OF_SCHEMAS = ["RunStreamEventOneOf", "RunStreamEventOneOf1", "RunStreamEventOneOf2", "RunStreamEventOneOf3", "RunStreamEventOneOf4", "RunStreamEventOneOf5", "RunStreamEventOneOf6", "RunStreamEventOneOf7", "RunStreamEventOneOf8"]

class RunStreamEvent(BaseModel):
    """
    RunStreamEvent
    """
    # data type: RunStreamEventOneOf
    oneof_schema_1_validator: Optional[RunStreamEventOneOf] = None
    # data type: RunStreamEventOneOf1
    oneof_schema_2_validator: Optional[RunStreamEventOneOf1] = None
    # data type: RunStreamEventOneOf2
    oneof_schema_3_validator: Optional[RunStreamEventOneOf2] = None
    # data type: RunStreamEventOneOf3
    oneof_schema_4_validator: Optional[RunStreamEventOneOf3] = None
    # data type: RunStreamEventOneOf4
    oneof_schema_5_validator: Optional[RunStreamEventOneOf4] = None
    # data type: RunStreamEventOneOf5
    oneof_schema_6_validator: Optional[RunStreamEventOneOf5] = None
    # data type: RunStreamEventOneOf6
    oneof_schema_7_validator: Optional[RunStreamEventOneOf6] = None
    # data type: RunStreamEventOneOf7
    oneof_schema_8_validator: Optional[RunStreamEventOneOf7] = None
    # data type: RunStreamEventOneOf8
    oneof_schema_9_validator: Optional[RunStreamEventOneOf8] = None
    actual_instance: Optional[Union[RunStreamEventOneOf, RunStreamEventOneOf1, RunStreamEventOneOf2, RunStreamEventOneOf3, RunStreamEventOneOf4, RunStreamEventOneOf5, RunStreamEventOneOf6, RunStreamEventOneOf7, RunStreamEventOneOf8]] = None
    one_of_schemas: List[str] = Field(default=Literal["RunStreamEventOneOf", "RunStreamEventOneOf1", "RunStreamEventOneOf2", "RunStreamEventOneOf3", "RunStreamEventOneOf4", "RunStreamEventOneOf5", "RunStreamEventOneOf6", "RunStreamEventOneOf7", "RunStreamEventOneOf8"])

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = RunStreamEvent.model_construct()
        error_messages = []
        match = 0
        # validate data type: RunStreamEventOneOf
        if not isinstance(v, RunStreamEventOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RunStreamEventOneOf`")
        else:
            match += 1
        # validate data type: RunStreamEventOneOf1
        if not isinstance(v, RunStreamEventOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RunStreamEventOneOf1`")
        else:
            match += 1
        # validate data type: RunStreamEventOneOf2
        if not isinstance(v, RunStreamEventOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RunStreamEventOneOf2`")
        else:
            match += 1
        # validate data type: RunStreamEventOneOf3
        if not isinstance(v, RunStreamEventOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RunStreamEventOneOf3`")
        else:
            match += 1
        # validate data type: RunStreamEventOneOf4
        if not isinstance(v, RunStreamEventOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RunStreamEventOneOf4`")
        else:
            match += 1
        # validate data type: RunStreamEventOneOf5
        if not isinstance(v, RunStreamEventOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RunStreamEventOneOf5`")
        else:
            match += 1
        # validate data type: RunStreamEventOneOf6
        if not isinstance(v, RunStreamEventOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RunStreamEventOneOf6`")
        else:
            match += 1
        # validate data type: RunStreamEventOneOf7
        if not isinstance(v, RunStreamEventOneOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RunStreamEventOneOf7`")
        else:
            match += 1
        # validate data type: RunStreamEventOneOf8
        if not isinstance(v, RunStreamEventOneOf8):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RunStreamEventOneOf8`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in RunStreamEvent with oneOf schemas: RunStreamEventOneOf, RunStreamEventOneOf1, RunStreamEventOneOf2, RunStreamEventOneOf3, RunStreamEventOneOf4, RunStreamEventOneOf5, RunStreamEventOneOf6, RunStreamEventOneOf7, RunStreamEventOneOf8. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in RunStreamEvent with oneOf schemas: RunStreamEventOneOf, RunStreamEventOneOf1, RunStreamEventOneOf2, RunStreamEventOneOf3, RunStreamEventOneOf4, RunStreamEventOneOf5, RunStreamEventOneOf6, RunStreamEventOneOf7, RunStreamEventOneOf8. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into RunStreamEventOneOf
        try:
            instance.actual_instance = RunStreamEventOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RunStreamEventOneOf1
        try:
            instance.actual_instance = RunStreamEventOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RunStreamEventOneOf2
        try:
            instance.actual_instance = RunStreamEventOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RunStreamEventOneOf3
        try:
            instance.actual_instance = RunStreamEventOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RunStreamEventOneOf4
        try:
            instance.actual_instance = RunStreamEventOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RunStreamEventOneOf5
        try:
            instance.actual_instance = RunStreamEventOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RunStreamEventOneOf6
        try:
            instance.actual_instance = RunStreamEventOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RunStreamEventOneOf7
        try:
            instance.actual_instance = RunStreamEventOneOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RunStreamEventOneOf8
        try:
            instance.actual_instance = RunStreamEventOneOf8.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into RunStreamEvent with oneOf schemas: RunStreamEventOneOf, RunStreamEventOneOf1, RunStreamEventOneOf2, RunStreamEventOneOf3, RunStreamEventOneOf4, RunStreamEventOneOf5, RunStreamEventOneOf6, RunStreamEventOneOf7, RunStreamEventOneOf8. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into RunStreamEvent with oneOf schemas: RunStreamEventOneOf, RunStreamEventOneOf1, RunStreamEventOneOf2, RunStreamEventOneOf3, RunStreamEventOneOf4, RunStreamEventOneOf5, RunStreamEventOneOf6, RunStreamEventOneOf7, RunStreamEventOneOf8. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], RunStreamEventOneOf, RunStreamEventOneOf1, RunStreamEventOneOf2, RunStreamEventOneOf3, RunStreamEventOneOf4, RunStreamEventOneOf5, RunStreamEventOneOf6, RunStreamEventOneOf7, RunStreamEventOneOf8]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


