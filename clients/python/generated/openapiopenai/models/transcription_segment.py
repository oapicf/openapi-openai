# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.0.0
    Contact: blah+oapicf@cliffano.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class TranscriptionSegment(BaseModel):
    """
    TranscriptionSegment
    """ # noqa: E501
    id: StrictInt = Field(description="Unique identifier of the segment.")
    seek: StrictInt = Field(description="Seek offset of the segment.")
    start: Union[StrictFloat, StrictInt] = Field(description="Start time of the segment in seconds.")
    end: Union[StrictFloat, StrictInt] = Field(description="End time of the segment in seconds.")
    text: StrictStr = Field(description="Text content of the segment.")
    tokens: List[StrictInt] = Field(description="Array of token IDs for the text content.")
    temperature: Union[StrictFloat, StrictInt] = Field(description="Temperature parameter used for generating the segment.")
    avg_logprob: Union[StrictFloat, StrictInt] = Field(description="Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.")
    compression_ratio: Union[StrictFloat, StrictInt] = Field(description="Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.")
    no_speech_prob: Union[StrictFloat, StrictInt] = Field(description="Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.")
    __properties: ClassVar[List[str]] = ["id", "seek", "start", "end", "text", "tokens", "temperature", "avg_logprob", "compression_ratio", "no_speech_prob"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TranscriptionSegment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TranscriptionSegment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "seek": obj.get("seek"),
            "start": obj.get("start"),
            "end": obj.get("end"),
            "text": obj.get("text"),
            "tokens": obj.get("tokens"),
            "temperature": obj.get("temperature"),
            "avg_logprob": obj.get("avg_logprob"),
            "compression_ratio": obj.get("compression_ratio"),
            "no_speech_prob": obj.get("no_speech_prob")
        })
        return _obj


