# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.0.0
    Contact: blah+oapicf@cliffano.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapiopenai.models.create_chat_completion_function_response_choices_inner import CreateChatCompletionFunctionResponseChoicesInner

class TestCreateChatCompletionFunctionResponseChoicesInner(unittest.TestCase):
    """CreateChatCompletionFunctionResponseChoicesInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateChatCompletionFunctionResponseChoicesInner:
        """Test CreateChatCompletionFunctionResponseChoicesInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateChatCompletionFunctionResponseChoicesInner`
        """
        model = CreateChatCompletionFunctionResponseChoicesInner()
        if include_optional:
            return CreateChatCompletionFunctionResponseChoicesInner(
                finish_reason = 'stop',
                index = 56,
                message = openapiopenai.models.chat_completion_response_message.ChatCompletionResponseMessage(
                    content = '', 
                    tool_calls = [
                        openapiopenai.models.chat_completion_message_tool_call.ChatCompletionMessageToolCall(
                            id = '', 
                            type = 'function', 
                            function = openapiopenai.models.chat_completion_message_tool_call_function.ChatCompletionMessageToolCall_function(
                                name = '', 
                                arguments = '', ), )
                        ], 
                    role = 'assistant', 
                    function_call = openapiopenai.models.chat_completion_request_assistant_message_function_call.ChatCompletionRequestAssistantMessage_function_call(
                        arguments = '', 
                        name = '', ), )
            )
        else:
            return CreateChatCompletionFunctionResponseChoicesInner(
                finish_reason = 'stop',
                index = 56,
                message = openapiopenai.models.chat_completion_response_message.ChatCompletionResponseMessage(
                    content = '', 
                    tool_calls = [
                        openapiopenai.models.chat_completion_message_tool_call.ChatCompletionMessageToolCall(
                            id = '', 
                            type = 'function', 
                            function = openapiopenai.models.chat_completion_message_tool_call_function.ChatCompletionMessageToolCall_function(
                                name = '', 
                                arguments = '', ), )
                        ], 
                    role = 'assistant', 
                    function_call = openapiopenai.models.chat_completion_request_assistant_message_function_call.ChatCompletionRequestAssistantMessage_function_call(
                        arguments = '', 
                        name = '', ), ),
        )
        """

    def testCreateChatCompletionFunctionResponseChoicesInner(self):
        """Test CreateChatCompletionFunctionResponseChoicesInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
