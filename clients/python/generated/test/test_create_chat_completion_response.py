# coding: utf-8

"""
    OpenAI API

    APIs for sampling from and fine-tuning language models

    The version of the OpenAPI document: 2.0.0
    Contact: blah+oapicf@cliffano.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapiopenai.models.create_chat_completion_response import CreateChatCompletionResponse

class TestCreateChatCompletionResponse(unittest.TestCase):
    """CreateChatCompletionResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateChatCompletionResponse:
        """Test CreateChatCompletionResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateChatCompletionResponse`
        """
        model = CreateChatCompletionResponse()
        if include_optional:
            return CreateChatCompletionResponse(
                id = '',
                object = '',
                created = 56,
                model = '',
                choices = [
                    openapiopenai.models.create_chat_completion_response_choices_inner.CreateChatCompletionResponse_choices_inner(
                        index = 56, 
                        message = openapiopenai.models.chat_completion_response_message.ChatCompletionResponseMessage(
                            role = 'system', 
                            content = '', 
                            function_call = openapiopenai.models.chat_completion_request_message_function_call.ChatCompletionRequestMessage_function_call(
                                name = '', 
                                arguments = '', ), ), 
                        finish_reason = 'stop', )
                    ],
                usage = openapiopenai.models.create_completion_response_usage.CreateCompletionResponse_usage(
                    prompt_tokens = 56, 
                    completion_tokens = 56, 
                    total_tokens = 56, )
            )
        else:
            return CreateChatCompletionResponse(
                id = '',
                object = '',
                created = 56,
                model = '',
                choices = [
                    openapiopenai.models.create_chat_completion_response_choices_inner.CreateChatCompletionResponse_choices_inner(
                        index = 56, 
                        message = openapiopenai.models.chat_completion_response_message.ChatCompletionResponseMessage(
                            role = 'system', 
                            content = '', 
                            function_call = openapiopenai.models.chat_completion_request_message_function_call.ChatCompletionRequestMessage_function_call(
                                name = '', 
                                arguments = '', ), ), 
                        finish_reason = 'stop', )
                    ],
        )
        """

    def testCreateChatCompletionResponse(self):
        """Test CreateChatCompletionResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
