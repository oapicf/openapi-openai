# coding: utf-8

"""
    OpenAI API

    APIs for sampling from and fine-tuning language models

    The version of the OpenAPI document: 2.0.0
    Contact: blah+oapicf@cliffano.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapiopenai.models.create_fine_tune_request import CreateFineTuneRequest

class TestCreateFineTuneRequest(unittest.TestCase):
    """CreateFineTuneRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateFineTuneRequest:
        """Test CreateFineTuneRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateFineTuneRequest`
        """
        model = CreateFineTuneRequest()
        if include_optional:
            return CreateFineTuneRequest(
                training_file = 'file-ajSREls59WBbvgSzJSVWxMCB',
                validation_file = 'file-XjSREls59WBbvgSzJSVWxMCa',
                model = curie,
                n_epochs = 56,
                batch_size = 56,
                learning_rate_multiplier = 1.337,
                prompt_loss_weight = 1.337,
                compute_classification_metrics = True,
                classification_n_classes = 56,
                classification_positive_class = '',
                classification_betas = [0.6,1,1.5,2],
                suffix = '0'
            )
        else:
            return CreateFineTuneRequest(
                training_file = 'file-ajSREls59WBbvgSzJSVWxMCB',
        )
        """

    def testCreateFineTuneRequest(self):
        """Test CreateFineTuneRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
