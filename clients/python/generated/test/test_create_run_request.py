# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.0.0
    Contact: blah+oapicf@cliffano.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapiopenai.models.create_run_request import CreateRunRequest

class TestCreateRunRequest(unittest.TestCase):
    """CreateRunRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateRunRequest:
        """Test CreateRunRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateRunRequest`
        """
        model = CreateRunRequest()
        if include_optional:
            return CreateRunRequest(
                assistant_id = '',
                model = gpt-4-turbo,
                instructions = '',
                additional_instructions = '',
                additional_messages = [
                    openapiopenai.models.create_message_request.CreateMessageRequest(
                        role = 'user', 
                        content = '0', 
                        file_ids = [
                            ''
                            ], 
                        metadata = openapiopenai.models.metadata.metadata(), )
                    ],
                tools = [
                    null
                    ],
                metadata = None,
                temperature = 1,
                stream = True,
                max_prompt_tokens = 256,
                max_completion_tokens = 256,
                truncation_strategy = openapiopenai.models.thread_truncation_controls.Thread Truncation Controls(
                    type = 'auto', 
                    last_messages = 1, ),
                tool_choice = None,
                response_format = None
            )
        else:
            return CreateRunRequest(
                assistant_id = '',
        )
        """

    def testCreateRunRequest(self):
        """Test CreateRunRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
