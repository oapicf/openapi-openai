# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.0.0
    Contact: blah+oapicf@cliffano.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapiopenai.models.run_stream_event_one_of8 import RunStreamEventOneOf8

class TestRunStreamEventOneOf8(unittest.TestCase):
    """RunStreamEventOneOf8 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RunStreamEventOneOf8:
        """Test RunStreamEventOneOf8
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RunStreamEventOneOf8`
        """
        model = RunStreamEventOneOf8()
        if include_optional:
            return RunStreamEventOneOf8(
                event = 'thread.run.expired',
                data = openapiopenai.models.a_run_on_a_thread.A run on a thread(
                    id = '', 
                    object = 'thread.run', 
                    created_at = 56, 
                    thread_id = '', 
                    assistant_id = '', 
                    status = 'queued', 
                    required_action = openapiopenai.models.run_object_required_action.RunObject_required_action(
                        type = 'submit_tool_outputs', 
                        submit_tool_outputs = openapiopenai.models.run_object_required_action_submit_tool_outputs.RunObject_required_action_submit_tool_outputs(
                            tool_calls = [
                                openapiopenai.models.run_tool_call_object.RunToolCallObject(
                                    id = '', 
                                    type = 'function', 
                                    function = openapiopenai.models.run_tool_call_object_function.RunToolCallObject_function(
                                        name = '', 
                                        arguments = '', ), )
                                ], ), ), 
                    last_error = openapiopenai.models.run_object_last_error.RunObject_last_error(
                        code = 'server_error', 
                        message = '', ), 
                    expires_at = 56, 
                    started_at = 56, 
                    cancelled_at = 56, 
                    failed_at = 56, 
                    completed_at = 56, 
                    incomplete_details = openapiopenai.models.run_object_incomplete_details.RunObject_incomplete_details(
                        reason = 'max_completion_tokens', ), 
                    model = '', 
                    instructions = '', 
                    tools = [
                        null
                        ], 
                    file_ids = [
                        ''
                        ], 
                    metadata = openapiopenai.models.metadata.metadata(), 
                    usage = openapiopenai.models.run_completion_usage.RunCompletionUsage(
                        completion_tokens = 56, 
                        prompt_tokens = 56, 
                        total_tokens = 56, ), 
                    temperature = 1.337, 
                    max_prompt_tokens = 256, 
                    max_completion_tokens = 256, 
                    truncation_strategy = openapiopenai.models.thread_truncation_controls.Thread Truncation Controls(
                        type = 'auto', 
                        last_messages = 1, ), 
                    tool_choice = null, 
                    response_format = null, )
            )
        else:
            return RunStreamEventOneOf8(
                event = 'thread.run.expired',
                data = openapiopenai.models.a_run_on_a_thread.A run on a thread(
                    id = '', 
                    object = 'thread.run', 
                    created_at = 56, 
                    thread_id = '', 
                    assistant_id = '', 
                    status = 'queued', 
                    required_action = openapiopenai.models.run_object_required_action.RunObject_required_action(
                        type = 'submit_tool_outputs', 
                        submit_tool_outputs = openapiopenai.models.run_object_required_action_submit_tool_outputs.RunObject_required_action_submit_tool_outputs(
                            tool_calls = [
                                openapiopenai.models.run_tool_call_object.RunToolCallObject(
                                    id = '', 
                                    type = 'function', 
                                    function = openapiopenai.models.run_tool_call_object_function.RunToolCallObject_function(
                                        name = '', 
                                        arguments = '', ), )
                                ], ), ), 
                    last_error = openapiopenai.models.run_object_last_error.RunObject_last_error(
                        code = 'server_error', 
                        message = '', ), 
                    expires_at = 56, 
                    started_at = 56, 
                    cancelled_at = 56, 
                    failed_at = 56, 
                    completed_at = 56, 
                    incomplete_details = openapiopenai.models.run_object_incomplete_details.RunObject_incomplete_details(
                        reason = 'max_completion_tokens', ), 
                    model = '', 
                    instructions = '', 
                    tools = [
                        null
                        ], 
                    file_ids = [
                        ''
                        ], 
                    metadata = openapiopenai.models.metadata.metadata(), 
                    usage = openapiopenai.models.run_completion_usage.RunCompletionUsage(
                        completion_tokens = 56, 
                        prompt_tokens = 56, 
                        total_tokens = 56, ), 
                    temperature = 1.337, 
                    max_prompt_tokens = 256, 
                    max_completion_tokens = 256, 
                    truncation_strategy = openapiopenai.models.thread_truncation_controls.Thread Truncation Controls(
                        type = 'auto', 
                        last_messages = 1, ), 
                    tool_choice = null, 
                    response_format = null, ),
        )
        """

    def testRunStreamEventOneOf8(self):
        """Test RunStreamEventOneOf8"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
