openapi: 3.0.0
info:
  contact:
    email: blah+oapicf@cliffano.com
    name: Cliffano Subagio
    url: https://github.com/oapicf/openapi-openai
  description: APIs for sampling from and fine-tuning language models
  title: OpenAI API
  version: 2.0.0
servers:
- url: https://api.openai.com/v1
tags:
- description: The OpenAI REST API
  name: OpenAI
paths:
  /chat/completions:
    post:
      operationId: createChatCompletion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChatCompletionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionResponse'
          description: OK
      summary: Creates a model response for the given chat conversation.
      tags:
      - OpenAI
      x-oaiMeta:
        name: Create chat completion
        group: chat
        path: create
        beta: true
        examples:
          curl: |
            curl https://api.openai.com/v1/chat/completions \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-3.5-turbo",
                "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Hello!"}]
              }'
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")

            completion = openai.ChatCompletion.create(
              model="gpt-3.5-turbo",
              messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": "Hello!"}
              ]
            )

            print(completion.choices[0].message)
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");

            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);

            const completion = await openai.createChatCompletion({
              model: "gpt-3.5-turbo",
              messages: [{"role": "system", "content": "You are a helpful assistant."}, {role: "user", content: "Hello world"}],
            });
            console.log(completion.data.choices[0].message);
        parameters: |
          {
            "model": "gpt-3.5-turbo",
            "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Hello!"}]
          }
        response: |
          {
            "id": "chatcmpl-123",
            "object": "chat.completion",
            "created": 1677652288,
            "choices": [{
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "\n\nHello there, how may I assist you today?",
              },
              "finish_reason": "stop"
            }],
            "usage": {
              "prompt_tokens": 9,
              "completion_tokens": 12,
              "total_tokens": 21
            }
          }
  /completions:
    post:
      operationId: createCompletion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompletionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCompletionResponse'
          description: OK
      summary: Creates a completion for the provided prompt and parameters.
      tags:
      - OpenAI
      x-oaiMeta:
        name: Create completion
        group: completions
        path: create
        examples:
          curl: |
            curl https://api.openai.com/v1/completions \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "VAR_model_id",
                "prompt": "Say this is a test",
                "max_tokens": 7,
                "temperature": 0
              }'
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.Completion.create(
              model="VAR_model_id",
              prompt="Say this is a test",
              max_tokens=7,
              temperature=0
            )
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.createCompletion({
              model: "VAR_model_id",
              prompt: "Say this is a test",
              max_tokens: 7,
              temperature: 0,
            });
        parameters: |
          {
            "model": "VAR_model_id",
            "prompt": "Say this is a test",
            "max_tokens": 7,
            "temperature": 0,
            "top_p": 1,
            "n": 1,
            "stream": false,
            "logprobs": null,
            "stop": "\n"
          }
        response: |
          {
            "id": "cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7",
            "object": "text_completion",
            "created": 1589478378,
            "model": "VAR_model_id",
            "choices": [
              {
                "text": "\n\nThis is indeed a test",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
              }
            ],
            "usage": {
              "prompt_tokens": 5,
              "completion_tokens": 7,
              "total_tokens": 12
            }
          }
  /edits:
    post:
      operationId: createEdit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEditRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEditResponse'
          description: OK
      summary: "Creates a new edit for the provided input, instruction, and parameters."
      tags:
      - OpenAI
      x-oaiMeta:
        name: Create edit
        group: edits
        path: create
        examples:
          curl: |
            curl https://api.openai.com/v1/edits \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "VAR_model_id",
                "input": "What day of the wek is it?",
                "instruction": "Fix the spelling mistakes"
              }'
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.Edit.create(
              model="VAR_model_id",
              input="What day of the wek is it?",
              instruction="Fix the spelling mistakes"
            )
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.createEdit({
              model: "VAR_model_id",
              input: "What day of the wek is it?",
              instruction: "Fix the spelling mistakes",
            });
        parameters: |
          {
            "model": "VAR_model_id",
            "input": "What day of the wek is it?",
            "instruction": "Fix the spelling mistakes"
          }
        response: |
          {
            "object": "edit",
            "created": 1589478378,
            "choices": [
              {
                "text": "What day of the week is it?",
                "index": 0,
              }
            ],
            "usage": {
              "prompt_tokens": 25,
              "completion_tokens": 32,
              "total_tokens": 57
            }
          }
  /images/generations:
    post:
      operationId: createImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateImageRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
          description: OK
      summary: Creates an image given a prompt.
      tags:
      - OpenAI
      x-oaiMeta:
        name: Create image
        group: images
        path: create
        beta: true
        examples:
          curl: |
            curl https://api.openai.com/v1/images/generations \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "prompt": "A cute baby sea otter",
                "n": 2,
                "size": "1024x1024"
              }'
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.Image.create(
              prompt="A cute baby sea otter",
              n=2,
              size="1024x1024"
            )
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.createImage({
              prompt: "A cute baby sea otter",
              n: 2,
              size: "1024x1024",
            });
        parameters: |
          {
            "prompt": "A cute baby sea otter",
            "n": 2,
            "size": "1024x1024"
          }
        response: |
          {
            "created": 1589478378,
            "data": [
              {
                "url": "https://..."
              },
              {
                "url": "https://..."
              }
            ]
          }
  /images/edits:
    post:
      operationId: createImageEdit
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateImageEditRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
          description: OK
      summary: Creates an edited or extended image given an original image and a prompt.
      tags:
      - OpenAI
      x-oaiMeta:
        name: Create image edit
        group: images
        path: create-edit
        beta: true
        examples:
          curl: |
            curl https://api.openai.com/v1/images/edits \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -F image="@otter.png" \
              -F mask="@mask.png" \
              -F prompt="A cute baby sea otter wearing a beret" \
              -F n=2 \
              -F size="1024x1024"
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.Image.create_edit(
              image=open("otter.png", "rb"),
              mask=open("mask.png", "rb"),
              prompt="A cute baby sea otter wearing a beret",
              n=2,
              size="1024x1024"
            )
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.createImageEdit(
              fs.createReadStream("otter.png"),
              fs.createReadStream("mask.png"),
              "A cute baby sea otter wearing a beret",
              2,
              "1024x1024"
            );
        response: |
          {
            "created": 1589478378,
            "data": [
              {
                "url": "https://..."
              },
              {
                "url": "https://..."
              }
            ]
          }
  /images/variations:
    post:
      operationId: createImageVariation
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateImageVariationRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
          description: OK
      summary: Creates a variation of a given image.
      tags:
      - OpenAI
      x-oaiMeta:
        name: Create image variation
        group: images
        path: create-variation
        beta: true
        examples:
          curl: |
            curl https://api.openai.com/v1/images/variations \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -F image="@otter.png" \
              -F n=2 \
              -F size="1024x1024"
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.Image.create_variation(
              image=open("otter.png", "rb"),
              n=2,
              size="1024x1024"
            )
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.createImageVariation(
              fs.createReadStream("otter.png"),
              2,
              "1024x1024"
            );
        response: |
          {
            "created": 1589478378,
            "data": [
              {
                "url": "https://..."
              },
              {
                "url": "https://..."
              }
            ]
          }
  /embeddings:
    post:
      operationId: createEmbedding
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmbeddingRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEmbeddingResponse'
          description: OK
      summary: Creates an embedding vector representing the input text.
      tags:
      - OpenAI
      x-oaiMeta:
        name: Create embeddings
        group: embeddings
        path: create
        examples:
          curl: |
            curl https://api.openai.com/v1/embeddings \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                "input": "The food was delicious and the waiter...",
                "model": "text-embedding-ada-002"
              }'
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.Embedding.create(
              model="text-embedding-ada-002",
              input="The food was delicious and the waiter..."
            )
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.createEmbedding({
              model: "text-embedding-ada-002",
              input: "The food was delicious and the waiter...",
            });
        parameters: |
          {
            "model": "text-embedding-ada-002",
            "input": "The food was delicious and the waiter..."
          }
        response: |
          {
            "object": "list",
            "data": [
              {
                "object": "embedding",
                "embedding": [
                  0.0023064255,
                  -0.009327292,
                  .... (1536 floats total for ada-002)
                  -0.0028842222,
                ],
                "index": 0
              }
            ],
            "model": "text-embedding-ada-002",
            "usage": {
              "prompt_tokens": 8,
              "total_tokens": 8
            }
          }
  /audio/transcriptions:
    post:
      operationId: createTranscription
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTranscriptionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTranscriptionResponse'
          description: OK
      summary: Transcribes audio into the input language.
      tags:
      - OpenAI
      x-oaiMeta:
        name: Create transcription
        group: audio
        path: create
        beta: true
        examples:
          curl: |
            curl https://api.openai.com/v1/audio/transcriptions \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "Content-Type: multipart/form-data" \
              -F file="@/path/to/file/audio.mp3" \
              -F model="whisper-1"
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            audio_file = open("audio.mp3", "rb")
            transcript = openai.Audio.transcribe("whisper-1", audio_file)
          node: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const resp = await openai.createTranscription(
              fs.createReadStream("audio.mp3"),
              "whisper-1"
            );
        parameters: |
          {
            "file": "audio.mp3",
            "model": "whisper-1"
          }
        response: |
          {
            "text": "Imagine the wildest idea that you've ever had, and you're curious about how it might scale to something that's a 100, a 1,000 times bigger. This is a place where you can get to do that."
          }
  /audio/translations:
    post:
      operationId: createTranslation
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTranslationRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTranslationResponse'
          description: OK
      summary: Translates audio into English.
      tags:
      - OpenAI
      x-oaiMeta:
        name: Create translation
        group: audio
        path: create
        beta: true
        examples:
          curl: |
            curl https://api.openai.com/v1/audio/translations \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "Content-Type: multipart/form-data" \
              -F file="@/path/to/file/german.m4a" \
              -F model="whisper-1"
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            audio_file = open("german.m4a", "rb")
            transcript = openai.Audio.translate("whisper-1", audio_file)
          node: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const resp = await openai.createTranslation(
              fs.createReadStream("audio.mp3"),
              "whisper-1"
            );
        parameters: |
          {
            "file": "german.m4a",
            "model": "whisper-1"
          }
        response: |
          {
            "text": "Hello, my name is Wolfgang and I come from Germany. Where are you heading today?"
          }
  /files:
    get:
      operationId: listFiles
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFilesResponse'
          description: OK
      summary: Returns a list of files that belong to the user's organization.
      tags:
      - OpenAI
      x-oaiMeta:
        name: List files
        group: files
        path: list
        examples:
          curl: |
            curl https://api.openai.com/v1/files \
              -H "Authorization: Bearer $OPENAI_API_KEY"
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.File.list()
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.listFiles();
        response: |
          {
            "data": [
              {
                "id": "file-ccdDZrC3iZVNiQVeEA6Z66wf",
                "object": "file",
                "bytes": 175,
                "created_at": 1613677385,
                "filename": "train.jsonl",
                "purpose": "search"
              },
              {
                "id": "file-XjGxS3KTG0uNmNOK362iJua3",
                "object": "file",
                "bytes": 140,
                "created_at": 1613779121,
                "filename": "puppy.jsonl",
                "purpose": "search"
              }
            ],
            "object": "list"
          }
    post:
      operationId: createFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateFileRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIFile'
          description: OK
      summary: |
        Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.
      tags:
      - OpenAI
      x-oaiMeta:
        name: Upload file
        group: files
        path: upload
        examples:
          curl: |
            curl https://api.openai.com/v1/files \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -F purpose="fine-tune" \
              -F file="@mydata.jsonl"
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.File.create(
              file=open("mydata.jsonl", "rb"),
              purpose='fine-tune'
            )
          node.js: |
            const fs = require("fs");
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.createFile(
              fs.createReadStream("mydata.jsonl"),
              "fine-tune"
            );
        response: |
          {
            "id": "file-XjGxS3KTG0uNmNOK362iJua3",
            "object": "file",
            "bytes": 140,
            "created_at": 1613779121,
            "filename": "mydata.jsonl",
            "purpose": "fine-tune"
          }
  /files/{file_id}:
    delete:
      operationId: deleteFile
      parameters:
      - description: The ID of the file to use for this request
        explode: false
        in: path
        name: file_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFileResponse'
          description: OK
      summary: Delete a file.
      tags:
      - OpenAI
      x-oaiMeta:
        name: Delete file
        group: files
        path: delete
        examples:
          curl: |
            curl https://api.openai.com/v1/files/file-XjGxS3KTG0uNmNOK362iJua3 \
              -X DELETE \
              -H "Authorization: Bearer $OPENAI_API_KEY"
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.File.delete("file-XjGxS3KTG0uNmNOK362iJua3")
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.deleteFile("file-XjGxS3KTG0uNmNOK362iJua3");
        response: |
          {
            "id": "file-XjGxS3KTG0uNmNOK362iJua3",
            "object": "file",
            "deleted": true
          }
    get:
      operationId: retrieveFile
      parameters:
      - description: The ID of the file to use for this request
        explode: false
        in: path
        name: file_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIFile'
          description: OK
      summary: Returns information about a specific file.
      tags:
      - OpenAI
      x-oaiMeta:
        name: Retrieve file
        group: files
        path: retrieve
        examples:
          curl: |
            curl https://api.openai.com/v1/files/file-XjGxS3KTG0uNmNOK362iJua3 \
              -H "Authorization: Bearer $OPENAI_API_KEY"
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.File.retrieve("file-XjGxS3KTG0uNmNOK362iJua3")
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.retrieveFile("file-XjGxS3KTG0uNmNOK362iJua3");
        response: |
          {
            "id": "file-XjGxS3KTG0uNmNOK362iJua3",
            "object": "file",
            "bytes": 140,
            "created_at": 1613779657,
            "filename": "mydata.jsonl",
            "purpose": "fine-tune"
          }
  /files/{file_id}/content:
    get:
      operationId: downloadFile
      parameters:
      - description: The ID of the file to use for this request
        explode: false
        in: path
        name: file_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: OK
      summary: Returns the contents of the specified file
      tags:
      - OpenAI
      x-oaiMeta:
        name: Retrieve file content
        group: files
        path: retrieve-content
        examples:
          curl: |
            curl https://api.openai.com/v1/files/file-XjGxS3KTG0uNmNOK362iJua3/content \
              -H "Authorization: Bearer $OPENAI_API_KEY" > file.jsonl
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            content = openai.File.download("file-XjGxS3KTG0uNmNOK362iJua3")
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.downloadFile("file-XjGxS3KTG0uNmNOK362iJua3");
  /fine-tunes:
    get:
      operationId: listFineTunes
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFineTunesResponse'
          description: OK
      summary: |
        List your organization's fine-tuning jobs
      tags:
      - OpenAI
      x-oaiMeta:
        name: List fine-tunes
        group: fine-tunes
        path: list
        examples:
          curl: |
            curl https://api.openai.com/v1/fine-tunes \
              -H "Authorization: Bearer $OPENAI_API_KEY"
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.FineTune.list()
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.listFineTunes();
        response: |
          {
            "object": "list",
            "data": [
              {
                "id": "ft-AF1WoRqd3aJAHsqc9NY7iL8F",
                "object": "fine-tune",
                "model": "curie",
                "created_at": 1614807352,
                "fine_tuned_model": null,
                "hyperparams": { ... },
                "organization_id": "org-...",
                "result_files": [],
                "status": "pending",
                "validation_files": [],
                "training_files": [ { ... } ],
                "updated_at": 1614807352,
              },
              { ... },
              { ... }
            ]
          }
    post:
      operationId: createFineTune
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFineTuneRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FineTune'
          description: OK
      summary: |
        Creates a job that fine-tunes a specified model from a given dataset.

        Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.

        [Learn more about Fine-tuning](/docs/guides/fine-tuning)
      tags:
      - OpenAI
      x-oaiMeta:
        name: Create fine-tune
        group: fine-tunes
        path: create
        examples:
          curl: |
            curl https://api.openai.com/v1/fine-tunes \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "training_file": "file-XGinujblHPwGLSztz8cPS8XY"
              }'
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.FineTune.create(training_file="file-XGinujblHPwGLSztz8cPS8XY")
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.createFineTune({
              training_file: "file-XGinujblHPwGLSztz8cPS8XY",
            });
        response: |
          {
            "id": "ft-AF1WoRqd3aJAHsqc9NY7iL8F",
            "object": "fine-tune",
            "model": "curie",
            "created_at": 1614807352,
            "events": [
              {
                "object": "fine-tune-event",
                "created_at": 1614807352,
                "level": "info",
                "message": "Job enqueued. Waiting for jobs ahead to complete. Queue number: 0."
              }
            ],
            "fine_tuned_model": null,
            "hyperparams": {
              "batch_size": 4,
              "learning_rate_multiplier": 0.1,
              "n_epochs": 4,
              "prompt_loss_weight": 0.1,
            },
            "organization_id": "org-...",
            "result_files": [],
            "status": "pending",
            "validation_files": [],
            "training_files": [
              {
                "id": "file-XGinujblHPwGLSztz8cPS8XY",
                "object": "file",
                "bytes": 1547276,
                "created_at": 1610062281,
                "filename": "my-data-train.jsonl",
                "purpose": "fine-tune-train"
              }
            ],
            "updated_at": 1614807352,
          }
  /fine-tunes/{fine_tune_id}:
    get:
      operationId: retrieveFineTune
      parameters:
      - description: |
          The ID of the fine-tune job
        explode: false
        in: path
        name: fine_tune_id
        required: true
        schema:
          example: ft-AF1WoRqd3aJAHsqc9NY7iL8F
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FineTune'
          description: OK
      summary: |
        Gets info about the fine-tune job.

        [Learn more about Fine-tuning](/docs/guides/fine-tuning)
      tags:
      - OpenAI
      x-oaiMeta:
        name: Retrieve fine-tune
        group: fine-tunes
        path: retrieve
        examples:
          curl: |
            curl https://api.openai.com/v1/fine-tunes/ft-AF1WoRqd3aJAHsqc9NY7iL8F \
              -H "Authorization: Bearer $OPENAI_API_KEY"
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.FineTune.retrieve(id="ft-AF1WoRqd3aJAHsqc9NY7iL8F")
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.retrieveFineTune("ft-AF1WoRqd3aJAHsqc9NY7iL8F");
        response: |
          {
            "id": "ft-AF1WoRqd3aJAHsqc9NY7iL8F",
            "object": "fine-tune",
            "model": "curie",
            "created_at": 1614807352,
            "events": [
              {
                "object": "fine-tune-event",
                "created_at": 1614807352,
                "level": "info",
                "message": "Job enqueued. Waiting for jobs ahead to complete. Queue number: 0."
              },
              {
                "object": "fine-tune-event",
                "created_at": 1614807356,
                "level": "info",
                "message": "Job started."
              },
              {
                "object": "fine-tune-event",
                "created_at": 1614807861,
                "level": "info",
                "message": "Uploaded snapshot: curie:ft-acmeco-2021-03-03-21-44-20."
              },
              {
                "object": "fine-tune-event",
                "created_at": 1614807864,
                "level": "info",
                "message": "Uploaded result files: file-QQm6ZpqdNwAaVC3aSz5sWwLT."
              },
              {
                "object": "fine-tune-event",
                "created_at": 1614807864,
                "level": "info",
                "message": "Job succeeded."
              }
            ],
            "fine_tuned_model": "curie:ft-acmeco-2021-03-03-21-44-20",
            "hyperparams": {
              "batch_size": 4,
              "learning_rate_multiplier": 0.1,
              "n_epochs": 4,
              "prompt_loss_weight": 0.1,
            },
            "organization_id": "org-...",
            "result_files": [
              {
                "id": "file-QQm6ZpqdNwAaVC3aSz5sWwLT",
                "object": "file",
                "bytes": 81509,
                "created_at": 1614807863,
                "filename": "compiled_results.csv",
                "purpose": "fine-tune-results"
              }
            ],
            "status": "succeeded",
            "validation_files": [],
            "training_files": [
              {
                "id": "file-XGinujblHPwGLSztz8cPS8XY",
                "object": "file",
                "bytes": 1547276,
                "created_at": 1610062281,
                "filename": "my-data-train.jsonl",
                "purpose": "fine-tune-train"
              }
            ],
            "updated_at": 1614807865,
          }
  /fine-tunes/{fine_tune_id}/cancel:
    post:
      operationId: cancelFineTune
      parameters:
      - description: |
          The ID of the fine-tune job to cancel
        explode: false
        in: path
        name: fine_tune_id
        required: true
        schema:
          example: ft-AF1WoRqd3aJAHsqc9NY7iL8F
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FineTune'
          description: OK
      summary: |
        Immediately cancel a fine-tune job.
      tags:
      - OpenAI
      x-oaiMeta:
        name: Cancel fine-tune
        group: fine-tunes
        path: cancel
        examples:
          curl: |
            curl https://api.openai.com/v1/fine-tunes/ft-AF1WoRqd3aJAHsqc9NY7iL8F/cancel \
              -H "Authorization: Bearer $OPENAI_API_KEY"
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.FineTune.cancel(id="ft-AF1WoRqd3aJAHsqc9NY7iL8F")
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.cancelFineTune("ft-AF1WoRqd3aJAHsqc9NY7iL8F");
        response: |
          {
            "id": "ft-xhrpBbvVUzYGo8oUO1FY4nI7",
            "object": "fine-tune",
            "model": "curie",
            "created_at": 1614807770,
            "events": [ { ... } ],
            "fine_tuned_model": null,
            "hyperparams": { ... },
            "organization_id": "org-...",
            "result_files": [],
            "status": "cancelled",
            "validation_files": [],
            "training_files": [
              {
                "id": "file-XGinujblHPwGLSztz8cPS8XY",
                "object": "file",
                "bytes": 1547276,
                "created_at": 1610062281,
                "filename": "my-data-train.jsonl",
                "purpose": "fine-tune-train"
              }
            ],
            "updated_at": 1614807789,
          }
  /fine-tunes/{fine_tune_id}/events:
    get:
      operationId: listFineTuneEvents
      parameters:
      - description: |
          The ID of the fine-tune job to get events for.
        explode: false
        in: path
        name: fine_tune_id
        required: true
        schema:
          example: ft-AF1WoRqd3aJAHsqc9NY7iL8F
          type: string
        style: simple
      - description: |
          Whether to stream events for the fine-tune job. If set to true,
          events will be sent as data-only
          [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
          as they become available. The stream will terminate with a
          `data: [DONE]` message when the job is finished (succeeded, cancelled,
          or failed).

          If set to false, only events generated so far will be returned.
        explode: true
        in: query
        name: stream
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFineTuneEventsResponse'
          description: OK
      summary: |
        Get fine-grained status updates for a fine-tune job.
      tags:
      - OpenAI
      x-oaiMeta:
        name: List fine-tune events
        group: fine-tunes
        path: events
        examples:
          curl: |
            curl https://api.openai.com/v1/fine-tunes/ft-AF1WoRqd3aJAHsqc9NY7iL8F/events \
              -H "Authorization: Bearer $OPENAI_API_KEY"
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.FineTune.list_events(id="ft-AF1WoRqd3aJAHsqc9NY7iL8F")
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.listFineTuneEvents("ft-AF1WoRqd3aJAHsqc9NY7iL8F");
        response: |
          {
            "object": "list",
            "data": [
              {
                "object": "fine-tune-event",
                "created_at": 1614807352,
                "level": "info",
                "message": "Job enqueued. Waiting for jobs ahead to complete. Queue number: 0."
              },
              {
                "object": "fine-tune-event",
                "created_at": 1614807356,
                "level": "info",
                "message": "Job started."
              },
              {
                "object": "fine-tune-event",
                "created_at": 1614807861,
                "level": "info",
                "message": "Uploaded snapshot: curie:ft-acmeco-2021-03-03-21-44-20."
              },
              {
                "object": "fine-tune-event",
                "created_at": 1614807864,
                "level": "info",
                "message": "Uploaded result files: file-QQm6ZpqdNwAaVC3aSz5sWwLT."
              },
              {
                "object": "fine-tune-event",
                "created_at": 1614807864,
                "level": "info",
                "message": "Job succeeded."
              }
            ]
          }
  /models:
    get:
      operationId: listModels
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelsResponse'
          description: OK
      summary: "Lists the currently available models, and provides basic information\
        \ about each one such as the owner and availability."
      tags:
      - OpenAI
      x-oaiMeta:
        name: List models
        group: models
        path: list
        examples:
          curl: |
            curl https://api.openai.com/v1/models \
              -H "Authorization: Bearer $OPENAI_API_KEY"
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.Model.list()
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.listModels();
        response: |
          {
            "data": [
              {
                "id": "model-id-0",
                "object": "model",
                "owned_by": "organization-owner",
                "permission": [...]
              },
              {
                "id": "model-id-1",
                "object": "model",
                "owned_by": "organization-owner",
                "permission": [...]
              },
              {
                "id": "model-id-2",
                "object": "model",
                "owned_by": "openai",
                "permission": [...]
              },
            ],
            "object": "list"
          }
  /models/{model}:
    delete:
      operationId: deleteModel
      parameters:
      - description: The model to delete
        explode: false
        in: path
        name: model
        required: true
        schema:
          example: curie:ft-acmeco-2021-03-03-21-44-20
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteModelResponse'
          description: OK
      summary: Delete a fine-tuned model. You must have the Owner role in your organization.
      tags:
      - OpenAI
      x-oaiMeta:
        name: Delete fine-tune model
        group: fine-tunes
        path: delete-model
        examples:
          curl: |
            curl https://api.openai.com/v1/models/curie:ft-acmeco-2021-03-03-21-44-20 \
              -X DELETE \
              -H "Authorization: Bearer $OPENAI_API_KEY"
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.Model.delete("curie:ft-acmeco-2021-03-03-21-44-20")
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.deleteModel('curie:ft-acmeco-2021-03-03-21-44-20');
        response: |
          {
            "id": "curie:ft-acmeco-2021-03-03-21-44-20",
            "object": "model",
            "deleted": true
          }
    get:
      operationId: retrieveModel
      parameters:
      - description: The ID of the model to use for this request
        explode: false
        in: path
        name: model
        required: true
        schema:
          example: text-davinci-001
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: OK
      summary: "Retrieves a model instance, providing basic information about the\
        \ model such as the owner and permissioning."
      tags:
      - OpenAI
      x-oaiMeta:
        name: Retrieve model
        group: models
        path: retrieve
        examples:
          curl: |
            curl https://api.openai.com/v1/models/VAR_model_id \
              -H "Authorization: Bearer $OPENAI_API_KEY"
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.Model.retrieve("VAR_model_id")
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.retrieveModel("VAR_model_id");
        response: |
          {
            "id": "VAR_model_id",
            "object": "model",
            "owned_by": "openai",
            "permission": [...]
          }
  /moderations:
    post:
      operationId: createModeration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateModerationRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateModerationResponse'
          description: OK
      summary: Classifies if text violates OpenAI's Content Policy
      tags:
      - OpenAI
      x-oaiMeta:
        name: Create moderation
        group: moderations
        path: create
        examples:
          curl: |
            curl https://api.openai.com/v1/moderations \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "input": "I want to kill them."
              }'
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.Moderation.create(
              input="I want to kill them.",
            )
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.createModeration({
              input: "I want to kill them.",
            });
        parameters: |
          {
            "input": "I want to kill them."
          }
        response: |
          {
            "id": "modr-5MWoLO",
            "model": "text-moderation-001",
            "results": [
              {
                "categories": {
                  "hate": false,
                  "hate/threatening": true,
                  "self-harm": false,
                  "sexual": false,
                  "sexual/minors": false,
                  "violence": true,
                  "violence/graphic": false
                },
                "category_scores": {
                  "hate": 0.22714105248451233,
                  "hate/threatening": 0.4132447838783264,
                  "self-harm": 0.005232391878962517,
                  "sexual": 0.01407341007143259,
                  "sexual/minors": 0.0038522258400917053,
                  "violence": 0.9223177433013916,
                  "violence/graphic": 0.036865197122097015
                },
                "flagged": true
              }
            ]
          }
components:
  schemas:
    Error:
      properties:
        type:
          nullable: false
          type: string
        message:
          nullable: false
          type: string
        param:
          nullable: true
          type: string
        code:
          nullable: true
          type: string
      required:
      - code
      - message
      - param
      - type
      type: object
    ErrorResponse:
      properties:
        error:
          $ref: '#/components/schemas/Error'
      required:
      - error
      type: object
    ListModelsResponse:
      example:
        data:
        - created: 0
          owned_by: owned_by
          id: id
          object: object
        - created: 0
          owned_by: owned_by
          id: id
          object: object
        object: object
      properties:
        object:
          type: string
        data:
          items:
            $ref: '#/components/schemas/Model'
          type: array
      required:
      - data
      - object
      type: object
    DeleteModelResponse:
      example:
        deleted: true
        id: id
        object: object
      properties:
        id:
          type: string
        object:
          type: string
        deleted:
          type: boolean
      required:
      - deleted
      - id
      - object
      type: object
    CreateCompletionRequest:
      example:
        logit_bias: "{}"
        max_tokens: 16
        presence_penalty: 0.4109824732281613
        echo: false
        suffix: test.
        "n": 1
        logprobs: 0
        top_p: 1
        frequency_penalty: -1.413674807798822
        stop: |2+

        best_of: 11
        stream: false
        temperature: 1
        model: CreateCompletionRequest_model
        prompt: This is a test.
        user: user-1234
      properties:
        model:
          $ref: '#/components/schemas/CreateCompletionRequest_model'
        prompt:
          $ref: '#/components/schemas/CreateCompletionRequest_prompt'
        suffix:
          description: The suffix that comes after a completion of inserted text.
          example: test.
          nullable: true
          type: string
        max_tokens:
          default: 16
          description: |
            The maximum number of [tokens](/tokenizer) to generate in the completion.

            The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.
          example: 16
          minimum: 0
          nullable: true
          type: integer
        temperature:
          default: 1
          description: |
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        top_p:
          default: 1
          description: |
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or `temperature` but not both.
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
        "n":
          default: 1
          description: |
            How many completions to generate for each prompt.

            **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
          example: 1
          maximum: 128
          minimum: 1
          nullable: true
          type: integer
        stream:
          default: false
          description: |
            Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).
          nullable: true
          type: boolean
        logprobs:
          description: |
            Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.

            The maximum value for `logprobs` is 5.
          maximum: 5
          minimum: 0
          nullable: true
          type: integer
        echo:
          default: false
          description: |
            Echo back the prompt in addition to the completion
          nullable: true
          type: boolean
        stop:
          $ref: '#/components/schemas/CreateCompletionRequest_stop'
        presence_penalty:
          default: 0
          description: |
            Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.

            [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
          maximum: 2
          minimum: -2
          nullable: true
          type: number
        frequency_penalty:
          default: 0
          description: |
            Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.

            [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
          maximum: 2
          minimum: -2
          nullable: true
          type: number
        best_of:
          default: 1
          description: |
            Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.

            When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.

            **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
          maximum: 20
          minimum: 0
          nullable: true
          type: integer
        logit_bias:
          description: |
            Modify the likelihood of specified tokens appearing in the completion.

            Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.

            As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
          nullable: true
          type: object
          x-oaiTypeLabel: map
        user:
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
          example: user-1234
          type: string
      required:
      - model
      - prompt
      type: object
    CreateCompletionResponse:
      example:
        created: 0
        usage:
          completion_tokens: 5
          prompt_tokens: 1
          total_tokens: 5
        model: model
        id: id
        choices:
        - finish_reason: stop
          index: 6
          text: text
          logprobs:
            top_logprobs:
            - "{}"
            - "{}"
            token_logprobs:
            - 1.4658129805029452
            - 1.4658129805029452
            tokens:
            - tokens
            - tokens
            text_offset:
            - 5
            - 5
        - finish_reason: stop
          index: 6
          text: text
          logprobs:
            top_logprobs:
            - "{}"
            - "{}"
            token_logprobs:
            - 1.4658129805029452
            - 1.4658129805029452
            tokens:
            - tokens
            - tokens
            text_offset:
            - 5
            - 5
        object: object
      properties:
        id:
          type: string
        object:
          type: string
        created:
          type: integer
        model:
          type: string
        choices:
          items:
            $ref: '#/components/schemas/CreateCompletionResponse_choices_inner'
          type: array
        usage:
          $ref: '#/components/schemas/CreateCompletionResponse_usage'
      required:
      - choices
      - created
      - id
      - model
      - object
      type: object
    ChatCompletionRequestMessage:
      example:
        role: system
        function_call:
          name: name
          arguments: arguments
        name: name
        content: content
      properties:
        role:
          description: "The role of the messages author. One of `system`, `user`,\
            \ `assistant`, or `function`."
          enum:
          - system
          - user
          - assistant
          - function
          type: string
        content:
          description: The contents of the message. `content` is required for all
            messages except assistant messages with function calls.
          type: string
        name:
          description: "The name of the author of this message. `name` is required\
            \ if role is `function`, and it should be the name of the function whose\
            \ response is in the `content`. May contain a-z, A-Z, 0-9, and underscores,\
            \ with a maximum length of 64 characters."
          type: string
        function_call:
          $ref: '#/components/schemas/ChatCompletionRequestMessage_function_call'
      required:
      - role
      type: object
    ChatCompletionFunctionParameters:
      additionalProperties: true
      description: "The parameters the functions accepts, described as a JSON Schema\
        \ object. See the [guide](/docs/guides/gpt/function-calling) for examples,\
        \ and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/)\
        \ for documentation about the format."
      type: object
    ChatCompletionFunctions:
      example:
        name: name
        description: description
        parameters:
          key: ""
      properties:
        name:
          description: "The name of the function to be called. Must be a-z, A-Z, 0-9,\
            \ or contain underscores and dashes, with a maximum length of 64."
          type: string
        description:
          description: The description of what the function does.
          type: string
        parameters:
          additionalProperties: true
          description: "The parameters the functions accepts, described as a JSON\
            \ Schema object. See the [guide](/docs/guides/gpt/function-calling) for\
            \ examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/)\
            \ for documentation about the format."
          type: object
      required:
      - name
      type: object
    ChatCompletionResponseMessage:
      example:
        role: system
        function_call:
          name: name
          arguments: arguments
        content: content
      properties:
        role:
          description: The role of the author of this message.
          enum:
          - system
          - user
          - assistant
          - function
          type: string
        content:
          description: The contents of the message.
          nullable: true
          type: string
        function_call:
          $ref: '#/components/schemas/ChatCompletionRequestMessage_function_call'
      required:
      - role
      type: object
    ChatCompletionStreamResponseDelta:
      properties:
        role:
          description: The role of the author of this message.
          enum:
          - system
          - user
          - assistant
          - function
          type: string
        content:
          description: The contents of the chunk message.
          nullable: true
          type: string
        function_call:
          $ref: '#/components/schemas/ChatCompletionRequestMessage_function_call'
      type: object
    CreateChatCompletionRequest:
      example:
        logit_bias: "{}"
        functions:
        - name: name
          description: description
          parameters:
            key: ""
        - name: name
          description: description
          parameters:
            key: ""
        function_call: none
        max_tokens: 0
        presence_penalty: 0.4109824732281613
        "n": 1
        top_p: 1
        frequency_penalty: -1.413674807798822
        stop: CreateChatCompletionRequest_stop
        stream: false
        temperature: 1
        messages:
        - role: system
          function_call:
            name: name
            arguments: arguments
          name: name
          content: content
        - role: system
          function_call:
            name: name
            arguments: arguments
          name: name
          content: content
        model: gpt-3.5-turbo
        user: user-1234
      properties:
        model:
          $ref: '#/components/schemas/CreateChatCompletionRequest_model'
        messages:
          description: "A list of messages comprising the conversation so far. [Example\
            \ Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb)."
          items:
            $ref: '#/components/schemas/ChatCompletionRequestMessage'
          minItems: 1
          type: array
        functions:
          description: A list of functions the model may generate JSON inputs for.
          items:
            $ref: '#/components/schemas/ChatCompletionFunctions'
          minItems: 1
          type: array
        function_call:
          $ref: '#/components/schemas/CreateChatCompletionRequest_function_call'
        temperature:
          default: 1
          description: |
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        top_p:
          default: 1
          description: |
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or `temperature` but not both.
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
        "n":
          default: 1
          description: How many chat completion choices to generate for each input
            message.
          example: 1
          maximum: 128
          minimum: 1
          nullable: true
          type: integer
        stream:
          default: false
          description: |
            If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).
          nullable: true
          type: boolean
        stop:
          $ref: '#/components/schemas/CreateChatCompletionRequest_stop'
        max_tokens:
          description: |
            The maximum number of [tokens](/tokenizer) to generate in the chat completion.

            The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.
          type: integer
        presence_penalty:
          default: 0
          description: |
            Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.

            [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
          maximum: 2
          minimum: -2
          nullable: true
          type: number
        frequency_penalty:
          default: 0
          description: |
            Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.

            [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
          maximum: 2
          minimum: -2
          nullable: true
          type: number
        logit_bias:
          description: |
            Modify the likelihood of specified tokens appearing in the completion.

            Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
          nullable: true
          type: object
          x-oaiTypeLabel: map
        user:
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
          example: user-1234
          type: string
      required:
      - messages
      - model
      type: object
    CreateChatCompletionResponse:
      example:
        created: 0
        usage:
          completion_tokens: 5
          prompt_tokens: 1
          total_tokens: 5
        model: model
        id: id
        choices:
        - finish_reason: stop
          index: 6
          message:
            role: system
            function_call:
              name: name
              arguments: arguments
            content: content
        - finish_reason: stop
          index: 6
          message:
            role: system
            function_call:
              name: name
              arguments: arguments
            content: content
        object: object
      properties:
        id:
          type: string
        object:
          type: string
        created:
          type: integer
        model:
          type: string
        choices:
          items:
            $ref: '#/components/schemas/CreateChatCompletionResponse_choices_inner'
          type: array
        usage:
          $ref: '#/components/schemas/CreateCompletionResponse_usage'
      required:
      - choices
      - created
      - id
      - model
      - object
      type: object
    CreateChatCompletionStreamResponse:
      properties:
        id:
          type: string
        object:
          type: string
        created:
          type: integer
        model:
          type: string
        choices:
          items:
            $ref: '#/components/schemas/CreateChatCompletionStreamResponse_choices_inner'
          type: array
      required:
      - choices
      - created
      - id
      - model
      - object
      type: object
    CreateEditRequest:
      example:
        top_p: 1
        input: What day of the wek is it?
        instruction: Fix the spelling mistakes.
        temperature: 1
        model: text-davinci-edit-001
        "n": 1
      properties:
        model:
          $ref: '#/components/schemas/CreateEditRequest_model'
        input:
          default: ""
          description: The input text to use as a starting point for the edit.
          example: What day of the wek is it?
          nullable: true
          type: string
        instruction:
          description: The instruction that tells the model how to edit the prompt.
          example: Fix the spelling mistakes.
          type: string
        "n":
          default: 1
          description: How many edits to generate for the input and instruction.
          example: 1
          maximum: 20
          minimum: 1
          nullable: true
          type: integer
        temperature:
          default: 1
          description: |
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        top_p:
          default: 1
          description: |
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or `temperature` but not both.
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
      required:
      - instruction
      - model
      type: object
    CreateEditResponse:
      example:
        created: 0
        usage:
          completion_tokens: 5
          prompt_tokens: 1
          total_tokens: 5
        choices:
        - finish_reason: stop
          index: 6
          text: text
          logprobs:
            top_logprobs:
            - "{}"
            - "{}"
            token_logprobs:
            - 1.4658129805029452
            - 1.4658129805029452
            tokens:
            - tokens
            - tokens
            text_offset:
            - 5
            - 5
        - finish_reason: stop
          index: 6
          text: text
          logprobs:
            top_logprobs:
            - "{}"
            - "{}"
            token_logprobs:
            - 1.4658129805029452
            - 1.4658129805029452
            tokens:
            - tokens
            - tokens
            text_offset:
            - 5
            - 5
        object: object
      properties:
        object:
          type: string
        created:
          type: integer
        choices:
          items:
            $ref: '#/components/schemas/CreateEditResponse_choices_inner'
          type: array
        usage:
          $ref: '#/components/schemas/CreateCompletionResponse_usage'
      required:
      - choices
      - created
      - object
      - usage
      type: object
    CreateImageRequest:
      example:
        response_format: url
        size: 1024x1024
        prompt: A cute baby sea otter
        user: user-1234
        "n": 1
      properties:
        prompt:
          description: A text description of the desired image(s). The maximum length
            is 1000 characters.
          example: A cute baby sea otter
          type: string
        "n":
          default: 1
          description: The number of images to generate. Must be between 1 and 10.
          example: 1
          maximum: 10
          minimum: 1
          nullable: true
          type: integer
        size:
          default: 1024x1024
          description: "The size of the generated images. Must be one of `256x256`,\
            \ `512x512`, or `1024x1024`."
          enum:
          - 256x256
          - 512x512
          - 1024x1024
          example: 1024x1024
          nullable: true
          type: string
        response_format:
          default: url
          description: The format in which the generated images are returned. Must
            be one of `url` or `b64_json`.
          enum:
          - url
          - b64_json
          example: url
          nullable: true
          type: string
        user:
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
          example: user-1234
          type: string
      required:
      - prompt
      type: object
    ImagesResponse:
      example:
        data:
        - b64_json: b64_json
          url: url
        - b64_json: b64_json
          url: url
        created: 0
      properties:
        created:
          type: integer
        data:
          items:
            $ref: '#/components/schemas/ImagesResponse_data_inner'
          type: array
      required:
      - created
      - data
    CreateImageEditRequest:
      properties:
        image:
          description: "The image to edit. Must be a valid PNG file, less than 4MB,\
            \ and square. If mask is not provided, image must have transparency, which\
            \ will be used as the mask."
          format: binary
          type: string
        mask:
          description: "An additional image whose fully transparent areas (e.g. where\
            \ alpha is zero) indicate where `image` should be edited. Must be a valid\
            \ PNG file, less than 4MB, and have the same dimensions as `image`."
          format: binary
          type: string
        prompt:
          description: A text description of the desired image(s). The maximum length
            is 1000 characters.
          example: A cute baby sea otter wearing a beret
          type: string
        "n":
          default: 1
          description: The number of images to generate. Must be between 1 and 10.
          example: 1
          maximum: 10
          minimum: 1
          nullable: true
          type: integer
        size:
          default: 1024x1024
          description: "The size of the generated images. Must be one of `256x256`,\
            \ `512x512`, or `1024x1024`."
          enum:
          - 256x256
          - 512x512
          - 1024x1024
          example: 1024x1024
          nullable: true
          type: string
        response_format:
          default: url
          description: The format in which the generated images are returned. Must
            be one of `url` or `b64_json`.
          enum:
          - url
          - b64_json
          example: url
          nullable: true
          type: string
        user:
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
          example: user-1234
          type: string
      required:
      - image
      - prompt
      type: object
    CreateImageVariationRequest:
      properties:
        image:
          description: "The image to use as the basis for the variation(s). Must be\
            \ a valid PNG file, less than 4MB, and square."
          format: binary
          type: string
        "n":
          default: 1
          description: The number of images to generate. Must be between 1 and 10.
          example: 1
          maximum: 10
          minimum: 1
          nullable: true
          type: integer
        size:
          default: 1024x1024
          description: "The size of the generated images. Must be one of `256x256`,\
            \ `512x512`, or `1024x1024`."
          enum:
          - 256x256
          - 512x512
          - 1024x1024
          example: 1024x1024
          nullable: true
          type: string
        response_format:
          default: url
          description: The format in which the generated images are returned. Must
            be one of `url` or `b64_json`.
          enum:
          - url
          - b64_json
          example: url
          nullable: true
          type: string
        user:
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
          example: user-1234
          type: string
      required:
      - image
      type: object
    CreateModerationRequest:
      example:
        input: I want to kill them.
        model: text-moderation-stable
      properties:
        input:
          $ref: '#/components/schemas/CreateModerationRequest_input'
        model:
          $ref: '#/components/schemas/CreateModerationRequest_model'
      required:
      - input
      type: object
    CreateModerationResponse:
      example:
        model: model
        id: id
        results:
        - category_scores:
            hate/threatening: 6.027456183070403
            sexual/minors: 5.637376656633329
            hate: 0.8008281904610115
            self-harm: 1.4658129805029452
            sexual: 5.962133916683182
            violence/graphic: 7.061401241503109
            violence: 2.3021358869347655
          flagged: true
          categories:
            hate/threatening: true
            sexual/minors: true
            hate: true
            self-harm: true
            sexual: true
            violence/graphic: true
            violence: true
        - category_scores:
            hate/threatening: 6.027456183070403
            sexual/minors: 5.637376656633329
            hate: 0.8008281904610115
            self-harm: 1.4658129805029452
            sexual: 5.962133916683182
            violence/graphic: 7.061401241503109
            violence: 2.3021358869347655
          flagged: true
          categories:
            hate/threatening: true
            sexual/minors: true
            hate: true
            self-harm: true
            sexual: true
            violence/graphic: true
            violence: true
      properties:
        id:
          type: string
        model:
          type: string
        results:
          items:
            $ref: '#/components/schemas/CreateModerationResponse_results_inner'
          type: array
      required:
      - id
      - model
      - results
      type: object
    ListFilesResponse:
      example:
        data:
        - filename: filename
          purpose: purpose
          bytes: 0
          created_at: 6
          id: id
          status_details: "{}"
          object: object
          status: status
        - filename: filename
          purpose: purpose
          bytes: 0
          created_at: 6
          id: id
          status_details: "{}"
          object: object
          status: status
        object: object
      properties:
        object:
          type: string
        data:
          items:
            $ref: '#/components/schemas/OpenAIFile'
          type: array
      required:
      - data
      - object
      type: object
    CreateFileRequest:
      additionalProperties: false
      properties:
        file:
          description: |
            Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.

            If the `purpose` is set to "fine-tune", each line is a JSON record with "prompt" and "completion" fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).
          format: binary
          type: string
        purpose:
          description: |
            The intended purpose of the uploaded documents.

            Use "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.
          type: string
      required:
      - file
      - purpose
      type: object
    DeleteFileResponse:
      example:
        deleted: true
        id: id
        object: object
      properties:
        id:
          type: string
        object:
          type: string
        deleted:
          type: boolean
      required:
      - deleted
      - id
      - object
      type: object
    CreateFineTuneRequest:
      example:
        training_file: file-ajSREls59WBbvgSzJSVWxMCB
        n_epochs: 0
        batch_size: 6
        classification_n_classes: 5
        validation_file: file-XjSREls59WBbvgSzJSVWxMCa
        classification_betas:
        - 0.6
        - 1
        - 1.5
        - 2
        prompt_loss_weight: 5.962133916683182
        model: curie
        compute_classification_metrics: false
        classification_positive_class: classification_positive_class
        suffix: suffix
        learning_rate_multiplier: 1.4658129805029452
      properties:
        training_file:
          description: |
            The ID of an uploaded file that contains training data.

            See [upload file](/docs/api-reference/files/upload) for how to upload a file.

            Your dataset must be formatted as a JSONL file, where each training
            example is a JSON object with the keys "prompt" and "completion".
            Additionally, you must upload your file with the purpose `fine-tune`.

            See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.
          example: file-ajSREls59WBbvgSzJSVWxMCB
          type: string
        validation_file:
          description: |
            The ID of an uploaded file that contains validation data.

            If you provide this file, the data is used to generate validation
            metrics periodically during fine-tuning. These metrics can be viewed in
            the [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).
            Your train and validation data should be mutually exclusive.

            Your dataset must be formatted as a JSONL file, where each validation
            example is a JSON object with the keys "prompt" and "completion".
            Additionally, you must upload your file with the purpose `fine-tune`.

            See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.
          example: file-XjSREls59WBbvgSzJSVWxMCa
          nullable: true
          type: string
        model:
          $ref: '#/components/schemas/CreateFineTuneRequest_model'
        n_epochs:
          default: 4
          description: |
            The number of epochs to train the model for. An epoch refers to one
            full cycle through the training dataset.
          nullable: true
          type: integer
        batch_size:
          description: |
            The batch size to use for training. The batch size is the number of
            training examples used to train a single forward and backward pass.

            By default, the batch size will be dynamically configured to be
            ~0.2% of the number of examples in the training set, capped at 256 -
            in general, we've found that larger batch sizes tend to work better
            for larger datasets.
          nullable: true
          type: integer
        learning_rate_multiplier:
          description: |
            The learning rate multiplier to use for training.
            The fine-tuning learning rate is the original learning rate used for
            pretraining multiplied by this value.

            By default, the learning rate multiplier is the 0.05, 0.1, or 0.2
            depending on final `batch_size` (larger learning rates tend to
            perform better with larger batch sizes). We recommend experimenting
            with values in the range 0.02 to 0.2 to see what produces the best
            results.
          nullable: true
          type: number
        prompt_loss_weight:
          default: 0.01
          description: |
            The weight to use for loss on the prompt tokens. This controls how
            much the model tries to learn to generate the prompt (as compared
            to the completion which always has a weight of 1.0), and can add
            a stabilizing effect to training when completions are short.

            If prompts are extremely long (relative to completions), it may make
            sense to reduce this weight so as to avoid over-prioritizing
            learning the prompt.
          nullable: true
          type: number
        compute_classification_metrics:
          default: false
          description: |
            If set, we calculate classification-specific metrics such as accuracy
            and F-1 score using the validation set at the end of every epoch.
            These metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).

            In order to compute classification metrics, you must provide a
            `validation_file`. Additionally, you must
            specify `classification_n_classes` for multiclass classification or
            `classification_positive_class` for binary classification.
          nullable: true
          type: boolean
        classification_n_classes:
          description: |
            The number of classes in a classification task.

            This parameter is required for multiclass classification.
          nullable: true
          type: integer
        classification_positive_class:
          description: |
            The positive class in binary classification.

            This parameter is needed to generate precision, recall, and F1
            metrics when doing binary classification.
          nullable: true
          type: string
        classification_betas:
          description: |
            If this is provided, we calculate F-beta scores at the specified
            beta values. The F-beta score is a generalization of F-1 score.
            This is only used for binary classification.

            With a beta of 1 (i.e. the F-1 score), precision and recall are
            given the same weight. A larger beta score puts more weight on
            recall and less on precision. A smaller beta score puts more weight
            on precision and less on recall.
          example:
          - 0.6
          - 1
          - 1.5
          - 2
          items:
            type: number
          nullable: true
          type: array
        suffix:
          description: |
            A string of up to 40 characters that will be added to your fine-tuned model name.

            For example, a `suffix` of "custom-model-name" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`.
          maxLength: 40
          minLength: 1
          nullable: true
          type: string
      required:
      - training_file
      type: object
    ListFineTunesResponse:
      example:
        data:
        - result_files:
          - filename: filename
            purpose: purpose
            bytes: 0
            created_at: 6
            id: id
            status_details: "{}"
            object: object
            status: status
          - filename: filename
            purpose: purpose
            bytes: 0
            created_at: 6
            id: id
            status_details: "{}"
            object: object
            status: status
          hyperparams: "{}"
          fine_tuned_model: fine_tuned_model
          created_at: 0
          training_files:
          - filename: filename
            purpose: purpose
            bytes: 0
            created_at: 6
            id: id
            status_details: "{}"
            object: object
            status: status
          - filename: filename
            purpose: purpose
            bytes: 0
            created_at: 6
            id: id
            status_details: "{}"
            object: object
            status: status
          updated_at: 6
          organization_id: organization_id
          model: model
          id: id
          events:
          - level: level
            created_at: 1
            message: message
            object: object
          - level: level
            created_at: 1
            message: message
            object: object
          object: object
          status: status
          validation_files:
          - filename: filename
            purpose: purpose
            bytes: 0
            created_at: 6
            id: id
            status_details: "{}"
            object: object
            status: status
          - filename: filename
            purpose: purpose
            bytes: 0
            created_at: 6
            id: id
            status_details: "{}"
            object: object
            status: status
        - result_files:
          - filename: filename
            purpose: purpose
            bytes: 0
            created_at: 6
            id: id
            status_details: "{}"
            object: object
            status: status
          - filename: filename
            purpose: purpose
            bytes: 0
            created_at: 6
            id: id
            status_details: "{}"
            object: object
            status: status
          hyperparams: "{}"
          fine_tuned_model: fine_tuned_model
          created_at: 0
          training_files:
          - filename: filename
            purpose: purpose
            bytes: 0
            created_at: 6
            id: id
            status_details: "{}"
            object: object
            status: status
          - filename: filename
            purpose: purpose
            bytes: 0
            created_at: 6
            id: id
            status_details: "{}"
            object: object
            status: status
          updated_at: 6
          organization_id: organization_id
          model: model
          id: id
          events:
          - level: level
            created_at: 1
            message: message
            object: object
          - level: level
            created_at: 1
            message: message
            object: object
          object: object
          status: status
          validation_files:
          - filename: filename
            purpose: purpose
            bytes: 0
            created_at: 6
            id: id
            status_details: "{}"
            object: object
            status: status
          - filename: filename
            purpose: purpose
            bytes: 0
            created_at: 6
            id: id
            status_details: "{}"
            object: object
            status: status
        object: object
      properties:
        object:
          type: string
        data:
          items:
            $ref: '#/components/schemas/FineTune'
          type: array
      required:
      - data
      - object
      type: object
    ListFineTuneEventsResponse:
      example:
        data:
        - level: level
          created_at: 1
          message: message
          object: object
        - level: level
          created_at: 1
          message: message
          object: object
        object: object
      properties:
        object:
          type: string
        data:
          items:
            $ref: '#/components/schemas/FineTuneEvent'
          type: array
      required:
      - data
      - object
      type: object
    CreateEmbeddingRequest:
      additionalProperties: false
      example:
        input: The quick brown fox jumped over the lazy dog
        model: text-embedding-ada-002
        user: user-1234
      properties:
        model:
          $ref: '#/components/schemas/CreateEmbeddingRequest_model'
        input:
          $ref: '#/components/schemas/CreateEmbeddingRequest_input'
        user:
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
          example: user-1234
          type: string
      required:
      - input
      - model
      type: object
    CreateEmbeddingResponse:
      example:
        data:
        - index: 0
          embedding:
          - 6.027456183070403
          - 6.027456183070403
          object: object
        - index: 0
          embedding:
          - 6.027456183070403
          - 6.027456183070403
          object: object
        usage:
          prompt_tokens: 1
          total_tokens: 5
        model: model
        object: object
      properties:
        object:
          type: string
        model:
          type: string
        data:
          items:
            $ref: '#/components/schemas/CreateEmbeddingResponse_data_inner'
          type: array
        usage:
          $ref: '#/components/schemas/CreateEmbeddingResponse_usage'
      required:
      - data
      - model
      - object
      - usage
      type: object
    CreateTranscriptionRequest:
      additionalProperties: false
      properties:
        file:
          description: |
            The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.
          format: binary
          type: string
          x-oaiTypeLabel: file
        model:
          $ref: '#/components/schemas/CreateTranscriptionRequest_model'
        prompt:
          description: |
            An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
          type: string
        response_format:
          default: json
          description: |
            The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
          type: string
        temperature:
          default: 0
          description: |
            The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
          type: number
        language:
          description: |
            The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.
          type: string
      required:
      - file
      - model
      type: object
    CreateTranscriptionResponse:
      example:
        text: text
      properties:
        text:
          type: string
      required:
      - text
      type: object
    CreateTranslationRequest:
      additionalProperties: false
      properties:
        file:
          description: |
            The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.
          format: binary
          type: string
          x-oaiTypeLabel: file
        model:
          $ref: '#/components/schemas/CreateTranscriptionRequest_model'
        prompt:
          description: |
            An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.
          type: string
        response_format:
          default: json
          description: |
            The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
          type: string
        temperature:
          default: 0
          description: |
            The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
          type: number
      required:
      - file
      - model
      type: object
    CreateTranslationResponse:
      example:
        text: text
      properties:
        text:
          type: string
      required:
      - text
      type: object
    Model:
      example:
        created: 0
        owned_by: owned_by
        id: id
        object: object
      properties:
        id:
          type: string
        object:
          type: string
        created:
          type: integer
        owned_by:
          type: string
      required:
      - created
      - id
      - object
      - owned_by
      title: Model
    OpenAIFile:
      example:
        filename: filename
        purpose: purpose
        bytes: 0
        created_at: 6
        id: id
        status_details: "{}"
        object: object
        status: status
      properties:
        id:
          type: string
        object:
          type: string
        bytes:
          type: integer
        created_at:
          type: integer
        filename:
          type: string
        purpose:
          type: string
        status:
          type: string
        status_details:
          nullable: true
          type: object
      required:
      - bytes
      - created_at
      - filename
      - id
      - object
      - purpose
      title: OpenAIFile
    FineTune:
      example:
        result_files:
        - filename: filename
          purpose: purpose
          bytes: 0
          created_at: 6
          id: id
          status_details: "{}"
          object: object
          status: status
        - filename: filename
          purpose: purpose
          bytes: 0
          created_at: 6
          id: id
          status_details: "{}"
          object: object
          status: status
        hyperparams: "{}"
        fine_tuned_model: fine_tuned_model
        created_at: 0
        training_files:
        - filename: filename
          purpose: purpose
          bytes: 0
          created_at: 6
          id: id
          status_details: "{}"
          object: object
          status: status
        - filename: filename
          purpose: purpose
          bytes: 0
          created_at: 6
          id: id
          status_details: "{}"
          object: object
          status: status
        updated_at: 6
        organization_id: organization_id
        model: model
        id: id
        events:
        - level: level
          created_at: 1
          message: message
          object: object
        - level: level
          created_at: 1
          message: message
          object: object
        object: object
        status: status
        validation_files:
        - filename: filename
          purpose: purpose
          bytes: 0
          created_at: 6
          id: id
          status_details: "{}"
          object: object
          status: status
        - filename: filename
          purpose: purpose
          bytes: 0
          created_at: 6
          id: id
          status_details: "{}"
          object: object
          status: status
      properties:
        id:
          type: string
        object:
          type: string
        created_at:
          type: integer
        updated_at:
          type: integer
        model:
          type: string
        fine_tuned_model:
          nullable: true
          type: string
        organization_id:
          type: string
        status:
          type: string
        hyperparams:
          type: object
        training_files:
          items:
            $ref: '#/components/schemas/OpenAIFile'
          type: array
        validation_files:
          items:
            $ref: '#/components/schemas/OpenAIFile'
          type: array
        result_files:
          items:
            $ref: '#/components/schemas/OpenAIFile'
          type: array
        events:
          items:
            $ref: '#/components/schemas/FineTuneEvent'
          type: array
      required:
      - created_at
      - fine_tuned_model
      - hyperparams
      - id
      - model
      - object
      - organization_id
      - result_files
      - status
      - training_files
      - updated_at
      - validation_files
      title: FineTune
    FineTuneEvent:
      example:
        level: level
        created_at: 1
        message: message
        object: object
      properties:
        object:
          type: string
        created_at:
          type: integer
        level:
          type: string
        message:
          type: string
      required:
      - created_at
      - level
      - message
      - object
      title: FineTuneEvent
    CreateCompletionRequest_model:
      description: |
        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
      oneOf:
      - type: string
      - enum:
        - text-davinci-003
        - text-davinci-002
        - text-davinci-001
        - code-davinci-002
        - text-curie-001
        - text-babbage-001
        - text-ada-001
        type: string
    CreateCompletionRequest_prompt:
      default: <|endoftext|>
      description: |
        The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.

        Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
      nullable: true
      oneOf:
      - default: ""
        example: This is a test.
        type: string
      - items:
          default: ""
          example: This is a test.
          type: string
        type: array
      - example: "[1212, 318, 257, 1332, 13]"
        items:
          type: integer
        minItems: 1
        type: array
      - example: "[[1212, 318, 257, 1332, 13]]"
        items:
          items:
            type: integer
          minItems: 1
          type: array
        minItems: 1
        type: array
    CreateCompletionRequest_stop:
      default: null
      description: |
        Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
      nullable: true
      oneOf:
      - default: <|endoftext|>
        example: |2+

        nullable: true
        type: string
      - items:
          example: "[\"\\n\"]"
          type: string
        maxItems: 4
        minItems: 1
        type: array
    CreateCompletionResponse_choices_inner_logprobs:
      example:
        top_logprobs:
        - "{}"
        - "{}"
        token_logprobs:
        - 1.4658129805029452
        - 1.4658129805029452
        tokens:
        - tokens
        - tokens
        text_offset:
        - 5
        - 5
      nullable: true
      properties:
        tokens:
          items:
            type: string
          type: array
        token_logprobs:
          items:
            type: number
          type: array
        top_logprobs:
          items:
            type: object
          type: array
        text_offset:
          items:
            type: integer
          type: array
      type: object
    CreateCompletionResponse_choices_inner:
      example:
        finish_reason: stop
        index: 6
        text: text
        logprobs:
          top_logprobs:
          - "{}"
          - "{}"
          token_logprobs:
          - 1.4658129805029452
          - 1.4658129805029452
          tokens:
          - tokens
          - tokens
          text_offset:
          - 5
          - 5
      properties:
        text:
          type: string
        index:
          type: integer
        logprobs:
          $ref: '#/components/schemas/CreateCompletionResponse_choices_inner_logprobs'
        finish_reason:
          enum:
          - stop
          - length
          type: string
      required:
      - finish_reason
      - index
      - logprobs
      - text
      type: object
    CreateCompletionResponse_usage:
      example:
        completion_tokens: 5
        prompt_tokens: 1
        total_tokens: 5
      properties:
        prompt_tokens:
          type: integer
        completion_tokens:
          type: integer
        total_tokens:
          type: integer
      required:
      - completion_tokens
      - prompt_tokens
      - total_tokens
      type: object
    ChatCompletionRequestMessage_function_call:
      description: "The name and arguments of a function that should be called, as\
        \ generated by the model."
      example:
        name: name
        arguments: arguments
      properties:
        name:
          description: The name of the function to call.
          type: string
        arguments:
          description: "The arguments to call the function with, as generated by the\
            \ model in JSON format. Note that the model does not always generate valid\
            \ JSON, and may hallucinate parameters not defined by your function schema.\
            \ Validate the arguments in your code before calling your function."
          type: string
      type: object
    CreateChatCompletionRequest_model:
      description: "ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility)\
        \ table for details on which models work with the Chat API."
      example: gpt-3.5-turbo
      oneOf:
      - type: string
      - enum:
        - gpt-4
        - gpt-4-0613
        - gpt-4-32k
        - gpt-4-32k-0613
        - gpt-3.5-turbo
        - gpt-3.5-turbo-16k
        - gpt-3.5-turbo-0613
        - gpt-3.5-turbo-16k-0613
        type: string
    CreateChatCompletionRequest_function_call_oneOf:
      properties:
        name:
          description: The name of the function to call.
          type: string
      required:
      - name
      type: object
    CreateChatCompletionRequest_function_call:
      description: "Controls how the model responds to function calls. \"none\" means\
        \ the model does not call a function, and responds to the end-user. \"auto\"\
        \ means the model can pick between an end-user or calling a function.  Specifying\
        \ a particular function via `{\"name\":\\ \"my_function\"}` forces the model\
        \ to call that function. \"none\" is the default when no functions are present.\
        \ \"auto\" is the default if functions are present."
      oneOf:
      - enum:
        - none
        - auto
        type: string
      - $ref: '#/components/schemas/CreateChatCompletionRequest_function_call_oneOf'
    CreateChatCompletionRequest_stop:
      default: null
      description: |
        Up to 4 sequences where the API will stop generating further tokens.
      oneOf:
      - nullable: true
        type: string
      - items:
          type: string
        maxItems: 4
        minItems: 1
        type: array
    CreateChatCompletionResponse_choices_inner:
      example:
        finish_reason: stop
        index: 6
        message:
          role: system
          function_call:
            name: name
            arguments: arguments
          content: content
      properties:
        index:
          type: integer
        message:
          $ref: '#/components/schemas/ChatCompletionResponseMessage'
        finish_reason:
          enum:
          - stop
          - length
          - function_call
          type: string
      type: object
    CreateChatCompletionStreamResponse_choices_inner:
      properties:
        index:
          type: integer
        delta:
          $ref: '#/components/schemas/ChatCompletionStreamResponseDelta'
        finish_reason:
          enum:
          - stop
          - length
          - function_call
          type: string
      type: object
    CreateEditRequest_model:
      description: ID of the model to use. You can use the `text-davinci-edit-001`
        or `code-davinci-edit-001` model with this endpoint.
      example: text-davinci-edit-001
      oneOf:
      - type: string
      - enum:
        - text-davinci-edit-001
        - code-davinci-edit-001
        type: string
      type: string
    CreateEditResponse_choices_inner:
      example:
        finish_reason: stop
        index: 6
        text: text
        logprobs:
          top_logprobs:
          - "{}"
          - "{}"
          token_logprobs:
          - 1.4658129805029452
          - 1.4658129805029452
          tokens:
          - tokens
          - tokens
          text_offset:
          - 5
          - 5
      properties:
        text:
          type: string
        index:
          type: integer
        logprobs:
          $ref: '#/components/schemas/CreateCompletionResponse_choices_inner_logprobs'
        finish_reason:
          enum:
          - stop
          - length
          type: string
      type: object
    ImagesResponse_data_inner:
      example:
        b64_json: b64_json
        url: url
      properties:
        url:
          type: string
        b64_json:
          type: string
      type: object
    CreateModerationRequest_input:
      description: The input text to classify
      oneOf:
      - default: ""
        example: I want to kill them.
        type: string
      - items:
          default: ""
          example: I want to kill them.
          type: string
        type: array
    CreateModerationRequest_model:
      default: text-moderation-latest
      description: |
        Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.

        The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.
      example: text-moderation-stable
      nullable: false
      oneOf:
      - type: string
      - enum:
        - text-moderation-latest
        - text-moderation-stable
        type: string
    CreateModerationResponse_results_inner_categories:
      example:
        hate/threatening: true
        sexual/minors: true
        hate: true
        self-harm: true
        sexual: true
        violence/graphic: true
        violence: true
      properties:
        hate:
          type: boolean
        hate/threatening:
          type: boolean
        self-harm:
          type: boolean
        sexual:
          type: boolean
        sexual/minors:
          type: boolean
        violence:
          type: boolean
        violence/graphic:
          type: boolean
      required:
      - hate
      - hate/threatening
      - self-harm
      - sexual
      - sexual/minors
      - violence
      - violence/graphic
      type: object
    CreateModerationResponse_results_inner_category_scores:
      example:
        hate/threatening: 6.027456183070403
        sexual/minors: 5.637376656633329
        hate: 0.8008281904610115
        self-harm: 1.4658129805029452
        sexual: 5.962133916683182
        violence/graphic: 7.061401241503109
        violence: 2.3021358869347655
      properties:
        hate:
          type: number
        hate/threatening:
          type: number
        self-harm:
          type: number
        sexual:
          type: number
        sexual/minors:
          type: number
        violence:
          type: number
        violence/graphic:
          type: number
      required:
      - hate
      - hate/threatening
      - self-harm
      - sexual
      - sexual/minors
      - violence
      - violence/graphic
      type: object
    CreateModerationResponse_results_inner:
      example:
        category_scores:
          hate/threatening: 6.027456183070403
          sexual/minors: 5.637376656633329
          hate: 0.8008281904610115
          self-harm: 1.4658129805029452
          sexual: 5.962133916683182
          violence/graphic: 7.061401241503109
          violence: 2.3021358869347655
        flagged: true
        categories:
          hate/threatening: true
          sexual/minors: true
          hate: true
          self-harm: true
          sexual: true
          violence/graphic: true
          violence: true
      properties:
        flagged:
          type: boolean
        categories:
          $ref: '#/components/schemas/CreateModerationResponse_results_inner_categories'
        category_scores:
          $ref: '#/components/schemas/CreateModerationResponse_results_inner_category_scores'
      required:
      - categories
      - category_scores
      - flagged
      type: object
    CreateFineTuneRequest_model:
      default: curie
      description: |
        The name of the base model to fine-tune. You can select one of "ada",
        "babbage", "curie", "davinci", or a fine-tuned model created after 2022-04-21.
        To learn more about these models, see the
        [Models](https://platform.openai.com/docs/models) documentation.
      example: curie
      nullable: true
      oneOf:
      - type: string
      - enum:
        - ada
        - babbage
        - curie
        - davinci
        type: string
    CreateEmbeddingRequest_model:
      description: |
        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
      example: text-embedding-ada-002
      oneOf:
      - type: string
      - enum:
        - text-embedding-ada-002
        type: string
    CreateEmbeddingRequest_input:
      description: |
        Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. Each input must not exceed the max input tokens for the model (8191 tokens for `text-embedding-ada-002`). [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.
      example: The quick brown fox jumped over the lazy dog
      oneOf:
      - default: ""
        example: This is a test.
        type: string
      - items:
          default: ""
          example: This is a test.
          type: string
        type: array
      - example: "[1212, 318, 257, 1332, 13]"
        items:
          type: integer
        minItems: 1
        type: array
      - example: "[[1212, 318, 257, 1332, 13]]"
        items:
          items:
            type: integer
          minItems: 1
          type: array
        minItems: 1
        type: array
    CreateEmbeddingResponse_data_inner:
      example:
        index: 0
        embedding:
        - 6.027456183070403
        - 6.027456183070403
        object: object
      properties:
        index:
          type: integer
        object:
          type: string
        embedding:
          items:
            type: number
          type: array
      required:
      - embedding
      - index
      - object
      type: object
    CreateEmbeddingResponse_usage:
      example:
        prompt_tokens: 1
        total_tokens: 5
      properties:
        prompt_tokens:
          type: integer
        total_tokens:
          type: integer
      required:
      - prompt_tokens
      - total_tokens
      type: object
    CreateTranscriptionRequest_model:
      description: |
        ID of the model to use. Only `whisper-1` is currently available.
      example: whisper-1
      oneOf:
      - type: string
      - enum:
        - whisper-1
        type: string
x-oaiMeta:
  groups:
  - id: models
    title: Models
    description: |
      List and describe the various models available in the API. You can refer to the [Models](/docs/models) documentation to understand what models are available and the differences between them.
  - id: chat
    title: Chat
    description: |
      Given a list of messages comprising a conversation, the model will return a response.
  - id: completions
    title: Completions
    description: |
      Given a prompt, the model will return one or more predicted completions, and can also return the probabilities of alternative tokens at each position.
  - id: edits
    title: Edits
    description: |
      Given a prompt and an instruction, the model will return an edited version of the prompt.
  - id: images
    title: Images
    description: |
      Given a prompt and/or an input image, the model will generate a new image.

      Related guide: [Image generation](/docs/guides/images)
  - id: embeddings
    title: Embeddings
    description: |
      Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.

      Related guide: [Embeddings](/docs/guides/embeddings)
  - id: audio
    title: Audio
    description: |
      Learn how to turn audio into text.

      Related guide: [Speech to text](/docs/guides/speech-to-text)
  - id: files
    title: Files
    description: |
      Files are used to upload documents that can be used with features like [Fine-tuning](/docs/api-reference/fine-tunes).
  - id: fine-tunes
    title: Fine-tunes
    description: |
      Manage fine-tuning jobs to tailor a model to your specific training data.

      Related guide: [Fine-tune models](/docs/guides/fine-tuning)
  - id: moderations
    title: Moderations
    description: |
      Given a input text, outputs if the model classifies it as violating OpenAI's content policy.

      Related guide: [Moderations](/docs/guides/moderation)

