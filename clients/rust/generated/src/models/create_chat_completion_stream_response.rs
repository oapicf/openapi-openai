/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// CreateChatCompletionStreamResponse : Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateChatCompletionStreamResponse {
    /// A unique identifier for the chat completion. Each chunk has the same ID.
    #[serde(rename = "id")]
    pub id: String,
    /// A list of chat completion choices. Can be more than one if `n` is greater than 1.
    #[serde(rename = "choices")]
    pub choices: Vec<models::CreateChatCompletionStreamResponseChoicesInner>,
    /// The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
    #[serde(rename = "created")]
    pub created: i32,
    /// The model to generate the completion.
    #[serde(rename = "model")]
    pub model: String,
    /// This fingerprint represents the backend configuration that the model runs with. Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism. 
    #[serde(rename = "system_fingerprint", skip_serializing_if = "Option::is_none")]
    pub system_fingerprint: Option<String>,
    /// The object type, which is always `chat.completion.chunk`.
    #[serde(rename = "object")]
    pub object: Object,
}

impl CreateChatCompletionStreamResponse {
    /// Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
    pub fn new(id: String, choices: Vec<models::CreateChatCompletionStreamResponseChoicesInner>, created: i32, model: String, object: Object) -> CreateChatCompletionStreamResponse {
        CreateChatCompletionStreamResponse {
            id,
            choices,
            created,
            model,
            system_fingerprint: None,
            object,
        }
    }
}
/// The object type, which is always `chat.completion.chunk`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "chat.completion.chunk")]
    ChatPeriodCompletionPeriodChunk,
}

impl Default for Object {
    fn default() -> Object {
        Self::ChatPeriodCompletionPeriodChunk
    }
}

