/*
 * OpenAI API
 *
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateCompletionResponseChoicesInner {
    #[serde(rename = "text")]
    pub text: String,
    #[serde(rename = "index")]
    pub index: i32,
    #[serde(rename = "logprobs", deserialize_with = "Option::deserialize")]
    pub logprobs: Option<Box<models::CreateCompletionResponseChoicesInnerLogprobs>>,
    #[serde(rename = "finish_reason")]
    pub finish_reason: FinishReason,
}

impl CreateCompletionResponseChoicesInner {
    pub fn new(text: String, index: i32, logprobs: Option<models::CreateCompletionResponseChoicesInnerLogprobs>, finish_reason: FinishReason) -> CreateCompletionResponseChoicesInner {
        CreateCompletionResponseChoicesInner {
            text,
            index,
            logprobs: if let Some(x) = logprobs {Some(Box::new(x))} else {None},
            finish_reason,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FinishReason {
    #[serde(rename = "stop")]
    Stop,
    #[serde(rename = "length")]
    Length,
}

impl Default for FinishReason {
    fn default() -> FinishReason {
        Self::Stop
    }
}

