/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateFineTuningJobRequest {
    #[serde(rename = "model")]
    pub model: Box<models::CreateFineTuningJobRequestModel>,
    /// The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
    #[serde(rename = "training_file")]
    pub training_file: String,
    #[serde(rename = "hyperparameters", skip_serializing_if = "Option::is_none")]
    pub hyperparameters: Option<Box<models::CreateFineTuningJobRequestHyperparameters>>,
    /// A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`. 
    #[serde(rename = "suffix", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub suffix: Option<Option<String>>,
    /// The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
    #[serde(rename = "validation_file", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub validation_file: Option<Option<String>>,
    /// A list of integrations to enable for your fine-tuning job.
    #[serde(rename = "integrations", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub integrations: Option<Option<Vec<models::CreateFineTuningJobRequestIntegrationsInner>>>,
    /// The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases. If a seed is not specified, one will be generated for you. 
    #[serde(rename = "seed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub seed: Option<Option<i32>>,
}

impl CreateFineTuningJobRequest {
    pub fn new(model: models::CreateFineTuningJobRequestModel, training_file: String) -> CreateFineTuningJobRequest {
        CreateFineTuningJobRequest {
            model: Box::new(model),
            training_file,
            hyperparameters: None,
            suffix: None,
            validation_file: None,
            integrations: None,
            seed: None,
        }
    }
}

