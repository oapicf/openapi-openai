/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MessageDeltaContentTextAnnotationsFileCitationObject : A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \"retrieval\" tool to search files.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MessageDeltaContentTextAnnotationsFileCitationObject {
    /// The index of the annotation in the text content part.
    #[serde(rename = "index")]
    pub index: i32,
    /// Always `file_citation`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The text in the message content that needs to be replaced.
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(rename = "file_citation", skip_serializing_if = "Option::is_none")]
    pub file_citation: Option<Box<models::MessageDeltaContentTextAnnotationsFileCitationObjectFileCitation>>,
    #[serde(rename = "start_index", skip_serializing_if = "Option::is_none")]
    pub start_index: Option<i32>,
    #[serde(rename = "end_index", skip_serializing_if = "Option::is_none")]
    pub end_index: Option<i32>,
}

impl MessageDeltaContentTextAnnotationsFileCitationObject {
    /// A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \"retrieval\" tool to search files.
    pub fn new(index: i32, r#type: Type) -> MessageDeltaContentTextAnnotationsFileCitationObject {
        MessageDeltaContentTextAnnotationsFileCitationObject {
            index,
            r#type,
            text: None,
            file_citation: None,
            start_index: None,
            end_index: None,
        }
    }
}
/// Always `file_citation`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "file_citation")]
    FileCitation,
}

impl Default for Type {
    fn default() -> Type {
        Self::FileCitation
    }
}

