/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MessageDeltaContentTextAnnotationsFilePathObject : A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MessageDeltaContentTextAnnotationsFilePathObject {
    /// The index of the annotation in the text content part.
    #[serde(rename = "index")]
    pub index: i32,
    /// Always `file_path`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The text in the message content that needs to be replaced.
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(rename = "file_path", skip_serializing_if = "Option::is_none")]
    pub file_path: Option<Box<models::MessageDeltaContentTextAnnotationsFilePathObjectFilePath>>,
    #[serde(rename = "start_index", skip_serializing_if = "Option::is_none")]
    pub start_index: Option<i32>,
    #[serde(rename = "end_index", skip_serializing_if = "Option::is_none")]
    pub end_index: Option<i32>,
}

impl MessageDeltaContentTextAnnotationsFilePathObject {
    /// A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
    pub fn new(index: i32, r#type: Type) -> MessageDeltaContentTextAnnotationsFilePathObject {
        MessageDeltaContentTextAnnotationsFilePathObject {
            index,
            r#type,
            text: None,
            file_path: None,
            start_index: None,
            end_index: None,
        }
    }
}
/// Always `file_path`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "file_path")]
    FilePath,
}

impl Default for Type {
    fn default() -> Type {
        Self::FilePath
    }
}

