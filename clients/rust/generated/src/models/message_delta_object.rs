/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// MessageDeltaObject : Represents a message delta i.e. any changed fields on a message during streaming. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MessageDeltaObject {
    /// The identifier of the message, which can be referenced in API endpoints.
    #[serde(rename = "id")]
    pub id: String,
    /// The object type, which is always `thread.message.delta`.
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "delta")]
    pub delta: Box<models::MessageDeltaObjectDelta>,
}

impl MessageDeltaObject {
    /// Represents a message delta i.e. any changed fields on a message during streaming. 
    pub fn new(id: String, object: Object, delta: models::MessageDeltaObjectDelta) -> MessageDeltaObject {
        MessageDeltaObject {
            id,
            object,
            delta: Box::new(delta),
        }
    }
}
/// The object type, which is always `thread.message.delta`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "thread.message.delta")]
    ThreadPeriodMessagePeriodDelta,
}

impl Default for Object {
    fn default() -> Object {
        Self::ThreadPeriodMessagePeriodDelta
    }
}

