/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MessageObject : Represents a message within a [thread](/docs/api-reference/threads).
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MessageObject {
    /// The identifier, which can be referenced in API endpoints.
    #[serde(rename = "id")]
    pub id: String,
    /// The object type, which is always `thread.message`.
    #[serde(rename = "object")]
    pub object: Object,
    /// The Unix timestamp (in seconds) for when the message was created.
    #[serde(rename = "created_at")]
    pub created_at: i32,
    /// The [thread](/docs/api-reference/threads) ID that this message belongs to.
    #[serde(rename = "thread_id")]
    pub thread_id: String,
    /// The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "incomplete_details", deserialize_with = "Option::deserialize")]
    pub incomplete_details: Option<Box<models::MessageObjectIncompleteDetails>>,
    /// The Unix timestamp (in seconds) for when the message was completed.
    #[serde(rename = "completed_at", deserialize_with = "Option::deserialize")]
    pub completed_at: Option<i32>,
    /// The Unix timestamp (in seconds) for when the message was marked as incomplete.
    #[serde(rename = "incomplete_at", deserialize_with = "Option::deserialize")]
    pub incomplete_at: Option<i32>,
    /// The entity that produced the message. One of `user` or `assistant`.
    #[serde(rename = "role")]
    pub role: Role,
    /// The content of the message in array of text and/or images.
    #[serde(rename = "content")]
    pub content: Vec<models::MessageObjectContentInner>,
    /// If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
    #[serde(rename = "assistant_id", deserialize_with = "Option::deserialize")]
    pub assistant_id: Option<String>,
    /// The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
    #[serde(rename = "run_id", deserialize_with = "Option::deserialize")]
    pub run_id: Option<String>,
    /// A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
    #[serde(rename = "file_ids")]
    pub file_ids: Vec<String>,
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    #[serde(rename = "metadata", deserialize_with = "Option::deserialize")]
    pub metadata: Option<serde_json::Value>,
}

impl MessageObject {
    /// Represents a message within a [thread](/docs/api-reference/threads).
    pub fn new(id: String, object: Object, created_at: i32, thread_id: String, status: Status, incomplete_details: Option<models::MessageObjectIncompleteDetails>, completed_at: Option<i32>, incomplete_at: Option<i32>, role: Role, content: Vec<models::MessageObjectContentInner>, assistant_id: Option<String>, run_id: Option<String>, file_ids: Vec<String>, metadata: Option<serde_json::Value>) -> MessageObject {
        MessageObject {
            id,
            object,
            created_at,
            thread_id,
            status,
            incomplete_details: if let Some(x) = incomplete_details {Some(Box::new(x))} else {None},
            completed_at,
            incomplete_at,
            role,
            content,
            assistant_id,
            run_id,
            file_ids,
            metadata,
        }
    }
}
/// The object type, which is always `thread.message`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "thread.message")]
    ThreadPeriodMessage,
}

impl Default for Object {
    fn default() -> Object {
        Self::ThreadPeriodMessage
    }
}
/// The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "incomplete")]
    Incomplete,
    #[serde(rename = "completed")]
    Completed,
}

impl Default for Status {
    fn default() -> Status {
        Self::InProgress
    }
}
/// The entity that produced the message. One of `user` or `assistant`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "user")]
    User,
    #[serde(rename = "assistant")]
    Assistant,
}

impl Default for Role {
    fn default() -> Role {
        Self::User
    }
}

