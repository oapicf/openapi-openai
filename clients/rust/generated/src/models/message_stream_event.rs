/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MessageStreamEvent {
    MessageStreamEventOneOf(Box<models::MessageStreamEventOneOf>),
    MessageStreamEventOneOf1(Box<models::MessageStreamEventOneOf1>),
    MessageStreamEventOneOf2(Box<models::MessageStreamEventOneOf2>),
    MessageStreamEventOneOf3(Box<models::MessageStreamEventOneOf3>),
    MessageStreamEventOneOf4(Box<models::MessageStreamEventOneOf4>),
}

impl Default for MessageStreamEvent {
    fn default() -> Self {
        Self::MessageStreamEventOneOf(Default::default())
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Event {
    #[serde(rename = "thread.message.incomplete")]
    ThreadPeriodMessagePeriodIncomplete,
}

impl Default for Event {
    fn default() -> Event {
        Self::ThreadPeriodMessagePeriodIncomplete
    }
}

