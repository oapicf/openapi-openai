/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OpenAiFile : The `File` object represents a document that has been uploaded to OpenAI.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenAiFile {
    /// The file identifier, which can be referenced in the API endpoints.
    #[serde(rename = "id")]
    pub id: String,
    /// The size of the file, in bytes.
    #[serde(rename = "bytes")]
    pub bytes: i32,
    /// The Unix timestamp (in seconds) for when the file was created.
    #[serde(rename = "created_at")]
    pub created_at: i32,
    /// The name of the file.
    #[serde(rename = "filename")]
    pub filename: String,
    /// The object type, which is always `file`.
    #[serde(rename = "object")]
    pub object: Object,
    /// The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`, `assistants`, and `assistants_output`.
    #[serde(rename = "purpose")]
    pub purpose: Purpose,
    /// Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
    #[serde(rename = "status")]
    pub status: Status,
    /// Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
    #[serde(rename = "status_details", skip_serializing_if = "Option::is_none")]
    pub status_details: Option<String>,
}

impl OpenAiFile {
    /// The `File` object represents a document that has been uploaded to OpenAI.
    pub fn new(id: String, bytes: i32, created_at: i32, filename: String, object: Object, purpose: Purpose, status: Status) -> OpenAiFile {
        OpenAiFile {
            id,
            bytes,
            created_at,
            filename,
            object,
            purpose,
            status,
            status_details: None,
        }
    }
}
/// The object type, which is always `file`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "file")]
    File,
}

impl Default for Object {
    fn default() -> Object {
        Self::File
    }
}
/// The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`, `assistants`, and `assistants_output`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Purpose {
    #[serde(rename = "fine-tune")]
    FineTune,
    #[serde(rename = "fine-tune-results")]
    FineTuneResults,
    #[serde(rename = "assistants")]
    Assistants,
    #[serde(rename = "assistants_output")]
    AssistantsOutput,
}

impl Default for Purpose {
    fn default() -> Purpose {
        Self::FineTune
    }
}
/// Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "uploaded")]
    Uploaded,
    #[serde(rename = "processed")]
    Processed,
    #[serde(rename = "error")]
    Error,
}

impl Default for Status {
    fn default() -> Status {
        Self::Uploaded
    }
}

