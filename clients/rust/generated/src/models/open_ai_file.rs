/*
 * OpenAI API
 *
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenAiFile {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "object")]
    pub object: String,
    #[serde(rename = "bytes")]
    pub bytes: i32,
    #[serde(rename = "created_at")]
    pub created_at: i32,
    #[serde(rename = "filename")]
    pub filename: String,
    #[serde(rename = "purpose")]
    pub purpose: String,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "status_details", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub status_details: Option<Option<serde_json::Value>>,
}

impl OpenAiFile {
    pub fn new(id: String, object: String, bytes: i32, created_at: i32, filename: String, purpose: String) -> OpenAiFile {
        OpenAiFile {
            id,
            object,
            bytes,
            created_at,
            filename,
            purpose,
            status: None,
            status_details: None,
        }
    }
}

