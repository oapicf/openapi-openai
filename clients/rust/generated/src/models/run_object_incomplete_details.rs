/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RunObjectIncompleteDetails : Details on why the run is incomplete. Will be `null` if the run is not incomplete.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunObjectIncompleteDetails {
    /// The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Reason>,
}

impl RunObjectIncompleteDetails {
    /// Details on why the run is incomplete. Will be `null` if the run is not incomplete.
    pub fn new() -> RunObjectIncompleteDetails {
        RunObjectIncompleteDetails {
            reason: None,
        }
    }
}
/// The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "max_completion_tokens")]
    CompletionTokens,
    #[serde(rename = "max_prompt_tokens")]
    PromptTokens,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::CompletionTokens
    }
}

