/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunStepDeltaStepDetailsToolCallsCodeOutputImageObject {
    /// The index of the output in the outputs array.
    #[serde(rename = "index")]
    pub index: i32,
    /// Always `image`.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "image", skip_serializing_if = "Option::is_none")]
    pub image: Option<Box<models::RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImage>>,
}

impl RunStepDeltaStepDetailsToolCallsCodeOutputImageObject {
    pub fn new(index: i32, r#type: Type) -> RunStepDeltaStepDetailsToolCallsCodeOutputImageObject {
        RunStepDeltaStepDetailsToolCallsCodeOutputImageObject {
            index,
            r#type,
            image: None,
        }
    }
}
/// Always `image`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "image")]
    Image,
}

impl Default for Type {
    fn default() -> Type {
        Self::Image
    }
}

