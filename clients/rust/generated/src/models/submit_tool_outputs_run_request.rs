/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubmitToolOutputsRunRequest {
    /// A list of tools for which the outputs are being submitted.
    #[serde(rename = "tool_outputs")]
    pub tool_outputs: Vec<models::SubmitToolOutputsRunRequestToolOutputsInner>,
    /// If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message. 
    #[serde(rename = "stream", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stream: Option<Option<bool>>,
}

impl SubmitToolOutputsRunRequest {
    pub fn new(tool_outputs: Vec<models::SubmitToolOutputsRunRequestToolOutputsInner>) -> SubmitToolOutputsRunRequest {
        SubmitToolOutputsRunRequest {
            tool_outputs,
            stream: None,
        }
    }
}

