/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.AssistantFileObject
import org.openapitools.client.model.AssistantObject
import org.openapitools.client.model.CreateAssistantFileRequest
import org.openapitools.client.model.CreateAssistantRequest
import org.openapitools.client.model.CreateMessageRequest
import org.openapitools.client.model.CreateRunRequest
import org.openapitools.client.model.CreateThreadAndRunRequest
import org.openapitools.client.model.CreateThreadRequest
import org.openapitools.client.model.DeleteAssistantFileResponse
import org.openapitools.client.model.DeleteAssistantResponse
import org.openapitools.client.model.DeleteThreadResponse
import org.openapitools.client.model.ListAssistantFilesResponse
import org.openapitools.client.model.ListAssistantsResponse
import org.openapitools.client.model.ListMessageFilesResponse
import org.openapitools.client.model.ListMessagesResponse
import org.openapitools.client.model.ListRunStepsResponse
import org.openapitools.client.model.ListRunsResponse
import org.openapitools.client.model.MessageFileObject
import org.openapitools.client.model.MessageObject
import org.openapitools.client.model.ModifyAssistantRequest
import org.openapitools.client.model.ModifyMessageRequest
import org.openapitools.client.model.ModifyRunRequest
import org.openapitools.client.model.ModifyThreadRequest
import org.openapitools.client.model.RunObject
import org.openapitools.client.model.RunStepObject
import org.openapitools.client.model.SubmitToolOutputsRunRequest
import org.openapitools.client.model.ThreadObject
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object AssistantsApi {

  def apply(baseUrl: String = "https://api.openai.com/v1") = new AssistantsApi(baseUrl)
}

class AssistantsApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : RunObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread to which this run belongs.
   * @param runId The ID of the run to cancel.
   */
  def cancelRun(threadId: String, runId: String)(implicit bearerToken: BearerToken): ApiRequest[RunObject] =
    ApiRequest[RunObject](ApiMethods.POST, baseUrl, "/threads/{thread_id}/runs/{run_id}/cancel", "application/json")
      .withCredentials(bearerToken).withPathParam("thread_id", threadId)
      .withPathParam("run_id", runId)
      .withSuccessResponse[RunObject](200)
      

  /**
   * Expected answers:
   *   code 200 : AssistantObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param createAssistantRequest 
   */
  def createAssistant(createAssistantRequest: CreateAssistantRequest)(implicit bearerToken: BearerToken): ApiRequest[AssistantObject] =
    ApiRequest[AssistantObject](ApiMethods.POST, baseUrl, "/assistants", "application/json")
      .withCredentials(bearerToken).withBody(createAssistantRequest)
      .withSuccessResponse[AssistantObject](200)
      

  /**
   * Expected answers:
   *   code 200 : AssistantFileObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param assistantId The ID of the assistant for which to create a File. 
   * @param createAssistantFileRequest 
   */
  def createAssistantFile(assistantId: String, createAssistantFileRequest: CreateAssistantFileRequest)(implicit bearerToken: BearerToken): ApiRequest[AssistantFileObject] =
    ApiRequest[AssistantFileObject](ApiMethods.POST, baseUrl, "/assistants/{assistant_id}/files", "application/json")
      .withCredentials(bearerToken).withBody(createAssistantFileRequest)
      .withPathParam("assistant_id", assistantId)
      .withSuccessResponse[AssistantFileObject](200)
      

  /**
   * Expected answers:
   *   code 200 : MessageObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) to create a message for.
   * @param createMessageRequest 
   */
  def createMessage(threadId: String, createMessageRequest: CreateMessageRequest)(implicit bearerToken: BearerToken): ApiRequest[MessageObject] =
    ApiRequest[MessageObject](ApiMethods.POST, baseUrl, "/threads/{thread_id}/messages", "application/json")
      .withCredentials(bearerToken).withBody(createMessageRequest)
      .withPathParam("thread_id", threadId)
      .withSuccessResponse[MessageObject](200)
      

  /**
   * Expected answers:
   *   code 200 : RunObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread to run.
   * @param createRunRequest 
   */
  def createRun(threadId: String, createRunRequest: CreateRunRequest)(implicit bearerToken: BearerToken): ApiRequest[RunObject] =
    ApiRequest[RunObject](ApiMethods.POST, baseUrl, "/threads/{thread_id}/runs", "application/json")
      .withCredentials(bearerToken).withBody(createRunRequest)
      .withPathParam("thread_id", threadId)
      .withSuccessResponse[RunObject](200)
      

  /**
   * Expected answers:
   *   code 200 : ThreadObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param createThreadRequest 
   */
  def createThread(createThreadRequest: Option[CreateThreadRequest] = None)(implicit bearerToken: BearerToken): ApiRequest[ThreadObject] =
    ApiRequest[ThreadObject](ApiMethods.POST, baseUrl, "/threads", "application/json")
      .withCredentials(bearerToken).withBody(createThreadRequest)
      .withSuccessResponse[ThreadObject](200)
      

  /**
   * Expected answers:
   *   code 200 : RunObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param createThreadAndRunRequest 
   */
  def createThreadAndRun(createThreadAndRunRequest: CreateThreadAndRunRequest)(implicit bearerToken: BearerToken): ApiRequest[RunObject] =
    ApiRequest[RunObject](ApiMethods.POST, baseUrl, "/threads/runs", "application/json")
      .withCredentials(bearerToken).withBody(createThreadAndRunRequest)
      .withSuccessResponse[RunObject](200)
      

  /**
   * Expected answers:
   *   code 200 : DeleteAssistantResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param assistantId The ID of the assistant to delete.
   */
  def deleteAssistant(assistantId: String)(implicit bearerToken: BearerToken): ApiRequest[DeleteAssistantResponse] =
    ApiRequest[DeleteAssistantResponse](ApiMethods.DELETE, baseUrl, "/assistants/{assistant_id}", "application/json")
      .withCredentials(bearerToken).withPathParam("assistant_id", assistantId)
      .withSuccessResponse[DeleteAssistantResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : DeleteAssistantFileResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param assistantId The ID of the assistant that the file belongs to.
   * @param fileId The ID of the file to delete.
   */
  def deleteAssistantFile(assistantId: String, fileId: String)(implicit bearerToken: BearerToken): ApiRequest[DeleteAssistantFileResponse] =
    ApiRequest[DeleteAssistantFileResponse](ApiMethods.DELETE, baseUrl, "/assistants/{assistant_id}/files/{file_id}", "application/json")
      .withCredentials(bearerToken).withPathParam("assistant_id", assistantId)
      .withPathParam("file_id", fileId)
      .withSuccessResponse[DeleteAssistantFileResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : DeleteThreadResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread to delete.
   */
  def deleteThread(threadId: String)(implicit bearerToken: BearerToken): ApiRequest[DeleteThreadResponse] =
    ApiRequest[DeleteThreadResponse](ApiMethods.DELETE, baseUrl, "/threads/{thread_id}", "application/json")
      .withCredentials(bearerToken).withPathParam("thread_id", threadId)
      .withSuccessResponse[DeleteThreadResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : AssistantObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param assistantId The ID of the assistant to retrieve.
   */
  def getAssistant(assistantId: String)(implicit bearerToken: BearerToken): ApiRequest[AssistantObject] =
    ApiRequest[AssistantObject](ApiMethods.GET, baseUrl, "/assistants/{assistant_id}", "application/json")
      .withCredentials(bearerToken).withPathParam("assistant_id", assistantId)
      .withSuccessResponse[AssistantObject](200)
      

  /**
   * Expected answers:
   *   code 200 : AssistantFileObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param assistantId The ID of the assistant who the file belongs to.
   * @param fileId The ID of the file we're getting.
   */
  def getAssistantFile(assistantId: String, fileId: String)(implicit bearerToken: BearerToken): ApiRequest[AssistantFileObject] =
    ApiRequest[AssistantFileObject](ApiMethods.GET, baseUrl, "/assistants/{assistant_id}/files/{file_id}", "application/json")
      .withCredentials(bearerToken).withPathParam("assistant_id", assistantId)
      .withPathParam("file_id", fileId)
      .withSuccessResponse[AssistantFileObject](200)
      

  /**
   * Expected answers:
   *   code 200 : MessageObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
   * @param messageId The ID of the message to retrieve.
   */
  def getMessage(threadId: String, messageId: String)(implicit bearerToken: BearerToken): ApiRequest[MessageObject] =
    ApiRequest[MessageObject](ApiMethods.GET, baseUrl, "/threads/{thread_id}/messages/{message_id}", "application/json")
      .withCredentials(bearerToken).withPathParam("thread_id", threadId)
      .withPathParam("message_id", messageId)
      .withSuccessResponse[MessageObject](200)
      

  /**
   * Expected answers:
   *   code 200 : MessageFileObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread to which the message and File belong.
   * @param messageId The ID of the message the file belongs to.
   * @param fileId The ID of the file being retrieved.
   */
  def getMessageFile(threadId: String, messageId: String, fileId: String)(implicit bearerToken: BearerToken): ApiRequest[MessageFileObject] =
    ApiRequest[MessageFileObject](ApiMethods.GET, baseUrl, "/threads/{thread_id}/messages/{message_id}/files/{file_id}", "application/json")
      .withCredentials(bearerToken).withPathParam("thread_id", threadId)
      .withPathParam("message_id", messageId)
      .withPathParam("file_id", fileId)
      .withSuccessResponse[MessageFileObject](200)
      

  /**
   * Expected answers:
   *   code 200 : RunObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
   * @param runId The ID of the run to retrieve.
   */
  def getRun(threadId: String, runId: String)(implicit bearerToken: BearerToken): ApiRequest[RunObject] =
    ApiRequest[RunObject](ApiMethods.GET, baseUrl, "/threads/{thread_id}/runs/{run_id}", "application/json")
      .withCredentials(bearerToken).withPathParam("thread_id", threadId)
      .withPathParam("run_id", runId)
      .withSuccessResponse[RunObject](200)
      

  /**
   * Expected answers:
   *   code 200 : RunStepObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread to which the run and run step belongs.
   * @param runId The ID of the run to which the run step belongs.
   * @param stepId The ID of the run step to retrieve.
   */
  def getRunStep(threadId: String, runId: String, stepId: String)(implicit bearerToken: BearerToken): ApiRequest[RunStepObject] =
    ApiRequest[RunStepObject](ApiMethods.GET, baseUrl, "/threads/{thread_id}/runs/{run_id}/steps/{step_id}", "application/json")
      .withCredentials(bearerToken).withPathParam("thread_id", threadId)
      .withPathParam("run_id", runId)
      .withPathParam("step_id", stepId)
      .withSuccessResponse[RunStepObject](200)
      

  /**
   * Expected answers:
   *   code 200 : ThreadObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread to retrieve.
   */
  def getThread(threadId: String)(implicit bearerToken: BearerToken): ApiRequest[ThreadObject] =
    ApiRequest[ThreadObject](ApiMethods.GET, baseUrl, "/threads/{thread_id}", "application/json")
      .withCredentials(bearerToken).withPathParam("thread_id", threadId)
      .withSuccessResponse[ThreadObject](200)
      

  /**
   * Expected answers:
   *   code 200 : ListAssistantFilesResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param assistantId The ID of the assistant the file belongs to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
   * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
   * @param before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
   */
  def listAssistantFiles(assistantId: String, limit: Option[Int] = None, order: Option[String] = None, after: Option[String] = None, before: Option[String] = None)(implicit bearerToken: BearerToken): ApiRequest[ListAssistantFilesResponse] =
    ApiRequest[ListAssistantFilesResponse](ApiMethods.GET, baseUrl, "/assistants/{assistant_id}/files", "application/json")
      .withCredentials(bearerToken).withQueryParam("limit", limit)
      .withQueryParam("order", order)
      .withQueryParam("after", after)
      .withQueryParam("before", before)
      .withPathParam("assistant_id", assistantId)
      .withSuccessResponse[ListAssistantFilesResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : ListAssistantsResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
   * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
   * @param before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
   */
  def listAssistants(limit: Option[Int] = None, order: Option[String] = None, after: Option[String] = None, before: Option[String] = None)(implicit bearerToken: BearerToken): ApiRequest[ListAssistantsResponse] =
    ApiRequest[ListAssistantsResponse](ApiMethods.GET, baseUrl, "/assistants", "application/json")
      .withCredentials(bearerToken).withQueryParam("limit", limit)
      .withQueryParam("order", order)
      .withQueryParam("after", after)
      .withQueryParam("before", before)
      .withSuccessResponse[ListAssistantsResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : ListMessageFilesResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread that the message and files belong to.
   * @param messageId The ID of the message that the files belongs to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
   * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
   * @param before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
   */
  def listMessageFiles(threadId: String, messageId: String, limit: Option[Int] = None, order: Option[String] = None, after: Option[String] = None, before: Option[String] = None)(implicit bearerToken: BearerToken): ApiRequest[ListMessageFilesResponse] =
    ApiRequest[ListMessageFilesResponse](ApiMethods.GET, baseUrl, "/threads/{thread_id}/messages/{message_id}/files", "application/json")
      .withCredentials(bearerToken).withQueryParam("limit", limit)
      .withQueryParam("order", order)
      .withQueryParam("after", after)
      .withQueryParam("before", before)
      .withPathParam("thread_id", threadId)
      .withPathParam("message_id", messageId)
      .withSuccessResponse[ListMessageFilesResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : ListMessagesResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) the messages belong to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
   * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
   * @param before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
   * @param runId Filter messages by the run ID that generated them. 
   */
  def listMessages(threadId: String, limit: Option[Int] = None, order: Option[String] = None, after: Option[String] = None, before: Option[String] = None, runId: Option[String] = None)(implicit bearerToken: BearerToken): ApiRequest[ListMessagesResponse] =
    ApiRequest[ListMessagesResponse](ApiMethods.GET, baseUrl, "/threads/{thread_id}/messages", "application/json")
      .withCredentials(bearerToken).withQueryParam("limit", limit)
      .withQueryParam("order", order)
      .withQueryParam("after", after)
      .withQueryParam("before", before)
      .withQueryParam("run_id", runId)
      .withPathParam("thread_id", threadId)
      .withSuccessResponse[ListMessagesResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : ListRunStepsResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread the run and run steps belong to.
   * @param runId The ID of the run the run steps belong to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
   * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
   * @param before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
   */
  def listRunSteps(threadId: String, runId: String, limit: Option[Int] = None, order: Option[String] = None, after: Option[String] = None, before: Option[String] = None)(implicit bearerToken: BearerToken): ApiRequest[ListRunStepsResponse] =
    ApiRequest[ListRunStepsResponse](ApiMethods.GET, baseUrl, "/threads/{thread_id}/runs/{run_id}/steps", "application/json")
      .withCredentials(bearerToken).withQueryParam("limit", limit)
      .withQueryParam("order", order)
      .withQueryParam("after", after)
      .withQueryParam("before", before)
      .withPathParam("thread_id", threadId)
      .withPathParam("run_id", runId)
      .withSuccessResponse[ListRunStepsResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : ListRunsResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread the run belongs to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
   * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
   * @param before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
   */
  def listRuns(threadId: String, limit: Option[Int] = None, order: Option[String] = None, after: Option[String] = None, before: Option[String] = None)(implicit bearerToken: BearerToken): ApiRequest[ListRunsResponse] =
    ApiRequest[ListRunsResponse](ApiMethods.GET, baseUrl, "/threads/{thread_id}/runs", "application/json")
      .withCredentials(bearerToken).withQueryParam("limit", limit)
      .withQueryParam("order", order)
      .withQueryParam("after", after)
      .withQueryParam("before", before)
      .withPathParam("thread_id", threadId)
      .withSuccessResponse[ListRunsResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : AssistantObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param assistantId The ID of the assistant to modify.
   * @param modifyAssistantRequest 
   */
  def modifyAssistant(assistantId: String, modifyAssistantRequest: ModifyAssistantRequest)(implicit bearerToken: BearerToken): ApiRequest[AssistantObject] =
    ApiRequest[AssistantObject](ApiMethods.POST, baseUrl, "/assistants/{assistant_id}", "application/json")
      .withCredentials(bearerToken).withBody(modifyAssistantRequest)
      .withPathParam("assistant_id", assistantId)
      .withSuccessResponse[AssistantObject](200)
      

  /**
   * Expected answers:
   *   code 200 : MessageObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread to which this message belongs.
   * @param messageId The ID of the message to modify.
   * @param modifyMessageRequest 
   */
  def modifyMessage(threadId: String, messageId: String, modifyMessageRequest: ModifyMessageRequest)(implicit bearerToken: BearerToken): ApiRequest[MessageObject] =
    ApiRequest[MessageObject](ApiMethods.POST, baseUrl, "/threads/{thread_id}/messages/{message_id}", "application/json")
      .withCredentials(bearerToken).withBody(modifyMessageRequest)
      .withPathParam("thread_id", threadId)
      .withPathParam("message_id", messageId)
      .withSuccessResponse[MessageObject](200)
      

  /**
   * Expected answers:
   *   code 200 : RunObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
   * @param runId The ID of the run to modify.
   * @param modifyRunRequest 
   */
  def modifyRun(threadId: String, runId: String, modifyRunRequest: ModifyRunRequest)(implicit bearerToken: BearerToken): ApiRequest[RunObject] =
    ApiRequest[RunObject](ApiMethods.POST, baseUrl, "/threads/{thread_id}/runs/{run_id}", "application/json")
      .withCredentials(bearerToken).withBody(modifyRunRequest)
      .withPathParam("thread_id", threadId)
      .withPathParam("run_id", runId)
      .withSuccessResponse[RunObject](200)
      

  /**
   * Expected answers:
   *   code 200 : ThreadObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread to modify. Only the `metadata` can be modified.
   * @param modifyThreadRequest 
   */
  def modifyThread(threadId: String, modifyThreadRequest: ModifyThreadRequest)(implicit bearerToken: BearerToken): ApiRequest[ThreadObject] =
    ApiRequest[ThreadObject](ApiMethods.POST, baseUrl, "/threads/{thread_id}", "application/json")
      .withCredentials(bearerToken).withBody(modifyThreadRequest)
      .withPathParam("thread_id", threadId)
      .withSuccessResponse[ThreadObject](200)
      

  /**
   * Expected answers:
   *   code 200 : RunObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
   * @param runId The ID of the run that requires the tool output submission.
   * @param submitToolOutputsRunRequest 
   */
  def submitToolOuputsToRun(threadId: String, runId: String, submitToolOutputsRunRequest: SubmitToolOutputsRunRequest)(implicit bearerToken: BearerToken): ApiRequest[RunObject] =
    ApiRequest[RunObject](ApiMethods.POST, baseUrl, "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs", "application/json")
      .withCredentials(bearerToken).withBody(submitToolOutputsRunRequest)
      .withPathParam("thread_id", threadId)
      .withPathParam("run_id", runId)
      .withSuccessResponse[RunObject](200)
      



}

