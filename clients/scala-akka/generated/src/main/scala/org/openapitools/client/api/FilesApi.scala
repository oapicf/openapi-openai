/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.DeleteFileResponse
import java.io.File
import org.openapitools.client.model.ListFilesResponse
import org.openapitools.client.model.OpenAIFile
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object FilesApi {

  def apply(baseUrl: String = "https://api.openai.com/v1") = new FilesApi(baseUrl)
}

class FilesApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : OpenAIFile (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param file The File object (not file name) to be uploaded. 
   * @param purpose The intended purpose of the uploaded file.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tuning) and \\\"assistants\\\" for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning. 
   */
  def createFile(file: File, purpose: String)(implicit bearerToken: BearerToken): ApiRequest[OpenAIFile] =
    ApiRequest[OpenAIFile](ApiMethods.POST, baseUrl, "/files", "multipart/form-data")
      .withCredentials(bearerToken).withFormParam("file", file)
      .withFormParam("purpose", purpose)
      .withSuccessResponse[OpenAIFile](200)
      

  /**
   * Expected answers:
   *   code 200 : DeleteFileResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param fileId The ID of the file to use for this request.
   */
  def deleteFile(fileId: String)(implicit bearerToken: BearerToken): ApiRequest[DeleteFileResponse] =
    ApiRequest[DeleteFileResponse](ApiMethods.DELETE, baseUrl, "/files/{file_id}", "application/json")
      .withCredentials(bearerToken).withPathParam("file_id", fileId)
      .withSuccessResponse[DeleteFileResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : String (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param fileId The ID of the file to use for this request.
   */
  def downloadFile(fileId: String)(implicit bearerToken: BearerToken): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/files/{file_id}/content", "application/json")
      .withCredentials(bearerToken).withPathParam("file_id", fileId)
      .withSuccessResponse[String](200)
      

  /**
   * Expected answers:
   *   code 200 : ListFilesResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param purpose Only return files with the given purpose.
   */
  def listFiles(purpose: Option[String] = None)(implicit bearerToken: BearerToken): ApiRequest[ListFilesResponse] =
    ApiRequest[ListFilesResponse](ApiMethods.GET, baseUrl, "/files", "application/json")
      .withCredentials(bearerToken).withQueryParam("purpose", purpose)
      .withSuccessResponse[ListFilesResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : OpenAIFile (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param fileId The ID of the file to use for this request.
   */
  def retrieveFile(fileId: String)(implicit bearerToken: BearerToken): ApiRequest[OpenAIFile] =
    ApiRequest[OpenAIFile](ApiMethods.GET, baseUrl, "/files/{file_id}", "application/json")
      .withCredentials(bearerToken).withPathParam("file_id", fileId)
      .withSuccessResponse[OpenAIFile](200)
      



}

