/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.CreateFineTuningJobRequest
import org.openapitools.client.model.FineTuningJob
import org.openapitools.client.model.ListFineTuningJobCheckpointsResponse
import org.openapitools.client.model.ListFineTuningJobEventsResponse
import org.openapitools.client.model.ListPaginatedFineTuningJobsResponse
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object FineTuningApi {

  def apply(baseUrl: String = "https://api.openai.com/v1") = new FineTuningApi(baseUrl)
}

class FineTuningApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : FineTuningJob (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param fineTuningJobId The ID of the fine-tuning job to cancel. 
   */
  def cancelFineTuningJob(fineTuningJobId: String)(implicit bearerToken: BearerToken): ApiRequest[FineTuningJob] =
    ApiRequest[FineTuningJob](ApiMethods.POST, baseUrl, "/fine_tuning/jobs/{fine_tuning_job_id}/cancel", "application/json")
      .withCredentials(bearerToken).withPathParam("fine_tuning_job_id", fineTuningJobId)
      .withSuccessResponse[FineTuningJob](200)
      

  /**
   * Expected answers:
   *   code 200 : FineTuningJob (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param createFineTuningJobRequest 
   */
  def createFineTuningJob(createFineTuningJobRequest: CreateFineTuningJobRequest)(implicit bearerToken: BearerToken): ApiRequest[FineTuningJob] =
    ApiRequest[FineTuningJob](ApiMethods.POST, baseUrl, "/fine_tuning/jobs", "application/json")
      .withCredentials(bearerToken).withBody(createFineTuningJobRequest)
      .withSuccessResponse[FineTuningJob](200)
      

  /**
   * Expected answers:
   *   code 200 : ListFineTuningJobEventsResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param fineTuningJobId The ID of the fine-tuning job to get events for. 
   * @param after Identifier for the last event from the previous pagination request.
   * @param limit Number of events to retrieve.
   */
  def listFineTuningEvents(fineTuningJobId: String, after: Option[String] = None, limit: Option[Int] = None)(implicit bearerToken: BearerToken): ApiRequest[ListFineTuningJobEventsResponse] =
    ApiRequest[ListFineTuningJobEventsResponse](ApiMethods.GET, baseUrl, "/fine_tuning/jobs/{fine_tuning_job_id}/events", "application/json")
      .withCredentials(bearerToken).withQueryParam("after", after)
      .withQueryParam("limit", limit)
      .withPathParam("fine_tuning_job_id", fineTuningJobId)
      .withSuccessResponse[ListFineTuningJobEventsResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : ListFineTuningJobCheckpointsResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param fineTuningJobId The ID of the fine-tuning job to get checkpoints for. 
   * @param after Identifier for the last checkpoint ID from the previous pagination request.
   * @param limit Number of checkpoints to retrieve.
   */
  def listFineTuningJobCheckpoints(fineTuningJobId: String, after: Option[String] = None, limit: Option[Int] = None)(implicit bearerToken: BearerToken): ApiRequest[ListFineTuningJobCheckpointsResponse] =
    ApiRequest[ListFineTuningJobCheckpointsResponse](ApiMethods.GET, baseUrl, "/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints", "application/json")
      .withCredentials(bearerToken).withQueryParam("after", after)
      .withQueryParam("limit", limit)
      .withPathParam("fine_tuning_job_id", fineTuningJobId)
      .withSuccessResponse[ListFineTuningJobCheckpointsResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : ListPaginatedFineTuningJobsResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param after Identifier for the last job from the previous pagination request.
   * @param limit Number of fine-tuning jobs to retrieve.
   */
  def listPaginatedFineTuningJobs(after: Option[String] = None, limit: Option[Int] = None)(implicit bearerToken: BearerToken): ApiRequest[ListPaginatedFineTuningJobsResponse] =
    ApiRequest[ListPaginatedFineTuningJobsResponse](ApiMethods.GET, baseUrl, "/fine_tuning/jobs", "application/json")
      .withCredentials(bearerToken).withQueryParam("after", after)
      .withQueryParam("limit", limit)
      .withSuccessResponse[ListPaginatedFineTuningJobsResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : FineTuningJob (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param fineTuningJobId The ID of the fine-tuning job. 
   */
  def retrieveFineTuningJob(fineTuningJobId: String)(implicit bearerToken: BearerToken): ApiRequest[FineTuningJob] =
    ApiRequest[FineTuningJob](ApiMethods.GET, baseUrl, "/fine_tuning/jobs/{fine_tuning_job_id}", "application/json")
      .withCredentials(bearerToken).withPathParam("fine_tuning_job_id", fineTuningJobId)
      .withSuccessResponse[FineTuningJob](200)
      



}

