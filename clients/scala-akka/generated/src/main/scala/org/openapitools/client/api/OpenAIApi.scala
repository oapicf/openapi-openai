/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import java.math.BigDecimal
import org.openapitools.client.model.CreateChatCompletionRequest
import org.openapitools.client.model.CreateChatCompletionResponse
import org.openapitools.client.model.CreateCompletionRequest
import org.openapitools.client.model.CreateCompletionResponse
import org.openapitools.client.model.CreateEditRequest
import org.openapitools.client.model.CreateEditResponse
import org.openapitools.client.model.CreateEmbeddingRequest
import org.openapitools.client.model.CreateEmbeddingResponse
import org.openapitools.client.model.CreateFineTuneRequest
import org.openapitools.client.model.CreateImageRequest
import org.openapitools.client.model.CreateModerationRequest
import org.openapitools.client.model.CreateModerationResponse
import org.openapitools.client.model.CreateTranscriptionRequestModel
import org.openapitools.client.model.CreateTranscriptionResponse
import org.openapitools.client.model.CreateTranslationResponse
import org.openapitools.client.model.DeleteFileResponse
import org.openapitools.client.model.DeleteModelResponse
import java.io.File
import org.openapitools.client.model.FineTune
import org.openapitools.client.model.ImagesResponse
import org.openapitools.client.model.ListFilesResponse
import org.openapitools.client.model.ListFineTuneEventsResponse
import org.openapitools.client.model.ListFineTunesResponse
import org.openapitools.client.model.ListModelsResponse
import org.openapitools.client.model.Model
import org.openapitools.client.model.OpenAIFile
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object OpenAIApi {

  def apply(baseUrl: String = "https://api.openai.com/v1") = new OpenAIApi(baseUrl)
}

class OpenAIApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : FineTune (OK)
   * 
   * @param fineTuneId The ID of the fine-tune job to cancel 
   */
  def cancelFineTune(fineTuneId: String): ApiRequest[FineTune] =
    ApiRequest[FineTune](ApiMethods.POST, baseUrl, "/fine-tunes/{fine_tune_id}/cancel", "application/json")
      .withPathParam("fine_tune_id", fineTuneId)
      .withSuccessResponse[FineTune](200)
      

  /**
   * Expected answers:
   *   code 200 : CreateChatCompletionResponse (OK)
   * 
   * @param createChatCompletionRequest 
   */
  def createChatCompletion(createChatCompletionRequest: CreateChatCompletionRequest): ApiRequest[CreateChatCompletionResponse] =
    ApiRequest[CreateChatCompletionResponse](ApiMethods.POST, baseUrl, "/chat/completions", "application/json")
      .withBody(createChatCompletionRequest)
      .withSuccessResponse[CreateChatCompletionResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : CreateCompletionResponse (OK)
   * 
   * @param createCompletionRequest 
   */
  def createCompletion(createCompletionRequest: CreateCompletionRequest): ApiRequest[CreateCompletionResponse] =
    ApiRequest[CreateCompletionResponse](ApiMethods.POST, baseUrl, "/completions", "application/json")
      .withBody(createCompletionRequest)
      .withSuccessResponse[CreateCompletionResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : CreateEditResponse (OK)
   * 
   * @param createEditRequest 
   */
  def createEdit(createEditRequest: CreateEditRequest): ApiRequest[CreateEditResponse] =
    ApiRequest[CreateEditResponse](ApiMethods.POST, baseUrl, "/edits", "application/json")
      .withBody(createEditRequest)
      .withSuccessResponse[CreateEditResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : CreateEmbeddingResponse (OK)
   * 
   * @param createEmbeddingRequest 
   */
  def createEmbedding(createEmbeddingRequest: CreateEmbeddingRequest): ApiRequest[CreateEmbeddingResponse] =
    ApiRequest[CreateEmbeddingResponse](ApiMethods.POST, baseUrl, "/embeddings", "application/json")
      .withBody(createEmbeddingRequest)
      .withSuccessResponse[CreateEmbeddingResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : OpenAIFile (OK)
   * 
   * @param file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the `purpose` is set to \\\"fine-tune\\\", each line is a JSON record with \\\"prompt\\\" and \\\"completion\\\" fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data). 
   * @param purpose The intended purpose of the uploaded documents.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. 
   */
  def createFile(file: File, purpose: String): ApiRequest[OpenAIFile] =
    ApiRequest[OpenAIFile](ApiMethods.POST, baseUrl, "/files", "multipart/form-data")
      .withFormParam("file", file)
      .withFormParam("purpose", purpose)
      .withSuccessResponse[OpenAIFile](200)
      

  /**
   * Expected answers:
   *   code 200 : FineTune (OK)
   * 
   * @param createFineTuneRequest 
   */
  def createFineTune(createFineTuneRequest: CreateFineTuneRequest): ApiRequest[FineTune] =
    ApiRequest[FineTune](ApiMethods.POST, baseUrl, "/fine-tunes", "application/json")
      .withBody(createFineTuneRequest)
      .withSuccessResponse[FineTune](200)
      

  /**
   * Expected answers:
   *   code 200 : ImagesResponse (OK)
   * 
   * @param createImageRequest 
   */
  def createImage(createImageRequest: CreateImageRequest): ApiRequest[ImagesResponse] =
    ApiRequest[ImagesResponse](ApiMethods.POST, baseUrl, "/images/generations", "application/json")
      .withBody(createImageRequest)
      .withSuccessResponse[ImagesResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : ImagesResponse (OK)
   * 
   * @param image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
   * @param prompt A text description of the desired image(s). The maximum length is 1000 characters.
   * @param mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
   * @param `n` The number of images to generate. Must be between 1 and 10.
   * @param size The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
   * @param responseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`.
   * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
   */
  def createImageEdit(image: File, prompt: String, mask: Option[File] = None, `n`: Option[Int] = None, size: Option[String] = None, responseFormat: Option[String] = None, user: Option[String] = None): ApiRequest[ImagesResponse] =
    ApiRequest[ImagesResponse](ApiMethods.POST, baseUrl, "/images/edits", "multipart/form-data")
      .withFormParam("image", image)
      .withFormParam("mask", mask)
      .withFormParam("prompt", prompt)
      .withFormParam("n", `n`)
      .withFormParam("size", size)
      .withFormParam("response_format", responseFormat)
      .withFormParam("user", user)
      .withSuccessResponse[ImagesResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : ImagesResponse (OK)
   * 
   * @param image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
   * @param `n` The number of images to generate. Must be between 1 and 10.
   * @param size The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
   * @param responseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`.
   * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
   */
  def createImageVariation(image: File, `n`: Option[Int] = None, size: Option[String] = None, responseFormat: Option[String] = None, user: Option[String] = None): ApiRequest[ImagesResponse] =
    ApiRequest[ImagesResponse](ApiMethods.POST, baseUrl, "/images/variations", "multipart/form-data")
      .withFormParam("image", image)
      .withFormParam("n", `n`)
      .withFormParam("size", size)
      .withFormParam("response_format", responseFormat)
      .withFormParam("user", user)
      .withSuccessResponse[ImagesResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : CreateModerationResponse (OK)
   * 
   * @param createModerationRequest 
   */
  def createModeration(createModerationRequest: CreateModerationRequest): ApiRequest[CreateModerationResponse] =
    ApiRequest[CreateModerationResponse](ApiMethods.POST, baseUrl, "/moderations", "application/json")
      .withBody(createModerationRequest)
      .withSuccessResponse[CreateModerationResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : CreateTranscriptionResponse (OK)
   * 
   * @param file The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
   * @param model 
   * @param prompt An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
   * @param responseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
   * @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
   * @param language The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
   */
  def createTranscription(file: File, model: CreateTranscriptionRequestModel, prompt: Option[String] = None, responseFormat: Option[String] = None, temperature: Option[BigDecimal] = None, language: Option[String] = None): ApiRequest[CreateTranscriptionResponse] =
    ApiRequest[CreateTranscriptionResponse](ApiMethods.POST, baseUrl, "/audio/transcriptions", "multipart/form-data")
      .withFormParam("file", file)
      .withFormParam("model", model)
      .withFormParam("prompt", prompt)
      .withFormParam("response_format", responseFormat)
      .withFormParam("temperature", temperature)
      .withFormParam("language", language)
      .withSuccessResponse[CreateTranscriptionResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : CreateTranslationResponse (OK)
   * 
   * @param file The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
   * @param model 
   * @param prompt An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. 
   * @param responseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
   * @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
   */
  def createTranslation(file: File, model: CreateTranscriptionRequestModel, prompt: Option[String] = None, responseFormat: Option[String] = None, temperature: Option[BigDecimal] = None): ApiRequest[CreateTranslationResponse] =
    ApiRequest[CreateTranslationResponse](ApiMethods.POST, baseUrl, "/audio/translations", "multipart/form-data")
      .withFormParam("file", file)
      .withFormParam("model", model)
      .withFormParam("prompt", prompt)
      .withFormParam("response_format", responseFormat)
      .withFormParam("temperature", temperature)
      .withSuccessResponse[CreateTranslationResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : DeleteFileResponse (OK)
   * 
   * @param fileId The ID of the file to use for this request
   */
  def deleteFile(fileId: String): ApiRequest[DeleteFileResponse] =
    ApiRequest[DeleteFileResponse](ApiMethods.DELETE, baseUrl, "/files/{file_id}", "application/json")
      .withPathParam("file_id", fileId)
      .withSuccessResponse[DeleteFileResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : DeleteModelResponse (OK)
   * 
   * @param model The model to delete
   */
  def deleteModel(model: String): ApiRequest[DeleteModelResponse] =
    ApiRequest[DeleteModelResponse](ApiMethods.DELETE, baseUrl, "/models/{model}", "application/json")
      .withPathParam("model", model)
      .withSuccessResponse[DeleteModelResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : String (OK)
   * 
   * @param fileId The ID of the file to use for this request
   */
  def downloadFile(fileId: String): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/files/{file_id}/content", "application/json")
      .withPathParam("file_id", fileId)
      .withSuccessResponse[String](200)
      

  /**
   * Expected answers:
   *   code 200 : ListFilesResponse (OK)
   */
  def listFiles(): ApiRequest[ListFilesResponse] =
    ApiRequest[ListFilesResponse](ApiMethods.GET, baseUrl, "/files", "application/json")
      .withSuccessResponse[ListFilesResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : ListFineTuneEventsResponse (OK)
   * 
   * @param fineTuneId The ID of the fine-tune job to get events for. 
   * @param stream Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a `data: [DONE]` message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned. 
   */
  def listFineTuneEvents(fineTuneId: String, stream: Option[Boolean] = None): ApiRequest[ListFineTuneEventsResponse] =
    ApiRequest[ListFineTuneEventsResponse](ApiMethods.GET, baseUrl, "/fine-tunes/{fine_tune_id}/events", "application/json")
      .withQueryParam("stream", stream)
      .withPathParam("fine_tune_id", fineTuneId)
      .withSuccessResponse[ListFineTuneEventsResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : ListFineTunesResponse (OK)
   */
  def listFineTunes(): ApiRequest[ListFineTunesResponse] =
    ApiRequest[ListFineTunesResponse](ApiMethods.GET, baseUrl, "/fine-tunes", "application/json")
      .withSuccessResponse[ListFineTunesResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : ListModelsResponse (OK)
   */
  def listModels(): ApiRequest[ListModelsResponse] =
    ApiRequest[ListModelsResponse](ApiMethods.GET, baseUrl, "/models", "application/json")
      .withSuccessResponse[ListModelsResponse](200)
      

  /**
   * Expected answers:
   *   code 200 : OpenAIFile (OK)
   * 
   * @param fileId The ID of the file to use for this request
   */
  def retrieveFile(fileId: String): ApiRequest[OpenAIFile] =
    ApiRequest[OpenAIFile](ApiMethods.GET, baseUrl, "/files/{file_id}", "application/json")
      .withPathParam("file_id", fileId)
      .withSuccessResponse[OpenAIFile](200)
      

  /**
   * Expected answers:
   *   code 200 : FineTune (OK)
   * 
   * @param fineTuneId The ID of the fine-tune job 
   */
  def retrieveFineTune(fineTuneId: String): ApiRequest[FineTune] =
    ApiRequest[FineTune](ApiMethods.GET, baseUrl, "/fine-tunes/{fine_tune_id}", "application/json")
      .withPathParam("fine_tune_id", fineTuneId)
      .withSuccessResponse[FineTune](200)
      

  /**
   * Expected answers:
   *   code 200 : Model (OK)
   * 
   * @param model The ID of the model to use for this request
   */
  def retrieveModel(model: String): ApiRequest[Model] =
    ApiRequest[Model](ApiMethods.GET, baseUrl, "/models/{model}", "application/json")
      .withPathParam("model", model)
      .withSuccessResponse[Model](200)
      



}

