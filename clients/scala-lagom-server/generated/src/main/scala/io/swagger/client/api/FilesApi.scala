/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.swagger.client.api

import akka.{Done, NotUsed}
import com.lightbend.lagom.scaladsl.api.transport.Method
import com.lightbend.lagom.scaladsl.api.{Service, ServiceCall}
import play.api.libs.json._
import com.lightbend.lagom.scaladsl.api.deser.PathParamSerializer

import io.swagger.client.model.DeleteFileResponse
import java.io.File
import io.swagger.client.model.ListFilesResponse
import io.swagger.client.model.OpenAIFile

trait FilesApi extends Service {


  final override def descriptor = {
    import Service._
    named("FilesApi").withCalls(
      restCall(Method.POST, "/files", createFile _), 
      restCall(Method.DELETE, "/files/:file_id", deleteFile _), 
      restCall(Method.GET, "/files/:file_id/content", downloadFile _), 
      restCall(Method.GET, "/files?purpose", listFiles _), 
      restCall(Method.GET, "/files/:file_id", retrieveFile _)
    ).withAutoAcl(true)
  }


  // file:File  -- not yet supported x-www-form-urlencoded
  // purpose:String  -- not yet supported x-www-form-urlencoded
  /**
    * Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports &#x60;.jsonl&#x60; files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. 
    * 
    *  
    * @param file The File object (not file name) to be uploaded.   
    * @param purpose The intended purpose of the uploaded file.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tuning) and \\\&quot;assistants\\\&quot; for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning.  
    * @return OpenAIFile
    */
  def createFile(): ServiceCall[NotUsed ,OpenAIFile]
  
  /**
    * Delete a file.
    * 
    *  
    * @param fileId The ID of the file to use for this request. 
    * @return DeleteFileResponse
    */
  def deleteFile(fileId: String): ServiceCall[NotUsed ,DeleteFileResponse]
  
  /**
    * Returns the contents of the specified file.
    * 
    *  
    * @param fileId The ID of the file to use for this request. 
    * @return String
    */
  def downloadFile(fileId: String): ServiceCall[NotUsed ,String]
        
  /**
    * Returns a list of files that belong to the user&#39;s organization.
    * 
    *  
    * @param purpose Only return files with the given purpose. (optional)
    * @return ListFilesResponse
    */
  def listFiles(purpose:           Option[String] = None): ServiceCall[NotUsed ,ListFilesResponse]
  
  /**
    * Returns information about a specific file.
    * 
    *  
    * @param fileId The ID of the file to use for this request. 
    * @return OpenAIFile
    */
  def retrieveFile(fileId: String): ServiceCall[NotUsed ,OpenAIFile]
  

        object FilesApiPurposeEnum extends Enumeration {
        val   fine-tune, assistants = Value     
        type FilesApiPurposeEnum = Value
        implicit val format: Format[Value] = Format(Reads.enumNameReads(this), Writes.enumNameWrites[FilesApiPurposeEnum.type])
        implicit val pathParamSerializer: PathParamSerializer[FilesApiPurposeEnum] = PathParamSerializer.required("FilesApiPurposeEnum")(withName)(_.toString)
        }
  }
