/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.AssistantFileObject
import org.openapitools.client.model.AssistantObject
import org.openapitools.client.model.CreateAssistantFileRequest
import org.openapitools.client.model.CreateAssistantRequest
import org.openapitools.client.model.CreateMessageRequest
import org.openapitools.client.model.CreateRunRequest
import org.openapitools.client.model.CreateThreadAndRunRequest
import org.openapitools.client.model.CreateThreadRequest
import org.openapitools.client.model.DeleteAssistantFileResponse
import org.openapitools.client.model.DeleteAssistantResponse
import org.openapitools.client.model.DeleteThreadResponse
import org.openapitools.client.model.ListAssistantFilesResponse
import org.openapitools.client.model.ListAssistantsResponse
import org.openapitools.client.model.ListMessageFilesResponse
import org.openapitools.client.model.ListMessagesResponse
import org.openapitools.client.model.ListRunStepsResponse
import org.openapitools.client.model.ListRunsResponse
import org.openapitools.client.model.MessageFileObject
import org.openapitools.client.model.MessageObject
import org.openapitools.client.model.ModifyAssistantRequest
import org.openapitools.client.model.ModifyMessageRequest
import org.openapitools.client.model.ModifyRunRequest
import org.openapitools.client.model.ModifyThreadRequest
import org.openapitools.client.model.RunObject
import org.openapitools.client.model.RunStepObject
import org.openapitools.client.model.SubmitToolOutputsRunRequest
import org.openapitools.client.model.ThreadObject
import org.openapitools.client.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object AssistantsApi {
  def apply(baseUrl: String = "https://api.openai.com/v1") = new AssistantsApi(baseUrl)
}

class AssistantsApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : RunObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread to which this run belongs.
   * @param runId The ID of the run to cancel.
   */
  def cancelRun(bearerToken: String)(threadId: String, runId: String
): Request[Either[ResponseException[String, Exception], RunObject], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/threads/${threadId}/runs/${runId}/cancel")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[RunObject])

  /**
   * Expected answers:
   *   code 200 : AssistantObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param createAssistantRequest 
   */
  def createAssistant(bearerToken: String)(createAssistantRequest: CreateAssistantRequest
): Request[Either[ResponseException[String, Exception], AssistantObject], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/assistants")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(createAssistantRequest)
      .response(asJson[AssistantObject])

  /**
   * Expected answers:
   *   code 200 : AssistantFileObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param assistantId The ID of the assistant for which to create a File. 
   * @param createAssistantFileRequest 
   */
  def createAssistantFile(bearerToken: String)(assistantId: String, createAssistantFileRequest: CreateAssistantFileRequest
): Request[Either[ResponseException[String, Exception], AssistantFileObject], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/assistants/${assistantId}/files")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(createAssistantFileRequest)
      .response(asJson[AssistantFileObject])

  /**
   * Expected answers:
   *   code 200 : MessageObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) to create a message for.
   * @param createMessageRequest 
   */
  def createMessage(bearerToken: String)(threadId: String, createMessageRequest: CreateMessageRequest
): Request[Either[ResponseException[String, Exception], MessageObject], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/threads/${threadId}/messages")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(createMessageRequest)
      .response(asJson[MessageObject])

  /**
   * Expected answers:
   *   code 200 : RunObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread to run.
   * @param createRunRequest 
   */
  def createRun(bearerToken: String)(threadId: String, createRunRequest: CreateRunRequest
): Request[Either[ResponseException[String, Exception], RunObject], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/threads/${threadId}/runs")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(createRunRequest)
      .response(asJson[RunObject])

  /**
   * Expected answers:
   *   code 200 : ThreadObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param createThreadRequest 
   */
  def createThread(bearerToken: String)(createThreadRequest: Option[CreateThreadRequest] = None
): Request[Either[ResponseException[String, Exception], ThreadObject], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/threads")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(createThreadRequest)
      .response(asJson[ThreadObject])

  /**
   * Expected answers:
   *   code 200 : RunObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param createThreadAndRunRequest 
   */
  def createThreadAndRun(bearerToken: String)(createThreadAndRunRequest: CreateThreadAndRunRequest
): Request[Either[ResponseException[String, Exception], RunObject], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/threads/runs")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(createThreadAndRunRequest)
      .response(asJson[RunObject])

  /**
   * Expected answers:
   *   code 200 : DeleteAssistantResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param assistantId The ID of the assistant to delete.
   */
  def deleteAssistant(bearerToken: String)(assistantId: String
): Request[Either[ResponseException[String, Exception], DeleteAssistantResponse], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/assistants/${assistantId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[DeleteAssistantResponse])

  /**
   * Expected answers:
   *   code 200 : DeleteAssistantFileResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param assistantId The ID of the assistant that the file belongs to.
   * @param fileId The ID of the file to delete.
   */
  def deleteAssistantFile(bearerToken: String)(assistantId: String, fileId: String
): Request[Either[ResponseException[String, Exception], DeleteAssistantFileResponse], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/assistants/${assistantId}/files/${fileId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[DeleteAssistantFileResponse])

  /**
   * Expected answers:
   *   code 200 : DeleteThreadResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread to delete.
   */
  def deleteThread(bearerToken: String)(threadId: String
): Request[Either[ResponseException[String, Exception], DeleteThreadResponse], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/threads/${threadId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[DeleteThreadResponse])

  /**
   * Expected answers:
   *   code 200 : AssistantObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param assistantId The ID of the assistant to retrieve.
   */
  def getAssistant(bearerToken: String)(assistantId: String
): Request[Either[ResponseException[String, Exception], AssistantObject], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/assistants/${assistantId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[AssistantObject])

  /**
   * Expected answers:
   *   code 200 : AssistantFileObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param assistantId The ID of the assistant who the file belongs to.
   * @param fileId The ID of the file we're getting.
   */
  def getAssistantFile(bearerToken: String)(assistantId: String, fileId: String
): Request[Either[ResponseException[String, Exception], AssistantFileObject], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/assistants/${assistantId}/files/${fileId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[AssistantFileObject])

  /**
   * Expected answers:
   *   code 200 : MessageObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
   * @param messageId The ID of the message to retrieve.
   */
  def getMessage(bearerToken: String)(threadId: String, messageId: String
): Request[Either[ResponseException[String, Exception], MessageObject], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/threads/${threadId}/messages/${messageId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[MessageObject])

  /**
   * Expected answers:
   *   code 200 : MessageFileObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread to which the message and File belong.
   * @param messageId The ID of the message the file belongs to.
   * @param fileId The ID of the file being retrieved.
   */
  def getMessageFile(bearerToken: String)(threadId: String, messageId: String, fileId: String
): Request[Either[ResponseException[String, Exception], MessageFileObject], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/threads/${threadId}/messages/${messageId}/files/${fileId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[MessageFileObject])

  /**
   * Expected answers:
   *   code 200 : RunObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
   * @param runId The ID of the run to retrieve.
   */
  def getRun(bearerToken: String)(threadId: String, runId: String
): Request[Either[ResponseException[String, Exception], RunObject], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/threads/${threadId}/runs/${runId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[RunObject])

  /**
   * Expected answers:
   *   code 200 : RunStepObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread to which the run and run step belongs.
   * @param runId The ID of the run to which the run step belongs.
   * @param stepId The ID of the run step to retrieve.
   */
  def getRunStep(bearerToken: String)(threadId: String, runId: String, stepId: String
): Request[Either[ResponseException[String, Exception], RunStepObject], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/threads/${threadId}/runs/${runId}/steps/${stepId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[RunStepObject])

  /**
   * Expected answers:
   *   code 200 : ThreadObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread to retrieve.
   */
  def getThread(bearerToken: String)(threadId: String
): Request[Either[ResponseException[String, Exception], ThreadObject], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/threads/${threadId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[ThreadObject])

  /**
   * Expected answers:
   *   code 200 : ListAssistantFilesResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param assistantId The ID of the assistant the file belongs to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
   * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
   * @param before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
   */
  def listAssistantFiles(bearerToken: String)(assistantId: String, limit: Option[Int] = None, order: Option[String] = None, after: Option[String] = None, before: Option[String] = None
): Request[Either[ResponseException[String, Exception], ListAssistantFilesResponse], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/assistants/${assistantId}/files?limit=${ limit }&order=${ order }&after=${ after }&before=${ before }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[ListAssistantFilesResponse])

  /**
   * Expected answers:
   *   code 200 : ListAssistantsResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
   * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
   * @param before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
   */
  def listAssistants(bearerToken: String)(limit: Option[Int] = None, order: Option[String] = None, after: Option[String] = None, before: Option[String] = None
): Request[Either[ResponseException[String, Exception], ListAssistantsResponse], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/assistants?limit=${ limit }&order=${ order }&after=${ after }&before=${ before }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[ListAssistantsResponse])

  /**
   * Expected answers:
   *   code 200 : ListMessageFilesResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread that the message and files belong to.
   * @param messageId The ID of the message that the files belongs to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
   * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
   * @param before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
   */
  def listMessageFiles(bearerToken: String)(threadId: String, messageId: String, limit: Option[Int] = None, order: Option[String] = None, after: Option[String] = None, before: Option[String] = None
): Request[Either[ResponseException[String, Exception], ListMessageFilesResponse], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/threads/${threadId}/messages/${messageId}/files?limit=${ limit }&order=${ order }&after=${ after }&before=${ before }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[ListMessageFilesResponse])

  /**
   * Expected answers:
   *   code 200 : ListMessagesResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) the messages belong to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
   * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
   * @param before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
   * @param runId Filter messages by the run ID that generated them. 
   */
  def listMessages(bearerToken: String)(threadId: String, limit: Option[Int] = None, order: Option[String] = None, after: Option[String] = None, before: Option[String] = None, runId: Option[String] = None
): Request[Either[ResponseException[String, Exception], ListMessagesResponse], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/threads/${threadId}/messages?limit=${ limit }&order=${ order }&after=${ after }&before=${ before }&run_id=${ runId }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[ListMessagesResponse])

  /**
   * Expected answers:
   *   code 200 : ListRunStepsResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread the run and run steps belong to.
   * @param runId The ID of the run the run steps belong to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
   * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
   * @param before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
   */
  def listRunSteps(bearerToken: String)(threadId: String, runId: String, limit: Option[Int] = None, order: Option[String] = None, after: Option[String] = None, before: Option[String] = None
): Request[Either[ResponseException[String, Exception], ListRunStepsResponse], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/threads/${threadId}/runs/${runId}/steps?limit=${ limit }&order=${ order }&after=${ after }&before=${ before }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[ListRunStepsResponse])

  /**
   * Expected answers:
   *   code 200 : ListRunsResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread the run belongs to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. 
   * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
   * @param before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
   */
  def listRuns(bearerToken: String)(threadId: String, limit: Option[Int] = None, order: Option[String] = None, after: Option[String] = None, before: Option[String] = None
): Request[Either[ResponseException[String, Exception], ListRunsResponse], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/threads/${threadId}/runs?limit=${ limit }&order=${ order }&after=${ after }&before=${ before }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[ListRunsResponse])

  /**
   * Expected answers:
   *   code 200 : AssistantObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param assistantId The ID of the assistant to modify.
   * @param modifyAssistantRequest 
   */
  def modifyAssistant(bearerToken: String)(assistantId: String, modifyAssistantRequest: ModifyAssistantRequest
): Request[Either[ResponseException[String, Exception], AssistantObject], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/assistants/${assistantId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(modifyAssistantRequest)
      .response(asJson[AssistantObject])

  /**
   * Expected answers:
   *   code 200 : MessageObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread to which this message belongs.
   * @param messageId The ID of the message to modify.
   * @param modifyMessageRequest 
   */
  def modifyMessage(bearerToken: String)(threadId: String, messageId: String, modifyMessageRequest: ModifyMessageRequest
): Request[Either[ResponseException[String, Exception], MessageObject], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/threads/${threadId}/messages/${messageId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(modifyMessageRequest)
      .response(asJson[MessageObject])

  /**
   * Expected answers:
   *   code 200 : RunObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
   * @param runId The ID of the run to modify.
   * @param modifyRunRequest 
   */
  def modifyRun(bearerToken: String)(threadId: String, runId: String, modifyRunRequest: ModifyRunRequest
): Request[Either[ResponseException[String, Exception], RunObject], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/threads/${threadId}/runs/${runId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(modifyRunRequest)
      .response(asJson[RunObject])

  /**
   * Expected answers:
   *   code 200 : ThreadObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the thread to modify. Only the `metadata` can be modified.
   * @param modifyThreadRequest 
   */
  def modifyThread(bearerToken: String)(threadId: String, modifyThreadRequest: ModifyThreadRequest
): Request[Either[ResponseException[String, Exception], ThreadObject], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/threads/${threadId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(modifyThreadRequest)
      .response(asJson[ThreadObject])

  /**
   * Expected answers:
   *   code 200 : RunObject (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
   * @param runId The ID of the run that requires the tool output submission.
   * @param submitToolOutputsRunRequest 
   */
  def submitToolOuputsToRun(bearerToken: String)(threadId: String, runId: String, submitToolOutputsRunRequest: SubmitToolOutputsRunRequest
): Request[Either[ResponseException[String, Exception], RunObject], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/threads/${threadId}/runs/${runId}/submit_tool_outputs")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(submitToolOutputsRunRequest)
      .response(asJson[RunObject])

}
