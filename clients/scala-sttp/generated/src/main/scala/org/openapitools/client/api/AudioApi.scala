/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.CreateSpeechRequest
import org.openapitools.client.model.CreateTranscription200Response
import org.openapitools.client.model.CreateTranscriptionRequestModel
import org.openapitools.client.model.CreateTranslation200Response
import java.io.File
import org.openapitools.client.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object AudioApi {
  def apply(baseUrl: String = "https://api.openai.com/v1") = new AudioApi(baseUrl)
}

class AudioApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : File (OK)
   *              Headers :
   *                Transfer-Encoding - chunked
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param createSpeechRequest 
   */
  def createSpeech(bearerToken: String)(createSpeechRequest: CreateSpeechRequest
): Request[Either[ResponseException[String, Exception], File], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/audio/speech")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(createSpeechRequest)
      .response(asJson[File])

  /**
   * Expected answers:
   *   code 200 : CreateTranscription200Response (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param file The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
   * @param model 
   * @param language The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
   * @param prompt An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
   * @param responseFormat The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. 
   * @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
   * @param timestampGranularities The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency. 
   */
  def createTranscription(bearerToken: String)(file: File, model: CreateTranscriptionRequestModel, language: Option[String] = None, prompt: Option[String] = None, responseFormat: Option[String] = None, temperature: Option[Double] = None, timestampGranularities: Seq[String]
): Request[Either[ResponseException[String, Exception], CreateTranscription200Response], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/audio/transcriptions")
      .contentType("multipart/form-data")
      .auth.bearer(bearerToken)
      .multipartBody(Seq(
                multipartFile("file", file)
, 
                multipart("model", model)
, 
                language.map(multipart("language", _))
, 
                prompt.map(multipart("prompt", _))
, 
                responseFormat.map(multipart("response_format", _))
, 
                temperature.map(multipart("temperature", _))
, 
                timestampGranularities.map(multipart("timestamp_granularities[]", ArrayValues(_, CSV)))

      ).flatten)
      .response(asJson[CreateTranscription200Response])

  /**
   * Expected answers:
   *   code 200 : CreateTranslation200Response (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param file The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
   * @param model 
   * @param prompt An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. 
   * @param responseFormat The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. 
   * @param temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
   */
  def createTranslation(bearerToken: String)(file: File, model: CreateTranscriptionRequestModel, prompt: Option[String] = None, responseFormat: Option[String] = None, temperature: Option[Double] = None
): Request[Either[ResponseException[String, Exception], CreateTranslation200Response], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/audio/translations")
      .contentType("multipart/form-data")
      .auth.bearer(bearerToken)
      .multipartBody(Seq(
                multipartFile("file", file)
, 
                multipart("model", model)
, 
                prompt.map(multipart("prompt", _))
, 
                responseFormat.map(multipart("response_format", _))
, 
                temperature.map(multipart("temperature", _))

      ).flatten)
      .response(asJson[CreateTranslation200Response])

}
