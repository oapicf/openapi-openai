/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.DeleteFileResponse
import java.io.File
import org.openapitools.client.model.ListFilesResponse
import org.openapitools.client.model.OpenAIFile
import org.openapitools.client.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object FilesApi {
  def apply(baseUrl: String = "https://api.openai.com/v1") = new FilesApi(baseUrl)
}

class FilesApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : OpenAIFile (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param file The File object (not file name) to be uploaded. 
   * @param purpose The intended purpose of the uploaded file.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tuning) and \\\"assistants\\\" for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning. 
   */
  def createFile(bearerToken: String)(file: File, purpose: String
): Request[Either[ResponseException[String, Exception], OpenAIFile], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/files")
      .contentType("multipart/form-data")
      .auth.bearer(bearerToken)
      .multipartBody(Seq(
                multipartFile("file", file)
, 
                multipart("purpose", purpose)

      ).flatten)
      .response(asJson[OpenAIFile])

  /**
   * Expected answers:
   *   code 200 : DeleteFileResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param fileId The ID of the file to use for this request.
   */
  def deleteFile(bearerToken: String)(fileId: String
): Request[Either[ResponseException[String, Exception], DeleteFileResponse], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/files/${fileId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[DeleteFileResponse])

  /**
   * Expected answers:
   *   code 200 : String (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param fileId The ID of the file to use for this request.
   */
  def downloadFile(bearerToken: String)(fileId: String
): Request[Either[ResponseException[String, Exception], String], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/files/${fileId}/content")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[String])

  /**
   * Expected answers:
   *   code 200 : ListFilesResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param purpose Only return files with the given purpose.
   */
  def listFiles(bearerToken: String)(purpose: Option[String] = None
): Request[Either[ResponseException[String, Exception], ListFilesResponse], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/files?purpose=${ purpose }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[ListFilesResponse])

  /**
   * Expected answers:
   *   code 200 : OpenAIFile (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param fileId The ID of the file to use for this request.
   */
  def retrieveFile(bearerToken: String)(fileId: String
): Request[Either[ResponseException[String, Exception], OpenAIFile], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/files/${fileId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[OpenAIFile])

}
