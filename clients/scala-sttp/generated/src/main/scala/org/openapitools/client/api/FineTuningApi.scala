/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.CreateFineTuningJobRequest
import org.openapitools.client.model.FineTuningJob
import org.openapitools.client.model.ListFineTuningJobCheckpointsResponse
import org.openapitools.client.model.ListFineTuningJobEventsResponse
import org.openapitools.client.model.ListPaginatedFineTuningJobsResponse
import org.openapitools.client.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object FineTuningApi {

def apply(baseUrl: String = "https://api.openai.com/v1") = new FineTuningApi(baseUrl)
}

class FineTuningApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : FineTuningJob (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param fineTuningJobId The ID of the fine-tuning job to cancel. 
   */
  def cancelFineTuningJob(bearerToken: String)(fineTuningJobId: String
): Request[Either[ResponseException[String, Exception], FineTuningJob], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/fine_tuning/jobs/${fineTuningJobId}/cancel")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[FineTuningJob])

  /**
   * Expected answers:
   *   code 200 : FineTuningJob (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param createFineTuningJobRequest 
   */
  def createFineTuningJob(bearerToken: String)(createFineTuningJobRequest: CreateFineTuningJobRequest
): Request[Either[ResponseException[String, Exception], FineTuningJob], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/fine_tuning/jobs")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(createFineTuningJobRequest)
      .response(asJson[FineTuningJob])

  /**
   * Expected answers:
   *   code 200 : ListFineTuningJobEventsResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param fineTuningJobId The ID of the fine-tuning job to get events for. 
   * @param after Identifier for the last event from the previous pagination request.
   * @param limit Number of events to retrieve.
   */
  def listFineTuningEvents(bearerToken: String)(fineTuningJobId: String, after: Option[String] = None, limit: Option[Int] = None
): Request[Either[ResponseException[String, Exception], ListFineTuningJobEventsResponse], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/fine_tuning/jobs/${fineTuningJobId}/events?after=${ after }&limit=${ limit }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[ListFineTuningJobEventsResponse])

  /**
   * Expected answers:
   *   code 200 : ListFineTuningJobCheckpointsResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param fineTuningJobId The ID of the fine-tuning job to get checkpoints for. 
   * @param after Identifier for the last checkpoint ID from the previous pagination request.
   * @param limit Number of checkpoints to retrieve.
   */
  def listFineTuningJobCheckpoints(bearerToken: String)(fineTuningJobId: String, after: Option[String] = None, limit: Option[Int] = None
): Request[Either[ResponseException[String, Exception], ListFineTuningJobCheckpointsResponse], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/fine_tuning/jobs/${fineTuningJobId}/checkpoints?after=${ after }&limit=${ limit }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[ListFineTuningJobCheckpointsResponse])

  /**
   * Expected answers:
   *   code 200 : ListPaginatedFineTuningJobsResponse (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param after Identifier for the last job from the previous pagination request.
   * @param limit Number of fine-tuning jobs to retrieve.
   */
  def listPaginatedFineTuningJobs(bearerToken: String)(after: Option[String] = None, limit: Option[Int] = None
): Request[Either[ResponseException[String, Exception], ListPaginatedFineTuningJobsResponse], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/fine_tuning/jobs?after=${ after }&limit=${ limit }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[ListPaginatedFineTuningJobsResponse])

  /**
   * Expected answers:
   *   code 200 : FineTuningJob (OK)
   * 
   * Available security schemes:
   *   ApiKeyAuth (http)
   * 
   * @param fineTuningJobId The ID of the fine-tuning job. 
   */
  def retrieveFineTuningJob(bearerToken: String)(fineTuningJobId: String
): Request[Either[ResponseException[String, Exception], FineTuningJob], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/fine_tuning/jobs/${fineTuningJobId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[FineTuningJob])

}
