/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.CreateSpeechRequest
import org.openapitools.server.model.CreateTranscription200Response
import org.openapitools.server.model.CreateTranscriptionRequestModel
import org.openapitools.server.model.CreateTranslation200Response
import java.io.File

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class AudioApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "AudioApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val createSpeechOperation = (apiOperation[File]("createSpeech")
    summary "Generates audio from the input text."
    parameters(bodyParam[CreateSpeechRequest]("createSpeechRequest").description(""))
  )

  post("/audio/speech", operation(createSpeechOperation)) {
    //println("createSpeechRequest: " + createSpeechRequest)
  }

  

  val createTranscriptionOperation = (apiOperation[CreateTranscription200Response]("createTranscription")
    summary "Transcribes audio into the input language."
    parameters(formParam[File]("file").description(""), formParam[CreateTranscriptionRequestModel]("model").description(""), formParam[String]("language").description("").optional, formParam[String]("prompt").description("").optional, formParam[String]("responseFormat").description("").optional.defaultValue(json), formParam[Double]("temperature").description("").optional.defaultValue(0), formParam[List[String]]("timestampGranularitiesLeft_Square_BracketRight_Square_Bracket").description("").optional)
  )

  post("/audio/transcriptions", operation(createTranscriptionOperation)) {
    val file = fileParams("file")
    //println("file: " + file)
    //println("model: " + model)
    //println("language: " + language)
    //println("prompt: " + prompt)
    //println("responseFormat: " + responseFormat)
    //println("temperature: " + temperature)
    //println("timestampGranularitiesLeft_Square_BracketRight_Square_Bracket: " + timestampGranularitiesLeft_Square_BracketRight_Square_Bracket)
  }

  

  val createTranslationOperation = (apiOperation[CreateTranslation200Response]("createTranslation")
    summary "Translates audio into English."
    parameters(formParam[File]("file").description(""), formParam[CreateTranscriptionRequestModel]("model").description(""), formParam[String]("prompt").description("").optional, formParam[String]("responseFormat").description("").optional.defaultValue(json), formParam[Double]("temperature").description("").optional.defaultValue(0))
  )

  post("/audio/translations", operation(createTranslationOperation)) {
    val file = fileParams("file")
    //println("file: " + file)
    //println("model: " + model)
    //println("prompt: " + prompt)
    //println("responseFormat: " + responseFormat)
    //println("temperature: " + temperature)
  }

}
