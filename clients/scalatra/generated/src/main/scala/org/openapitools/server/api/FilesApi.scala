/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.DeleteFileResponse
import java.io.File
import org.openapitools.server.model.ListFilesResponse
import org.openapitools.server.model.OpenAIFile

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class FilesApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "FilesApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val createFileOperation = (apiOperation[OpenAIFile]("createFile")
    summary "Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. "
    parameters(formParam[File]("file").description(""), formParam[String]("purpose").description(""))
  )

  post("/files", operation(createFileOperation)) {
    val file = fileParams("file")
    //println("file: " + file)
    //println("purpose: " + purpose)
  }

  

  val deleteFileOperation = (apiOperation[DeleteFileResponse]("deleteFile")
    summary "Delete a file."
    parameters(pathParam[String]("fileId").description(""))
  )

  delete("/files/:file_id", operation(deleteFileOperation)) {
    val fileId = params.getOrElse("fileId", halt(400))
    //println("fileId: " + fileId)
  }

  

  val downloadFileOperation = (apiOperation[String]("downloadFile")
    summary "Returns the contents of the specified file."
    parameters(pathParam[String]("fileId").description(""))
  )

  get("/files/:file_id/content", operation(downloadFileOperation)) {
    val fileId = params.getOrElse("fileId", halt(400))
    //println("fileId: " + fileId)
  }

  

  val listFilesOperation = (apiOperation[ListFilesResponse]("listFiles")
    summary "Returns a list of files that belong to the user's organization."
    parameters(queryParam[String]("purpose").description("").optional)
  )

  get("/files", operation(listFilesOperation)) {
            val purpose = params.getAs[String]("purpose")

    //println("purpose: " + purpose)
  }

  

  val retrieveFileOperation = (apiOperation[OpenAIFile]("retrieveFile")
    summary "Returns information about a specific file."
    parameters(pathParam[String]("fileId").description(""))
  )

  get("/files/:file_id", operation(retrieveFileOperation)) {
    val fileId = params.getOrElse("fileId", halt(400))
    //println("fileId: " + fileId)
  }

}
