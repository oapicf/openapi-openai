/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.CreateImageEditRequestModel
import org.openapitools.server.model.CreateImageRequest
import java.io.File
import org.openapitools.server.model.ImagesResponse

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class ImagesApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "ImagesApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val createImageOperation = (apiOperation[ImagesResponse]("createImage")
    summary "Creates an image given a prompt."
    parameters(bodyParam[CreateImageRequest]("createImageRequest").description(""))
  )

  post("/images/generations", operation(createImageOperation)) {
    //println("createImageRequest: " + createImageRequest)
  }

  

  val createImageEditOperation = (apiOperation[ImagesResponse]("createImageEdit")
    summary "Creates an edited or extended image given an original image and a prompt."
    parameters(formParam[File]("image").description(""), formParam[String]("prompt").description(""), formParam[File]("mask").description("").optional, formParam[CreateImageEditRequestModel]("model").description("").optional, formParam[Int]("n").description("").optional.defaultValue(1), formParam[String]("size").description("").optional.defaultValue(1024x1024), formParam[String]("responseFormat").description("").optional.defaultValue(url), formParam[String]("user").description("").optional)
  )

  post("/images/edits", operation(createImageEditOperation)) {
    val image = fileParams("image")
    //println("image: " + image)
    //println("prompt: " + prompt)
    val mask = fileParams("mask")
    //println("mask: " + mask)
    //println("model: " + model)
    //println("n: " + n)
    //println("size: " + size)
    //println("responseFormat: " + responseFormat)
    //println("user: " + user)
  }

  

  val createImageVariationOperation = (apiOperation[ImagesResponse]("createImageVariation")
    summary "Creates a variation of a given image."
    parameters(formParam[File]("image").description(""), formParam[CreateImageEditRequestModel]("model").description("").optional, formParam[Int]("n").description("").optional.defaultValue(1), formParam[String]("responseFormat").description("").optional.defaultValue(url), formParam[String]("size").description("").optional.defaultValue(1024x1024), formParam[String]("user").description("").optional)
  )

  post("/images/variations", operation(createImageVariationOperation)) {
    val image = fileParams("image")
    //println("image: " + image)
    //println("model: " + model)
    //println("n: " + n)
    //println("responseFormat: " + responseFormat)
    //println("size: " + size)
    //println("user: " + user)
  }

}
