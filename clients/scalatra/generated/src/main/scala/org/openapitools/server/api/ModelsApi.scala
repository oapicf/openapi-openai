/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.DeleteModelResponse
import org.openapitools.server.model.ListModelsResponse
import org.openapitools.server.model.Model

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class ModelsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "ModelsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val deleteModelOperation = (apiOperation[DeleteModelResponse]("deleteModel")
    summary "Delete a fine-tuned model. You must have the Owner role in your organization to delete a model."
    parameters(pathParam[String]("model").description(""))
  )

  delete("/models/:model", operation(deleteModelOperation)) {
    val model = params.getOrElse("model", halt(400))
    //println("model: " + model)
  }

  

  val listModelsOperation = (apiOperation[ListModelsResponse]("listModels")
    summary "Lists the currently available models, and provides basic information about each one such as the owner and availability."
    parameters()
  )

  get("/models", operation(listModelsOperation)) {
  }

  

  val retrieveModelOperation = (apiOperation[Model]("retrieveModel")
    summary "Retrieves a model instance, providing basic information about the model such as the owner and permissioning."
    parameters(pathParam[String]("model").description(""))
  )

  get("/models/:model", operation(retrieveModelOperation)) {
    val model = params.getOrElse("model", halt(400))
    //println("model: " + model)
  }

}
