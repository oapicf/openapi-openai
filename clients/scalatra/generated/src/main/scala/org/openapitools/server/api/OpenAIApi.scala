/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.CreateChatCompletionRequest
import org.openapitools.server.model.CreateChatCompletionResponse
import org.openapitools.server.model.CreateCompletionRequest
import org.openapitools.server.model.CreateCompletionResponse
import org.openapitools.server.model.CreateEditRequest
import org.openapitools.server.model.CreateEditResponse
import org.openapitools.server.model.CreateEmbeddingRequest
import org.openapitools.server.model.CreateEmbeddingResponse
import org.openapitools.server.model.CreateFineTuneRequest
import org.openapitools.server.model.CreateImageRequest
import org.openapitools.server.model.CreateModerationRequest
import org.openapitools.server.model.CreateModerationResponse
import org.openapitools.server.model.CreateTranscriptionRequestModel
import org.openapitools.server.model.CreateTranscriptionResponse
import org.openapitools.server.model.CreateTranslationResponse
import org.openapitools.server.model.DeleteFileResponse
import org.openapitools.server.model.DeleteModelResponse
import java.io.File
import org.openapitools.server.model.FineTune
import org.openapitools.server.model.ImagesResponse
import org.openapitools.server.model.ListFilesResponse
import org.openapitools.server.model.ListFineTuneEventsResponse
import org.openapitools.server.model.ListFineTunesResponse
import org.openapitools.server.model.ListModelsResponse
import org.openapitools.server.model.Model
import org.openapitools.server.model.OpenAIFile

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class OpenAIApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "OpenAIApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val cancelFineTuneOperation = (apiOperation[FineTune]("cancelFineTune")
    summary "Immediately cancel a fine-tune job. "
    parameters(pathParam[String]("fineTuneId").description(""))
  )

  post("/fine-tunes/:fine_tune_id/cancel", operation(cancelFineTuneOperation)) {
    val fineTuneId = params.getOrElse("fineTuneId", halt(400))
    //println("fineTuneId: " + fineTuneId)
  }

  

  val createChatCompletionOperation = (apiOperation[CreateChatCompletionResponse]("createChatCompletion")
    summary "Creates a model response for the given chat conversation."
    parameters(bodyParam[CreateChatCompletionRequest]("createChatCompletionRequest").description(""))
  )

  post("/chat/completions", operation(createChatCompletionOperation)) {
    //println("createChatCompletionRequest: " + createChatCompletionRequest)
  }

  

  val createCompletionOperation = (apiOperation[CreateCompletionResponse]("createCompletion")
    summary "Creates a completion for the provided prompt and parameters."
    parameters(bodyParam[CreateCompletionRequest]("createCompletionRequest").description(""))
  )

  post("/completions", operation(createCompletionOperation)) {
    //println("createCompletionRequest: " + createCompletionRequest)
  }

  

  val createEditOperation = (apiOperation[CreateEditResponse]("createEdit")
    summary "Creates a new edit for the provided input, instruction, and parameters."
    parameters(bodyParam[CreateEditRequest]("createEditRequest").description(""))
  )

  post("/edits", operation(createEditOperation)) {
    //println("createEditRequest: " + createEditRequest)
  }

  

  val createEmbeddingOperation = (apiOperation[CreateEmbeddingResponse]("createEmbedding")
    summary "Creates an embedding vector representing the input text."
    parameters(bodyParam[CreateEmbeddingRequest]("createEmbeddingRequest").description(""))
  )

  post("/embeddings", operation(createEmbeddingOperation)) {
    //println("createEmbeddingRequest: " + createEmbeddingRequest)
  }

  

  val createFileOperation = (apiOperation[OpenAIFile]("createFile")
    summary "Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. "
    parameters(formParam[File]("file").description(""), formParam[String]("purpose").description(""))
  )

  post("/files", operation(createFileOperation)) {
    val file = fileParams("file")
    //println("file: " + file)
    //println("purpose: " + purpose)
  }

  

  val createFineTuneOperation = (apiOperation[FineTune]("createFineTune")
    summary "Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) "
    parameters(bodyParam[CreateFineTuneRequest]("createFineTuneRequest").description(""))
  )

  post("/fine-tunes", operation(createFineTuneOperation)) {
    //println("createFineTuneRequest: " + createFineTuneRequest)
  }

  

  val createImageOperation = (apiOperation[ImagesResponse]("createImage")
    summary "Creates an image given a prompt."
    parameters(bodyParam[CreateImageRequest]("createImageRequest").description(""))
  )

  post("/images/generations", operation(createImageOperation)) {
    //println("createImageRequest: " + createImageRequest)
  }

  

  val createImageEditOperation = (apiOperation[ImagesResponse]("createImageEdit")
    summary "Creates an edited or extended image given an original image and a prompt."
    parameters(formParam[File]("image").description(""), formParam[String]("prompt").description(""), formParam[File]("mask").description("").optional, formParam[Int]("n").description("").optional.defaultValue(1), formParam[String]("size").description("").optional.defaultValue(1024x1024), formParam[String]("responseFormat").description("").optional.defaultValue(url), formParam[String]("user").description("").optional)
  )

  post("/images/edits", operation(createImageEditOperation)) {
    val image = fileParams("image")
    //println("image: " + image)
    //println("prompt: " + prompt)
    val mask = fileParams("mask")
    //println("mask: " + mask)
    //println("n: " + n)
    //println("size: " + size)
    //println("responseFormat: " + responseFormat)
    //println("user: " + user)
  }

  

  val createImageVariationOperation = (apiOperation[ImagesResponse]("createImageVariation")
    summary "Creates a variation of a given image."
    parameters(formParam[File]("image").description(""), formParam[Int]("n").description("").optional.defaultValue(1), formParam[String]("size").description("").optional.defaultValue(1024x1024), formParam[String]("responseFormat").description("").optional.defaultValue(url), formParam[String]("user").description("").optional)
  )

  post("/images/variations", operation(createImageVariationOperation)) {
    val image = fileParams("image")
    //println("image: " + image)
    //println("n: " + n)
    //println("size: " + size)
    //println("responseFormat: " + responseFormat)
    //println("user: " + user)
  }

  

  val createModerationOperation = (apiOperation[CreateModerationResponse]("createModeration")
    summary "Classifies if text violates OpenAI's Content Policy"
    parameters(bodyParam[CreateModerationRequest]("createModerationRequest").description(""))
  )

  post("/moderations", operation(createModerationOperation)) {
    //println("createModerationRequest: " + createModerationRequest)
  }

  

  val createTranscriptionOperation = (apiOperation[CreateTranscriptionResponse]("createTranscription")
    summary "Transcribes audio into the input language."
    parameters(formParam[File]("file").description(""), formParam[CreateTranscriptionRequestModel]("model").description(""), formParam[String]("prompt").description("").optional, formParam[String]("responseFormat").description("").optional.defaultValue(json), formParam[Double]("temperature").description("").optional.defaultValue(0), formParam[String]("language").description("").optional)
  )

  post("/audio/transcriptions", operation(createTranscriptionOperation)) {
    val file = fileParams("file")
    //println("file: " + file)
    //println("model: " + model)
    //println("prompt: " + prompt)
    //println("responseFormat: " + responseFormat)
    //println("temperature: " + temperature)
    //println("language: " + language)
  }

  

  val createTranslationOperation = (apiOperation[CreateTranslationResponse]("createTranslation")
    summary "Translates audio into English."
    parameters(formParam[File]("file").description(""), formParam[CreateTranscriptionRequestModel]("model").description(""), formParam[String]("prompt").description("").optional, formParam[String]("responseFormat").description("").optional.defaultValue(json), formParam[Double]("temperature").description("").optional.defaultValue(0))
  )

  post("/audio/translations", operation(createTranslationOperation)) {
    val file = fileParams("file")
    //println("file: " + file)
    //println("model: " + model)
    //println("prompt: " + prompt)
    //println("responseFormat: " + responseFormat)
    //println("temperature: " + temperature)
  }

  

  val deleteFileOperation = (apiOperation[DeleteFileResponse]("deleteFile")
    summary "Delete a file."
    parameters(pathParam[String]("fileId").description(""))
  )

  delete("/files/:file_id", operation(deleteFileOperation)) {
    val fileId = params.getOrElse("fileId", halt(400))
    //println("fileId: " + fileId)
  }

  

  val deleteModelOperation = (apiOperation[DeleteModelResponse]("deleteModel")
    summary "Delete a fine-tuned model. You must have the Owner role in your organization."
    parameters(pathParam[String]("model").description(""))
  )

  delete("/models/:model", operation(deleteModelOperation)) {
    val model = params.getOrElse("model", halt(400))
    //println("model: " + model)
  }

  

  val downloadFileOperation = (apiOperation[String]("downloadFile")
    summary "Returns the contents of the specified file"
    parameters(pathParam[String]("fileId").description(""))
  )

  get("/files/:file_id/content", operation(downloadFileOperation)) {
    val fileId = params.getOrElse("fileId", halt(400))
    //println("fileId: " + fileId)
  }

  

  val listFilesOperation = (apiOperation[ListFilesResponse]("listFiles")
    summary "Returns a list of files that belong to the user's organization."
    parameters()
  )

  get("/files", operation(listFilesOperation)) {
  }

  

  val listFineTuneEventsOperation = (apiOperation[ListFineTuneEventsResponse]("listFineTuneEvents")
    summary "Get fine-grained status updates for a fine-tune job. "
    parameters(pathParam[String]("fineTuneId").description(""), queryParam[Boolean]("stream").description("").optional.defaultValue(false))
  )

  get("/fine-tunes/:fine_tune_id/events", operation(listFineTuneEventsOperation)) {
    val fineTuneId = params.getOrElse("fineTuneId", halt(400))
    //println("fineTuneId: " + fineTuneId)
            val stream = params.getAs[Boolean]("stream")

    //println("stream: " + stream)
  }

  

  val listFineTunesOperation = (apiOperation[ListFineTunesResponse]("listFineTunes")
    summary "List your organization's fine-tuning jobs "
    parameters()
  )

  get("/fine-tunes", operation(listFineTunesOperation)) {
  }

  

  val listModelsOperation = (apiOperation[ListModelsResponse]("listModels")
    summary "Lists the currently available models, and provides basic information about each one such as the owner and availability."
    parameters()
  )

  get("/models", operation(listModelsOperation)) {
  }

  

  val retrieveFileOperation = (apiOperation[OpenAIFile]("retrieveFile")
    summary "Returns information about a specific file."
    parameters(pathParam[String]("fileId").description(""))
  )

  get("/files/:file_id", operation(retrieveFileOperation)) {
    val fileId = params.getOrElse("fileId", halt(400))
    //println("fileId: " + fileId)
  }

  

  val retrieveFineTuneOperation = (apiOperation[FineTune]("retrieveFineTune")
    summary "Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) "
    parameters(pathParam[String]("fineTuneId").description(""))
  )

  get("/fine-tunes/:fine_tune_id", operation(retrieveFineTuneOperation)) {
    val fineTuneId = params.getOrElse("fineTuneId", halt(400))
    //println("fineTuneId: " + fineTuneId)
  }

  

  val retrieveModelOperation = (apiOperation[Model]("retrieveModel")
    summary "Retrieves a model instance, providing basic information about the model such as the owner and permissioning."
    parameters(pathParam[String]("model").description(""))
  )

  get("/models/:model", operation(retrieveModelOperation)) {
    val model = params.getOrElse("model", halt(400))
    //println("model: " + model)
  }

}
