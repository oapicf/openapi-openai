package org.openapitools.client.api

import argonaut._
import argonaut.EncodeJson._
import argonaut.DecodeJson._

import org.http4s.{EntityDecoder, EntityEncoder}
import org.http4s.argonaut._
import org.joda.time.DateTime


import ChatCompletionRequestMessage._

case class ChatCompletionRequestMessage (
  /* The contents of the function message. */
  content: String,
/* The role of the messages author, in this case `function`. */
  role: Role,
/* The name of the function to call. */
  name: String,
/* The tool calls generated by the model, such as function calls. */
  toolCalls: Option[List[ChatCompletionMessageToolCall]],
functionCall: Option[ChatCompletionRequestAssistantMessageFunctionCall],
/* Tool call that this message is responding to. */
  toolCallId: String)

object ChatCompletionRequestMessage {
  import DateTimeCodecs._
  sealed trait Role
  case object Function extends Role

  object Role {
    def toRole(s: String): Option[Role] = s match {
      case "Function" => Some(Function)
      case _ => None
    }

    def fromRole(x: Role): String = x match {
      case Function => "Function"
    }
  }

  implicit val RoleEnumEncoder: EncodeJson[Role] =
    EncodeJson[Role](is => StringEncodeJson(Role.fromRole(is)))

  implicit val RoleEnumDecoder: DecodeJson[Role] =
    DecodeJson.optionDecoder[Role](n => n.string.flatMap(jStr => Role.toRole(jStr)), "Role failed to de-serialize")

  implicit val ChatCompletionRequestMessageCodecJson: CodecJson[ChatCompletionRequestMessage] = CodecJson.derive[ChatCompletionRequestMessage]
  implicit val ChatCompletionRequestMessageDecoder: EntityDecoder[ChatCompletionRequestMessage] = jsonOf[ChatCompletionRequestMessage]
  implicit val ChatCompletionRequestMessageEncoder: EntityEncoder[ChatCompletionRequestMessage] = jsonEncoderOf[ChatCompletionRequestMessage]
}
