package org.openapitools.client.api

import argonaut._
import argonaut.EncodeJson._
import argonaut.DecodeJson._

import org.http4s.{EntityDecoder, EntityEncoder}
import org.http4s.argonaut._
import org.joda.time.DateTime


import CreateEmbeddingResponse._

case class CreateEmbeddingResponse (
  /* The list of embeddings generated by the model. */
  data: List[Embedding],
/* The name of the model used to generate the embedding. */
  model: String,
/* The object type, which is always \"list\". */
  `object`: `Object`,
usage: CreateEmbeddingResponseUsage)

object CreateEmbeddingResponse {
  import DateTimeCodecs._
  sealed trait `Object`
  case object List extends `Object`

  object `Object` {
    def to`Object`(s: String): Option[`Object`] = s match {
      case "List" => Some(List)
      case _ => None
    }

    def from`Object`(x: `Object`): String = x match {
      case List => "List"
    }
  }

  implicit val `Object`EnumEncoder: EncodeJson[`Object`] =
    EncodeJson[`Object`](is => StringEncodeJson(`Object`.from`Object`(is)))

  implicit val `Object`EnumDecoder: DecodeJson[`Object`] =
    DecodeJson.optionDecoder[`Object`](n => n.string.flatMap(jStr => `Object`.to`Object`(jStr)), "`Object` failed to de-serialize")

  implicit val CreateEmbeddingResponseCodecJson: CodecJson[CreateEmbeddingResponse] = CodecJson.derive[CreateEmbeddingResponse]
  implicit val CreateEmbeddingResponseDecoder: EntityDecoder[CreateEmbeddingResponse] = jsonOf[CreateEmbeddingResponse]
  implicit val CreateEmbeddingResponseEncoder: EntityEncoder[CreateEmbeddingResponse] = jsonEncoderOf[CreateEmbeddingResponse]
}
