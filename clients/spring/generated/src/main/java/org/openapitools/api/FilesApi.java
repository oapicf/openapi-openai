/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.DeleteFileResponse;
import org.openapitools.model.ListFilesResponse;
import org.openapitools.model.OpenAIFile;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-14T13:54:16.789070334Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "Files", description = "Files are used to upload documents that can be used with features like Assistants and Fine-tuning.")
public interface FilesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /files : Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports &#x60;.jsonl&#x60; files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. 
     *
     * @param file The File object (not file name) to be uploaded.  (required)
     * @param purpose The intended purpose of the uploaded file.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tuning) and \\\&quot;assistants\\\&quot; for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning.  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createFile",
        summary = "Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. ",
        tags = { "Files" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenAIFile.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/files",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<OpenAIFile> createFile(
        @Parameter(name = "file", description = "The File object (not file name) to be uploaded. ", required = true) @RequestPart(value = "file", required = true) MultipartFile file,
        @Parameter(name = "purpose", description = "The intended purpose of the uploaded file.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tuning) and \\\"assistants\\\" for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning. ", required = true) @Valid @RequestParam(value = "purpose", required = true) String purpose
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"filename\" : \"filename\", \"purpose\" : \"fine-tune\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"status_details\", \"object\" : \"file\", \"status\" : \"uploaded\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /files/{file_id} : Delete a file.
     *
     * @param fileId The ID of the file to use for this request. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteFile",
        summary = "Delete a file.",
        tags = { "Files" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteFileResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/files/{file_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DeleteFileResponse> deleteFile(
        @Parameter(name = "file_id", description = "The ID of the file to use for this request.", required = true, in = ParameterIn.PATH) @PathVariable("file_id") String fileId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"deleted\" : true, \"id\" : \"id\", \"object\" : \"file\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /files/{file_id}/content : Returns the contents of the specified file.
     *
     * @param fileId The ID of the file to use for this request. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "downloadFile",
        summary = "Returns the contents of the specified file.",
        tags = { "Files" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/files/{file_id}/content",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> downloadFile(
        @Parameter(name = "file_id", description = "The ID of the file to use for this request.", required = true, in = ParameterIn.PATH) @PathVariable("file_id") String fileId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /files : Returns a list of files that belong to the user&#39;s organization.
     *
     * @param purpose Only return files with the given purpose. (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listFiles",
        summary = "Returns a list of files that belong to the user's organization.",
        tags = { "Files" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListFilesResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/files",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ListFilesResponse> listFiles(
        @Parameter(name = "purpose", description = "Only return files with the given purpose.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "purpose", required = false) String purpose
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"filename\" : \"filename\", \"purpose\" : \"fine-tune\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"status_details\", \"object\" : \"file\", \"status\" : \"uploaded\" }, { \"filename\" : \"filename\", \"purpose\" : \"fine-tune\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"status_details\", \"object\" : \"file\", \"status\" : \"uploaded\" } ], \"object\" : \"list\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /files/{file_id} : Returns information about a specific file.
     *
     * @param fileId The ID of the file to use for this request. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "retrieveFile",
        summary = "Returns information about a specific file.",
        tags = { "Files" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenAIFile.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/files/{file_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<OpenAIFile> retrieveFile(
        @Parameter(name = "file_id", description = "The ID of the file to use for this request.", required = true, in = ParameterIn.PATH) @PathVariable("file_id") String fileId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"filename\" : \"filename\", \"purpose\" : \"fine-tune\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"status_details\", \"object\" : \"file\", \"status\" : \"uploaded\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
