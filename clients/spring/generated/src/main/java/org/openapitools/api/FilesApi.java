/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.DeleteFileResponse;
import org.openapitools.model.ListFilesResponse;
import org.openapitools.model.OpenAIFile;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-16T01:17:43.141820780Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "OpenAI", description = "The OpenAI REST API")
public interface FilesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /files : Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. 
     *
     * @param file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\&quot;fine-tune\\\&quot;, each line is a JSON record with \\\&quot;prompt\\\&quot; and \\\&quot;completion\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).  (required)
     * @param purpose The intended purpose of the uploaded documents.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createFile",
        summary = "Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. ",
        tags = { "OpenAI" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenAIFile.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/files",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<OpenAIFile> createFile(
        @Parameter(name = "file", description = "Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the `purpose` is set to \\\"fine-tune\\\", each line is a JSON record with \\\"prompt\\\" and \\\"completion\\\" fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data). ", required = true) @RequestPart(value = "file", required = true) MultipartFile file,
        @Parameter(name = "purpose", description = "The intended purpose of the uploaded documents.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. ", required = true) @Valid @RequestParam(value = "purpose", required = true) String purpose
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /files/{file_id} : Delete a file.
     *
     * @param fileId The ID of the file to use for this request (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteFile",
        summary = "Delete a file.",
        tags = { "OpenAI" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteFileResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/files/{file_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DeleteFileResponse> deleteFile(
        @Parameter(name = "file_id", description = "The ID of the file to use for this request", required = true, in = ParameterIn.PATH) @PathVariable("file_id") String fileId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"deleted\" : true, \"id\" : \"id\", \"object\" : \"object\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /files/{file_id}/content : Returns the contents of the specified file
     *
     * @param fileId The ID of the file to use for this request (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "downloadFile",
        summary = "Returns the contents of the specified file",
        tags = { "OpenAI" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/files/{file_id}/content",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> downloadFile(
        @Parameter(name = "file_id", description = "The ID of the file to use for this request", required = true, in = ParameterIn.PATH) @PathVariable("file_id") String fileId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /files : Returns a list of files that belong to the user&#39;s organization.
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listFiles",
        summary = "Returns a list of files that belong to the user's organization.",
        tags = { "OpenAI" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListFilesResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/files",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ListFilesResponse> listFiles(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"object\" : \"object\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /files/{file_id} : Returns information about a specific file.
     *
     * @param fileId The ID of the file to use for this request (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "retrieveFile",
        summary = "Returns information about a specific file.",
        tags = { "OpenAI" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenAIFile.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/files/{file_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<OpenAIFile> retrieveFile(
        @Parameter(name = "file_id", description = "The ID of the file to use for this request", required = true, in = ParameterIn.PATH) @PathVariable("file_id") String fileId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
