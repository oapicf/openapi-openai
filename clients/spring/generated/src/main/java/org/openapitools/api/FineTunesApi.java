/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CreateFineTuneRequest;
import org.openapitools.model.FineTune;
import org.openapitools.model.ListFineTuneEventsResponse;
import org.openapitools.model.ListFineTunesResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-16T01:17:43.141820780Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "OpenAI", description = "The OpenAI REST API")
public interface FineTunesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /fine-tunes/{fine_tune_id}/cancel : Immediately cancel a fine-tune job. 
     *
     * @param fineTuneId The ID of the fine-tune job to cancel  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cancelFineTune",
        summary = "Immediately cancel a fine-tune job. ",
        tags = { "OpenAI" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FineTune.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/fine-tunes/{fine_tune_id}/cancel",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FineTune> cancelFineTune(
        @Parameter(name = "fine_tune_id", description = "The ID of the fine-tune job to cancel ", required = true, in = ParameterIn.PATH) @PathVariable("fine_tune_id") String fineTuneId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"hyperparams\" : \"{}\", \"fine_tuned_model\" : \"fine_tuned_model\", \"created_at\" : 0, \"training_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"updated_at\" : 6, \"organization_id\" : \"organization_id\", \"model\" : \"model\", \"id\" : \"id\", \"events\" : [ { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" }, { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" } ], \"object\" : \"object\", \"status\" : \"status\", \"validation_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /fine-tunes : Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
     *
     * @param createFineTuneRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createFineTune",
        summary = "Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) ",
        tags = { "OpenAI" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FineTune.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/fine-tunes",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FineTune> createFineTune(
        @Parameter(name = "CreateFineTuneRequest", description = "", required = true) @Valid @RequestBody CreateFineTuneRequest createFineTuneRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"hyperparams\" : \"{}\", \"fine_tuned_model\" : \"fine_tuned_model\", \"created_at\" : 0, \"training_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"updated_at\" : 6, \"organization_id\" : \"organization_id\", \"model\" : \"model\", \"id\" : \"id\", \"events\" : [ { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" }, { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" } ], \"object\" : \"object\", \"status\" : \"status\", \"validation_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /fine-tunes/{fine_tune_id}/events : Get fine-grained status updates for a fine-tune job. 
     *
     * @param fineTuneId The ID of the fine-tune job to get events for.  (required)
     * @param stream Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.  (optional, default to false)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listFineTuneEvents",
        summary = "Get fine-grained status updates for a fine-tune job. ",
        tags = { "OpenAI" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListFineTuneEventsResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fine-tunes/{fine_tune_id}/events",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ListFineTuneEventsResponse> listFineTuneEvents(
        @Parameter(name = "fine_tune_id", description = "The ID of the fine-tune job to get events for. ", required = true, in = ParameterIn.PATH) @PathVariable("fine_tune_id") String fineTuneId,
        @Parameter(name = "stream", description = "Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a `data: [DONE]` message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "stream", required = false, defaultValue = "false") Boolean stream
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" }, { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" } ], \"object\" : \"object\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /fine-tunes : List your organization&#39;s fine-tuning jobs 
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listFineTunes",
        summary = "List your organization's fine-tuning jobs ",
        tags = { "OpenAI" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListFineTunesResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fine-tunes",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ListFineTunesResponse> listFineTunes(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"result_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"hyperparams\" : \"{}\", \"fine_tuned_model\" : \"fine_tuned_model\", \"created_at\" : 0, \"training_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"updated_at\" : 6, \"organization_id\" : \"organization_id\", \"model\" : \"model\", \"id\" : \"id\", \"events\" : [ { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" }, { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" } ], \"object\" : \"object\", \"status\" : \"status\", \"validation_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ] }, { \"result_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"hyperparams\" : \"{}\", \"fine_tuned_model\" : \"fine_tuned_model\", \"created_at\" : 0, \"training_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"updated_at\" : 6, \"organization_id\" : \"organization_id\", \"model\" : \"model\", \"id\" : \"id\", \"events\" : [ { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" }, { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" } ], \"object\" : \"object\", \"status\" : \"status\", \"validation_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ] } ], \"object\" : \"object\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /fine-tunes/{fine_tune_id} : Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
     *
     * @param fineTuneId The ID of the fine-tune job  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "retrieveFineTune",
        summary = "Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) ",
        tags = { "OpenAI" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FineTune.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fine-tunes/{fine_tune_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FineTune> retrieveFineTune(
        @Parameter(name = "fine_tune_id", description = "The ID of the fine-tune job ", required = true, in = ParameterIn.PATH) @PathVariable("fine_tune_id") String fineTuneId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"hyperparams\" : \"{}\", \"fine_tuned_model\" : \"fine_tuned_model\", \"created_at\" : 0, \"training_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"updated_at\" : 6, \"organization_id\" : \"organization_id\", \"model\" : \"model\", \"id\" : \"id\", \"events\" : [ { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" }, { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" } ], \"object\" : \"object\", \"status\" : \"status\", \"validation_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
