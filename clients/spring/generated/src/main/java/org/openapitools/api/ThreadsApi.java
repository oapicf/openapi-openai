/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CreateMessageRequest;
import org.openapitools.model.CreateRunRequest;
import org.openapitools.model.CreateThreadAndRunRequest;
import org.openapitools.model.CreateThreadRequest;
import org.openapitools.model.DeleteThreadResponse;
import org.openapitools.model.ListMessageFilesResponse;
import org.openapitools.model.ListMessagesResponse;
import org.openapitools.model.ListRunStepsResponse;
import org.openapitools.model.ListRunsResponse;
import org.openapitools.model.MessageFileObject;
import org.openapitools.model.MessageObject;
import org.openapitools.model.ModifyMessageRequest;
import org.openapitools.model.ModifyRunRequest;
import org.openapitools.model.ModifyThreadRequest;
import org.openapitools.model.RunObject;
import org.openapitools.model.RunStepObject;
import org.openapitools.model.SubmitToolOutputsRunRequest;
import org.openapitools.model.ThreadObject;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-03T11:16:04.738790927Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "Assistants", description = "Build Assistants that can call models and use tools.")
public interface ThreadsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /threads/{thread_id}/runs/{run_id}/cancel : Cancels a run that is &#x60;in_progress&#x60;.
     *
     * @param threadId The ID of the thread to which this run belongs. (required)
     * @param runId The ID of the run to cancel. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cancelRun",
        summary = "Cancels a run that is `in_progress`.",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RunObject.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/threads/{thread_id}/runs/{run_id}/cancel",
        produces = { "application/json" }
    )
    
    default ResponseEntity<RunObject> cancelRun(
        @Parameter(name = "thread_id", description = "The ID of the thread to which this run belongs.", required = true, in = ParameterIn.PATH) @PathVariable("thread_id") String threadId,
        @Parameter(name = "run_id", description = "The ID of the run to cancel.", required = true, in = ParameterIn.PATH) @PathVariable("run_id") String runId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"cancelled_at\" : 5, \"instructions\" : \"instructions\", \"metadata\" : \"{}\", \"assistant_id\" : \"assistant_id\", \"required_action\" : { \"submit_tool_outputs\" : { \"tool_calls\" : [ { \"function\" : { \"name\" : \"name\", \"arguments\" : \"arguments\" }, \"id\" : \"id\", \"type\" : \"function\" }, { \"function\" : { \"name\" : \"name\", \"arguments\" : \"arguments\" }, \"id\" : \"id\", \"type\" : \"function\" } ] }, \"type\" : \"submit_tool_outputs\" }, \"usage\" : { \"completion_tokens\" : 7, \"prompt_tokens\" : 9, \"total_tokens\" : 3 }, \"created_at\" : 0, \"tools\" : [ { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" } ], \"max_completion_tokens\" : 256, \"thread_id\" : \"thread_id\", \"expires_at\" : 6, \"response_format\" : \"none\", \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"temperature\" : 2.027123023002322, \"tool_choice\" : \"none\", \"model\" : \"model\", \"id\" : \"id\", \"last_error\" : { \"code\" : \"server_error\", \"message\" : \"message\" }, \"incomplete_details\" : { \"reason\" : \"max_completion_tokens\" }, \"truncation_strategy\" : { \"last_messages\" : 1, \"type\" : \"auto\" }, \"completed_at\" : 2, \"started_at\" : 1, \"failed_at\" : 5, \"max_prompt_tokens\" : 256, \"object\" : \"thread.run\", \"status\" : \"queued\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /threads/{thread_id}/messages : Create a message.
     *
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to create a message for. (required)
     * @param createMessageRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createMessage",
        summary = "Create a message.",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageObject.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/threads/{thread_id}/messages",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<MessageObject> createMessage(
        @Parameter(name = "thread_id", description = "The ID of the [thread](/docs/api-reference/threads) to create a message for.", required = true, in = ParameterIn.PATH) @PathVariable("thread_id") String threadId,
        @Parameter(name = "CreateMessageRequest", description = "", required = true) @Valid @RequestBody CreateMessageRequest createMessageRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metadata\" : \"{}\", \"role\" : \"user\", \"assistant_id\" : \"assistant_id\", \"run_id\" : \"run_id\", \"created_at\" : 0, \"content\" : [ { \"image_file\" : { \"file_id\" : \"file_id\" }, \"type\" : \"image_file\" }, { \"image_file\" : { \"file_id\" : \"file_id\" }, \"type\" : \"image_file\" } ], \"completed_at\" : 6, \"thread_id\" : \"thread_id\", \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ], \"id\" : \"id\", \"incomplete_at\" : 1, \"incomplete_details\" : { \"reason\" : \"content_filter\" }, \"object\" : \"thread.message\", \"status\" : \"in_progress\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /threads/{thread_id}/runs : Create a run.
     *
     * @param threadId The ID of the thread to run. (required)
     * @param createRunRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createRun",
        summary = "Create a run.",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RunObject.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/threads/{thread_id}/runs",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<RunObject> createRun(
        @Parameter(name = "thread_id", description = "The ID of the thread to run.", required = true, in = ParameterIn.PATH) @PathVariable("thread_id") String threadId,
        @Parameter(name = "CreateRunRequest", description = "", required = true) @Valid @RequestBody CreateRunRequest createRunRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"cancelled_at\" : 5, \"instructions\" : \"instructions\", \"metadata\" : \"{}\", \"assistant_id\" : \"assistant_id\", \"required_action\" : { \"submit_tool_outputs\" : { \"tool_calls\" : [ { \"function\" : { \"name\" : \"name\", \"arguments\" : \"arguments\" }, \"id\" : \"id\", \"type\" : \"function\" }, { \"function\" : { \"name\" : \"name\", \"arguments\" : \"arguments\" }, \"id\" : \"id\", \"type\" : \"function\" } ] }, \"type\" : \"submit_tool_outputs\" }, \"usage\" : { \"completion_tokens\" : 7, \"prompt_tokens\" : 9, \"total_tokens\" : 3 }, \"created_at\" : 0, \"tools\" : [ { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" } ], \"max_completion_tokens\" : 256, \"thread_id\" : \"thread_id\", \"expires_at\" : 6, \"response_format\" : \"none\", \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"temperature\" : 2.027123023002322, \"tool_choice\" : \"none\", \"model\" : \"model\", \"id\" : \"id\", \"last_error\" : { \"code\" : \"server_error\", \"message\" : \"message\" }, \"incomplete_details\" : { \"reason\" : \"max_completion_tokens\" }, \"truncation_strategy\" : { \"last_messages\" : 1, \"type\" : \"auto\" }, \"completed_at\" : 2, \"started_at\" : 1, \"failed_at\" : 5, \"max_prompt_tokens\" : 256, \"object\" : \"thread.run\", \"status\" : \"queued\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /threads : Create a thread.
     *
     * @param createThreadRequest  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createThread",
        summary = "Create a thread.",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ThreadObject.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/threads",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ThreadObject> createThread(
        @Parameter(name = "CreateThreadRequest", description = "") @Valid @RequestBody(required = false) CreateThreadRequest createThreadRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metadata\" : \"{}\", \"created_at\" : 0, \"id\" : \"id\", \"object\" : \"thread\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /threads/runs : Create a thread and run it in one request.
     *
     * @param createThreadAndRunRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createThreadAndRun",
        summary = "Create a thread and run it in one request.",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RunObject.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/threads/runs",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<RunObject> createThreadAndRun(
        @Parameter(name = "CreateThreadAndRunRequest", description = "", required = true) @Valid @RequestBody CreateThreadAndRunRequest createThreadAndRunRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"cancelled_at\" : 5, \"instructions\" : \"instructions\", \"metadata\" : \"{}\", \"assistant_id\" : \"assistant_id\", \"required_action\" : { \"submit_tool_outputs\" : { \"tool_calls\" : [ { \"function\" : { \"name\" : \"name\", \"arguments\" : \"arguments\" }, \"id\" : \"id\", \"type\" : \"function\" }, { \"function\" : { \"name\" : \"name\", \"arguments\" : \"arguments\" }, \"id\" : \"id\", \"type\" : \"function\" } ] }, \"type\" : \"submit_tool_outputs\" }, \"usage\" : { \"completion_tokens\" : 7, \"prompt_tokens\" : 9, \"total_tokens\" : 3 }, \"created_at\" : 0, \"tools\" : [ { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" } ], \"max_completion_tokens\" : 256, \"thread_id\" : \"thread_id\", \"expires_at\" : 6, \"response_format\" : \"none\", \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"temperature\" : 2.027123023002322, \"tool_choice\" : \"none\", \"model\" : \"model\", \"id\" : \"id\", \"last_error\" : { \"code\" : \"server_error\", \"message\" : \"message\" }, \"incomplete_details\" : { \"reason\" : \"max_completion_tokens\" }, \"truncation_strategy\" : { \"last_messages\" : 1, \"type\" : \"auto\" }, \"completed_at\" : 2, \"started_at\" : 1, \"failed_at\" : 5, \"max_prompt_tokens\" : 256, \"object\" : \"thread.run\", \"status\" : \"queued\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /threads/{thread_id} : Delete a thread.
     *
     * @param threadId The ID of the thread to delete. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteThread",
        summary = "Delete a thread.",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteThreadResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/threads/{thread_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DeleteThreadResponse> deleteThread(
        @Parameter(name = "thread_id", description = "The ID of the thread to delete.", required = true, in = ParameterIn.PATH) @PathVariable("thread_id") String threadId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"deleted\" : true, \"id\" : \"id\", \"object\" : \"thread.deleted\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /threads/{thread_id}/messages/{message_id} : Retrieve a message.
     *
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this message belongs. (required)
     * @param messageId The ID of the message to retrieve. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getMessage",
        summary = "Retrieve a message.",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageObject.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/threads/{thread_id}/messages/{message_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MessageObject> getMessage(
        @Parameter(name = "thread_id", description = "The ID of the [thread](/docs/api-reference/threads) to which this message belongs.", required = true, in = ParameterIn.PATH) @PathVariable("thread_id") String threadId,
        @Parameter(name = "message_id", description = "The ID of the message to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("message_id") String messageId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metadata\" : \"{}\", \"role\" : \"user\", \"assistant_id\" : \"assistant_id\", \"run_id\" : \"run_id\", \"created_at\" : 0, \"content\" : [ { \"image_file\" : { \"file_id\" : \"file_id\" }, \"type\" : \"image_file\" }, { \"image_file\" : { \"file_id\" : \"file_id\" }, \"type\" : \"image_file\" } ], \"completed_at\" : 6, \"thread_id\" : \"thread_id\", \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ], \"id\" : \"id\", \"incomplete_at\" : 1, \"incomplete_details\" : { \"reason\" : \"content_filter\" }, \"object\" : \"thread.message\", \"status\" : \"in_progress\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /threads/{thread_id}/messages/{message_id}/files/{file_id} : Retrieves a message file.
     *
     * @param threadId The ID of the thread to which the message and File belong. (required)
     * @param messageId The ID of the message the file belongs to. (required)
     * @param fileId The ID of the file being retrieved. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getMessageFile",
        summary = "Retrieves a message file.",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageFileObject.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/threads/{thread_id}/messages/{message_id}/files/{file_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MessageFileObject> getMessageFile(
        @Parameter(name = "thread_id", description = "The ID of the thread to which the message and File belong.", required = true, in = ParameterIn.PATH) @PathVariable("thread_id") String threadId,
        @Parameter(name = "message_id", description = "The ID of the message the file belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("message_id") String messageId,
        @Parameter(name = "file_id", description = "The ID of the file being retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("file_id") String fileId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"created_at\" : 0, \"message_id\" : \"message_id\", \"id\" : \"id\", \"object\" : \"thread.message.file\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /threads/{thread_id}/runs/{run_id} : Retrieves a run.
     *
     * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run. (required)
     * @param runId The ID of the run to retrieve. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getRun",
        summary = "Retrieves a run.",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RunObject.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/threads/{thread_id}/runs/{run_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<RunObject> getRun(
        @Parameter(name = "thread_id", description = "The ID of the [thread](/docs/api-reference/threads) that was run.", required = true, in = ParameterIn.PATH) @PathVariable("thread_id") String threadId,
        @Parameter(name = "run_id", description = "The ID of the run to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("run_id") String runId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"cancelled_at\" : 5, \"instructions\" : \"instructions\", \"metadata\" : \"{}\", \"assistant_id\" : \"assistant_id\", \"required_action\" : { \"submit_tool_outputs\" : { \"tool_calls\" : [ { \"function\" : { \"name\" : \"name\", \"arguments\" : \"arguments\" }, \"id\" : \"id\", \"type\" : \"function\" }, { \"function\" : { \"name\" : \"name\", \"arguments\" : \"arguments\" }, \"id\" : \"id\", \"type\" : \"function\" } ] }, \"type\" : \"submit_tool_outputs\" }, \"usage\" : { \"completion_tokens\" : 7, \"prompt_tokens\" : 9, \"total_tokens\" : 3 }, \"created_at\" : 0, \"tools\" : [ { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" } ], \"max_completion_tokens\" : 256, \"thread_id\" : \"thread_id\", \"expires_at\" : 6, \"response_format\" : \"none\", \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"temperature\" : 2.027123023002322, \"tool_choice\" : \"none\", \"model\" : \"model\", \"id\" : \"id\", \"last_error\" : { \"code\" : \"server_error\", \"message\" : \"message\" }, \"incomplete_details\" : { \"reason\" : \"max_completion_tokens\" }, \"truncation_strategy\" : { \"last_messages\" : 1, \"type\" : \"auto\" }, \"completed_at\" : 2, \"started_at\" : 1, \"failed_at\" : 5, \"max_prompt_tokens\" : 256, \"object\" : \"thread.run\", \"status\" : \"queued\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /threads/{thread_id}/runs/{run_id}/steps/{step_id} : Retrieves a run step.
     *
     * @param threadId The ID of the thread to which the run and run step belongs. (required)
     * @param runId The ID of the run to which the run step belongs. (required)
     * @param stepId The ID of the run step to retrieve. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getRunStep",
        summary = "Retrieves a run step.",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RunStepObject.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/threads/{thread_id}/runs/{run_id}/steps/{step_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<RunStepObject> getRunStep(
        @Parameter(name = "thread_id", description = "The ID of the thread to which the run and run step belongs.", required = true, in = ParameterIn.PATH) @PathVariable("thread_id") String threadId,
        @Parameter(name = "run_id", description = "The ID of the run to which the run step belongs.", required = true, in = ParameterIn.PATH) @PathVariable("run_id") String runId,
        @Parameter(name = "step_id", description = "The ID of the run step to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("step_id") String stepId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"cancelled_at\" : 1, \"metadata\" : \"{}\", \"assistant_id\" : \"assistant_id\", \"run_id\" : \"run_id\", \"usage\" : { \"completion_tokens\" : 2, \"prompt_tokens\" : 7, \"total_tokens\" : 9 }, \"created_at\" : 0, \"expired_at\" : 6, \"type\" : \"message_creation\", \"step_details\" : { \"message_creation\" : { \"message_id\" : \"message_id\" }, \"type\" : \"message_creation\" }, \"completed_at\" : 5, \"thread_id\" : \"thread_id\", \"id\" : \"id\", \"last_error\" : { \"code\" : \"server_error\", \"message\" : \"message\" }, \"failed_at\" : 5, \"object\" : \"thread.run.step\", \"status\" : \"in_progress\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /threads/{thread_id} : Retrieves a thread.
     *
     * @param threadId The ID of the thread to retrieve. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getThread",
        summary = "Retrieves a thread.",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ThreadObject.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/threads/{thread_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ThreadObject> getThread(
        @Parameter(name = "thread_id", description = "The ID of the thread to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("thread_id") String threadId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metadata\" : \"{}\", \"created_at\" : 0, \"id\" : \"id\", \"object\" : \"thread\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /threads/{thread_id}/messages/{message_id}/files : Returns a list of message files.
     *
     * @param threadId The ID of the thread that the message and files belong to. (required)
     * @param messageId The ID of the message that the files belongs to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listMessageFiles",
        summary = "Returns a list of message files.",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListMessageFilesResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/threads/{thread_id}/messages/{message_id}/files",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ListMessageFilesResponse> listMessageFiles(
        @Parameter(name = "thread_id", description = "The ID of the thread that the message and files belong to.", required = true, in = ParameterIn.PATH) @PathVariable("thread_id") String threadId,
        @Parameter(name = "message_id", description = "The ID of the message that the files belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("message_id") String messageId,
        @Parameter(name = "limit", description = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Parameter(name = "order", description = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "order", required = false, defaultValue = "desc") String order,
        @Parameter(name = "after", description = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "after", required = false) String after,
        @Parameter(name = "before", description = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "before", required = false) String before
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"first_id\" : \"file-abc123\", \"data\" : [ { \"created_at\" : 0, \"message_id\" : \"message_id\", \"id\" : \"id\", \"object\" : \"thread.message.file\" }, { \"created_at\" : 0, \"message_id\" : \"message_id\", \"id\" : \"id\", \"object\" : \"thread.message.file\" } ], \"last_id\" : \"file-abc456\", \"has_more\" : false, \"object\" : \"list\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /threads/{thread_id}/messages : Returns a list of messages for a given thread.
     *
     * @param threadId The ID of the [thread](/docs/api-reference/threads) the messages belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param runId Filter messages by the run ID that generated them.  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listMessages",
        summary = "Returns a list of messages for a given thread.",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListMessagesResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/threads/{thread_id}/messages",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ListMessagesResponse> listMessages(
        @Parameter(name = "thread_id", description = "The ID of the [thread](/docs/api-reference/threads) the messages belong to.", required = true, in = ParameterIn.PATH) @PathVariable("thread_id") String threadId,
        @Parameter(name = "limit", description = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Parameter(name = "order", description = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "order", required = false, defaultValue = "desc") String order,
        @Parameter(name = "after", description = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "after", required = false) String after,
        @Parameter(name = "before", description = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "before", required = false) String before,
        @Parameter(name = "run_id", description = "Filter messages by the run ID that generated them. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "run_id", required = false) String runId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"first_id\" : \"msg_abc123\", \"data\" : [ { \"metadata\" : \"{}\", \"role\" : \"user\", \"assistant_id\" : \"assistant_id\", \"run_id\" : \"run_id\", \"created_at\" : 0, \"content\" : [ { \"image_file\" : { \"file_id\" : \"file_id\" }, \"type\" : \"image_file\" }, { \"image_file\" : { \"file_id\" : \"file_id\" }, \"type\" : \"image_file\" } ], \"completed_at\" : 6, \"thread_id\" : \"thread_id\", \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ], \"id\" : \"id\", \"incomplete_at\" : 1, \"incomplete_details\" : { \"reason\" : \"content_filter\" }, \"object\" : \"thread.message\", \"status\" : \"in_progress\" }, { \"metadata\" : \"{}\", \"role\" : \"user\", \"assistant_id\" : \"assistant_id\", \"run_id\" : \"run_id\", \"created_at\" : 0, \"content\" : [ { \"image_file\" : { \"file_id\" : \"file_id\" }, \"type\" : \"image_file\" }, { \"image_file\" : { \"file_id\" : \"file_id\" }, \"type\" : \"image_file\" } ], \"completed_at\" : 6, \"thread_id\" : \"thread_id\", \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ], \"id\" : \"id\", \"incomplete_at\" : 1, \"incomplete_details\" : { \"reason\" : \"content_filter\" }, \"object\" : \"thread.message\", \"status\" : \"in_progress\" } ], \"last_id\" : \"msg_abc123\", \"has_more\" : false, \"object\" : \"list\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /threads/{thread_id}/runs/{run_id}/steps : Returns a list of run steps belonging to a run.
     *
     * @param threadId The ID of the thread the run and run steps belong to. (required)
     * @param runId The ID of the run the run steps belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listRunSteps",
        summary = "Returns a list of run steps belonging to a run.",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListRunStepsResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/threads/{thread_id}/runs/{run_id}/steps",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ListRunStepsResponse> listRunSteps(
        @Parameter(name = "thread_id", description = "The ID of the thread the run and run steps belong to.", required = true, in = ParameterIn.PATH) @PathVariable("thread_id") String threadId,
        @Parameter(name = "run_id", description = "The ID of the run the run steps belong to.", required = true, in = ParameterIn.PATH) @PathVariable("run_id") String runId,
        @Parameter(name = "limit", description = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Parameter(name = "order", description = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "order", required = false, defaultValue = "desc") String order,
        @Parameter(name = "after", description = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "after", required = false) String after,
        @Parameter(name = "before", description = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "before", required = false) String before
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"first_id\" : \"step_abc123\", \"data\" : [ { \"cancelled_at\" : 1, \"metadata\" : \"{}\", \"assistant_id\" : \"assistant_id\", \"run_id\" : \"run_id\", \"usage\" : { \"completion_tokens\" : 2, \"prompt_tokens\" : 7, \"total_tokens\" : 9 }, \"created_at\" : 0, \"expired_at\" : 6, \"type\" : \"message_creation\", \"step_details\" : { \"message_creation\" : { \"message_id\" : \"message_id\" }, \"type\" : \"message_creation\" }, \"completed_at\" : 5, \"thread_id\" : \"thread_id\", \"id\" : \"id\", \"last_error\" : { \"code\" : \"server_error\", \"message\" : \"message\" }, \"failed_at\" : 5, \"object\" : \"thread.run.step\", \"status\" : \"in_progress\" }, { \"cancelled_at\" : 1, \"metadata\" : \"{}\", \"assistant_id\" : \"assistant_id\", \"run_id\" : \"run_id\", \"usage\" : { \"completion_tokens\" : 2, \"prompt_tokens\" : 7, \"total_tokens\" : 9 }, \"created_at\" : 0, \"expired_at\" : 6, \"type\" : \"message_creation\", \"step_details\" : { \"message_creation\" : { \"message_id\" : \"message_id\" }, \"type\" : \"message_creation\" }, \"completed_at\" : 5, \"thread_id\" : \"thread_id\", \"id\" : \"id\", \"last_error\" : { \"code\" : \"server_error\", \"message\" : \"message\" }, \"failed_at\" : 5, \"object\" : \"thread.run.step\", \"status\" : \"in_progress\" } ], \"last_id\" : \"step_abc456\", \"has_more\" : false, \"object\" : \"list\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /threads/{thread_id}/runs : Returns a list of runs belonging to a thread.
     *
     * @param threadId The ID of the thread the run belongs to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listRuns",
        summary = "Returns a list of runs belonging to a thread.",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListRunsResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/threads/{thread_id}/runs",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ListRunsResponse> listRuns(
        @Parameter(name = "thread_id", description = "The ID of the thread the run belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("thread_id") String threadId,
        @Parameter(name = "limit", description = "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Parameter(name = "order", description = "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "order", required = false, defaultValue = "desc") String order,
        @Parameter(name = "after", description = "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "after", required = false) String after,
        @Parameter(name = "before", description = "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "before", required = false) String before
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"first_id\" : \"run_abc123\", \"data\" : [ { \"cancelled_at\" : 5, \"instructions\" : \"instructions\", \"metadata\" : \"{}\", \"assistant_id\" : \"assistant_id\", \"required_action\" : { \"submit_tool_outputs\" : { \"tool_calls\" : [ { \"function\" : { \"name\" : \"name\", \"arguments\" : \"arguments\" }, \"id\" : \"id\", \"type\" : \"function\" }, { \"function\" : { \"name\" : \"name\", \"arguments\" : \"arguments\" }, \"id\" : \"id\", \"type\" : \"function\" } ] }, \"type\" : \"submit_tool_outputs\" }, \"usage\" : { \"completion_tokens\" : 7, \"prompt_tokens\" : 9, \"total_tokens\" : 3 }, \"created_at\" : 0, \"tools\" : [ { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" } ], \"max_completion_tokens\" : 256, \"thread_id\" : \"thread_id\", \"expires_at\" : 6, \"response_format\" : \"none\", \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"temperature\" : 2.027123023002322, \"tool_choice\" : \"none\", \"model\" : \"model\", \"id\" : \"id\", \"last_error\" : { \"code\" : \"server_error\", \"message\" : \"message\" }, \"incomplete_details\" : { \"reason\" : \"max_completion_tokens\" }, \"truncation_strategy\" : { \"last_messages\" : 1, \"type\" : \"auto\" }, \"completed_at\" : 2, \"started_at\" : 1, \"failed_at\" : 5, \"max_prompt_tokens\" : 256, \"object\" : \"thread.run\", \"status\" : \"queued\" }, { \"cancelled_at\" : 5, \"instructions\" : \"instructions\", \"metadata\" : \"{}\", \"assistant_id\" : \"assistant_id\", \"required_action\" : { \"submit_tool_outputs\" : { \"tool_calls\" : [ { \"function\" : { \"name\" : \"name\", \"arguments\" : \"arguments\" }, \"id\" : \"id\", \"type\" : \"function\" }, { \"function\" : { \"name\" : \"name\", \"arguments\" : \"arguments\" }, \"id\" : \"id\", \"type\" : \"function\" } ] }, \"type\" : \"submit_tool_outputs\" }, \"usage\" : { \"completion_tokens\" : 7, \"prompt_tokens\" : 9, \"total_tokens\" : 3 }, \"created_at\" : 0, \"tools\" : [ { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" } ], \"max_completion_tokens\" : 256, \"thread_id\" : \"thread_id\", \"expires_at\" : 6, \"response_format\" : \"none\", \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"temperature\" : 2.027123023002322, \"tool_choice\" : \"none\", \"model\" : \"model\", \"id\" : \"id\", \"last_error\" : { \"code\" : \"server_error\", \"message\" : \"message\" }, \"incomplete_details\" : { \"reason\" : \"max_completion_tokens\" }, \"truncation_strategy\" : { \"last_messages\" : 1, \"type\" : \"auto\" }, \"completed_at\" : 2, \"started_at\" : 1, \"failed_at\" : 5, \"max_prompt_tokens\" : 256, \"object\" : \"thread.run\", \"status\" : \"queued\" } ], \"last_id\" : \"run_abc456\", \"has_more\" : false, \"object\" : \"list\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /threads/{thread_id}/messages/{message_id} : Modifies a message.
     *
     * @param threadId The ID of the thread to which this message belongs. (required)
     * @param messageId The ID of the message to modify. (required)
     * @param modifyMessageRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "modifyMessage",
        summary = "Modifies a message.",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageObject.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/threads/{thread_id}/messages/{message_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<MessageObject> modifyMessage(
        @Parameter(name = "thread_id", description = "The ID of the thread to which this message belongs.", required = true, in = ParameterIn.PATH) @PathVariable("thread_id") String threadId,
        @Parameter(name = "message_id", description = "The ID of the message to modify.", required = true, in = ParameterIn.PATH) @PathVariable("message_id") String messageId,
        @Parameter(name = "ModifyMessageRequest", description = "", required = true) @Valid @RequestBody ModifyMessageRequest modifyMessageRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metadata\" : \"{}\", \"role\" : \"user\", \"assistant_id\" : \"assistant_id\", \"run_id\" : \"run_id\", \"created_at\" : 0, \"content\" : [ { \"image_file\" : { \"file_id\" : \"file_id\" }, \"type\" : \"image_file\" }, { \"image_file\" : { \"file_id\" : \"file_id\" }, \"type\" : \"image_file\" } ], \"completed_at\" : 6, \"thread_id\" : \"thread_id\", \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ], \"id\" : \"id\", \"incomplete_at\" : 1, \"incomplete_details\" : { \"reason\" : \"content_filter\" }, \"object\" : \"thread.message\", \"status\" : \"in_progress\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /threads/{thread_id}/runs/{run_id} : Modifies a run.
     *
     * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run. (required)
     * @param runId The ID of the run to modify. (required)
     * @param modifyRunRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "modifyRun",
        summary = "Modifies a run.",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RunObject.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/threads/{thread_id}/runs/{run_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<RunObject> modifyRun(
        @Parameter(name = "thread_id", description = "The ID of the [thread](/docs/api-reference/threads) that was run.", required = true, in = ParameterIn.PATH) @PathVariable("thread_id") String threadId,
        @Parameter(name = "run_id", description = "The ID of the run to modify.", required = true, in = ParameterIn.PATH) @PathVariable("run_id") String runId,
        @Parameter(name = "ModifyRunRequest", description = "", required = true) @Valid @RequestBody ModifyRunRequest modifyRunRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"cancelled_at\" : 5, \"instructions\" : \"instructions\", \"metadata\" : \"{}\", \"assistant_id\" : \"assistant_id\", \"required_action\" : { \"submit_tool_outputs\" : { \"tool_calls\" : [ { \"function\" : { \"name\" : \"name\", \"arguments\" : \"arguments\" }, \"id\" : \"id\", \"type\" : \"function\" }, { \"function\" : { \"name\" : \"name\", \"arguments\" : \"arguments\" }, \"id\" : \"id\", \"type\" : \"function\" } ] }, \"type\" : \"submit_tool_outputs\" }, \"usage\" : { \"completion_tokens\" : 7, \"prompt_tokens\" : 9, \"total_tokens\" : 3 }, \"created_at\" : 0, \"tools\" : [ { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" } ], \"max_completion_tokens\" : 256, \"thread_id\" : \"thread_id\", \"expires_at\" : 6, \"response_format\" : \"none\", \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"temperature\" : 2.027123023002322, \"tool_choice\" : \"none\", \"model\" : \"model\", \"id\" : \"id\", \"last_error\" : { \"code\" : \"server_error\", \"message\" : \"message\" }, \"incomplete_details\" : { \"reason\" : \"max_completion_tokens\" }, \"truncation_strategy\" : { \"last_messages\" : 1, \"type\" : \"auto\" }, \"completed_at\" : 2, \"started_at\" : 1, \"failed_at\" : 5, \"max_prompt_tokens\" : 256, \"object\" : \"thread.run\", \"status\" : \"queued\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /threads/{thread_id} : Modifies a thread.
     *
     * @param threadId The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified. (required)
     * @param modifyThreadRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "modifyThread",
        summary = "Modifies a thread.",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ThreadObject.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/threads/{thread_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ThreadObject> modifyThread(
        @Parameter(name = "thread_id", description = "The ID of the thread to modify. Only the `metadata` can be modified.", required = true, in = ParameterIn.PATH) @PathVariable("thread_id") String threadId,
        @Parameter(name = "ModifyThreadRequest", description = "", required = true) @Valid @RequestBody ModifyThreadRequest modifyThreadRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metadata\" : \"{}\", \"created_at\" : 0, \"id\" : \"id\", \"object\" : \"thread\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs : When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
     *
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this run belongs. (required)
     * @param runId The ID of the run that requires the tool output submission. (required)
     * @param submitToolOutputsRunRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "submitToolOuputsToRun",
        summary = "When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request. ",
        tags = { "Assistants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RunObject.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<RunObject> submitToolOuputsToRun(
        @Parameter(name = "thread_id", description = "The ID of the [thread](/docs/api-reference/threads) to which this run belongs.", required = true, in = ParameterIn.PATH) @PathVariable("thread_id") String threadId,
        @Parameter(name = "run_id", description = "The ID of the run that requires the tool output submission.", required = true, in = ParameterIn.PATH) @PathVariable("run_id") String runId,
        @Parameter(name = "SubmitToolOutputsRunRequest", description = "", required = true) @Valid @RequestBody SubmitToolOutputsRunRequest submitToolOutputsRunRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"cancelled_at\" : 5, \"instructions\" : \"instructions\", \"metadata\" : \"{}\", \"assistant_id\" : \"assistant_id\", \"required_action\" : { \"submit_tool_outputs\" : { \"tool_calls\" : [ { \"function\" : { \"name\" : \"name\", \"arguments\" : \"arguments\" }, \"id\" : \"id\", \"type\" : \"function\" }, { \"function\" : { \"name\" : \"name\", \"arguments\" : \"arguments\" }, \"id\" : \"id\", \"type\" : \"function\" } ] }, \"type\" : \"submit_tool_outputs\" }, \"usage\" : { \"completion_tokens\" : 7, \"prompt_tokens\" : 9, \"total_tokens\" : 3 }, \"created_at\" : 0, \"tools\" : [ { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" }, { \"type\" : \"code_interpreter\" } ], \"max_completion_tokens\" : 256, \"thread_id\" : \"thread_id\", \"expires_at\" : 6, \"response_format\" : \"none\", \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"temperature\" : 2.027123023002322, \"tool_choice\" : \"none\", \"model\" : \"model\", \"id\" : \"id\", \"last_error\" : { \"code\" : \"server_error\", \"message\" : \"message\" }, \"incomplete_details\" : { \"reason\" : \"max_completion_tokens\" }, \"truncation_strategy\" : { \"last_messages\" : 1, \"type\" : \"auto\" }, \"completed_at\" : 2, \"started_at\" : 1, \"failed_at\" : 5, \"max_prompt_tokens\" : 256, \"object\" : \"thread.run\", \"status\" : \"queued\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
