//
// CreateChatCompletionRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateChatCompletionRequest: Codable, JSONEncodable, Hashable {

    static let temperatureRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: 2, exclusiveMaximum: false, multipleOf: nil)
    static let topPRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: 1, exclusiveMaximum: false, multipleOf: nil)
    static let nRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 128, exclusiveMaximum: false, multipleOf: nil)
    static let presencePenaltyRule = NumericRule<Double>(minimum: -2, exclusiveMinimum: false, maximum: 2, exclusiveMaximum: false, multipleOf: nil)
    static let frequencyPenaltyRule = NumericRule<Double>(minimum: -2, exclusiveMinimum: false, maximum: 2, exclusiveMaximum: false, multipleOf: nil)
    public var model: CreateChatCompletionRequestModel
    /** A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb). */
    public var messages: [ChatCompletionRequestMessage]
    /** A list of functions the model may generate JSON inputs for. */
    public var functions: [ChatCompletionFunctions]?
    public var functionCall: CreateChatCompletionRequestFunctionCall?
    /** What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.  */
    public var temperature: Double? = 1
    /** An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.  */
    public var topP: Double? = 1
    /** How many chat completion choices to generate for each input message. */
    public var n: Int? = 1
    /** If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).  */
    public var stream: Bool? = false
    public var stop: CreateChatCompletionRequestStop?
    /** The maximum number of [tokens](/tokenizer) to generate in the chat completion.  The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.  */
    public var maxTokens: Int?
    /** Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)  */
    public var presencePenalty: Double? = 0
    /** Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)  */
    public var frequencyPenalty: Double? = 0
    /** Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  */
    public var logitBias: AnyCodable?
    /** A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */
    public var user: String?

    public init(model: CreateChatCompletionRequestModel, messages: [ChatCompletionRequestMessage], functions: [ChatCompletionFunctions]? = nil, functionCall: CreateChatCompletionRequestFunctionCall? = nil, temperature: Double? = 1, topP: Double? = 1, n: Int? = 1, stream: Bool? = false, stop: CreateChatCompletionRequestStop? = nil, maxTokens: Int? = nil, presencePenalty: Double? = 0, frequencyPenalty: Double? = 0, logitBias: AnyCodable? = nil, user: String? = nil) {
        self.model = model
        self.messages = messages
        self.functions = functions
        self.functionCall = functionCall
        self.temperature = temperature
        self.topP = topP
        self.n = n
        self.stream = stream
        self.stop = stop
        self.maxTokens = maxTokens
        self.presencePenalty = presencePenalty
        self.frequencyPenalty = frequencyPenalty
        self.logitBias = logitBias
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case model
        case messages
        case functions
        case functionCall = "function_call"
        case temperature
        case topP = "top_p"
        case n
        case stream
        case stop
        case maxTokens = "max_tokens"
        case presencePenalty = "presence_penalty"
        case frequencyPenalty = "frequency_penalty"
        case logitBias = "logit_bias"
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(model, forKey: .model)
        try container.encode(messages, forKey: .messages)
        try container.encodeIfPresent(functions, forKey: .functions)
        try container.encodeIfPresent(functionCall, forKey: .functionCall)
        try container.encodeIfPresent(temperature, forKey: .temperature)
        try container.encodeIfPresent(topP, forKey: .topP)
        try container.encodeIfPresent(n, forKey: .n)
        try container.encodeIfPresent(stream, forKey: .stream)
        try container.encodeIfPresent(stop, forKey: .stop)
        try container.encodeIfPresent(maxTokens, forKey: .maxTokens)
        try container.encodeIfPresent(presencePenalty, forKey: .presencePenalty)
        try container.encodeIfPresent(frequencyPenalty, forKey: .frequencyPenalty)
        try container.encodeIfPresent(logitBias, forKey: .logitBias)
        try container.encodeIfPresent(user, forKey: .user)
    }
}

