//
// CreateEmbeddingRequestInput.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for &#x60;text-embedding-ada-002&#x60;), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.  */
public enum CreateEmbeddingRequestInput: Codable, JSONEncodable, Hashable {
    case typeString(String)
    case type[Int]([Int])
    case type[String]([String])
    case type[[Int]]([[Int]])

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeString(let value):
            try container.encode(value)
        case .type[Int](let value):
            try container.encode(value)
        case .type[String](let value):
            try container.encode(value)
        case .type[[Int]](let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(String.self) {
            self = .typeString(value)
        } else if let value = try? container.decode([Int].self) {
            self = .type[Int](value)
        } else if let value = try? container.decode([String].self) {
            self = .type[String](value)
        } else if let value = try? container.decode([[Int]].self) {
            self = .type[[Int]](value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of CreateEmbeddingRequestInput"))
        }
    }
}

