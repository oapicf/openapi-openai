//
// CreateFineTuningJobRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateFineTuningJobRequest: Codable, JSONEncodable, Hashable {

    static let suffixRule = StringRule(minLength: 1, maxLength: 40, pattern: nil)
    static let seedRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public var model: CreateFineTuningJobRequestModel
    /** The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.  */
    public var trainingFile: String
    public var hyperparameters: CreateFineTuningJobRequestHyperparameters?
    /** A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`.  */
    public var suffix: String?
    /** The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.  */
    public var validationFile: String?
    /** A list of integrations to enable for your fine-tuning job. */
    public var integrations: [CreateFineTuningJobRequestIntegrationsInner]?
    /** The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases. If a seed is not specified, one will be generated for you.  */
    public var seed: Int?

    public init(model: CreateFineTuningJobRequestModel, trainingFile: String, hyperparameters: CreateFineTuningJobRequestHyperparameters? = nil, suffix: String? = nil, validationFile: String? = nil, integrations: [CreateFineTuningJobRequestIntegrationsInner]? = nil, seed: Int? = nil) {
        self.model = model
        self.trainingFile = trainingFile
        self.hyperparameters = hyperparameters
        self.suffix = suffix
        self.validationFile = validationFile
        self.integrations = integrations
        self.seed = seed
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case model
        case trainingFile = "training_file"
        case hyperparameters
        case suffix
        case validationFile = "validation_file"
        case integrations
        case seed
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(model, forKey: .model)
        try container.encode(trainingFile, forKey: .trainingFile)
        try container.encodeIfPresent(hyperparameters, forKey: .hyperparameters)
        try container.encodeIfPresent(suffix, forKey: .suffix)
        try container.encodeIfPresent(validationFile, forKey: .validationFile)
        try container.encodeIfPresent(integrations, forKey: .integrations)
        try container.encodeIfPresent(seed, forKey: .seed)
    }
}

