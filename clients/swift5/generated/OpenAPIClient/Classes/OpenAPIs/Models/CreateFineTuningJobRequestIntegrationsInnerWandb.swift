//
// CreateFineTuningJobRequestIntegrationsInnerWandb.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The settings for your integration with Weights and Biases. This payload specifies the project that metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags to your run, and set a default entity (team, username, etc) to be associated with your run.  */
public struct CreateFineTuningJobRequestIntegrationsInnerWandb: Codable, JSONEncodable, Hashable {

    /** The name of the project that the new run will be created under.  */
    public var project: String
    /** A display name to set for the run. If not set, we will use the Job ID as the name.  */
    public var name: String?
    /** The entity to use for the run. This allows you to set the team or username of the WandB user that you would like associated with the run. If not set, the default entity for the registered WandB API key is used.  */
    public var entity: String?
    /** A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some default tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".  */
    public var tags: [String]?

    public init(project: String, name: String? = nil, entity: String? = nil, tags: [String]? = nil) {
        self.project = project
        self.name = name
        self.entity = entity
        self.tags = tags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case project
        case name
        case entity
        case tags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(project, forKey: .project)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(entity, forKey: .entity)
        try container.encodeIfPresent(tags, forKey: .tags)
    }
}

