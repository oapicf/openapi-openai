//
// CreateImageRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateImageRequest: Codable, JSONEncodable, Hashable {

    public enum Quality: String, Codable, CaseIterable {
        case standard = "standard"
        case hd = "hd"
    }
    public enum ResponseFormat: String, Codable, CaseIterable {
        case url = "url"
        case b64Json = "b64_json"
    }
    public enum Size: String, Codable, CaseIterable {
        case _256x256 = "256x256"
        case _512x512 = "512x512"
        case _1024x1024 = "1024x1024"
        case _1792x1024 = "1792x1024"
        case _1024x1792 = "1024x1792"
    }
    public enum Style: String, Codable, CaseIterable {
        case vivid = "vivid"
        case natural = "natural"
    }
    static let nRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 10, exclusiveMaximum: false, multipleOf: nil)
    /** A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`. */
    public var prompt: String
    public var model: CreateImageRequestModel?
    /** The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported. */
    public var n: Int? = 1
    /** The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`. */
    public var quality: Quality? = .standard
    /** The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. */
    public var responseFormat: ResponseFormat? = .url
    /** The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models. */
    public var size: Size? = ._1024x1024
    /** The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`. */
    public var style: Style? = .vivid
    /** A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */
    public var user: String?

    public init(prompt: String, model: CreateImageRequestModel? = nil, n: Int? = 1, quality: Quality? = .standard, responseFormat: ResponseFormat? = .url, size: Size? = ._1024x1024, style: Style? = .vivid, user: String? = nil) {
        self.prompt = prompt
        self.model = model
        self.n = n
        self.quality = quality
        self.responseFormat = responseFormat
        self.size = size
        self.style = style
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case prompt
        case model
        case n
        case quality
        case responseFormat = "response_format"
        case size
        case style
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(prompt, forKey: .prompt)
        try container.encodeIfPresent(model, forKey: .model)
        try container.encodeIfPresent(n, forKey: .n)
        try container.encodeIfPresent(quality, forKey: .quality)
        try container.encodeIfPresent(responseFormat, forKey: .responseFormat)
        try container.encodeIfPresent(size, forKey: .size)
        try container.encodeIfPresent(style, forKey: .style)
        try container.encodeIfPresent(user, forKey: .user)
    }
}

