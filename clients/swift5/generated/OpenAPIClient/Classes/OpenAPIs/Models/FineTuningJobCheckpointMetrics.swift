//
// FineTuningJobCheckpointMetrics.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Metrics at the step number during the fine-tuning job. */
public struct FineTuningJobCheckpointMetrics: Codable, JSONEncodable, Hashable {

    public var step: Double?
    public var trainLoss: Double?
    public var trainMeanTokenAccuracy: Double?
    public var validLoss: Double?
    public var validMeanTokenAccuracy: Double?
    public var fullValidLoss: Double?
    public var fullValidMeanTokenAccuracy: Double?

    public init(step: Double? = nil, trainLoss: Double? = nil, trainMeanTokenAccuracy: Double? = nil, validLoss: Double? = nil, validMeanTokenAccuracy: Double? = nil, fullValidLoss: Double? = nil, fullValidMeanTokenAccuracy: Double? = nil) {
        self.step = step
        self.trainLoss = trainLoss
        self.trainMeanTokenAccuracy = trainMeanTokenAccuracy
        self.validLoss = validLoss
        self.validMeanTokenAccuracy = validMeanTokenAccuracy
        self.fullValidLoss = fullValidLoss
        self.fullValidMeanTokenAccuracy = fullValidMeanTokenAccuracy
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case step
        case trainLoss = "train_loss"
        case trainMeanTokenAccuracy = "train_mean_token_accuracy"
        case validLoss = "valid_loss"
        case validMeanTokenAccuracy = "valid_mean_token_accuracy"
        case fullValidLoss = "full_valid_loss"
        case fullValidMeanTokenAccuracy = "full_valid_mean_token_accuracy"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(step, forKey: .step)
        try container.encodeIfPresent(trainLoss, forKey: .trainLoss)
        try container.encodeIfPresent(trainMeanTokenAccuracy, forKey: .trainMeanTokenAccuracy)
        try container.encodeIfPresent(validLoss, forKey: .validLoss)
        try container.encodeIfPresent(validMeanTokenAccuracy, forKey: .validMeanTokenAccuracy)
        try container.encodeIfPresent(fullValidLoss, forKey: .fullValidLoss)
        try container.encodeIfPresent(fullValidMeanTokenAccuracy, forKey: .fullValidMeanTokenAccuracy)
    }
}

