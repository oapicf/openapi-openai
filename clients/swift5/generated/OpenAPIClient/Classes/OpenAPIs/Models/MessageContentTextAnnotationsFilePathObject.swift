//
// MessageContentTextAnnotationsFilePathObject.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A URL for the file that&#39;s generated when the assistant used the &#x60;code_interpreter&#x60; tool to generate a file. */
public struct MessageContentTextAnnotationsFilePathObject: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case filePath = "file_path"
    }
    static let startIndexRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let endIndexRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** Always `file_path`. */
    public var type: ModelType
    /** The text in the message content that needs to be replaced. */
    public var text: String
    public var filePath: MessageContentTextAnnotationsFilePathObjectFilePath
    public var startIndex: Int
    public var endIndex: Int

    public init(type: ModelType, text: String, filePath: MessageContentTextAnnotationsFilePathObjectFilePath, startIndex: Int, endIndex: Int) {
        self.type = type
        self.text = text
        self.filePath = filePath
        self.startIndex = startIndex
        self.endIndex = endIndex
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case text
        case filePath = "file_path"
        case startIndex = "start_index"
        case endIndex = "end_index"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(text, forKey: .text)
        try container.encode(filePath, forKey: .filePath)
        try container.encode(startIndex, forKey: .startIndex)
        try container.encode(endIndex, forKey: .endIndex)
    }
}

