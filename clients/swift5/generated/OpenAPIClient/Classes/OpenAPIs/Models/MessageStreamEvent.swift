//
// MessageStreamEvent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public enum MessageStreamEvent: Codable, JSONEncodable, Hashable {
    case typeMessageStreamEventOneOf(MessageStreamEventOneOf)
    case typeMessageStreamEventOneOf1(MessageStreamEventOneOf1)
    case typeMessageStreamEventOneOf2(MessageStreamEventOneOf2)
    case typeMessageStreamEventOneOf3(MessageStreamEventOneOf3)
    case typeMessageStreamEventOneOf4(MessageStreamEventOneOf4)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeMessageStreamEventOneOf(let value):
            try container.encode(value)
        case .typeMessageStreamEventOneOf1(let value):
            try container.encode(value)
        case .typeMessageStreamEventOneOf2(let value):
            try container.encode(value)
        case .typeMessageStreamEventOneOf3(let value):
            try container.encode(value)
        case .typeMessageStreamEventOneOf4(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(MessageStreamEventOneOf.self) {
            self = .typeMessageStreamEventOneOf(value)
        } else if let value = try? container.decode(MessageStreamEventOneOf1.self) {
            self = .typeMessageStreamEventOneOf1(value)
        } else if let value = try? container.decode(MessageStreamEventOneOf2.self) {
            self = .typeMessageStreamEventOneOf2(value)
        } else if let value = try? container.decode(MessageStreamEventOneOf3.self) {
            self = .typeMessageStreamEventOneOf3(value)
        } else if let value = try? container.decode(MessageStreamEventOneOf4.self) {
            self = .typeMessageStreamEventOneOf4(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of MessageStreamEvent"))
        }
    }
}

