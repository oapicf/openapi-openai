//
// ModifyAssistantRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ModifyAssistantRequest: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: nil, maxLength: 256, pattern: nil)
    static let descriptionRule = StringRule(minLength: nil, maxLength: 512, pattern: nil)
    static let instructionsRule = StringRule(minLength: nil, maxLength: 256000, pattern: nil)
    static let toolsRule = ArrayRule(minItems: nil, maxItems: 128, uniqueItems: false)
    static let fileIdsRule = ArrayRule(minItems: nil, maxItems: 20, uniqueItems: false)
    public var model: String?
    /** The name of the assistant. The maximum length is 256 characters.  */
    public var name: String?
    /** The description of the assistant. The maximum length is 512 characters.  */
    public var description: String?
    /** The system instructions that the assistant uses. The maximum length is 256,000 characters.  */
    public var instructions: String?
    /** A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.  */
    public var tools: [AssistantObjectToolsInner]?
    /** A list of [File](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. If a file was previously attached to the list but does not show up in the list, it will be deleted from the assistant.  */
    public var fileIds: [String]?
    /** Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.  */
    public var metadata: AnyCodable?

    public init(model: String? = nil, name: String? = nil, description: String? = nil, instructions: String? = nil, tools: [AssistantObjectToolsInner]? = nil, fileIds: [String]? = nil, metadata: AnyCodable? = nil) {
        self.model = model
        self.name = name
        self.description = description
        self.instructions = instructions
        self.tools = tools
        self.fileIds = fileIds
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case model
        case name
        case description
        case instructions
        case tools
        case fileIds = "file_ids"
        case metadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(model, forKey: .model)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(instructions, forKey: .instructions)
        try container.encodeIfPresent(tools, forKey: .tools)
        try container.encodeIfPresent(fileIds, forKey: .fileIds)
        try container.encodeIfPresent(metadata, forKey: .metadata)
    }
}

