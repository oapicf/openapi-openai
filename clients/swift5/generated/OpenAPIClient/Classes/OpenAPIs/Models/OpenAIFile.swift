//
// OpenAIFile.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The &#x60;File&#x60; object represents a document that has been uploaded to OpenAI. */
public struct OpenAIFile: Codable, JSONEncodable, Hashable {

    public enum Object: String, Codable, CaseIterable {
        case file = "file"
    }
    public enum Purpose: String, Codable, CaseIterable {
        case fineTune = "fine-tune"
        case fineTuneResults = "fine-tune-results"
        case assistants = "assistants"
        case assistantsOutput = "assistants_output"
    }
    public enum Status: String, Codable, CaseIterable {
        case uploaded = "uploaded"
        case processed = "processed"
        case error = "error"
    }
    /** The file identifier, which can be referenced in the API endpoints. */
    public var id: String
    /** The size of the file, in bytes. */
    public var bytes: Int
    /** The Unix timestamp (in seconds) for when the file was created. */
    public var createdAt: Int
    /** The name of the file. */
    public var filename: String
    /** The object type, which is always `file`. */
    public var object: Object
    /** The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`, `assistants`, and `assistants_output`. */
    public var purpose: Purpose
    /** Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var status: Status
    /** Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var statusDetails: String?

    public init(id: String, bytes: Int, createdAt: Int, filename: String, object: Object, purpose: Purpose, status: Status, statusDetails: String? = nil) {
        self.id = id
        self.bytes = bytes
        self.createdAt = createdAt
        self.filename = filename
        self.object = object
        self.purpose = purpose
        self.status = status
        self.statusDetails = statusDetails
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case bytes
        case createdAt = "created_at"
        case filename
        case object
        case purpose
        case status
        case statusDetails = "status_details"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(bytes, forKey: .bytes)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(filename, forKey: .filename)
        try container.encode(object, forKey: .object)
        try container.encode(purpose, forKey: .purpose)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(statusDetails, forKey: .statusDetails)
    }
}

