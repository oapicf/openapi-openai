//
// RunStreamEvent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public enum RunStreamEvent: Codable, JSONEncodable, Hashable {
    case typeRunStreamEventOneOf(RunStreamEventOneOf)
    case typeRunStreamEventOneOf1(RunStreamEventOneOf1)
    case typeRunStreamEventOneOf2(RunStreamEventOneOf2)
    case typeRunStreamEventOneOf3(RunStreamEventOneOf3)
    case typeRunStreamEventOneOf4(RunStreamEventOneOf4)
    case typeRunStreamEventOneOf5(RunStreamEventOneOf5)
    case typeRunStreamEventOneOf6(RunStreamEventOneOf6)
    case typeRunStreamEventOneOf7(RunStreamEventOneOf7)
    case typeRunStreamEventOneOf8(RunStreamEventOneOf8)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeRunStreamEventOneOf(let value):
            try container.encode(value)
        case .typeRunStreamEventOneOf1(let value):
            try container.encode(value)
        case .typeRunStreamEventOneOf2(let value):
            try container.encode(value)
        case .typeRunStreamEventOneOf3(let value):
            try container.encode(value)
        case .typeRunStreamEventOneOf4(let value):
            try container.encode(value)
        case .typeRunStreamEventOneOf5(let value):
            try container.encode(value)
        case .typeRunStreamEventOneOf6(let value):
            try container.encode(value)
        case .typeRunStreamEventOneOf7(let value):
            try container.encode(value)
        case .typeRunStreamEventOneOf8(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(RunStreamEventOneOf.self) {
            self = .typeRunStreamEventOneOf(value)
        } else if let value = try? container.decode(RunStreamEventOneOf1.self) {
            self = .typeRunStreamEventOneOf1(value)
        } else if let value = try? container.decode(RunStreamEventOneOf2.self) {
            self = .typeRunStreamEventOneOf2(value)
        } else if let value = try? container.decode(RunStreamEventOneOf3.self) {
            self = .typeRunStreamEventOneOf3(value)
        } else if let value = try? container.decode(RunStreamEventOneOf4.self) {
            self = .typeRunStreamEventOneOf4(value)
        } else if let value = try? container.decode(RunStreamEventOneOf5.self) {
            self = .typeRunStreamEventOneOf5(value)
        } else if let value = try? container.decode(RunStreamEventOneOf6.self) {
            self = .typeRunStreamEventOneOf6(value)
        } else if let value = try? container.decode(RunStreamEventOneOf7.self) {
            self = .typeRunStreamEventOneOf7(value)
        } else if let value = try? container.decode(RunStreamEventOneOf8.self) {
            self = .typeRunStreamEventOneOf8(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of RunStreamEvent"))
        }
    }
}

