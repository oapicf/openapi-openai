//
// TranscriptionSegment.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TranscriptionSegment: Codable, JSONEncodable, Hashable {

    /** Unique identifier of the segment. */
    public var id: Int
    /** Seek offset of the segment. */
    public var seek: Int
    /** Start time of the segment in seconds. */
    public var start: Float
    /** End time of the segment in seconds. */
    public var end: Float
    /** Text content of the segment. */
    public var text: String
    /** Array of token IDs for the text content. */
    public var tokens: [Int]
    /** Temperature parameter used for generating the segment. */
    public var temperature: Float
    /** Average logprob of the segment. If the value is lower than -1, consider the logprobs failed. */
    public var avgLogprob: Float
    /** Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed. */
    public var compressionRatio: Float
    /** Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent. */
    public var noSpeechProb: Float

    public init(id: Int, seek: Int, start: Float, end: Float, text: String, tokens: [Int], temperature: Float, avgLogprob: Float, compressionRatio: Float, noSpeechProb: Float) {
        self.id = id
        self.seek = seek
        self.start = start
        self.end = end
        self.text = text
        self.tokens = tokens
        self.temperature = temperature
        self.avgLogprob = avgLogprob
        self.compressionRatio = compressionRatio
        self.noSpeechProb = noSpeechProb
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case seek
        case start
        case end
        case text
        case tokens
        case temperature
        case avgLogprob = "avg_logprob"
        case compressionRatio = "compression_ratio"
        case noSpeechProb = "no_speech_prob"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(seek, forKey: .seek)
        try container.encode(start, forKey: .start)
        try container.encode(end, forKey: .end)
        try container.encode(text, forKey: .text)
        try container.encode(tokens, forKey: .tokens)
        try container.encode(temperature, forKey: .temperature)
        try container.encode(avgLogprob, forKey: .avgLogprob)
        try container.encode(compressionRatio, forKey: .compressionRatio)
        try container.encode(noSpeechProb, forKey: .noSpeechProb)
    }
}

