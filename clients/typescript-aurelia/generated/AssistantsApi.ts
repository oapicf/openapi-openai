/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  AssistantFileObject,
  CreateThreadRequest,
  RunStepObject,
  ThreadObject,
  ModifyAssistantRequest,
  ListRunsResponse,
  CreateRunRequest,
  CreateAssistantRequest,
  DeleteAssistantResponse,
  DeleteAssistantFileResponse,
  SubmitToolOutputsRunRequest,
  ListMessageFilesResponse,
  RunObject,
  AssistantObject,
  ModifyRunRequest,
  DeleteThreadResponse,
  CreateAssistantFileRequest,
  CreateThreadAndRunRequest,
  MessageFileObject,
  ListMessagesResponse,
  ListAssistantsResponse,
  ModifyMessageRequest,
  ListRunStepsResponse,
  ListAssistantFilesResponse,
  MessageObject,
  CreateMessageRequest,
  ModifyThreadRequest,
} from './models';

/**
 * cancelRun - parameters interface
 */
export interface ICancelRunParams {
  threadId: string;
  runId: string;
}

/**
 * createAssistant - parameters interface
 */
export interface ICreateAssistantParams {
  createAssistantRequest: CreateAssistantRequest;
}

/**
 * createAssistantFile - parameters interface
 */
export interface ICreateAssistantFileParams {
  assistantId: string;
  createAssistantFileRequest: CreateAssistantFileRequest;
}

/**
 * createMessage - parameters interface
 */
export interface ICreateMessageParams {
  threadId: string;
  createMessageRequest: CreateMessageRequest;
}

/**
 * createRun - parameters interface
 */
export interface ICreateRunParams {
  threadId: string;
  createRunRequest: CreateRunRequest;
}

/**
 * createThread - parameters interface
 */
export interface ICreateThreadParams {
  createThreadRequest?: CreateThreadRequest;
}

/**
 * createThreadAndRun - parameters interface
 */
export interface ICreateThreadAndRunParams {
  createThreadAndRunRequest: CreateThreadAndRunRequest;
}

/**
 * deleteAssistant - parameters interface
 */
export interface IDeleteAssistantParams {
  assistantId: string;
}

/**
 * deleteAssistantFile - parameters interface
 */
export interface IDeleteAssistantFileParams {
  assistantId: string;
  fileId: string;
}

/**
 * deleteThread - parameters interface
 */
export interface IDeleteThreadParams {
  threadId: string;
}

/**
 * getAssistant - parameters interface
 */
export interface IGetAssistantParams {
  assistantId: string;
}

/**
 * getAssistantFile - parameters interface
 */
export interface IGetAssistantFileParams {
  assistantId: string;
  fileId: string;
}

/**
 * getMessage - parameters interface
 */
export interface IGetMessageParams {
  threadId: string;
  messageId: string;
}

/**
 * getMessageFile - parameters interface
 */
export interface IGetMessageFileParams {
  threadId: string;
  messageId: string;
  fileId: string;
}

/**
 * getRun - parameters interface
 */
export interface IGetRunParams {
  threadId: string;
  runId: string;
}

/**
 * getRunStep - parameters interface
 */
export interface IGetRunStepParams {
  threadId: string;
  runId: string;
  stepId: string;
}

/**
 * getThread - parameters interface
 */
export interface IGetThreadParams {
  threadId: string;
}

/**
 * listAssistantFiles - parameters interface
 */
export interface IListAssistantFilesParams {
  assistantId: string;
  limit?: number;
  order?: 'asc' | 'desc';
  after?: string;
  before?: string;
}

/**
 * listAssistants - parameters interface
 */
export interface IListAssistantsParams {
  limit?: number;
  order?: 'asc' | 'desc';
  after?: string;
  before?: string;
}

/**
 * listMessageFiles - parameters interface
 */
export interface IListMessageFilesParams {
  threadId: string;
  messageId: string;
  limit?: number;
  order?: 'asc' | 'desc';
  after?: string;
  before?: string;
}

/**
 * listMessages - parameters interface
 */
export interface IListMessagesParams {
  threadId: string;
  limit?: number;
  order?: 'asc' | 'desc';
  after?: string;
  before?: string;
  runId?: string;
}

/**
 * listRunSteps - parameters interface
 */
export interface IListRunStepsParams {
  threadId: string;
  runId: string;
  limit?: number;
  order?: 'asc' | 'desc';
  after?: string;
  before?: string;
}

/**
 * listRuns - parameters interface
 */
export interface IListRunsParams {
  threadId: string;
  limit?: number;
  order?: 'asc' | 'desc';
  after?: string;
  before?: string;
}

/**
 * modifyAssistant - parameters interface
 */
export interface IModifyAssistantParams {
  assistantId: string;
  modifyAssistantRequest: ModifyAssistantRequest;
}

/**
 * modifyMessage - parameters interface
 */
export interface IModifyMessageParams {
  threadId: string;
  messageId: string;
  modifyMessageRequest: ModifyMessageRequest;
}

/**
 * modifyRun - parameters interface
 */
export interface IModifyRunParams {
  threadId: string;
  runId: string;
  modifyRunRequest: ModifyRunRequest;
}

/**
 * modifyThread - parameters interface
 */
export interface IModifyThreadParams {
  threadId: string;
  modifyThreadRequest: ModifyThreadRequest;
}

/**
 * submitToolOuputsToRun - parameters interface
 */
export interface ISubmitToolOuputsToRunParams {
  threadId: string;
  runId: string;
  submitToolOutputsRunRequest: SubmitToolOutputsRunRequest;
}

/**
 * AssistantsApi - API class
 */
@autoinject()
export class AssistantsApi extends Api {

  /**
   * Creates a new AssistantsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Cancels a run that is &#x60;in_progress&#x60;.
   * @param params.threadId The ID of the thread to which this run belongs.
   * @param params.runId The ID of the run to cancel.
   */
  async cancelRun(params: ICancelRunParams): Promise<RunObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('cancelRun', params, 'threadId');
    this.ensureParamIsSet('cancelRun', params, 'runId');

    // Create URL to call
    const url = `${this.basePath}/threads/{thread_id}/runs/{run_id}/cancel`
      .replace(`{${'thread_id'}}`, encodeURIComponent(`${params['threadId']}`))
      .replace(`{${'run_id'}}`, encodeURIComponent(`${params['runId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create an assistant with a model and instructions.
   * @param params.createAssistantRequest 
   */
  async createAssistant(params: ICreateAssistantParams): Promise<AssistantObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('createAssistant', params, 'createAssistantRequest');

    // Create URL to call
    const url = `${this.basePath}/assistants`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['createAssistantRequest'] || {}))

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
   * @param params.assistantId The ID of the assistant for which to create a File. 
   * @param params.createAssistantFileRequest 
   */
  async createAssistantFile(params: ICreateAssistantFileParams): Promise<AssistantFileObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('createAssistantFile', params, 'assistantId');
    this.ensureParamIsSet('createAssistantFile', params, 'createAssistantFileRequest');

    // Create URL to call
    const url = `${this.basePath}/assistants/{assistant_id}/files`
      .replace(`{${'assistant_id'}}`, encodeURIComponent(`${params['assistantId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['createAssistantFileRequest'] || {}))

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create a message.
   * @param params.threadId The ID of the [thread](/docs/api-reference/threads) to create a message for.
   * @param params.createMessageRequest 
   */
  async createMessage(params: ICreateMessageParams): Promise<MessageObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('createMessage', params, 'threadId');
    this.ensureParamIsSet('createMessage', params, 'createMessageRequest');

    // Create URL to call
    const url = `${this.basePath}/threads/{thread_id}/messages`
      .replace(`{${'thread_id'}}`, encodeURIComponent(`${params['threadId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['createMessageRequest'] || {}))

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create a run.
   * @param params.threadId The ID of the thread to run.
   * @param params.createRunRequest 
   */
  async createRun(params: ICreateRunParams): Promise<RunObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('createRun', params, 'threadId');
    this.ensureParamIsSet('createRun', params, 'createRunRequest');

    // Create URL to call
    const url = `${this.basePath}/threads/{thread_id}/runs`
      .replace(`{${'thread_id'}}`, encodeURIComponent(`${params['threadId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['createRunRequest'] || {}))

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create a thread.
   * @param params.createThreadRequest 
   */
  async createThread(params: ICreateThreadParams): Promise<ThreadObject> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/threads`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['createThreadRequest'] || {}))

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create a thread and run it in one request.
   * @param params.createThreadAndRunRequest 
   */
  async createThreadAndRun(params: ICreateThreadAndRunParams): Promise<RunObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('createThreadAndRun', params, 'createThreadAndRunRequest');

    // Create URL to call
    const url = `${this.basePath}/threads/runs`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['createThreadAndRunRequest'] || {}))

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete an assistant.
   * @param params.assistantId The ID of the assistant to delete.
   */
  async deleteAssistant(params: IDeleteAssistantParams): Promise<DeleteAssistantResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteAssistant', params, 'assistantId');

    // Create URL to call
    const url = `${this.basePath}/assistants/{assistant_id}`
      .replace(`{${'assistant_id'}}`, encodeURIComponent(`${params['assistantId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete an assistant file.
   * @param params.assistantId The ID of the assistant that the file belongs to.
   * @param params.fileId The ID of the file to delete.
   */
  async deleteAssistantFile(params: IDeleteAssistantFileParams): Promise<DeleteAssistantFileResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteAssistantFile', params, 'assistantId');
    this.ensureParamIsSet('deleteAssistantFile', params, 'fileId');

    // Create URL to call
    const url = `${this.basePath}/assistants/{assistant_id}/files/{file_id}`
      .replace(`{${'assistant_id'}}`, encodeURIComponent(`${params['assistantId']}`))
      .replace(`{${'file_id'}}`, encodeURIComponent(`${params['fileId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete a thread.
   * @param params.threadId The ID of the thread to delete.
   */
  async deleteThread(params: IDeleteThreadParams): Promise<DeleteThreadResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteThread', params, 'threadId');

    // Create URL to call
    const url = `${this.basePath}/threads/{thread_id}`
      .replace(`{${'thread_id'}}`, encodeURIComponent(`${params['threadId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieves an assistant.
   * @param params.assistantId The ID of the assistant to retrieve.
   */
  async getAssistant(params: IGetAssistantParams): Promise<AssistantObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('getAssistant', params, 'assistantId');

    // Create URL to call
    const url = `${this.basePath}/assistants/{assistant_id}`
      .replace(`{${'assistant_id'}}`, encodeURIComponent(`${params['assistantId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieves an AssistantFile.
   * @param params.assistantId The ID of the assistant who the file belongs to.
   * @param params.fileId The ID of the file we\&#39;re getting.
   */
  async getAssistantFile(params: IGetAssistantFileParams): Promise<AssistantFileObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('getAssistantFile', params, 'assistantId');
    this.ensureParamIsSet('getAssistantFile', params, 'fileId');

    // Create URL to call
    const url = `${this.basePath}/assistants/{assistant_id}/files/{file_id}`
      .replace(`{${'assistant_id'}}`, encodeURIComponent(`${params['assistantId']}`))
      .replace(`{${'file_id'}}`, encodeURIComponent(`${params['fileId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve a message.
   * @param params.threadId The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
   * @param params.messageId The ID of the message to retrieve.
   */
  async getMessage(params: IGetMessageParams): Promise<MessageObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('getMessage', params, 'threadId');
    this.ensureParamIsSet('getMessage', params, 'messageId');

    // Create URL to call
    const url = `${this.basePath}/threads/{thread_id}/messages/{message_id}`
      .replace(`{${'thread_id'}}`, encodeURIComponent(`${params['threadId']}`))
      .replace(`{${'message_id'}}`, encodeURIComponent(`${params['messageId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieves a message file.
   * @param params.threadId The ID of the thread to which the message and File belong.
   * @param params.messageId The ID of the message the file belongs to.
   * @param params.fileId The ID of the file being retrieved.
   */
  async getMessageFile(params: IGetMessageFileParams): Promise<MessageFileObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('getMessageFile', params, 'threadId');
    this.ensureParamIsSet('getMessageFile', params, 'messageId');
    this.ensureParamIsSet('getMessageFile', params, 'fileId');

    // Create URL to call
    const url = `${this.basePath}/threads/{thread_id}/messages/{message_id}/files/{file_id}`
      .replace(`{${'thread_id'}}`, encodeURIComponent(`${params['threadId']}`))
      .replace(`{${'message_id'}}`, encodeURIComponent(`${params['messageId']}`))
      .replace(`{${'file_id'}}`, encodeURIComponent(`${params['fileId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieves a run.
   * @param params.threadId The ID of the [thread](/docs/api-reference/threads) that was run.
   * @param params.runId The ID of the run to retrieve.
   */
  async getRun(params: IGetRunParams): Promise<RunObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('getRun', params, 'threadId');
    this.ensureParamIsSet('getRun', params, 'runId');

    // Create URL to call
    const url = `${this.basePath}/threads/{thread_id}/runs/{run_id}`
      .replace(`{${'thread_id'}}`, encodeURIComponent(`${params['threadId']}`))
      .replace(`{${'run_id'}}`, encodeURIComponent(`${params['runId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieves a run step.
   * @param params.threadId The ID of the thread to which the run and run step belongs.
   * @param params.runId The ID of the run to which the run step belongs.
   * @param params.stepId The ID of the run step to retrieve.
   */
  async getRunStep(params: IGetRunStepParams): Promise<RunStepObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('getRunStep', params, 'threadId');
    this.ensureParamIsSet('getRunStep', params, 'runId');
    this.ensureParamIsSet('getRunStep', params, 'stepId');

    // Create URL to call
    const url = `${this.basePath}/threads/{thread_id}/runs/{run_id}/steps/{step_id}`
      .replace(`{${'thread_id'}}`, encodeURIComponent(`${params['threadId']}`))
      .replace(`{${'run_id'}}`, encodeURIComponent(`${params['runId']}`))
      .replace(`{${'step_id'}}`, encodeURIComponent(`${params['stepId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieves a thread.
   * @param params.threadId The ID of the thread to retrieve.
   */
  async getThread(params: IGetThreadParams): Promise<ThreadObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('getThread', params, 'threadId');

    // Create URL to call
    const url = `${this.basePath}/threads/{thread_id}`
      .replace(`{${'thread_id'}}`, encodeURIComponent(`${params['threadId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a list of assistant files.
   * @param params.assistantId The ID of the assistant the file belongs to.
   * @param params.limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param params.order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
   * @param params.after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
   * @param params.before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
   */
  async listAssistantFiles(params: IListAssistantFilesParams): Promise<ListAssistantFilesResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('listAssistantFiles', params, 'assistantId');

    // Create URL to call
    const url = `${this.basePath}/assistants/{assistant_id}/files`
      .replace(`{${'assistant_id'}}`, encodeURIComponent(`${params['assistantId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'limit': params['limit'],
        'order': params['order'],
        'after': params['after'],
        'before': params['before'],
      })

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a list of assistants.
   * @param params.limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param params.order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
   * @param params.after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
   * @param params.before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
   */
  async listAssistants(params: IListAssistantsParams): Promise<ListAssistantsResponse> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/assistants`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'limit': params['limit'],
        'order': params['order'],
        'after': params['after'],
        'before': params['before'],
      })

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a list of message files.
   * @param params.threadId The ID of the thread that the message and files belong to.
   * @param params.messageId The ID of the message that the files belongs to.
   * @param params.limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param params.order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
   * @param params.after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
   * @param params.before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
   */
  async listMessageFiles(params: IListMessageFilesParams): Promise<ListMessageFilesResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('listMessageFiles', params, 'threadId');
    this.ensureParamIsSet('listMessageFiles', params, 'messageId');

    // Create URL to call
    const url = `${this.basePath}/threads/{thread_id}/messages/{message_id}/files`
      .replace(`{${'thread_id'}}`, encodeURIComponent(`${params['threadId']}`))
      .replace(`{${'message_id'}}`, encodeURIComponent(`${params['messageId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'limit': params['limit'],
        'order': params['order'],
        'after': params['after'],
        'before': params['before'],
      })

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a list of messages for a given thread.
   * @param params.threadId The ID of the [thread](/docs/api-reference/threads) the messages belong to.
   * @param params.limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param params.order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
   * @param params.after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
   * @param params.before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
   * @param params.runId Filter messages by the run ID that generated them. 
   */
  async listMessages(params: IListMessagesParams): Promise<ListMessagesResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('listMessages', params, 'threadId');

    // Create URL to call
    const url = `${this.basePath}/threads/{thread_id}/messages`
      .replace(`{${'thread_id'}}`, encodeURIComponent(`${params['threadId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'limit': params['limit'],
        'order': params['order'],
        'after': params['after'],
        'before': params['before'],
        'run_id': params['runId'],
      })

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a list of run steps belonging to a run.
   * @param params.threadId The ID of the thread the run and run steps belong to.
   * @param params.runId The ID of the run the run steps belong to.
   * @param params.limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param params.order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
   * @param params.after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
   * @param params.before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
   */
  async listRunSteps(params: IListRunStepsParams): Promise<ListRunStepsResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('listRunSteps', params, 'threadId');
    this.ensureParamIsSet('listRunSteps', params, 'runId');

    // Create URL to call
    const url = `${this.basePath}/threads/{thread_id}/runs/{run_id}/steps`
      .replace(`{${'thread_id'}}`, encodeURIComponent(`${params['threadId']}`))
      .replace(`{${'run_id'}}`, encodeURIComponent(`${params['runId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'limit': params['limit'],
        'order': params['order'],
        'after': params['after'],
        'before': params['before'],
      })

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a list of runs belonging to a thread.
   * @param params.threadId The ID of the thread the run belongs to.
   * @param params.limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
   * @param params.order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
   * @param params.after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
   * @param params.before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
   */
  async listRuns(params: IListRunsParams): Promise<ListRunsResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('listRuns', params, 'threadId');

    // Create URL to call
    const url = `${this.basePath}/threads/{thread_id}/runs`
      .replace(`{${'thread_id'}}`, encodeURIComponent(`${params['threadId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'limit': params['limit'],
        'order': params['order'],
        'after': params['after'],
        'before': params['before'],
      })

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Modifies an assistant.
   * @param params.assistantId The ID of the assistant to modify.
   * @param params.modifyAssistantRequest 
   */
  async modifyAssistant(params: IModifyAssistantParams): Promise<AssistantObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('modifyAssistant', params, 'assistantId');
    this.ensureParamIsSet('modifyAssistant', params, 'modifyAssistantRequest');

    // Create URL to call
    const url = `${this.basePath}/assistants/{assistant_id}`
      .replace(`{${'assistant_id'}}`, encodeURIComponent(`${params['assistantId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['modifyAssistantRequest'] || {}))

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Modifies a message.
   * @param params.threadId The ID of the thread to which this message belongs.
   * @param params.messageId The ID of the message to modify.
   * @param params.modifyMessageRequest 
   */
  async modifyMessage(params: IModifyMessageParams): Promise<MessageObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('modifyMessage', params, 'threadId');
    this.ensureParamIsSet('modifyMessage', params, 'messageId');
    this.ensureParamIsSet('modifyMessage', params, 'modifyMessageRequest');

    // Create URL to call
    const url = `${this.basePath}/threads/{thread_id}/messages/{message_id}`
      .replace(`{${'thread_id'}}`, encodeURIComponent(`${params['threadId']}`))
      .replace(`{${'message_id'}}`, encodeURIComponent(`${params['messageId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['modifyMessageRequest'] || {}))

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Modifies a run.
   * @param params.threadId The ID of the [thread](/docs/api-reference/threads) that was run.
   * @param params.runId The ID of the run to modify.
   * @param params.modifyRunRequest 
   */
  async modifyRun(params: IModifyRunParams): Promise<RunObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('modifyRun', params, 'threadId');
    this.ensureParamIsSet('modifyRun', params, 'runId');
    this.ensureParamIsSet('modifyRun', params, 'modifyRunRequest');

    // Create URL to call
    const url = `${this.basePath}/threads/{thread_id}/runs/{run_id}`
      .replace(`{${'thread_id'}}`, encodeURIComponent(`${params['threadId']}`))
      .replace(`{${'run_id'}}`, encodeURIComponent(`${params['runId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['modifyRunRequest'] || {}))

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Modifies a thread.
   * @param params.threadId The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.
   * @param params.modifyThreadRequest 
   */
  async modifyThread(params: IModifyThreadParams): Promise<ThreadObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('modifyThread', params, 'threadId');
    this.ensureParamIsSet('modifyThread', params, 'modifyThreadRequest');

    // Create URL to call
    const url = `${this.basePath}/threads/{thread_id}`
      .replace(`{${'thread_id'}}`, encodeURIComponent(`${params['threadId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['modifyThreadRequest'] || {}))

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they\&#39;re all completed. All outputs must be submitted in a single request. 
   * @param params.threadId The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
   * @param params.runId The ID of the run that requires the tool output submission.
   * @param params.submitToolOutputsRunRequest 
   */
  async submitToolOuputsToRun(params: ISubmitToolOuputsToRunParams): Promise<RunObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('submitToolOuputsToRun', params, 'threadId');
    this.ensureParamIsSet('submitToolOuputsToRun', params, 'runId');
    this.ensureParamIsSet('submitToolOuputsToRun', params, 'submitToolOutputsRunRequest');

    // Create URL to call
    const url = `${this.basePath}/threads/{thread_id}/runs/{run_id}/submit_tool_outputs`
      .replace(`{${'thread_id'}}`, encodeURIComponent(`${params['threadId']}`))
      .replace(`{${'run_id'}}`, encodeURIComponent(`${params['runId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['submitToolOutputsRunRequest'] || {}))

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

