/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  OpenAIFile,
  DeleteFileResponse,
  ListFilesResponse,
} from './models';

/**
 * createFile - parameters interface
 */
export interface ICreateFileParams {
  file: File;
  purpose: string;
}

/**
 * deleteFile - parameters interface
 */
export interface IDeleteFileParams {
  fileId: string;
}

/**
 * downloadFile - parameters interface
 */
export interface IDownloadFileParams {
  fileId: string;
}

/**
 * listFiles - parameters interface
 */
export interface IListFilesParams {
  purpose?: string;
}

/**
 * retrieveFile - parameters interface
 */
export interface IRetrieveFileParams {
  fileId: string;
}

/**
 * FilesApi - API class
 */
@autoinject()
export class FilesApi extends Api {

  /**
   * Creates a new FilesApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports &#x60;.jsonl&#x60; files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. 
   * @param params.file The File object (not file name) to be uploaded. 
   * @param params.purpose The intended purpose of the uploaded file.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tuning) and \\\&quot;assistants\\\&quot; for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning. 
   */
  async createFile(params: ICreateFileParams): Promise<OpenAIFile> {
    // Verify required parameters are set
    this.ensureParamIsSet('createFile', params, 'file');
    this.ensureParamIsSet('createFile', params, 'purpose');

    // Create URL to call
    const url = `${this.basePath}/files`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'file': params['file'],
        'purpose': params['purpose'],
      }))

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete a file.
   * @param params.fileId The ID of the file to use for this request.
   */
  async deleteFile(params: IDeleteFileParams): Promise<DeleteFileResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteFile', params, 'fileId');

    // Create URL to call
    const url = `${this.basePath}/files/{file_id}`
      .replace(`{${'file_id'}}`, encodeURIComponent(`${params['fileId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the contents of the specified file.
   * @param params.fileId The ID of the file to use for this request.
   */
  async downloadFile(params: IDownloadFileParams): Promise<string> {
    // Verify required parameters are set
    this.ensureParamIsSet('downloadFile', params, 'fileId');

    // Create URL to call
    const url = `${this.basePath}/files/{file_id}/content`
      .replace(`{${'file_id'}}`, encodeURIComponent(`${params['fileId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a list of files that belong to the user\&#39;s organization.
   * @param params.purpose Only return files with the given purpose.
   */
  async listFiles(params: IListFilesParams): Promise<ListFilesResponse> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/files`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'purpose': params['purpose'],
      })

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns information about a specific file.
   * @param params.fileId The ID of the file to use for this request.
   */
  async retrieveFile(params: IRetrieveFileParams): Promise<OpenAIFile> {
    // Verify required parameters are set
    this.ensureParamIsSet('retrieveFile', params, 'fileId');

    // Create URL to call
    const url = `${this.basePath}/files/{file_id}`
      .replace(`{${'file_id'}}`, encodeURIComponent(`${params['fileId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

