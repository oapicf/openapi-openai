/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  CreateFineTuningJobRequest,
  ListPaginatedFineTuningJobsResponse,
  ListFineTuningJobCheckpointsResponse,
  FineTuningJob,
  ListFineTuningJobEventsResponse,
} from './models';

/**
 * cancelFineTuningJob - parameters interface
 */
export interface ICancelFineTuningJobParams {
  fineTuningJobId: string;
}

/**
 * createFineTuningJob - parameters interface
 */
export interface ICreateFineTuningJobParams {
  createFineTuningJobRequest: CreateFineTuningJobRequest;
}

/**
 * listFineTuningEvents - parameters interface
 */
export interface IListFineTuningEventsParams {
  fineTuningJobId: string;
  after?: string;
  limit?: number;
}

/**
 * listFineTuningJobCheckpoints - parameters interface
 */
export interface IListFineTuningJobCheckpointsParams {
  fineTuningJobId: string;
  after?: string;
  limit?: number;
}

/**
 * listPaginatedFineTuningJobs - parameters interface
 */
export interface IListPaginatedFineTuningJobsParams {
  after?: string;
  limit?: number;
}

/**
 * retrieveFineTuningJob - parameters interface
 */
export interface IRetrieveFineTuningJobParams {
  fineTuningJobId: string;
}

/**
 * FineTuningApi - API class
 */
@autoinject()
export class FineTuningApi extends Api {

  /**
   * Creates a new FineTuningApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Immediately cancel a fine-tune job. 
   * @param params.fineTuningJobId The ID of the fine-tuning job to cancel. 
   */
  async cancelFineTuningJob(params: ICancelFineTuningJobParams): Promise<FineTuningJob> {
    // Verify required parameters are set
    this.ensureParamIsSet('cancelFineTuningJob', params, 'fineTuningJobId');

    // Create URL to call
    const url = `${this.basePath}/fine_tuning/jobs/{fine_tuning_job_id}/cancel`
      .replace(`{${'fine_tuning_job_id'}}`, encodeURIComponent(`${params['fineTuningJobId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
   * @param params.createFineTuningJobRequest 
   */
  async createFineTuningJob(params: ICreateFineTuningJobParams): Promise<FineTuningJob> {
    // Verify required parameters are set
    this.ensureParamIsSet('createFineTuningJob', params, 'createFineTuningJobRequest');

    // Create URL to call
    const url = `${this.basePath}/fine_tuning/jobs`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['createFineTuningJobRequest'] || {}))

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get status updates for a fine-tuning job. 
   * @param params.fineTuningJobId The ID of the fine-tuning job to get events for. 
   * @param params.after Identifier for the last event from the previous pagination request.
   * @param params.limit Number of events to retrieve.
   */
  async listFineTuningEvents(params: IListFineTuningEventsParams): Promise<ListFineTuningJobEventsResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('listFineTuningEvents', params, 'fineTuningJobId');

    // Create URL to call
    const url = `${this.basePath}/fine_tuning/jobs/{fine_tuning_job_id}/events`
      .replace(`{${'fine_tuning_job_id'}}`, encodeURIComponent(`${params['fineTuningJobId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'after': params['after'],
        'limit': params['limit'],
      })

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List checkpoints for a fine-tuning job. 
   * @param params.fineTuningJobId The ID of the fine-tuning job to get checkpoints for. 
   * @param params.after Identifier for the last checkpoint ID from the previous pagination request.
   * @param params.limit Number of checkpoints to retrieve.
   */
  async listFineTuningJobCheckpoints(params: IListFineTuningJobCheckpointsParams): Promise<ListFineTuningJobCheckpointsResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('listFineTuningJobCheckpoints', params, 'fineTuningJobId');

    // Create URL to call
    const url = `${this.basePath}/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints`
      .replace(`{${'fine_tuning_job_id'}}`, encodeURIComponent(`${params['fineTuningJobId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'after': params['after'],
        'limit': params['limit'],
      })

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List your organization\&#39;s fine-tuning jobs 
   * @param params.after Identifier for the last job from the previous pagination request.
   * @param params.limit Number of fine-tuning jobs to retrieve.
   */
  async listPaginatedFineTuningJobs(params: IListPaginatedFineTuningJobsParams): Promise<ListPaginatedFineTuningJobsResponse> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/fine_tuning/jobs`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'after': params['after'],
        'limit': params['limit'],
      })

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
   * @param params.fineTuningJobId The ID of the fine-tuning job. 
   */
  async retrieveFineTuningJob(params: IRetrieveFineTuningJobParams): Promise<FineTuningJob> {
    // Verify required parameters are set
    this.ensureParamIsSet('retrieveFineTuningJob', params, 'fineTuningJobId');

    // Create URL to call
    const url = `${this.basePath}/fine_tuning/jobs/{fine_tuning_job_id}`
      .replace(`{${'fine_tuning_job_id'}}`, encodeURIComponent(`${params['fineTuningJobId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

