/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  ListModelsResponse,
  Model,
  DeleteModelResponse,
} from './models';

/**
 * deleteModel - parameters interface
 */
export interface IDeleteModelParams {
  model: string;
}

/**
 * listModels - parameters interface
 */
export interface IListModelsParams {
}

/**
 * retrieveModel - parameters interface
 */
export interface IRetrieveModelParams {
  model: string;
}

/**
 * ModelsApi - API class
 */
@autoinject()
export class ModelsApi extends Api {

  /**
   * Creates a new ModelsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
   * @param params.model The model to delete
   */
  async deleteModel(params: IDeleteModelParams): Promise<DeleteModelResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteModel', params, 'model');

    // Create URL to call
    const url = `${this.basePath}/models/{model}`
      .replace(`{${'model'}}`, encodeURIComponent(`${params['model']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Lists the currently available models, and provides basic information about each one such as the owner and availability.
   */
  async listModels(): Promise<ListModelsResponse> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/models`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
   * @param params.model The ID of the model to use for this request
   */
  async retrieveModel(params: IRetrieveModelParams): Promise<Model> {
    // Verify required parameters are set
    this.ensureParamIsSet('retrieveModel', params, 'model');

    // Create URL to call
    const url = `${this.basePath}/models/{model}`
      .replace(`{${'model'}}`, encodeURIComponent(`${params['model']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'ApiKeyAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

