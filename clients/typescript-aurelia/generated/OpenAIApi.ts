/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  OpenAIFile,
  CreateTranscriptionResponse,
  CreateEditRequest,
  CreateImageRequest,
  CreateChatCompletionRequest,
  ImagesResponse,
  CreateModerationResponse,
  DeleteModelResponse,
  ListFineTunesResponse,
  FineTune,
  CreateEmbeddingResponse,
  CreateTranslationResponse,
  ListFineTuneEventsResponse,
  CreateCompletionRequest,
  CreateChatCompletionResponse,
  CreateEmbeddingRequest,
  CreateCompletionResponse,
  CreateModerationRequest,
  ListModelsResponse,
  DeleteFileResponse,
  CreateFineTuneRequest,
  Model,
  CreateEditResponse,
  CreateTranscriptionRequestModel,
  ListFilesResponse,
} from './models';

/**
 * cancelFineTune - parameters interface
 */
export interface ICancelFineTuneParams {
  fineTuneId: string;
}

/**
 * createChatCompletion - parameters interface
 */
export interface ICreateChatCompletionParams {
  createChatCompletionRequest: CreateChatCompletionRequest;
}

/**
 * createCompletion - parameters interface
 */
export interface ICreateCompletionParams {
  createCompletionRequest: CreateCompletionRequest;
}

/**
 * createEdit - parameters interface
 */
export interface ICreateEditParams {
  createEditRequest: CreateEditRequest;
}

/**
 * createEmbedding - parameters interface
 */
export interface ICreateEmbeddingParams {
  createEmbeddingRequest: CreateEmbeddingRequest;
}

/**
 * createFile - parameters interface
 */
export interface ICreateFileParams {
  file: File;
  purpose: string;
}

/**
 * createFineTune - parameters interface
 */
export interface ICreateFineTuneParams {
  createFineTuneRequest: CreateFineTuneRequest;
}

/**
 * createImage - parameters interface
 */
export interface ICreateImageParams {
  createImageRequest: CreateImageRequest;
}

/**
 * createImageEdit - parameters interface
 */
export interface ICreateImageEditParams {
  image: File;
  prompt: string;
  mask?: File;
  n?: number;
  size?: string;
  responseFormat?: string;
  user?: string;
}

/**
 * createImageVariation - parameters interface
 */
export interface ICreateImageVariationParams {
  image: File;
  n?: number;
  size?: string;
  responseFormat?: string;
  user?: string;
}

/**
 * createModeration - parameters interface
 */
export interface ICreateModerationParams {
  createModerationRequest: CreateModerationRequest;
}

/**
 * createTranscription - parameters interface
 */
export interface ICreateTranscriptionParams {
  file: File;
  model: CreateTranscriptionRequestModel;
  prompt?: string;
  responseFormat?: string;
  temperature?: number;
  language?: string;
}

/**
 * createTranslation - parameters interface
 */
export interface ICreateTranslationParams {
  file: File;
  model: CreateTranscriptionRequestModel;
  prompt?: string;
  responseFormat?: string;
  temperature?: number;
}

/**
 * deleteFile - parameters interface
 */
export interface IDeleteFileParams {
  fileId: string;
}

/**
 * deleteModel - parameters interface
 */
export interface IDeleteModelParams {
  model: string;
}

/**
 * downloadFile - parameters interface
 */
export interface IDownloadFileParams {
  fileId: string;
}

/**
 * listFiles - parameters interface
 */
export interface IListFilesParams {
}

/**
 * listFineTuneEvents - parameters interface
 */
export interface IListFineTuneEventsParams {
  fineTuneId: string;
  stream?: boolean;
}

/**
 * listFineTunes - parameters interface
 */
export interface IListFineTunesParams {
}

/**
 * listModels - parameters interface
 */
export interface IListModelsParams {
}

/**
 * retrieveFile - parameters interface
 */
export interface IRetrieveFileParams {
  fileId: string;
}

/**
 * retrieveFineTune - parameters interface
 */
export interface IRetrieveFineTuneParams {
  fineTuneId: string;
}

/**
 * retrieveModel - parameters interface
 */
export interface IRetrieveModelParams {
  model: string;
}

/**
 * OpenAIApi - API class
 */
@autoinject()
export class OpenAIApi extends Api {

  /**
   * Creates a new OpenAIApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Immediately cancel a fine-tune job. 
   * @param params.fineTuneId The ID of the fine-tune job to cancel 
   */
  async cancelFineTune(params: ICancelFineTuneParams): Promise<FineTune> {
    // Verify required parameters are set
    this.ensureParamIsSet('cancelFineTune', params, 'fineTuneId');

    // Create URL to call
    const url = `${this.basePath}/fine-tunes/{fine_tune_id}/cancel`
      .replace(`{${'fine_tune_id'}}`, encodeURIComponent(`${params['fineTuneId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a model response for the given chat conversation.
   * @param params.createChatCompletionRequest 
   */
  async createChatCompletion(params: ICreateChatCompletionParams): Promise<CreateChatCompletionResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('createChatCompletion', params, 'createChatCompletionRequest');

    // Create URL to call
    const url = `${this.basePath}/chat/completions`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['createChatCompletionRequest'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a completion for the provided prompt and parameters.
   * @param params.createCompletionRequest 
   */
  async createCompletion(params: ICreateCompletionParams): Promise<CreateCompletionResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('createCompletion', params, 'createCompletionRequest');

    // Create URL to call
    const url = `${this.basePath}/completions`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['createCompletionRequest'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a new edit for the provided input, instruction, and parameters.
   * @param params.createEditRequest 
   */
  async createEdit(params: ICreateEditParams): Promise<CreateEditResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('createEdit', params, 'createEditRequest');

    // Create URL to call
    const url = `${this.basePath}/edits`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['createEditRequest'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates an embedding vector representing the input text.
   * @param params.createEmbeddingRequest 
   */
  async createEmbedding(params: ICreateEmbeddingParams): Promise<CreateEmbeddingResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('createEmbedding', params, 'createEmbeddingRequest');

    // Create URL to call
    const url = `${this.basePath}/embeddings`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['createEmbeddingRequest'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. 
   * @param params.file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\&quot;fine-tune\\\&quot;, each line is a JSON record with \\\&quot;prompt\\\&quot; and \\\&quot;completion\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data). 
   * @param params.purpose The intended purpose of the uploaded documents.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. 
   */
  async createFile(params: ICreateFileParams): Promise<OpenAIFile> {
    // Verify required parameters are set
    this.ensureParamIsSet('createFile', params, 'file');
    this.ensureParamIsSet('createFile', params, 'purpose');

    // Create URL to call
    const url = `${this.basePath}/files`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'file': params['file'],
        'purpose': params['purpose'],
      }))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
   * @param params.createFineTuneRequest 
   */
  async createFineTune(params: ICreateFineTuneParams): Promise<FineTune> {
    // Verify required parameters are set
    this.ensureParamIsSet('createFineTune', params, 'createFineTuneRequest');

    // Create URL to call
    const url = `${this.basePath}/fine-tunes`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['createFineTuneRequest'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates an image given a prompt.
   * @param params.createImageRequest 
   */
  async createImage(params: ICreateImageParams): Promise<ImagesResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('createImage', params, 'createImageRequest');

    // Create URL to call
    const url = `${this.basePath}/images/generations`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['createImageRequest'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates an edited or extended image given an original image and a prompt.
   * @param params.image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
   * @param params.prompt A text description of the desired image(s). The maximum length is 1000 characters.
   * @param params.mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.
   * @param params.n The number of images to generate. Must be between 1 and 10.
   * @param params.size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
   * @param params.responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.
   * @param params.user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
   */
  async createImageEdit(params: ICreateImageEditParams): Promise<ImagesResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('createImageEdit', params, 'image');
    this.ensureParamIsSet('createImageEdit', params, 'prompt');

    // Create URL to call
    const url = `${this.basePath}/images/edits`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'image': params['image'],
        'mask': params['mask'],
        'prompt': params['prompt'],
        'n': params['n'],
        'size': params['size'],
        'response_format': params['responseFormat'],
        'user': params['user'],
      }))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Creates a variation of a given image.
   * @param params.image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
   * @param params.n The number of images to generate. Must be between 1 and 10.
   * @param params.size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
   * @param params.responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.
   * @param params.user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
   */
  async createImageVariation(params: ICreateImageVariationParams): Promise<ImagesResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('createImageVariation', params, 'image');

    // Create URL to call
    const url = `${this.basePath}/images/variations`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'image': params['image'],
        'n': params['n'],
        'size': params['size'],
        'response_format': params['responseFormat'],
        'user': params['user'],
      }))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Classifies if text violates OpenAI\&#39;s Content Policy
   * @param params.createModerationRequest 
   */
  async createModeration(params: ICreateModerationParams): Promise<CreateModerationResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('createModeration', params, 'createModerationRequest');

    // Create URL to call
    const url = `${this.basePath}/moderations`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['createModerationRequest'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Transcribes audio into the input language.
   * @param params.file The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
   * @param params.model 
   * @param params.prompt An optional text to guide the model\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
   * @param params.responseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
   * @param params.temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
   * @param params.language The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
   */
  async createTranscription(params: ICreateTranscriptionParams): Promise<CreateTranscriptionResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('createTranscription', params, 'file');
    this.ensureParamIsSet('createTranscription', params, 'model');

    // Create URL to call
    const url = `${this.basePath}/audio/transcriptions`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'file': params['file'],
        'model': params['model'],
        'prompt': params['prompt'],
        'response_format': params['responseFormat'],
        'temperature': params['temperature'],
        'language': params['language'],
      }))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Translates audio into English.
   * @param params.file The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
   * @param params.model 
   * @param params.prompt An optional text to guide the model\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. 
   * @param params.responseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
   * @param params.temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
   */
  async createTranslation(params: ICreateTranslationParams): Promise<CreateTranslationResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('createTranslation', params, 'file');
    this.ensureParamIsSet('createTranslation', params, 'model');

    // Create URL to call
    const url = `${this.basePath}/audio/translations`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'file': params['file'],
        'model': params['model'],
        'prompt': params['prompt'],
        'response_format': params['responseFormat'],
        'temperature': params['temperature'],
      }))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete a file.
   * @param params.fileId The ID of the file to use for this request
   */
  async deleteFile(params: IDeleteFileParams): Promise<DeleteFileResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteFile', params, 'fileId');

    // Create URL to call
    const url = `${this.basePath}/files/{file_id}`
      .replace(`{${'file_id'}}`, encodeURIComponent(`${params['fileId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete a fine-tuned model. You must have the Owner role in your organization.
   * @param params.model The model to delete
   */
  async deleteModel(params: IDeleteModelParams): Promise<DeleteModelResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteModel', params, 'model');

    // Create URL to call
    const url = `${this.basePath}/models/{model}`
      .replace(`{${'model'}}`, encodeURIComponent(`${params['model']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns the contents of the specified file
   * @param params.fileId The ID of the file to use for this request
   */
  async downloadFile(params: IDownloadFileParams): Promise<string> {
    // Verify required parameters are set
    this.ensureParamIsSet('downloadFile', params, 'fileId');

    // Create URL to call
    const url = `${this.basePath}/files/{file_id}/content`
      .replace(`{${'file_id'}}`, encodeURIComponent(`${params['fileId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a list of files that belong to the user\&#39;s organization.
   */
  async listFiles(): Promise<ListFilesResponse> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/files`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get fine-grained status updates for a fine-tune job. 
   * @param params.fineTuneId The ID of the fine-tune job to get events for. 
   * @param params.stream Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned. 
   */
  async listFineTuneEvents(params: IListFineTuneEventsParams): Promise<ListFineTuneEventsResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('listFineTuneEvents', params, 'fineTuneId');

    // Create URL to call
    const url = `${this.basePath}/fine-tunes/{fine_tune_id}/events`
      .replace(`{${'fine_tune_id'}}`, encodeURIComponent(`${params['fineTuneId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'stream': params['stream'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List your organization\&#39;s fine-tuning jobs 
   */
  async listFineTunes(): Promise<ListFineTunesResponse> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/fine-tunes`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Lists the currently available models, and provides basic information about each one such as the owner and availability.
   */
  async listModels(): Promise<ListModelsResponse> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/models`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns information about a specific file.
   * @param params.fileId The ID of the file to use for this request
   */
  async retrieveFile(params: IRetrieveFileParams): Promise<OpenAIFile> {
    // Verify required parameters are set
    this.ensureParamIsSet('retrieveFile', params, 'fileId');

    // Create URL to call
    const url = `${this.basePath}/files/{file_id}`
      .replace(`{${'file_id'}}`, encodeURIComponent(`${params['fileId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
   * @param params.fineTuneId The ID of the fine-tune job 
   */
  async retrieveFineTune(params: IRetrieveFineTuneParams): Promise<FineTune> {
    // Verify required parameters are set
    this.ensureParamIsSet('retrieveFineTune', params, 'fineTuneId');

    // Create URL to call
    const url = `${this.basePath}/fine-tunes/{fine_tune_id}`
      .replace(`{${'fine_tune_id'}}`, encodeURIComponent(`${params['fineTuneId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
   * @param params.model The ID of the model to use for this request
   */
  async retrieveModel(params: IRetrieveModelParams): Promise<Model> {
    // Verify required parameters are set
    this.ensureParamIsSet('retrieveModel', params, 'model');

    // Create URL to call
    const url = `${this.basePath}/models/{model}`
      .replace(`{${'model'}}`, encodeURIComponent(`${params['model']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

