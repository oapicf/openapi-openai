/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * A list of [Files](/docs/api-reference/files) attached to an `assistant`.
 */
export interface AssistantFileObject {
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `assistant.file`.
   */
  object: AssistantFileObjectObjectEnum;
  /**
   * The Unix timestamp (in seconds) for when the assistant file was created.
   */
  created_at: number;
  /**
   * The assistant ID that the file is attached to.
   */
  assistant_id: string;
}

/**
 * Enum for the object property.
 */
export type AssistantFileObjectObjectEnum = 'assistant.file';


/**
 * Represents an `assistant` that can call the model and use tools.
 */
export interface AssistantObject {
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `assistant`.
   */
  object: AssistantObjectObjectEnum;
  /**
   * The Unix timestamp (in seconds) for when the assistant was created.
   */
  created_at: number;
  /**
   * The name of the assistant. The maximum length is 256 characters. 
   */
  name: string;
  /**
   * The description of the assistant. The maximum length is 512 characters. 
   */
  description: string;
  /**
   * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
   */
  model: string;
  /**
   * The system instructions that the assistant uses. The maximum length is 256,000 characters. 
   */
  instructions: string;
  /**
   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`. 
   */
  tools: Array<AssistantObjectToolsInner>;
  /**
   * A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. 
   */
  file_ids: Array<string>;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
   */
  metadata: object;
}

/**
 * Enum for the object property.
 */
export type AssistantObjectObjectEnum = 'assistant';

/**
 * @type AssistantObjectToolsInner
 * @export
 */
export type AssistantObjectToolsInner = AssistantToolsCode | AssistantToolsFunction | AssistantToolsRetrieval;

/**
 * @type AssistantStreamEvent
 * Represents an event emitted when streaming a Run.  Each event in a server-sent events stream has an `event` and `data` property:  ``` event: thread.created data: {\"id\": \"thread_123\", \"object\": \"thread\", ...} ```  We emit events whenever a new object is created, transitions to a new state, or is being streamed in parts (deltas). For example, we emit `thread.run.created` when a new run is created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses to create a message during a run, we emit a `thread.message.created event`, a `thread.message.in_progress` event, many `thread.message.delta` events, and finally a `thread.message.completed` event.  We may add additional events over time, so we recommend handling unknown events gracefully in your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to integrate the Assistants API with streaming. 
 * @export
 */
export type AssistantStreamEvent = DoneEvent | ErrorEvent | MessageStreamEvent | RunStepStreamEvent | RunStreamEvent | ThreadStreamEvent;


export interface AssistantToolsCode {
  /**
   * The type of tool being defined: `code_interpreter`
   */
  type: AssistantToolsCodeTypeEnum;
}

/**
 * Enum for the type property.
 */
export type AssistantToolsCodeTypeEnum = 'code_interpreter';


export interface AssistantToolsFunction {
  /**
   * The type of tool being defined: `function`
   */
  type: AssistantToolsFunctionTypeEnum;
  _function: FunctionObject;
}

/**
 * Enum for the type property.
 */
export type AssistantToolsFunctionTypeEnum = 'function';


export interface AssistantToolsRetrieval {
  /**
   * The type of tool being defined: `retrieval`
   */
  type: AssistantToolsRetrievalTypeEnum;
}

/**
 * Enum for the type property.
 */
export type AssistantToolsRetrievalTypeEnum = 'retrieval';


/**
 * Specifies a tool the model should use. Use to force the model to call a specific tool.
 */
export interface AssistantsApiNamedToolChoice {
  /**
   * The type of the tool. If type is `function`, the function name must be set
   */
  type: AssistantsApiNamedToolChoiceTypeEnum;
  _function?: ChatCompletionNamedToolChoiceFunction;
}

/**
 * Enum for the type property.
 */
export type AssistantsApiNamedToolChoiceTypeEnum = 'function' | 'code_interpreter' | 'retrieval';


/**
 * An object describing the expected output of the model. If `json_object` only `function` type `tools` are allowed to be passed to the Run. If `text` the model can return text or any value needed. 
 */
export interface AssistantsApiResponseFormat {
  /**
   * Must be one of `text` or `json_object`.
   */
  type?: AssistantsApiResponseFormatTypeEnum;
}

/**
 * Enum for the type property.
 */
export type AssistantsApiResponseFormatTypeEnum = 'text' | 'json_object';

/**
 * @type AssistantsApiResponseFormatOption
 * Specifies the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.  Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length. 
 * @export
 */
export type AssistantsApiResponseFormatOption = AssistantsApiResponseFormat | string;

/**
 * @type AssistantsApiToolChoiceOption
 * Controls which (if any) tool is called by the model. `none` means the model will not call any tools and instead generates a message. `auto` is the default value and means the model can pick between generating a message or calling a tool. Specifying a particular tool like `{\"type\": \"TOOL_TYPE\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool. 
 * @export
 */
export type AssistantsApiToolChoiceOption = AssistantsApiNamedToolChoice | string;


/**
 * Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function. 
 */
export interface ChatCompletionFunctionCallOption {
  /**
   * The name of the function to call.
   */
  name: string;
}


export interface ChatCompletionFunctions {
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string;
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.   Omitting `parameters` defines a function with an empty parameter list.
   */
  parameters?: { [key: string]: any; };
}


export interface ChatCompletionMessageToolCall {
  /**
   * The ID of the tool call.
   */
  id: string;
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: ChatCompletionMessageToolCallTypeEnum;
  _function: ChatCompletionMessageToolCallFunction;
}

/**
 * Enum for the type property.
 */
export type ChatCompletionMessageToolCallTypeEnum = 'function';


export interface ChatCompletionMessageToolCallChunk {
  index: number;
  /**
   * The ID of the tool call.
   */
  id?: string;
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type?: ChatCompletionMessageToolCallChunkTypeEnum;
  _function?: ChatCompletionMessageToolCallChunkFunction;
}

/**
 * Enum for the type property.
 */
export type ChatCompletionMessageToolCallChunkTypeEnum = 'function';


export interface ChatCompletionMessageToolCallChunkFunction {
  /**
   * The name of the function to call.
   */
  name?: string;
  /**
   * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
   */
  arguments?: string;
}


/**
 * The function that the model called.
 */
export interface ChatCompletionMessageToolCallFunction {
  /**
   * The name of the function to call.
   */
  name: string;
  /**
   * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
   */
  arguments: string;
}


/**
 * Specifies a tool the model should use. Use to force the model to call a specific function.
 */
export interface ChatCompletionNamedToolChoice {
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: ChatCompletionNamedToolChoiceTypeEnum;
  _function: ChatCompletionNamedToolChoiceFunction;
}

/**
 * Enum for the type property.
 */
export type ChatCompletionNamedToolChoiceTypeEnum = 'function';


export interface ChatCompletionNamedToolChoiceFunction {
  /**
   * The name of the function to call.
   */
  name: string;
}


export interface ChatCompletionRequestAssistantMessage {
  /**
   * The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified. 
   */
  content?: string;
  /**
   * The role of the messages author, in this case `assistant`.
   */
  role: ChatCompletionRequestAssistantMessageRoleEnum;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string;
  /**
   * The tool calls generated by the model, such as function calls.
   */
  tool_calls?: Array<ChatCompletionMessageToolCall>;
  function_call?: ChatCompletionRequestAssistantMessageFunctionCall;
}

/**
 * Enum for the role property.
 */
export type ChatCompletionRequestAssistantMessageRoleEnum = 'assistant';


/**
 * Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
 */
export interface ChatCompletionRequestAssistantMessageFunctionCall {
  /**
   * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
   */
  arguments: string;
  /**
   * The name of the function to call.
   */
  name: string;
}


export interface ChatCompletionRequestFunctionMessage {
  /**
   * The role of the messages author, in this case `function`.
   */
  role: ChatCompletionRequestFunctionMessageRoleEnum;
  /**
   * The contents of the function message.
   */
  content: string;
  /**
   * The name of the function to call.
   */
  name: string;
}

/**
 * Enum for the role property.
 */
export type ChatCompletionRequestFunctionMessageRoleEnum = 'function';

/**
 * @type ChatCompletionRequestMessage
 * @export
 */
export type ChatCompletionRequestMessage = ChatCompletionRequestAssistantMessage | ChatCompletionRequestFunctionMessage | ChatCompletionRequestSystemMessage | ChatCompletionRequestToolMessage | ChatCompletionRequestUserMessage;

/**
 * @type ChatCompletionRequestMessageContentPart
 * @export
 */
export type ChatCompletionRequestMessageContentPart = ChatCompletionRequestMessageContentPartImage | ChatCompletionRequestMessageContentPartText;


export interface ChatCompletionRequestMessageContentPartImage {
  /**
   * The type of the content part.
   */
  type: ChatCompletionRequestMessageContentPartImageTypeEnum;
  image_url: ChatCompletionRequestMessageContentPartImageImageUrl;
}

/**
 * Enum for the type property.
 */
export type ChatCompletionRequestMessageContentPartImageTypeEnum = 'image_url';


export interface ChatCompletionRequestMessageContentPartImageImageUrl {
  /**
   * Either a URL of the image or the base64 encoded image data.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision/low-or-high-fidelity-image-understanding).
   */
  detail?: ChatCompletionRequestMessageContentPartImageImageUrlDetailEnum;
}

/**
 * Enum for the detail property.
 */
export type ChatCompletionRequestMessageContentPartImageImageUrlDetailEnum = 'auto' | 'low' | 'high';


export interface ChatCompletionRequestMessageContentPartText {
  /**
   * The type of the content part.
   */
  type: ChatCompletionRequestMessageContentPartTextTypeEnum;
  /**
   * The text content.
   */
  text: string;
}

/**
 * Enum for the type property.
 */
export type ChatCompletionRequestMessageContentPartTextTypeEnum = 'text';


export interface ChatCompletionRequestSystemMessage {
  /**
   * The contents of the system message.
   */
  content: string;
  /**
   * The role of the messages author, in this case `system`.
   */
  role: ChatCompletionRequestSystemMessageRoleEnum;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string;
}

/**
 * Enum for the role property.
 */
export type ChatCompletionRequestSystemMessageRoleEnum = 'system';


export interface ChatCompletionRequestToolMessage {
  /**
   * The role of the messages author, in this case `tool`.
   */
  role: ChatCompletionRequestToolMessageRoleEnum;
  /**
   * The contents of the tool message.
   */
  content: string;
  /**
   * Tool call that this message is responding to.
   */
  tool_call_id: string;
}

/**
 * Enum for the role property.
 */
export type ChatCompletionRequestToolMessageRoleEnum = 'tool';


export interface ChatCompletionRequestUserMessage {
  content: ChatCompletionRequestUserMessageContent;
  /**
   * The role of the messages author, in this case `user`.
   */
  role: ChatCompletionRequestUserMessageRoleEnum;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string;
}

/**
 * Enum for the role property.
 */
export type ChatCompletionRequestUserMessageRoleEnum = 'user';

/**
 * @type ChatCompletionRequestUserMessageContent
 * The contents of the user message. 
 * @export
 */
export type ChatCompletionRequestUserMessageContent = Array<ChatCompletionRequestMessageContentPart> | string;


/**
 * A chat completion message generated by the model.
 */
export interface ChatCompletionResponseMessage {
  /**
   * The contents of the message.
   */
  content: string;
  /**
   * The tool calls generated by the model, such as function calls.
   */
  tool_calls?: Array<ChatCompletionMessageToolCall>;
  /**
   * The role of the author of this message.
   */
  role: ChatCompletionResponseMessageRoleEnum;
  function_call?: ChatCompletionRequestAssistantMessageFunctionCall;
}

/**
 * Enum for the role property.
 */
export type ChatCompletionResponseMessageRoleEnum = 'assistant';


/**
 * The role of the author of a message
 */
export type ChatCompletionRole = 'system' | 'user' | 'assistant' | 'tool' | 'function';

/**
 * A chat completion delta generated by streamed model responses.
 */
export interface ChatCompletionStreamResponseDelta {
  /**
   * The contents of the chunk message.
   */
  content?: string;
  function_call?: ChatCompletionStreamResponseDeltaFunctionCall;
  tool_calls?: Array<ChatCompletionMessageToolCallChunk>;
  /**
   * The role of the author of this message.
   */
  role?: ChatCompletionStreamResponseDeltaRoleEnum;
}

/**
 * Enum for the role property.
 */
export type ChatCompletionStreamResponseDeltaRoleEnum = 'system' | 'user' | 'assistant' | 'tool';


/**
 * Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
 */
export interface ChatCompletionStreamResponseDeltaFunctionCall {
  /**
   * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
   */
  arguments?: string;
  /**
   * The name of the function to call.
   */
  name?: string;
}


export interface ChatCompletionTokenLogprob {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
   */
  bytes: Array<number>;
  /**
   * List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
   */
  top_logprobs: Array<ChatCompletionTokenLogprobTopLogprobsInner>;
}


export interface ChatCompletionTokenLogprobTopLogprobsInner {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
   */
  bytes: Array<number>;
}


export interface ChatCompletionTool {
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: ChatCompletionToolTypeEnum;
  _function: FunctionObject;
}

/**
 * Enum for the type property.
 */
export type ChatCompletionToolTypeEnum = 'function';

/**
 * @type ChatCompletionToolChoiceOption
 * Controls which (if any) function is called by the model. `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function. Specifying a particular function via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that function.  `none` is the default when no functions are present. `auto` is the default if functions are present. 
 * @export
 */
export type ChatCompletionToolChoiceOption = ChatCompletionNamedToolChoice | string;


/**
 * Usage statistics for the completion request.
 */
export interface CompletionUsage {
  /**
   * Number of tokens in the generated completion.
   */
  completion_tokens: number;
  /**
   * Number of tokens in the prompt.
   */
  prompt_tokens: number;
  /**
   * Total number of tokens used in the request (prompt + completion).
   */
  total_tokens: number;
}


export interface CreateAssistantFileRequest {
  /**
   * A [File](/docs/api-reference/files) ID (with `purpose=\"assistants\"`) that the assistant should use. Useful for tools like `retrieval` and `code_interpreter` that can access files.
   */
  file_id: string;
}


export interface CreateAssistantRequest {
  model: CreateAssistantRequestModel;
  /**
   * The name of the assistant. The maximum length is 256 characters. 
   */
  name?: string;
  /**
   * The description of the assistant. The maximum length is 512 characters. 
   */
  description?: string;
  /**
   * The system instructions that the assistant uses. The maximum length is 256,000 characters. 
   */
  instructions?: string;
  /**
   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`. 
   */
  tools?: Array<AssistantObjectToolsInner>;
  /**
   * A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. 
   */
  file_ids?: Array<string>;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
   */
  metadata?: object;
}


/**
 * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
 */
export interface CreateAssistantRequestModel {
}


/**
 * Represents a chat completion response returned by model, based on the provided input.
 */
export interface CreateChatCompletionFunctionResponse {
  /**
   * A unique identifier for the chat completion.
   */
  id: string;
  /**
   * A list of chat completion choices. Can be more than one if `n` is greater than 1.
   */
  choices: Array<CreateChatCompletionFunctionResponseChoicesInner>;
  /**
   * The Unix timestamp (in seconds) of when the chat completion was created.
   */
  created: number;
  /**
   * The model used for the chat completion.
   */
  model: string;
  /**
   * This fingerprint represents the backend configuration that the model runs with.  Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism. 
   */
  system_fingerprint?: string;
  /**
   * The object type, which is always `chat.completion`.
   */
  object: CreateChatCompletionFunctionResponseObjectEnum;
  usage?: CompletionUsage;
}

/**
 * Enum for the object property.
 */
export type CreateChatCompletionFunctionResponseObjectEnum = 'chat.completion';


export interface CreateChatCompletionFunctionResponseChoicesInner {
  /**
   * The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function. 
   */
  finish_reason: CreateChatCompletionFunctionResponseChoicesInnerFinishReasonEnum;
  /**
   * The index of the choice in the list of choices.
   */
  index: number;
  message: ChatCompletionResponseMessage;
}

/**
 * Enum for the finish_reason property.
 */
export type CreateChatCompletionFunctionResponseChoicesInnerFinishReasonEnum = 'stop' | 'length' | 'function_call' | 'content_filter';


export interface CreateChatCompletionRequest {
  /**
   * A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
   */
  messages: Array<ChatCompletionRequestMessage>;
  model: CreateChatCompletionRequestModel;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model\'s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
   */
  frequency_penalty?: number;
  /**
   * Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. 
   */
  logit_bias?: { [key: string]: number; };
  /**
   * Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.
   */
  logprobs?: boolean;
  /**
   * An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
   */
  top_logprobs?: number;
  /**
   * The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.  The total length of input tokens and generated tokens is limited by the model\'s context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. 
   */
  max_tokens?: number;
  /**
   * How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
   */
  n?: number;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model\'s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
   */
  presence_penalty?: number;
  response_format?: CreateChatCompletionRequestResponseFormat;
  /**
   * This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend. 
   */
  seed?: number;
  stop?: CreateChatCompletionRequestStop;
  /**
   * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). 
   */
  stream?: boolean;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
   */
  temperature?: number;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
   */
  top_p?: number;
  /**
   * A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported. 
   */
  tools?: Array<ChatCompletionTool>;
  tool_choice?: ChatCompletionToolChoiceOption;
  /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
   */
  user?: string;
  function_call?: CreateChatCompletionRequestFunctionCall;
  /**
   * Deprecated in favor of `tools`.  A list of functions the model may generate JSON inputs for. 
   */
  functions?: Array<ChatCompletionFunctions>;
}

/**
 * @type CreateChatCompletionRequestFunctionCall
 * Deprecated in favor of `tool_choice`.  Controls which (if any) function is called by the model. `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function. Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.  `none` is the default when no functions are present. `auto` is the default if functions are present. 
 * @export
 */
export type CreateChatCompletionRequestFunctionCall = ChatCompletionFunctionCallOption | string;


/**
 * ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
 */
export interface CreateChatCompletionRequestModel {
}


/**
 * An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.  Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length. 
 */
export interface CreateChatCompletionRequestResponseFormat {
  /**
   * Must be one of `text` or `json_object`.
   */
  type?: CreateChatCompletionRequestResponseFormatTypeEnum;
}

/**
 * Enum for the type property.
 */
export type CreateChatCompletionRequestResponseFormatTypeEnum = 'text' | 'json_object';

/**
 * @type CreateChatCompletionRequestStop
 * Up to 4 sequences where the API will stop generating further tokens. 
 * @export
 */
export type CreateChatCompletionRequestStop = Array<string> | string;


/**
 * Represents a chat completion response returned by model, based on the provided input.
 */
export interface CreateChatCompletionResponse {
  /**
   * A unique identifier for the chat completion.
   */
  id: string;
  /**
   * A list of chat completion choices. Can be more than one if `n` is greater than 1.
   */
  choices: Array<CreateChatCompletionResponseChoicesInner>;
  /**
   * The Unix timestamp (in seconds) of when the chat completion was created.
   */
  created: number;
  /**
   * The model used for the chat completion.
   */
  model: string;
  /**
   * This fingerprint represents the backend configuration that the model runs with.  Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism. 
   */
  system_fingerprint?: string;
  /**
   * The object type, which is always `chat.completion`.
   */
  object: CreateChatCompletionResponseObjectEnum;
  usage?: CompletionUsage;
}

/**
 * Enum for the object property.
 */
export type CreateChatCompletionResponseObjectEnum = 'chat.completion';


export interface CreateChatCompletionResponseChoicesInner {
  /**
   * The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function. 
   */
  finish_reason: CreateChatCompletionResponseChoicesInnerFinishReasonEnum;
  /**
   * The index of the choice in the list of choices.
   */
  index: number;
  message: ChatCompletionResponseMessage;
  logprobs: CreateChatCompletionResponseChoicesInnerLogprobs;
}

/**
 * Enum for the finish_reason property.
 */
export type CreateChatCompletionResponseChoicesInnerFinishReasonEnum = 'stop' | 'length' | 'tool_calls' | 'content_filter' | 'function_call';


/**
 * Log probability information for the choice.
 */
export interface CreateChatCompletionResponseChoicesInnerLogprobs {
  /**
   * A list of message content tokens with log probability information.
   */
  content: Array<ChatCompletionTokenLogprob>;
}


/**
 * Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
 */
export interface CreateChatCompletionStreamResponse {
  /**
   * A unique identifier for the chat completion. Each chunk has the same ID.
   */
  id: string;
  /**
   * A list of chat completion choices. Can be more than one if `n` is greater than 1.
   */
  choices: Array<CreateChatCompletionStreamResponseChoicesInner>;
  /**
   * The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
   */
  created: number;
  /**
   * The model to generate the completion.
   */
  model: string;
  /**
   * This fingerprint represents the backend configuration that the model runs with. Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism. 
   */
  system_fingerprint?: string;
  /**
   * The object type, which is always `chat.completion.chunk`.
   */
  object: CreateChatCompletionStreamResponseObjectEnum;
}

/**
 * Enum for the object property.
 */
export type CreateChatCompletionStreamResponseObjectEnum = 'chat.completion.chunk';


export interface CreateChatCompletionStreamResponseChoicesInner {
  delta: ChatCompletionStreamResponseDelta;
  logprobs?: CreateChatCompletionResponseChoicesInnerLogprobs;
  /**
   * The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function. 
   */
  finish_reason: CreateChatCompletionStreamResponseChoicesInnerFinishReasonEnum;
  /**
   * The index of the choice in the list of choices.
   */
  index: number;
}

/**
 * Enum for the finish_reason property.
 */
export type CreateChatCompletionStreamResponseChoicesInnerFinishReasonEnum = 'stop' | 'length' | 'tool_calls' | 'content_filter' | 'function_call';


export interface CreateCompletionRequest {
  model: CreateCompletionRequestModel;
  prompt: CreateCompletionRequestPrompt;
  /**
   * Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.  When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`. 
   */
  best_of?: number;
  /**
   * Echo back the prompt in addition to the completion 
   */
  echo?: boolean;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model\'s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
   */
  frequency_penalty?: number;
  /**
   * Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated. 
   */
  logit_bias?: { [key: string]: number; };
  /**
   * Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5. 
   */
  logprobs?: number;
  /**
   * The maximum number of [tokens](/tokenizer) that can be generated in the completion.  The token count of your prompt plus `max_tokens` cannot exceed the model\'s context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. 
   */
  max_tokens?: number;
  /**
   * How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`. 
   */
  n?: number;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model\'s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
   */
  presence_penalty?: number;
  /**
   * If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.  Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend. 
   */
  seed?: number;
  stop?: CreateCompletionRequestStop;
  /**
   * Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). 
   */
  stream?: boolean;
  /**
   * The suffix that comes after a completion of inserted text.  This parameter is only supported for `gpt-3.5-turbo-instruct`. 
   */
  suffix?: string;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
   */
  temperature?: number;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
   */
  top_p?: number;
  /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
   */
  user?: string;
}


/**
 * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
 */
export interface CreateCompletionRequestModel {
}

/**
 * @type CreateCompletionRequestPrompt
 * The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.  Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document. 
 * @export
 */
export type CreateCompletionRequestPrompt = Array<Array<number>> | Array<number> | Array<string> | string;

/**
 * @type CreateCompletionRequestStop
 * Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence. 
 * @export
 */
export type CreateCompletionRequestStop = Array<string> | string;


/**
 * Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint). 
 */
export interface CreateCompletionResponse {
  /**
   * A unique identifier for the completion.
   */
  id: string;
  /**
   * The list of completion choices the model generated for the input prompt.
   */
  choices: Array<CreateCompletionResponseChoicesInner>;
  /**
   * The Unix timestamp (in seconds) of when the completion was created.
   */
  created: number;
  /**
   * The model used for completion.
   */
  model: string;
  /**
   * This fingerprint represents the backend configuration that the model runs with.  Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism. 
   */
  system_fingerprint?: string;
  /**
   * The object type, which is always \"text_completion\"
   */
  object: CreateCompletionResponseObjectEnum;
  usage?: CompletionUsage;
}

/**
 * Enum for the object property.
 */
export type CreateCompletionResponseObjectEnum = 'text_completion';


export interface CreateCompletionResponseChoicesInner {
  /**
   * The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, or `content_filter` if content was omitted due to a flag from our content filters. 
   */
  finish_reason: CreateCompletionResponseChoicesInnerFinishReasonEnum;
  index: number;
  logprobs: CreateCompletionResponseChoicesInnerLogprobs;
  text: string;
}

/**
 * Enum for the finish_reason property.
 */
export type CreateCompletionResponseChoicesInnerFinishReasonEnum = 'stop' | 'length' | 'content_filter';


export interface CreateCompletionResponseChoicesInnerLogprobs {
  text_offset?: Array<number>;
  token_logprobs?: Array<number>;
  tokens?: Array<string>;
  top_logprobs?: Array<{ [key: string]: number; }>;
}


export interface CreateEmbeddingRequest {
  input: CreateEmbeddingRequestInput;
  model: CreateEmbeddingRequestModel;
  /**
   * The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
   */
  encoding_format?: CreateEmbeddingRequestEncodingFormatEnum;
  /**
   * The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models. 
   */
  dimensions?: number;
  /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
   */
  user?: string;
}

/**
 * Enum for the encoding_format property.
 */
export type CreateEmbeddingRequestEncodingFormatEnum = 'float' | 'base64';

/**
 * @type CreateEmbeddingRequestInput
 * Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. 
 * @export
 */
export type CreateEmbeddingRequestInput = Array<Array<number>> | Array<number> | Array<string> | string;


/**
 * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
 */
export interface CreateEmbeddingRequestModel {
}


export interface CreateEmbeddingResponse {
  /**
   * The list of embeddings generated by the model.
   */
  data: Array<Embedding>;
  /**
   * The name of the model used to generate the embedding.
   */
  model: string;
  /**
   * The object type, which is always \"list\".
   */
  object: CreateEmbeddingResponseObjectEnum;
  usage: CreateEmbeddingResponseUsage;
}

/**
 * Enum for the object property.
 */
export type CreateEmbeddingResponseObjectEnum = 'list';


/**
 * The usage information for the request.
 */
export interface CreateEmbeddingResponseUsage {
  /**
   * The number of tokens used by the prompt.
   */
  prompt_tokens: number;
  /**
   * The total number of tokens used by the request.
   */
  total_tokens: number;
}


export interface CreateFineTuningJobRequest {
  model: CreateFineTuningJobRequestModel;
  /**
   * The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
   */
  training_file: string;
  hyperparameters?: CreateFineTuningJobRequestHyperparameters;
  /**
   * A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`. 
   */
  suffix?: string;
  /**
   * The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
   */
  validation_file?: string;
  /**
   * A list of integrations to enable for your fine-tuning job.
   */
  integrations?: Array<CreateFineTuningJobRequestIntegrationsInner>;
  /**
   * The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases. If a seed is not specified, one will be generated for you. 
   */
  seed?: number;
}


/**
 * The hyperparameters used for the fine-tuning job.
 */
export interface CreateFineTuningJobRequestHyperparameters {
  batch_size?: CreateFineTuningJobRequestHyperparametersBatchSize;
  learning_rate_multiplier?: CreateFineTuningJobRequestHyperparametersLearningRateMultiplier;
  n_epochs?: CreateFineTuningJobRequestHyperparametersNEpochs;
}

/**
 * @type CreateFineTuningJobRequestHyperparametersBatchSize
 * Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance. 
 * @export
 */
export type CreateFineTuningJobRequestHyperparametersBatchSize = number | string;

/**
 * @type CreateFineTuningJobRequestHyperparametersLearningRateMultiplier
 * Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting. 
 * @export
 */
export type CreateFineTuningJobRequestHyperparametersLearningRateMultiplier = number | string;

/**
 * @type CreateFineTuningJobRequestHyperparametersNEpochs
 * The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. 
 * @export
 */
export type CreateFineTuningJobRequestHyperparametersNEpochs = number | string;


export interface CreateFineTuningJobRequestIntegrationsInner {
  type: CreateFineTuningJobRequestIntegrationsInnerType;
  wandb: CreateFineTuningJobRequestIntegrationsInnerWandb;
}

/**
 * @type CreateFineTuningJobRequestIntegrationsInnerType
 * The type of integration to enable. Currently, only \"wandb\" (Weights and Biases) is supported. 
 * @export
 */
export type CreateFineTuningJobRequestIntegrationsInnerType = string;


/**
 * The settings for your integration with Weights and Biases. This payload specifies the project that metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags to your run, and set a default entity (team, username, etc) to be associated with your run. 
 */
export interface CreateFineTuningJobRequestIntegrationsInnerWandb {
  /**
   * The name of the project that the new run will be created under. 
   */
  project: string;
  /**
   * A display name to set for the run. If not set, we will use the Job ID as the name. 
   */
  name?: string;
  /**
   * The entity to use for the run. This allows you to set the team or username of the WandB user that you would like associated with the run. If not set, the default entity for the registered WandB API key is used. 
   */
  entity?: string;
  /**
   * A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some default tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\". 
   */
  tags?: Array<string>;
}


/**
 * The name of the model to fine-tune. You can select one of the [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned). 
 */
export interface CreateFineTuningJobRequestModel {
}


/**
 * The model to use for image generation. Only `dall-e-2` is supported at this time.
 */
export interface CreateImageEditRequestModel {
}


export interface CreateImageRequest {
  /**
   * A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
   */
  prompt: string;
  model?: CreateImageRequestModel;
  /**
   * The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
   */
  n?: number;
  /**
   * The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
   */
  quality?: CreateImageRequestQualityEnum;
  /**
   * The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
   */
  response_format?: CreateImageRequestResponseFormatEnum;
  /**
   * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
   */
  size?: CreateImageRequestSizeEnum;
  /**
   * The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
   */
  style?: CreateImageRequestStyleEnum;
  /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
   */
  user?: string;
}

/**
 * Enum for the quality property.
 */
export type CreateImageRequestQualityEnum = 'standard' | 'hd';

/**
 * Enum for the response_format property.
 */
export type CreateImageRequestResponseFormatEnum = 'url' | 'b64_json';

/**
 * Enum for the size property.
 */
export type CreateImageRequestSizeEnum = '256x256' | '512x512' | '1024x1024' | '1792x1024' | '1024x1792';

/**
 * Enum for the style property.
 */
export type CreateImageRequestStyleEnum = 'vivid' | 'natural';


/**
 * The model to use for image generation.
 */
export interface CreateImageRequestModel {
}


export interface CreateMessageRequest {
  /**
   * The role of the entity that is creating the message. Allowed values include: - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages. - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation. 
   */
  role: CreateMessageRequestRoleEnum;
  /**
   * The content of the message.
   */
  content: string;
  /**
   * A list of [File](/docs/api-reference/files) IDs that the message should use. There can be a maximum of 10 files attached to a message. Useful for tools like `retrieval` and `code_interpreter` that can access and use files.
   */
  file_ids?: Array<string>;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
   */
  metadata?: object;
}

/**
 * Enum for the role property.
 */
export type CreateMessageRequestRoleEnum = 'user' | 'assistant';


export interface CreateModerationRequest {
  input: CreateModerationRequestInput;
  model?: CreateModerationRequestModel;
}

/**
 * @type CreateModerationRequestInput
 * The input text to classify
 * @export
 */
export type CreateModerationRequestInput = Array<string> | string;


/**
 * Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.  The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`. 
 */
export interface CreateModerationRequestModel {
}


/**
 * Represents if a given text input is potentially harmful.
 */
export interface CreateModerationResponse {
  /**
   * The unique identifier for the moderation request.
   */
  id: string;
  /**
   * The model used to generate the moderation results.
   */
  model: string;
  /**
   * A list of moderation objects.
   */
  results: Array<CreateModerationResponseResultsInner>;
}


export interface CreateModerationResponseResultsInner {
  /**
   * Whether any of the below categories are flagged.
   */
  flagged: boolean;
  categories: CreateModerationResponseResultsInnerCategories;
  category_scores: CreateModerationResponseResultsInnerCategoryScores;
}


/**
 * A list of the categories, and whether they are flagged or not.
 */
export interface CreateModerationResponseResultsInnerCategories {
  /**
   * Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.
   */
  hate: boolean;
  /**
   * Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
   */
  hate_threatening: boolean;
  /**
   * Content that expresses, incites, or promotes harassing language towards any target.
   */
  harassment: boolean;
  /**
   * Harassment content that also includes violence or serious harm towards any target.
   */
  harassment_threatening: boolean;
  /**
   * Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
   */
  self_harm: boolean;
  /**
   * Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.
   */
  self_harm_intent: boolean;
  /**
   * Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
   */
  self_harm_instructions: boolean;
  /**
   * Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).
   */
  sexual: boolean;
  /**
   * Sexual content that includes an individual who is under 18 years old.
   */
  sexual_minors: boolean;
  /**
   * Content that depicts death, violence, or physical injury.
   */
  violence: boolean;
  /**
   * Content that depicts death, violence, or physical injury in graphic detail.
   */
  violence_graphic: boolean;
}


/**
 * A list of the categories along with their scores as predicted by model.
 */
export interface CreateModerationResponseResultsInnerCategoryScores {
  /**
   * The score for the category \'hate\'.
   */
  hate: number;
  /**
   * The score for the category \'hate/threatening\'.
   */
  hate_threatening: number;
  /**
   * The score for the category \'harassment\'.
   */
  harassment: number;
  /**
   * The score for the category \'harassment/threatening\'.
   */
  harassment_threatening: number;
  /**
   * The score for the category \'self-harm\'.
   */
  self_harm: number;
  /**
   * The score for the category \'self-harm/intent\'.
   */
  self_harm_intent: number;
  /**
   * The score for the category \'self-harm/instructions\'.
   */
  self_harm_instructions: number;
  /**
   * The score for the category \'sexual\'.
   */
  sexual: number;
  /**
   * The score for the category \'sexual/minors\'.
   */
  sexual_minors: number;
  /**
   * The score for the category \'violence\'.
   */
  violence: number;
  /**
   * The score for the category \'violence/graphic\'.
   */
  violence_graphic: number;
}


export interface CreateRunRequest {
  /**
   * The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
   */
  assistant_id: string;
  model?: CreateRunRequestModel;
  /**
   * Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
   */
  instructions?: string;
  /**
   * Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
   */
  additional_instructions?: string;
  /**
   * Adds additional messages to the thread before creating the run.
   */
  additional_messages?: Array<CreateMessageRequest>;
  /**
   * Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
   */
  tools?: Array<AssistantObjectToolsInner>;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
   */
  metadata?: object;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. 
   */
  temperature?: number;
  /**
   * If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message. 
   */
  stream?: boolean;
  /**
   * The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `complete`. See `incomplete_details` for more info. 
   */
  max_prompt_tokens?: number;
  /**
   * The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `complete`. See `incomplete_details` for more info. 
   */
  max_completion_tokens?: number;
  truncation_strategy?: TruncationObject;
  tool_choice?: AssistantsApiToolChoiceOption;
  response_format?: AssistantsApiResponseFormatOption;
}


/**
 * The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
 */
export interface CreateRunRequestModel {
}


export interface CreateSpeechRequest {
  model: CreateSpeechRequestModel;
  /**
   * The text to generate audio for. The maximum length is 4096 characters.
   */
  input: string;
  /**
   * The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
   */
  voice: CreateSpeechRequestVoiceEnum;
  /**
   * The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
   */
  response_format?: CreateSpeechRequestResponseFormatEnum;
  /**
   * The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
   */
  speed?: number;
}

/**
 * Enum for the voice property.
 */
export type CreateSpeechRequestVoiceEnum = 'alloy' | 'echo' | 'fable' | 'onyx' | 'nova' | 'shimmer';

/**
 * Enum for the response_format property.
 */
export type CreateSpeechRequestResponseFormatEnum = 'mp3' | 'opus' | 'aac' | 'flac' | 'wav' | 'pcm';


/**
 * One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd` 
 */
export interface CreateSpeechRequestModel {
}


export interface CreateThreadAndRunRequest {
  /**
   * The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
   */
  assistant_id: string;
  thread?: CreateThreadRequest;
  model?: CreateRunRequestModel;
  /**
   * Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
   */
  instructions?: string;
  /**
   * Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
   */
  tools?: Array<CreateThreadAndRunRequestToolsInner>;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
   */
  metadata?: object;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. 
   */
  temperature?: number;
  /**
   * If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message. 
   */
  stream?: boolean;
  /**
   * The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `complete`. See `incomplete_details` for more info. 
   */
  max_prompt_tokens?: number;
  /**
   * The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info. 
   */
  max_completion_tokens?: number;
  truncation_strategy?: TruncationObject;
  tool_choice?: AssistantsApiToolChoiceOption;
  response_format?: AssistantsApiResponseFormatOption;
}

/**
 * @type CreateThreadAndRunRequestToolsInner
 * @export
 */
export type CreateThreadAndRunRequestToolsInner = AssistantToolsCode | AssistantToolsFunction | AssistantToolsRetrieval;


export interface CreateThreadRequest {
  /**
   * A list of [messages](/docs/api-reference/messages) to start the thread with.
   */
  messages?: Array<CreateMessageRequest>;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
   */
  metadata?: object;
}

/**
 * @type CreateTranscription200Response
 * @export
 */
export type CreateTranscription200Response = CreateTranscriptionResponseJson | CreateTranscriptionResponseVerboseJson;


/**
 * ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available. 
 */
export interface CreateTranscriptionRequestModel {
}


/**
 * Represents a transcription response returned by model, based on the provided input.
 */
export interface CreateTranscriptionResponseJson {
  /**
   * The transcribed text.
   */
  text: string;
}


/**
 * Represents a verbose json transcription response returned by model, based on the provided input.
 */
export interface CreateTranscriptionResponseVerboseJson {
  /**
   * The language of the input audio.
   */
  language: string;
  /**
   * The duration of the input audio.
   */
  duration: string;
  /**
   * The transcribed text.
   */
  text: string;
  /**
   * Extracted words and their corresponding timestamps.
   */
  words?: Array<TranscriptionWord>;
  /**
   * Segments of the transcribed text and their corresponding details.
   */
  segments?: Array<TranscriptionSegment>;
}

/**
 * @type CreateTranslation200Response
 * @export
 */
export type CreateTranslation200Response = CreateTranslationResponseJson | CreateTranslationResponseVerboseJson;


export interface CreateTranslationResponseJson {
  text: string;
}


export interface CreateTranslationResponseVerboseJson {
  /**
   * The language of the output translation (always `english`).
   */
  language: string;
  /**
   * The duration of the input audio.
   */
  duration: string;
  /**
   * The translated text.
   */
  text: string;
  /**
   * Segments of the translated text and their corresponding details.
   */
  segments?: Array<TranscriptionSegment>;
}


/**
 * Deletes the association between the assistant and the file, but does not delete the [File](/docs/api-reference/files) object itself.
 */
export interface DeleteAssistantFileResponse {
  id: string;
  deleted: boolean;
  object: DeleteAssistantFileResponseObjectEnum;
}

/**
 * Enum for the object property.
 */
export type DeleteAssistantFileResponseObjectEnum = 'assistant.file.deleted';


export interface DeleteAssistantResponse {
  id: string;
  deleted: boolean;
  object: DeleteAssistantResponseObjectEnum;
}

/**
 * Enum for the object property.
 */
export type DeleteAssistantResponseObjectEnum = 'assistant.deleted';


export interface DeleteFileResponse {
  id: string;
  object: DeleteFileResponseObjectEnum;
  deleted: boolean;
}

/**
 * Enum for the object property.
 */
export type DeleteFileResponseObjectEnum = 'file';


export interface DeleteMessageResponse {
  id: string;
  deleted: boolean;
  object: DeleteMessageResponseObjectEnum;
}

/**
 * Enum for the object property.
 */
export type DeleteMessageResponseObjectEnum = 'thread.message.deleted';


export interface DeleteModelResponse {
  id: string;
  deleted: boolean;
  object: string;
}


export interface DeleteThreadResponse {
  id: string;
  deleted: boolean;
  object: DeleteThreadResponseObjectEnum;
}

/**
 * Enum for the object property.
 */
export type DeleteThreadResponseObjectEnum = 'thread.deleted';


/**
 * Occurs when a stream ends.
 */
export interface DoneEvent {
  event: DoneEventEventEnum;
  data: DoneEventDataEnum;
}

/**
 * Enum for the event property.
 */
export type DoneEventEventEnum = 'done';

/**
 * Enum for the data property.
 */
export type DoneEventDataEnum = '[DONE]';


/**
 * Represents an embedding vector returned by embedding endpoint. 
 */
export interface Embedding {
  /**
   * The index of the embedding in the list of embeddings.
   */
  index: number;
  /**
   * The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings). 
   */
  embedding: Array<number>;
  /**
   * The object type, which is always \"embedding\".
   */
  object: EmbeddingObjectEnum;
}

/**
 * Enum for the object property.
 */
export type EmbeddingObjectEnum = 'embedding';


/**
 * Occurs when an [error](/docs/guides/error-codes/api-errors) occurs. This can happen due to an internal server error or a timeout.
 */
export interface ErrorEvent {
  event: ErrorEventEventEnum;
  data: Error;
}

/**
 * Enum for the event property.
 */
export type ErrorEventEventEnum = 'error';


export interface ErrorResponse {
  error: Error;
}


export interface FineTuningIntegration {
  /**
   * The type of the integration being enabled for the fine-tuning job
   */
  type: FineTuningIntegrationTypeEnum;
  wandb: CreateFineTuningJobRequestIntegrationsInnerWandb;
}

/**
 * Enum for the type property.
 */
export type FineTuningIntegrationTypeEnum = 'wandb';


/**
 * The `fine_tuning.job` object represents a fine-tuning job that has been created through the API. 
 */
export interface FineTuningJob {
  /**
   * The object identifier, which can be referenced in the API endpoints.
   */
  id: string;
  /**
   * The Unix timestamp (in seconds) for when the fine-tuning job was created.
   */
  created_at: number;
  error: FineTuningJobError;
  /**
   * The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
   */
  fine_tuned_model: string;
  /**
   * The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
   */
  finished_at: number;
  hyperparameters: FineTuningJobHyperparameters;
  /**
   * The base model that is being fine-tuned.
   */
  model: string;
  /**
   * The object type, which is always \"fine_tuning.job\".
   */
  object: FineTuningJobObjectEnum;
  /**
   * The organization that owns the fine-tuning job.
   */
  organization_id: string;
  /**
   * The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
   */
  result_files: Array<string>;
  /**
   * The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
   */
  status: FineTuningJobStatusEnum;
  /**
   * The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
   */
  trained_tokens: number;
  /**
   * The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
   */
  training_file: string;
  /**
   * The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
   */
  validation_file: string;
  /**
   * A list of integrations to enable for this fine-tuning job.
   */
  integrations?: Array<FineTuningJobIntegrationsInner>;
  /**
   * The seed used for the fine-tuning job.
   */
  seed: number;
}

/**
 * Enum for the object property.
 */
export type FineTuningJobObjectEnum = 'fine_tuning.job';

/**
 * Enum for the status property.
 */
export type FineTuningJobStatusEnum = 'validating_files' | 'queued' | 'running' | 'succeeded' | 'failed' | 'cancelled';


/**
 * The `fine_tuning.job.checkpoint` object represents a model checkpoint for a fine-tuning job that is ready to use. 
 */
export interface FineTuningJobCheckpoint {
  /**
   * The checkpoint identifier, which can be referenced in the API endpoints.
   */
  id: string;
  /**
   * The Unix timestamp (in seconds) for when the checkpoint was created.
   */
  created_at: number;
  /**
   * The name of the fine-tuned checkpoint model that is created.
   */
  fine_tuned_model_checkpoint: string;
  /**
   * The step number that the checkpoint was created at.
   */
  step_number: number;
  metrics: FineTuningJobCheckpointMetrics;
  /**
   * The name of the fine-tuning job that this checkpoint was created from.
   */
  fine_tuning_job_id: string;
  /**
   * The object type, which is always \"fine_tuning.job.checkpoint\".
   */
  object: FineTuningJobCheckpointObjectEnum;
}

/**
 * Enum for the object property.
 */
export type FineTuningJobCheckpointObjectEnum = 'fine_tuning.job.checkpoint';


/**
 * Metrics at the step number during the fine-tuning job.
 */
export interface FineTuningJobCheckpointMetrics {
  step?: number;
  train_loss?: number;
  train_mean_token_accuracy?: number;
  valid_loss?: number;
  valid_mean_token_accuracy?: number;
  full_valid_loss?: number;
  full_valid_mean_token_accuracy?: number;
}


/**
 * For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
 */
export interface FineTuningJobError {
  /**
   * A machine-readable error code.
   */
  code: string;
  /**
   * A human-readable error message.
   */
  message: string;
  /**
   * The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.
   */
  param: string;
}


/**
 * Fine-tuning job event object
 */
export interface FineTuningJobEvent {
  id: string;
  created_at: number;
  level: FineTuningJobEventLevelEnum;
  message: string;
  object: FineTuningJobEventObjectEnum;
}

/**
 * Enum for the level property.
 */
export type FineTuningJobEventLevelEnum = 'info' | 'warn' | 'error';

/**
 * Enum for the object property.
 */
export type FineTuningJobEventObjectEnum = 'fine_tuning.job.event';


/**
 * The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
 */
export interface FineTuningJobHyperparameters {
  n_epochs: FineTuningJobHyperparametersNEpochs;
}

/**
 * @type FineTuningJobHyperparametersNEpochs
 * The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. \"auto\" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
 * @export
 */
export type FineTuningJobHyperparametersNEpochs = number | string;

/**
 * @type FineTuningJobIntegrationsInner
 * @export
 */
export type FineTuningJobIntegrationsInner = FineTuningIntegration;


export interface FunctionObject {
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string;
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.   Omitting `parameters` defines a function with an empty parameter list.
   */
  parameters?: { [key: string]: any; };
}


/**
 * Represents the url or the content of an image generated by the OpenAI API.
 */
export interface Image {
  /**
   * The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
   */
  b64_json?: string;
  /**
   * The URL of the generated image, if `response_format` is `url` (default).
   */
  url?: string;
  /**
   * The prompt that was used to generate the image, if there was any revision to the prompt.
   */
  revised_prompt?: string;
}


export interface ImagesResponse {
  created: number;
  data: Array<Image>;
}


export interface ListAssistantFilesResponse {
  object: string;
  data: Array<AssistantFileObject>;
  first_id: string;
  last_id: string;
  has_more: boolean;
}


export interface ListAssistantsResponse {
  object: string;
  data: Array<AssistantObject>;
  first_id: string;
  last_id: string;
  has_more: boolean;
}


export interface ListFilesResponse {
  data: Array<OpenAIFile>;
  object: ListFilesResponseObjectEnum;
}

/**
 * Enum for the object property.
 */
export type ListFilesResponseObjectEnum = 'list';


export interface ListFineTuningJobCheckpointsResponse {
  data: Array<FineTuningJobCheckpoint>;
  object: ListFineTuningJobCheckpointsResponseObjectEnum;
  first_id?: string;
  last_id?: string;
  has_more: boolean;
}

/**
 * Enum for the object property.
 */
export type ListFineTuningJobCheckpointsResponseObjectEnum = 'list';


export interface ListFineTuningJobEventsResponse {
  data: Array<FineTuningJobEvent>;
  object: ListFineTuningJobEventsResponseObjectEnum;
}

/**
 * Enum for the object property.
 */
export type ListFineTuningJobEventsResponseObjectEnum = 'list';


export interface ListMessageFilesResponse {
  object: string;
  data: Array<MessageFileObject>;
  first_id: string;
  last_id: string;
  has_more: boolean;
}


export interface ListMessagesResponse {
  object: string;
  data: Array<MessageObject>;
  first_id: string;
  last_id: string;
  has_more: boolean;
}


export interface ListModelsResponse {
  object: ListModelsResponseObjectEnum;
  data: Array<Model>;
}

/**
 * Enum for the object property.
 */
export type ListModelsResponseObjectEnum = 'list';


export interface ListPaginatedFineTuningJobsResponse {
  data: Array<FineTuningJob>;
  has_more: boolean;
  object: ListPaginatedFineTuningJobsResponseObjectEnum;
}

/**
 * Enum for the object property.
 */
export type ListPaginatedFineTuningJobsResponseObjectEnum = 'list';


export interface ListRunStepsResponse {
  object: string;
  data: Array<RunStepObject>;
  first_id: string;
  last_id: string;
  has_more: boolean;
}


export interface ListRunsResponse {
  object: string;
  data: Array<RunObject>;
  first_id: string;
  last_id: string;
  has_more: boolean;
}


export interface ListThreadsResponse {
  object: string;
  data: Array<ThreadObject>;
  first_id: string;
  last_id: string;
  has_more: boolean;
}


/**
 * References an image [File](/docs/api-reference/files) in the content of a message.
 */
export interface MessageContentImageFileObject {
  /**
   * Always `image_file`.
   */
  type: MessageContentImageFileObjectTypeEnum;
  image_file: MessageContentImageFileObjectImageFile;
}

/**
 * Enum for the type property.
 */
export type MessageContentImageFileObjectTypeEnum = 'image_file';


export interface MessageContentImageFileObjectImageFile {
  /**
   * The [File](/docs/api-reference/files) ID of the image in the message content.
   */
  file_id: string;
}


/**
 * A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \"retrieval\" tool to search files.
 */
export interface MessageContentTextAnnotationsFileCitationObject {
  /**
   * Always `file_citation`.
   */
  type: MessageContentTextAnnotationsFileCitationObjectTypeEnum;
  /**
   * The text in the message content that needs to be replaced.
   */
  text: string;
  file_citation: MessageContentTextAnnotationsFileCitationObjectFileCitation;
  start_index: number;
  end_index: number;
}

/**
 * Enum for the type property.
 */
export type MessageContentTextAnnotationsFileCitationObjectTypeEnum = 'file_citation';


export interface MessageContentTextAnnotationsFileCitationObjectFileCitation {
  /**
   * The ID of the specific File the citation is from.
   */
  file_id: string;
  /**
   * The specific quote in the file.
   */
  quote: string;
}


/**
 * A URL for the file that\'s generated when the assistant used the `code_interpreter` tool to generate a file.
 */
export interface MessageContentTextAnnotationsFilePathObject {
  /**
   * Always `file_path`.
   */
  type: MessageContentTextAnnotationsFilePathObjectTypeEnum;
  /**
   * The text in the message content that needs to be replaced.
   */
  text: string;
  file_path: MessageContentTextAnnotationsFilePathObjectFilePath;
  start_index: number;
  end_index: number;
}

/**
 * Enum for the type property.
 */
export type MessageContentTextAnnotationsFilePathObjectTypeEnum = 'file_path';


export interface MessageContentTextAnnotationsFilePathObjectFilePath {
  /**
   * The ID of the file that was generated.
   */
  file_id: string;
}


/**
 * The text content that is part of a message.
 */
export interface MessageContentTextObject {
  /**
   * Always `text`.
   */
  type: MessageContentTextObjectTypeEnum;
  text: MessageContentTextObjectText;
}

/**
 * Enum for the type property.
 */
export type MessageContentTextObjectTypeEnum = 'text';


export interface MessageContentTextObjectText {
  /**
   * The data that makes up the text.
   */
  value: string;
  annotations: Array<MessageContentTextObjectTextAnnotationsInner>;
}

/**
 * @type MessageContentTextObjectTextAnnotationsInner
 * @export
 */
export type MessageContentTextObjectTextAnnotationsInner = MessageContentTextAnnotationsFileCitationObject | MessageContentTextAnnotationsFilePathObject;


/**
 * References an image [File](/docs/api-reference/files) in the content of a message.
 */
export interface MessageDeltaContentImageFileObject {
  /**
   * The index of the content part in the message.
   */
  index: number;
  /**
   * Always `image_file`.
   */
  type: MessageDeltaContentImageFileObjectTypeEnum;
  image_file?: MessageDeltaContentImageFileObjectImageFile;
}

/**
 * Enum for the type property.
 */
export type MessageDeltaContentImageFileObjectTypeEnum = 'image_file';


export interface MessageDeltaContentImageFileObjectImageFile {
  /**
   * The [File](/docs/api-reference/files) ID of the image in the message content.
   */
  file_id?: string;
}


/**
 * A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \"retrieval\" tool to search files.
 */
export interface MessageDeltaContentTextAnnotationsFileCitationObject {
  /**
   * The index of the annotation in the text content part.
   */
  index: number;
  /**
   * Always `file_citation`.
   */
  type: MessageDeltaContentTextAnnotationsFileCitationObjectTypeEnum;
  /**
   * The text in the message content that needs to be replaced.
   */
  text?: string;
  file_citation?: MessageDeltaContentTextAnnotationsFileCitationObjectFileCitation;
  start_index?: number;
  end_index?: number;
}

/**
 * Enum for the type property.
 */
export type MessageDeltaContentTextAnnotationsFileCitationObjectTypeEnum = 'file_citation';


export interface MessageDeltaContentTextAnnotationsFileCitationObjectFileCitation {
  /**
   * The ID of the specific File the citation is from.
   */
  file_id?: string;
  /**
   * The specific quote in the file.
   */
  quote?: string;
}


/**
 * A URL for the file that\'s generated when the assistant used the `code_interpreter` tool to generate a file.
 */
export interface MessageDeltaContentTextAnnotationsFilePathObject {
  /**
   * The index of the annotation in the text content part.
   */
  index: number;
  /**
   * Always `file_path`.
   */
  type: MessageDeltaContentTextAnnotationsFilePathObjectTypeEnum;
  /**
   * The text in the message content that needs to be replaced.
   */
  text?: string;
  file_path?: MessageDeltaContentTextAnnotationsFilePathObjectFilePath;
  start_index?: number;
  end_index?: number;
}

/**
 * Enum for the type property.
 */
export type MessageDeltaContentTextAnnotationsFilePathObjectTypeEnum = 'file_path';


export interface MessageDeltaContentTextAnnotationsFilePathObjectFilePath {
  /**
   * The ID of the file that was generated.
   */
  file_id?: string;
}


/**
 * The text content that is part of a message.
 */
export interface MessageDeltaContentTextObject {
  /**
   * The index of the content part in the message.
   */
  index: number;
  /**
   * Always `text`.
   */
  type: MessageDeltaContentTextObjectTypeEnum;
  text?: MessageDeltaContentTextObjectText;
}

/**
 * Enum for the type property.
 */
export type MessageDeltaContentTextObjectTypeEnum = 'text';


export interface MessageDeltaContentTextObjectText {
  /**
   * The data that makes up the text.
   */
  value?: string;
  annotations?: Array<MessageDeltaContentTextObjectTextAnnotationsInner>;
}

/**
 * @type MessageDeltaContentTextObjectTextAnnotationsInner
 * @export
 */
export type MessageDeltaContentTextObjectTextAnnotationsInner = MessageDeltaContentTextAnnotationsFileCitationObject | MessageDeltaContentTextAnnotationsFilePathObject;


/**
 * Represents a message delta i.e. any changed fields on a message during streaming. 
 */
export interface MessageDeltaObject {
  /**
   * The identifier of the message, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `thread.message.delta`.
   */
  object: MessageDeltaObjectObjectEnum;
  delta: MessageDeltaObjectDelta;
}

/**
 * Enum for the object property.
 */
export type MessageDeltaObjectObjectEnum = 'thread.message.delta';


/**
 * The delta containing the fields that have changed on the Message.
 */
export interface MessageDeltaObjectDelta {
  /**
   * The entity that produced the message. One of `user` or `assistant`.
   */
  role?: MessageDeltaObjectDeltaRoleEnum;
  /**
   * The content of the message in array of text and/or images.
   */
  content?: Array<MessageDeltaObjectDeltaContentInner>;
  /**
   * A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
   */
  file_ids?: Array<string>;
}

/**
 * Enum for the role property.
 */
export type MessageDeltaObjectDeltaRoleEnum = 'user' | 'assistant';

/**
 * @type MessageDeltaObjectDeltaContentInner
 * @export
 */
export type MessageDeltaObjectDeltaContentInner = MessageDeltaContentImageFileObject | MessageDeltaContentTextObject;


/**
 * A list of files attached to a `message`.
 */
export interface MessageFileObject {
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `thread.message.file`.
   */
  object: MessageFileObjectObjectEnum;
  /**
   * The Unix timestamp (in seconds) for when the message file was created.
   */
  created_at: number;
  /**
   * The ID of the [message](/docs/api-reference/messages) that the [File](/docs/api-reference/files) is attached to.
   */
  message_id: string;
}

/**
 * Enum for the object property.
 */
export type MessageFileObjectObjectEnum = 'thread.message.file';


/**
 * Represents a message within a [thread](/docs/api-reference/threads).
 */
export interface MessageObject {
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `thread.message`.
   */
  object: MessageObjectObjectEnum;
  /**
   * The Unix timestamp (in seconds) for when the message was created.
   */
  created_at: number;
  /**
   * The [thread](/docs/api-reference/threads) ID that this message belongs to.
   */
  thread_id: string;
  /**
   * The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
   */
  status: MessageObjectStatusEnum;
  incomplete_details: MessageObjectIncompleteDetails;
  /**
   * The Unix timestamp (in seconds) for when the message was completed.
   */
  completed_at: number;
  /**
   * The Unix timestamp (in seconds) for when the message was marked as incomplete.
   */
  incomplete_at: number;
  /**
   * The entity that produced the message. One of `user` or `assistant`.
   */
  role: MessageObjectRoleEnum;
  /**
   * The content of the message in array of text and/or images.
   */
  content: Array<MessageObjectContentInner>;
  /**
   * If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
   */
  assistant_id: string;
  /**
   * The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
   */
  run_id: string;
  /**
   * A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
   */
  file_ids: Array<string>;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
   */
  metadata: object;
}

/**
 * Enum for the object property.
 */
export type MessageObjectObjectEnum = 'thread.message';

/**
 * Enum for the status property.
 */
export type MessageObjectStatusEnum = 'in_progress' | 'incomplete' | 'completed';

/**
 * Enum for the role property.
 */
export type MessageObjectRoleEnum = 'user' | 'assistant';

/**
 * @type MessageObjectContentInner
 * @export
 */
export type MessageObjectContentInner = MessageContentImageFileObject | MessageContentTextObject;


/**
 * On an incomplete message, details about why the message is incomplete.
 */
export interface MessageObjectIncompleteDetails {
  /**
   * The reason the message is incomplete.
   */
  reason: MessageObjectIncompleteDetailsReasonEnum;
}

/**
 * Enum for the reason property.
 */
export type MessageObjectIncompleteDetailsReasonEnum = 'content_filter' | 'max_tokens' | 'run_cancelled' | 'run_expired' | 'run_failed';

/**
 * @type MessageStreamEvent
 * @export
 */
export type MessageStreamEvent = MessageStreamEventOneOf | MessageStreamEventOneOf1 | MessageStreamEventOneOf2 | MessageStreamEventOneOf3 | MessageStreamEventOneOf4;


/**
 * Occurs when a [message](/docs/api-reference/messages/object) is created.
 */
export interface MessageStreamEventOneOf {
  event: MessageStreamEventOneOfEventEnum;
  data: MessageObject;
}

/**
 * Enum for the event property.
 */
export type MessageStreamEventOneOfEventEnum = 'thread.message.created';


/**
 * Occurs when a [message](/docs/api-reference/messages/object) moves to an `in_progress` state.
 */
export interface MessageStreamEventOneOf1 {
  event: MessageStreamEventOneOf1EventEnum;
  data: MessageObject;
}

/**
 * Enum for the event property.
 */
export type MessageStreamEventOneOf1EventEnum = 'thread.message.in_progress';


/**
 * Occurs when parts of a [Message](/docs/api-reference/messages/object) are being streamed.
 */
export interface MessageStreamEventOneOf2 {
  event: MessageStreamEventOneOf2EventEnum;
  data: MessageDeltaObject;
}

/**
 * Enum for the event property.
 */
export type MessageStreamEventOneOf2EventEnum = 'thread.message.delta';


/**
 * Occurs when a [message](/docs/api-reference/messages/object) is completed.
 */
export interface MessageStreamEventOneOf3 {
  event: MessageStreamEventOneOf3EventEnum;
  data: MessageObject;
}

/**
 * Enum for the event property.
 */
export type MessageStreamEventOneOf3EventEnum = 'thread.message.completed';


/**
 * Occurs when a [message](/docs/api-reference/messages/object) ends before it is completed.
 */
export interface MessageStreamEventOneOf4 {
  event: MessageStreamEventOneOf4EventEnum;
  data: MessageObject;
}

/**
 * Enum for the event property.
 */
export type MessageStreamEventOneOf4EventEnum = 'thread.message.incomplete';


/**
 * Describes an OpenAI model offering that can be used with the API.
 */
export interface Model {
  /**
   * The model identifier, which can be referenced in the API endpoints.
   */
  id: string;
  /**
   * The Unix timestamp (in seconds) when the model was created.
   */
  created: number;
  /**
   * The object type, which is always \"model\".
   */
  object: ModelObjectEnum;
  /**
   * The organization that owns the model.
   */
  owned_by: string;
}

/**
 * Enum for the object property.
 */
export type ModelObjectEnum = 'model';


export interface ModelError {
  code: string;
  message: string;
  param: string;
  type: string;
}


export interface ModifyAssistantRequest {
  model?: string;
  /**
   * The name of the assistant. The maximum length is 256 characters. 
   */
  name?: string;
  /**
   * The description of the assistant. The maximum length is 512 characters. 
   */
  description?: string;
  /**
   * The system instructions that the assistant uses. The maximum length is 256,000 characters. 
   */
  instructions?: string;
  /**
   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`. 
   */
  tools?: Array<AssistantObjectToolsInner>;
  /**
   * A list of [File](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. If a file was previously attached to the list but does not show up in the list, it will be deleted from the assistant. 
   */
  file_ids?: Array<string>;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
   */
  metadata?: object;
}


export interface ModifyMessageRequest {
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
   */
  metadata?: object;
}


export interface ModifyRunRequest {
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
   */
  metadata?: object;
}


export interface ModifyThreadRequest {
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
   */
  metadata?: object;
}


/**
 * The `File` object represents a document that has been uploaded to OpenAI.
 */
export interface OpenAIFile {
  /**
   * The file identifier, which can be referenced in the API endpoints.
   */
  id: string;
  /**
   * The size of the file, in bytes.
   */
  bytes: number;
  /**
   * The Unix timestamp (in seconds) for when the file was created.
   */
  created_at: number;
  /**
   * The name of the file.
   */
  filename: string;
  /**
   * The object type, which is always `file`.
   */
  object: OpenAIFileObjectEnum;
  /**
   * The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`, `assistants`, and `assistants_output`.
   */
  purpose: OpenAIFilePurposeEnum;
  /**
   * Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
   */
  status: OpenAIFileStatusEnum;
  /**
   * Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
   */
  status_details?: string;
}

/**
 * Enum for the object property.
 */
export type OpenAIFileObjectEnum = 'file';

/**
 * Enum for the purpose property.
 */
export type OpenAIFilePurposeEnum = 'fine-tune' | 'fine-tune-results' | 'assistants' | 'assistants_output';

/**
 * Enum for the status property.
 */
export type OpenAIFileStatusEnum = 'uploaded' | 'processed' | 'error';


/**
 * Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
 */
export interface RunCompletionUsage {
  /**
   * Number of completion tokens used over the course of the run.
   */
  completion_tokens: number;
  /**
   * Number of prompt tokens used over the course of the run.
   */
  prompt_tokens: number;
  /**
   * Total number of tokens used (prompt + completion).
   */
  total_tokens: number;
}


/**
 * Represents an execution run on a [thread](/docs/api-reference/threads).
 */
export interface RunObject {
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `thread.run`.
   */
  object: RunObjectObjectEnum;
  /**
   * The Unix timestamp (in seconds) for when the run was created.
   */
  created_at: number;
  /**
   * The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
   */
  thread_id: string;
  /**
   * The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
   */
  assistant_id: string;
  /**
   * The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
   */
  status: RunObjectStatusEnum;
  required_action: RunObjectRequiredAction;
  last_error: RunObjectLastError;
  /**
   * The Unix timestamp (in seconds) for when the run will expire.
   */
  expires_at: number;
  /**
   * The Unix timestamp (in seconds) for when the run was started.
   */
  started_at: number;
  /**
   * The Unix timestamp (in seconds) for when the run was cancelled.
   */
  cancelled_at: number;
  /**
   * The Unix timestamp (in seconds) for when the run failed.
   */
  failed_at: number;
  /**
   * The Unix timestamp (in seconds) for when the run was completed.
   */
  completed_at: number;
  incomplete_details: RunObjectIncompleteDetails;
  /**
   * The model that the [assistant](/docs/api-reference/assistants) used for this run.
   */
  model: string;
  /**
   * The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
   */
  instructions: string;
  /**
   * The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
   */
  tools: Array<AssistantObjectToolsInner>;
  /**
   * The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
   */
  file_ids: Array<string>;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
   */
  metadata: object;
  usage: RunCompletionUsage;
  /**
   * The sampling temperature used for this run. If not set, defaults to 1.
   */
  temperature?: number;
  /**
   * The maximum number of prompt tokens specified to have been used over the course of the run. 
   */
  max_prompt_tokens: number;
  /**
   * The maximum number of completion tokens specified to have been used over the course of the run. 
   */
  max_completion_tokens: number;
  truncation_strategy: TruncationObject;
  tool_choice: AssistantsApiToolChoiceOption;
  response_format: AssistantsApiResponseFormatOption;
}

/**
 * Enum for the object property.
 */
export type RunObjectObjectEnum = 'thread.run';

/**
 * Enum for the status property.
 */
export type RunObjectStatusEnum = 'queued' | 'in_progress' | 'requires_action' | 'cancelling' | 'cancelled' | 'failed' | 'completed' | 'expired';


/**
 * Details on why the run is incomplete. Will be `null` if the run is not incomplete.
 */
export interface RunObjectIncompleteDetails {
  /**
   * The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
   */
  reason?: RunObjectIncompleteDetailsReasonEnum;
}

/**
 * Enum for the reason property.
 */
export type RunObjectIncompleteDetailsReasonEnum = 'max_completion_tokens' | 'max_prompt_tokens';


/**
 * The last error associated with this run. Will be `null` if there are no errors.
 */
export interface RunObjectLastError {
  /**
   * One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
   */
  code: RunObjectLastErrorCodeEnum;
  /**
   * A human-readable description of the error.
   */
  message: string;
}

/**
 * Enum for the code property.
 */
export type RunObjectLastErrorCodeEnum = 'server_error' | 'rate_limit_exceeded' | 'invalid_prompt';


/**
 * Details on the action required to continue the run. Will be `null` if no action is required.
 */
export interface RunObjectRequiredAction {
  /**
   * For now, this is always `submit_tool_outputs`.
   */
  type: RunObjectRequiredActionTypeEnum;
  submit_tool_outputs: RunObjectRequiredActionSubmitToolOutputs;
}

/**
 * Enum for the type property.
 */
export type RunObjectRequiredActionTypeEnum = 'submit_tool_outputs';


/**
 * Details on the tool outputs needed for this run to continue.
 */
export interface RunObjectRequiredActionSubmitToolOutputs {
  /**
   * A list of the relevant tool calls.
   */
  tool_calls: Array<RunToolCallObject>;
}


/**
 * Usage statistics related to the run step. This value will be `null` while the run step\'s status is `in_progress`.
 */
export interface RunStepCompletionUsage {
  /**
   * Number of completion tokens used over the course of the run step.
   */
  completion_tokens: number;
  /**
   * Number of prompt tokens used over the course of the run step.
   */
  prompt_tokens: number;
  /**
   * Total number of tokens used (prompt + completion).
   */
  total_tokens: number;
}


/**
 * Represents a run step delta i.e. any changed fields on a run step during streaming. 
 */
export interface RunStepDeltaObject {
  /**
   * The identifier of the run step, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `thread.run.step.delta`.
   */
  object: RunStepDeltaObjectObjectEnum;
  delta: RunStepDeltaObjectDelta;
}

/**
 * Enum for the object property.
 */
export type RunStepDeltaObjectObjectEnum = 'thread.run.step.delta';


/**
 * The delta containing the fields that have changed on the run step.
 */
export interface RunStepDeltaObjectDelta {
  step_details?: RunStepDeltaObjectDeltaStepDetails;
}

/**
 * @type RunStepDeltaObjectDeltaStepDetails
 * The details of the run step.
 * @export
 */
export type RunStepDeltaObjectDeltaStepDetails = RunStepDeltaStepDetailsMessageCreationObject | RunStepDeltaStepDetailsToolCallsObject;


/**
 * Details of the message creation by the run step.
 */
export interface RunStepDeltaStepDetailsMessageCreationObject {
  /**
   * Always `message_creation`.
   */
  type: RunStepDeltaStepDetailsMessageCreationObjectTypeEnum;
  message_creation?: RunStepDeltaStepDetailsMessageCreationObjectMessageCreation;
}

/**
 * Enum for the type property.
 */
export type RunStepDeltaStepDetailsMessageCreationObjectTypeEnum = 'message_creation';


export interface RunStepDeltaStepDetailsMessageCreationObjectMessageCreation {
  /**
   * The ID of the message that was created by this run step.
   */
  message_id?: string;
}


/**
 * Details of the Code Interpreter tool call the run step was involved in.
 */
export interface RunStepDeltaStepDetailsToolCallsCodeObject {
  /**
   * The index of the tool call in the tool calls array.
   */
  index: number;
  /**
   * The ID of the tool call.
   */
  id?: string;
  /**
   * The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
   */
  type: RunStepDeltaStepDetailsToolCallsCodeObjectTypeEnum;
  code_interpreter?: RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter;
}

/**
 * Enum for the type property.
 */
export type RunStepDeltaStepDetailsToolCallsCodeObjectTypeEnum = 'code_interpreter';


/**
 * The Code Interpreter tool call definition.
 */
export interface RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter {
  /**
   * The input to the Code Interpreter tool call.
   */
  input?: string;
  /**
   * The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
   */
  outputs?: Array<RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner>;
}

/**
 * @type RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner
 * @export
 */
export type RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner = RunStepDeltaStepDetailsToolCallsCodeOutputImageObject | RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject;


export interface RunStepDeltaStepDetailsToolCallsCodeOutputImageObject {
  /**
   * The index of the output in the outputs array.
   */
  index: number;
  /**
   * Always `image`.
   */
  type: RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectTypeEnum;
  image?: RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImage;
}

/**
 * Enum for the type property.
 */
export type RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectTypeEnum = 'image';


export interface RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImage {
  /**
   * The [file](/docs/api-reference/files) ID of the image.
   */
  file_id?: string;
}


/**
 * Text output from the Code Interpreter tool call as part of a run step.
 */
export interface RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject {
  /**
   * The index of the output in the outputs array.
   */
  index: number;
  /**
   * Always `logs`.
   */
  type: RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectTypeEnum;
  /**
   * The text output from the Code Interpreter tool call.
   */
  logs?: string;
}

/**
 * Enum for the type property.
 */
export type RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectTypeEnum = 'logs';


export interface RunStepDeltaStepDetailsToolCallsFunctionObject {
  /**
   * The index of the tool call in the tool calls array.
   */
  index: number;
  /**
   * The ID of the tool call object.
   */
  id?: string;
  /**
   * The type of tool call. This is always going to be `function` for this type of tool call.
   */
  type: RunStepDeltaStepDetailsToolCallsFunctionObjectTypeEnum;
  _function?: RunStepDeltaStepDetailsToolCallsFunctionObjectFunction;
}

/**
 * Enum for the type property.
 */
export type RunStepDeltaStepDetailsToolCallsFunctionObjectTypeEnum = 'function';


/**
 * The definition of the function that was called.
 */
export interface RunStepDeltaStepDetailsToolCallsFunctionObjectFunction {
  /**
   * The name of the function.
   */
  name?: string;
  /**
   * The arguments passed to the function.
   */
  arguments?: string;
  /**
   * The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
   */
  output?: string;
}


/**
 * Details of the tool call.
 */
export interface RunStepDeltaStepDetailsToolCallsObject {
  /**
   * Always `tool_calls`.
   */
  type: RunStepDeltaStepDetailsToolCallsObjectTypeEnum;
  /**
   * An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`. 
   */
  tool_calls?: Array<RunStepDeltaStepDetailsToolCallsObjectToolCallsInner>;
}

/**
 * Enum for the type property.
 */
export type RunStepDeltaStepDetailsToolCallsObjectTypeEnum = 'tool_calls';

/**
 * @type RunStepDeltaStepDetailsToolCallsObjectToolCallsInner
 * @export
 */
export type RunStepDeltaStepDetailsToolCallsObjectToolCallsInner = RunStepDeltaStepDetailsToolCallsCodeObject | RunStepDeltaStepDetailsToolCallsFunctionObject | RunStepDeltaStepDetailsToolCallsRetrievalObject;


export interface RunStepDeltaStepDetailsToolCallsRetrievalObject {
  /**
   * The index of the tool call in the tool calls array.
   */
  index: number;
  /**
   * The ID of the tool call object.
   */
  id?: string;
  /**
   * The type of tool call. This is always going to be `retrieval` for this type of tool call.
   */
  type: RunStepDeltaStepDetailsToolCallsRetrievalObjectTypeEnum;
  /**
   * For now, this is always going to be an empty object.
   */
  retrieval?: object;
}

/**
 * Enum for the type property.
 */
export type RunStepDeltaStepDetailsToolCallsRetrievalObjectTypeEnum = 'retrieval';


/**
 * Details of the message creation by the run step.
 */
export interface RunStepDetailsMessageCreationObject {
  /**
   * Always `message_creation`.
   */
  type: RunStepDetailsMessageCreationObjectTypeEnum;
  message_creation: RunStepDetailsMessageCreationObjectMessageCreation;
}

/**
 * Enum for the type property.
 */
export type RunStepDetailsMessageCreationObjectTypeEnum = 'message_creation';


export interface RunStepDetailsMessageCreationObjectMessageCreation {
  /**
   * The ID of the message that was created by this run step.
   */
  message_id: string;
}


/**
 * Details of the Code Interpreter tool call the run step was involved in.
 */
export interface RunStepDetailsToolCallsCodeObject {
  /**
   * The ID of the tool call.
   */
  id: string;
  /**
   * The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
   */
  type: RunStepDetailsToolCallsCodeObjectTypeEnum;
  code_interpreter: RunStepDetailsToolCallsCodeObjectCodeInterpreter;
}

/**
 * Enum for the type property.
 */
export type RunStepDetailsToolCallsCodeObjectTypeEnum = 'code_interpreter';


/**
 * The Code Interpreter tool call definition.
 */
export interface RunStepDetailsToolCallsCodeObjectCodeInterpreter {
  /**
   * The input to the Code Interpreter tool call.
   */
  input: string;
  /**
   * The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
   */
  outputs: Array<RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner>;
}

/**
 * @type RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner
 * @export
 */
export type RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner = RunStepDetailsToolCallsCodeOutputImageObject | RunStepDetailsToolCallsCodeOutputLogsObject;


export interface RunStepDetailsToolCallsCodeOutputImageObject {
  /**
   * Always `image`.
   */
  type: RunStepDetailsToolCallsCodeOutputImageObjectTypeEnum;
  image: RunStepDetailsToolCallsCodeOutputImageObjectImage;
}

/**
 * Enum for the type property.
 */
export type RunStepDetailsToolCallsCodeOutputImageObjectTypeEnum = 'image';


export interface RunStepDetailsToolCallsCodeOutputImageObjectImage {
  /**
   * The [file](/docs/api-reference/files) ID of the image.
   */
  file_id: string;
}


/**
 * Text output from the Code Interpreter tool call as part of a run step.
 */
export interface RunStepDetailsToolCallsCodeOutputLogsObject {
  /**
   * Always `logs`.
   */
  type: RunStepDetailsToolCallsCodeOutputLogsObjectTypeEnum;
  /**
   * The text output from the Code Interpreter tool call.
   */
  logs: string;
}

/**
 * Enum for the type property.
 */
export type RunStepDetailsToolCallsCodeOutputLogsObjectTypeEnum = 'logs';


export interface RunStepDetailsToolCallsFunctionObject {
  /**
   * The ID of the tool call object.
   */
  id: string;
  /**
   * The type of tool call. This is always going to be `function` for this type of tool call.
   */
  type: RunStepDetailsToolCallsFunctionObjectTypeEnum;
  _function: RunStepDetailsToolCallsFunctionObjectFunction;
}

/**
 * Enum for the type property.
 */
export type RunStepDetailsToolCallsFunctionObjectTypeEnum = 'function';


/**
 * The definition of the function that was called.
 */
export interface RunStepDetailsToolCallsFunctionObjectFunction {
  /**
   * The name of the function.
   */
  name: string;
  /**
   * The arguments passed to the function.
   */
  arguments: string;
  /**
   * The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
   */
  output: string;
}


/**
 * Details of the tool call.
 */
export interface RunStepDetailsToolCallsObject {
  /**
   * Always `tool_calls`.
   */
  type: RunStepDetailsToolCallsObjectTypeEnum;
  /**
   * An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`. 
   */
  tool_calls: Array<RunStepDetailsToolCallsObjectToolCallsInner>;
}

/**
 * Enum for the type property.
 */
export type RunStepDetailsToolCallsObjectTypeEnum = 'tool_calls';

/**
 * @type RunStepDetailsToolCallsObjectToolCallsInner
 * @export
 */
export type RunStepDetailsToolCallsObjectToolCallsInner = RunStepDetailsToolCallsCodeObject | RunStepDetailsToolCallsFunctionObject | RunStepDetailsToolCallsRetrievalObject;


export interface RunStepDetailsToolCallsRetrievalObject {
  /**
   * The ID of the tool call object.
   */
  id: string;
  /**
   * The type of tool call. This is always going to be `retrieval` for this type of tool call.
   */
  type: RunStepDetailsToolCallsRetrievalObjectTypeEnum;
  /**
   * For now, this is always going to be an empty object.
   */
  retrieval: object;
}

/**
 * Enum for the type property.
 */
export type RunStepDetailsToolCallsRetrievalObjectTypeEnum = 'retrieval';


/**
 * Represents a step in execution of a run. 
 */
export interface RunStepObject {
  /**
   * The identifier of the run step, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `thread.run.step`.
   */
  object: RunStepObjectObjectEnum;
  /**
   * The Unix timestamp (in seconds) for when the run step was created.
   */
  created_at: number;
  /**
   * The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
   */
  assistant_id: string;
  /**
   * The ID of the [thread](/docs/api-reference/threads) that was run.
   */
  thread_id: string;
  /**
   * The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
   */
  run_id: string;
  /**
   * The type of run step, which can be either `message_creation` or `tool_calls`.
   */
  type: RunStepObjectTypeEnum;
  /**
   * The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
   */
  status: RunStepObjectStatusEnum;
  step_details: RunStepObjectStepDetails;
  last_error: RunStepObjectLastError;
  /**
   * The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
   */
  expired_at: number;
  /**
   * The Unix timestamp (in seconds) for when the run step was cancelled.
   */
  cancelled_at: number;
  /**
   * The Unix timestamp (in seconds) for when the run step failed.
   */
  failed_at: number;
  /**
   * The Unix timestamp (in seconds) for when the run step completed.
   */
  completed_at: number;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
   */
  metadata: object;
  usage: RunStepCompletionUsage;
}

/**
 * Enum for the object property.
 */
export type RunStepObjectObjectEnum = 'thread.run.step';

/**
 * Enum for the type property.
 */
export type RunStepObjectTypeEnum = 'message_creation' | 'tool_calls';

/**
 * Enum for the status property.
 */
export type RunStepObjectStatusEnum = 'in_progress' | 'cancelled' | 'failed' | 'completed' | 'expired';


/**
 * The last error associated with this run step. Will be `null` if there are no errors.
 */
export interface RunStepObjectLastError {
  /**
   * One of `server_error` or `rate_limit_exceeded`.
   */
  code: RunStepObjectLastErrorCodeEnum;
  /**
   * A human-readable description of the error.
   */
  message: string;
}

/**
 * Enum for the code property.
 */
export type RunStepObjectLastErrorCodeEnum = 'server_error' | 'rate_limit_exceeded';

/**
 * @type RunStepObjectStepDetails
 * The details of the run step.
 * @export
 */
export type RunStepObjectStepDetails = RunStepDetailsMessageCreationObject | RunStepDetailsToolCallsObject;

/**
 * @type RunStepStreamEvent
 * @export
 */
export type RunStepStreamEvent = RunStepStreamEventOneOf | RunStepStreamEventOneOf1 | RunStepStreamEventOneOf2 | RunStepStreamEventOneOf3 | RunStepStreamEventOneOf4 | RunStepStreamEventOneOf5 | RunStepStreamEventOneOf6;


/**
 * Occurs when a [run step](/docs/api-reference/runs/step-object) is created.
 */
export interface RunStepStreamEventOneOf {
  event: RunStepStreamEventOneOfEventEnum;
  data: RunStepObject;
}

/**
 * Enum for the event property.
 */
export type RunStepStreamEventOneOfEventEnum = 'thread.run.step.created';


/**
 * Occurs when a [run step](/docs/api-reference/runs/step-object) moves to an `in_progress` state.
 */
export interface RunStepStreamEventOneOf1 {
  event: RunStepStreamEventOneOf1EventEnum;
  data: RunStepObject;
}

/**
 * Enum for the event property.
 */
export type RunStepStreamEventOneOf1EventEnum = 'thread.run.step.in_progress';


/**
 * Occurs when parts of a [run step](/docs/api-reference/runs/step-object) are being streamed.
 */
export interface RunStepStreamEventOneOf2 {
  event: RunStepStreamEventOneOf2EventEnum;
  data: RunStepDeltaObject;
}

/**
 * Enum for the event property.
 */
export type RunStepStreamEventOneOf2EventEnum = 'thread.run.step.delta';


/**
 * Occurs when a [run step](/docs/api-reference/runs/step-object) is completed.
 */
export interface RunStepStreamEventOneOf3 {
  event: RunStepStreamEventOneOf3EventEnum;
  data: RunStepObject;
}

/**
 * Enum for the event property.
 */
export type RunStepStreamEventOneOf3EventEnum = 'thread.run.step.completed';


/**
 * Occurs when a [run step](/docs/api-reference/runs/step-object) fails.
 */
export interface RunStepStreamEventOneOf4 {
  event: RunStepStreamEventOneOf4EventEnum;
  data: RunStepObject;
}

/**
 * Enum for the event property.
 */
export type RunStepStreamEventOneOf4EventEnum = 'thread.run.step.failed';


/**
 * Occurs when a [run step](/docs/api-reference/runs/step-object) is cancelled.
 */
export interface RunStepStreamEventOneOf5 {
  event: RunStepStreamEventOneOf5EventEnum;
  data: RunStepObject;
}

/**
 * Enum for the event property.
 */
export type RunStepStreamEventOneOf5EventEnum = 'thread.run.step.cancelled';


/**
 * Occurs when a [run step](/docs/api-reference/runs/step-object) expires.
 */
export interface RunStepStreamEventOneOf6 {
  event: RunStepStreamEventOneOf6EventEnum;
  data: RunStepObject;
}

/**
 * Enum for the event property.
 */
export type RunStepStreamEventOneOf6EventEnum = 'thread.run.step.expired';

/**
 * @type RunStreamEvent
 * @export
 */
export type RunStreamEvent = RunStreamEventOneOf | RunStreamEventOneOf1 | RunStreamEventOneOf2 | RunStreamEventOneOf3 | RunStreamEventOneOf4 | RunStreamEventOneOf5 | RunStreamEventOneOf6 | RunStreamEventOneOf7 | RunStreamEventOneOf8;


/**
 * Occurs when a new [run](/docs/api-reference/runs/object) is created.
 */
export interface RunStreamEventOneOf {
  event: RunStreamEventOneOfEventEnum;
  data: RunObject;
}

/**
 * Enum for the event property.
 */
export type RunStreamEventOneOfEventEnum = 'thread.run.created';


/**
 * Occurs when a [run](/docs/api-reference/runs/object) moves to a `queued` status.
 */
export interface RunStreamEventOneOf1 {
  event: RunStreamEventOneOf1EventEnum;
  data: RunObject;
}

/**
 * Enum for the event property.
 */
export type RunStreamEventOneOf1EventEnum = 'thread.run.queued';


/**
 * Occurs when a [run](/docs/api-reference/runs/object) moves to an `in_progress` status.
 */
export interface RunStreamEventOneOf2 {
  event: RunStreamEventOneOf2EventEnum;
  data: RunObject;
}

/**
 * Enum for the event property.
 */
export type RunStreamEventOneOf2EventEnum = 'thread.run.in_progress';


/**
 * Occurs when a [run](/docs/api-reference/runs/object) moves to a `requires_action` status.
 */
export interface RunStreamEventOneOf3 {
  event: RunStreamEventOneOf3EventEnum;
  data: RunObject;
}

/**
 * Enum for the event property.
 */
export type RunStreamEventOneOf3EventEnum = 'thread.run.requires_action';


/**
 * Occurs when a [run](/docs/api-reference/runs/object) is completed.
 */
export interface RunStreamEventOneOf4 {
  event: RunStreamEventOneOf4EventEnum;
  data: RunObject;
}

/**
 * Enum for the event property.
 */
export type RunStreamEventOneOf4EventEnum = 'thread.run.completed';


/**
 * Occurs when a [run](/docs/api-reference/runs/object) fails.
 */
export interface RunStreamEventOneOf5 {
  event: RunStreamEventOneOf5EventEnum;
  data: RunObject;
}

/**
 * Enum for the event property.
 */
export type RunStreamEventOneOf5EventEnum = 'thread.run.failed';


/**
 * Occurs when a [run](/docs/api-reference/runs/object) moves to a `cancelling` status.
 */
export interface RunStreamEventOneOf6 {
  event: RunStreamEventOneOf6EventEnum;
  data: RunObject;
}

/**
 * Enum for the event property.
 */
export type RunStreamEventOneOf6EventEnum = 'thread.run.cancelling';


/**
 * Occurs when a [run](/docs/api-reference/runs/object) is cancelled.
 */
export interface RunStreamEventOneOf7 {
  event: RunStreamEventOneOf7EventEnum;
  data: RunObject;
}

/**
 * Enum for the event property.
 */
export type RunStreamEventOneOf7EventEnum = 'thread.run.cancelled';


/**
 * Occurs when a [run](/docs/api-reference/runs/object) expires.
 */
export interface RunStreamEventOneOf8 {
  event: RunStreamEventOneOf8EventEnum;
  data: RunObject;
}

/**
 * Enum for the event property.
 */
export type RunStreamEventOneOf8EventEnum = 'thread.run.expired';


/**
 * Tool call objects
 */
export interface RunToolCallObject {
  /**
   * The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.
   */
  id: string;
  /**
   * The type of tool call the output is required for. For now, this is always `function`.
   */
  type: RunToolCallObjectTypeEnum;
  _function: RunToolCallObjectFunction;
}

/**
 * Enum for the type property.
 */
export type RunToolCallObjectTypeEnum = 'function';


/**
 * The function definition.
 */
export interface RunToolCallObjectFunction {
  /**
   * The name of the function.
   */
  name: string;
  /**
   * The arguments that the model expects you to pass to the function.
   */
  arguments: string;
}


export interface SubmitToolOutputsRunRequest {
  /**
   * A list of tools for which the outputs are being submitted.
   */
  tool_outputs: Array<SubmitToolOutputsRunRequestToolOutputsInner>;
  /**
   * If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message. 
   */
  stream?: boolean;
}


export interface SubmitToolOutputsRunRequestToolOutputsInner {
  /**
   * The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
   */
  tool_call_id?: string;
  /**
   * The output of the tool call to be submitted to continue the run.
   */
  output?: string;
}


/**
 * Represents a thread that contains [messages](/docs/api-reference/messages).
 */
export interface ThreadObject {
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `thread`.
   */
  object: ThreadObjectObjectEnum;
  /**
   * The Unix timestamp (in seconds) for when the thread was created.
   */
  created_at: number;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
   */
  metadata: object;
}

/**
 * Enum for the object property.
 */
export type ThreadObjectObjectEnum = 'thread';

/**
 * @type ThreadStreamEvent
 * @export
 */
export type ThreadStreamEvent = ThreadStreamEventOneOf;


/**
 * Occurs when a new [thread](/docs/api-reference/threads/object) is created.
 */
export interface ThreadStreamEventOneOf {
  event: ThreadStreamEventOneOfEventEnum;
  data: ThreadObject;
}

/**
 * Enum for the event property.
 */
export type ThreadStreamEventOneOfEventEnum = 'thread.created';


export interface TranscriptionSegment {
  /**
   * Unique identifier of the segment.
   */
  id: number;
  /**
   * Seek offset of the segment.
   */
  seek: number;
  /**
   * Start time of the segment in seconds.
   */
  start: number;
  /**
   * End time of the segment in seconds.
   */
  end: number;
  /**
   * Text content of the segment.
   */
  text: string;
  /**
   * Array of token IDs for the text content.
   */
  tokens: Array<number>;
  /**
   * Temperature parameter used for generating the segment.
   */
  temperature: number;
  /**
   * Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
   */
  avg_logprob: number;
  /**
   * Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
   */
  compression_ratio: number;
  /**
   * Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
   */
  no_speech_prob: number;
}


export interface TranscriptionWord {
  /**
   * The text content of the word.
   */
  word: string;
  /**
   * Start time of the word in seconds.
   */
  start: number;
  /**
   * End time of the word in seconds.
   */
  end: number;
}


export interface TruncationObject {
  /**
   * The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.
   */
  type?: TruncationObjectTypeEnum;
  /**
   * The number of most recent messages from the thread when constructing the context for the run.
   */
  last_messages?: number;
}

/**
 * Enum for the type property.
 */
export type TruncationObjectTypeEnum = 'auto' | 'last_messages';

