/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateFineTuningJobRequest,
  FineTuningJob,
  ListFineTuningJobCheckpointsResponse,
  ListFineTuningJobEventsResponse,
  ListPaginatedFineTuningJobsResponse,
} from '../models/index';
import {
    CreateFineTuningJobRequestFromJSON,
    CreateFineTuningJobRequestToJSON,
    FineTuningJobFromJSON,
    FineTuningJobToJSON,
    ListFineTuningJobCheckpointsResponseFromJSON,
    ListFineTuningJobCheckpointsResponseToJSON,
    ListFineTuningJobEventsResponseFromJSON,
    ListFineTuningJobEventsResponseToJSON,
    ListPaginatedFineTuningJobsResponseFromJSON,
    ListPaginatedFineTuningJobsResponseToJSON,
} from '../models/index';

export interface CancelFineTuningJobRequest {
    fineTuningJobId: string;
}

export interface CreateFineTuningJobOperationRequest {
    createFineTuningJobRequest: CreateFineTuningJobRequest;
}

export interface ListFineTuningEventsRequest {
    fineTuningJobId: string;
    after?: string;
    limit?: number;
}

export interface ListFineTuningJobCheckpointsRequest {
    fineTuningJobId: string;
    after?: string;
    limit?: number;
}

export interface ListPaginatedFineTuningJobsRequest {
    after?: string;
    limit?: number;
}

export interface RetrieveFineTuningJobRequest {
    fineTuningJobId: string;
}

/**
 * 
 */
export class FineTuningApi extends runtime.BaseAPI {

    /**
     * Immediately cancel a fine-tune job. 
     */
    async cancelFineTuningJobRaw(requestParameters: CancelFineTuningJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FineTuningJob>> {
        if (requestParameters['fineTuningJobId'] == null) {
            throw new runtime.RequiredError(
                'fineTuningJobId',
                'Required parameter "fineTuningJobId" was null or undefined when calling cancelFineTuningJob().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fine_tuning/jobs/{fine_tuning_job_id}/cancel`.replace(`{${"fine_tuning_job_id"}}`, encodeURIComponent(String(requestParameters['fineTuningJobId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FineTuningJobFromJSON(jsonValue));
    }

    /**
     * Immediately cancel a fine-tune job. 
     */
    async cancelFineTuningJob(requestParameters: CancelFineTuningJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FineTuningJob> {
        const response = await this.cancelFineTuningJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
     */
    async createFineTuningJobRaw(requestParameters: CreateFineTuningJobOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FineTuningJob>> {
        if (requestParameters['createFineTuningJobRequest'] == null) {
            throw new runtime.RequiredError(
                'createFineTuningJobRequest',
                'Required parameter "createFineTuningJobRequest" was null or undefined when calling createFineTuningJob().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fine_tuning/jobs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFineTuningJobRequestToJSON(requestParameters['createFineTuningJobRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FineTuningJobFromJSON(jsonValue));
    }

    /**
     * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
     */
    async createFineTuningJob(requestParameters: CreateFineTuningJobOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FineTuningJob> {
        const response = await this.createFineTuningJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get status updates for a fine-tuning job. 
     */
    async listFineTuningEventsRaw(requestParameters: ListFineTuningEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListFineTuningJobEventsResponse>> {
        if (requestParameters['fineTuningJobId'] == null) {
            throw new runtime.RequiredError(
                'fineTuningJobId',
                'Required parameter "fineTuningJobId" was null or undefined when calling listFineTuningEvents().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fine_tuning/jobs/{fine_tuning_job_id}/events`.replace(`{${"fine_tuning_job_id"}}`, encodeURIComponent(String(requestParameters['fineTuningJobId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFineTuningJobEventsResponseFromJSON(jsonValue));
    }

    /**
     * Get status updates for a fine-tuning job. 
     */
    async listFineTuningEvents(requestParameters: ListFineTuningEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFineTuningJobEventsResponse> {
        const response = await this.listFineTuningEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List checkpoints for a fine-tuning job. 
     */
    async listFineTuningJobCheckpointsRaw(requestParameters: ListFineTuningJobCheckpointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListFineTuningJobCheckpointsResponse>> {
        if (requestParameters['fineTuningJobId'] == null) {
            throw new runtime.RequiredError(
                'fineTuningJobId',
                'Required parameter "fineTuningJobId" was null or undefined when calling listFineTuningJobCheckpoints().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints`.replace(`{${"fine_tuning_job_id"}}`, encodeURIComponent(String(requestParameters['fineTuningJobId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFineTuningJobCheckpointsResponseFromJSON(jsonValue));
    }

    /**
     * List checkpoints for a fine-tuning job. 
     */
    async listFineTuningJobCheckpoints(requestParameters: ListFineTuningJobCheckpointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFineTuningJobCheckpointsResponse> {
        const response = await this.listFineTuningJobCheckpointsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List your organization\'s fine-tuning jobs 
     */
    async listPaginatedFineTuningJobsRaw(requestParameters: ListPaginatedFineTuningJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPaginatedFineTuningJobsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fine_tuning/jobs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListPaginatedFineTuningJobsResponseFromJSON(jsonValue));
    }

    /**
     * List your organization\'s fine-tuning jobs 
     */
    async listPaginatedFineTuningJobs(requestParameters: ListPaginatedFineTuningJobsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPaginatedFineTuningJobsResponse> {
        const response = await this.listPaginatedFineTuningJobsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
     */
    async retrieveFineTuningJobRaw(requestParameters: RetrieveFineTuningJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FineTuningJob>> {
        if (requestParameters['fineTuningJobId'] == null) {
            throw new runtime.RequiredError(
                'fineTuningJobId',
                'Required parameter "fineTuningJobId" was null or undefined when calling retrieveFineTuningJob().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fine_tuning/jobs/{fine_tuning_job_id}`.replace(`{${"fine_tuning_job_id"}}`, encodeURIComponent(String(requestParameters['fineTuningJobId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FineTuningJobFromJSON(jsonValue));
    }

    /**
     * Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
     */
    async retrieveFineTuningJob(requestParameters: RetrieveFineTuningJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FineTuningJob> {
        const response = await this.retrieveFineTuningJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
