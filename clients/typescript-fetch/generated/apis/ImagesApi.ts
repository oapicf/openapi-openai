/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateImageEditRequestModel,
  CreateImageRequest,
  ImagesResponse,
} from '../models/index';
import {
    CreateImageEditRequestModelFromJSON,
    CreateImageEditRequestModelToJSON,
    CreateImageRequestFromJSON,
    CreateImageRequestToJSON,
    ImagesResponseFromJSON,
    ImagesResponseToJSON,
} from '../models/index';

export interface CreateImageOperationRequest {
    createImageRequest: CreateImageRequest;
}

export interface CreateImageEditRequest {
    image: Blob;
    prompt: string;
    mask?: Blob;
    model?: CreateImageEditRequestModel | null;
    n?: number | null;
    size?: CreateImageEditSizeEnum;
    responseFormat?: CreateImageEditResponseFormatEnum;
    user?: string;
}

export interface CreateImageVariationRequest {
    image: Blob;
    model?: CreateImageEditRequestModel | null;
    n?: number | null;
    responseFormat?: CreateImageVariationResponseFormatEnum;
    size?: CreateImageVariationSizeEnum;
    user?: string;
}

/**
 * 
 */
export class ImagesApi extends runtime.BaseAPI {

    /**
     * Creates an image given a prompt.
     */
    async createImageRaw(requestParameters: CreateImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImagesResponse>> {
        if (requestParameters['createImageRequest'] == null) {
            throw new runtime.RequiredError(
                'createImageRequest',
                'Required parameter "createImageRequest" was null or undefined when calling createImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/images/generations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateImageRequestToJSON(requestParameters['createImageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImagesResponseFromJSON(jsonValue));
    }

    /**
     * Creates an image given a prompt.
     */
    async createImage(requestParameters: CreateImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImagesResponse> {
        const response = await this.createImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an edited or extended image given an original image and a prompt.
     */
    async createImageEditRaw(requestParameters: CreateImageEditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImagesResponse>> {
        if (requestParameters['image'] == null) {
            throw new runtime.RequiredError(
                'image',
                'Required parameter "image" was null or undefined when calling createImageEdit().'
            );
        }

        if (requestParameters['prompt'] == null) {
            throw new runtime.RequiredError(
                'prompt',
                'Required parameter "prompt" was null or undefined when calling createImageEdit().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['image'] != null) {
            formParams.append('image', requestParameters['image'] as any);
        }

        if (requestParameters['prompt'] != null) {
            formParams.append('prompt', requestParameters['prompt'] as any);
        }

        if (requestParameters['mask'] != null) {
            formParams.append('mask', requestParameters['mask'] as any);
        }

        if (requestParameters['model'] != null) {
            formParams.append('model', new Blob([JSON.stringify(CreateImageEditRequestModelToJSON(requestParameters['model']))], { type: "application/json", }));
                    }

        if (requestParameters['n'] != null) {
            formParams.append('n', requestParameters['n'] as any);
        }

        if (requestParameters['size'] != null) {
            formParams.append('size', requestParameters['size'] as any);
        }

        if (requestParameters['responseFormat'] != null) {
            formParams.append('response_format', requestParameters['responseFormat'] as any);
        }

        if (requestParameters['user'] != null) {
            formParams.append('user', requestParameters['user'] as any);
        }

        const response = await this.request({
            path: `/images/edits`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImagesResponseFromJSON(jsonValue));
    }

    /**
     * Creates an edited or extended image given an original image and a prompt.
     */
    async createImageEdit(requestParameters: CreateImageEditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImagesResponse> {
        const response = await this.createImageEditRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a variation of a given image.
     */
    async createImageVariationRaw(requestParameters: CreateImageVariationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImagesResponse>> {
        if (requestParameters['image'] == null) {
            throw new runtime.RequiredError(
                'image',
                'Required parameter "image" was null or undefined when calling createImageVariation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['image'] != null) {
            formParams.append('image', requestParameters['image'] as any);
        }

        if (requestParameters['model'] != null) {
            formParams.append('model', new Blob([JSON.stringify(CreateImageEditRequestModelToJSON(requestParameters['model']))], { type: "application/json", }));
                    }

        if (requestParameters['n'] != null) {
            formParams.append('n', requestParameters['n'] as any);
        }

        if (requestParameters['responseFormat'] != null) {
            formParams.append('response_format', requestParameters['responseFormat'] as any);
        }

        if (requestParameters['size'] != null) {
            formParams.append('size', requestParameters['size'] as any);
        }

        if (requestParameters['user'] != null) {
            formParams.append('user', requestParameters['user'] as any);
        }

        const response = await this.request({
            path: `/images/variations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImagesResponseFromJSON(jsonValue));
    }

    /**
     * Creates a variation of a given image.
     */
    async createImageVariation(requestParameters: CreateImageVariationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImagesResponse> {
        const response = await this.createImageVariationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CreateImageEditSizeEnum = {
    _256x256: '256x256',
    _512x512: '512x512',
    _1024x1024: '1024x1024'
} as const;
export type CreateImageEditSizeEnum = typeof CreateImageEditSizeEnum[keyof typeof CreateImageEditSizeEnum];
/**
 * @export
 */
export const CreateImageEditResponseFormatEnum = {
    Url: 'url',
    B64Json: 'b64_json'
} as const;
export type CreateImageEditResponseFormatEnum = typeof CreateImageEditResponseFormatEnum[keyof typeof CreateImageEditResponseFormatEnum];
/**
 * @export
 */
export const CreateImageVariationResponseFormatEnum = {
    Url: 'url',
    B64Json: 'b64_json'
} as const;
export type CreateImageVariationResponseFormatEnum = typeof CreateImageVariationResponseFormatEnum[keyof typeof CreateImageVariationResponseFormatEnum];
/**
 * @export
 */
export const CreateImageVariationSizeEnum = {
    _256x256: '256x256',
    _512x512: '512x512',
    _1024x1024: '1024x1024'
} as const;
export type CreateImageVariationSizeEnum = typeof CreateImageVariationSizeEnum[keyof typeof CreateImageVariationSizeEnum];
