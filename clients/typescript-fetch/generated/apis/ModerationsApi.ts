/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateModerationRequest,
  CreateModerationResponse,
} from '../models/index';
import {
    CreateModerationRequestFromJSON,
    CreateModerationRequestToJSON,
    CreateModerationResponseFromJSON,
    CreateModerationResponseToJSON,
} from '../models/index';

export interface CreateModerationOperationRequest {
    createModerationRequest: CreateModerationRequest;
}

/**
 * 
 */
export class ModerationsApi extends runtime.BaseAPI {

    /**
     * Classifies if text is potentially harmful.
     */
    async createModerationRaw(requestParameters: CreateModerationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateModerationResponse>> {
        if (requestParameters['createModerationRequest'] == null) {
            throw new runtime.RequiredError(
                'createModerationRequest',
                'Required parameter "createModerationRequest" was null or undefined when calling createModeration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("ApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/moderations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateModerationRequestToJSON(requestParameters['createModerationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateModerationResponseFromJSON(jsonValue));
    }

    /**
     * Classifies if text is potentially harmful.
     */
    async createModeration(requestParameters: CreateModerationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateModerationResponse> {
        const response = await this.createModerationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
