/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AssistantObjectToolsInner } from './AssistantObjectToolsInner';
import {
    AssistantObjectToolsInnerFromJSON,
    AssistantObjectToolsInnerFromJSONTyped,
    AssistantObjectToolsInnerToJSON,
    AssistantObjectToolsInnerToJSONTyped,
} from './AssistantObjectToolsInner';

/**
 * Represents an `assistant` that can call the model and use tools.
 * @export
 * @interface AssistantObject
 */
export interface AssistantObject {
    /**
     * The identifier, which can be referenced in API endpoints.
     * @type {string}
     * @memberof AssistantObject
     */
    id: string;
    /**
     * The object type, which is always `assistant`.
     * @type {string}
     * @memberof AssistantObject
     */
    object: AssistantObjectObjectEnum;
    /**
     * The Unix timestamp (in seconds) for when the assistant was created.
     * @type {number}
     * @memberof AssistantObject
     */
    createdAt: number;
    /**
     * The name of the assistant. The maximum length is 256 characters.
     * 
     * @type {string}
     * @memberof AssistantObject
     */
    name: string | null;
    /**
     * The description of the assistant. The maximum length is 512 characters.
     * 
     * @type {string}
     * @memberof AssistantObject
     */
    description: string | null;
    /**
     * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
     * 
     * @type {string}
     * @memberof AssistantObject
     */
    model: string;
    /**
     * The system instructions that the assistant uses. The maximum length is 256,000 characters.
     * 
     * @type {string}
     * @memberof AssistantObject
     */
    instructions: string | null;
    /**
     * A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
     * 
     * @type {Array<AssistantObjectToolsInner>}
     * @memberof AssistantObject
     */
    tools: Array<AssistantObjectToolsInner>;
    /**
     * A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
     * 
     * @type {Array<string>}
     * @memberof AssistantObject
     */
    fileIds: Array<string>;
    /**
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
     * 
     * @type {object}
     * @memberof AssistantObject
     */
    metadata: object | null;
}


/**
 * @export
 */
export const AssistantObjectObjectEnum = {
    Assistant: 'assistant'
} as const;
export type AssistantObjectObjectEnum = typeof AssistantObjectObjectEnum[keyof typeof AssistantObjectObjectEnum];


/**
 * Check if a given object implements the AssistantObject interface.
 */
export function instanceOfAssistantObject(value: object): value is AssistantObject {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('object' in value) || value['object'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('model' in value) || value['model'] === undefined) return false;
    if (!('instructions' in value) || value['instructions'] === undefined) return false;
    if (!('tools' in value) || value['tools'] === undefined) return false;
    if (!('fileIds' in value) || value['fileIds'] === undefined) return false;
    if (!('metadata' in value) || value['metadata'] === undefined) return false;
    return true;
}

export function AssistantObjectFromJSON(json: any): AssistantObject {
    return AssistantObjectFromJSONTyped(json, false);
}

export function AssistantObjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): AssistantObject {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'object': json['object'],
        'createdAt': json['created_at'],
        'name': json['name'],
        'description': json['description'],
        'model': json['model'],
        'instructions': json['instructions'],
        'tools': ((json['tools'] as Array<any>).map(AssistantObjectToolsInnerFromJSON)),
        'fileIds': json['file_ids'],
        'metadata': json['metadata'],
    };
}

  export function AssistantObjectToJSON(json: any): AssistantObject {
      return AssistantObjectToJSONTyped(json, false);
  }

  export function AssistantObjectToJSONTyped(value?: AssistantObject | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'object': value['object'],
        'created_at': value['createdAt'],
        'name': value['name'],
        'description': value['description'],
        'model': value['model'],
        'instructions': value['instructions'],
        'tools': ((value['tools'] as Array<any>).map(AssistantObjectToolsInnerToJSON)),
        'file_ids': value['fileIds'],
        'metadata': value['metadata'],
    };
}

