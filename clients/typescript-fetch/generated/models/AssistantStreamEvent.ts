/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { DoneEvent } from './DoneEvent';
import {
    instanceOfDoneEvent,
    DoneEventFromJSON,
    DoneEventFromJSONTyped,
    DoneEventToJSON,
} from './DoneEvent';
import type { ErrorEvent } from './ErrorEvent';
import {
    instanceOfErrorEvent,
    ErrorEventFromJSON,
    ErrorEventFromJSONTyped,
    ErrorEventToJSON,
} from './ErrorEvent';
import type { MessageStreamEvent } from './MessageStreamEvent';
import {
    instanceOfMessageStreamEvent,
    MessageStreamEventFromJSON,
    MessageStreamEventFromJSONTyped,
    MessageStreamEventToJSON,
} from './MessageStreamEvent';
import type { RunStepStreamEvent } from './RunStepStreamEvent';
import {
    instanceOfRunStepStreamEvent,
    RunStepStreamEventFromJSON,
    RunStepStreamEventFromJSONTyped,
    RunStepStreamEventToJSON,
} from './RunStepStreamEvent';
import type { RunStreamEvent } from './RunStreamEvent';
import {
    instanceOfRunStreamEvent,
    RunStreamEventFromJSON,
    RunStreamEventFromJSONTyped,
    RunStreamEventToJSON,
} from './RunStreamEvent';
import type { ThreadStreamEvent } from './ThreadStreamEvent';
import {
    instanceOfThreadStreamEvent,
    ThreadStreamEventFromJSON,
    ThreadStreamEventFromJSONTyped,
    ThreadStreamEventToJSON,
} from './ThreadStreamEvent';

/**
 * @type AssistantStreamEvent
 * Represents an event emitted when streaming a Run.
 * 
 * Each event in a server-sent events stream has an `event` and `data` property:
 * 
 * ```
 * event: thread.created
 * data: {"id": "thread_123", "object": "thread", ...}
 * ```
 * 
 * We emit events whenever a new object is created, transitions to a new state, or is being
 * streamed in parts (deltas). For example, we emit `thread.run.created` when a new run
 * is created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses
 * to create a message during a run, we emit a `thread.message.created event`, a
 * `thread.message.in_progress` event, many `thread.message.delta` events, and finally a
 * `thread.message.completed` event.
 * 
 * We may add additional events over time, so we recommend handling unknown events gracefully
 * in your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to
 * integrate the Assistants API with streaming.
 * 
 * @export
 */
export type AssistantStreamEvent = DoneEvent | ErrorEvent | MessageStreamEvent | RunStepStreamEvent | RunStreamEvent | ThreadStreamEvent;

export function AssistantStreamEventFromJSON(json: any): AssistantStreamEvent {
    return AssistantStreamEventFromJSONTyped(json, false);
}

export function AssistantStreamEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): AssistantStreamEvent {
    if (json == null) {
        return json;
    }
    if (instanceOfDoneEvent(json)) {
        return DoneEventFromJSONTyped(json, true);
    }
    if (instanceOfErrorEvent(json)) {
        return ErrorEventFromJSONTyped(json, true);
    }
    if (instanceOfMessageStreamEvent(json)) {
        return MessageStreamEventFromJSONTyped(json, true);
    }
    if (instanceOfRunStepStreamEvent(json)) {
        return RunStepStreamEventFromJSONTyped(json, true);
    }
    if (instanceOfRunStreamEvent(json)) {
        return RunStreamEventFromJSONTyped(json, true);
    }
    if (instanceOfThreadStreamEvent(json)) {
        return ThreadStreamEventFromJSONTyped(json, true);
    }

    return {} as any;
}

export function AssistantStreamEventToJSON(value?: AssistantStreamEvent | null): any {
    if (value == null) {
        return value;
    }

    if (instanceOfDoneEvent(value)) {
        return DoneEventToJSON(value as DoneEvent);
    }
    if (instanceOfErrorEvent(value)) {
        return ErrorEventToJSON(value as ErrorEvent);
    }
    if (instanceOfMessageStreamEvent(value)) {
        return MessageStreamEventToJSON(value as MessageStreamEvent);
    }
    if (instanceOfRunStepStreamEvent(value)) {
        return RunStepStreamEventToJSON(value as RunStepStreamEvent);
    }
    if (instanceOfRunStreamEvent(value)) {
        return RunStreamEventToJSON(value as RunStreamEvent);
    }
    if (instanceOfThreadStreamEvent(value)) {
        return ThreadStreamEventToJSON(value as ThreadStreamEvent);
    }

    return {};
}

