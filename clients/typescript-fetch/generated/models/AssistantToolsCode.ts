/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AssistantToolsCode
 */
export interface AssistantToolsCode {
    /**
     * The type of tool being defined: `code_interpreter`
     * @type {string}
     * @memberof AssistantToolsCode
     */
    type: AssistantToolsCodeTypeEnum;
}


/**
 * @export
 */
export const AssistantToolsCodeTypeEnum = {
    CodeInterpreter: 'code_interpreter'
} as const;
export type AssistantToolsCodeTypeEnum = typeof AssistantToolsCodeTypeEnum[keyof typeof AssistantToolsCodeTypeEnum];


/**
 * Check if a given object implements the AssistantToolsCode interface.
 */
export function instanceOfAssistantToolsCode(value: object): value is AssistantToolsCode {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function AssistantToolsCodeFromJSON(json: any): AssistantToolsCode {
    return AssistantToolsCodeFromJSONTyped(json, false);
}

export function AssistantToolsCodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AssistantToolsCode {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
    };
}

  export function AssistantToolsCodeToJSON(json: any): AssistantToolsCode {
      return AssistantToolsCodeToJSONTyped(json, false);
  }

  export function AssistantToolsCodeToJSONTyped(value?: AssistantToolsCode | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
    };
}

