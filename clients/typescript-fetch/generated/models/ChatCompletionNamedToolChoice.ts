/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChatCompletionNamedToolChoiceFunction } from './ChatCompletionNamedToolChoiceFunction';
import {
    ChatCompletionNamedToolChoiceFunctionFromJSON,
    ChatCompletionNamedToolChoiceFunctionFromJSONTyped,
    ChatCompletionNamedToolChoiceFunctionToJSON,
    ChatCompletionNamedToolChoiceFunctionToJSONTyped,
} from './ChatCompletionNamedToolChoiceFunction';

/**
 * Specifies a tool the model should use. Use to force the model to call a specific function.
 * @export
 * @interface ChatCompletionNamedToolChoice
 */
export interface ChatCompletionNamedToolChoice {
    /**
     * The type of the tool. Currently, only `function` is supported.
     * @type {string}
     * @memberof ChatCompletionNamedToolChoice
     */
    type: ChatCompletionNamedToolChoiceTypeEnum;
    /**
     * 
     * @type {ChatCompletionNamedToolChoiceFunction}
     * @memberof ChatCompletionNamedToolChoice
     */
    _function: ChatCompletionNamedToolChoiceFunction;
}


/**
 * @export
 */
export const ChatCompletionNamedToolChoiceTypeEnum = {
    Function: 'function'
} as const;
export type ChatCompletionNamedToolChoiceTypeEnum = typeof ChatCompletionNamedToolChoiceTypeEnum[keyof typeof ChatCompletionNamedToolChoiceTypeEnum];


/**
 * Check if a given object implements the ChatCompletionNamedToolChoice interface.
 */
export function instanceOfChatCompletionNamedToolChoice(value: object): value is ChatCompletionNamedToolChoice {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('_function' in value) || value['_function'] === undefined) return false;
    return true;
}

export function ChatCompletionNamedToolChoiceFromJSON(json: any): ChatCompletionNamedToolChoice {
    return ChatCompletionNamedToolChoiceFromJSONTyped(json, false);
}

export function ChatCompletionNamedToolChoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatCompletionNamedToolChoice {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        '_function': ChatCompletionNamedToolChoiceFunctionFromJSON(json['function']),
    };
}

  export function ChatCompletionNamedToolChoiceToJSON(json: any): ChatCompletionNamedToolChoice {
      return ChatCompletionNamedToolChoiceToJSONTyped(json, false);
  }

  export function ChatCompletionNamedToolChoiceToJSONTyped(value?: ChatCompletionNamedToolChoice | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'function': ChatCompletionNamedToolChoiceFunctionToJSON(value['_function']),
    };
}

