/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChatCompletionMessageToolCall } from './ChatCompletionMessageToolCall';
import {
    ChatCompletionMessageToolCallFromJSON,
    ChatCompletionMessageToolCallFromJSONTyped,
    ChatCompletionMessageToolCallToJSON,
} from './ChatCompletionMessageToolCall';
import type { ChatCompletionRequestAssistantMessageFunctionCall } from './ChatCompletionRequestAssistantMessageFunctionCall';
import {
    ChatCompletionRequestAssistantMessageFunctionCallFromJSON,
    ChatCompletionRequestAssistantMessageFunctionCallFromJSONTyped,
    ChatCompletionRequestAssistantMessageFunctionCallToJSON,
} from './ChatCompletionRequestAssistantMessageFunctionCall';

/**
 * 
 * @export
 * @interface ChatCompletionRequestAssistantMessage
 */
export interface ChatCompletionRequestAssistantMessage {
    /**
     * The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
     * 
     * @type {string}
     * @memberof ChatCompletionRequestAssistantMessage
     */
    content?: string;
    /**
     * The role of the messages author, in this case `assistant`.
     * @type {string}
     * @memberof ChatCompletionRequestAssistantMessage
     */
    role: ChatCompletionRequestAssistantMessageRoleEnum;
    /**
     * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
     * @type {string}
     * @memberof ChatCompletionRequestAssistantMessage
     */
    name?: string;
    /**
     * The tool calls generated by the model, such as function calls.
     * @type {Array<ChatCompletionMessageToolCall>}
     * @memberof ChatCompletionRequestAssistantMessage
     */
    toolCalls?: Array<ChatCompletionMessageToolCall>;
    /**
     * 
     * @type {ChatCompletionRequestAssistantMessageFunctionCall}
     * @memberof ChatCompletionRequestAssistantMessage
     * @deprecated
     */
    functionCall?: ChatCompletionRequestAssistantMessageFunctionCall;
}


/**
 * @export
 */
export const ChatCompletionRequestAssistantMessageRoleEnum = {
    Assistant: 'assistant'
} as const;
export type ChatCompletionRequestAssistantMessageRoleEnum = typeof ChatCompletionRequestAssistantMessageRoleEnum[keyof typeof ChatCompletionRequestAssistantMessageRoleEnum];


/**
 * Check if a given object implements the ChatCompletionRequestAssistantMessage interface.
 */
export function instanceOfChatCompletionRequestAssistantMessage(value: object): boolean {
    if (!('role' in value)) return false;
    return true;
}

export function ChatCompletionRequestAssistantMessageFromJSON(json: any): ChatCompletionRequestAssistantMessage {
    return ChatCompletionRequestAssistantMessageFromJSONTyped(json, false);
}

export function ChatCompletionRequestAssistantMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatCompletionRequestAssistantMessage {
    if (json == null) {
        return json;
    }
    return {
        
        'content': json['content'] == null ? undefined : json['content'],
        'role': json['role'],
        'name': json['name'] == null ? undefined : json['name'],
        'toolCalls': json['tool_calls'] == null ? undefined : ((json['tool_calls'] as Array<any>).map(ChatCompletionMessageToolCallFromJSON)),
        'functionCall': json['function_call'] == null ? undefined : ChatCompletionRequestAssistantMessageFunctionCallFromJSON(json['function_call']),
    };
}

export function ChatCompletionRequestAssistantMessageToJSON(value?: ChatCompletionRequestAssistantMessage | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'content': value['content'],
        'role': value['role'],
        'name': value['name'],
        'tool_calls': value['toolCalls'] == null ? undefined : ((value['toolCalls'] as Array<any>).map(ChatCompletionMessageToolCallToJSON)),
        'function_call': ChatCompletionRequestAssistantMessageFunctionCallToJSON(value['functionCall']),
    };
}

