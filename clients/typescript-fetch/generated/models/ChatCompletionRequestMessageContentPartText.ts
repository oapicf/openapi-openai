/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ChatCompletionRequestMessageContentPartText
 */
export interface ChatCompletionRequestMessageContentPartText {
    /**
     * The type of the content part.
     * @type {string}
     * @memberof ChatCompletionRequestMessageContentPartText
     */
    type: ChatCompletionRequestMessageContentPartTextTypeEnum;
    /**
     * The text content.
     * @type {string}
     * @memberof ChatCompletionRequestMessageContentPartText
     */
    text: string;
}


/**
 * @export
 */
export const ChatCompletionRequestMessageContentPartTextTypeEnum = {
    Text: 'text'
} as const;
export type ChatCompletionRequestMessageContentPartTextTypeEnum = typeof ChatCompletionRequestMessageContentPartTextTypeEnum[keyof typeof ChatCompletionRequestMessageContentPartTextTypeEnum];


/**
 * Check if a given object implements the ChatCompletionRequestMessageContentPartText interface.
 */
export function instanceOfChatCompletionRequestMessageContentPartText(value: object): value is ChatCompletionRequestMessageContentPartText {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('text' in value) || value['text'] === undefined) return false;
    return true;
}

export function ChatCompletionRequestMessageContentPartTextFromJSON(json: any): ChatCompletionRequestMessageContentPartText {
    return ChatCompletionRequestMessageContentPartTextFromJSONTyped(json, false);
}

export function ChatCompletionRequestMessageContentPartTextFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatCompletionRequestMessageContentPartText {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'text': json['text'],
    };
}

  export function ChatCompletionRequestMessageContentPartTextToJSON(json: any): ChatCompletionRequestMessageContentPartText {
      return ChatCompletionRequestMessageContentPartTextToJSONTyped(json, false);
  }

  export function ChatCompletionRequestMessageContentPartTextToJSONTyped(value?: ChatCompletionRequestMessageContentPartText | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'text': value['text'],
    };
}

