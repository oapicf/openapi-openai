/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChatCompletionFunctions } from './ChatCompletionFunctions';
import {
    ChatCompletionFunctionsFromJSON,
    ChatCompletionFunctionsFromJSONTyped,
    ChatCompletionFunctionsToJSON,
} from './ChatCompletionFunctions';
import type { ChatCompletionRequestMessage } from './ChatCompletionRequestMessage';
import {
    ChatCompletionRequestMessageFromJSON,
    ChatCompletionRequestMessageFromJSONTyped,
    ChatCompletionRequestMessageToJSON,
} from './ChatCompletionRequestMessage';
import type { CreateChatCompletionRequestFunctionCall } from './CreateChatCompletionRequestFunctionCall';
import {
    CreateChatCompletionRequestFunctionCallFromJSON,
    CreateChatCompletionRequestFunctionCallFromJSONTyped,
    CreateChatCompletionRequestFunctionCallToJSON,
} from './CreateChatCompletionRequestFunctionCall';
import type { CreateChatCompletionRequestModel } from './CreateChatCompletionRequestModel';
import {
    CreateChatCompletionRequestModelFromJSON,
    CreateChatCompletionRequestModelFromJSONTyped,
    CreateChatCompletionRequestModelToJSON,
} from './CreateChatCompletionRequestModel';
import type { CreateChatCompletionRequestStop } from './CreateChatCompletionRequestStop';
import {
    CreateChatCompletionRequestStopFromJSON,
    CreateChatCompletionRequestStopFromJSONTyped,
    CreateChatCompletionRequestStopToJSON,
} from './CreateChatCompletionRequestStop';

/**
 * 
 * @export
 * @interface CreateChatCompletionRequest
 */
export interface CreateChatCompletionRequest {
    /**
     * 
     * @type {CreateChatCompletionRequestModel}
     * @memberof CreateChatCompletionRequest
     */
    model: CreateChatCompletionRequestModel;
    /**
     * A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).
     * @type {Array<ChatCompletionRequestMessage>}
     * @memberof CreateChatCompletionRequest
     */
    messages: Array<ChatCompletionRequestMessage>;
    /**
     * A list of functions the model may generate JSON inputs for.
     * @type {Array<ChatCompletionFunctions>}
     * @memberof CreateChatCompletionRequest
     */
    functions?: Array<ChatCompletionFunctions>;
    /**
     * 
     * @type {CreateChatCompletionRequestFunctionCall}
     * @memberof CreateChatCompletionRequest
     */
    functionCall?: CreateChatCompletionRequestFunctionCall;
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * 
     * We generally recommend altering this or `top_p` but not both.
     * 
     * @type {number}
     * @memberof CreateChatCompletionRequest
     */
    temperature?: number;
    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
     * 
     * We generally recommend altering this or `temperature` but not both.
     * 
     * @type {number}
     * @memberof CreateChatCompletionRequest
     */
    topP?: number;
    /**
     * How many chat completion choices to generate for each input message.
     * @type {number}
     * @memberof CreateChatCompletionRequest
     */
    n?: number;
    /**
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).
     * 
     * @type {boolean}
     * @memberof CreateChatCompletionRequest
     */
    stream?: boolean;
    /**
     * 
     * @type {CreateChatCompletionRequestStop}
     * @memberof CreateChatCompletionRequest
     */
    stop?: CreateChatCompletionRequestStop;
    /**
     * The maximum number of [tokens](/tokenizer) to generate in the chat completion.
     * 
     * The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.
     * 
     * @type {number}
     * @memberof CreateChatCompletionRequest
     */
    maxTokens?: number;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
     * 
     * [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
     * 
     * @type {number}
     * @memberof CreateChatCompletionRequest
     */
    presencePenalty?: number;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
     * 
     * [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
     * 
     * @type {number}
     * @memberof CreateChatCompletionRequest
     */
    frequencyPenalty?: number;
    /**
     * Modify the likelihood of specified tokens appearing in the completion.
     * 
     * Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     * 
     * @type {object}
     * @memberof CreateChatCompletionRequest
     */
    logitBias?: object;
    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     * 
     * @type {string}
     * @memberof CreateChatCompletionRequest
     */
    user?: string;
}

/**
 * Check if a given object implements the CreateChatCompletionRequest interface.
 */
export function instanceOfCreateChatCompletionRequest(value: object): boolean {
    if (!('model' in value)) return false;
    if (!('messages' in value)) return false;
    return true;
}

export function CreateChatCompletionRequestFromJSON(json: any): CreateChatCompletionRequest {
    return CreateChatCompletionRequestFromJSONTyped(json, false);
}

export function CreateChatCompletionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateChatCompletionRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'model': CreateChatCompletionRequestModelFromJSON(json['model']),
        'messages': ((json['messages'] as Array<any>).map(ChatCompletionRequestMessageFromJSON)),
        'functions': json['functions'] == null ? undefined : ((json['functions'] as Array<any>).map(ChatCompletionFunctionsFromJSON)),
        'functionCall': json['function_call'] == null ? undefined : CreateChatCompletionRequestFunctionCallFromJSON(json['function_call']),
        'temperature': json['temperature'] == null ? undefined : json['temperature'],
        'topP': json['top_p'] == null ? undefined : json['top_p'],
        'n': json['n'] == null ? undefined : json['n'],
        'stream': json['stream'] == null ? undefined : json['stream'],
        'stop': json['stop'] == null ? undefined : CreateChatCompletionRequestStopFromJSON(json['stop']),
        'maxTokens': json['max_tokens'] == null ? undefined : json['max_tokens'],
        'presencePenalty': json['presence_penalty'] == null ? undefined : json['presence_penalty'],
        'frequencyPenalty': json['frequency_penalty'] == null ? undefined : json['frequency_penalty'],
        'logitBias': json['logit_bias'] == null ? undefined : json['logit_bias'],
        'user': json['user'] == null ? undefined : json['user'],
    };
}

export function CreateChatCompletionRequestToJSON(value?: CreateChatCompletionRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'model': CreateChatCompletionRequestModelToJSON(value['model']),
        'messages': ((value['messages'] as Array<any>).map(ChatCompletionRequestMessageToJSON)),
        'functions': value['functions'] == null ? undefined : ((value['functions'] as Array<any>).map(ChatCompletionFunctionsToJSON)),
        'function_call': CreateChatCompletionRequestFunctionCallToJSON(value['functionCall']),
        'temperature': value['temperature'],
        'top_p': value['topP'],
        'n': value['n'],
        'stream': value['stream'],
        'stop': CreateChatCompletionRequestStopToJSON(value['stop']),
        'max_tokens': value['maxTokens'],
        'presence_penalty': value['presencePenalty'],
        'frequency_penalty': value['frequencyPenalty'],
        'logit_bias': value['logitBias'],
        'user': value['user'],
    };
}

