/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CreateCompletionResponseChoicesInner } from './CreateCompletionResponseChoicesInner';
import {
    CreateCompletionResponseChoicesInnerFromJSON,
    CreateCompletionResponseChoicesInnerFromJSONTyped,
    CreateCompletionResponseChoicesInnerToJSON,
    CreateCompletionResponseChoicesInnerToJSONTyped,
} from './CreateCompletionResponseChoicesInner';
import type { CompletionUsage } from './CompletionUsage';
import {
    CompletionUsageFromJSON,
    CompletionUsageFromJSONTyped,
    CompletionUsageToJSON,
    CompletionUsageToJSONTyped,
} from './CompletionUsage';

/**
 * Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).
 * 
 * @export
 * @interface CreateCompletionResponse
 */
export interface CreateCompletionResponse {
    /**
     * A unique identifier for the completion.
     * @type {string}
     * @memberof CreateCompletionResponse
     */
    id: string;
    /**
     * The list of completion choices the model generated for the input prompt.
     * @type {Array<CreateCompletionResponseChoicesInner>}
     * @memberof CreateCompletionResponse
     */
    choices: Array<CreateCompletionResponseChoicesInner>;
    /**
     * The Unix timestamp (in seconds) of when the completion was created.
     * @type {number}
     * @memberof CreateCompletionResponse
     */
    created: number;
    /**
     * The model used for completion.
     * @type {string}
     * @memberof CreateCompletionResponse
     */
    model: string;
    /**
     * This fingerprint represents the backend configuration that the model runs with.
     * 
     * Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
     * 
     * @type {string}
     * @memberof CreateCompletionResponse
     */
    systemFingerprint?: string;
    /**
     * The object type, which is always "text_completion"
     * @type {string}
     * @memberof CreateCompletionResponse
     */
    object: CreateCompletionResponseObjectEnum;
    /**
     * 
     * @type {CompletionUsage}
     * @memberof CreateCompletionResponse
     */
    usage?: CompletionUsage;
}


/**
 * @export
 */
export const CreateCompletionResponseObjectEnum = {
    TextCompletion: 'text_completion'
} as const;
export type CreateCompletionResponseObjectEnum = typeof CreateCompletionResponseObjectEnum[keyof typeof CreateCompletionResponseObjectEnum];


/**
 * Check if a given object implements the CreateCompletionResponse interface.
 */
export function instanceOfCreateCompletionResponse(value: object): value is CreateCompletionResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('choices' in value) || value['choices'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('model' in value) || value['model'] === undefined) return false;
    if (!('object' in value) || value['object'] === undefined) return false;
    return true;
}

export function CreateCompletionResponseFromJSON(json: any): CreateCompletionResponse {
    return CreateCompletionResponseFromJSONTyped(json, false);
}

export function CreateCompletionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateCompletionResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'choices': ((json['choices'] as Array<any>).map(CreateCompletionResponseChoicesInnerFromJSON)),
        'created': json['created'],
        'model': json['model'],
        'systemFingerprint': json['system_fingerprint'] == null ? undefined : json['system_fingerprint'],
        'object': json['object'],
        'usage': json['usage'] == null ? undefined : CompletionUsageFromJSON(json['usage']),
    };
}

  export function CreateCompletionResponseToJSON(json: any): CreateCompletionResponse {
      return CreateCompletionResponseToJSONTyped(json, false);
  }

  export function CreateCompletionResponseToJSONTyped(value?: CreateCompletionResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'choices': ((value['choices'] as Array<any>).map(CreateCompletionResponseChoicesInnerToJSON)),
        'created': value['created'],
        'model': value['model'],
        'system_fingerprint': value['systemFingerprint'],
        'object': value['object'],
        'usage': CompletionUsageToJSON(value['usage']),
    };
}

