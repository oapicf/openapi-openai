/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CreateEmbeddingRequestInput } from './CreateEmbeddingRequestInput';
import {
    CreateEmbeddingRequestInputFromJSON,
    CreateEmbeddingRequestInputFromJSONTyped,
    CreateEmbeddingRequestInputToJSON,
} from './CreateEmbeddingRequestInput';
import type { CreateEmbeddingRequestModel } from './CreateEmbeddingRequestModel';
import {
    CreateEmbeddingRequestModelFromJSON,
    CreateEmbeddingRequestModelFromJSONTyped,
    CreateEmbeddingRequestModelToJSON,
} from './CreateEmbeddingRequestModel';

/**
 * 
 * @export
 * @interface CreateEmbeddingRequest
 */
export interface CreateEmbeddingRequest {
    /**
     * 
     * @type {CreateEmbeddingRequestInput}
     * @memberof CreateEmbeddingRequest
     */
    input: CreateEmbeddingRequestInput;
    /**
     * 
     * @type {CreateEmbeddingRequestModel}
     * @memberof CreateEmbeddingRequest
     */
    model: CreateEmbeddingRequestModel;
    /**
     * The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
     * @type {string}
     * @memberof CreateEmbeddingRequest
     */
    encodingFormat?: CreateEmbeddingRequestEncodingFormatEnum;
    /**
     * The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
     * 
     * @type {number}
     * @memberof CreateEmbeddingRequest
     */
    dimensions?: number;
    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     * 
     * @type {string}
     * @memberof CreateEmbeddingRequest
     */
    user?: string;
}


/**
 * @export
 */
export const CreateEmbeddingRequestEncodingFormatEnum = {
    Float: 'float',
    Base64: 'base64'
} as const;
export type CreateEmbeddingRequestEncodingFormatEnum = typeof CreateEmbeddingRequestEncodingFormatEnum[keyof typeof CreateEmbeddingRequestEncodingFormatEnum];


/**
 * Check if a given object implements the CreateEmbeddingRequest interface.
 */
export function instanceOfCreateEmbeddingRequest(value: object): boolean {
    if (!('input' in value)) return false;
    if (!('model' in value)) return false;
    return true;
}

export function CreateEmbeddingRequestFromJSON(json: any): CreateEmbeddingRequest {
    return CreateEmbeddingRequestFromJSONTyped(json, false);
}

export function CreateEmbeddingRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateEmbeddingRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'input': CreateEmbeddingRequestInputFromJSON(json['input']),
        'model': CreateEmbeddingRequestModelFromJSON(json['model']),
        'encodingFormat': json['encoding_format'] == null ? undefined : json['encoding_format'],
        'dimensions': json['dimensions'] == null ? undefined : json['dimensions'],
        'user': json['user'] == null ? undefined : json['user'],
    };
}

export function CreateEmbeddingRequestToJSON(value?: CreateEmbeddingRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'input': CreateEmbeddingRequestInputToJSON(value['input']),
        'model': CreateEmbeddingRequestModelToJSON(value['model']),
        'encoding_format': value['encodingFormat'],
        'dimensions': value['dimensions'],
        'user': value['user'],
    };
}

