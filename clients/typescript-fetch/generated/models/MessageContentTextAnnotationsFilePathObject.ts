/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageContentTextAnnotationsFilePathObjectFilePath } from './MessageContentTextAnnotationsFilePathObjectFilePath';
import {
    MessageContentTextAnnotationsFilePathObjectFilePathFromJSON,
    MessageContentTextAnnotationsFilePathObjectFilePathFromJSONTyped,
    MessageContentTextAnnotationsFilePathObjectFilePathToJSON,
    MessageContentTextAnnotationsFilePathObjectFilePathToJSONTyped,
} from './MessageContentTextAnnotationsFilePathObjectFilePath';

/**
 * A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
 * @export
 * @interface MessageContentTextAnnotationsFilePathObject
 */
export interface MessageContentTextAnnotationsFilePathObject {
    /**
     * Always `file_path`.
     * @type {string}
     * @memberof MessageContentTextAnnotationsFilePathObject
     */
    type: MessageContentTextAnnotationsFilePathObjectTypeEnum;
    /**
     * The text in the message content that needs to be replaced.
     * @type {string}
     * @memberof MessageContentTextAnnotationsFilePathObject
     */
    text: string;
    /**
     * 
     * @type {MessageContentTextAnnotationsFilePathObjectFilePath}
     * @memberof MessageContentTextAnnotationsFilePathObject
     */
    filePath: MessageContentTextAnnotationsFilePathObjectFilePath;
    /**
     * 
     * @type {number}
     * @memberof MessageContentTextAnnotationsFilePathObject
     */
    startIndex: number;
    /**
     * 
     * @type {number}
     * @memberof MessageContentTextAnnotationsFilePathObject
     */
    endIndex: number;
}


/**
 * @export
 */
export const MessageContentTextAnnotationsFilePathObjectTypeEnum = {
    FilePath: 'file_path'
} as const;
export type MessageContentTextAnnotationsFilePathObjectTypeEnum = typeof MessageContentTextAnnotationsFilePathObjectTypeEnum[keyof typeof MessageContentTextAnnotationsFilePathObjectTypeEnum];


/**
 * Check if a given object implements the MessageContentTextAnnotationsFilePathObject interface.
 */
export function instanceOfMessageContentTextAnnotationsFilePathObject(value: object): value is MessageContentTextAnnotationsFilePathObject {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('text' in value) || value['text'] === undefined) return false;
    if (!('filePath' in value) || value['filePath'] === undefined) return false;
    if (!('startIndex' in value) || value['startIndex'] === undefined) return false;
    if (!('endIndex' in value) || value['endIndex'] === undefined) return false;
    return true;
}

export function MessageContentTextAnnotationsFilePathObjectFromJSON(json: any): MessageContentTextAnnotationsFilePathObject {
    return MessageContentTextAnnotationsFilePathObjectFromJSONTyped(json, false);
}

export function MessageContentTextAnnotationsFilePathObjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageContentTextAnnotationsFilePathObject {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'text': json['text'],
        'filePath': MessageContentTextAnnotationsFilePathObjectFilePathFromJSON(json['file_path']),
        'startIndex': json['start_index'],
        'endIndex': json['end_index'],
    };
}

  export function MessageContentTextAnnotationsFilePathObjectToJSON(json: any): MessageContentTextAnnotationsFilePathObject {
      return MessageContentTextAnnotationsFilePathObjectToJSONTyped(json, false);
  }

  export function MessageContentTextAnnotationsFilePathObjectToJSONTyped(value?: MessageContentTextAnnotationsFilePathObject | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'text': value['text'],
        'file_path': MessageContentTextAnnotationsFilePathObjectFilePathToJSON(value['filePath']),
        'start_index': value['startIndex'],
        'end_index': value['endIndex'],
    };
}

