/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageContentTextObjectTextAnnotationsInner } from './MessageContentTextObjectTextAnnotationsInner';
import {
    MessageContentTextObjectTextAnnotationsInnerFromJSON,
    MessageContentTextObjectTextAnnotationsInnerFromJSONTyped,
    MessageContentTextObjectTextAnnotationsInnerToJSON,
} from './MessageContentTextObjectTextAnnotationsInner';

/**
 * 
 * @export
 * @interface MessageContentTextObjectText
 */
export interface MessageContentTextObjectText {
    /**
     * The data that makes up the text.
     * @type {string}
     * @memberof MessageContentTextObjectText
     */
    value: string;
    /**
     * 
     * @type {Array<MessageContentTextObjectTextAnnotationsInner>}
     * @memberof MessageContentTextObjectText
     */
    annotations: Array<MessageContentTextObjectTextAnnotationsInner>;
}

/**
 * Check if a given object implements the MessageContentTextObjectText interface.
 */
export function instanceOfMessageContentTextObjectText(value: object): boolean {
    if (!('value' in value)) return false;
    if (!('annotations' in value)) return false;
    return true;
}

export function MessageContentTextObjectTextFromJSON(json: any): MessageContentTextObjectText {
    return MessageContentTextObjectTextFromJSONTyped(json, false);
}

export function MessageContentTextObjectTextFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageContentTextObjectText {
    if (json == null) {
        return json;
    }
    return {
        
        'value': json['value'],
        'annotations': ((json['annotations'] as Array<any>).map(MessageContentTextObjectTextAnnotationsInnerFromJSON)),
    };
}

export function MessageContentTextObjectTextToJSON(value?: MessageContentTextObjectText | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'value': value['value'],
        'annotations': ((value['annotations'] as Array<any>).map(MessageContentTextObjectTextAnnotationsInnerToJSON)),
    };
}

