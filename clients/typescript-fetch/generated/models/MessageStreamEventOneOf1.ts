/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageObject } from './MessageObject';
import {
    MessageObjectFromJSON,
    MessageObjectFromJSONTyped,
    MessageObjectToJSON,
    MessageObjectToJSONTyped,
} from './MessageObject';

/**
 * Occurs when a [message](/docs/api-reference/messages/object) moves to an `in_progress` state.
 * @export
 * @interface MessageStreamEventOneOf1
 */
export interface MessageStreamEventOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof MessageStreamEventOneOf1
     */
    event: MessageStreamEventOneOf1EventEnum;
    /**
     * 
     * @type {MessageObject}
     * @memberof MessageStreamEventOneOf1
     */
    data: MessageObject;
}


/**
 * @export
 */
export const MessageStreamEventOneOf1EventEnum = {
    ThreadMessageInProgress: 'thread.message.in_progress'
} as const;
export type MessageStreamEventOneOf1EventEnum = typeof MessageStreamEventOneOf1EventEnum[keyof typeof MessageStreamEventOneOf1EventEnum];


/**
 * Check if a given object implements the MessageStreamEventOneOf1 interface.
 */
export function instanceOfMessageStreamEventOneOf1(value: object): value is MessageStreamEventOneOf1 {
    if (!('event' in value) || value['event'] === undefined) return false;
    if (!('data' in value) || value['data'] === undefined) return false;
    return true;
}

export function MessageStreamEventOneOf1FromJSON(json: any): MessageStreamEventOneOf1 {
    return MessageStreamEventOneOf1FromJSONTyped(json, false);
}

export function MessageStreamEventOneOf1FromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageStreamEventOneOf1 {
    if (json == null) {
        return json;
    }
    return {
        
        'event': json['event'],
        'data': MessageObjectFromJSON(json['data']),
    };
}

  export function MessageStreamEventOneOf1ToJSON(json: any): MessageStreamEventOneOf1 {
      return MessageStreamEventOneOf1ToJSONTyped(json, false);
  }

  export function MessageStreamEventOneOf1ToJSONTyped(value?: MessageStreamEventOneOf1 | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'event': value['event'],
        'data': MessageObjectToJSON(value['data']),
    };
}

