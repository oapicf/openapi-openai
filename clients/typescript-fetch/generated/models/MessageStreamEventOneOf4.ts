/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageObject } from './MessageObject';
import {
    MessageObjectFromJSON,
    MessageObjectFromJSONTyped,
    MessageObjectToJSON,
} from './MessageObject';

/**
 * Occurs when a [message](/docs/api-reference/messages/object) ends before it is completed.
 * @export
 * @interface MessageStreamEventOneOf4
 */
export interface MessageStreamEventOneOf4 {
    /**
     * 
     * @type {string}
     * @memberof MessageStreamEventOneOf4
     */
    event: MessageStreamEventOneOf4EventEnum;
    /**
     * 
     * @type {MessageObject}
     * @memberof MessageStreamEventOneOf4
     */
    data: MessageObject;
}


/**
 * @export
 */
export const MessageStreamEventOneOf4EventEnum = {
    ThreadMessageIncomplete: 'thread.message.incomplete'
} as const;
export type MessageStreamEventOneOf4EventEnum = typeof MessageStreamEventOneOf4EventEnum[keyof typeof MessageStreamEventOneOf4EventEnum];


/**
 * Check if a given object implements the MessageStreamEventOneOf4 interface.
 */
export function instanceOfMessageStreamEventOneOf4(value: object): boolean {
    if (!('event' in value)) return false;
    if (!('data' in value)) return false;
    return true;
}

export function MessageStreamEventOneOf4FromJSON(json: any): MessageStreamEventOneOf4 {
    return MessageStreamEventOneOf4FromJSONTyped(json, false);
}

export function MessageStreamEventOneOf4FromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageStreamEventOneOf4 {
    if (json == null) {
        return json;
    }
    return {
        
        'event': json['event'],
        'data': MessageObjectFromJSON(json['data']),
    };
}

export function MessageStreamEventOneOf4ToJSON(value?: MessageStreamEventOneOf4 | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'event': value['event'],
        'data': MessageObjectToJSON(value['data']),
    };
}

