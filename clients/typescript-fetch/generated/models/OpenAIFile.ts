/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * The `File` object represents a document that has been uploaded to OpenAI.
 * @export
 * @interface OpenAIFile
 */
export interface OpenAIFile {
    /**
     * The file identifier, which can be referenced in the API endpoints.
     * @type {string}
     * @memberof OpenAIFile
     */
    id: string;
    /**
     * The size of the file, in bytes.
     * @type {number}
     * @memberof OpenAIFile
     */
    bytes: number;
    /**
     * The Unix timestamp (in seconds) for when the file was created.
     * @type {number}
     * @memberof OpenAIFile
     */
    createdAt: number;
    /**
     * The name of the file.
     * @type {string}
     * @memberof OpenAIFile
     */
    filename: string;
    /**
     * The object type, which is always `file`.
     * @type {string}
     * @memberof OpenAIFile
     */
    object: OpenAIFileObjectEnum;
    /**
     * The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`, `assistants`, and `assistants_output`.
     * @type {string}
     * @memberof OpenAIFile
     */
    purpose: OpenAIFilePurposeEnum;
    /**
     * Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
     * @type {string}
     * @memberof OpenAIFile
     * @deprecated
     */
    status: OpenAIFileStatusEnum;
    /**
     * Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
     * @type {string}
     * @memberof OpenAIFile
     * @deprecated
     */
    statusDetails?: string;
}


/**
 * @export
 */
export const OpenAIFileObjectEnum = {
    File: 'file'
} as const;
export type OpenAIFileObjectEnum = typeof OpenAIFileObjectEnum[keyof typeof OpenAIFileObjectEnum];

/**
 * @export
 */
export const OpenAIFilePurposeEnum = {
    FineTune: 'fine-tune',
    FineTuneResults: 'fine-tune-results',
    Assistants: 'assistants',
    AssistantsOutput: 'assistants_output'
} as const;
export type OpenAIFilePurposeEnum = typeof OpenAIFilePurposeEnum[keyof typeof OpenAIFilePurposeEnum];

/**
 * @export
 */
export const OpenAIFileStatusEnum = {
    Uploaded: 'uploaded',
    Processed: 'processed',
    Error: 'error'
} as const;
export type OpenAIFileStatusEnum = typeof OpenAIFileStatusEnum[keyof typeof OpenAIFileStatusEnum];


/**
 * Check if a given object implements the OpenAIFile interface.
 */
export function instanceOfOpenAIFile(value: object): value is OpenAIFile {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('bytes' in value) || value['bytes'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('filename' in value) || value['filename'] === undefined) return false;
    if (!('object' in value) || value['object'] === undefined) return false;
    if (!('purpose' in value) || value['purpose'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function OpenAIFileFromJSON(json: any): OpenAIFile {
    return OpenAIFileFromJSONTyped(json, false);
}

export function OpenAIFileFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenAIFile {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'bytes': json['bytes'],
        'createdAt': json['created_at'],
        'filename': json['filename'],
        'object': json['object'],
        'purpose': json['purpose'],
        'status': json['status'],
        'statusDetails': json['status_details'] == null ? undefined : json['status_details'],
    };
}

  export function OpenAIFileToJSON(json: any): OpenAIFile {
      return OpenAIFileToJSONTyped(json, false);
  }

  export function OpenAIFileToJSONTyped(value?: OpenAIFile | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'bytes': value['bytes'],
        'created_at': value['createdAt'],
        'filename': value['filename'],
        'object': value['object'],
        'purpose': value['purpose'],
        'status': value['status'],
        'status_details': value['statusDetails'],
    };
}

