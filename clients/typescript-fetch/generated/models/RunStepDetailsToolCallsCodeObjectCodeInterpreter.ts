/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner } from './RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner';
import {
    RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerFromJSON,
    RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerFromJSONTyped,
    RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerToJSON,
} from './RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner';

/**
 * The Code Interpreter tool call definition.
 * @export
 * @interface RunStepDetailsToolCallsCodeObjectCodeInterpreter
 */
export interface RunStepDetailsToolCallsCodeObjectCodeInterpreter {
    /**
     * The input to the Code Interpreter tool call.
     * @type {string}
     * @memberof RunStepDetailsToolCallsCodeObjectCodeInterpreter
     */
    input: string;
    /**
     * The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
     * @type {Array<RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner>}
     * @memberof RunStepDetailsToolCallsCodeObjectCodeInterpreter
     */
    outputs: Array<RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner>;
}

/**
 * Check if a given object implements the RunStepDetailsToolCallsCodeObjectCodeInterpreter interface.
 */
export function instanceOfRunStepDetailsToolCallsCodeObjectCodeInterpreter(value: object): boolean {
    if (!('input' in value)) return false;
    if (!('outputs' in value)) return false;
    return true;
}

export function RunStepDetailsToolCallsCodeObjectCodeInterpreterFromJSON(json: any): RunStepDetailsToolCallsCodeObjectCodeInterpreter {
    return RunStepDetailsToolCallsCodeObjectCodeInterpreterFromJSONTyped(json, false);
}

export function RunStepDetailsToolCallsCodeObjectCodeInterpreterFromJSONTyped(json: any, ignoreDiscriminator: boolean): RunStepDetailsToolCallsCodeObjectCodeInterpreter {
    if (json == null) {
        return json;
    }
    return {
        
        'input': json['input'],
        'outputs': ((json['outputs'] as Array<any>).map(RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerFromJSON)),
    };
}

export function RunStepDetailsToolCallsCodeObjectCodeInterpreterToJSON(value?: RunStepDetailsToolCallsCodeObjectCodeInterpreter | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'input': value['input'],
        'outputs': ((value['outputs'] as Array<any>).map(RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerToJSON)),
    };
}

