/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Represents a thread that contains [messages](/docs/api-reference/messages).
 * @export
 * @interface ThreadObject
 */
export interface ThreadObject {
    /**
     * The identifier, which can be referenced in API endpoints.
     * @type {string}
     * @memberof ThreadObject
     */
    id: string;
    /**
     * The object type, which is always `thread`.
     * @type {string}
     * @memberof ThreadObject
     */
    object: ThreadObjectObjectEnum;
    /**
     * The Unix timestamp (in seconds) for when the thread was created.
     * @type {number}
     * @memberof ThreadObject
     */
    createdAt: number;
    /**
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
     * 
     * @type {object}
     * @memberof ThreadObject
     */
    metadata: object | null;
}


/**
 * @export
 */
export const ThreadObjectObjectEnum = {
    Thread: 'thread'
} as const;
export type ThreadObjectObjectEnum = typeof ThreadObjectObjectEnum[keyof typeof ThreadObjectObjectEnum];


/**
 * Check if a given object implements the ThreadObject interface.
 */
export function instanceOfThreadObject(value: object): value is ThreadObject {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('object' in value) || value['object'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('metadata' in value) || value['metadata'] === undefined) return false;
    return true;
}

export function ThreadObjectFromJSON(json: any): ThreadObject {
    return ThreadObjectFromJSONTyped(json, false);
}

export function ThreadObjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): ThreadObject {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'object': json['object'],
        'createdAt': json['created_at'],
        'metadata': json['metadata'],
    };
}

  export function ThreadObjectToJSON(json: any): ThreadObject {
      return ThreadObjectToJSONTyped(json, false);
  }

  export function ThreadObjectToJSONTyped(value?: ThreadObject | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'object': value['object'],
        'created_at': value['createdAt'],
        'metadata': value['metadata'],
    };
}

