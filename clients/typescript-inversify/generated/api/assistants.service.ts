/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { AssistantFileObject } from '../model/assistantFileObject';
import { AssistantObject } from '../model/assistantObject';
import { CreateAssistantFileRequest } from '../model/createAssistantFileRequest';
import { CreateAssistantRequest } from '../model/createAssistantRequest';
import { CreateMessageRequest } from '../model/createMessageRequest';
import { CreateRunRequest } from '../model/createRunRequest';
import { CreateThreadAndRunRequest } from '../model/createThreadAndRunRequest';
import { CreateThreadRequest } from '../model/createThreadRequest';
import { DeleteAssistantFileResponse } from '../model/deleteAssistantFileResponse';
import { DeleteAssistantResponse } from '../model/deleteAssistantResponse';
import { DeleteThreadResponse } from '../model/deleteThreadResponse';
import { ListAssistantFilesResponse } from '../model/listAssistantFilesResponse';
import { ListAssistantsResponse } from '../model/listAssistantsResponse';
import { ListMessageFilesResponse } from '../model/listMessageFilesResponse';
import { ListMessagesResponse } from '../model/listMessagesResponse';
import { ListRunStepsResponse } from '../model/listRunStepsResponse';
import { ListRunsResponse } from '../model/listRunsResponse';
import { MessageFileObject } from '../model/messageFileObject';
import { MessageObject } from '../model/messageObject';
import { ModifyAssistantRequest } from '../model/modifyAssistantRequest';
import { ModifyMessageRequest } from '../model/modifyMessageRequest';
import { ModifyRunRequest } from '../model/modifyRunRequest';
import { ModifyThreadRequest } from '../model/modifyThreadRequest';
import { RunObject } from '../model/runObject';
import { RunStepObject } from '../model/runStepObject';
import { SubmitToolOutputsRunRequest } from '../model/submitToolOutputsRunRequest';
import { ThreadObject } from '../model/threadObject';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class AssistantsService {
    private basePath: string = 'https://api.openai.com/v1';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Cancels a run that is &#x60;in_progress&#x60;.
     * 
     * @param threadId The ID of the thread to which this run belongs.
     * @param runId The ID of the run to cancel.
     
     */
    public cancelRun(threadId: string, runId: string, observe?: 'body', headers?: Headers): Observable<RunObject>;
    public cancelRun(threadId: string, runId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<RunObject>>;
    public cancelRun(threadId: string, runId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (threadId === null || threadId === undefined){
            throw new Error('Required parameter threadId was null or undefined when calling cancelRun.');
        }

        if (runId === null || runId === undefined){
            throw new Error('Required parameter runId was null or undefined when calling cancelRun.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<RunObject>> = this.httpClient.post(`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/runs/${encodeURIComponent(String(runId))}/cancel`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RunObject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create an assistant with a model and instructions.
     * 
     * @param createAssistantRequest 
     
     */
    public createAssistant(createAssistantRequest: CreateAssistantRequest, observe?: 'body', headers?: Headers): Observable<AssistantObject>;
    public createAssistant(createAssistantRequest: CreateAssistantRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<AssistantObject>>;
    public createAssistant(createAssistantRequest: CreateAssistantRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (createAssistantRequest === null || createAssistantRequest === undefined){
            throw new Error('Required parameter createAssistantRequest was null or undefined when calling createAssistant.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<AssistantObject>> = this.httpClient.post(`${this.basePath}/assistants`, createAssistantRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <AssistantObject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
     * 
     * @param assistantId The ID of the assistant for which to create a File. 
     * @param createAssistantFileRequest 
     
     */
    public createAssistantFile(assistantId: string, createAssistantFileRequest: CreateAssistantFileRequest, observe?: 'body', headers?: Headers): Observable<AssistantFileObject>;
    public createAssistantFile(assistantId: string, createAssistantFileRequest: CreateAssistantFileRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<AssistantFileObject>>;
    public createAssistantFile(assistantId: string, createAssistantFileRequest: CreateAssistantFileRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (assistantId === null || assistantId === undefined){
            throw new Error('Required parameter assistantId was null or undefined when calling createAssistantFile.');
        }

        if (createAssistantFileRequest === null || createAssistantFileRequest === undefined){
            throw new Error('Required parameter createAssistantFileRequest was null or undefined when calling createAssistantFile.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<AssistantFileObject>> = this.httpClient.post(`${this.basePath}/assistants/${encodeURIComponent(String(assistantId))}/files`, createAssistantFileRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <AssistantFileObject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create a message.
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to create a message for.
     * @param createMessageRequest 
     
     */
    public createMessage(threadId: string, createMessageRequest: CreateMessageRequest, observe?: 'body', headers?: Headers): Observable<MessageObject>;
    public createMessage(threadId: string, createMessageRequest: CreateMessageRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<MessageObject>>;
    public createMessage(threadId: string, createMessageRequest: CreateMessageRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (threadId === null || threadId === undefined){
            throw new Error('Required parameter threadId was null or undefined when calling createMessage.');
        }

        if (createMessageRequest === null || createMessageRequest === undefined){
            throw new Error('Required parameter createMessageRequest was null or undefined when calling createMessage.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<MessageObject>> = this.httpClient.post(`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/messages`, createMessageRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <MessageObject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create a run.
     * 
     * @param threadId The ID of the thread to run.
     * @param createRunRequest 
     
     */
    public createRun(threadId: string, createRunRequest: CreateRunRequest, observe?: 'body', headers?: Headers): Observable<RunObject>;
    public createRun(threadId: string, createRunRequest: CreateRunRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<RunObject>>;
    public createRun(threadId: string, createRunRequest: CreateRunRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (threadId === null || threadId === undefined){
            throw new Error('Required parameter threadId was null or undefined when calling createRun.');
        }

        if (createRunRequest === null || createRunRequest === undefined){
            throw new Error('Required parameter createRunRequest was null or undefined when calling createRun.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<RunObject>> = this.httpClient.post(`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/runs`, createRunRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RunObject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create a thread.
     * 
     * @param createThreadRequest 
     
     */
    public createThread(createThreadRequest?: CreateThreadRequest, observe?: 'body', headers?: Headers): Observable<ThreadObject>;
    public createThread(createThreadRequest?: CreateThreadRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<ThreadObject>>;
    public createThread(createThreadRequest?: CreateThreadRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ThreadObject>> = this.httpClient.post(`${this.basePath}/threads`, createThreadRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ThreadObject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create a thread and run it in one request.
     * 
     * @param createThreadAndRunRequest 
     
     */
    public createThreadAndRun(createThreadAndRunRequest: CreateThreadAndRunRequest, observe?: 'body', headers?: Headers): Observable<RunObject>;
    public createThreadAndRun(createThreadAndRunRequest: CreateThreadAndRunRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<RunObject>>;
    public createThreadAndRun(createThreadAndRunRequest: CreateThreadAndRunRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (createThreadAndRunRequest === null || createThreadAndRunRequest === undefined){
            throw new Error('Required parameter createThreadAndRunRequest was null or undefined when calling createThreadAndRun.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<RunObject>> = this.httpClient.post(`${this.basePath}/threads/runs`, createThreadAndRunRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RunObject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete an assistant.
     * 
     * @param assistantId The ID of the assistant to delete.
     
     */
    public deleteAssistant(assistantId: string, observe?: 'body', headers?: Headers): Observable<DeleteAssistantResponse>;
    public deleteAssistant(assistantId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<DeleteAssistantResponse>>;
    public deleteAssistant(assistantId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (assistantId === null || assistantId === undefined){
            throw new Error('Required parameter assistantId was null or undefined when calling deleteAssistant.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<DeleteAssistantResponse>> = this.httpClient.delete(`${this.basePath}/assistants/${encodeURIComponent(String(assistantId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <DeleteAssistantResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete an assistant file.
     * 
     * @param assistantId The ID of the assistant that the file belongs to.
     * @param fileId The ID of the file to delete.
     
     */
    public deleteAssistantFile(assistantId: string, fileId: string, observe?: 'body', headers?: Headers): Observable<DeleteAssistantFileResponse>;
    public deleteAssistantFile(assistantId: string, fileId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<DeleteAssistantFileResponse>>;
    public deleteAssistantFile(assistantId: string, fileId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (assistantId === null || assistantId === undefined){
            throw new Error('Required parameter assistantId was null or undefined when calling deleteAssistantFile.');
        }

        if (fileId === null || fileId === undefined){
            throw new Error('Required parameter fileId was null or undefined when calling deleteAssistantFile.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<DeleteAssistantFileResponse>> = this.httpClient.delete(`${this.basePath}/assistants/${encodeURIComponent(String(assistantId))}/files/${encodeURIComponent(String(fileId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <DeleteAssistantFileResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete a thread.
     * 
     * @param threadId The ID of the thread to delete.
     
     */
    public deleteThread(threadId: string, observe?: 'body', headers?: Headers): Observable<DeleteThreadResponse>;
    public deleteThread(threadId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<DeleteThreadResponse>>;
    public deleteThread(threadId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (threadId === null || threadId === undefined){
            throw new Error('Required parameter threadId was null or undefined when calling deleteThread.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<DeleteThreadResponse>> = this.httpClient.delete(`${this.basePath}/threads/${encodeURIComponent(String(threadId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <DeleteThreadResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieves an assistant.
     * 
     * @param assistantId The ID of the assistant to retrieve.
     
     */
    public getAssistant(assistantId: string, observe?: 'body', headers?: Headers): Observable<AssistantObject>;
    public getAssistant(assistantId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<AssistantObject>>;
    public getAssistant(assistantId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (assistantId === null || assistantId === undefined){
            throw new Error('Required parameter assistantId was null or undefined when calling getAssistant.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<AssistantObject>> = this.httpClient.get(`${this.basePath}/assistants/${encodeURIComponent(String(assistantId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <AssistantObject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieves an AssistantFile.
     * 
     * @param assistantId The ID of the assistant who the file belongs to.
     * @param fileId The ID of the file we\&#39;re getting.
     
     */
    public getAssistantFile(assistantId: string, fileId: string, observe?: 'body', headers?: Headers): Observable<AssistantFileObject>;
    public getAssistantFile(assistantId: string, fileId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<AssistantFileObject>>;
    public getAssistantFile(assistantId: string, fileId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (assistantId === null || assistantId === undefined){
            throw new Error('Required parameter assistantId was null or undefined when calling getAssistantFile.');
        }

        if (fileId === null || fileId === undefined){
            throw new Error('Required parameter fileId was null or undefined when calling getAssistantFile.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<AssistantFileObject>> = this.httpClient.get(`${this.basePath}/assistants/${encodeURIComponent(String(assistantId))}/files/${encodeURIComponent(String(fileId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <AssistantFileObject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve a message.
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
     * @param messageId The ID of the message to retrieve.
     
     */
    public getMessage(threadId: string, messageId: string, observe?: 'body', headers?: Headers): Observable<MessageObject>;
    public getMessage(threadId: string, messageId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<MessageObject>>;
    public getMessage(threadId: string, messageId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (threadId === null || threadId === undefined){
            throw new Error('Required parameter threadId was null or undefined when calling getMessage.');
        }

        if (messageId === null || messageId === undefined){
            throw new Error('Required parameter messageId was null or undefined when calling getMessage.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<MessageObject>> = this.httpClient.get(`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/messages/${encodeURIComponent(String(messageId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <MessageObject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieves a message file.
     * 
     * @param threadId The ID of the thread to which the message and File belong.
     * @param messageId The ID of the message the file belongs to.
     * @param fileId The ID of the file being retrieved.
     
     */
    public getMessageFile(threadId: string, messageId: string, fileId: string, observe?: 'body', headers?: Headers): Observable<MessageFileObject>;
    public getMessageFile(threadId: string, messageId: string, fileId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<MessageFileObject>>;
    public getMessageFile(threadId: string, messageId: string, fileId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (threadId === null || threadId === undefined){
            throw new Error('Required parameter threadId was null or undefined when calling getMessageFile.');
        }

        if (messageId === null || messageId === undefined){
            throw new Error('Required parameter messageId was null or undefined when calling getMessageFile.');
        }

        if (fileId === null || fileId === undefined){
            throw new Error('Required parameter fileId was null or undefined when calling getMessageFile.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<MessageFileObject>> = this.httpClient.get(`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/messages/${encodeURIComponent(String(messageId))}/files/${encodeURIComponent(String(fileId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <MessageFileObject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieves a run.
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
     * @param runId The ID of the run to retrieve.
     
     */
    public getRun(threadId: string, runId: string, observe?: 'body', headers?: Headers): Observable<RunObject>;
    public getRun(threadId: string, runId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<RunObject>>;
    public getRun(threadId: string, runId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (threadId === null || threadId === undefined){
            throw new Error('Required parameter threadId was null or undefined when calling getRun.');
        }

        if (runId === null || runId === undefined){
            throw new Error('Required parameter runId was null or undefined when calling getRun.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<RunObject>> = this.httpClient.get(`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/runs/${encodeURIComponent(String(runId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RunObject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieves a run step.
     * 
     * @param threadId The ID of the thread to which the run and run step belongs.
     * @param runId The ID of the run to which the run step belongs.
     * @param stepId The ID of the run step to retrieve.
     
     */
    public getRunStep(threadId: string, runId: string, stepId: string, observe?: 'body', headers?: Headers): Observable<RunStepObject>;
    public getRunStep(threadId: string, runId: string, stepId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<RunStepObject>>;
    public getRunStep(threadId: string, runId: string, stepId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (threadId === null || threadId === undefined){
            throw new Error('Required parameter threadId was null or undefined when calling getRunStep.');
        }

        if (runId === null || runId === undefined){
            throw new Error('Required parameter runId was null or undefined when calling getRunStep.');
        }

        if (stepId === null || stepId === undefined){
            throw new Error('Required parameter stepId was null or undefined when calling getRunStep.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<RunStepObject>> = this.httpClient.get(`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/runs/${encodeURIComponent(String(runId))}/steps/${encodeURIComponent(String(stepId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RunStepObject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieves a thread.
     * 
     * @param threadId The ID of the thread to retrieve.
     
     */
    public getThread(threadId: string, observe?: 'body', headers?: Headers): Observable<ThreadObject>;
    public getThread(threadId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<ThreadObject>>;
    public getThread(threadId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (threadId === null || threadId === undefined){
            throw new Error('Required parameter threadId was null or undefined when calling getThread.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ThreadObject>> = this.httpClient.get(`${this.basePath}/threads/${encodeURIComponent(String(threadId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ThreadObject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Returns a list of assistant files.
     * 
     * @param assistantId The ID of the assistant the file belongs to.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
     
     */
    public listAssistantFiles(assistantId: string, limit?: number, order?: 'asc' | 'desc', after?: string, before?: string, observe?: 'body', headers?: Headers): Observable<ListAssistantFilesResponse>;
    public listAssistantFiles(assistantId: string, limit?: number, order?: 'asc' | 'desc', after?: string, before?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<ListAssistantFilesResponse>>;
    public listAssistantFiles(assistantId: string, limit?: number, order?: 'asc' | 'desc', after?: string, before?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (assistantId === null || assistantId === undefined){
            throw new Error('Required parameter assistantId was null or undefined when calling listAssistantFiles.');
        }

        let queryParameters: string[] = [];
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (order !== undefined) {
            queryParameters.push('order='+encodeURIComponent(String(order)));
        }
        if (after !== undefined) {
            queryParameters.push('after='+encodeURIComponent(String(after)));
        }
        if (before !== undefined) {
            queryParameters.push('before='+encodeURIComponent(String(before)));
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ListAssistantFilesResponse>> = this.httpClient.get(`${this.basePath}/assistants/${encodeURIComponent(String(assistantId))}/files?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ListAssistantFilesResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Returns a list of assistants.
     * 
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
     
     */
    public listAssistants(limit?: number, order?: 'asc' | 'desc', after?: string, before?: string, observe?: 'body', headers?: Headers): Observable<ListAssistantsResponse>;
    public listAssistants(limit?: number, order?: 'asc' | 'desc', after?: string, before?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<ListAssistantsResponse>>;
    public listAssistants(limit?: number, order?: 'asc' | 'desc', after?: string, before?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (order !== undefined) {
            queryParameters.push('order='+encodeURIComponent(String(order)));
        }
        if (after !== undefined) {
            queryParameters.push('after='+encodeURIComponent(String(after)));
        }
        if (before !== undefined) {
            queryParameters.push('before='+encodeURIComponent(String(before)));
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ListAssistantsResponse>> = this.httpClient.get(`${this.basePath}/assistants?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ListAssistantsResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Returns a list of message files.
     * 
     * @param threadId The ID of the thread that the message and files belong to.
     * @param messageId The ID of the message that the files belongs to.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
     
     */
    public listMessageFiles(threadId: string, messageId: string, limit?: number, order?: 'asc' | 'desc', after?: string, before?: string, observe?: 'body', headers?: Headers): Observable<ListMessageFilesResponse>;
    public listMessageFiles(threadId: string, messageId: string, limit?: number, order?: 'asc' | 'desc', after?: string, before?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<ListMessageFilesResponse>>;
    public listMessageFiles(threadId: string, messageId: string, limit?: number, order?: 'asc' | 'desc', after?: string, before?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (threadId === null || threadId === undefined){
            throw new Error('Required parameter threadId was null or undefined when calling listMessageFiles.');
        }

        if (messageId === null || messageId === undefined){
            throw new Error('Required parameter messageId was null or undefined when calling listMessageFiles.');
        }

        let queryParameters: string[] = [];
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (order !== undefined) {
            queryParameters.push('order='+encodeURIComponent(String(order)));
        }
        if (after !== undefined) {
            queryParameters.push('after='+encodeURIComponent(String(after)));
        }
        if (before !== undefined) {
            queryParameters.push('before='+encodeURIComponent(String(before)));
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ListMessageFilesResponse>> = this.httpClient.get(`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/messages/${encodeURIComponent(String(messageId))}/files?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ListMessageFilesResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Returns a list of messages for a given thread.
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) the messages belong to.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
     * @param runId Filter messages by the run ID that generated them. 
     
     */
    public listMessages(threadId: string, limit?: number, order?: 'asc' | 'desc', after?: string, before?: string, runId?: string, observe?: 'body', headers?: Headers): Observable<ListMessagesResponse>;
    public listMessages(threadId: string, limit?: number, order?: 'asc' | 'desc', after?: string, before?: string, runId?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<ListMessagesResponse>>;
    public listMessages(threadId: string, limit?: number, order?: 'asc' | 'desc', after?: string, before?: string, runId?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (threadId === null || threadId === undefined){
            throw new Error('Required parameter threadId was null or undefined when calling listMessages.');
        }

        let queryParameters: string[] = [];
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (order !== undefined) {
            queryParameters.push('order='+encodeURIComponent(String(order)));
        }
        if (after !== undefined) {
            queryParameters.push('after='+encodeURIComponent(String(after)));
        }
        if (before !== undefined) {
            queryParameters.push('before='+encodeURIComponent(String(before)));
        }
        if (runId !== undefined) {
            queryParameters.push('runId='+encodeURIComponent(String(runId)));
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ListMessagesResponse>> = this.httpClient.get(`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/messages?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ListMessagesResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Returns a list of run steps belonging to a run.
     * 
     * @param threadId The ID of the thread the run and run steps belong to.
     * @param runId The ID of the run the run steps belong to.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
     
     */
    public listRunSteps(threadId: string, runId: string, limit?: number, order?: 'asc' | 'desc', after?: string, before?: string, observe?: 'body', headers?: Headers): Observable<ListRunStepsResponse>;
    public listRunSteps(threadId: string, runId: string, limit?: number, order?: 'asc' | 'desc', after?: string, before?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<ListRunStepsResponse>>;
    public listRunSteps(threadId: string, runId: string, limit?: number, order?: 'asc' | 'desc', after?: string, before?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (threadId === null || threadId === undefined){
            throw new Error('Required parameter threadId was null or undefined when calling listRunSteps.');
        }

        if (runId === null || runId === undefined){
            throw new Error('Required parameter runId was null or undefined when calling listRunSteps.');
        }

        let queryParameters: string[] = [];
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (order !== undefined) {
            queryParameters.push('order='+encodeURIComponent(String(order)));
        }
        if (after !== undefined) {
            queryParameters.push('after='+encodeURIComponent(String(after)));
        }
        if (before !== undefined) {
            queryParameters.push('before='+encodeURIComponent(String(before)));
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ListRunStepsResponse>> = this.httpClient.get(`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/runs/${encodeURIComponent(String(runId))}/steps?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ListRunStepsResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Returns a list of runs belonging to a thread.
     * 
     * @param threadId The ID of the thread the run belongs to.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
     
     */
    public listRuns(threadId: string, limit?: number, order?: 'asc' | 'desc', after?: string, before?: string, observe?: 'body', headers?: Headers): Observable<ListRunsResponse>;
    public listRuns(threadId: string, limit?: number, order?: 'asc' | 'desc', after?: string, before?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<ListRunsResponse>>;
    public listRuns(threadId: string, limit?: number, order?: 'asc' | 'desc', after?: string, before?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (threadId === null || threadId === undefined){
            throw new Error('Required parameter threadId was null or undefined when calling listRuns.');
        }

        let queryParameters: string[] = [];
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (order !== undefined) {
            queryParameters.push('order='+encodeURIComponent(String(order)));
        }
        if (after !== undefined) {
            queryParameters.push('after='+encodeURIComponent(String(after)));
        }
        if (before !== undefined) {
            queryParameters.push('before='+encodeURIComponent(String(before)));
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ListRunsResponse>> = this.httpClient.get(`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/runs?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ListRunsResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Modifies an assistant.
     * 
     * @param assistantId The ID of the assistant to modify.
     * @param modifyAssistantRequest 
     
     */
    public modifyAssistant(assistantId: string, modifyAssistantRequest: ModifyAssistantRequest, observe?: 'body', headers?: Headers): Observable<AssistantObject>;
    public modifyAssistant(assistantId: string, modifyAssistantRequest: ModifyAssistantRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<AssistantObject>>;
    public modifyAssistant(assistantId: string, modifyAssistantRequest: ModifyAssistantRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (assistantId === null || assistantId === undefined){
            throw new Error('Required parameter assistantId was null or undefined when calling modifyAssistant.');
        }

        if (modifyAssistantRequest === null || modifyAssistantRequest === undefined){
            throw new Error('Required parameter modifyAssistantRequest was null or undefined when calling modifyAssistant.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<AssistantObject>> = this.httpClient.post(`${this.basePath}/assistants/${encodeURIComponent(String(assistantId))}`, modifyAssistantRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <AssistantObject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Modifies a message.
     * 
     * @param threadId The ID of the thread to which this message belongs.
     * @param messageId The ID of the message to modify.
     * @param modifyMessageRequest 
     
     */
    public modifyMessage(threadId: string, messageId: string, modifyMessageRequest: ModifyMessageRequest, observe?: 'body', headers?: Headers): Observable<MessageObject>;
    public modifyMessage(threadId: string, messageId: string, modifyMessageRequest: ModifyMessageRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<MessageObject>>;
    public modifyMessage(threadId: string, messageId: string, modifyMessageRequest: ModifyMessageRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (threadId === null || threadId === undefined){
            throw new Error('Required parameter threadId was null or undefined when calling modifyMessage.');
        }

        if (messageId === null || messageId === undefined){
            throw new Error('Required parameter messageId was null or undefined when calling modifyMessage.');
        }

        if (modifyMessageRequest === null || modifyMessageRequest === undefined){
            throw new Error('Required parameter modifyMessageRequest was null or undefined when calling modifyMessage.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<MessageObject>> = this.httpClient.post(`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/messages/${encodeURIComponent(String(messageId))}`, modifyMessageRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <MessageObject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Modifies a run.
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
     * @param runId The ID of the run to modify.
     * @param modifyRunRequest 
     
     */
    public modifyRun(threadId: string, runId: string, modifyRunRequest: ModifyRunRequest, observe?: 'body', headers?: Headers): Observable<RunObject>;
    public modifyRun(threadId: string, runId: string, modifyRunRequest: ModifyRunRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<RunObject>>;
    public modifyRun(threadId: string, runId: string, modifyRunRequest: ModifyRunRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (threadId === null || threadId === undefined){
            throw new Error('Required parameter threadId was null or undefined when calling modifyRun.');
        }

        if (runId === null || runId === undefined){
            throw new Error('Required parameter runId was null or undefined when calling modifyRun.');
        }

        if (modifyRunRequest === null || modifyRunRequest === undefined){
            throw new Error('Required parameter modifyRunRequest was null or undefined when calling modifyRun.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<RunObject>> = this.httpClient.post(`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/runs/${encodeURIComponent(String(runId))}`, modifyRunRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RunObject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Modifies a thread.
     * 
     * @param threadId The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.
     * @param modifyThreadRequest 
     
     */
    public modifyThread(threadId: string, modifyThreadRequest: ModifyThreadRequest, observe?: 'body', headers?: Headers): Observable<ThreadObject>;
    public modifyThread(threadId: string, modifyThreadRequest: ModifyThreadRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<ThreadObject>>;
    public modifyThread(threadId: string, modifyThreadRequest: ModifyThreadRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (threadId === null || threadId === undefined){
            throw new Error('Required parameter threadId was null or undefined when calling modifyThread.');
        }

        if (modifyThreadRequest === null || modifyThreadRequest === undefined){
            throw new Error('Required parameter modifyThreadRequest was null or undefined when calling modifyThread.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ThreadObject>> = this.httpClient.post(`${this.basePath}/threads/${encodeURIComponent(String(threadId))}`, modifyThreadRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ThreadObject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they\&#39;re all completed. All outputs must be submitted in a single request. 
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
     * @param runId The ID of the run that requires the tool output submission.
     * @param submitToolOutputsRunRequest 
     
     */
    public submitToolOuputsToRun(threadId: string, runId: string, submitToolOutputsRunRequest: SubmitToolOutputsRunRequest, observe?: 'body', headers?: Headers): Observable<RunObject>;
    public submitToolOuputsToRun(threadId: string, runId: string, submitToolOutputsRunRequest: SubmitToolOutputsRunRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<RunObject>>;
    public submitToolOuputsToRun(threadId: string, runId: string, submitToolOutputsRunRequest: SubmitToolOutputsRunRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (threadId === null || threadId === undefined){
            throw new Error('Required parameter threadId was null or undefined when calling submitToolOuputsToRun.');
        }

        if (runId === null || runId === undefined){
            throw new Error('Required parameter runId was null or undefined when calling submitToolOuputsToRun.');
        }

        if (submitToolOutputsRunRequest === null || submitToolOutputsRunRequest === undefined){
            throw new Error('Required parameter submitToolOutputsRunRequest was null or undefined when calling submitToolOuputsToRun.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<RunObject>> = this.httpClient.post(`${this.basePath}/threads/${encodeURIComponent(String(threadId))}/runs/${encodeURIComponent(String(runId))}/submit_tool_outputs`, submitToolOutputsRunRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RunObject>(httpResponse.response))
               );
        }
        return response;
    }

}
