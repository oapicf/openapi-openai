/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { DeleteFileResponse } from '../model/deleteFileResponse';
import { ListFilesResponse } from '../model/listFilesResponse';
import { OpenAIFile } from '../model/openAIFile';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class FilesService {
    private basePath: string = 'https://api.openai.com/v1';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports &#x60;.jsonl&#x60; files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. 
     * 
     * @param file The File object (not file name) to be uploaded. 
     * @param purpose The intended purpose of the uploaded file.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tuning) and \\\&quot;assistants\\\&quot; for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning. 
     
     */
    public createFile(file: Blob, purpose: string, observe?: 'body', headers?: Headers): Observable<OpenAIFile>;
    public createFile(file: Blob, purpose: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<OpenAIFile>>;
    public createFile(file: Blob, purpose: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (file === null || file === undefined){
            throw new Error('Required parameter file was null or undefined when calling createFile.');
        }

        if (purpose === null || purpose === undefined){
            throw new Error('Required parameter purpose was null or undefined when calling createFile.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        let formData: FormData = new FormData();
        headers['Content-Type'] = 'multipart/form-data';
        if (file !== undefined) {
            formData.append('file', <any>file);
        }
        if (purpose !== undefined) {
            formData.append('purpose', <any>purpose);
        }

        const response: Observable<HttpResponse<OpenAIFile>> = this.httpClient.post(`${this.basePath}/files`, formData, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <OpenAIFile>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete a file.
     * 
     * @param fileId The ID of the file to use for this request.
     
     */
    public deleteFile(fileId: string, observe?: 'body', headers?: Headers): Observable<DeleteFileResponse>;
    public deleteFile(fileId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<DeleteFileResponse>>;
    public deleteFile(fileId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (fileId === null || fileId === undefined){
            throw new Error('Required parameter fileId was null or undefined when calling deleteFile.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<DeleteFileResponse>> = this.httpClient.delete(`${this.basePath}/files/${encodeURIComponent(String(fileId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <DeleteFileResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Returns the contents of the specified file.
     * 
     * @param fileId The ID of the file to use for this request.
     
     */
    public downloadFile(fileId: string, observe?: 'body', headers?: Headers): Observable<string>;
    public downloadFile(fileId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public downloadFile(fileId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (fileId === null || fileId === undefined){
            throw new Error('Required parameter fileId was null or undefined when calling downloadFile.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.basePath}/files/${encodeURIComponent(String(fileId))}/content`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <string>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Returns a list of files that belong to the user\&#39;s organization.
     * 
     * @param purpose Only return files with the given purpose.
     
     */
    public listFiles(purpose?: string, observe?: 'body', headers?: Headers): Observable<ListFilesResponse>;
    public listFiles(purpose?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<ListFilesResponse>>;
    public listFiles(purpose?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (purpose !== undefined) {
            queryParameters.push('purpose='+encodeURIComponent(String(purpose)));
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ListFilesResponse>> = this.httpClient.get(`${this.basePath}/files?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ListFilesResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Returns information about a specific file.
     * 
     * @param fileId The ID of the file to use for this request.
     
     */
    public retrieveFile(fileId: string, observe?: 'body', headers?: Headers): Observable<OpenAIFile>;
    public retrieveFile(fileId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<OpenAIFile>>;
    public retrieveFile(fileId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (fileId === null || fileId === undefined){
            throw new Error('Required parameter fileId was null or undefined when calling retrieveFile.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<OpenAIFile>> = this.httpClient.get(`${this.basePath}/files/${encodeURIComponent(String(fileId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <OpenAIFile>(httpResponse.response))
               );
        }
        return response;
    }

}
