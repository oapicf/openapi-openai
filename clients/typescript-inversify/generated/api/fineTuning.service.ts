/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { CreateFineTuningJobRequest } from '../model/createFineTuningJobRequest';
import { FineTuningJob } from '../model/fineTuningJob';
import { ListFineTuningJobCheckpointsResponse } from '../model/listFineTuningJobCheckpointsResponse';
import { ListFineTuningJobEventsResponse } from '../model/listFineTuningJobEventsResponse';
import { ListPaginatedFineTuningJobsResponse } from '../model/listPaginatedFineTuningJobsResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class FineTuningService {
    private basePath: string = 'https://api.openai.com/v1';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Immediately cancel a fine-tune job. 
     * 
     * @param fineTuningJobId The ID of the fine-tuning job to cancel. 
     
     */
    public cancelFineTuningJob(fineTuningJobId: string, observe?: 'body', headers?: Headers): Observable<FineTuningJob>;
    public cancelFineTuningJob(fineTuningJobId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<FineTuningJob>>;
    public cancelFineTuningJob(fineTuningJobId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (fineTuningJobId === null || fineTuningJobId === undefined){
            throw new Error('Required parameter fineTuningJobId was null or undefined when calling cancelFineTuningJob.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<FineTuningJob>> = this.httpClient.post(`${this.basePath}/fine_tuning/jobs/${encodeURIComponent(String(fineTuningJobId))}/cancel`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <FineTuningJob>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
     * 
     * @param createFineTuningJobRequest 
     
     */
    public createFineTuningJob(createFineTuningJobRequest: CreateFineTuningJobRequest, observe?: 'body', headers?: Headers): Observable<FineTuningJob>;
    public createFineTuningJob(createFineTuningJobRequest: CreateFineTuningJobRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<FineTuningJob>>;
    public createFineTuningJob(createFineTuningJobRequest: CreateFineTuningJobRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (createFineTuningJobRequest === null || createFineTuningJobRequest === undefined){
            throw new Error('Required parameter createFineTuningJobRequest was null or undefined when calling createFineTuningJob.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<FineTuningJob>> = this.httpClient.post(`${this.basePath}/fine_tuning/jobs`, createFineTuningJobRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <FineTuningJob>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get status updates for a fine-tuning job. 
     * 
     * @param fineTuningJobId The ID of the fine-tuning job to get events for. 
     * @param after Identifier for the last event from the previous pagination request.
     * @param limit Number of events to retrieve.
     
     */
    public listFineTuningEvents(fineTuningJobId: string, after?: string, limit?: number, observe?: 'body', headers?: Headers): Observable<ListFineTuningJobEventsResponse>;
    public listFineTuningEvents(fineTuningJobId: string, after?: string, limit?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<ListFineTuningJobEventsResponse>>;
    public listFineTuningEvents(fineTuningJobId: string, after?: string, limit?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (fineTuningJobId === null || fineTuningJobId === undefined){
            throw new Error('Required parameter fineTuningJobId was null or undefined when calling listFineTuningEvents.');
        }

        let queryParameters: string[] = [];
        if (after !== undefined) {
            queryParameters.push('after='+encodeURIComponent(String(after)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ListFineTuningJobEventsResponse>> = this.httpClient.get(`${this.basePath}/fine_tuning/jobs/${encodeURIComponent(String(fineTuningJobId))}/events?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ListFineTuningJobEventsResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * List checkpoints for a fine-tuning job. 
     * 
     * @param fineTuningJobId The ID of the fine-tuning job to get checkpoints for. 
     * @param after Identifier for the last checkpoint ID from the previous pagination request.
     * @param limit Number of checkpoints to retrieve.
     
     */
    public listFineTuningJobCheckpoints(fineTuningJobId: string, after?: string, limit?: number, observe?: 'body', headers?: Headers): Observable<ListFineTuningJobCheckpointsResponse>;
    public listFineTuningJobCheckpoints(fineTuningJobId: string, after?: string, limit?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<ListFineTuningJobCheckpointsResponse>>;
    public listFineTuningJobCheckpoints(fineTuningJobId: string, after?: string, limit?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (fineTuningJobId === null || fineTuningJobId === undefined){
            throw new Error('Required parameter fineTuningJobId was null or undefined when calling listFineTuningJobCheckpoints.');
        }

        let queryParameters: string[] = [];
        if (after !== undefined) {
            queryParameters.push('after='+encodeURIComponent(String(after)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ListFineTuningJobCheckpointsResponse>> = this.httpClient.get(`${this.basePath}/fine_tuning/jobs/${encodeURIComponent(String(fineTuningJobId))}/checkpoints?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ListFineTuningJobCheckpointsResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * List your organization\&#39;s fine-tuning jobs 
     * 
     * @param after Identifier for the last job from the previous pagination request.
     * @param limit Number of fine-tuning jobs to retrieve.
     
     */
    public listPaginatedFineTuningJobs(after?: string, limit?: number, observe?: 'body', headers?: Headers): Observable<ListPaginatedFineTuningJobsResponse>;
    public listPaginatedFineTuningJobs(after?: string, limit?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<ListPaginatedFineTuningJobsResponse>>;
    public listPaginatedFineTuningJobs(after?: string, limit?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (after !== undefined) {
            queryParameters.push('after='+encodeURIComponent(String(after)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ListPaginatedFineTuningJobsResponse>> = this.httpClient.get(`${this.basePath}/fine_tuning/jobs?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ListPaginatedFineTuningJobsResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
     * 
     * @param fineTuningJobId The ID of the fine-tuning job. 
     
     */
    public retrieveFineTuningJob(fineTuningJobId: string, observe?: 'body', headers?: Headers): Observable<FineTuningJob>;
    public retrieveFineTuningJob(fineTuningJobId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<FineTuningJob>>;
    public retrieveFineTuningJob(fineTuningJobId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (fineTuningJobId === null || fineTuningJobId === undefined){
            throw new Error('Required parameter fineTuningJobId was null or undefined when calling retrieveFineTuningJob.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<FineTuningJob>> = this.httpClient.get(`${this.basePath}/fine_tuning/jobs/${encodeURIComponent(String(fineTuningJobId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <FineTuningJob>(httpResponse.response))
               );
        }
        return response;
    }

}
