/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { CreateImageEditRequestModel } from '../model/createImageEditRequestModel';
import { CreateImageRequest } from '../model/createImageRequest';
import { ImagesResponse } from '../model/imagesResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ImagesService {
    private basePath: string = 'https://api.openai.com/v1';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Creates an image given a prompt.
     * 
     * @param createImageRequest 
     
     */
    public createImage(createImageRequest: CreateImageRequest, observe?: 'body', headers?: Headers): Observable<ImagesResponse>;
    public createImage(createImageRequest: CreateImageRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<ImagesResponse>>;
    public createImage(createImageRequest: CreateImageRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (createImageRequest === null || createImageRequest === undefined){
            throw new Error('Required parameter createImageRequest was null or undefined when calling createImage.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ImagesResponse>> = this.httpClient.post(`${this.basePath}/images/generations`, createImageRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ImagesResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Creates an edited or extended image given an original image and a prompt.
     * 
     * @param image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
     * @param prompt A text description of the desired image(s). The maximum length is 1000 characters.
     * @param mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.
     * @param model 
     * @param n The number of images to generate. Must be between 1 and 10.
     * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
     * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated.
     * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
     
     */
    public createImageEdit(image: Blob, prompt: string, mask?: Blob, model?: CreateImageEditRequestModel, n?: number, size?: string, responseFormat?: string, user?: string, observe?: 'body', headers?: Headers): Observable<ImagesResponse>;
    public createImageEdit(image: Blob, prompt: string, mask?: Blob, model?: CreateImageEditRequestModel, n?: number, size?: string, responseFormat?: string, user?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<ImagesResponse>>;
    public createImageEdit(image: Blob, prompt: string, mask?: Blob, model?: CreateImageEditRequestModel, n?: number, size?: string, responseFormat?: string, user?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (image === null || image === undefined){
            throw new Error('Required parameter image was null or undefined when calling createImageEdit.');
        }

        if (prompt === null || prompt === undefined){
            throw new Error('Required parameter prompt was null or undefined when calling createImageEdit.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        let formData: FormData = new FormData();
        headers['Content-Type'] = 'multipart/form-data';
        if (image !== undefined) {
            formData.append('image', <any>image);
        }
        if (prompt !== undefined) {
            formData.append('prompt', <any>prompt);
        }
        if (mask !== undefined) {
            formData.append('mask', <any>mask);
        }
        if (model !== undefined) {
            formData.append('model', <any>model);
        }
        if (n !== undefined) {
            formData.append('n', <any>n);
        }
        if (size !== undefined) {
            formData.append('size', <any>size);
        }
        if (responseFormat !== undefined) {
            formData.append('response_format', <any>responseFormat);
        }
        if (user !== undefined) {
            formData.append('user', <any>user);
        }

        const response: Observable<HttpResponse<ImagesResponse>> = this.httpClient.post(`${this.basePath}/images/edits`, formData, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ImagesResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Creates a variation of a given image.
     * 
     * @param image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
     * @param model 
     * @param n The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported.
     * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated.
     * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
     * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
     
     */
    public createImageVariation(image: Blob, model?: CreateImageEditRequestModel, n?: number, responseFormat?: string, size?: string, user?: string, observe?: 'body', headers?: Headers): Observable<ImagesResponse>;
    public createImageVariation(image: Blob, model?: CreateImageEditRequestModel, n?: number, responseFormat?: string, size?: string, user?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<ImagesResponse>>;
    public createImageVariation(image: Blob, model?: CreateImageEditRequestModel, n?: number, responseFormat?: string, size?: string, user?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (image === null || image === undefined){
            throw new Error('Required parameter image was null or undefined when calling createImageVariation.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        let formData: FormData = new FormData();
        headers['Content-Type'] = 'multipart/form-data';
        if (image !== undefined) {
            formData.append('image', <any>image);
        }
        if (model !== undefined) {
            formData.append('model', <any>model);
        }
        if (n !== undefined) {
            formData.append('n', <any>n);
        }
        if (responseFormat !== undefined) {
            formData.append('response_format', <any>responseFormat);
        }
        if (size !== undefined) {
            formData.append('size', <any>size);
        }
        if (user !== undefined) {
            formData.append('user', <any>user);
        }

        const response: Observable<HttpResponse<ImagesResponse>> = this.httpClient.post(`${this.basePath}/images/variations`, formData, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ImagesResponse>(httpResponse.response))
               );
        }
        return response;
    }

}
