/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { DeleteModelResponse } from '../model/deleteModelResponse';
import { ListModelsResponse } from '../model/listModelsResponse';
import { Model } from '../model/model';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ModelsService {
    private basePath: string = 'https://api.openai.com/v1';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
     * 
     * @param model The model to delete
     
     */
    public deleteModel(model: string, observe?: 'body', headers?: Headers): Observable<DeleteModelResponse>;
    public deleteModel(model: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<DeleteModelResponse>>;
    public deleteModel(model: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (model === null || model === undefined){
            throw new Error('Required parameter model was null or undefined when calling deleteModel.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<DeleteModelResponse>> = this.httpClient.delete(`${this.basePath}/models/${encodeURIComponent(String(model))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <DeleteModelResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Lists the currently available models, and provides basic information about each one such as the owner and availability.
     * 
     
     */
    public listModels(observe?: 'body', headers?: Headers): Observable<ListModelsResponse>;
    public listModels(observe?: 'response', headers?: Headers): Observable<HttpResponse<ListModelsResponse>>;
    public listModels(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ListModelsResponse>> = this.httpClient.get(`${this.basePath}/models`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ListModelsResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
     * 
     * @param model The ID of the model to use for this request
     
     */
    public retrieveModel(model: string, observe?: 'body', headers?: Headers): Observable<Model>;
    public retrieveModel(model: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Model>>;
    public retrieveModel(model: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (model === null || model === undefined){
            throw new Error('Required parameter model was null or undefined when calling retrieveModel.');
        }

        // authentication (ApiKeyAuth) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Model>> = this.httpClient.get(`${this.basePath}/models/${encodeURIComponent(String(model))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Model>(httpResponse.response))
               );
        }
        return response;
    }

}
