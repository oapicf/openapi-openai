/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ChatCompletionFunctions } from './chatCompletionFunctions';
import { ChatCompletionRequestMessage } from './chatCompletionRequestMessage';
import { ChatCompletionTool } from './chatCompletionTool';
import { ChatCompletionToolChoiceOption } from './chatCompletionToolChoiceOption';
import { CreateChatCompletionRequestFunctionCall } from './createChatCompletionRequestFunctionCall';
import { CreateChatCompletionRequestModel } from './createChatCompletionRequestModel';
import { CreateChatCompletionRequestResponseFormat } from './createChatCompletionRequestResponseFormat';
import { CreateChatCompletionRequestStop } from './createChatCompletionRequestStop';

export class CreateChatCompletionRequest {
    /**
    * A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
    */
    'messages': Array<ChatCompletionRequestMessage>;
    'model': CreateChatCompletionRequestModel;
    /**
    * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model\'s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
    */
    'frequencyPenalty'?: number | null = 0;
    /**
    * Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. 
    */
    'logitBias'?: { [key: string]: number; } | null;
    /**
    * Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.
    */
    'logprobs'?: boolean | null = false;
    /**
    * An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
    */
    'topLogprobs'?: number | null;
    /**
    * The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.  The total length of input tokens and generated tokens is limited by the model\'s context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. 
    */
    'maxTokens'?: number | null;
    /**
    * How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
    */
    'n'?: number | null = 1;
    /**
    * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model\'s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
    */
    'presencePenalty'?: number | null = 0;
    'responseFormat'?: CreateChatCompletionRequestResponseFormat;
    /**
    * This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend. 
    */
    'seed'?: number | null;
    'stop'?: CreateChatCompletionRequestStop;
    /**
    * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). 
    */
    'stream'?: boolean | null = false;
    /**
    * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
    */
    'temperature'?: number | null = 1;
    /**
    * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
    */
    'topP'?: number | null = 1;
    /**
    * A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported. 
    */
    'tools'?: Array<ChatCompletionTool>;
    'toolChoice'?: ChatCompletionToolChoiceOption;
    /**
    * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    */
    'user'?: string;
    'functionCall'?: CreateChatCompletionRequestFunctionCall;
    /**
    * Deprecated in favor of `tools`.  A list of functions the model may generate JSON inputs for. 
    */
    'functions'?: Array<ChatCompletionFunctions>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "messages",
            "baseName": "messages",
            "type": "Array<ChatCompletionRequestMessage>"
        },
        {
            "name": "model",
            "baseName": "model",
            "type": "CreateChatCompletionRequestModel"
        },
        {
            "name": "frequencyPenalty",
            "baseName": "frequency_penalty",
            "type": "number"
        },
        {
            "name": "logitBias",
            "baseName": "logit_bias",
            "type": "{ [key: string]: number; }"
        },
        {
            "name": "logprobs",
            "baseName": "logprobs",
            "type": "boolean"
        },
        {
            "name": "topLogprobs",
            "baseName": "top_logprobs",
            "type": "number"
        },
        {
            "name": "maxTokens",
            "baseName": "max_tokens",
            "type": "number"
        },
        {
            "name": "n",
            "baseName": "n",
            "type": "number"
        },
        {
            "name": "presencePenalty",
            "baseName": "presence_penalty",
            "type": "number"
        },
        {
            "name": "responseFormat",
            "baseName": "response_format",
            "type": "CreateChatCompletionRequestResponseFormat"
        },
        {
            "name": "seed",
            "baseName": "seed",
            "type": "number"
        },
        {
            "name": "stop",
            "baseName": "stop",
            "type": "CreateChatCompletionRequestStop"
        },
        {
            "name": "stream",
            "baseName": "stream",
            "type": "boolean"
        },
        {
            "name": "temperature",
            "baseName": "temperature",
            "type": "number"
        },
        {
            "name": "topP",
            "baseName": "top_p",
            "type": "number"
        },
        {
            "name": "tools",
            "baseName": "tools",
            "type": "Array<ChatCompletionTool>"
        },
        {
            "name": "toolChoice",
            "baseName": "tool_choice",
            "type": "ChatCompletionToolChoiceOption"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "string"
        },
        {
            "name": "functionCall",
            "baseName": "function_call",
            "type": "CreateChatCompletionRequestFunctionCall"
        },
        {
            "name": "functions",
            "baseName": "functions",
            "type": "Array<ChatCompletionFunctions>"
        }    ];

    static getAttributeTypeMap() {
        return CreateChatCompletionRequest.attributeTypeMap;
    }
}

