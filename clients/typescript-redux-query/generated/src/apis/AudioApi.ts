// tslint:disable
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    CreateSpeechRequest,
    CreateSpeechRequestFromJSON,
    CreateSpeechRequestToJSON,
    CreateTranscription200Response,
    CreateTranscription200ResponseFromJSON,
    CreateTranscription200ResponseToJSON,
    CreateTranscriptionRequestModel,
    CreateTranscriptionRequestModelFromJSON,
    CreateTranscriptionRequestModelToJSON,
    CreateTranslation200Response,
    CreateTranslation200ResponseFromJSON,
    CreateTranslation200ResponseToJSON,
} from '../models';

export interface CreateSpeechRequest {
    createSpeechRequest: CreateSpeechRequest;
}

export interface CreateTranscriptionRequest {
    file: Blob;
    model: CreateTranscriptionRequestModel;
    language?: string;
    prompt?: string;
    responseFormat?: CreateTranscriptionResponseFormatEnum;
    temperature?: number;
    timestampGranularities?: Array<CreateTranscriptionTimestampGranularitiesEnum>;
}

export interface CreateTranslationRequest {
    file: Blob;
    model: CreateTranscriptionRequestModel;
    prompt?: string;
    responseFormat?: string;
    temperature?: number;
}


/**
 * Generates audio from the input text.
 */
function createSpeechRaw<T>(requestParameters: CreateSpeechRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.createSpeechRequest === null || requestParameters.createSpeechRequest === undefined) {
        throw new runtime.RequiredError('createSpeechRequest','Required parameter requestParameters.createSpeechRequest was null or undefined when calling createSpeech.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/audio/speech`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || CreateSpeechRequestToJSON(requestParameters.createSpeechRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Generates audio from the input text.
*/
export function createSpeech<T>(requestParameters: CreateSpeechRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return createSpeechRaw(requestParameters, requestConfig);
}

/**
 * Transcribes audio into the input language.
 */
function createTranscriptionRaw<T>(requestParameters: CreateTranscriptionRequest, requestConfig: runtime.TypedQueryConfig<T, CreateTranscription200Response> = {}): QueryConfig<T> {
    if (requestParameters.file === null || requestParameters.file === undefined) {
        throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling createTranscription.');
    }

    if (requestParameters.model === null || requestParameters.model === undefined) {
        throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling createTranscription.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const formData = new FormData();
    if (requestParameters.file !== undefined) {
        formData.append('file', requestParameters.file as any);
    }

    if (requestParameters.model !== undefined) {
        formData.append('model', requestParameters.model as any);
    }

    if (requestParameters.language !== undefined) {
        formData.append('language', requestParameters.language as any);
    }

    if (requestParameters.prompt !== undefined) {
        formData.append('prompt', requestParameters.prompt as any);
    }

    if (requestParameters.responseFormat !== undefined) {
        formData.append('response_format', requestParameters.responseFormat as any);
    }

    if (requestParameters.temperature !== undefined) {
        formData.append('temperature', requestParameters.temperature as any);
    }

    if (requestParameters.timestampGranularities) {
        formData.append('timestamp_granularities[]', requestParameters.timestampGranularities?.join(runtime.COLLECTION_FORMATS["csv"]));
    }

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/audio/transcriptions`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: formData,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CreateTranscription200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Transcribes audio into the input language.
*/
export function createTranscription<T>(requestParameters: CreateTranscriptionRequest, requestConfig?: runtime.TypedQueryConfig<T, CreateTranscription200Response>): QueryConfig<T> {
    return createTranscriptionRaw(requestParameters, requestConfig);
}

/**
 * Translates audio into English.
 */
function createTranslationRaw<T>(requestParameters: CreateTranslationRequest, requestConfig: runtime.TypedQueryConfig<T, CreateTranslation200Response> = {}): QueryConfig<T> {
    if (requestParameters.file === null || requestParameters.file === undefined) {
        throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling createTranslation.');
    }

    if (requestParameters.model === null || requestParameters.model === undefined) {
        throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling createTranslation.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const formData = new FormData();
    if (requestParameters.file !== undefined) {
        formData.append('file', requestParameters.file as any);
    }

    if (requestParameters.model !== undefined) {
        formData.append('model', requestParameters.model as any);
    }

    if (requestParameters.prompt !== undefined) {
        formData.append('prompt', requestParameters.prompt as any);
    }

    if (requestParameters.responseFormat !== undefined) {
        formData.append('response_format', requestParameters.responseFormat as any);
    }

    if (requestParameters.temperature !== undefined) {
        formData.append('temperature', requestParameters.temperature as any);
    }

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/audio/translations`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: formData,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CreateTranslation200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Translates audio into English.
*/
export function createTranslation<T>(requestParameters: CreateTranslationRequest, requestConfig?: runtime.TypedQueryConfig<T, CreateTranslation200Response>): QueryConfig<T> {
    return createTranslationRaw(requestParameters, requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum CreateTranscriptionResponseFormatEnum {
    Json = 'json',
    Text = 'text',
    Srt = 'srt',
    VerboseJson = 'verbose_json',
    Vtt = 'vtt'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateTranscriptionTimestampGranularitiesEnum {
    Word = 'word',
    Segment = 'segment'
}
