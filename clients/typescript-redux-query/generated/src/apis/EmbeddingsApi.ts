// tslint:disable
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    CreateEmbeddingRequest,
    CreateEmbeddingRequestFromJSON,
    CreateEmbeddingRequestToJSON,
    CreateEmbeddingResponse,
    CreateEmbeddingResponseFromJSON,
    CreateEmbeddingResponseToJSON,
} from '../models';

export interface CreateEmbeddingRequest {
    createEmbeddingRequest: CreateEmbeddingRequest;
}


/**
 * Creates an embedding vector representing the input text.
 */
function createEmbeddingRaw<T>(requestParameters: CreateEmbeddingRequest, requestConfig: runtime.TypedQueryConfig<T, CreateEmbeddingResponse> = {}): QueryConfig<T> {
    if (requestParameters.createEmbeddingRequest === null || requestParameters.createEmbeddingRequest === undefined) {
        throw new runtime.RequiredError('createEmbeddingRequest','Required parameter requestParameters.createEmbeddingRequest was null or undefined when calling createEmbedding.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/embeddings`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || CreateEmbeddingRequestToJSON(requestParameters.createEmbeddingRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CreateEmbeddingResponseFromJSON(body), text);
    }

    return config;
}

/**
* Creates an embedding vector representing the input text.
*/
export function createEmbedding<T>(requestParameters: CreateEmbeddingRequest, requestConfig?: runtime.TypedQueryConfig<T, CreateEmbeddingResponse>): QueryConfig<T> {
    return createEmbeddingRaw(requestParameters, requestConfig);
}

