// tslint:disable
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    CreateFineTuningJobRequest,
    CreateFineTuningJobRequestFromJSON,
    CreateFineTuningJobRequestToJSON,
    FineTuningJob,
    FineTuningJobFromJSON,
    FineTuningJobToJSON,
    ListFineTuningJobCheckpointsResponse,
    ListFineTuningJobCheckpointsResponseFromJSON,
    ListFineTuningJobCheckpointsResponseToJSON,
    ListFineTuningJobEventsResponse,
    ListFineTuningJobEventsResponseFromJSON,
    ListFineTuningJobEventsResponseToJSON,
    ListPaginatedFineTuningJobsResponse,
    ListPaginatedFineTuningJobsResponseFromJSON,
    ListPaginatedFineTuningJobsResponseToJSON,
} from '../models';

export interface CancelFineTuningJobRequest {
    fineTuningJobId: string;
}

export interface CreateFineTuningJobRequest {
    createFineTuningJobRequest: CreateFineTuningJobRequest;
}

export interface ListFineTuningEventsRequest {
    fineTuningJobId: string;
    after?: string;
    limit?: number;
}

export interface ListFineTuningJobCheckpointsRequest {
    fineTuningJobId: string;
    after?: string;
    limit?: number;
}

export interface ListPaginatedFineTuningJobsRequest {
    after?: string;
    limit?: number;
}

export interface RetrieveFineTuningJobRequest {
    fineTuningJobId: string;
}


/**
 * Immediately cancel a fine-tune job. 
 */
function cancelFineTuningJobRaw<T>(requestParameters: CancelFineTuningJobRequest, requestConfig: runtime.TypedQueryConfig<T, FineTuningJob> = {}): QueryConfig<T> {
    if (requestParameters.fineTuningJobId === null || requestParameters.fineTuningJobId === undefined) {
        throw new runtime.RequiredError('fineTuningJobId','Required parameter requestParameters.fineTuningJobId was null or undefined when calling cancelFineTuningJob.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/fine_tuning/jobs/{fine_tuning_job_id}/cancel`.replace(`{${"fine_tuning_job_id"}}`, encodeURIComponent(String(requestParameters.fineTuningJobId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FineTuningJobFromJSON(body), text);
    }

    return config;
}

/**
* Immediately cancel a fine-tune job. 
*/
export function cancelFineTuningJob<T>(requestParameters: CancelFineTuningJobRequest, requestConfig?: runtime.TypedQueryConfig<T, FineTuningJob>): QueryConfig<T> {
    return cancelFineTuningJobRaw(requestParameters, requestConfig);
}

/**
 * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
 */
function createFineTuningJobRaw<T>(requestParameters: CreateFineTuningJobRequest, requestConfig: runtime.TypedQueryConfig<T, FineTuningJob> = {}): QueryConfig<T> {
    if (requestParameters.createFineTuningJobRequest === null || requestParameters.createFineTuningJobRequest === undefined) {
        throw new runtime.RequiredError('createFineTuningJobRequest','Required parameter requestParameters.createFineTuningJobRequest was null or undefined when calling createFineTuningJob.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/fine_tuning/jobs`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || CreateFineTuningJobRequestToJSON(requestParameters.createFineTuningJobRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FineTuningJobFromJSON(body), text);
    }

    return config;
}

/**
* Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
*/
export function createFineTuningJob<T>(requestParameters: CreateFineTuningJobRequest, requestConfig?: runtime.TypedQueryConfig<T, FineTuningJob>): QueryConfig<T> {
    return createFineTuningJobRaw(requestParameters, requestConfig);
}

/**
 * Get status updates for a fine-tuning job. 
 */
function listFineTuningEventsRaw<T>(requestParameters: ListFineTuningEventsRequest, requestConfig: runtime.TypedQueryConfig<T, ListFineTuningJobEventsResponse> = {}): QueryConfig<T> {
    if (requestParameters.fineTuningJobId === null || requestParameters.fineTuningJobId === undefined) {
        throw new runtime.RequiredError('fineTuningJobId','Required parameter requestParameters.fineTuningJobId was null or undefined when calling listFineTuningEvents.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.after !== undefined) {
        queryParameters['after'] = requestParameters.after;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/fine_tuning/jobs/{fine_tuning_job_id}/events`.replace(`{${"fine_tuning_job_id"}}`, encodeURIComponent(String(requestParameters.fineTuningJobId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ListFineTuningJobEventsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get status updates for a fine-tuning job. 
*/
export function listFineTuningEvents<T>(requestParameters: ListFineTuningEventsRequest, requestConfig?: runtime.TypedQueryConfig<T, ListFineTuningJobEventsResponse>): QueryConfig<T> {
    return listFineTuningEventsRaw(requestParameters, requestConfig);
}

/**
 * List checkpoints for a fine-tuning job. 
 */
function listFineTuningJobCheckpointsRaw<T>(requestParameters: ListFineTuningJobCheckpointsRequest, requestConfig: runtime.TypedQueryConfig<T, ListFineTuningJobCheckpointsResponse> = {}): QueryConfig<T> {
    if (requestParameters.fineTuningJobId === null || requestParameters.fineTuningJobId === undefined) {
        throw new runtime.RequiredError('fineTuningJobId','Required parameter requestParameters.fineTuningJobId was null or undefined when calling listFineTuningJobCheckpoints.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.after !== undefined) {
        queryParameters['after'] = requestParameters.after;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints`.replace(`{${"fine_tuning_job_id"}}`, encodeURIComponent(String(requestParameters.fineTuningJobId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ListFineTuningJobCheckpointsResponseFromJSON(body), text);
    }

    return config;
}

/**
* List checkpoints for a fine-tuning job. 
*/
export function listFineTuningJobCheckpoints<T>(requestParameters: ListFineTuningJobCheckpointsRequest, requestConfig?: runtime.TypedQueryConfig<T, ListFineTuningJobCheckpointsResponse>): QueryConfig<T> {
    return listFineTuningJobCheckpointsRaw(requestParameters, requestConfig);
}

/**
 * List your organization\'s fine-tuning jobs 
 */
function listPaginatedFineTuningJobsRaw<T>(requestParameters: ListPaginatedFineTuningJobsRequest, requestConfig: runtime.TypedQueryConfig<T, ListPaginatedFineTuningJobsResponse> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.after !== undefined) {
        queryParameters['after'] = requestParameters.after;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/fine_tuning/jobs`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ListPaginatedFineTuningJobsResponseFromJSON(body), text);
    }

    return config;
}

/**
* List your organization\'s fine-tuning jobs 
*/
export function listPaginatedFineTuningJobs<T>(requestParameters: ListPaginatedFineTuningJobsRequest, requestConfig?: runtime.TypedQueryConfig<T, ListPaginatedFineTuningJobsResponse>): QueryConfig<T> {
    return listPaginatedFineTuningJobsRaw(requestParameters, requestConfig);
}

/**
 * Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
 */
function retrieveFineTuningJobRaw<T>(requestParameters: RetrieveFineTuningJobRequest, requestConfig: runtime.TypedQueryConfig<T, FineTuningJob> = {}): QueryConfig<T> {
    if (requestParameters.fineTuningJobId === null || requestParameters.fineTuningJobId === undefined) {
        throw new runtime.RequiredError('fineTuningJobId','Required parameter requestParameters.fineTuningJobId was null or undefined when calling retrieveFineTuningJob.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/fine_tuning/jobs/{fine_tuning_job_id}`.replace(`{${"fine_tuning_job_id"}}`, encodeURIComponent(String(requestParameters.fineTuningJobId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FineTuningJobFromJSON(body), text);
    }

    return config;
}

/**
* Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
*/
export function retrieveFineTuningJob<T>(requestParameters: RetrieveFineTuningJobRequest, requestConfig?: runtime.TypedQueryConfig<T, FineTuningJob>): QueryConfig<T> {
    return retrieveFineTuningJobRaw(requestParameters, requestConfig);
}

