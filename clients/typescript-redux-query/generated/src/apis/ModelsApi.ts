// tslint:disable
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    DeleteModelResponse,
    DeleteModelResponseFromJSON,
    DeleteModelResponseToJSON,
    ListModelsResponse,
    ListModelsResponseFromJSON,
    ListModelsResponseToJSON,
    Model,
    ModelFromJSON,
    ModelToJSON,
} from '../models';

export interface DeleteModelRequest {
    model: string;
}

export interface RetrieveModelRequest {
    model: string;
}


/**
 * Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
 */
function deleteModelRaw<T>(requestParameters: DeleteModelRequest, requestConfig: runtime.TypedQueryConfig<T, DeleteModelResponse> = {}): QueryConfig<T> {
    if (requestParameters.model === null || requestParameters.model === undefined) {
        throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling deleteModel.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/models/{model}`.replace(`{${"model"}}`, encodeURIComponent(String(requestParameters.model))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DeleteModelResponseFromJSON(body), text);
    }

    return config;
}

/**
* Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
*/
export function deleteModel<T>(requestParameters: DeleteModelRequest, requestConfig?: runtime.TypedQueryConfig<T, DeleteModelResponse>): QueryConfig<T> {
    return deleteModelRaw(requestParameters, requestConfig);
}

/**
 * Lists the currently available models, and provides basic information about each one such as the owner and availability.
 */
function listModelsRaw<T>( requestConfig: runtime.TypedQueryConfig<T, ListModelsResponse> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/models`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ListModelsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Lists the currently available models, and provides basic information about each one such as the owner and availability.
*/
export function listModels<T>( requestConfig?: runtime.TypedQueryConfig<T, ListModelsResponse>): QueryConfig<T> {
    return listModelsRaw( requestConfig);
}

/**
 * Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
 */
function retrieveModelRaw<T>(requestParameters: RetrieveModelRequest, requestConfig: runtime.TypedQueryConfig<T, Model> = {}): QueryConfig<T> {
    if (requestParameters.model === null || requestParameters.model === undefined) {
        throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling retrieveModel.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/models/{model}`.replace(`{${"model"}}`, encodeURIComponent(String(requestParameters.model))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ModelFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
*/
export function retrieveModel<T>(requestParameters: RetrieveModelRequest, requestConfig?: runtime.TypedQueryConfig<T, Model>): QueryConfig<T> {
    return retrieveModelRaw(requestParameters, requestConfig);
}

