// tslint:disable
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    CreateModerationRequest,
    CreateModerationRequestFromJSON,
    CreateModerationRequestToJSON,
    CreateModerationResponse,
    CreateModerationResponseFromJSON,
    CreateModerationResponseToJSON,
} from '../models';

export interface CreateModerationRequest {
    createModerationRequest: CreateModerationRequest;
}


/**
 * Classifies if text is potentially harmful.
 */
function createModerationRaw<T>(requestParameters: CreateModerationRequest, requestConfig: runtime.TypedQueryConfig<T, CreateModerationResponse> = {}): QueryConfig<T> {
    if (requestParameters.createModerationRequest === null || requestParameters.createModerationRequest === undefined) {
        throw new runtime.RequiredError('createModerationRequest','Required parameter requestParameters.createModerationRequest was null or undefined when calling createModeration.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/moderations`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || CreateModerationRequestToJSON(requestParameters.createModerationRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CreateModerationResponseFromJSON(body), text);
    }

    return config;
}

/**
* Classifies if text is potentially harmful.
*/
export function createModeration<T>(requestParameters: CreateModerationRequest, requestConfig?: runtime.TypedQueryConfig<T, CreateModerationResponse>): QueryConfig<T> {
    return createModerationRaw(requestParameters, requestConfig);
}

