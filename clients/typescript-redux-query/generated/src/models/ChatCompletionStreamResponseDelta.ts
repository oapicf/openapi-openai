// tslint:disable
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ChatCompletionMessageToolCallChunk,
    ChatCompletionMessageToolCallChunkFromJSON,
    ChatCompletionMessageToolCallChunkToJSON,
    ChatCompletionStreamResponseDeltaFunctionCall,
    ChatCompletionStreamResponseDeltaFunctionCallFromJSON,
    ChatCompletionStreamResponseDeltaFunctionCallToJSON,
} from './';

/**
 * A chat completion delta generated by streamed model responses.
 * @export
 * @interface ChatCompletionStreamResponseDelta
 */
export interface ChatCompletionStreamResponseDelta  {
    /**
     * The contents of the chunk message.
     * @type {string}
     * @memberof ChatCompletionStreamResponseDelta
     */
    content?: string;
    /**
     * 
     * @type {ChatCompletionStreamResponseDeltaFunctionCall}
     * @memberof ChatCompletionStreamResponseDelta
     */
    functionCall?: ChatCompletionStreamResponseDeltaFunctionCall;
    /**
     * 
     * @type {Array<ChatCompletionMessageToolCallChunk>}
     * @memberof ChatCompletionStreamResponseDelta
     */
    toolCalls?: Array<ChatCompletionMessageToolCallChunk>;
    /**
     * The role of the author of this message.
     * @type {string}
     * @memberof ChatCompletionStreamResponseDelta
     */
    role?: ChatCompletionStreamResponseDeltaRoleEnum;
}

export function ChatCompletionStreamResponseDeltaFromJSON(json: any): ChatCompletionStreamResponseDelta {
    return {
        'content': !exists(json, 'content') ? undefined : json['content'],
        'functionCall': !exists(json, 'function_call') ? undefined : ChatCompletionStreamResponseDeltaFunctionCallFromJSON(json['function_call']),
        'toolCalls': !exists(json, 'tool_calls') ? undefined : (json['tool_calls'] as Array<any>).map(ChatCompletionMessageToolCallChunkFromJSON),
        'role': !exists(json, 'role') ? undefined : json['role'],
    };
}

export function ChatCompletionStreamResponseDeltaToJSON(value?: ChatCompletionStreamResponseDelta): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'content': value.content,
        'function_call': ChatCompletionStreamResponseDeltaFunctionCallToJSON(value.functionCall),
        'tool_calls': value.toolCalls === undefined ? undefined : (value.toolCalls as Array<any>).map(ChatCompletionMessageToolCallChunkToJSON),
        'role': value.role,
    };
}

/**
* @export
* @enum {string}
*/
export enum ChatCompletionStreamResponseDeltaRoleEnum {
    System = 'system',
    User = 'user',
    Assistant = 'assistant',
    Tool = 'tool'
}


