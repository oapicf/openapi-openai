// tslint:disable
/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CreateCompletionResponseChoicesInner,
    CreateCompletionResponseChoicesInnerFromJSON,
    CreateCompletionResponseChoicesInnerToJSON,
    CreateCompletionResponseUsage,
    CreateCompletionResponseUsageFromJSON,
    CreateCompletionResponseUsageToJSON,
} from './';

/**
 * 
 * @export
 * @interface CreateCompletionResponse
 */
export interface CreateCompletionResponse  {
    /**
     * 
     * @type {string}
     * @memberof CreateCompletionResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCompletionResponse
     */
    object: string;
    /**
     * 
     * @type {number}
     * @memberof CreateCompletionResponse
     */
    created: number;
    /**
     * 
     * @type {string}
     * @memberof CreateCompletionResponse
     */
    model: string;
    /**
     * 
     * @type {Array<CreateCompletionResponseChoicesInner>}
     * @memberof CreateCompletionResponse
     */
    choices: Array<CreateCompletionResponseChoicesInner>;
    /**
     * 
     * @type {CreateCompletionResponseUsage}
     * @memberof CreateCompletionResponse
     */
    usage?: CreateCompletionResponseUsage;
}

export function CreateCompletionResponseFromJSON(json: any): CreateCompletionResponse {
    return {
        'id': json['id'],
        'object': json['object'],
        'created': json['created'],
        'model': json['model'],
        'choices': (json['choices'] as Array<any>).map(CreateCompletionResponseChoicesInnerFromJSON),
        'usage': !exists(json, 'usage') ? undefined : CreateCompletionResponseUsageFromJSON(json['usage']),
    };
}

export function CreateCompletionResponseToJSON(value?: CreateCompletionResponse): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'object': value.object,
        'created': value.created,
        'model': value.model,
        'choices': (value.choices as Array<any>).map(CreateCompletionResponseChoicesInnerToJSON),
        'usage': CreateCompletionResponseUsageToJSON(value.usage),
    };
}


