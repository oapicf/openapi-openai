// tslint:disable
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FineTuningJobError,
    FineTuningJobErrorFromJSON,
    FineTuningJobErrorToJSON,
    FineTuningJobHyperparameters,
    FineTuningJobHyperparametersFromJSON,
    FineTuningJobHyperparametersToJSON,
    FineTuningJobIntegrationsInner,
    FineTuningJobIntegrationsInnerFromJSON,
    FineTuningJobIntegrationsInnerToJSON,
} from './';

/**
 * The `fine_tuning.job` object represents a fine-tuning job that has been created through the API. 
 * @export
 * @interface FineTuningJob
 */
export interface FineTuningJob  {
    /**
     * The object identifier, which can be referenced in the API endpoints.
     * @type {string}
     * @memberof FineTuningJob
     */
    id: string;
    /**
     * The Unix timestamp (in seconds) for when the fine-tuning job was created.
     * @type {number}
     * @memberof FineTuningJob
     */
    createdAt: number;
    /**
     * 
     * @type {FineTuningJobError}
     * @memberof FineTuningJob
     */
    error: FineTuningJobError;
    /**
     * The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
     * @type {string}
     * @memberof FineTuningJob
     */
    fineTunedModel: string;
    /**
     * The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
     * @type {number}
     * @memberof FineTuningJob
     */
    finishedAt: number;
    /**
     * 
     * @type {FineTuningJobHyperparameters}
     * @memberof FineTuningJob
     */
    hyperparameters: FineTuningJobHyperparameters;
    /**
     * The base model that is being fine-tuned.
     * @type {string}
     * @memberof FineTuningJob
     */
    model: string;
    /**
     * The object type, which is always \"fine_tuning.job\".
     * @type {string}
     * @memberof FineTuningJob
     */
    object: FineTuningJobObjectEnum;
    /**
     * The organization that owns the fine-tuning job.
     * @type {string}
     * @memberof FineTuningJob
     */
    organizationId: string;
    /**
     * The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
     * @type {Array<string>}
     * @memberof FineTuningJob
     */
    resultFiles: Array<string>;
    /**
     * The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
     * @type {string}
     * @memberof FineTuningJob
     */
    status: FineTuningJobStatusEnum;
    /**
     * The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
     * @type {number}
     * @memberof FineTuningJob
     */
    trainedTokens: number;
    /**
     * The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
     * @type {string}
     * @memberof FineTuningJob
     */
    trainingFile: string;
    /**
     * The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
     * @type {string}
     * @memberof FineTuningJob
     */
    validationFile: string;
    /**
     * A list of integrations to enable for this fine-tuning job.
     * @type {Array<FineTuningJobIntegrationsInner>}
     * @memberof FineTuningJob
     */
    integrations?: Array<FineTuningJobIntegrationsInner>;
    /**
     * The seed used for the fine-tuning job.
     * @type {number}
     * @memberof FineTuningJob
     */
    seed: number;
}

export function FineTuningJobFromJSON(json: any): FineTuningJob {
    return {
        'id': json['id'],
        'createdAt': json['created_at'],
        'error': FineTuningJobErrorFromJSON(json['error']),
        'fineTunedModel': json['fine_tuned_model'],
        'finishedAt': json['finished_at'],
        'hyperparameters': FineTuningJobHyperparametersFromJSON(json['hyperparameters']),
        'model': json['model'],
        'object': json['object'],
        'organizationId': json['organization_id'],
        'resultFiles': json['result_files'],
        'status': json['status'],
        'trainedTokens': json['trained_tokens'],
        'trainingFile': json['training_file'],
        'validationFile': json['validation_file'],
        'integrations': !exists(json, 'integrations') ? undefined : (json['integrations'] as Array<any>).map(FineTuningJobIntegrationsInnerFromJSON),
        'seed': json['seed'],
    };
}

export function FineTuningJobToJSON(value?: FineTuningJob): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'created_at': value.createdAt,
        'error': FineTuningJobErrorToJSON(value.error),
        'fine_tuned_model': value.fineTunedModel,
        'finished_at': value.finishedAt,
        'hyperparameters': FineTuningJobHyperparametersToJSON(value.hyperparameters),
        'model': value.model,
        'object': value.object,
        'organization_id': value.organizationId,
        'result_files': value.resultFiles,
        'status': value.status,
        'trained_tokens': value.trainedTokens,
        'training_file': value.trainingFile,
        'validation_file': value.validationFile,
        'integrations': value.integrations === undefined ? undefined : (value.integrations as Array<any>).map(FineTuningJobIntegrationsInnerToJSON),
        'seed': value.seed,
    };
}

/**
* @export
* @enum {string}
*/
export enum FineTuningJobObjectEnum {
    FineTuningJob = 'fine_tuning.job'
}
/**
* @export
* @enum {string}
*/
export enum FineTuningJobStatusEnum {
    ValidatingFiles = 'validating_files',
    Queued = 'queued',
    Running = 'running',
    Succeeded = 'succeeded',
    Failed = 'failed',
    Cancelled = 'cancelled'
}


