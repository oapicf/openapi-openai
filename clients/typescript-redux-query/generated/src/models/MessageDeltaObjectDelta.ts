// tslint:disable
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MessageDeltaObjectDeltaContentInner,
    MessageDeltaObjectDeltaContentInnerFromJSON,
    MessageDeltaObjectDeltaContentInnerToJSON,
} from './';

/**
 * The delta containing the fields that have changed on the Message.
 * @export
 * @interface MessageDeltaObjectDelta
 */
export interface MessageDeltaObjectDelta  {
    /**
     * The entity that produced the message. One of `user` or `assistant`.
     * @type {string}
     * @memberof MessageDeltaObjectDelta
     */
    role?: MessageDeltaObjectDeltaRoleEnum;
    /**
     * The content of the message in array of text and/or images.
     * @type {Array<MessageDeltaObjectDeltaContentInner>}
     * @memberof MessageDeltaObjectDelta
     */
    content?: Array<MessageDeltaObjectDeltaContentInner>;
    /**
     * A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
     * @type {Array<string>}
     * @memberof MessageDeltaObjectDelta
     */
    fileIds?: Array<string>;
}

export function MessageDeltaObjectDeltaFromJSON(json: any): MessageDeltaObjectDelta {
    return {
        'role': !exists(json, 'role') ? undefined : json['role'],
        'content': !exists(json, 'content') ? undefined : (json['content'] as Array<any>).map(MessageDeltaObjectDeltaContentInnerFromJSON),
        'fileIds': !exists(json, 'file_ids') ? undefined : json['file_ids'],
    };
}

export function MessageDeltaObjectDeltaToJSON(value?: MessageDeltaObjectDelta): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'role': value.role,
        'content': value.content === undefined ? undefined : (value.content as Array<any>).map(MessageDeltaObjectDeltaContentInnerToJSON),
        'file_ids': value.fileIds,
    };
}

/**
* @export
* @enum {string}
*/
export enum MessageDeltaObjectDeltaRoleEnum {
    User = 'user',
    Assistant = 'assistant'
}


