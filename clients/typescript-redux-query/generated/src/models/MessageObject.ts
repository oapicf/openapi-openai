// tslint:disable
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MessageObjectContentInner,
    MessageObjectContentInnerFromJSON,
    MessageObjectContentInnerToJSON,
    MessageObjectIncompleteDetails,
    MessageObjectIncompleteDetailsFromJSON,
    MessageObjectIncompleteDetailsToJSON,
} from './';

/**
 * Represents a message within a [thread](/docs/api-reference/threads).
 * @export
 * @interface MessageObject
 */
export interface MessageObject  {
    /**
     * The identifier, which can be referenced in API endpoints.
     * @type {string}
     * @memberof MessageObject
     */
    id: string;
    /**
     * The object type, which is always `thread.message`.
     * @type {string}
     * @memberof MessageObject
     */
    object: MessageObjectObjectEnum;
    /**
     * The Unix timestamp (in seconds) for when the message was created.
     * @type {number}
     * @memberof MessageObject
     */
    createdAt: number;
    /**
     * The [thread](/docs/api-reference/threads) ID that this message belongs to.
     * @type {string}
     * @memberof MessageObject
     */
    threadId: string;
    /**
     * The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
     * @type {string}
     * @memberof MessageObject
     */
    status: MessageObjectStatusEnum;
    /**
     * 
     * @type {MessageObjectIncompleteDetails}
     * @memberof MessageObject
     */
    incompleteDetails: MessageObjectIncompleteDetails;
    /**
     * The Unix timestamp (in seconds) for when the message was completed.
     * @type {number}
     * @memberof MessageObject
     */
    completedAt: number;
    /**
     * The Unix timestamp (in seconds) for when the message was marked as incomplete.
     * @type {number}
     * @memberof MessageObject
     */
    incompleteAt: number;
    /**
     * The entity that produced the message. One of `user` or `assistant`.
     * @type {string}
     * @memberof MessageObject
     */
    role: MessageObjectRoleEnum;
    /**
     * The content of the message in array of text and/or images.
     * @type {Array<MessageObjectContentInner>}
     * @memberof MessageObject
     */
    content: Array<MessageObjectContentInner>;
    /**
     * If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
     * @type {string}
     * @memberof MessageObject
     */
    assistantId: string;
    /**
     * The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
     * @type {string}
     * @memberof MessageObject
     */
    runId: string;
    /**
     * A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
     * @type {Array<string>}
     * @memberof MessageObject
     */
    fileIds: Array<string>;
    /**
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
     * @type {object}
     * @memberof MessageObject
     */
    metadata: object;
}

export function MessageObjectFromJSON(json: any): MessageObject {
    return {
        'id': json['id'],
        'object': json['object'],
        'createdAt': json['created_at'],
        'threadId': json['thread_id'],
        'status': json['status'],
        'incompleteDetails': MessageObjectIncompleteDetailsFromJSON(json['incomplete_details']),
        'completedAt': json['completed_at'],
        'incompleteAt': json['incomplete_at'],
        'role': json['role'],
        'content': (json['content'] as Array<any>).map(MessageObjectContentInnerFromJSON),
        'assistantId': json['assistant_id'],
        'runId': json['run_id'],
        'fileIds': json['file_ids'],
        'metadata': json['metadata'],
    };
}

export function MessageObjectToJSON(value?: MessageObject): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'object': value.object,
        'created_at': value.createdAt,
        'thread_id': value.threadId,
        'status': value.status,
        'incomplete_details': MessageObjectIncompleteDetailsToJSON(value.incompleteDetails),
        'completed_at': value.completedAt,
        'incomplete_at': value.incompleteAt,
        'role': value.role,
        'content': (value.content as Array<any>).map(MessageObjectContentInnerToJSON),
        'assistant_id': value.assistantId,
        'run_id': value.runId,
        'file_ids': value.fileIds,
        'metadata': value.metadata,
    };
}

/**
* @export
* @enum {string}
*/
export enum MessageObjectObjectEnum {
    ThreadMessage = 'thread.message'
}
/**
* @export
* @enum {string}
*/
export enum MessageObjectStatusEnum {
    InProgress = 'in_progress',
    Incomplete = 'incomplete',
    Completed = 'completed'
}
/**
* @export
* @enum {string}
*/
export enum MessageObjectRoleEnum {
    User = 'user',
    Assistant = 'assistant'
}


