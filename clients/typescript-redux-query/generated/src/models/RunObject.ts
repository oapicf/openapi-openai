// tslint:disable
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AssistantObjectToolsInner,
    AssistantObjectToolsInnerFromJSON,
    AssistantObjectToolsInnerToJSON,
    AssistantsApiResponseFormatOption,
    AssistantsApiResponseFormatOptionFromJSON,
    AssistantsApiResponseFormatOptionToJSON,
    AssistantsApiToolChoiceOption,
    AssistantsApiToolChoiceOptionFromJSON,
    AssistantsApiToolChoiceOptionToJSON,
    RunCompletionUsage,
    RunCompletionUsageFromJSON,
    RunCompletionUsageToJSON,
    RunObjectIncompleteDetails,
    RunObjectIncompleteDetailsFromJSON,
    RunObjectIncompleteDetailsToJSON,
    RunObjectLastError,
    RunObjectLastErrorFromJSON,
    RunObjectLastErrorToJSON,
    RunObjectRequiredAction,
    RunObjectRequiredActionFromJSON,
    RunObjectRequiredActionToJSON,
    TruncationObject,
    TruncationObjectFromJSON,
    TruncationObjectToJSON,
} from './';

/**
 * Represents an execution run on a [thread](/docs/api-reference/threads).
 * @export
 * @interface RunObject
 */
export interface RunObject  {
    /**
     * The identifier, which can be referenced in API endpoints.
     * @type {string}
     * @memberof RunObject
     */
    id: string;
    /**
     * The object type, which is always `thread.run`.
     * @type {string}
     * @memberof RunObject
     */
    object: RunObjectObjectEnum;
    /**
     * The Unix timestamp (in seconds) for when the run was created.
     * @type {number}
     * @memberof RunObject
     */
    createdAt: number;
    /**
     * The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
     * @type {string}
     * @memberof RunObject
     */
    threadId: string;
    /**
     * The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
     * @type {string}
     * @memberof RunObject
     */
    assistantId: string;
    /**
     * The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
     * @type {string}
     * @memberof RunObject
     */
    status: RunObjectStatusEnum;
    /**
     * 
     * @type {RunObjectRequiredAction}
     * @memberof RunObject
     */
    requiredAction: RunObjectRequiredAction;
    /**
     * 
     * @type {RunObjectLastError}
     * @memberof RunObject
     */
    lastError: RunObjectLastError;
    /**
     * The Unix timestamp (in seconds) for when the run will expire.
     * @type {number}
     * @memberof RunObject
     */
    expiresAt: number;
    /**
     * The Unix timestamp (in seconds) for when the run was started.
     * @type {number}
     * @memberof RunObject
     */
    startedAt: number;
    /**
     * The Unix timestamp (in seconds) for when the run was cancelled.
     * @type {number}
     * @memberof RunObject
     */
    cancelledAt: number;
    /**
     * The Unix timestamp (in seconds) for when the run failed.
     * @type {number}
     * @memberof RunObject
     */
    failedAt: number;
    /**
     * The Unix timestamp (in seconds) for when the run was completed.
     * @type {number}
     * @memberof RunObject
     */
    completedAt: number;
    /**
     * 
     * @type {RunObjectIncompleteDetails}
     * @memberof RunObject
     */
    incompleteDetails: RunObjectIncompleteDetails;
    /**
     * The model that the [assistant](/docs/api-reference/assistants) used for this run.
     * @type {string}
     * @memberof RunObject
     */
    model: string;
    /**
     * The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
     * @type {string}
     * @memberof RunObject
     */
    instructions: string;
    /**
     * The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
     * @type {Array<AssistantObjectToolsInner>}
     * @memberof RunObject
     */
    tools: Array<AssistantObjectToolsInner>;
    /**
     * The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
     * @type {Array<string>}
     * @memberof RunObject
     */
    fileIds: Array<string>;
    /**
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
     * @type {object}
     * @memberof RunObject
     */
    metadata: object;
    /**
     * 
     * @type {RunCompletionUsage}
     * @memberof RunObject
     */
    usage: RunCompletionUsage;
    /**
     * The sampling temperature used for this run. If not set, defaults to 1.
     * @type {number}
     * @memberof RunObject
     */
    temperature?: number;
    /**
     * The maximum number of prompt tokens specified to have been used over the course of the run. 
     * @type {number}
     * @memberof RunObject
     */
    maxPromptTokens: number;
    /**
     * The maximum number of completion tokens specified to have been used over the course of the run. 
     * @type {number}
     * @memberof RunObject
     */
    maxCompletionTokens: number;
    /**
     * 
     * @type {TruncationObject}
     * @memberof RunObject
     */
    truncationStrategy: TruncationObject;
    /**
     * 
     * @type {AssistantsApiToolChoiceOption}
     * @memberof RunObject
     */
    toolChoice: AssistantsApiToolChoiceOption;
    /**
     * 
     * @type {AssistantsApiResponseFormatOption}
     * @memberof RunObject
     */
    responseFormat: AssistantsApiResponseFormatOption;
}

export function RunObjectFromJSON(json: any): RunObject {
    return {
        'id': json['id'],
        'object': json['object'],
        'createdAt': json['created_at'],
        'threadId': json['thread_id'],
        'assistantId': json['assistant_id'],
        'status': json['status'],
        'requiredAction': RunObjectRequiredActionFromJSON(json['required_action']),
        'lastError': RunObjectLastErrorFromJSON(json['last_error']),
        'expiresAt': json['expires_at'],
        'startedAt': json['started_at'],
        'cancelledAt': json['cancelled_at'],
        'failedAt': json['failed_at'],
        'completedAt': json['completed_at'],
        'incompleteDetails': RunObjectIncompleteDetailsFromJSON(json['incomplete_details']),
        'model': json['model'],
        'instructions': json['instructions'],
        'tools': (json['tools'] as Array<any>).map(AssistantObjectToolsInnerFromJSON),
        'fileIds': json['file_ids'],
        'metadata': json['metadata'],
        'usage': RunCompletionUsageFromJSON(json['usage']),
        'temperature': !exists(json, 'temperature') ? undefined : json['temperature'],
        'maxPromptTokens': json['max_prompt_tokens'],
        'maxCompletionTokens': json['max_completion_tokens'],
        'truncationStrategy': TruncationObjectFromJSON(json['truncation_strategy']),
        'toolChoice': AssistantsApiToolChoiceOptionFromJSON(json['tool_choice']),
        'responseFormat': AssistantsApiResponseFormatOptionFromJSON(json['response_format']),
    };
}

export function RunObjectToJSON(value?: RunObject): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'object': value.object,
        'created_at': value.createdAt,
        'thread_id': value.threadId,
        'assistant_id': value.assistantId,
        'status': value.status,
        'required_action': RunObjectRequiredActionToJSON(value.requiredAction),
        'last_error': RunObjectLastErrorToJSON(value.lastError),
        'expires_at': value.expiresAt,
        'started_at': value.startedAt,
        'cancelled_at': value.cancelledAt,
        'failed_at': value.failedAt,
        'completed_at': value.completedAt,
        'incomplete_details': RunObjectIncompleteDetailsToJSON(value.incompleteDetails),
        'model': value.model,
        'instructions': value.instructions,
        'tools': (value.tools as Array<any>).map(AssistantObjectToolsInnerToJSON),
        'file_ids': value.fileIds,
        'metadata': value.metadata,
        'usage': RunCompletionUsageToJSON(value.usage),
        'temperature': value.temperature,
        'max_prompt_tokens': value.maxPromptTokens,
        'max_completion_tokens': value.maxCompletionTokens,
        'truncation_strategy': TruncationObjectToJSON(value.truncationStrategy),
        'tool_choice': AssistantsApiToolChoiceOptionToJSON(value.toolChoice),
        'response_format': AssistantsApiResponseFormatOptionToJSON(value.responseFormat),
    };
}

/**
* @export
* @enum {string}
*/
export enum RunObjectObjectEnum {
    ThreadRun = 'thread.run'
}
/**
* @export
* @enum {string}
*/
export enum RunObjectStatusEnum {
    Queued = 'queued',
    InProgress = 'in_progress',
    RequiresAction = 'requires_action',
    Cancelling = 'cancelling',
    Cancelled = 'cancelled',
    Failed = 'failed',
    Completed = 'completed',
    Expired = 'expired'
}


