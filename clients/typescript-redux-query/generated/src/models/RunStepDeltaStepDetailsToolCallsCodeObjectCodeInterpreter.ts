// tslint:disable
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner,
    RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerFromJSON,
    RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerToJSON,
} from './';

/**
 * The Code Interpreter tool call definition.
 * @export
 * @interface RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter
 */
export interface RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter  {
    /**
     * The input to the Code Interpreter tool call.
     * @type {string}
     * @memberof RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter
     */
    input?: string;
    /**
     * The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
     * @type {Array<RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner>}
     * @memberof RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter
     */
    outputs?: Array<RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner>;
}

export function RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterFromJSON(json: any): RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter {
    return {
        'input': !exists(json, 'input') ? undefined : json['input'],
        'outputs': !exists(json, 'outputs') ? undefined : (json['outputs'] as Array<any>).map(RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerFromJSON),
    };
}

export function RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterToJSON(value?: RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'input': value.input,
        'outputs': value.outputs === undefined ? undefined : (value.outputs as Array<any>).map(RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInnerToJSON),
    };
}


