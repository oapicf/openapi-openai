// tslint:disable
/**
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    DeleteFileResponse,
    ListFilesResponse,
    OpenAIFile,
} from '../models';

export interface CreateFileRequest {
    file: Blob;
    purpose: CreateFilePurposeEnum;
}

export interface DeleteFileRequest {
    fileId: string;
}

export interface DownloadFileRequest {
    fileId: string;
}

export interface ListFilesRequest {
    purpose?: string;
}

export interface RetrieveFileRequest {
    fileId: string;
}

/**
 * no description
 */
export class FilesApi extends BaseAPI {

    /**
     * Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. 
     */
    createFile({ file, purpose }: CreateFileRequest): Observable<OpenAIFile>
    createFile({ file, purpose }: CreateFileRequest, opts?: OperationOpts): Observable<AjaxResponse<OpenAIFile>>
    createFile({ file, purpose }: CreateFileRequest, opts?: OperationOpts): Observable<OpenAIFile | AjaxResponse<OpenAIFile>> {
        throwIfNullOrUndefined(file, 'file', 'createFile');
        throwIfNullOrUndefined(purpose, 'purpose', 'createFile');

        const headers: HttpHeaders = {
        };

        const formData = new FormData();
        if (file !== undefined) { formData.append('file', file as any); }
        if (purpose !== undefined) { formData.append('purpose', purpose as any); }

        return this.request<OpenAIFile>({
            url: '/files',
            method: 'POST',
            headers,
            body: formData,
        }, opts?.responseOpts);
    };

    /**
     * Delete a file.
     */
    deleteFile({ fileId }: DeleteFileRequest): Observable<DeleteFileResponse>
    deleteFile({ fileId }: DeleteFileRequest, opts?: OperationOpts): Observable<AjaxResponse<DeleteFileResponse>>
    deleteFile({ fileId }: DeleteFileRequest, opts?: OperationOpts): Observable<DeleteFileResponse | AjaxResponse<DeleteFileResponse>> {
        throwIfNullOrUndefined(fileId, 'fileId', 'deleteFile');

        const headers: HttpHeaders = {
        };

        return this.request<DeleteFileResponse>({
            url: '/files/{file_id}'.replace('{file_id}', encodeURI(fileId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns the contents of the specified file.
     */
    downloadFile({ fileId }: DownloadFileRequest): Observable<string>
    downloadFile({ fileId }: DownloadFileRequest, opts?: OperationOpts): Observable<AjaxResponse<string>>
    downloadFile({ fileId }: DownloadFileRequest, opts?: OperationOpts): Observable<string | AjaxResponse<string>> {
        throwIfNullOrUndefined(fileId, 'fileId', 'downloadFile');

        const headers: HttpHeaders = {
        };

        return this.request<string>({
            url: '/files/{file_id}/content'.replace('{file_id}', encodeURI(fileId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns a list of files that belong to the user\'s organization.
     */
    listFiles({ purpose }: ListFilesRequest): Observable<ListFilesResponse>
    listFiles({ purpose }: ListFilesRequest, opts?: OperationOpts): Observable<AjaxResponse<ListFilesResponse>>
    listFiles({ purpose }: ListFilesRequest, opts?: OperationOpts): Observable<ListFilesResponse | AjaxResponse<ListFilesResponse>> {

        const headers: HttpHeaders = {
        };

        const query: HttpQuery = {};

        if (purpose != null) { query['purpose'] = purpose; }

        return this.request<ListFilesResponse>({
            url: '/files',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Returns information about a specific file.
     */
    retrieveFile({ fileId }: RetrieveFileRequest): Observable<OpenAIFile>
    retrieveFile({ fileId }: RetrieveFileRequest, opts?: OperationOpts): Observable<AjaxResponse<OpenAIFile>>
    retrieveFile({ fileId }: RetrieveFileRequest, opts?: OperationOpts): Observable<OpenAIFile | AjaxResponse<OpenAIFile>> {
        throwIfNullOrUndefined(fileId, 'fileId', 'retrieveFile');

        const headers: HttpHeaders = {
        };

        return this.request<OpenAIFile>({
            url: '/files/{file_id}'.replace('{file_id}', encodeURI(fileId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum CreateFilePurposeEnum {
    FineTune = 'fine-tune',
    Assistants = 'assistants'
}
