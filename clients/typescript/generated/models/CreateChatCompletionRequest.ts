/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * OpenAPI spec version: 2.0.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ChatCompletionFunctions } from '../models/ChatCompletionFunctions';
import { ChatCompletionRequestMessage } from '../models/ChatCompletionRequestMessage';
import { CreateChatCompletionRequestFunctionCall } from '../models/CreateChatCompletionRequestFunctionCall';
import { CreateChatCompletionRequestModel } from '../models/CreateChatCompletionRequestModel';
import { CreateChatCompletionRequestStop } from '../models/CreateChatCompletionRequestStop';
import { HttpFile } from '../http/http';

export class CreateChatCompletionRequest {
    'model': CreateChatCompletionRequestModel;
    /**
    * A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).
    */
    'messages': Array<ChatCompletionRequestMessage>;
    /**
    * A list of functions the model may generate JSON inputs for.
    */
    'functions'?: Array<ChatCompletionFunctions>;
    'functionCall'?: CreateChatCompletionRequestFunctionCall;
    /**
    * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
    */
    'temperature'?: number | null;
    /**
    * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
    */
    'topP'?: number | null;
    /**
    * How many chat completion choices to generate for each input message.
    */
    'n'?: number | null;
    /**
    * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb). 
    */
    'stream'?: boolean | null;
    'stop'?: CreateChatCompletionRequestStop;
    /**
    * The maximum number of [tokens](/tokenizer) to generate in the chat completion.  The total length of input tokens and generated tokens is limited by the model\'s context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens. 
    */
    'maxTokens'?: number;
    /**
    * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model\'s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 
    */
    'presencePenalty'?: number | null;
    /**
    * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model\'s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 
    */
    'frequencyPenalty'?: number | null;
    /**
    * Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. 
    */
    'logitBias'?: any | null;
    /**
    * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    */
    'user'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "model",
            "baseName": "model",
            "type": "CreateChatCompletionRequestModel",
            "format": ""
        },
        {
            "name": "messages",
            "baseName": "messages",
            "type": "Array<ChatCompletionRequestMessage>",
            "format": ""
        },
        {
            "name": "functions",
            "baseName": "functions",
            "type": "Array<ChatCompletionFunctions>",
            "format": ""
        },
        {
            "name": "functionCall",
            "baseName": "function_call",
            "type": "CreateChatCompletionRequestFunctionCall",
            "format": ""
        },
        {
            "name": "temperature",
            "baseName": "temperature",
            "type": "number",
            "format": ""
        },
        {
            "name": "topP",
            "baseName": "top_p",
            "type": "number",
            "format": ""
        },
        {
            "name": "n",
            "baseName": "n",
            "type": "number",
            "format": ""
        },
        {
            "name": "stream",
            "baseName": "stream",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "stop",
            "baseName": "stop",
            "type": "CreateChatCompletionRequestStop",
            "format": ""
        },
        {
            "name": "maxTokens",
            "baseName": "max_tokens",
            "type": "number",
            "format": ""
        },
        {
            "name": "presencePenalty",
            "baseName": "presence_penalty",
            "type": "number",
            "format": ""
        },
        {
            "name": "frequencyPenalty",
            "baseName": "frequency_penalty",
            "type": "number",
            "format": ""
        },
        {
            "name": "logitBias",
            "baseName": "logit_bias",
            "type": "any",
            "format": ""
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return CreateChatCompletionRequest.attributeTypeMap;
    }

    public constructor() {
    }
}

