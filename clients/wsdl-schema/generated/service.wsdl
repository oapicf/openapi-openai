<?xml version="1.0" encoding="utf-8"?>
<definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:schemas="http://localhost/soap/ServiceV1/model" xmlns:wsdl="http://localhost/soap/ServiceV1/service" targetNamespace="http://localhost/soap/ServiceV1/service" xmlns="http://schemas.xmlsoap.org/wsdl/">
  <types>
    <xs:schema xmlns:tns="http://localhost/soap/ServiceV1/model" targetNamespace="http://localhost/soap/ServiceV1/model" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:element name="PostThreadsRunsCancelByThread_idAndRun_id_RequestMessage" type="schemas:PostThreadsRunsCancelByThread_idAndRun_id_RequestMessage" />
      <xs:element name="PostThreadsRunsCancelByThread_idAndRun_id_ResponseMessage" type="schemas:PostThreadsRunsCancelByThread_idAndRun_id_ResponseMessage" />
      <xs:element name="PostAssistants_RequestMessage" type="schemas:PostAssistants_RequestMessage" />
      <xs:element name="PostAssistants_ResponseMessage" type="schemas:PostAssistants_ResponseMessage" />
      <xs:element name="PostAssistantsFilesByAssistant_id_RequestMessage" type="schemas:PostAssistantsFilesByAssistant_id_RequestMessage" />
      <xs:element name="PostAssistantsFilesByAssistant_id_ResponseMessage" type="schemas:PostAssistantsFilesByAssistant_id_ResponseMessage" />
      <xs:element name="PostThreadsMessagesByThread_id_RequestMessage" type="schemas:PostThreadsMessagesByThread_id_RequestMessage" />
      <xs:element name="PostThreadsMessagesByThread_id_ResponseMessage" type="schemas:PostThreadsMessagesByThread_id_ResponseMessage" />
      <xs:element name="PostThreadsRunsByThread_id_RequestMessage" type="schemas:PostThreadsRunsByThread_id_RequestMessage" />
      <xs:element name="PostThreadsRunsByThread_id_ResponseMessage" type="schemas:PostThreadsRunsByThread_id_ResponseMessage" />
      <xs:element name="PostThreads_RequestMessage" type="schemas:PostThreads_RequestMessage" />
      <xs:element name="PostThreads_ResponseMessage" type="schemas:PostThreads_ResponseMessage" />
      <xs:element name="PostThreadsRuns_RequestMessage" type="schemas:PostThreadsRuns_RequestMessage" />
      <xs:element name="PostThreadsRuns_ResponseMessage" type="schemas:PostThreadsRuns_ResponseMessage" />
      <xs:element name="DeleteAssistantsByAssistant_id_RequestMessage" type="schemas:DeleteAssistantsByAssistant_id_RequestMessage" />
      <xs:element name="DeleteAssistantsByAssistant_id_ResponseMessage" type="schemas:DeleteAssistantsByAssistant_id_ResponseMessage" />
      <xs:element name="DeleteAssistantsFilesByAssistant_idAndFile_id_RequestMessage" type="schemas:DeleteAssistantsFilesByAssistant_idAndFile_id_RequestMessage" />
      <xs:element name="DeleteAssistantsFilesByAssistant_idAndFile_id_ResponseMessage" type="schemas:DeleteAssistantsFilesByAssistant_idAndFile_id_ResponseMessage" />
      <xs:element name="DeleteThreadsByThread_id_RequestMessage" type="schemas:DeleteThreadsByThread_id_RequestMessage" />
      <xs:element name="DeleteThreadsByThread_id_ResponseMessage" type="schemas:DeleteThreadsByThread_id_ResponseMessage" />
      <xs:element name="GetAssistantsByAssistant_id_RequestMessage" type="schemas:GetAssistantsByAssistant_id_RequestMessage" />
      <xs:element name="GetAssistantsByAssistant_id_ResponseMessage" type="schemas:GetAssistantsByAssistant_id_ResponseMessage" />
      <xs:element name="GetAssistantsFilesByAssistant_idAndFile_id_RequestMessage" type="schemas:GetAssistantsFilesByAssistant_idAndFile_id_RequestMessage" />
      <xs:element name="GetAssistantsFilesByAssistant_idAndFile_id_ResponseMessage" type="schemas:GetAssistantsFilesByAssistant_idAndFile_id_ResponseMessage" />
      <xs:element name="GetThreadsMessagesByThread_idAndMessage_id_RequestMessage" type="schemas:GetThreadsMessagesByThread_idAndMessage_id_RequestMessage" />
      <xs:element name="GetThreadsMessagesByThread_idAndMessage_id_ResponseMessage" type="schemas:GetThreadsMessagesByThread_idAndMessage_id_ResponseMessage" />
      <xs:element name="GetThreadsMessagesFilesByThread_idAndMessage_idAndFile_id_RequestMessage" type="schemas:GetThreadsMessagesFilesByThread_idAndMessage_idAndFile_id_RequestMessage" />
      <xs:element name="GetThreadsMessagesFilesByThread_idAndMessage_idAndFile_id_ResponseMessage" type="schemas:GetThreadsMessagesFilesByThread_idAndMessage_idAndFile_id_ResponseMessage" />
      <xs:element name="GetThreadsRunsByThread_idAndRun_id_RequestMessage" type="schemas:GetThreadsRunsByThread_idAndRun_id_RequestMessage" />
      <xs:element name="GetThreadsRunsByThread_idAndRun_id_ResponseMessage" type="schemas:GetThreadsRunsByThread_idAndRun_id_ResponseMessage" />
      <xs:element name="GetThreadsRunsStepsByThread_idAndRun_idAndStep_id_RequestMessage" type="schemas:GetThreadsRunsStepsByThread_idAndRun_idAndStep_id_RequestMessage" />
      <xs:element name="GetThreadsRunsStepsByThread_idAndRun_idAndStep_id_ResponseMessage" type="schemas:GetThreadsRunsStepsByThread_idAndRun_idAndStep_id_ResponseMessage" />
      <xs:element name="GetThreadsByThread_id_RequestMessage" type="schemas:GetThreadsByThread_id_RequestMessage" />
      <xs:element name="GetThreadsByThread_id_ResponseMessage" type="schemas:GetThreadsByThread_id_ResponseMessage" />
      <xs:element name="GetAssistantsFilesByAssistant_id_RequestMessage" type="schemas:GetAssistantsFilesByAssistant_id_RequestMessage" />
      <xs:element name="GetAssistantsFilesByAssistant_id_ResponseMessage" type="schemas:GetAssistantsFilesByAssistant_id_ResponseMessage" />
      <xs:element name="GetAssistants_RequestMessage" type="schemas:GetAssistants_RequestMessage" />
      <xs:element name="GetAssistants_ResponseMessage" type="schemas:GetAssistants_ResponseMessage" />
      <xs:element name="GetThreadsMessagesFilesByThread_idAndMessage_id_RequestMessage" type="schemas:GetThreadsMessagesFilesByThread_idAndMessage_id_RequestMessage" />
      <xs:element name="GetThreadsMessagesFilesByThread_idAndMessage_id_ResponseMessage" type="schemas:GetThreadsMessagesFilesByThread_idAndMessage_id_ResponseMessage" />
      <xs:element name="GetThreadsMessagesByThread_id_RequestMessage" type="schemas:GetThreadsMessagesByThread_id_RequestMessage" />
      <xs:element name="GetThreadsMessagesByThread_id_ResponseMessage" type="schemas:GetThreadsMessagesByThread_id_ResponseMessage" />
      <xs:element name="GetThreadsRunsStepsByThread_idAndRun_id_RequestMessage" type="schemas:GetThreadsRunsStepsByThread_idAndRun_id_RequestMessage" />
      <xs:element name="GetThreadsRunsStepsByThread_idAndRun_id_ResponseMessage" type="schemas:GetThreadsRunsStepsByThread_idAndRun_id_ResponseMessage" />
      <xs:element name="GetThreadsRunsByThread_id_RequestMessage" type="schemas:GetThreadsRunsByThread_id_RequestMessage" />
      <xs:element name="GetThreadsRunsByThread_id_ResponseMessage" type="schemas:GetThreadsRunsByThread_id_ResponseMessage" />
      <xs:element name="PostAssistantsByAssistant_id_RequestMessage" type="schemas:PostAssistantsByAssistant_id_RequestMessage" />
      <xs:element name="PostAssistantsByAssistant_id_ResponseMessage" type="schemas:PostAssistantsByAssistant_id_ResponseMessage" />
      <xs:element name="PostThreadsMessagesByThread_idAndMessage_id_RequestMessage" type="schemas:PostThreadsMessagesByThread_idAndMessage_id_RequestMessage" />
      <xs:element name="PostThreadsMessagesByThread_idAndMessage_id_ResponseMessage" type="schemas:PostThreadsMessagesByThread_idAndMessage_id_ResponseMessage" />
      <xs:element name="PostThreadsRunsByThread_idAndRun_id_RequestMessage" type="schemas:PostThreadsRunsByThread_idAndRun_id_RequestMessage" />
      <xs:element name="PostThreadsRunsByThread_idAndRun_id_ResponseMessage" type="schemas:PostThreadsRunsByThread_idAndRun_id_ResponseMessage" />
      <xs:element name="PostThreadsByThread_id_RequestMessage" type="schemas:PostThreadsByThread_id_RequestMessage" />
      <xs:element name="PostThreadsByThread_id_ResponseMessage" type="schemas:PostThreadsByThread_id_ResponseMessage" />
      <xs:element name="PostThreadsRunsSubmit_tool_outputsByThread_idAndRun_id_RequestMessage" type="schemas:PostThreadsRunsSubmit_tool_outputsByThread_idAndRun_id_RequestMessage" />
      <xs:element name="PostThreadsRunsSubmit_tool_outputsByThread_idAndRun_id_ResponseMessage" type="schemas:PostThreadsRunsSubmit_tool_outputsByThread_idAndRun_id_ResponseMessage" />
      <xs:element name="PostAudioSpeech_RequestMessage" type="schemas:PostAudioSpeech_RequestMessage" />
      <xs:element name="PostAudioSpeech_ResponseMessage" type="schemas:PostAudioSpeech_ResponseMessage" />
      <xs:element name="PostAudioTranscriptions_RequestMessage" type="schemas:PostAudioTranscriptions_RequestMessage" />
      <xs:element name="PostAudioTranscriptions_ResponseMessage" type="schemas:PostAudioTranscriptions_ResponseMessage" />
      <xs:element name="PostAudioTranslations_RequestMessage" type="schemas:PostAudioTranslations_RequestMessage" />
      <xs:element name="PostAudioTranslations_ResponseMessage" type="schemas:PostAudioTranslations_ResponseMessage" />
      <xs:element name="PostChatCompletions_RequestMessage" type="schemas:PostChatCompletions_RequestMessage" />
      <xs:element name="PostChatCompletions_ResponseMessage" type="schemas:PostChatCompletions_ResponseMessage" />
      <xs:element name="PostCompletions_RequestMessage" type="schemas:PostCompletions_RequestMessage" />
      <xs:element name="PostCompletions_ResponseMessage" type="schemas:PostCompletions_ResponseMessage" />
      <xs:element name="PostEmbeddings_RequestMessage" type="schemas:PostEmbeddings_RequestMessage" />
      <xs:element name="PostEmbeddings_ResponseMessage" type="schemas:PostEmbeddings_ResponseMessage" />
      <xs:element name="PostFiles_RequestMessage" type="schemas:PostFiles_RequestMessage" />
      <xs:element name="PostFiles_ResponseMessage" type="schemas:PostFiles_ResponseMessage" />
      <xs:element name="DeleteFilesByFile_id_RequestMessage" type="schemas:DeleteFilesByFile_id_RequestMessage" />
      <xs:element name="DeleteFilesByFile_id_ResponseMessage" type="schemas:DeleteFilesByFile_id_ResponseMessage" />
      <xs:element name="GetFilesContentByFile_id_RequestMessage" type="schemas:GetFilesContentByFile_id_RequestMessage" />
      <xs:element name="GetFilesContentByFile_id_ResponseMessage" type="schemas:GetFilesContentByFile_id_ResponseMessage" />
      <xs:element name="GetFiles_RequestMessage" type="schemas:GetFiles_RequestMessage" />
      <xs:element name="GetFiles_ResponseMessage" type="schemas:GetFiles_ResponseMessage" />
      <xs:element name="GetFilesByFile_id_RequestMessage" type="schemas:GetFilesByFile_id_RequestMessage" />
      <xs:element name="GetFilesByFile_id_ResponseMessage" type="schemas:GetFilesByFile_id_ResponseMessage" />
      <xs:element name="PostFine_tuningJobsCancelByFine_tuning_job_id_RequestMessage" type="schemas:PostFine_tuningJobsCancelByFine_tuning_job_id_RequestMessage" />
      <xs:element name="PostFine_tuningJobsCancelByFine_tuning_job_id_ResponseMessage" type="schemas:PostFine_tuningJobsCancelByFine_tuning_job_id_ResponseMessage" />
      <xs:element name="PostFine_tuningJobs_RequestMessage" type="schemas:PostFine_tuningJobs_RequestMessage" />
      <xs:element name="PostFine_tuningJobs_ResponseMessage" type="schemas:PostFine_tuningJobs_ResponseMessage" />
      <xs:element name="GetFine_tuningJobsEventsByFine_tuning_job_id_RequestMessage" type="schemas:GetFine_tuningJobsEventsByFine_tuning_job_id_RequestMessage" />
      <xs:element name="GetFine_tuningJobsEventsByFine_tuning_job_id_ResponseMessage" type="schemas:GetFine_tuningJobsEventsByFine_tuning_job_id_ResponseMessage" />
      <xs:element name="GetFine_tuningJobsCheckpointsByFine_tuning_job_id_RequestMessage" type="schemas:GetFine_tuningJobsCheckpointsByFine_tuning_job_id_RequestMessage" />
      <xs:element name="GetFine_tuningJobsCheckpointsByFine_tuning_job_id_ResponseMessage" type="schemas:GetFine_tuningJobsCheckpointsByFine_tuning_job_id_ResponseMessage" />
      <xs:element name="GetFine_tuningJobs_RequestMessage" type="schemas:GetFine_tuningJobs_RequestMessage" />
      <xs:element name="GetFine_tuningJobs_ResponseMessage" type="schemas:GetFine_tuningJobs_ResponseMessage" />
      <xs:element name="GetFine_tuningJobsByFine_tuning_job_id_RequestMessage" type="schemas:GetFine_tuningJobsByFine_tuning_job_id_RequestMessage" />
      <xs:element name="GetFine_tuningJobsByFine_tuning_job_id_ResponseMessage" type="schemas:GetFine_tuningJobsByFine_tuning_job_id_ResponseMessage" />
      <xs:element name="PostImagesGenerations_RequestMessage" type="schemas:PostImagesGenerations_RequestMessage" />
      <xs:element name="PostImagesGenerations_ResponseMessage" type="schemas:PostImagesGenerations_ResponseMessage" />
      <xs:element name="PostImagesEdits_RequestMessage" type="schemas:PostImagesEdits_RequestMessage" />
      <xs:element name="PostImagesEdits_ResponseMessage" type="schemas:PostImagesEdits_ResponseMessage" />
      <xs:element name="PostImagesVariations_RequestMessage" type="schemas:PostImagesVariations_RequestMessage" />
      <xs:element name="PostImagesVariations_ResponseMessage" type="schemas:PostImagesVariations_ResponseMessage" />
      <xs:element name="DeleteModelsByModel_RequestMessage" type="schemas:DeleteModelsByModel_RequestMessage" />
      <xs:element name="DeleteModelsByModel_ResponseMessage" type="schemas:DeleteModelsByModel_ResponseMessage" />
      <xs:element name="GetModels_RequestMessage" type="schemas:GetModels_RequestMessage" />
      <xs:element name="GetModels_ResponseMessage" type="schemas:GetModels_ResponseMessage" />
      <xs:element name="GetModelsByModel_RequestMessage" type="schemas:GetModelsByModel_RequestMessage" />
      <xs:element name="GetModelsByModel_ResponseMessage" type="schemas:GetModelsByModel_ResponseMessage" />
      <xs:element name="PostModerations_RequestMessage" type="schemas:PostModerations_RequestMessage" />
      <xs:element name="PostModerations_ResponseMessage" type="schemas:PostModerations_ResponseMessage" />
      <xs:complexType name="AssistantFileObject">
        <xs:annotation>
          <xs:documentation>A list of [Files](/docs/api-reference/files) attached to an &#x60;assistant&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The identifier, which can be referenced in API endpoints.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always &#x60;assistant.file&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="created_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the assistant file was created.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="assistant_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The assistant ID that the file is attached to.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AssistantObject">
        <xs:annotation>
          <xs:documentation>Represents an &#x60;assistant&#x60; that can call the model and use tools.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The identifier, which can be referenced in API endpoints.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always &#x60;assistant&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="created_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the assistant was created.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="name">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The name of the assistant. The maximum length is 256 characters. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:string">
                <xs:maxLength value="256" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="1" name="description">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The description of the assistant. The maximum length is 512 characters. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:string">
                <xs:maxLength value="512" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="1" name="model" type="xs:string">
            <xs:annotation>
              <xs:documentation>ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="instructions">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The system instructions that the assistant uses. The maximum length is 256,000 characters. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:string">
                <xs:maxLength value="256000" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="128" name="tools" type="schemas:AssistantObject_tools_inner">
            <xs:annotation>
              <xs:documentation>A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types &#x60;code_interpreter&#x60;, &#x60;retrieval&#x60;, or &#x60;function&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="20" name="file_ids" type="xs:string">
            <xs:annotation>
              <xs:documentation>A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="metadata" type="xs:anyType">
            <xs:annotation>
              <xs:documentation>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AssistantObjectToolsInner">
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of tool being defined: &#x60;code_interpreter&#x60;</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="function" type="schemas:FunctionObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AssistantStreamEvent">
        <xs:annotation>
          <xs:documentation>Represents an event emitted when streaming a Run.  Each event in a server-sent events stream has an &#x60;event&#x60; and &#x60;data&#x60; property:  &#x60;&#x60;&#x60; event: thread.created data: {\&quot;id\&quot;: \&quot;thread_123\&quot;, \&quot;object\&quot;: \&quot;thread\&quot;, ...} &#x60;&#x60;&#x60;  We emit events whenever a new object is created, transitions to a new state, or is being streamed in parts (deltas). For example, we emit &#x60;thread.run.created&#x60; when a new run is created, &#x60;thread.run.completed&#x60; when a run completes, and so on. When an Assistant chooses to create a message during a run, we emit a &#x60;thread.message.created event&#x60;, a &#x60;thread.message.in_progress&#x60; event, many &#x60;thread.message.delta&#x60; events, and finally a &#x60;thread.message.completed&#x60; event.  We may add additional events over time, so we recommend handling unknown events gracefully in your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to integrate the Assistants API with streaming. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:Data" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AssistantToolsCode">
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of tool being defined: &#x60;code_interpreter&#x60;</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AssistantToolsFunction">
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of tool being defined: &#x60;function&#x60;</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="function" type="schemas:FunctionObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AssistantToolsRetrieval">
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of tool being defined: &#x60;retrieval&#x60;</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AssistantsApiNamedToolChoice">
        <xs:annotation>
          <xs:documentation>Specifies a tool the model should use. Use to force the model to call a specific tool.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of the tool. If type is &#x60;function&#x60;, the function name must be set</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="function" type="schemas:ChatCompletionNamedToolChoice_function" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AssistantsApiResponseFormat">
        <xs:annotation>
          <xs:documentation>An object describing the expected output of the model. If &#x60;json_object&#x60; only &#x60;function&#x60; type &#x60;tools&#x60; are allowed to be passed to the Run. If &#x60;text&#x60; the model can return text or any value needed. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" default="TypeEnum.TEXT" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Must be one of &#x60;text&#x60; or &#x60;json_object&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AssistantsApiResponseFormatOption">
        <xs:annotation>
          <xs:documentation>Specifies the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than &#x60;gpt-3.5-turbo-1106&#x60;.  Setting to &#x60;{ \&quot;type\&quot;: \&quot;json_object\&quot; }&#x60; enables JSON mode, which guarantees the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \&quot;stuck\&quot; request. Also note that the message content may be partially cut off if &#x60;finish_reason&#x3D;\&quot;length\&quot;&#x60;, which indicates the generation exceeded &#x60;max_tokens&#x60; or the conversation exceeded the max context length. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" default="TypeEnum.TEXT" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Must be one of &#x60;text&#x60; or &#x60;json_object&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AssistantsApiToolChoiceOption">
        <xs:annotation>
          <xs:documentation>Controls which (if any) tool is called by the model. &#x60;none&#x60; means the model will not call any tools and instead generates a message. &#x60;auto&#x60; is the default value and means the model can pick between generating a message or calling a tool. Specifying a particular tool like &#x60;{\&quot;type\&quot;: \&quot;TOOL_TYPE\&quot;}&#x60; or &#x60;{\&quot;type\&quot;: \&quot;function\&quot;, \&quot;function\&quot;: {\&quot;name\&quot;: \&quot;my_function\&quot;}}&#x60; forces the model to call that tool. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of the tool. If type is &#x60;function&#x60;, the function name must be set</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="function" type="schemas:ChatCompletionNamedToolChoice_function" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionFunctionCallOption">
        <xs:annotation>
          <xs:documentation>Specifying a particular function via &#x60;{\&quot;name\&quot;: \&quot;my_function\&quot;}&#x60; forces the model to call that function. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the function to call.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionFunctions">
        <xs:sequence>
          <xs:element minOccurs="0" name="description" type="xs:string">
            <xs:annotation>
              <xs:documentation>A description of what the function does, used by the model to choose when and how to call the function.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="parameters" type="schemas:">
            <xs:annotation>
              <xs:documentation>The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.   Omitting &#x60;parameters&#x60; defines a function with an empty parameter list.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionMessageToolCall">
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the tool call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of the tool. Currently, only &#x60;function&#x60; is supported.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="function" type="schemas:ChatCompletionMessageToolCall_function" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionMessageToolCallChunk">
        <xs:sequence>
          <xs:element minOccurs="1" name="index" type="xs:integer" />
          <xs:element minOccurs="0" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the tool call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of the tool. Currently, only &#x60;function&#x60; is supported.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="function" type="schemas:ChatCompletionMessageToolCallChunk_function" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionMessageToolCallChunkFunction">
        <xs:sequence>
          <xs:element minOccurs="0" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the function to call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="arguments" type="xs:string">
            <xs:annotation>
              <xs:documentation>The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionMessageToolCallFunction">
        <xs:annotation>
          <xs:documentation>The function that the model called.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the function to call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="arguments" type="xs:string">
            <xs:annotation>
              <xs:documentation>The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionNamedToolChoice">
        <xs:annotation>
          <xs:documentation>Specifies a tool the model should use. Use to force the model to call a specific function.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of the tool. Currently, only &#x60;function&#x60; is supported.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="function" type="schemas:ChatCompletionNamedToolChoice_function" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionNamedToolChoiceFunction">
        <xs:sequence>
          <xs:element minOccurs="1" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the function to call.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionRequestAssistantMessage">
        <xs:sequence>
          <xs:element minOccurs="0" name="content" type="xs:string">
            <xs:annotation>
              <xs:documentation>The contents of the assistant message. Required unless &#x60;tool_calls&#x60; or &#x60;function_call&#x60; is specified. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="role" type="schemas:Role">
            <xs:annotation>
              <xs:documentation>The role of the messages author, in this case &#x60;assistant&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>An optional name for the participant. Provides the model information to differentiate between participants of the same role.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="tool_calls" type="schemas:ChatCompletionMessageToolCall">
            <xs:annotation>
              <xs:documentation>The tool calls generated by the model, such as function calls.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="function_call" type="schemas:ChatCompletionRequestAssistantMessage_function_call" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionRequestAssistantMessageFunctionCall">
        <xs:annotation>
          <xs:documentation>Deprecated and replaced by &#x60;tool_calls&#x60;. The name and arguments of a function that should be called, as generated by the model.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="arguments" type="xs:string">
            <xs:annotation>
              <xs:documentation>The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the function to call.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionRequestFunctionMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="role" type="schemas:Role">
            <xs:annotation>
              <xs:documentation>The role of the messages author, in this case &#x60;function&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="content" type="xs:string">
            <xs:annotation>
              <xs:documentation>The contents of the function message.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the function to call.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionRequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="content" type="xs:string">
            <xs:annotation>
              <xs:documentation>The contents of the function message.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="role" type="schemas:Role">
            <xs:annotation>
              <xs:documentation>The role of the messages author, in this case &#x60;function&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the function to call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="tool_calls" type="schemas:ChatCompletionMessageToolCall">
            <xs:annotation>
              <xs:documentation>The tool calls generated by the model, such as function calls.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="function_call" type="schemas:ChatCompletionRequestAssistantMessage_function_call" />
          <xs:element minOccurs="1" name="tool_call_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>Tool call that this message is responding to.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionRequestMessageContentPart">
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of the content part.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="text" type="xs:string">
            <xs:annotation>
              <xs:documentation>The text content.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="image_url" type="schemas:ChatCompletionRequestMessageContentPartImage_image_url" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionRequestMessageContentPartImage">
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of the content part.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="image_url" type="schemas:ChatCompletionRequestMessageContentPartImage_image_url" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionRequestMessageContentPartImageImageUrl">
        <xs:sequence>
          <xs:element minOccurs="1" name="url" type="xs:uRI">
            <xs:annotation>
              <xs:documentation>Either a URL of the image or the base64 encoded image data.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="DetailEnum.AUTO" name="detail" type="schemas:Detail">
            <xs:annotation>
              <xs:documentation>Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision/low-or-high-fidelity-image-understanding).</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionRequestMessageContentPartText">
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of the content part.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="text" type="xs:string">
            <xs:annotation>
              <xs:documentation>The text content.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionRequestSystemMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="content" type="xs:string">
            <xs:annotation>
              <xs:documentation>The contents of the system message.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="role" type="schemas:Role">
            <xs:annotation>
              <xs:documentation>The role of the messages author, in this case &#x60;system&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>An optional name for the participant. Provides the model information to differentiate between participants of the same role.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionRequestToolMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="role" type="schemas:Role">
            <xs:annotation>
              <xs:documentation>The role of the messages author, in this case &#x60;tool&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="content" type="xs:string">
            <xs:annotation>
              <xs:documentation>The contents of the tool message.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="tool_call_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>Tool call that this message is responding to.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionRequestUserMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="content" type="schemas:ChatCompletionRequestUserMessage_content" />
          <xs:element minOccurs="1" name="role" type="schemas:Role">
            <xs:annotation>
              <xs:documentation>The role of the messages author, in this case &#x60;user&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>An optional name for the participant. Provides the model information to differentiate between participants of the same role.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionRequestUserMessageContent">
        <xs:annotation>
          <xs:documentation>The contents of the user message. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionResponseMessage">
        <xs:annotation>
          <xs:documentation>A chat completion message generated by the model.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="content" type="xs:string">
            <xs:annotation>
              <xs:documentation>The contents of the message.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="tool_calls" type="schemas:ChatCompletionMessageToolCall">
            <xs:annotation>
              <xs:documentation>The tool calls generated by the model, such as function calls.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="role" type="schemas:Role">
            <xs:annotation>
              <xs:documentation>The role of the author of this message.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="function_call" type="schemas:ChatCompletionRequestAssistantMessage_function_call" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionStreamResponseDelta">
        <xs:annotation>
          <xs:documentation>A chat completion delta generated by streamed model responses.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="content" type="xs:string">
            <xs:annotation>
              <xs:documentation>The contents of the chunk message.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="function_call" type="schemas:ChatCompletionStreamResponseDelta_function_call" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="tool_calls" type="schemas:ChatCompletionMessageToolCallChunk" />
          <xs:element minOccurs="0" name="role" type="schemas:Role">
            <xs:annotation>
              <xs:documentation>The role of the author of this message.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionStreamResponseDeltaFunctionCall">
        <xs:annotation>
          <xs:documentation>Deprecated and replaced by &#x60;tool_calls&#x60;. The name and arguments of a function that should be called, as generated by the model.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="arguments" type="xs:string">
            <xs:annotation>
              <xs:documentation>The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the function to call.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionTokenLogprob">
        <xs:sequence>
          <xs:element minOccurs="1" name="token" type="xs:string">
            <xs:annotation>
              <xs:documentation>The token.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="logprob" type="xs:double">
            <xs:annotation>
              <xs:documentation>The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value &#x60;-9999.0&#x60; is used to signify that the token is very unlikely.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="bytes" type="xs:integer">
            <xs:annotation>
              <xs:documentation>A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be &#x60;null&#x60; if there is no bytes representation for the token.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="top_logprobs" type="schemas:ChatCompletionTokenLogprob_top_logprobs_inner">
            <xs:annotation>
              <xs:documentation>List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested &#x60;top_logprobs&#x60; returned.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionTokenLogprobTopLogprobsInner">
        <xs:sequence>
          <xs:element minOccurs="1" name="token" type="xs:string">
            <xs:annotation>
              <xs:documentation>The token.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="logprob" type="xs:double">
            <xs:annotation>
              <xs:documentation>The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value &#x60;-9999.0&#x60; is used to signify that the token is very unlikely.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="bytes" type="xs:integer">
            <xs:annotation>
              <xs:documentation>A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be &#x60;null&#x60; if there is no bytes representation for the token.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionTool">
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of the tool. Currently, only &#x60;function&#x60; is supported.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="function" type="schemas:FunctionObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChatCompletionToolChoiceOption">
        <xs:annotation>
          <xs:documentation>Controls which (if any) function is called by the model. &#x60;none&#x60; means the model will not call a function and instead generates a message. &#x60;auto&#x60; means the model can pick between generating a message or calling a function. Specifying a particular function via &#x60;{\&quot;type\&quot;: \&quot;function\&quot;, \&quot;function\&quot;: {\&quot;name\&quot;: \&quot;my_function\&quot;}}&#x60; forces the model to call that function.  &#x60;none&#x60; is the default when no functions are present. &#x60;auto&#x60; is the default if functions are present. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of the tool. Currently, only &#x60;function&#x60; is supported.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="function" type="schemas:ChatCompletionNamedToolChoice_function" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CompletionUsage">
        <xs:annotation>
          <xs:documentation>Usage statistics for the completion request.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="completion_tokens" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Number of tokens in the generated completion.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="prompt_tokens" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Number of tokens in the prompt.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="total_tokens" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Total number of tokens used in the request (prompt + completion).</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateAssistantFileRequest">
        <xs:sequence>
          <xs:element minOccurs="1" name="file_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>A [File](/docs/api-reference/files) ID (with &#x60;purpose&#x3D;\&quot;assistants\&quot;&#x60;) that the assistant should use. Useful for tools like &#x60;retrieval&#x60; and &#x60;code_interpreter&#x60; that can access files.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateAssistantRequest">
        <xs:sequence>
          <xs:element minOccurs="1" name="model" type="schemas:CreateAssistantRequest_model" />
          <xs:element minOccurs="0" name="name">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The name of the assistant. The maximum length is 256 characters. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:string">
                <xs:maxLength value="256" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="description">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The description of the assistant. The maximum length is 512 characters. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:string">
                <xs:maxLength value="512" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="instructions">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The system instructions that the assistant uses. The maximum length is 256,000 characters. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:string">
                <xs:maxLength value="256000" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="128" name="tools" type="schemas:AssistantObject_tools_inner">
            <xs:annotation>
              <xs:documentation>A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types &#x60;code_interpreter&#x60;, &#x60;retrieval&#x60;, or &#x60;function&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="20" name="file_ids" type="xs:string">
            <xs:annotation>
              <xs:documentation>A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="metadata" type="xs:anyType">
            <xs:annotation>
              <xs:documentation>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateAssistantRequestModel">
        <xs:annotation>
          <xs:documentation>ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateChatCompletionFunctionResponse">
        <xs:annotation>
          <xs:documentation>Represents a chat completion response returned by model, based on the provided input.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>A unique identifier for the chat completion.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="choices" type="schemas:CreateChatCompletionFunctionResponse_choices_inner">
            <xs:annotation>
              <xs:documentation>A list of chat completion choices. Can be more than one if &#x60;n&#x60; is greater than 1.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="created" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) of when the chat completion was created.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="model" type="xs:string">
            <xs:annotation>
              <xs:documentation>The model used for the chat completion.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="system_fingerprint" type="xs:string">
            <xs:annotation>
              <xs:documentation>This fingerprint represents the backend configuration that the model runs with.  Can be used in conjunction with the &#x60;seed&#x60; request parameter to understand when backend changes have been made that might impact determinism. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always &#x60;chat.completion&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="usage" type="schemas:CompletionUsage" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateChatCompletionFunctionResponseChoicesInner">
        <xs:sequence>
          <xs:element minOccurs="1" name="finish_reason" type="schemas:FinishUnderscorereason">
            <xs:annotation>
              <xs:documentation>The reason the model stopped generating tokens. This will be &#x60;stop&#x60; if the model hit a natural stop point or a provided stop sequence, &#x60;length&#x60; if the maximum number of tokens specified in the request was reached, &#x60;content_filter&#x60; if content was omitted due to a flag from our content filters, or &#x60;function_call&#x60; if the model called a function. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="index" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The index of the choice in the list of choices.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="message" type="schemas:ChatCompletionResponseMessage" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateChatCompletionRequest">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="messages" type="schemas:ChatCompletionRequestMessage">
            <xs:annotation>
              <xs:documentation>A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="model" type="schemas:CreateChatCompletionRequest_model" />
          <xs:element minOccurs="0" default="0" name="frequency_penalty">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:long">
                <xs:maxInclusive value="2" />
                <xs:minInclusive value="-2" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="logit_bias" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="logprobs" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the &#x60;content&#x60; of &#x60;message&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="top_logprobs">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. &#x60;logprobs&#x60; must be set to &#x60;true&#x60; if this parameter is used.</xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:maxInclusive value="20" />
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="max_tokens" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.  The total length of input tokens and generated tokens is limited by the model&#39;s context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="1" name="n">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep &#x60;n&#x60; as &#x60;1&#x60; to minimize costs.</xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:maxInclusive value="128" />
                <xs:minInclusive value="1" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" default="0" name="presence_penalty">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:long">
                <xs:maxInclusive value="2" />
                <xs:minInclusive value="-2" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="response_format" type="schemas:CreateChatCompletionRequest_response_format" />
          <xs:element minOccurs="0" name="seed">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same &#x60;seed&#x60; and parameters should return the same result. Determinism is not guaranteed, and you should refer to the &#x60;system_fingerprint&#x60; response parameter to monitor changes in the backend. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:maxInclusive value="9223372036854775807" />
                <xs:minInclusive value="-9223372036854775808" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="stop" type="schemas:CreateChatCompletionRequest_stop" />
          <xs:element minOccurs="0" default="false" name="stream" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a &#x60;data: [DONE]&#x60; message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="1" name="temperature">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:long">
                <xs:maxInclusive value="2" />
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" default="1" name="top_p">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:long">
                <xs:maxInclusive value="1" />
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="tools" type="schemas:ChatCompletionTool">
            <xs:annotation>
              <xs:documentation>A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="tool_choice" type="schemas:ChatCompletionToolChoiceOption" />
          <xs:element minOccurs="0" name="user" type="xs:string">
            <xs:annotation>
              <xs:documentation>A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="function_call" type="schemas:CreateChatCompletionRequest_function_call" />
          <xs:element minOccurs="1" maxOccurs="128" name="functions" type="schemas:ChatCompletionFunctions">
            <xs:annotation>
              <xs:documentation>Deprecated in favor of &#x60;tools&#x60;.  A list of functions the model may generate JSON inputs for. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateChatCompletionRequestFunctionCall">
        <xs:annotation>
          <xs:documentation>Deprecated in favor of &#x60;tool_choice&#x60;.  Controls which (if any) function is called by the model. &#x60;none&#x60; means the model will not call a function and instead generates a message. &#x60;auto&#x60; means the model can pick between generating a message or calling a function. Specifying a particular function via &#x60;{\&quot;name\&quot;: \&quot;my_function\&quot;}&#x60; forces the model to call that function.  &#x60;none&#x60; is the default when no functions are present. &#x60;auto&#x60; is the default if functions are present. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the function to call.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateChatCompletionRequestModel">
        <xs:annotation>
          <xs:documentation>ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateChatCompletionRequestResponseFormat">
        <xs:annotation>
          <xs:documentation>An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than &#x60;gpt-3.5-turbo-1106&#x60;.  Setting to &#x60;{ \&quot;type\&quot;: \&quot;json_object\&quot; }&#x60; enables JSON mode, which guarantees the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \&quot;stuck\&quot; request. Also note that the message content may be partially cut off if &#x60;finish_reason&#x3D;\&quot;length\&quot;&#x60;, which indicates the generation exceeded &#x60;max_tokens&#x60; or the conversation exceeded the max context length. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" default="TypeEnum.TEXT" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Must be one of &#x60;text&#x60; or &#x60;json_object&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateChatCompletionRequestStop">
        <xs:annotation>
          <xs:documentation>Up to 4 sequences where the API will stop generating further tokens. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateChatCompletionResponse">
        <xs:annotation>
          <xs:documentation>Represents a chat completion response returned by model, based on the provided input.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>A unique identifier for the chat completion.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="choices" type="schemas:CreateChatCompletionResponse_choices_inner">
            <xs:annotation>
              <xs:documentation>A list of chat completion choices. Can be more than one if &#x60;n&#x60; is greater than 1.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="created" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) of when the chat completion was created.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="model" type="xs:string">
            <xs:annotation>
              <xs:documentation>The model used for the chat completion.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="system_fingerprint" type="xs:string">
            <xs:annotation>
              <xs:documentation>This fingerprint represents the backend configuration that the model runs with.  Can be used in conjunction with the &#x60;seed&#x60; request parameter to understand when backend changes have been made that might impact determinism. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always &#x60;chat.completion&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="usage" type="schemas:CompletionUsage" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateChatCompletionResponseChoicesInner">
        <xs:sequence>
          <xs:element minOccurs="1" name="finish_reason" type="schemas:FinishUnderscorereason">
            <xs:annotation>
              <xs:documentation>The reason the model stopped generating tokens. This will be &#x60;stop&#x60; if the model hit a natural stop point or a provided stop sequence, &#x60;length&#x60; if the maximum number of tokens specified in the request was reached, &#x60;content_filter&#x60; if content was omitted due to a flag from our content filters, &#x60;tool_calls&#x60; if the model called a tool, or &#x60;function_call&#x60; (deprecated) if the model called a function. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="index" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The index of the choice in the list of choices.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="message" type="schemas:ChatCompletionResponseMessage" />
          <xs:element minOccurs="1" name="logprobs" type="schemas:CreateChatCompletionResponse_choices_inner_logprobs" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateChatCompletionResponseChoicesInnerLogprobs">
        <xs:annotation>
          <xs:documentation>Log probability information for the choice.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="content" type="schemas:ChatCompletionTokenLogprob">
            <xs:annotation>
              <xs:documentation>A list of message content tokens with log probability information.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateChatCompletionStreamResponse">
        <xs:annotation>
          <xs:documentation>Represents a streamed chunk of a chat completion response returned by model, based on the provided input.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>A unique identifier for the chat completion. Each chunk has the same ID.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="choices" type="schemas:CreateChatCompletionStreamResponse_choices_inner">
            <xs:annotation>
              <xs:documentation>A list of chat completion choices. Can be more than one if &#x60;n&#x60; is greater than 1.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="created" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="model" type="xs:string">
            <xs:annotation>
              <xs:documentation>The model to generate the completion.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="system_fingerprint" type="xs:string">
            <xs:annotation>
              <xs:documentation>This fingerprint represents the backend configuration that the model runs with. Can be used in conjunction with the &#x60;seed&#x60; request parameter to understand when backend changes have been made that might impact determinism. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always &#x60;chat.completion.chunk&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateChatCompletionStreamResponseChoicesInner">
        <xs:sequence>
          <xs:element minOccurs="1" name="delta" type="schemas:ChatCompletionStreamResponseDelta" />
          <xs:element minOccurs="0" name="logprobs" type="schemas:CreateChatCompletionResponse_choices_inner_logprobs" />
          <xs:element minOccurs="1" name="finish_reason" type="schemas:FinishUnderscorereason">
            <xs:annotation>
              <xs:documentation>The reason the model stopped generating tokens. This will be &#x60;stop&#x60; if the model hit a natural stop point or a provided stop sequence, &#x60;length&#x60; if the maximum number of tokens specified in the request was reached, &#x60;content_filter&#x60; if content was omitted due to a flag from our content filters, &#x60;tool_calls&#x60; if the model called a tool, or &#x60;function_call&#x60; (deprecated) if the model called a function. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="index" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The index of the choice in the list of choices.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateCompletionRequest">
        <xs:sequence>
          <xs:element minOccurs="1" name="model" type="schemas:CreateCompletionRequest_model" />
          <xs:element minOccurs="1" name="prompt" type="schemas:CreateCompletionRequest_prompt" />
          <xs:element minOccurs="0" default="1" name="best_of">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>Generates &#x60;best_of&#x60; completions server-side and returns the \&quot;best\&quot; (the one with the highest log probability per token). Results cannot be streamed.  When used with &#x60;n&#x60;, &#x60;best_of&#x60; controls the number of candidate completions and &#x60;n&#x60; specifies how many to return – &#x60;best_of&#x60; must be greater than &#x60;n&#x60;.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for &#x60;max_tokens&#x60; and &#x60;stop&#x60;. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:maxInclusive value="20" />
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="echo" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Echo back the prompt in addition to the completion </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="0" name="frequency_penalty">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:long">
                <xs:maxInclusive value="2" />
                <xs:minInclusive value="-2" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="logit_bias" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view&#x3D;bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass &#x60;{\&quot;50256\&quot;: -100}&#x60; to prevent the &lt;|endoftext|&gt; token from being generated. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="logprobs">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>Include the log probabilities on the &#x60;logprobs&#x60; most likely output tokens, as well the chosen tokens. For example, if &#x60;logprobs&#x60; is 5, the API will return a list of the 5 most likely tokens. The API will always return the &#x60;logprob&#x60; of the sampled token, so there may be up to &#x60;logprobs+1&#x60; elements in the response.  The maximum value for &#x60;logprobs&#x60; is 5. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:maxInclusive value="5" />
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" default="16" name="max_tokens">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The maximum number of [tokens](/tokenizer) that can be generated in the completion.  The token count of your prompt plus &#x60;max_tokens&#x60; cannot exceed the model&#39;s context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" default="1" name="n">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for &#x60;max_tokens&#x60; and &#x60;stop&#x60;. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:maxInclusive value="128" />
                <xs:minInclusive value="1" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" default="0" name="presence_penalty">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:long">
                <xs:maxInclusive value="2" />
                <xs:minInclusive value="-2" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="seed">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same &#x60;seed&#x60; and parameters should return the same result.  Determinism is not guaranteed, and you should refer to the &#x60;system_fingerprint&#x60; response parameter to monitor changes in the backend. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:maxInclusive value="9223372036854775807" />
                <xs:minInclusive value="-9223372036854775808" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="stop" type="schemas:CreateCompletionRequest_stop" />
          <xs:element minOccurs="0" default="false" name="stream" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a &#x60;data: [DONE]&#x60; message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="suffix" type="xs:string">
            <xs:annotation>
              <xs:documentation>The suffix that comes after a completion of inserted text.  This parameter is only supported for &#x60;gpt-3.5-turbo-instruct&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="1" name="temperature">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:long">
                <xs:maxInclusive value="2" />
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" default="1" name="top_p">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:long">
                <xs:maxInclusive value="1" />
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="user" type="xs:string">
            <xs:annotation>
              <xs:documentation>A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateCompletionRequestModel">
        <xs:annotation>
          <xs:documentation>ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateCompletionRequestPrompt">
        <xs:annotation>
          <xs:documentation>The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.  Note that &lt;|endoftext|&gt; is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateCompletionRequestStop">
        <xs:annotation>
          <xs:documentation>Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateCompletionResponse">
        <xs:annotation>
          <xs:documentation>Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint). </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>A unique identifier for the completion.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="choices" type="schemas:CreateCompletionResponse_choices_inner">
            <xs:annotation>
              <xs:documentation>The list of completion choices the model generated for the input prompt.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="created" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) of when the completion was created.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="model" type="xs:string">
            <xs:annotation>
              <xs:documentation>The model used for completion.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="system_fingerprint" type="xs:string">
            <xs:annotation>
              <xs:documentation>This fingerprint represents the backend configuration that the model runs with.  Can be used in conjunction with the &#x60;seed&#x60; request parameter to understand when backend changes have been made that might impact determinism. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always \&quot;text_completion\&quot;</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="usage" type="schemas:CompletionUsage" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateCompletionResponseChoicesInner">
        <xs:sequence>
          <xs:element minOccurs="1" name="finish_reason" type="schemas:FinishUnderscorereason">
            <xs:annotation>
              <xs:documentation>The reason the model stopped generating tokens. This will be &#x60;stop&#x60; if the model hit a natural stop point or a provided stop sequence, &#x60;length&#x60; if the maximum number of tokens specified in the request was reached, or &#x60;content_filter&#x60; if content was omitted due to a flag from our content filters. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="index" type="xs:integer" />
          <xs:element minOccurs="1" name="logprobs" type="schemas:CreateCompletionResponse_choices_inner_logprobs" />
          <xs:element minOccurs="1" name="text" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateCompletionResponseChoicesInnerLogprobs">
        <xs:sequence>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="text_offset" type="xs:integer" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="token_logprobs" type="xs:number" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="tokens" type="xs:string" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="top_logprobs" type="schemas:number" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateEmbeddingRequest">
        <xs:sequence>
          <xs:element minOccurs="1" name="input" type="schemas:CreateEmbeddingRequest_input" />
          <xs:element minOccurs="1" name="model" type="schemas:CreateEmbeddingRequest_model" />
          <xs:element minOccurs="0" default="EncodingUnderscoreformatEnum.FLOAT" name="encoding_format" type="schemas:EncodingUnderscoreformat">
            <xs:annotation>
              <xs:documentation>The format to return the embeddings in. Can be either &#x60;float&#x60; or [&#x60;base64&#x60;](https://pypi.org/project/pybase64/).</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="dimensions">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The number of dimensions the resulting output embeddings should have. Only supported in &#x60;text-embedding-3&#x60; and later models. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="1" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="user" type="xs:string">
            <xs:annotation>
              <xs:documentation>A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateEmbeddingRequestInput">
        <xs:annotation>
          <xs:documentation>Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for &#x60;text-embedding-ada-002&#x60;), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateEmbeddingRequestModel">
        <xs:annotation>
          <xs:documentation>ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateEmbeddingResponse">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="data" type="schemas:Embedding">
            <xs:annotation>
              <xs:documentation>The list of embeddings generated by the model.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="model" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the model used to generate the embedding.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always \&quot;list\&quot;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="usage" type="schemas:CreateEmbeddingResponse_usage" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateEmbeddingResponseUsage">
        <xs:annotation>
          <xs:documentation>The usage information for the request.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="prompt_tokens" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The number of tokens used by the prompt.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="total_tokens" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The total number of tokens used by the request.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateFineTuningJobRequest">
        <xs:sequence>
          <xs:element minOccurs="1" name="model" type="schemas:CreateFineTuningJobRequest_model" />
          <xs:element minOccurs="1" name="training_file" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="hyperparameters" type="schemas:CreateFineTuningJobRequest_hyperparameters" />
          <xs:element minOccurs="0" name="suffix">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a &#x60;suffix&#x60; of \&quot;custom-model-name\&quot; would produce a model name like &#x60;ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel&#x60;. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:string">
                <xs:maxLength value="40" />
                <xs:minLength value="1" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="validation_file" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="integrations" type="schemas:CreateFineTuningJobRequest_integrations_inner">
            <xs:annotation>
              <xs:documentation>A list of integrations to enable for your fine-tuning job.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="seed">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases. If a seed is not specified, one will be generated for you. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:maxInclusive value="2147483647" />
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateFineTuningJobRequestHyperparameters">
        <xs:annotation>
          <xs:documentation>The hyperparameters used for the fine-tuning job.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="batch_size" type="schemas:CreateFineTuningJobRequest_hyperparameters_batch_size" />
          <xs:element minOccurs="0" name="learning_rate_multiplier" type="schemas:CreateFineTuningJobRequest_hyperparameters_learning_rate_multiplier" />
          <xs:element minOccurs="0" name="n_epochs" type="schemas:CreateFineTuningJobRequest_hyperparameters_n_epochs" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateFineTuningJobRequestHyperparametersBatchSize">
        <xs:annotation>
          <xs:documentation>Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateFineTuningJobRequestHyperparametersLearningRateMultiplier">
        <xs:annotation>
          <xs:documentation>Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateFineTuningJobRequestHyperparametersNEpochs">
        <xs:annotation>
          <xs:documentation>The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateFineTuningJobRequestIntegrationsInner">
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:CreateFineTuningJobRequest_integrations_inner_type" />
          <xs:element minOccurs="1" name="wandb" type="schemas:CreateFineTuningJobRequest_integrations_inner_wandb" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateFineTuningJobRequestIntegrationsInnerType">
        <xs:annotation>
          <xs:documentation>The type of integration to enable. Currently, only \&quot;wandb\&quot; (Weights and Biases) is supported. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateFineTuningJobRequestIntegrationsInnerWandb">
        <xs:annotation>
          <xs:documentation>The settings for your integration with Weights and Biases. This payload specifies the project that metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags to your run, and set a default entity (team, username, etc) to be associated with your run. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="project" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the project that the new run will be created under. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>A display name to set for the run. If not set, we will use the Job ID as the name. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="entity" type="xs:string">
            <xs:annotation>
              <xs:documentation>The entity to use for the run. This allows you to set the team or username of the WandB user that you would like associated with the run. If not set, the default entity for the registered WandB API key is used. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="tags" type="xs:string">
            <xs:annotation>
              <xs:documentation>A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some default tags are generated by OpenAI: \&quot;openai/finetune\&quot;, \&quot;openai/{base-model}\&quot;, \&quot;openai/{ftjob-abcdef}\&quot;. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateFineTuningJobRequestModel">
        <xs:annotation>
          <xs:documentation>The name of the model to fine-tune. You can select one of the [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned). </xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateImageEditRequestModel">
        <xs:annotation>
          <xs:documentation>The model to use for image generation. Only &#x60;dall-e-2&#x60; is supported at this time.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateImageRequest">
        <xs:sequence>
          <xs:element minOccurs="1" name="prompt" type="xs:string">
            <xs:annotation>
              <xs:documentation>A text description of the desired image(s). The maximum length is 1000 characters for &#x60;dall-e-2&#x60; and 4000 characters for &#x60;dall-e-3&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="model" type="schemas:CreateImageRequest_model" />
          <xs:element minOccurs="0" default="1" name="n">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported.</xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:maxInclusive value="10" />
                <xs:minInclusive value="1" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" default="QualityEnum.STANDARD" name="quality" type="schemas:Quality">
            <xs:annotation>
              <xs:documentation>The quality of the image that will be generated. &#x60;hd&#x60; creates images with finer details and greater consistency across the image. This param is only supported for &#x60;dall-e-3&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="ResponseUnderscoreformatEnum.URL" name="response_format" type="schemas:ResponseUnderscoreformat">
            <xs:annotation>
              <xs:documentation>The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="SizeEnum._1024X1024" name="size" type="schemas:Size">
            <xs:annotation>
              <xs:documentation>The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60; for &#x60;dall-e-2&#x60;. Must be one of &#x60;1024x1024&#x60;, &#x60;1792x1024&#x60;, or &#x60;1024x1792&#x60; for &#x60;dall-e-3&#x60; models.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="StyleEnum.VIVID" name="style" type="schemas:Style">
            <xs:annotation>
              <xs:documentation>The style of the generated images. Must be one of &#x60;vivid&#x60; or &#x60;natural&#x60;. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for &#x60;dall-e-3&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="user" type="xs:string">
            <xs:annotation>
              <xs:documentation>A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateImageRequestModel">
        <xs:annotation>
          <xs:documentation>The model to use for image generation.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateMessageRequest">
        <xs:sequence>
          <xs:element minOccurs="1" name="role" type="schemas:Role">
            <xs:annotation>
              <xs:documentation>The role of the entity that is creating the message. Allowed values include: - &#x60;user&#x60;: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages. - &#x60;assistant&#x60;: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="content">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The content of the message.</xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:string">
                <xs:maxLength value="256000" />
                <xs:minLength value="1" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="10" name="file_ids" type="xs:string">
            <xs:annotation>
              <xs:documentation>A list of [File](/docs/api-reference/files) IDs that the message should use. There can be a maximum of 10 files attached to a message. Useful for tools like &#x60;retrieval&#x60; and &#x60;code_interpreter&#x60; that can access and use files.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="metadata" type="xs:anyType">
            <xs:annotation>
              <xs:documentation>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateModerationRequest">
        <xs:sequence>
          <xs:element minOccurs="1" name="input" type="schemas:CreateModerationRequest_input" />
          <xs:element minOccurs="0" name="model" type="schemas:CreateModerationRequest_model" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateModerationRequestInput">
        <xs:annotation>
          <xs:documentation>The input text to classify</xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateModerationRequestModel">
        <xs:annotation>
          <xs:documentation>Two content moderations models are available: &#x60;text-moderation-stable&#x60; and &#x60;text-moderation-latest&#x60;.  The default is &#x60;text-moderation-latest&#x60; which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use &#x60;text-moderation-stable&#x60;, we will provide advanced notice before updating the model. Accuracy of &#x60;text-moderation-stable&#x60; may be slightly lower than for &#x60;text-moderation-latest&#x60;. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateModerationResponse">
        <xs:annotation>
          <xs:documentation>Represents if a given text input is potentially harmful.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The unique identifier for the moderation request.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="model" type="xs:string">
            <xs:annotation>
              <xs:documentation>The model used to generate the moderation results.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="results" type="schemas:CreateModerationResponse_results_inner">
            <xs:annotation>
              <xs:documentation>A list of moderation objects.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateModerationResponseResultsInner">
        <xs:sequence>
          <xs:element minOccurs="1" name="flagged" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether any of the below categories are flagged.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="categories" type="schemas:CreateModerationResponse_results_inner_categories" />
          <xs:element minOccurs="1" name="category_scores" type="schemas:CreateModerationResponse_results_inner_category_scores" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateModerationResponseResultsInnerCategories">
        <xs:annotation>
          <xs:documentation>A list of the categories, and whether they are flagged or not.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="hate" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="hate/threatening" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="harassment" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Content that expresses, incites, or promotes harassing language towards any target.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="harassment/threatening" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Harassment content that also includes violence or serious harm towards any target.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="self-harm" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="self-harm/intent" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="self-harm/instructions" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="sexual" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="sexual/minors" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Sexual content that includes an individual who is under 18 years old.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="violence" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Content that depicts death, violence, or physical injury.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="violence/graphic" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Content that depicts death, violence, or physical injury in graphic detail.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateModerationResponseResultsInnerCategoryScores">
        <xs:annotation>
          <xs:documentation>A list of the categories along with their scores as predicted by model.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="hate" type="xs:double">
            <xs:annotation>
              <xs:documentation>The score for the category &#39;hate&#39;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="hate/threatening" type="xs:double">
            <xs:annotation>
              <xs:documentation>The score for the category &#39;hate/threatening&#39;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="harassment" type="xs:double">
            <xs:annotation>
              <xs:documentation>The score for the category &#39;harassment&#39;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="harassment/threatening" type="xs:double">
            <xs:annotation>
              <xs:documentation>The score for the category &#39;harassment/threatening&#39;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="self-harm" type="xs:double">
            <xs:annotation>
              <xs:documentation>The score for the category &#39;self-harm&#39;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="self-harm/intent" type="xs:double">
            <xs:annotation>
              <xs:documentation>The score for the category &#39;self-harm/intent&#39;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="self-harm/instructions" type="xs:double">
            <xs:annotation>
              <xs:documentation>The score for the category &#39;self-harm/instructions&#39;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="sexual" type="xs:double">
            <xs:annotation>
              <xs:documentation>The score for the category &#39;sexual&#39;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="sexual/minors" type="xs:double">
            <xs:annotation>
              <xs:documentation>The score for the category &#39;sexual/minors&#39;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="violence" type="xs:double">
            <xs:annotation>
              <xs:documentation>The score for the category &#39;violence&#39;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="violence/graphic" type="xs:double">
            <xs:annotation>
              <xs:documentation>The score for the category &#39;violence/graphic&#39;.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateRunRequest">
        <xs:sequence>
          <xs:element minOccurs="1" name="assistant_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="model" type="schemas:CreateRunRequest_model" />
          <xs:element minOccurs="0" name="instructions" type="xs:string">
            <xs:annotation>
              <xs:documentation>Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="additional_instructions" type="xs:string">
            <xs:annotation>
              <xs:documentation>Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="additional_messages" type="schemas:CreateMessageRequest">
            <xs:annotation>
              <xs:documentation>Adds additional messages to the thread before creating the run.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="20" name="tools" type="schemas:AssistantObject_tools_inner">
            <xs:annotation>
              <xs:documentation>Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="metadata" type="xs:anyType">
            <xs:annotation>
              <xs:documentation>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="1" name="temperature">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:long">
                <xs:maxInclusive value="2" />
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="stream" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>If &#x60;true&#x60;, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a &#x60;data: [DONE]&#x60; message. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="max_prompt_tokens">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status &#x60;complete&#x60;. See &#x60;incomplete_details&#x60; for more info. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="256" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="max_completion_tokens">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status &#x60;complete&#x60;. See &#x60;incomplete_details&#x60; for more info. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="256" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="truncation_strategy" type="schemas:TruncationObject" />
          <xs:element minOccurs="0" name="tool_choice" type="schemas:AssistantsApiToolChoiceOption" />
          <xs:element minOccurs="0" name="response_format" type="schemas:AssistantsApiResponseFormatOption" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateRunRequestModel">
        <xs:annotation>
          <xs:documentation>The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateSpeechRequest">
        <xs:sequence>
          <xs:element minOccurs="1" name="model" type="schemas:CreateSpeechRequest_model" />
          <xs:element minOccurs="1" name="input">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The text to generate audio for. The maximum length is 4096 characters.</xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:string">
                <xs:maxLength value="4096" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="1" name="voice" type="schemas:Voice">
            <xs:annotation>
              <xs:documentation>The voice to use when generating the audio. Supported voices are &#x60;alloy&#x60;, &#x60;echo&#x60;, &#x60;fable&#x60;, &#x60;onyx&#x60;, &#x60;nova&#x60;, and &#x60;shimmer&#x60;. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="ResponseUnderscoreformatEnum.MP3" name="response_format" type="schemas:ResponseUnderscoreformat">
            <xs:annotation>
              <xs:documentation>The format to audio in. Supported formats are &#x60;mp3&#x60;, &#x60;opus&#x60;, &#x60;aac&#x60;, &#x60;flac&#x60;, &#x60;wav&#x60;, and &#x60;pcm&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="1.0" name="speed">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The speed of the generated audio. Select a value from &#x60;0.25&#x60; to &#x60;4.0&#x60;. &#x60;1.0&#x60; is the default.</xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:long">
                <xs:maxInclusive value="4.0" />
                <xs:minInclusive value="0.25" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateSpeechRequestModel">
        <xs:annotation>
          <xs:documentation>One of the available [TTS models](/docs/models/tts): &#x60;tts-1&#x60; or &#x60;tts-1-hd&#x60; </xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateThreadAndRunRequest">
        <xs:sequence>
          <xs:element minOccurs="1" name="assistant_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="thread" type="schemas:CreateThreadRequest" />
          <xs:element minOccurs="0" name="model" type="schemas:CreateRunRequest_model" />
          <xs:element minOccurs="0" name="instructions" type="xs:string">
            <xs:annotation>
              <xs:documentation>Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="20" name="tools" type="schemas:CreateThreadAndRunRequest_tools_inner">
            <xs:annotation>
              <xs:documentation>Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="metadata" type="xs:anyType">
            <xs:annotation>
              <xs:documentation>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="1" name="temperature">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:long">
                <xs:maxInclusive value="2" />
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="stream" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>If &#x60;true&#x60;, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a &#x60;data: [DONE]&#x60; message. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="max_prompt_tokens">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status &#x60;complete&#x60;. See &#x60;incomplete_details&#x60; for more info. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="256" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="max_completion_tokens">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status &#x60;incomplete&#x60;. See &#x60;incomplete_details&#x60; for more info. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="256" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="truncation_strategy" type="schemas:TruncationObject" />
          <xs:element minOccurs="0" name="tool_choice" type="schemas:AssistantsApiToolChoiceOption" />
          <xs:element minOccurs="0" name="response_format" type="schemas:AssistantsApiResponseFormatOption" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateThreadAndRunRequestToolsInner">
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of tool being defined: &#x60;code_interpreter&#x60;</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="function" type="schemas:FunctionObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateThreadRequest">
        <xs:sequence>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="messages" type="schemas:CreateMessageRequest">
            <xs:annotation>
              <xs:documentation>A list of [messages](/docs/api-reference/messages) to start the thread with.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="metadata" type="xs:anyType">
            <xs:annotation>
              <xs:documentation>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateTranscription200Response">
        <xs:sequence>
          <xs:element minOccurs="1" name="text" type="xs:string">
            <xs:annotation>
              <xs:documentation>The transcribed text.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="language" type="xs:string">
            <xs:annotation>
              <xs:documentation>The language of the input audio.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="duration" type="xs:string">
            <xs:annotation>
              <xs:documentation>The duration of the input audio.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="words" type="schemas:TranscriptionWord">
            <xs:annotation>
              <xs:documentation>Extracted words and their corresponding timestamps.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="segments" type="schemas:TranscriptionSegment">
            <xs:annotation>
              <xs:documentation>Segments of the transcribed text and their corresponding details.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateTranscriptionRequestModel">
        <xs:annotation>
          <xs:documentation>ID of the model to use. Only &#x60;whisper-1&#x60; (which is powered by our open source Whisper V2 model) is currently available. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateTranscriptionResponseJson">
        <xs:annotation>
          <xs:documentation>Represents a transcription response returned by model, based on the provided input.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="text" type="xs:string">
            <xs:annotation>
              <xs:documentation>The transcribed text.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateTranscriptionResponseVerboseJson">
        <xs:annotation>
          <xs:documentation>Represents a verbose json transcription response returned by model, based on the provided input.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="language" type="xs:string">
            <xs:annotation>
              <xs:documentation>The language of the input audio.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="duration" type="xs:string">
            <xs:annotation>
              <xs:documentation>The duration of the input audio.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="text" type="xs:string">
            <xs:annotation>
              <xs:documentation>The transcribed text.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="words" type="schemas:TranscriptionWord">
            <xs:annotation>
              <xs:documentation>Extracted words and their corresponding timestamps.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="segments" type="schemas:TranscriptionSegment">
            <xs:annotation>
              <xs:documentation>Segments of the transcribed text and their corresponding details.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateTranslation200Response">
        <xs:sequence>
          <xs:element minOccurs="1" name="text" type="xs:string">
            <xs:annotation>
              <xs:documentation>The translated text.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="language" type="xs:string">
            <xs:annotation>
              <xs:documentation>The language of the output translation (always &#x60;english&#x60;).</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="duration" type="xs:string">
            <xs:annotation>
              <xs:documentation>The duration of the input audio.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="segments" type="schemas:TranscriptionSegment">
            <xs:annotation>
              <xs:documentation>Segments of the translated text and their corresponding details.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateTranslationResponseJson">
        <xs:sequence>
          <xs:element minOccurs="1" name="text" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateTranslationResponseVerboseJson">
        <xs:sequence>
          <xs:element minOccurs="1" name="language" type="xs:string">
            <xs:annotation>
              <xs:documentation>The language of the output translation (always &#x60;english&#x60;).</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="duration" type="xs:string">
            <xs:annotation>
              <xs:documentation>The duration of the input audio.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="text" type="xs:string">
            <xs:annotation>
              <xs:documentation>The translated text.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="segments" type="schemas:TranscriptionSegment">
            <xs:annotation>
              <xs:documentation>Segments of the translated text and their corresponding details.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteAssistantFileResponse">
        <xs:annotation>
          <xs:documentation>Deletes the association between the assistant and the file, but does not delete the [File](/docs/api-reference/files) object itself.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string" />
          <xs:element minOccurs="1" name="deleted" type="xs:boolean" />
          <xs:element minOccurs="1" name="object" type="schemas:Object" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteAssistantResponse">
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string" />
          <xs:element minOccurs="1" name="deleted" type="xs:boolean" />
          <xs:element minOccurs="1" name="object" type="schemas:Object" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteFileResponse">
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string" />
          <xs:element minOccurs="1" name="object" type="schemas:Object" />
          <xs:element minOccurs="1" name="deleted" type="xs:boolean" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteMessageResponse">
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string" />
          <xs:element minOccurs="1" name="deleted" type="xs:boolean" />
          <xs:element minOccurs="1" name="object" type="schemas:Object" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteModelResponse">
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string" />
          <xs:element minOccurs="1" name="deleted" type="xs:boolean" />
          <xs:element minOccurs="1" name="object" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteThreadResponse">
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string" />
          <xs:element minOccurs="1" name="deleted" type="xs:boolean" />
          <xs:element minOccurs="1" name="object" type="schemas:Object" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DoneEvent">
        <xs:annotation>
          <xs:documentation>Occurs when a stream ends.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:Data" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Embedding">
        <xs:annotation>
          <xs:documentation>Represents an embedding vector returned by embedding endpoint. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="index" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The index of the embedding in the list of embeddings.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="embedding" type="xs:number">
            <xs:annotation>
              <xs:documentation>The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always \&quot;embedding\&quot;.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Error">
        <xs:sequence>
          <xs:element minOccurs="1" name="code" type="xs:string" />
          <xs:element minOccurs="1" name="message" type="xs:string" />
          <xs:element minOccurs="1" name="param" type="xs:string" />
          <xs:element minOccurs="1" name="type" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ErrorEvent">
        <xs:annotation>
          <xs:documentation>Occurs when an [error](/docs/guides/error-codes/api-errors) occurs. This can happen due to an internal server error or a timeout.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:Error" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ErrorResponse">
        <xs:sequence>
          <xs:element minOccurs="1" name="error" type="schemas:Error" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="FineTuningIntegration">
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of the integration being enabled for the fine-tuning job</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="wandb" type="schemas:CreateFineTuningJobRequest_integrations_inner_wandb" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="FineTuningJob">
        <xs:annotation>
          <xs:documentation>The &#x60;fine_tuning.job&#x60; object represents a fine-tuning job that has been created through the API. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The object identifier, which can be referenced in the API endpoints.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="created_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the fine-tuning job was created.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="error" type="schemas:FineTuningJob_error" />
          <xs:element minOccurs="1" name="fine_tuned_model" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="finished_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="hyperparameters" type="schemas:FineTuningJob_hyperparameters" />
          <xs:element minOccurs="1" name="model" type="xs:string">
            <xs:annotation>
              <xs:documentation>The base model that is being fine-tuned.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always \&quot;fine_tuning.job\&quot;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="organization_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The organization that owns the fine-tuning job.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="result_files" type="xs:string">
            <xs:annotation>
              <xs:documentation>The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="status" type="schemas:Status">
            <xs:annotation>
              <xs:documentation>The current status of the fine-tuning job, which can be either &#x60;validating_files&#x60;, &#x60;queued&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="trained_tokens" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="training_file" type="xs:string">
            <xs:annotation>
              <xs:documentation>The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="validation_file" type="xs:string">
            <xs:annotation>
              <xs:documentation>The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="5" name="integrations" type="schemas:FineTuningJob_integrations_inner">
            <xs:annotation>
              <xs:documentation>A list of integrations to enable for this fine-tuning job.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="seed" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The seed used for the fine-tuning job.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="FineTuningJobCheckpoint">
        <xs:annotation>
          <xs:documentation>The &#x60;fine_tuning.job.checkpoint&#x60; object represents a model checkpoint for a fine-tuning job that is ready to use. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The checkpoint identifier, which can be referenced in the API endpoints.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="created_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the checkpoint was created.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="fine_tuned_model_checkpoint" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the fine-tuned checkpoint model that is created.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="step_number" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The step number that the checkpoint was created at.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="metrics" type="schemas:FineTuningJobCheckpoint_metrics" />
          <xs:element minOccurs="1" name="fine_tuning_job_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the fine-tuning job that this checkpoint was created from.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always \&quot;fine_tuning.job.checkpoint\&quot;.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="FineTuningJobCheckpointMetrics">
        <xs:annotation>
          <xs:documentation>Metrics at the step number during the fine-tuning job.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="step" type="xs:double" />
          <xs:element minOccurs="0" name="train_loss" type="xs:double" />
          <xs:element minOccurs="0" name="train_mean_token_accuracy" type="xs:double" />
          <xs:element minOccurs="0" name="valid_loss" type="xs:double" />
          <xs:element minOccurs="0" name="valid_mean_token_accuracy" type="xs:double" />
          <xs:element minOccurs="0" name="full_valid_loss" type="xs:double" />
          <xs:element minOccurs="0" name="full_valid_mean_token_accuracy" type="xs:double" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="FineTuningJobError">
        <xs:annotation>
          <xs:documentation>For fine-tuning jobs that have &#x60;failed&#x60;, this will contain more information on the cause of the failure.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="code" type="xs:string">
            <xs:annotation>
              <xs:documentation>A machine-readable error code.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="message" type="xs:string">
            <xs:annotation>
              <xs:documentation>A human-readable error message.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="param" type="xs:string">
            <xs:annotation>
              <xs:documentation>The parameter that was invalid, usually &#x60;training_file&#x60; or &#x60;validation_file&#x60;. This field will be null if the failure was not parameter-specific.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="FineTuningJobEvent">
        <xs:annotation>
          <xs:documentation>Fine-tuning job event object</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string" />
          <xs:element minOccurs="1" name="created_at" type="xs:integer" />
          <xs:element minOccurs="1" name="level" type="schemas:Level" />
          <xs:element minOccurs="1" name="message" type="xs:string" />
          <xs:element minOccurs="1" name="object" type="schemas:Object" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="FineTuningJobHyperparameters">
        <xs:annotation>
          <xs:documentation>The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="n_epochs" type="schemas:FineTuningJob_hyperparameters_n_epochs" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="FineTuningJobHyperparametersNEpochs">
        <xs:annotation>
          <xs:documentation>The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. \&quot;auto\&quot; decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="FineTuningJobIntegrationsInner">
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of the integration being enabled for the fine-tuning job</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="wandb" type="schemas:CreateFineTuningJobRequest_integrations_inner_wandb" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="FunctionObject">
        <xs:sequence>
          <xs:element minOccurs="0" name="description" type="xs:string">
            <xs:annotation>
              <xs:documentation>A description of what the function does, used by the model to choose when and how to call the function.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="parameters" type="schemas:">
            <xs:annotation>
              <xs:documentation>The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.   Omitting &#x60;parameters&#x60; defines a function with an empty parameter list.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Image">
        <xs:annotation>
          <xs:documentation>Represents the url or the content of an image generated by the OpenAI API.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="b64_json" type="xs:string">
            <xs:annotation>
              <xs:documentation>The base64-encoded JSON of the generated image, if &#x60;response_format&#x60; is &#x60;b64_json&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="url" type="xs:string">
            <xs:annotation>
              <xs:documentation>The URL of the generated image, if &#x60;response_format&#x60; is &#x60;url&#x60; (default).</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="revised_prompt" type="xs:string">
            <xs:annotation>
              <xs:documentation>The prompt that was used to generate the image, if there was any revision to the prompt.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ImagesResponse">
        <xs:sequence>
          <xs:element minOccurs="1" name="created" type="xs:integer" />
          <xs:element minOccurs="1" maxOccurs="unbounded" name="data" type="schemas:Image" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ListAssistantFilesResponse">
        <xs:sequence>
          <xs:element minOccurs="1" name="object" type="xs:string" />
          <xs:element minOccurs="1" maxOccurs="unbounded" name="data" type="schemas:AssistantFileObject" />
          <xs:element minOccurs="1" name="first_id" type="xs:string" />
          <xs:element minOccurs="1" name="last_id" type="xs:string" />
          <xs:element minOccurs="1" name="has_more" type="xs:boolean" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ListAssistantsResponse">
        <xs:sequence>
          <xs:element minOccurs="1" name="object" type="xs:string" />
          <xs:element minOccurs="1" maxOccurs="unbounded" name="data" type="schemas:AssistantObject" />
          <xs:element minOccurs="1" name="first_id" type="xs:string" />
          <xs:element minOccurs="1" name="last_id" type="xs:string" />
          <xs:element minOccurs="1" name="has_more" type="xs:boolean" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ListFilesResponse">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="data" type="schemas:OpenAIFile" />
          <xs:element minOccurs="1" name="object" type="schemas:Object" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ListFineTuningJobCheckpointsResponse">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="data" type="schemas:FineTuningJobCheckpoint" />
          <xs:element minOccurs="1" name="object" type="schemas:Object" />
          <xs:element minOccurs="0" name="first_id" type="xs:string" />
          <xs:element minOccurs="0" name="last_id" type="xs:string" />
          <xs:element minOccurs="1" name="has_more" type="xs:boolean" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ListFineTuningJobEventsResponse">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="data" type="schemas:FineTuningJobEvent" />
          <xs:element minOccurs="1" name="object" type="schemas:Object" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ListMessageFilesResponse">
        <xs:sequence>
          <xs:element minOccurs="1" name="object" type="xs:string" />
          <xs:element minOccurs="1" maxOccurs="unbounded" name="data" type="schemas:MessageFileObject" />
          <xs:element minOccurs="1" name="first_id" type="xs:string" />
          <xs:element minOccurs="1" name="last_id" type="xs:string" />
          <xs:element minOccurs="1" name="has_more" type="xs:boolean" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ListMessagesResponse">
        <xs:sequence>
          <xs:element minOccurs="1" name="object" type="xs:string" />
          <xs:element minOccurs="1" maxOccurs="unbounded" name="data" type="schemas:MessageObject" />
          <xs:element minOccurs="1" name="first_id" type="xs:string" />
          <xs:element minOccurs="1" name="last_id" type="xs:string" />
          <xs:element minOccurs="1" name="has_more" type="xs:boolean" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ListModelsResponse">
        <xs:sequence>
          <xs:element minOccurs="1" name="object" type="schemas:Object" />
          <xs:element minOccurs="1" maxOccurs="unbounded" name="data" type="schemas:Model" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ListPaginatedFineTuningJobsResponse">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="data" type="schemas:FineTuningJob" />
          <xs:element minOccurs="1" name="has_more" type="xs:boolean" />
          <xs:element minOccurs="1" name="object" type="schemas:Object" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ListRunStepsResponse">
        <xs:sequence>
          <xs:element minOccurs="1" name="object" type="xs:string" />
          <xs:element minOccurs="1" maxOccurs="unbounded" name="data" type="schemas:RunStepObject" />
          <xs:element minOccurs="1" name="first_id" type="xs:string" />
          <xs:element minOccurs="1" name="last_id" type="xs:string" />
          <xs:element minOccurs="1" name="has_more" type="xs:boolean" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ListRunsResponse">
        <xs:sequence>
          <xs:element minOccurs="1" name="object" type="xs:string" />
          <xs:element minOccurs="1" maxOccurs="unbounded" name="data" type="schemas:RunObject" />
          <xs:element minOccurs="1" name="first_id" type="xs:string" />
          <xs:element minOccurs="1" name="last_id" type="xs:string" />
          <xs:element minOccurs="1" name="has_more" type="xs:boolean" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ListThreadsResponse">
        <xs:sequence>
          <xs:element minOccurs="1" name="object" type="xs:string" />
          <xs:element minOccurs="1" maxOccurs="unbounded" name="data" type="schemas:ThreadObject" />
          <xs:element minOccurs="1" name="first_id" type="xs:string" />
          <xs:element minOccurs="1" name="last_id" type="xs:string" />
          <xs:element minOccurs="1" name="has_more" type="xs:boolean" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageContentImageFileObject">
        <xs:annotation>
          <xs:documentation>References an image [File](/docs/api-reference/files) in the content of a message.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;image_file&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="image_file" type="schemas:MessageContentImageFileObject_image_file" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageContentImageFileObjectImageFile">
        <xs:sequence>
          <xs:element minOccurs="1" name="file_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The [File](/docs/api-reference/files) ID of the image in the message content.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageContentTextAnnotationsFileCitationObject">
        <xs:annotation>
          <xs:documentation>A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \&quot;retrieval\&quot; tool to search files.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;file_citation&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="text" type="xs:string">
            <xs:annotation>
              <xs:documentation>The text in the message content that needs to be replaced.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="file_citation" type="schemas:MessageContentTextAnnotationsFileCitationObject_file_citation" />
          <xs:element minOccurs="1" name="start_index">
            <xs:simpleType>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="1" name="end_index">
            <xs:simpleType>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageContentTextAnnotationsFileCitationObjectFileCitation">
        <xs:sequence>
          <xs:element minOccurs="1" name="file_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the specific File the citation is from.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="quote" type="xs:string">
            <xs:annotation>
              <xs:documentation>The specific quote in the file.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageContentTextAnnotationsFilePathObject">
        <xs:annotation>
          <xs:documentation>A URL for the file that&#39;s generated when the assistant used the &#x60;code_interpreter&#x60; tool to generate a file.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;file_path&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="text" type="xs:string">
            <xs:annotation>
              <xs:documentation>The text in the message content that needs to be replaced.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="file_path" type="schemas:MessageContentTextAnnotationsFilePathObject_file_path" />
          <xs:element minOccurs="1" name="start_index">
            <xs:simpleType>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="1" name="end_index">
            <xs:simpleType>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageContentTextAnnotationsFilePathObjectFilePath">
        <xs:sequence>
          <xs:element minOccurs="1" name="file_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the file that was generated.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageContentTextObject">
        <xs:annotation>
          <xs:documentation>The text content that is part of a message.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;text&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="text" type="schemas:MessageContentTextObject_text" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageContentTextObjectText">
        <xs:sequence>
          <xs:element minOccurs="1" name="value" type="xs:string">
            <xs:annotation>
              <xs:documentation>The data that makes up the text.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="annotations" type="schemas:MessageContentTextObject_text_annotations_inner" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageContentTextObjectTextAnnotationsInner">
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;file_citation&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="text" type="xs:string">
            <xs:annotation>
              <xs:documentation>The text in the message content that needs to be replaced.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="file_citation" type="schemas:MessageContentTextAnnotationsFileCitationObject_file_citation" />
          <xs:element minOccurs="1" name="start_index">
            <xs:simpleType>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="1" name="end_index">
            <xs:simpleType>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="1" name="file_path" type="schemas:MessageContentTextAnnotationsFilePathObject_file_path" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageDeltaContentImageFileObject">
        <xs:annotation>
          <xs:documentation>References an image [File](/docs/api-reference/files) in the content of a message.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="index" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The index of the content part in the message.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;image_file&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="image_file" type="schemas:MessageDeltaContentImageFileObject_image_file" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageDeltaContentImageFileObjectImageFile">
        <xs:sequence>
          <xs:element minOccurs="0" name="file_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The [File](/docs/api-reference/files) ID of the image in the message content.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageDeltaContentTextAnnotationsFileCitationObject">
        <xs:annotation>
          <xs:documentation>A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \&quot;retrieval\&quot; tool to search files.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="index" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The index of the annotation in the text content part.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;file_citation&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="text" type="xs:string">
            <xs:annotation>
              <xs:documentation>The text in the message content that needs to be replaced.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="file_citation" type="schemas:MessageDeltaContentTextAnnotationsFileCitationObject_file_citation" />
          <xs:element minOccurs="0" name="start_index">
            <xs:simpleType>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="end_index">
            <xs:simpleType>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageDeltaContentTextAnnotationsFileCitationObjectFileCitation">
        <xs:sequence>
          <xs:element minOccurs="0" name="file_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the specific File the citation is from.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="quote" type="xs:string">
            <xs:annotation>
              <xs:documentation>The specific quote in the file.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageDeltaContentTextAnnotationsFilePathObject">
        <xs:annotation>
          <xs:documentation>A URL for the file that&#39;s generated when the assistant used the &#x60;code_interpreter&#x60; tool to generate a file.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="index" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The index of the annotation in the text content part.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;file_path&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="text" type="xs:string">
            <xs:annotation>
              <xs:documentation>The text in the message content that needs to be replaced.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="file_path" type="schemas:MessageDeltaContentTextAnnotationsFilePathObject_file_path" />
          <xs:element minOccurs="0" name="start_index">
            <xs:simpleType>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="end_index">
            <xs:simpleType>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageDeltaContentTextAnnotationsFilePathObjectFilePath">
        <xs:sequence>
          <xs:element minOccurs="0" name="file_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the file that was generated.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageDeltaContentTextObject">
        <xs:annotation>
          <xs:documentation>The text content that is part of a message.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="index" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The index of the content part in the message.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;text&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="text" type="schemas:MessageDeltaContentTextObject_text" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageDeltaContentTextObjectText">
        <xs:sequence>
          <xs:element minOccurs="0" name="value" type="xs:string">
            <xs:annotation>
              <xs:documentation>The data that makes up the text.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="annotations" type="schemas:MessageDeltaContentTextObject_text_annotations_inner" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageDeltaContentTextObjectTextAnnotationsInner">
        <xs:sequence>
          <xs:element minOccurs="1" name="index" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The index of the annotation in the text content part.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;file_citation&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="text" type="xs:string">
            <xs:annotation>
              <xs:documentation>The text in the message content that needs to be replaced.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="file_citation" type="schemas:MessageDeltaContentTextAnnotationsFileCitationObject_file_citation" />
          <xs:element minOccurs="0" name="start_index">
            <xs:simpleType>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="end_index">
            <xs:simpleType>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="file_path" type="schemas:MessageDeltaContentTextAnnotationsFilePathObject_file_path" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageDeltaObject">
        <xs:annotation>
          <xs:documentation>Represents a message delta i.e. any changed fields on a message during streaming. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The identifier of the message, which can be referenced in API endpoints.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always &#x60;thread.message.delta&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="delta" type="schemas:MessageDeltaObject_delta" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageDeltaObjectDelta">
        <xs:annotation>
          <xs:documentation>The delta containing the fields that have changed on the Message.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="role" type="schemas:Role">
            <xs:annotation>
              <xs:documentation>The entity that produced the message. One of &#x60;user&#x60; or &#x60;assistant&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="content" type="schemas:MessageDeltaObject_delta_content_inner">
            <xs:annotation>
              <xs:documentation>The content of the message in array of text and/or images.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="10" name="file_ids" type="xs:string">
            <xs:annotation>
              <xs:documentation>A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageDeltaObjectDeltaContentInner">
        <xs:sequence>
          <xs:element minOccurs="1" name="index" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The index of the content part in the message.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;image_file&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="image_file" type="schemas:MessageDeltaContentImageFileObject_image_file" />
          <xs:element minOccurs="0" name="text" type="schemas:MessageDeltaContentTextObject_text" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageFileObject">
        <xs:annotation>
          <xs:documentation>A list of files attached to a &#x60;message&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The identifier, which can be referenced in API endpoints.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always &#x60;thread.message.file&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="created_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the message file was created.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="message_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the [message](/docs/api-reference/messages) that the [File](/docs/api-reference/files) is attached to.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageObject">
        <xs:annotation>
          <xs:documentation>Represents a message within a [thread](/docs/api-reference/threads).</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The identifier, which can be referenced in API endpoints.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always &#x60;thread.message&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="created_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the message was created.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="thread_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The [thread](/docs/api-reference/threads) ID that this message belongs to.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="status" type="schemas:Status">
            <xs:annotation>
              <xs:documentation>The status of the message, which can be either &#x60;in_progress&#x60;, &#x60;incomplete&#x60;, or &#x60;completed&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="incomplete_details" type="schemas:MessageObject_incomplete_details" />
          <xs:element minOccurs="1" name="completed_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the message was completed.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="incomplete_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the message was marked as incomplete.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="role" type="schemas:Role">
            <xs:annotation>
              <xs:documentation>The entity that produced the message. One of &#x60;user&#x60; or &#x60;assistant&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="content" type="schemas:MessageObject_content_inner">
            <xs:annotation>
              <xs:documentation>The content of the message in array of text and/or images.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="assistant_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="run_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is &#x60;null&#x60; when messages are created manually using the create message or create thread endpoints.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="10" name="file_ids" type="xs:string">
            <xs:annotation>
              <xs:documentation>A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="metadata" type="xs:anyType">
            <xs:annotation>
              <xs:documentation>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageObjectContentInner">
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;image_file&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="image_file" type="schemas:MessageContentImageFileObject_image_file" />
          <xs:element minOccurs="1" name="text" type="schemas:MessageContentTextObject_text" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageObjectIncompleteDetails">
        <xs:annotation>
          <xs:documentation>On an incomplete message, details about why the message is incomplete.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="reason" type="schemas:Reason">
            <xs:annotation>
              <xs:documentation>The reason the message is incomplete.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageStreamEvent">
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:MessageObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageStreamEventOneOf">
        <xs:annotation>
          <xs:documentation>Occurs when a [message](/docs/api-reference/messages/object) is created.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:MessageObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageStreamEventOneOf1">
        <xs:annotation>
          <xs:documentation>Occurs when a [message](/docs/api-reference/messages/object) moves to an &#x60;in_progress&#x60; state.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:MessageObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageStreamEventOneOf2">
        <xs:annotation>
          <xs:documentation>Occurs when parts of a [Message](/docs/api-reference/messages/object) are being streamed.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:MessageDeltaObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageStreamEventOneOf3">
        <xs:annotation>
          <xs:documentation>Occurs when a [message](/docs/api-reference/messages/object) is completed.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:MessageObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessageStreamEventOneOf4">
        <xs:annotation>
          <xs:documentation>Occurs when a [message](/docs/api-reference/messages/object) ends before it is completed.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:MessageObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Model">
        <xs:annotation>
          <xs:documentation>Describes an OpenAI model offering that can be used with the API.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The model identifier, which can be referenced in the API endpoints.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="created" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) when the model was created.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always \&quot;model\&quot;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="owned_by" type="xs:string">
            <xs:annotation>
              <xs:documentation>The organization that owns the model.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ModifyAssistantRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="model" type="xs:string" />
          <xs:element minOccurs="0" name="name">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The name of the assistant. The maximum length is 256 characters. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:string">
                <xs:maxLength value="256" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="description">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The description of the assistant. The maximum length is 512 characters. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:string">
                <xs:maxLength value="512" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="instructions">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The system instructions that the assistant uses. The maximum length is 256,000 characters. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:string">
                <xs:maxLength value="256000" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="128" name="tools" type="schemas:AssistantObject_tools_inner">
            <xs:annotation>
              <xs:documentation>A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types &#x60;code_interpreter&#x60;, &#x60;retrieval&#x60;, or &#x60;function&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="20" name="file_ids" type="xs:string">
            <xs:annotation>
              <xs:documentation>A list of [File](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. If a file was previously attached to the list but does not show up in the list, it will be deleted from the assistant. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="metadata" type="xs:anyType">
            <xs:annotation>
              <xs:documentation>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ModifyMessageRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="metadata" type="xs:anyType">
            <xs:annotation>
              <xs:documentation>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ModifyRunRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="metadata" type="xs:anyType">
            <xs:annotation>
              <xs:documentation>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ModifyThreadRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="metadata" type="xs:anyType">
            <xs:annotation>
              <xs:documentation>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="OpenAIFile">
        <xs:annotation>
          <xs:documentation>The &#x60;File&#x60; object represents a document that has been uploaded to OpenAI.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The file identifier, which can be referenced in the API endpoints.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="bytes" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The size of the file, in bytes.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="created_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the file was created.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="filename" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the file.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always &#x60;file&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="purpose" type="schemas:Purpose">
            <xs:annotation>
              <xs:documentation>The intended purpose of the file. Supported values are &#x60;fine-tune&#x60;, &#x60;fine-tune-results&#x60;, &#x60;assistants&#x60;, and &#x60;assistants_output&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="status" type="schemas:Status">
            <xs:annotation>
              <xs:documentation>Deprecated. The current status of the file, which can be either &#x60;uploaded&#x60;, &#x60;processed&#x60;, or &#x60;error&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="status_details" type="xs:string">
            <xs:annotation>
              <xs:documentation>Deprecated. For details on why a fine-tuning training file failed validation, see the &#x60;error&#x60; field on &#x60;fine_tuning.job&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunCompletionUsage">
        <xs:annotation>
          <xs:documentation>Usage statistics related to the run. This value will be &#x60;null&#x60; if the run is not in a terminal state (i.e. &#x60;in_progress&#x60;, &#x60;queued&#x60;, etc.).</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="completion_tokens" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Number of completion tokens used over the course of the run.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="prompt_tokens" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Number of prompt tokens used over the course of the run.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="total_tokens" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Total number of tokens used (prompt + completion).</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunObject">
        <xs:annotation>
          <xs:documentation>Represents an execution run on a [thread](/docs/api-reference/threads).</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The identifier, which can be referenced in API endpoints.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always &#x60;thread.run&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="created_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the run was created.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="thread_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="assistant_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="status" type="schemas:Status">
            <xs:annotation>
              <xs:documentation>The status of the run, which can be either &#x60;queued&#x60;, &#x60;in_progress&#x60;, &#x60;requires_action&#x60;, &#x60;cancelling&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="required_action" type="schemas:RunObject_required_action" />
          <xs:element minOccurs="1" name="last_error" type="schemas:RunObject_last_error" />
          <xs:element minOccurs="1" name="expires_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the run will expire.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="started_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the run was started.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="cancelled_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the run was cancelled.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="failed_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the run failed.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="completed_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the run was completed.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="incomplete_details" type="schemas:RunObject_incomplete_details" />
          <xs:element minOccurs="1" name="model" type="xs:string">
            <xs:annotation>
              <xs:documentation>The model that the [assistant](/docs/api-reference/assistants) used for this run.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="instructions" type="xs:string">
            <xs:annotation>
              <xs:documentation>The instructions that the [assistant](/docs/api-reference/assistants) used for this run.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="20" name="tools" type="schemas:AssistantObject_tools_inner">
            <xs:annotation>
              <xs:documentation>The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="file_ids" type="xs:string">
            <xs:annotation>
              <xs:documentation>The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="metadata" type="xs:anyType">
            <xs:annotation>
              <xs:documentation>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="usage" type="schemas:RunCompletionUsage" />
          <xs:element minOccurs="0" name="temperature" type="xs:double">
            <xs:annotation>
              <xs:documentation>The sampling temperature used for this run. If not set, defaults to 1.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="max_prompt_tokens">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The maximum number of prompt tokens specified to have been used over the course of the run. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="256" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="1" name="max_completion_tokens">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The maximum number of completion tokens specified to have been used over the course of the run. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="256" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="1" name="truncation_strategy" type="schemas:TruncationObject" />
          <xs:element minOccurs="1" name="tool_choice" type="schemas:AssistantsApiToolChoiceOption" />
          <xs:element minOccurs="1" name="response_format" type="schemas:AssistantsApiResponseFormatOption" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunObjectIncompleteDetails">
        <xs:annotation>
          <xs:documentation>Details on why the run is incomplete. Will be &#x60;null&#x60; if the run is not incomplete.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="reason" type="schemas:Reason">
            <xs:annotation>
              <xs:documentation>The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunObjectLastError">
        <xs:annotation>
          <xs:documentation>The last error associated with this run. Will be &#x60;null&#x60; if there are no errors.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="code" type="schemas:Code">
            <xs:annotation>
              <xs:documentation>One of &#x60;server_error&#x60;, &#x60;rate_limit_exceeded&#x60;, or &#x60;invalid_prompt&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="message" type="xs:string">
            <xs:annotation>
              <xs:documentation>A human-readable description of the error.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunObjectRequiredAction">
        <xs:annotation>
          <xs:documentation>Details on the action required to continue the run. Will be &#x60;null&#x60; if no action is required.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>For now, this is always &#x60;submit_tool_outputs&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="submit_tool_outputs" type="schemas:RunObject_required_action_submit_tool_outputs" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunObjectRequiredActionSubmitToolOutputs">
        <xs:annotation>
          <xs:documentation>Details on the tool outputs needed for this run to continue.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="tool_calls" type="schemas:RunToolCallObject">
            <xs:annotation>
              <xs:documentation>A list of the relevant tool calls.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepCompletionUsage">
        <xs:annotation>
          <xs:documentation>Usage statistics related to the run step. This value will be &#x60;null&#x60; while the run step&#39;s status is &#x60;in_progress&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="completion_tokens" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Number of completion tokens used over the course of the run step.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="prompt_tokens" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Number of prompt tokens used over the course of the run step.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="total_tokens" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Total number of tokens used (prompt + completion).</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDeltaObject">
        <xs:annotation>
          <xs:documentation>Represents a run step delta i.e. any changed fields on a run step during streaming. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The identifier of the run step, which can be referenced in API endpoints.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always &#x60;thread.run.step.delta&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="delta" type="schemas:RunStepDeltaObject_delta" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDeltaObjectDelta">
        <xs:annotation>
          <xs:documentation>The delta containing the fields that have changed on the run step.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="step_details" type="schemas:RunStepDeltaObject_delta_step_details" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDeltaObjectDeltaStepDetails">
        <xs:annotation>
          <xs:documentation>The details of the run step.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;message_creation&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="message_creation" type="schemas:RunStepDeltaStepDetailsMessageCreationObject_message_creation" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="tool_calls" type="schemas:RunStepDeltaStepDetailsToolCallsObject_tool_calls_inner">
            <xs:annotation>
              <xs:documentation>An array of tool calls the run step was involved in. These can be associated with one of three types of tools: &#x60;code_interpreter&#x60;, &#x60;retrieval&#x60;, or &#x60;function&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDeltaStepDetailsMessageCreationObject">
        <xs:annotation>
          <xs:documentation>Details of the message creation by the run step.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;message_creation&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="message_creation" type="schemas:RunStepDeltaStepDetailsMessageCreationObject_message_creation" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDeltaStepDetailsMessageCreationObjectMessageCreation">
        <xs:sequence>
          <xs:element minOccurs="0" name="message_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the message that was created by this run step.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDeltaStepDetailsToolCallsCodeObject">
        <xs:annotation>
          <xs:documentation>Details of the Code Interpreter tool call the run step was involved in.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="index" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The index of the tool call in the tool calls array.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the tool call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of tool call. This is always going to be &#x60;code_interpreter&#x60; for this type of tool call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="code_interpreter" type="schemas:RunStepDeltaStepDetailsToolCallsCodeObject_code_interpreter" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter">
        <xs:annotation>
          <xs:documentation>The Code Interpreter tool call definition.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="input" type="xs:string">
            <xs:annotation>
              <xs:documentation>The input to the Code Interpreter tool call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="outputs" type="schemas:RunStepDeltaStepDetailsToolCallsCodeObject_code_interpreter_outputs_inner">
            <xs:annotation>
              <xs:documentation>The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (&#x60;logs&#x60;) or images (&#x60;image&#x60;). Each of these are represented by a different object type.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner">
        <xs:sequence>
          <xs:element minOccurs="1" name="index" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The index of the output in the outputs array.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;logs&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="logs" type="xs:string">
            <xs:annotation>
              <xs:documentation>The text output from the Code Interpreter tool call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="image" type="schemas:RunStepDeltaStepDetailsToolCallsCodeOutputImageObject_image" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDeltaStepDetailsToolCallsCodeOutputImageObject">
        <xs:sequence>
          <xs:element minOccurs="1" name="index" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The index of the output in the outputs array.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;image&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="image" type="schemas:RunStepDeltaStepDetailsToolCallsCodeOutputImageObject_image" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImage">
        <xs:sequence>
          <xs:element minOccurs="0" name="file_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The [file](/docs/api-reference/files) ID of the image.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject">
        <xs:annotation>
          <xs:documentation>Text output from the Code Interpreter tool call as part of a run step.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="index" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The index of the output in the outputs array.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;logs&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="logs" type="xs:string">
            <xs:annotation>
              <xs:documentation>The text output from the Code Interpreter tool call.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDeltaStepDetailsToolCallsFunctionObject">
        <xs:sequence>
          <xs:element minOccurs="1" name="index" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The index of the tool call in the tool calls array.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the tool call object.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of tool call. This is always going to be &#x60;function&#x60; for this type of tool call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="function" type="schemas:RunStepDeltaStepDetailsToolCallsFunctionObject_function" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDeltaStepDetailsToolCallsFunctionObjectFunction">
        <xs:annotation>
          <xs:documentation>The definition of the function that was called.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the function.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="arguments" type="xs:string">
            <xs:annotation>
              <xs:documentation>The arguments passed to the function.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="output" type="xs:string">
            <xs:annotation>
              <xs:documentation>The output of the function. This will be &#x60;null&#x60; if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDeltaStepDetailsToolCallsObject">
        <xs:annotation>
          <xs:documentation>Details of the tool call.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;tool_calls&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="tool_calls" type="schemas:RunStepDeltaStepDetailsToolCallsObject_tool_calls_inner">
            <xs:annotation>
              <xs:documentation>An array of tool calls the run step was involved in. These can be associated with one of three types of tools: &#x60;code_interpreter&#x60;, &#x60;retrieval&#x60;, or &#x60;function&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDeltaStepDetailsToolCallsObjectToolCallsInner">
        <xs:sequence>
          <xs:element minOccurs="1" name="index" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The index of the tool call in the tool calls array.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the tool call object.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of tool call. This is always going to be &#x60;code_interpreter&#x60; for this type of tool call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="code_interpreter" type="schemas:RunStepDeltaStepDetailsToolCallsCodeObject_code_interpreter" />
          <xs:element minOccurs="0" name="retrieval" type="xs:anyType">
            <xs:annotation>
              <xs:documentation>For now, this is always going to be an empty object.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="function" type="schemas:RunStepDeltaStepDetailsToolCallsFunctionObject_function" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDeltaStepDetailsToolCallsRetrievalObject">
        <xs:sequence>
          <xs:element minOccurs="1" name="index" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The index of the tool call in the tool calls array.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the tool call object.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of tool call. This is always going to be &#x60;retrieval&#x60; for this type of tool call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="retrieval" type="xs:anyType">
            <xs:annotation>
              <xs:documentation>For now, this is always going to be an empty object.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDetailsMessageCreationObject">
        <xs:annotation>
          <xs:documentation>Details of the message creation by the run step.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;message_creation&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="message_creation" type="schemas:RunStepDetailsMessageCreationObject_message_creation" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDetailsMessageCreationObjectMessageCreation">
        <xs:sequence>
          <xs:element minOccurs="1" name="message_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the message that was created by this run step.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDetailsToolCallsCodeObject">
        <xs:annotation>
          <xs:documentation>Details of the Code Interpreter tool call the run step was involved in.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the tool call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of tool call. This is always going to be &#x60;code_interpreter&#x60; for this type of tool call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="code_interpreter" type="schemas:RunStepDetailsToolCallsCodeObject_code_interpreter" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDetailsToolCallsCodeObjectCodeInterpreter">
        <xs:annotation>
          <xs:documentation>The Code Interpreter tool call definition.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="input" type="xs:string">
            <xs:annotation>
              <xs:documentation>The input to the Code Interpreter tool call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="outputs" type="schemas:RunStepDetailsToolCallsCodeObject_code_interpreter_outputs_inner">
            <xs:annotation>
              <xs:documentation>The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (&#x60;logs&#x60;) or images (&#x60;image&#x60;). Each of these are represented by a different object type.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner">
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;logs&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="logs" type="xs:string">
            <xs:annotation>
              <xs:documentation>The text output from the Code Interpreter tool call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="image" type="schemas:RunStepDetailsToolCallsCodeOutputImageObject_image" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDetailsToolCallsCodeOutputImageObject">
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;image&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="image" type="schemas:RunStepDetailsToolCallsCodeOutputImageObject_image" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDetailsToolCallsCodeOutputImageObjectImage">
        <xs:sequence>
          <xs:element minOccurs="1" name="file_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The [file](/docs/api-reference/files) ID of the image.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDetailsToolCallsCodeOutputLogsObject">
        <xs:annotation>
          <xs:documentation>Text output from the Code Interpreter tool call as part of a run step.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;logs&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="logs" type="xs:string">
            <xs:annotation>
              <xs:documentation>The text output from the Code Interpreter tool call.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDetailsToolCallsFunctionObject">
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the tool call object.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of tool call. This is always going to be &#x60;function&#x60; for this type of tool call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="function" type="schemas:RunStepDetailsToolCallsFunctionObject_function" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDetailsToolCallsFunctionObjectFunction">
        <xs:annotation>
          <xs:documentation>The definition of the function that was called.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the function.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="arguments" type="xs:string">
            <xs:annotation>
              <xs:documentation>The arguments passed to the function.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="output" type="xs:string">
            <xs:annotation>
              <xs:documentation>The output of the function. This will be &#x60;null&#x60; if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDetailsToolCallsObject">
        <xs:annotation>
          <xs:documentation>Details of the tool call.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;tool_calls&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="tool_calls" type="schemas:RunStepDetailsToolCallsObject_tool_calls_inner">
            <xs:annotation>
              <xs:documentation>An array of tool calls the run step was involved in. These can be associated with one of three types of tools: &#x60;code_interpreter&#x60;, &#x60;retrieval&#x60;, or &#x60;function&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDetailsToolCallsObjectToolCallsInner">
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the tool call object.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of tool call. This is always going to be &#x60;code_interpreter&#x60; for this type of tool call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="code_interpreter" type="schemas:RunStepDetailsToolCallsCodeObject_code_interpreter" />
          <xs:element minOccurs="1" name="retrieval" type="xs:anyType">
            <xs:annotation>
              <xs:documentation>For now, this is always going to be an empty object.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="function" type="schemas:RunStepDetailsToolCallsFunctionObject_function" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepDetailsToolCallsRetrievalObject">
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the tool call object.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of tool call. This is always going to be &#x60;retrieval&#x60; for this type of tool call.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="retrieval" type="xs:anyType">
            <xs:annotation>
              <xs:documentation>For now, this is always going to be an empty object.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepObject">
        <xs:annotation>
          <xs:documentation>Represents a step in execution of a run. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The identifier of the run step, which can be referenced in API endpoints.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always &#x60;thread.run.step&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="created_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the run step was created.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="assistant_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="thread_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the [thread](/docs/api-reference/threads) that was run.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="run_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the [run](/docs/api-reference/runs) that this run step is a part of.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of run step, which can be either &#x60;message_creation&#x60; or &#x60;tool_calls&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="status" type="schemas:Status">
            <xs:annotation>
              <xs:documentation>The status of the run step, which can be either &#x60;in_progress&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="step_details" type="schemas:RunStepObject_step_details" />
          <xs:element minOccurs="1" name="last_error" type="schemas:RunStepObject_last_error" />
          <xs:element minOccurs="1" name="expired_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="cancelled_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the run step was cancelled.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="failed_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the run step failed.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="completed_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the run step completed.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="metadata" type="xs:anyType">
            <xs:annotation>
              <xs:documentation>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="usage" type="schemas:RunStepCompletionUsage" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepObjectLastError">
        <xs:annotation>
          <xs:documentation>The last error associated with this run step. Will be &#x60;null&#x60; if there are no errors.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="code" type="schemas:Code">
            <xs:annotation>
              <xs:documentation>One of &#x60;server_error&#x60; or &#x60;rate_limit_exceeded&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="message" type="xs:string">
            <xs:annotation>
              <xs:documentation>A human-readable description of the error.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepObjectStepDetails">
        <xs:annotation>
          <xs:documentation>The details of the run step.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Always &#x60;message_creation&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="message_creation" type="schemas:RunStepDetailsMessageCreationObject_message_creation" />
          <xs:element minOccurs="1" maxOccurs="unbounded" name="tool_calls" type="schemas:RunStepDetailsToolCallsObject_tool_calls_inner">
            <xs:annotation>
              <xs:documentation>An array of tool calls the run step was involved in. These can be associated with one of three types of tools: &#x60;code_interpreter&#x60;, &#x60;retrieval&#x60;, or &#x60;function&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepStreamEvent">
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:RunStepObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepStreamEventOneOf">
        <xs:annotation>
          <xs:documentation>Occurs when a [run step](/docs/api-reference/runs/step-object) is created.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:RunStepObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepStreamEventOneOf1">
        <xs:annotation>
          <xs:documentation>Occurs when a [run step](/docs/api-reference/runs/step-object) moves to an &#x60;in_progress&#x60; state.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:RunStepObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepStreamEventOneOf2">
        <xs:annotation>
          <xs:documentation>Occurs when parts of a [run step](/docs/api-reference/runs/step-object) are being streamed.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:RunStepDeltaObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepStreamEventOneOf3">
        <xs:annotation>
          <xs:documentation>Occurs when a [run step](/docs/api-reference/runs/step-object) is completed.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:RunStepObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepStreamEventOneOf4">
        <xs:annotation>
          <xs:documentation>Occurs when a [run step](/docs/api-reference/runs/step-object) fails.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:RunStepObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepStreamEventOneOf5">
        <xs:annotation>
          <xs:documentation>Occurs when a [run step](/docs/api-reference/runs/step-object) is cancelled.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:RunStepObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStepStreamEventOneOf6">
        <xs:annotation>
          <xs:documentation>Occurs when a [run step](/docs/api-reference/runs/step-object) expires.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:RunStepObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStreamEvent">
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:RunObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStreamEventOneOf">
        <xs:annotation>
          <xs:documentation>Occurs when a new [run](/docs/api-reference/runs/object) is created.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:RunObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStreamEventOneOf1">
        <xs:annotation>
          <xs:documentation>Occurs when a [run](/docs/api-reference/runs/object) moves to a &#x60;queued&#x60; status.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:RunObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStreamEventOneOf2">
        <xs:annotation>
          <xs:documentation>Occurs when a [run](/docs/api-reference/runs/object) moves to an &#x60;in_progress&#x60; status.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:RunObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStreamEventOneOf3">
        <xs:annotation>
          <xs:documentation>Occurs when a [run](/docs/api-reference/runs/object) moves to a &#x60;requires_action&#x60; status.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:RunObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStreamEventOneOf4">
        <xs:annotation>
          <xs:documentation>Occurs when a [run](/docs/api-reference/runs/object) is completed.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:RunObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStreamEventOneOf5">
        <xs:annotation>
          <xs:documentation>Occurs when a [run](/docs/api-reference/runs/object) fails.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:RunObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStreamEventOneOf6">
        <xs:annotation>
          <xs:documentation>Occurs when a [run](/docs/api-reference/runs/object) moves to a &#x60;cancelling&#x60; status.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:RunObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStreamEventOneOf7">
        <xs:annotation>
          <xs:documentation>Occurs when a [run](/docs/api-reference/runs/object) is cancelled.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:RunObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunStreamEventOneOf8">
        <xs:annotation>
          <xs:documentation>Occurs when a [run](/docs/api-reference/runs/object) expires.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:RunObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunToolCallObject">
        <xs:annotation>
          <xs:documentation>Tool call objects</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of tool call the output is required for. For now, this is always &#x60;function&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="function" type="schemas:RunToolCallObject_function" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RunToolCallObjectFunction">
        <xs:annotation>
          <xs:documentation>The function definition.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the function.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="arguments" type="xs:string">
            <xs:annotation>
              <xs:documentation>The arguments that the model expects you to pass to the function.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="SubmitToolOutputsRunRequest">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="tool_outputs" type="schemas:SubmitToolOutputsRunRequest_tool_outputs_inner">
            <xs:annotation>
              <xs:documentation>A list of tools for which the outputs are being submitted.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="stream" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>If &#x60;true&#x60;, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a &#x60;data: [DONE]&#x60; message. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="SubmitToolOutputsRunRequestToolOutputsInner">
        <xs:sequence>
          <xs:element minOccurs="0" name="tool_call_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the tool call in the &#x60;required_action&#x60; object within the run object the output is being submitted for.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="output" type="xs:string">
            <xs:annotation>
              <xs:documentation>The output of the tool call to be submitted to continue the run.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ThreadObject">
        <xs:annotation>
          <xs:documentation>Represents a thread that contains [messages](/docs/api-reference/messages).</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The identifier, which can be referenced in API endpoints.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="object" type="schemas:Object">
            <xs:annotation>
              <xs:documentation>The object type, which is always &#x60;thread&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="created_at" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The Unix timestamp (in seconds) for when the thread was created.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="metadata" type="xs:anyType">
            <xs:annotation>
              <xs:documentation>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ThreadStreamEvent">
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:ThreadObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ThreadStreamEventOneOf">
        <xs:annotation>
          <xs:documentation>Occurs when a new [thread](/docs/api-reference/threads/object) is created.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" name="event" type="schemas:Event" />
          <xs:element minOccurs="1" name="data" type="schemas:ThreadObject" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="TranscriptionSegment">
        <xs:sequence>
          <xs:element minOccurs="1" name="id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Unique identifier of the segment.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="seek" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Seek offset of the segment.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="start" type="xs:float">
            <xs:annotation>
              <xs:documentation>Start time of the segment in seconds.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="end" type="xs:float">
            <xs:annotation>
              <xs:documentation>End time of the segment in seconds.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="text" type="xs:string">
            <xs:annotation>
              <xs:documentation>Text content of the segment.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="tokens" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Array of token IDs for the text content.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="temperature" type="xs:float">
            <xs:annotation>
              <xs:documentation>Temperature parameter used for generating the segment.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="avg_logprob" type="xs:float">
            <xs:annotation>
              <xs:documentation>Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="compression_ratio" type="xs:float">
            <xs:annotation>
              <xs:documentation>Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="no_speech_prob" type="xs:float">
            <xs:annotation>
              <xs:documentation>Probability of no speech in the segment. If the value is higher than 1.0 and the &#x60;avg_logprob&#x60; is below -1, consider this segment silent.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="TranscriptionWord">
        <xs:sequence>
          <xs:element minOccurs="1" name="word" type="xs:string">
            <xs:annotation>
              <xs:documentation>The text content of the word.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="start" type="xs:float">
            <xs:annotation>
              <xs:documentation>Start time of the word in seconds.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="end" type="xs:float">
            <xs:annotation>
              <xs:documentation>End time of the word in seconds.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="TruncationObject">
        <xs:sequence>
          <xs:element minOccurs="0" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The truncation strategy to use for the thread. The default is &#x60;auto&#x60;. If set to &#x60;last_messages&#x60;, the thread will be truncated to the n most recent messages in the thread. When set to &#x60;auto&#x60;, messages in the middle of the thread will be dropped to fit the context length of the model, &#x60;max_prompt_tokens&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="last_messages">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The number of most recent messages from the thread when constructing the context for the run.</xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="1" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always &#x60;assistant.file&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="assistant.file" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always &#x60;assistant&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="assistant" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of tool being defined: &#x60;code_interpreter&#x60;</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="code_interpreter" />
          <xs:enumeration value="retrieval" />
          <xs:enumeration value="function" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="done" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Data">
        <xs:restriction base="xs:string">
          <xs:enumeration value="[DONE]" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of tool being defined: &#x60;code_interpreter&#x60;</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="code_interpreter" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of tool being defined: &#x60;function&#x60;</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="function" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of tool being defined: &#x60;retrieval&#x60;</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="retrieval" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of the tool. If type is &#x60;function&#x60;, the function name must be set</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="function" />
          <xs:enumeration value="code_interpreter" />
          <xs:enumeration value="retrieval" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Must be one of &#x60;text&#x60; or &#x60;json_object&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="text" />
          <xs:enumeration value="json_object" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Must be one of &#x60;text&#x60; or &#x60;json_object&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="text" />
          <xs:enumeration value="json_object" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of the tool. If type is &#x60;function&#x60;, the function name must be set</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="function" />
          <xs:enumeration value="code_interpreter" />
          <xs:enumeration value="retrieval" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of the tool. Currently, only &#x60;function&#x60; is supported.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="function" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of the tool. Currently, only &#x60;function&#x60; is supported.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="function" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of the tool. Currently, only &#x60;function&#x60; is supported.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="function" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Role">
        <xs:annotation>
          <xs:documentation>The role of the messages author, in this case &#x60;assistant&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="assistant" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Role">
        <xs:annotation>
          <xs:documentation>The role of the messages author, in this case &#x60;function&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="function" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Role">
        <xs:annotation>
          <xs:documentation>The role of the messages author, in this case &#x60;function&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="function" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of the content part.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="text" />
          <xs:enumeration value="image_url" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of the content part.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="image_url" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Detail">
        <xs:annotation>
          <xs:documentation>Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision/low-or-high-fidelity-image-understanding).</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="auto" />
          <xs:enumeration value="low" />
          <xs:enumeration value="high" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of the content part.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="text" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Role">
        <xs:annotation>
          <xs:documentation>The role of the messages author, in this case &#x60;system&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="system" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Role">
        <xs:annotation>
          <xs:documentation>The role of the messages author, in this case &#x60;tool&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="tool" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Role">
        <xs:annotation>
          <xs:documentation>The role of the messages author, in this case &#x60;user&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="user" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Role">
        <xs:annotation>
          <xs:documentation>The role of the author of this message.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="assistant" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Role">
        <xs:annotation>
          <xs:documentation>The role of the author of this message.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="system" />
          <xs:enumeration value="user" />
          <xs:enumeration value="assistant" />
          <xs:enumeration value="tool" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of the tool. Currently, only &#x60;function&#x60; is supported.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="function" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of the tool. Currently, only &#x60;function&#x60; is supported.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="function" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always &#x60;chat.completion&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="chat.completion" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="FinishUnderscorereason">
        <xs:annotation>
          <xs:documentation>The reason the model stopped generating tokens. This will be &#x60;stop&#x60; if the model hit a natural stop point or a provided stop sequence, &#x60;length&#x60; if the maximum number of tokens specified in the request was reached, &#x60;content_filter&#x60; if content was omitted due to a flag from our content filters, or &#x60;function_call&#x60; if the model called a function. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="stop" />
          <xs:enumeration value="length" />
          <xs:enumeration value="function_call" />
          <xs:enumeration value="content_filter" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Must be one of &#x60;text&#x60; or &#x60;json_object&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="text" />
          <xs:enumeration value="json_object" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always &#x60;chat.completion&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="chat.completion" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="FinishUnderscorereason">
        <xs:annotation>
          <xs:documentation>The reason the model stopped generating tokens. This will be &#x60;stop&#x60; if the model hit a natural stop point or a provided stop sequence, &#x60;length&#x60; if the maximum number of tokens specified in the request was reached, &#x60;content_filter&#x60; if content was omitted due to a flag from our content filters, &#x60;tool_calls&#x60; if the model called a tool, or &#x60;function_call&#x60; (deprecated) if the model called a function. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="stop" />
          <xs:enumeration value="length" />
          <xs:enumeration value="tool_calls" />
          <xs:enumeration value="content_filter" />
          <xs:enumeration value="function_call" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always &#x60;chat.completion.chunk&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="chat.completion.chunk" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="FinishUnderscorereason">
        <xs:annotation>
          <xs:documentation>The reason the model stopped generating tokens. This will be &#x60;stop&#x60; if the model hit a natural stop point or a provided stop sequence, &#x60;length&#x60; if the maximum number of tokens specified in the request was reached, &#x60;content_filter&#x60; if content was omitted due to a flag from our content filters, &#x60;tool_calls&#x60; if the model called a tool, or &#x60;function_call&#x60; (deprecated) if the model called a function. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="stop" />
          <xs:enumeration value="length" />
          <xs:enumeration value="tool_calls" />
          <xs:enumeration value="content_filter" />
          <xs:enumeration value="function_call" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always \&quot;text_completion\&quot;</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="text_completion" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="FinishUnderscorereason">
        <xs:annotation>
          <xs:documentation>The reason the model stopped generating tokens. This will be &#x60;stop&#x60; if the model hit a natural stop point or a provided stop sequence, &#x60;length&#x60; if the maximum number of tokens specified in the request was reached, or &#x60;content_filter&#x60; if content was omitted due to a flag from our content filters. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="stop" />
          <xs:enumeration value="length" />
          <xs:enumeration value="content_filter" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EncodingUnderscoreformat">
        <xs:annotation>
          <xs:documentation>The format to return the embeddings in. Can be either &#x60;float&#x60; or [&#x60;base64&#x60;](https://pypi.org/project/pybase64/).</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="float" />
          <xs:enumeration value="base64" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always \&quot;list\&quot;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="list" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Quality">
        <xs:annotation>
          <xs:documentation>The quality of the image that will be generated. &#x60;hd&#x60; creates images with finer details and greater consistency across the image. This param is only supported for &#x60;dall-e-3&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="standard" />
          <xs:enumeration value="hd" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ResponseUnderscoreformat">
        <xs:annotation>
          <xs:documentation>The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="url" />
          <xs:enumeration value="b64_json" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Size">
        <xs:annotation>
          <xs:documentation>The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60; for &#x60;dall-e-2&#x60;. Must be one of &#x60;1024x1024&#x60;, &#x60;1792x1024&#x60;, or &#x60;1024x1792&#x60; for &#x60;dall-e-3&#x60; models.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="256x256" />
          <xs:enumeration value="512x512" />
          <xs:enumeration value="1024x1024" />
          <xs:enumeration value="1792x1024" />
          <xs:enumeration value="1024x1792" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Style">
        <xs:annotation>
          <xs:documentation>The style of the generated images. Must be one of &#x60;vivid&#x60; or &#x60;natural&#x60;. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for &#x60;dall-e-3&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="vivid" />
          <xs:enumeration value="natural" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Role">
        <xs:annotation>
          <xs:documentation>The role of the entity that is creating the message. Allowed values include: - &#x60;user&#x60;: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages. - &#x60;assistant&#x60;: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="user" />
          <xs:enumeration value="assistant" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Voice">
        <xs:annotation>
          <xs:documentation>The voice to use when generating the audio. Supported voices are &#x60;alloy&#x60;, &#x60;echo&#x60;, &#x60;fable&#x60;, &#x60;onyx&#x60;, &#x60;nova&#x60;, and &#x60;shimmer&#x60;. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="alloy" />
          <xs:enumeration value="echo" />
          <xs:enumeration value="fable" />
          <xs:enumeration value="onyx" />
          <xs:enumeration value="nova" />
          <xs:enumeration value="shimmer" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ResponseUnderscoreformat">
        <xs:annotation>
          <xs:documentation>The format to audio in. Supported formats are &#x60;mp3&#x60;, &#x60;opus&#x60;, &#x60;aac&#x60;, &#x60;flac&#x60;, &#x60;wav&#x60;, and &#x60;pcm&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="mp3" />
          <xs:enumeration value="opus" />
          <xs:enumeration value="aac" />
          <xs:enumeration value="flac" />
          <xs:enumeration value="wav" />
          <xs:enumeration value="pcm" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of tool being defined: &#x60;code_interpreter&#x60;</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="code_interpreter" />
          <xs:enumeration value="retrieval" />
          <xs:enumeration value="function" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:restriction base="xs:string">
          <xs:enumeration value="assistant.file.deleted" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:restriction base="xs:string">
          <xs:enumeration value="assistant.deleted" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:restriction base="xs:string">
          <xs:enumeration value="file" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.message.deleted" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.deleted" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="done" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Data">
        <xs:restriction base="xs:string">
          <xs:enumeration value="[DONE]" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always \&quot;embedding\&quot;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="embedding" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="error" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of the integration being enabled for the fine-tuning job</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="wandb" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always \&quot;fine_tuning.job\&quot;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="fine_tuning.job" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Status">
        <xs:annotation>
          <xs:documentation>The current status of the fine-tuning job, which can be either &#x60;validating_files&#x60;, &#x60;queued&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="validating_files" />
          <xs:enumeration value="queued" />
          <xs:enumeration value="running" />
          <xs:enumeration value="succeeded" />
          <xs:enumeration value="failed" />
          <xs:enumeration value="cancelled" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always \&quot;fine_tuning.job.checkpoint\&quot;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="fine_tuning.job.checkpoint" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Level">
        <xs:restriction base="xs:string">
          <xs:enumeration value="info" />
          <xs:enumeration value="warn" />
          <xs:enumeration value="error" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:restriction base="xs:string">
          <xs:enumeration value="fine_tuning.job.event" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of the integration being enabled for the fine-tuning job</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="wandb" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:restriction base="xs:string">
          <xs:enumeration value="list" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:restriction base="xs:string">
          <xs:enumeration value="list" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:restriction base="xs:string">
          <xs:enumeration value="list" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:restriction base="xs:string">
          <xs:enumeration value="list" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:restriction base="xs:string">
          <xs:enumeration value="list" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;image_file&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="image_file" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;file_citation&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="file_citation" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;file_path&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="file_path" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;text&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="text" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;file_citation&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="file_citation" />
          <xs:enumeration value="file_path" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;image_file&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="image_file" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;file_citation&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="file_citation" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;file_path&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="file_path" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;text&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="text" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;file_citation&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="file_citation" />
          <xs:enumeration value="file_path" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always &#x60;thread.message.delta&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.message.delta" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Role">
        <xs:annotation>
          <xs:documentation>The entity that produced the message. One of &#x60;user&#x60; or &#x60;assistant&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="user" />
          <xs:enumeration value="assistant" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;image_file&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="image_file" />
          <xs:enumeration value="text" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always &#x60;thread.message.file&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.message.file" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always &#x60;thread.message&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.message" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Status">
        <xs:annotation>
          <xs:documentation>The status of the message, which can be either &#x60;in_progress&#x60;, &#x60;incomplete&#x60;, or &#x60;completed&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="in_progress" />
          <xs:enumeration value="incomplete" />
          <xs:enumeration value="completed" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Role">
        <xs:annotation>
          <xs:documentation>The entity that produced the message. One of &#x60;user&#x60; or &#x60;assistant&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="user" />
          <xs:enumeration value="assistant" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;image_file&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="image_file" />
          <xs:enumeration value="text" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Reason">
        <xs:annotation>
          <xs:documentation>The reason the message is incomplete.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="content_filter" />
          <xs:enumeration value="max_tokens" />
          <xs:enumeration value="run_cancelled" />
          <xs:enumeration value="run_expired" />
          <xs:enumeration value="run_failed" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.message.incomplete" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.message.created" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.message.in_progress" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.message.delta" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.message.completed" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.message.incomplete" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always \&quot;model\&quot;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="model" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always &#x60;file&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="file" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Purpose">
        <xs:annotation>
          <xs:documentation>The intended purpose of the file. Supported values are &#x60;fine-tune&#x60;, &#x60;fine-tune-results&#x60;, &#x60;assistants&#x60;, and &#x60;assistants_output&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="fine-tune" />
          <xs:enumeration value="fine-tune-results" />
          <xs:enumeration value="assistants" />
          <xs:enumeration value="assistants_output" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Status">
        <xs:annotation>
          <xs:documentation>Deprecated. The current status of the file, which can be either &#x60;uploaded&#x60;, &#x60;processed&#x60;, or &#x60;error&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="uploaded" />
          <xs:enumeration value="processed" />
          <xs:enumeration value="error" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always &#x60;thread.run&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Status">
        <xs:annotation>
          <xs:documentation>The status of the run, which can be either &#x60;queued&#x60;, &#x60;in_progress&#x60;, &#x60;requires_action&#x60;, &#x60;cancelling&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="queued" />
          <xs:enumeration value="in_progress" />
          <xs:enumeration value="requires_action" />
          <xs:enumeration value="cancelling" />
          <xs:enumeration value="cancelled" />
          <xs:enumeration value="failed" />
          <xs:enumeration value="completed" />
          <xs:enumeration value="expired" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Reason">
        <xs:annotation>
          <xs:documentation>The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="max_completion_tokens" />
          <xs:enumeration value="max_prompt_tokens" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Code">
        <xs:annotation>
          <xs:documentation>One of &#x60;server_error&#x60;, &#x60;rate_limit_exceeded&#x60;, or &#x60;invalid_prompt&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="server_error" />
          <xs:enumeration value="rate_limit_exceeded" />
          <xs:enumeration value="invalid_prompt" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>For now, this is always &#x60;submit_tool_outputs&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="submit_tool_outputs" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always &#x60;thread.run.step.delta&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.step.delta" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;message_creation&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="message_creation" />
          <xs:enumeration value="tool_calls" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;message_creation&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="message_creation" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of tool call. This is always going to be &#x60;code_interpreter&#x60; for this type of tool call.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="code_interpreter" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;logs&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="logs" />
          <xs:enumeration value="image" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;image&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="image" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;logs&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="logs" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of tool call. This is always going to be &#x60;function&#x60; for this type of tool call.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="function" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;tool_calls&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="tool_calls" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of tool call. This is always going to be &#x60;code_interpreter&#x60; for this type of tool call.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="code_interpreter" />
          <xs:enumeration value="retrieval" />
          <xs:enumeration value="function" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of tool call. This is always going to be &#x60;retrieval&#x60; for this type of tool call.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="retrieval" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;message_creation&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="message_creation" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of tool call. This is always going to be &#x60;code_interpreter&#x60; for this type of tool call.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="code_interpreter" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;logs&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="logs" />
          <xs:enumeration value="image" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;image&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="image" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;logs&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="logs" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of tool call. This is always going to be &#x60;function&#x60; for this type of tool call.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="function" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;tool_calls&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="tool_calls" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of tool call. This is always going to be &#x60;code_interpreter&#x60; for this type of tool call.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="code_interpreter" />
          <xs:enumeration value="retrieval" />
          <xs:enumeration value="function" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of tool call. This is always going to be &#x60;retrieval&#x60; for this type of tool call.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="retrieval" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always &#x60;thread.run.step&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.step" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of run step, which can be either &#x60;message_creation&#x60; or &#x60;tool_calls&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="message_creation" />
          <xs:enumeration value="tool_calls" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Status">
        <xs:annotation>
          <xs:documentation>The status of the run step, which can be either &#x60;in_progress&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="in_progress" />
          <xs:enumeration value="cancelled" />
          <xs:enumeration value="failed" />
          <xs:enumeration value="completed" />
          <xs:enumeration value="expired" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Code">
        <xs:annotation>
          <xs:documentation>One of &#x60;server_error&#x60; or &#x60;rate_limit_exceeded&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="server_error" />
          <xs:enumeration value="rate_limit_exceeded" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>Always &#x60;message_creation&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="message_creation" />
          <xs:enumeration value="tool_calls" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.step.expired" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.step.created" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.step.in_progress" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.step.delta" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.step.completed" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.step.failed" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.step.cancelled" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.step.expired" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.expired" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.created" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.queued" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.in_progress" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.requires_action" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.completed" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.failed" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.cancelling" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.cancelled" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.run.expired" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of tool call the output is required for. For now, this is always &#x60;function&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="function" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Object">
        <xs:annotation>
          <xs:documentation>The object type, which is always &#x60;thread&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.created" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Event">
        <xs:restriction base="xs:string">
          <xs:enumeration value="thread.created" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The truncation strategy to use for the thread. The default is &#x60;auto&#x60;. If set to &#x60;last_messages&#x60;, the thread will be truncated to the n most recent messages in the thread. When set to &#x60;auto&#x60;, messages in the middle of the thread will be dropped to fit the context length of the model, &#x60;max_prompt_tokens&#x60;.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="auto" />
          <xs:enumeration value="last_messages" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ChatCompletionRequestUserMessage_content">
        <xs:annotation>
          <xs:documentation>The contents of the user message. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:oneOf&lt;string,array&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ChatCompletionRole">
        <xs:annotation>
          <xs:documentation>The role of the author of a message</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="system" />
          <xs:enumeration value="user" />
          <xs:enumeration value="assistant" />
          <xs:enumeration value="tool" />
          <xs:enumeration value="function" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateAssistantRequest_model">
        <xs:annotation>
          <xs:documentation>ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:anyOf&lt;string,string&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateChatCompletionRequest_model">
        <xs:annotation>
          <xs:documentation>ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:anyOf&lt;string,string&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateChatCompletionRequest_stop">
        <xs:annotation>
          <xs:documentation>Up to 4 sequences where the API will stop generating further tokens. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:oneOf&lt;string,array&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateCompletionRequest_model">
        <xs:annotation>
          <xs:documentation>ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:anyOf&lt;string,string&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateCompletionRequest_prompt">
        <xs:annotation>
          <xs:documentation>The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.  Note that &lt;|endoftext|&gt; is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:oneOf&lt;string,array,array,array&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateCompletionRequest_stop">
        <xs:annotation>
          <xs:documentation>Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:oneOf&lt;string,array&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateEmbeddingRequest_input">
        <xs:annotation>
          <xs:documentation>Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for &#x60;text-embedding-ada-002&#x60;), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:oneOf&lt;string,array,array,array&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateEmbeddingRequest_model">
        <xs:annotation>
          <xs:documentation>ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:anyOf&lt;string,string&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateFineTuningJobRequest_hyperparameters_batch_size">
        <xs:annotation>
          <xs:documentation>Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:oneOf&lt;string,integer&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateFineTuningJobRequest_hyperparameters_learning_rate_multiplier">
        <xs:annotation>
          <xs:documentation>Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:oneOf&lt;string,number&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateFineTuningJobRequest_hyperparameters_n_epochs">
        <xs:annotation>
          <xs:documentation>The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:oneOf&lt;string,integer&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateFineTuningJobRequest_integrations_inner_type">
        <xs:annotation>
          <xs:documentation>The type of integration to enable. Currently, only \&quot;wandb\&quot; (Weights and Biases) is supported. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:oneOf&lt;string&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateFineTuningJobRequest_model">
        <xs:annotation>
          <xs:documentation>The name of the model to fine-tune. You can select one of the [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned). </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:anyOf&lt;string,string&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateImageEditRequest_model">
        <xs:annotation>
          <xs:documentation>The model to use for image generation. Only &#x60;dall-e-2&#x60; is supported at this time.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:anyOf&lt;string,string&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateImageRequest_model">
        <xs:annotation>
          <xs:documentation>The model to use for image generation.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:anyOf&lt;string,string&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateModerationRequest_input">
        <xs:annotation>
          <xs:documentation>The input text to classify</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:oneOf&lt;string,array&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateModerationRequest_model">
        <xs:annotation>
          <xs:documentation>Two content moderations models are available: &#x60;text-moderation-stable&#x60; and &#x60;text-moderation-latest&#x60;.  The default is &#x60;text-moderation-latest&#x60; which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use &#x60;text-moderation-stable&#x60;, we will provide advanced notice before updating the model. Accuracy of &#x60;text-moderation-stable&#x60; may be slightly lower than for &#x60;text-moderation-latest&#x60;. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:anyOf&lt;string,string&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateRunRequest_model">
        <xs:annotation>
          <xs:documentation>The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:anyOf&lt;string,string&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateSpeechRequest_model">
        <xs:annotation>
          <xs:documentation>One of the available [TTS models](/docs/models/tts): &#x60;tts-1&#x60; or &#x60;tts-1-hd&#x60; </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:anyOf&lt;string,string&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CreateTranscriptionRequest_model">
        <xs:annotation>
          <xs:documentation>ID of the model to use. Only &#x60;whisper-1&#x60; (which is powered by our open source Whisper V2 model) is currently available. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:anyOf&lt;string,string&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="FineTuningJob_hyperparameters_n_epochs">
        <xs:annotation>
          <xs:documentation>The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. \&quot;auto\&quot; decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:oneOf&lt;string,integer&gt;">
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Order">
        <xs:restriction base="xs:string">
          <xs:enumeration value="ASC" />
          <xs:enumeration value="DESC" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Order">
        <xs:restriction base="xs:string">
          <xs:enumeration value="ASC" />
          <xs:enumeration value="DESC" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Order">
        <xs:restriction base="xs:string">
          <xs:enumeration value="ASC" />
          <xs:enumeration value="DESC" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Order">
        <xs:restriction base="xs:string">
          <xs:enumeration value="ASC" />
          <xs:enumeration value="DESC" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Order">
        <xs:restriction base="xs:string">
          <xs:enumeration value="ASC" />
          <xs:enumeration value="DESC" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Order">
        <xs:restriction base="xs:string">
          <xs:enumeration value="ASC" />
          <xs:enumeration value="DESC" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Response_format">
        <xs:restriction base="xs:string">
          <xs:enumeration value="JSON" />
          <xs:enumeration value="TEXT" />
          <xs:enumeration value="SRT" />
          <xs:enumeration value="VERBOSE_JSON" />
          <xs:enumeration value="VTT" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Timestamp_granularities[]">
        <xs:restriction base="xs:string">
          <xs:enumeration value="WORD" />
          <xs:enumeration value="SEGMENT" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Purpose">
        <xs:restriction base="xs:string">
          <xs:enumeration value="FINE_TUNE" />
          <xs:enumeration value="ASSISTANTS" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Size">
        <xs:restriction base="xs:string">
          <xs:enumeration value="_256X256" />
          <xs:enumeration value="_512X512" />
          <xs:enumeration value="_1024X1024" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Response_format">
        <xs:restriction base="xs:string">
          <xs:enumeration value="URL" />
          <xs:enumeration value="B64_JSON" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Response_format">
        <xs:restriction base="xs:string">
          <xs:enumeration value="URL" />
          <xs:enumeration value="B64_JSON" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Size">
        <xs:restriction base="xs:string">
          <xs:enumeration value="_256X256" />
          <xs:enumeration value="_512X512" />
          <xs:enumeration value="_1024X1024" />
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="PostThreadsRunsCancelByThread_idAndRun_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="threadId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the thread to which this run belongs.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="runId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the run to cancel.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostThreadsRunsCancelByThread_idAndRun_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="RunObject" type="schemas:RunObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostAssistants_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="body" type="schemas:CreateAssistantRequest" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostAssistants_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="AssistantObject" type="schemas:AssistantObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostAssistantsFilesByAssistant_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="assistantId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the assistant for which to create a File. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="body" type="schemas:CreateAssistantFileRequest" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostAssistantsFilesByAssistant_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="AssistantFileObject" type="schemas:AssistantFileObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostThreadsMessagesByThread_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="threadId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the [thread](/docs/api-reference/threads) to create a message for.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="body" type="schemas:CreateMessageRequest" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostThreadsMessagesByThread_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="MessageObject" type="schemas:MessageObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostThreadsRunsByThread_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="threadId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the thread to run.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="body" type="schemas:CreateRunRequest" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostThreadsRunsByThread_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="RunObject" type="schemas:RunObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostThreads_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="0" name="body" type="schemas:CreateThreadRequest" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostThreads_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ThreadObject" type="schemas:ThreadObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostThreadsRuns_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="body" type="schemas:CreateThreadAndRunRequest" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostThreadsRuns_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="RunObject" type="schemas:RunObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteAssistantsByAssistant_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="assistantId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the assistant to delete.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteAssistantsByAssistant_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="DeleteAssistantResponse" type="schemas:DeleteAssistantResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteAssistantsFilesByAssistant_idAndFile_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="assistantId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the assistant that the file belongs to.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="fileId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the file to delete.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteAssistantsFilesByAssistant_idAndFile_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="DeleteAssistantFileResponse" type="schemas:DeleteAssistantFileResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteThreadsByThread_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="threadId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the thread to delete.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteThreadsByThread_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="DeleteThreadResponse" type="schemas:DeleteThreadResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetAssistantsByAssistant_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="assistantId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the assistant to retrieve.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetAssistantsByAssistant_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="AssistantObject" type="schemas:AssistantObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetAssistantsFilesByAssistant_idAndFile_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="assistantId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the assistant who the file belongs to.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="fileId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the file we&#39;re getting.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetAssistantsFilesByAssistant_idAndFile_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="AssistantFileObject" type="schemas:AssistantFileObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetThreadsMessagesByThread_idAndMessage_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="threadId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="messageId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the message to retrieve.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetThreadsMessagesByThread_idAndMessage_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="MessageObject" type="schemas:MessageObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetThreadsMessagesFilesByThread_idAndMessage_idAndFile_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="threadId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the thread to which the message and File belong.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="messageId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the message the file belongs to.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="fileId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the file being retrieved.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetThreadsMessagesFilesByThread_idAndMessage_idAndFile_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="MessageFileObject" type="schemas:MessageFileObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetThreadsRunsByThread_idAndRun_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="threadId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the [thread](/docs/api-reference/threads) that was run.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="runId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the run to retrieve.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetThreadsRunsByThread_idAndRun_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="RunObject" type="schemas:RunObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetThreadsRunsStepsByThread_idAndRun_idAndStep_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="threadId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the thread to which the run and run step belongs.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="runId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the run to which the run step belongs.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="stepId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the run step to retrieve.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetThreadsRunsStepsByThread_idAndRun_idAndStep_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="RunStepObject" type="schemas:RunStepObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetThreadsByThread_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="threadId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the thread to retrieve.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetThreadsByThread_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ThreadObject" type="schemas:ThreadObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetAssistantsFilesByAssistant_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="assistantId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the assistant the file belongs to.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="20" name="limit" type="xs:integer">
            <xs:annotation>
              <xs:documentation>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="desc" name="order" type="schemas:Order">
            <xs:annotation>
              <xs:documentation>Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="after" type="xs:string">
            <xs:annotation>
              <xs:documentation>A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="before" type="xs:string">
            <xs:annotation>
              <xs:documentation>A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetAssistantsFilesByAssistant_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ListAssistantFilesResponse" type="schemas:ListAssistantFilesResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetAssistants_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="0" default="20" name="limit" type="xs:integer">
            <xs:annotation>
              <xs:documentation>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="desc" name="order" type="schemas:Order">
            <xs:annotation>
              <xs:documentation>Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="after" type="xs:string">
            <xs:annotation>
              <xs:documentation>A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="before" type="xs:string">
            <xs:annotation>
              <xs:documentation>A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetAssistants_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ListAssistantsResponse" type="schemas:ListAssistantsResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetThreadsMessagesFilesByThread_idAndMessage_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="threadId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the thread that the message and files belong to.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="messageId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the message that the files belongs to.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="20" name="limit" type="xs:integer">
            <xs:annotation>
              <xs:documentation>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="desc" name="order" type="schemas:Order">
            <xs:annotation>
              <xs:documentation>Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="after" type="xs:string">
            <xs:annotation>
              <xs:documentation>A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="before" type="xs:string">
            <xs:annotation>
              <xs:documentation>A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetThreadsMessagesFilesByThread_idAndMessage_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ListMessageFilesResponse" type="schemas:ListMessageFilesResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetThreadsMessagesByThread_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="threadId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the [thread](/docs/api-reference/threads) the messages belong to.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="20" name="limit" type="xs:integer">
            <xs:annotation>
              <xs:documentation>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="desc" name="order" type="schemas:Order">
            <xs:annotation>
              <xs:documentation>Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="after" type="xs:string">
            <xs:annotation>
              <xs:documentation>A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="before" type="xs:string">
            <xs:annotation>
              <xs:documentation>A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="runId" type="xs:string">
            <xs:annotation>
              <xs:documentation>Filter messages by the run ID that generated them. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetThreadsMessagesByThread_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ListMessagesResponse" type="schemas:ListMessagesResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetThreadsRunsStepsByThread_idAndRun_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="threadId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the thread the run and run steps belong to.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="runId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the run the run steps belong to.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="20" name="limit" type="xs:integer">
            <xs:annotation>
              <xs:documentation>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="desc" name="order" type="schemas:Order">
            <xs:annotation>
              <xs:documentation>Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="after" type="xs:string">
            <xs:annotation>
              <xs:documentation>A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="before" type="xs:string">
            <xs:annotation>
              <xs:documentation>A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetThreadsRunsStepsByThread_idAndRun_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ListRunStepsResponse" type="schemas:ListRunStepsResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetThreadsRunsByThread_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="threadId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the thread the run belongs to.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="20" name="limit" type="xs:integer">
            <xs:annotation>
              <xs:documentation>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="desc" name="order" type="schemas:Order">
            <xs:annotation>
              <xs:documentation>Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="after" type="xs:string">
            <xs:annotation>
              <xs:documentation>A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="before" type="xs:string">
            <xs:annotation>
              <xs:documentation>A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetThreadsRunsByThread_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ListRunsResponse" type="schemas:ListRunsResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostAssistantsByAssistant_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="assistantId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the assistant to modify.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="body" type="schemas:ModifyAssistantRequest" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostAssistantsByAssistant_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="AssistantObject" type="schemas:AssistantObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostThreadsMessagesByThread_idAndMessage_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="threadId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the thread to which this message belongs.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="messageId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the message to modify.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="body" type="schemas:ModifyMessageRequest" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostThreadsMessagesByThread_idAndMessage_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="MessageObject" type="schemas:MessageObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostThreadsRunsByThread_idAndRun_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="threadId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the [thread](/docs/api-reference/threads) that was run.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="runId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the run to modify.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="body" type="schemas:ModifyRunRequest" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostThreadsRunsByThread_idAndRun_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="RunObject" type="schemas:RunObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostThreadsByThread_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="threadId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="body" type="schemas:ModifyThreadRequest" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostThreadsByThread_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ThreadObject" type="schemas:ThreadObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostThreadsRunsSubmit_tool_outputsByThread_idAndRun_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="threadId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="runId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the run that requires the tool output submission.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="body" type="schemas:SubmitToolOutputsRunRequest" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostThreadsRunsSubmit_tool_outputsByThread_idAndRun_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="RunObject" type="schemas:RunObject">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostAudioSpeech_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="body" type="schemas:CreateSpeechRequest" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostAudioSpeech_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="response" type="xs:string">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostAudioTranscriptions_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="file" type="xs:hexBinary">
            <xs:annotation>
              <xs:documentation>The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="model" type="schemas:CreateTranscriptionRequest_model" />
          <xs:element minOccurs="0" name="language" type="xs:string">
            <xs:annotation>
              <xs:documentation>The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="prompt" type="xs:string">
            <xs:annotation>
              <xs:documentation>An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="json" name="responseFormat" type="schemas:Response_format">
            <xs:annotation>
              <xs:documentation>The format of the transcript output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="0" name="temperature" type="xs:bigdecimal">
            <xs:annotation>
              <xs:documentation>The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="timestampGranularitiesLeft_Square_BracketRight_Square_Bracket" type="schemas:Timestamp_granularities[]">
            <xs:annotation>
              <xs:documentation>The timestamp granularities to populate for this transcription. &#x60;response_format&#x60; must be set &#x60;verbose_json&#x60; to use timestamp granularities. Either or both of these options are supported: &#x60;word&#x60;, or &#x60;segment&#x60;. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostAudioTranscriptions_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="CreateTranscription_200_response" type="schemas:CreateTranscription_200_response">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostAudioTranslations_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="file" type="xs:hexBinary">
            <xs:annotation>
              <xs:documentation>The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="model" type="schemas:CreateTranscriptionRequest_model" />
          <xs:element minOccurs="0" name="prompt" type="xs:string">
            <xs:annotation>
              <xs:documentation>An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="json" name="responseFormat" type="xs:string">
            <xs:annotation>
              <xs:documentation>The format of the transcript output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="0" name="temperature" type="xs:bigdecimal">
            <xs:annotation>
              <xs:documentation>The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostAudioTranslations_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="CreateTranslation_200_response" type="schemas:CreateTranslation_200_response">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostChatCompletions_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="body" type="schemas:CreateChatCompletionRequest" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostChatCompletions_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="CreateChatCompletionResponse" type="schemas:CreateChatCompletionResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostCompletions_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="body" type="schemas:CreateCompletionRequest" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostCompletions_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="CreateCompletionResponse" type="schemas:CreateCompletionResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostEmbeddings_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="body" type="schemas:CreateEmbeddingRequest" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostEmbeddings_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="CreateEmbeddingResponse" type="schemas:CreateEmbeddingResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostFiles_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="file" type="xs:hexBinary">
            <xs:annotation>
              <xs:documentation>The File object (not file name) to be uploaded. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="purpose" type="schemas:Purpose">
            <xs:annotation>
              <xs:documentation>The intended purpose of the uploaded file.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tuning) and \\\&quot;assistants\\\&quot; for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostFiles_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="OpenAIFile" type="schemas:OpenAIFile">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteFilesByFile_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="fileId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the file to use for this request.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteFilesByFile_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="DeleteFileResponse" type="schemas:DeleteFileResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetFilesContentByFile_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="fileId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the file to use for this request.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetFilesContentByFile_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="String" type="schemas:String">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetFiles_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="0" name="purpose" type="xs:string">
            <xs:annotation>
              <xs:documentation>Only return files with the given purpose.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetFiles_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ListFilesResponse" type="schemas:ListFilesResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetFilesByFile_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="fileId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the file to use for this request.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetFilesByFile_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="OpenAIFile" type="schemas:OpenAIFile">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostFine_tuningJobsCancelByFine_tuning_job_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="fineTuningJobId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the fine-tuning job to cancel. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostFine_tuningJobsCancelByFine_tuning_job_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="FineTuningJob" type="schemas:FineTuningJob">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostFine_tuningJobs_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="body" type="schemas:CreateFineTuningJobRequest" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostFine_tuningJobs_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="FineTuningJob" type="schemas:FineTuningJob">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetFine_tuningJobsEventsByFine_tuning_job_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="fineTuningJobId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the fine-tuning job to get events for. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="after" type="xs:string">
            <xs:annotation>
              <xs:documentation>Identifier for the last event from the previous pagination request.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="20" name="limit" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Number of events to retrieve.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetFine_tuningJobsEventsByFine_tuning_job_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ListFineTuningJobEventsResponse" type="schemas:ListFineTuningJobEventsResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetFine_tuningJobsCheckpointsByFine_tuning_job_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="fineTuningJobId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the fine-tuning job to get checkpoints for. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="after" type="xs:string">
            <xs:annotation>
              <xs:documentation>Identifier for the last checkpoint ID from the previous pagination request.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="10" name="limit" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Number of checkpoints to retrieve.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetFine_tuningJobsCheckpointsByFine_tuning_job_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ListFineTuningJobCheckpointsResponse" type="schemas:ListFineTuningJobCheckpointsResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetFine_tuningJobs_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="0" name="after" type="xs:string">
            <xs:annotation>
              <xs:documentation>Identifier for the last job from the previous pagination request.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="20" name="limit" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Number of fine-tuning jobs to retrieve.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetFine_tuningJobs_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ListPaginatedFineTuningJobsResponse" type="schemas:ListPaginatedFineTuningJobsResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetFine_tuningJobsByFine_tuning_job_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="fineTuningJobId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the fine-tuning job. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetFine_tuningJobsByFine_tuning_job_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="FineTuningJob" type="schemas:FineTuningJob">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostImagesGenerations_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="body" type="schemas:CreateImageRequest" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostImagesGenerations_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ImagesResponse" type="schemas:ImagesResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostImagesEdits_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="image" type="xs:hexBinary">
            <xs:annotation>
              <xs:documentation>The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="prompt" type="xs:string">
            <xs:annotation>
              <xs:documentation>A text description of the desired image(s). The maximum length is 1000 characters.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="mask" type="xs:hexBinary">
            <xs:annotation>
              <xs:documentation>An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="model" type="schemas:CreateImageEditRequest_model" />
          <xs:element minOccurs="0" default="1" name="n">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The number of images to generate. Must be between 1 and 10.</xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:maxInclusive value="10" />
                <xs:minInclusive value="1" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" default="1024x1024" name="size" type="schemas:Size">
            <xs:annotation>
              <xs:documentation>The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="url" name="responseFormat" type="schemas:Response_format">
            <xs:annotation>
              <xs:documentation>The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="user" type="xs:string">
            <xs:annotation>
              <xs:documentation>A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostImagesEdits_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ImagesResponse" type="schemas:ImagesResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostImagesVariations_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="image" type="xs:hexBinary">
            <xs:annotation>
              <xs:documentation>The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="model" type="schemas:CreateImageEditRequest_model" />
          <xs:element minOccurs="0" default="1" name="n">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported.</xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:maxInclusive value="10" />
                <xs:minInclusive value="1" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" default="url" name="responseFormat" type="schemas:Response_format">
            <xs:annotation>
              <xs:documentation>The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="1024x1024" name="size" type="schemas:Size">
            <xs:annotation>
              <xs:documentation>The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="user" type="xs:string">
            <xs:annotation>
              <xs:documentation>A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostImagesVariations_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ImagesResponse" type="schemas:ImagesResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteModelsByModel_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="model" type="xs:string">
            <xs:annotation>
              <xs:documentation>The model to delete</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteModelsByModel_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="DeleteModelResponse" type="schemas:DeleteModelResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetModels_RequestMessage" />
      <xs:complexType name="GetModels_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ListModelsResponse" type="schemas:ListModelsResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetModelsByModel_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="model" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of the model to use for this request</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetModelsByModel_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="Model" type="schemas:Model">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostModerations_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="body" type="schemas:CreateModerationRequest" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostModerations_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="CreateModerationResponse" type="schemas:CreateModerationResponse">
            <xs:annotation>
              <xs:documentation>OK</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
  </types>
  <message name="PostThreadsRunsCancelByThread_idAndRun_id_RequestMessage">
    <part name="PostThreadsRunsCancelByThread_idAndRun_id_RequestMessage" element="schemas:PostThreadsRunsCancelByThread_idAndRun_id_RequestMessage" />
  </message>
  <message name="PostThreadsRunsCancelByThread_idAndRun_id_ResponseMessage">
    <part name="PostThreadsRunsCancelByThread_idAndRun_id_ResponseMessage" element="schemas:PostThreadsRunsCancelByThread_idAndRun_id_ResponseMessage" />
  </message>
  <message name="PostAssistants_RequestMessage">
    <part name="PostAssistants_RequestMessage" element="schemas:PostAssistants_RequestMessage" />
  </message>
  <message name="PostAssistants_ResponseMessage">
    <part name="PostAssistants_ResponseMessage" element="schemas:PostAssistants_ResponseMessage" />
  </message>
  <message name="PostAssistantsFilesByAssistant_id_RequestMessage">
    <part name="PostAssistantsFilesByAssistant_id_RequestMessage" element="schemas:PostAssistantsFilesByAssistant_id_RequestMessage" />
  </message>
  <message name="PostAssistantsFilesByAssistant_id_ResponseMessage">
    <part name="PostAssistantsFilesByAssistant_id_ResponseMessage" element="schemas:PostAssistantsFilesByAssistant_id_ResponseMessage" />
  </message>
  <message name="PostThreadsMessagesByThread_id_RequestMessage">
    <part name="PostThreadsMessagesByThread_id_RequestMessage" element="schemas:PostThreadsMessagesByThread_id_RequestMessage" />
  </message>
  <message name="PostThreadsMessagesByThread_id_ResponseMessage">
    <part name="PostThreadsMessagesByThread_id_ResponseMessage" element="schemas:PostThreadsMessagesByThread_id_ResponseMessage" />
  </message>
  <message name="PostThreadsRunsByThread_id_RequestMessage">
    <part name="PostThreadsRunsByThread_id_RequestMessage" element="schemas:PostThreadsRunsByThread_id_RequestMessage" />
  </message>
  <message name="PostThreadsRunsByThread_id_ResponseMessage">
    <part name="PostThreadsRunsByThread_id_ResponseMessage" element="schemas:PostThreadsRunsByThread_id_ResponseMessage" />
  </message>
  <message name="PostThreads_RequestMessage">
    <part name="PostThreads_RequestMessage" element="schemas:PostThreads_RequestMessage" />
  </message>
  <message name="PostThreads_ResponseMessage">
    <part name="PostThreads_ResponseMessage" element="schemas:PostThreads_ResponseMessage" />
  </message>
  <message name="PostThreadsRuns_RequestMessage">
    <part name="PostThreadsRuns_RequestMessage" element="schemas:PostThreadsRuns_RequestMessage" />
  </message>
  <message name="PostThreadsRuns_ResponseMessage">
    <part name="PostThreadsRuns_ResponseMessage" element="schemas:PostThreadsRuns_ResponseMessage" />
  </message>
  <message name="DeleteAssistantsByAssistant_id_RequestMessage">
    <part name="DeleteAssistantsByAssistant_id_RequestMessage" element="schemas:DeleteAssistantsByAssistant_id_RequestMessage" />
  </message>
  <message name="DeleteAssistantsByAssistant_id_ResponseMessage">
    <part name="DeleteAssistantsByAssistant_id_ResponseMessage" element="schemas:DeleteAssistantsByAssistant_id_ResponseMessage" />
  </message>
  <message name="DeleteAssistantsFilesByAssistant_idAndFile_id_RequestMessage">
    <part name="DeleteAssistantsFilesByAssistant_idAndFile_id_RequestMessage" element="schemas:DeleteAssistantsFilesByAssistant_idAndFile_id_RequestMessage" />
  </message>
  <message name="DeleteAssistantsFilesByAssistant_idAndFile_id_ResponseMessage">
    <part name="DeleteAssistantsFilesByAssistant_idAndFile_id_ResponseMessage" element="schemas:DeleteAssistantsFilesByAssistant_idAndFile_id_ResponseMessage" />
  </message>
  <message name="DeleteThreadsByThread_id_RequestMessage">
    <part name="DeleteThreadsByThread_id_RequestMessage" element="schemas:DeleteThreadsByThread_id_RequestMessage" />
  </message>
  <message name="DeleteThreadsByThread_id_ResponseMessage">
    <part name="DeleteThreadsByThread_id_ResponseMessage" element="schemas:DeleteThreadsByThread_id_ResponseMessage" />
  </message>
  <message name="GetAssistantsByAssistant_id_RequestMessage">
    <part name="GetAssistantsByAssistant_id_RequestMessage" element="schemas:GetAssistantsByAssistant_id_RequestMessage" />
  </message>
  <message name="GetAssistantsByAssistant_id_ResponseMessage">
    <part name="GetAssistantsByAssistant_id_ResponseMessage" element="schemas:GetAssistantsByAssistant_id_ResponseMessage" />
  </message>
  <message name="GetAssistantsFilesByAssistant_idAndFile_id_RequestMessage">
    <part name="GetAssistantsFilesByAssistant_idAndFile_id_RequestMessage" element="schemas:GetAssistantsFilesByAssistant_idAndFile_id_RequestMessage" />
  </message>
  <message name="GetAssistantsFilesByAssistant_idAndFile_id_ResponseMessage">
    <part name="GetAssistantsFilesByAssistant_idAndFile_id_ResponseMessage" element="schemas:GetAssistantsFilesByAssistant_idAndFile_id_ResponseMessage" />
  </message>
  <message name="GetThreadsMessagesByThread_idAndMessage_id_RequestMessage">
    <part name="GetThreadsMessagesByThread_idAndMessage_id_RequestMessage" element="schemas:GetThreadsMessagesByThread_idAndMessage_id_RequestMessage" />
  </message>
  <message name="GetThreadsMessagesByThread_idAndMessage_id_ResponseMessage">
    <part name="GetThreadsMessagesByThread_idAndMessage_id_ResponseMessage" element="schemas:GetThreadsMessagesByThread_idAndMessage_id_ResponseMessage" />
  </message>
  <message name="GetThreadsMessagesFilesByThread_idAndMessage_idAndFile_id_RequestMessage">
    <part name="GetThreadsMessagesFilesByThread_idAndMessage_idAndFile_id_RequestMessage" element="schemas:GetThreadsMessagesFilesByThread_idAndMessage_idAndFile_id_RequestMessage" />
  </message>
  <message name="GetThreadsMessagesFilesByThread_idAndMessage_idAndFile_id_ResponseMessage">
    <part name="GetThreadsMessagesFilesByThread_idAndMessage_idAndFile_id_ResponseMessage" element="schemas:GetThreadsMessagesFilesByThread_idAndMessage_idAndFile_id_ResponseMessage" />
  </message>
  <message name="GetThreadsRunsByThread_idAndRun_id_RequestMessage">
    <part name="GetThreadsRunsByThread_idAndRun_id_RequestMessage" element="schemas:GetThreadsRunsByThread_idAndRun_id_RequestMessage" />
  </message>
  <message name="GetThreadsRunsByThread_idAndRun_id_ResponseMessage">
    <part name="GetThreadsRunsByThread_idAndRun_id_ResponseMessage" element="schemas:GetThreadsRunsByThread_idAndRun_id_ResponseMessage" />
  </message>
  <message name="GetThreadsRunsStepsByThread_idAndRun_idAndStep_id_RequestMessage">
    <part name="GetThreadsRunsStepsByThread_idAndRun_idAndStep_id_RequestMessage" element="schemas:GetThreadsRunsStepsByThread_idAndRun_idAndStep_id_RequestMessage" />
  </message>
  <message name="GetThreadsRunsStepsByThread_idAndRun_idAndStep_id_ResponseMessage">
    <part name="GetThreadsRunsStepsByThread_idAndRun_idAndStep_id_ResponseMessage" element="schemas:GetThreadsRunsStepsByThread_idAndRun_idAndStep_id_ResponseMessage" />
  </message>
  <message name="GetThreadsByThread_id_RequestMessage">
    <part name="GetThreadsByThread_id_RequestMessage" element="schemas:GetThreadsByThread_id_RequestMessage" />
  </message>
  <message name="GetThreadsByThread_id_ResponseMessage">
    <part name="GetThreadsByThread_id_ResponseMessage" element="schemas:GetThreadsByThread_id_ResponseMessage" />
  </message>
  <message name="GetAssistantsFilesByAssistant_id_RequestMessage">
    <part name="GetAssistantsFilesByAssistant_id_RequestMessage" element="schemas:GetAssistantsFilesByAssistant_id_RequestMessage" />
  </message>
  <message name="GetAssistantsFilesByAssistant_id_ResponseMessage">
    <part name="GetAssistantsFilesByAssistant_id_ResponseMessage" element="schemas:GetAssistantsFilesByAssistant_id_ResponseMessage" />
  </message>
  <message name="GetAssistants_RequestMessage">
    <part name="GetAssistants_RequestMessage" element="schemas:GetAssistants_RequestMessage" />
  </message>
  <message name="GetAssistants_ResponseMessage">
    <part name="GetAssistants_ResponseMessage" element="schemas:GetAssistants_ResponseMessage" />
  </message>
  <message name="GetThreadsMessagesFilesByThread_idAndMessage_id_RequestMessage">
    <part name="GetThreadsMessagesFilesByThread_idAndMessage_id_RequestMessage" element="schemas:GetThreadsMessagesFilesByThread_idAndMessage_id_RequestMessage" />
  </message>
  <message name="GetThreadsMessagesFilesByThread_idAndMessage_id_ResponseMessage">
    <part name="GetThreadsMessagesFilesByThread_idAndMessage_id_ResponseMessage" element="schemas:GetThreadsMessagesFilesByThread_idAndMessage_id_ResponseMessage" />
  </message>
  <message name="GetThreadsMessagesByThread_id_RequestMessage">
    <part name="GetThreadsMessagesByThread_id_RequestMessage" element="schemas:GetThreadsMessagesByThread_id_RequestMessage" />
  </message>
  <message name="GetThreadsMessagesByThread_id_ResponseMessage">
    <part name="GetThreadsMessagesByThread_id_ResponseMessage" element="schemas:GetThreadsMessagesByThread_id_ResponseMessage" />
  </message>
  <message name="GetThreadsRunsStepsByThread_idAndRun_id_RequestMessage">
    <part name="GetThreadsRunsStepsByThread_idAndRun_id_RequestMessage" element="schemas:GetThreadsRunsStepsByThread_idAndRun_id_RequestMessage" />
  </message>
  <message name="GetThreadsRunsStepsByThread_idAndRun_id_ResponseMessage">
    <part name="GetThreadsRunsStepsByThread_idAndRun_id_ResponseMessage" element="schemas:GetThreadsRunsStepsByThread_idAndRun_id_ResponseMessage" />
  </message>
  <message name="GetThreadsRunsByThread_id_RequestMessage">
    <part name="GetThreadsRunsByThread_id_RequestMessage" element="schemas:GetThreadsRunsByThread_id_RequestMessage" />
  </message>
  <message name="GetThreadsRunsByThread_id_ResponseMessage">
    <part name="GetThreadsRunsByThread_id_ResponseMessage" element="schemas:GetThreadsRunsByThread_id_ResponseMessage" />
  </message>
  <message name="PostAssistantsByAssistant_id_RequestMessage">
    <part name="PostAssistantsByAssistant_id_RequestMessage" element="schemas:PostAssistantsByAssistant_id_RequestMessage" />
  </message>
  <message name="PostAssistantsByAssistant_id_ResponseMessage">
    <part name="PostAssistantsByAssistant_id_ResponseMessage" element="schemas:PostAssistantsByAssistant_id_ResponseMessage" />
  </message>
  <message name="PostThreadsMessagesByThread_idAndMessage_id_RequestMessage">
    <part name="PostThreadsMessagesByThread_idAndMessage_id_RequestMessage" element="schemas:PostThreadsMessagesByThread_idAndMessage_id_RequestMessage" />
  </message>
  <message name="PostThreadsMessagesByThread_idAndMessage_id_ResponseMessage">
    <part name="PostThreadsMessagesByThread_idAndMessage_id_ResponseMessage" element="schemas:PostThreadsMessagesByThread_idAndMessage_id_ResponseMessage" />
  </message>
  <message name="PostThreadsRunsByThread_idAndRun_id_RequestMessage">
    <part name="PostThreadsRunsByThread_idAndRun_id_RequestMessage" element="schemas:PostThreadsRunsByThread_idAndRun_id_RequestMessage" />
  </message>
  <message name="PostThreadsRunsByThread_idAndRun_id_ResponseMessage">
    <part name="PostThreadsRunsByThread_idAndRun_id_ResponseMessage" element="schemas:PostThreadsRunsByThread_idAndRun_id_ResponseMessage" />
  </message>
  <message name="PostThreadsByThread_id_RequestMessage">
    <part name="PostThreadsByThread_id_RequestMessage" element="schemas:PostThreadsByThread_id_RequestMessage" />
  </message>
  <message name="PostThreadsByThread_id_ResponseMessage">
    <part name="PostThreadsByThread_id_ResponseMessage" element="schemas:PostThreadsByThread_id_ResponseMessage" />
  </message>
  <message name="PostThreadsRunsSubmit_tool_outputsByThread_idAndRun_id_RequestMessage">
    <part name="PostThreadsRunsSubmit_tool_outputsByThread_idAndRun_id_RequestMessage" element="schemas:PostThreadsRunsSubmit_tool_outputsByThread_idAndRun_id_RequestMessage" />
  </message>
  <message name="PostThreadsRunsSubmit_tool_outputsByThread_idAndRun_id_ResponseMessage">
    <part name="PostThreadsRunsSubmit_tool_outputsByThread_idAndRun_id_ResponseMessage" element="schemas:PostThreadsRunsSubmit_tool_outputsByThread_idAndRun_id_ResponseMessage" />
  </message>
  <message name="PostAudioSpeech_RequestMessage">
    <part name="PostAudioSpeech_RequestMessage" element="schemas:PostAudioSpeech_RequestMessage" />
  </message>
  <message name="PostAudioSpeech_ResponseMessage">
    <part name="PostAudioSpeech_ResponseMessage" element="schemas:PostAudioSpeech_ResponseMessage" />
  </message>
  <message name="PostAudioTranscriptions_RequestMessage">
    <part name="PostAudioTranscriptions_RequestMessage" element="schemas:PostAudioTranscriptions_RequestMessage" />
  </message>
  <message name="PostAudioTranscriptions_ResponseMessage">
    <part name="PostAudioTranscriptions_ResponseMessage" element="schemas:PostAudioTranscriptions_ResponseMessage" />
  </message>
  <message name="PostAudioTranslations_RequestMessage">
    <part name="PostAudioTranslations_RequestMessage" element="schemas:PostAudioTranslations_RequestMessage" />
  </message>
  <message name="PostAudioTranslations_ResponseMessage">
    <part name="PostAudioTranslations_ResponseMessage" element="schemas:PostAudioTranslations_ResponseMessage" />
  </message>
  <message name="PostChatCompletions_RequestMessage">
    <part name="PostChatCompletions_RequestMessage" element="schemas:PostChatCompletions_RequestMessage" />
  </message>
  <message name="PostChatCompletions_ResponseMessage">
    <part name="PostChatCompletions_ResponseMessage" element="schemas:PostChatCompletions_ResponseMessage" />
  </message>
  <message name="PostCompletions_RequestMessage">
    <part name="PostCompletions_RequestMessage" element="schemas:PostCompletions_RequestMessage" />
  </message>
  <message name="PostCompletions_ResponseMessage">
    <part name="PostCompletions_ResponseMessage" element="schemas:PostCompletions_ResponseMessage" />
  </message>
  <message name="PostEmbeddings_RequestMessage">
    <part name="PostEmbeddings_RequestMessage" element="schemas:PostEmbeddings_RequestMessage" />
  </message>
  <message name="PostEmbeddings_ResponseMessage">
    <part name="PostEmbeddings_ResponseMessage" element="schemas:PostEmbeddings_ResponseMessage" />
  </message>
  <message name="PostFiles_RequestMessage">
    <part name="PostFiles_RequestMessage" element="schemas:PostFiles_RequestMessage" />
  </message>
  <message name="PostFiles_ResponseMessage">
    <part name="PostFiles_ResponseMessage" element="schemas:PostFiles_ResponseMessage" />
  </message>
  <message name="DeleteFilesByFile_id_RequestMessage">
    <part name="DeleteFilesByFile_id_RequestMessage" element="schemas:DeleteFilesByFile_id_RequestMessage" />
  </message>
  <message name="DeleteFilesByFile_id_ResponseMessage">
    <part name="DeleteFilesByFile_id_ResponseMessage" element="schemas:DeleteFilesByFile_id_ResponseMessage" />
  </message>
  <message name="GetFilesContentByFile_id_RequestMessage">
    <part name="GetFilesContentByFile_id_RequestMessage" element="schemas:GetFilesContentByFile_id_RequestMessage" />
  </message>
  <message name="GetFilesContentByFile_id_ResponseMessage">
    <part name="GetFilesContentByFile_id_ResponseMessage" element="schemas:GetFilesContentByFile_id_ResponseMessage" />
  </message>
  <message name="GetFiles_RequestMessage">
    <part name="GetFiles_RequestMessage" element="schemas:GetFiles_RequestMessage" />
  </message>
  <message name="GetFiles_ResponseMessage">
    <part name="GetFiles_ResponseMessage" element="schemas:GetFiles_ResponseMessage" />
  </message>
  <message name="GetFilesByFile_id_RequestMessage">
    <part name="GetFilesByFile_id_RequestMessage" element="schemas:GetFilesByFile_id_RequestMessage" />
  </message>
  <message name="GetFilesByFile_id_ResponseMessage">
    <part name="GetFilesByFile_id_ResponseMessage" element="schemas:GetFilesByFile_id_ResponseMessage" />
  </message>
  <message name="PostFine_tuningJobsCancelByFine_tuning_job_id_RequestMessage">
    <part name="PostFine_tuningJobsCancelByFine_tuning_job_id_RequestMessage" element="schemas:PostFine_tuningJobsCancelByFine_tuning_job_id_RequestMessage" />
  </message>
  <message name="PostFine_tuningJobsCancelByFine_tuning_job_id_ResponseMessage">
    <part name="PostFine_tuningJobsCancelByFine_tuning_job_id_ResponseMessage" element="schemas:PostFine_tuningJobsCancelByFine_tuning_job_id_ResponseMessage" />
  </message>
  <message name="PostFine_tuningJobs_RequestMessage">
    <part name="PostFine_tuningJobs_RequestMessage" element="schemas:PostFine_tuningJobs_RequestMessage" />
  </message>
  <message name="PostFine_tuningJobs_ResponseMessage">
    <part name="PostFine_tuningJobs_ResponseMessage" element="schemas:PostFine_tuningJobs_ResponseMessage" />
  </message>
  <message name="GetFine_tuningJobsEventsByFine_tuning_job_id_RequestMessage">
    <part name="GetFine_tuningJobsEventsByFine_tuning_job_id_RequestMessage" element="schemas:GetFine_tuningJobsEventsByFine_tuning_job_id_RequestMessage" />
  </message>
  <message name="GetFine_tuningJobsEventsByFine_tuning_job_id_ResponseMessage">
    <part name="GetFine_tuningJobsEventsByFine_tuning_job_id_ResponseMessage" element="schemas:GetFine_tuningJobsEventsByFine_tuning_job_id_ResponseMessage" />
  </message>
  <message name="GetFine_tuningJobsCheckpointsByFine_tuning_job_id_RequestMessage">
    <part name="GetFine_tuningJobsCheckpointsByFine_tuning_job_id_RequestMessage" element="schemas:GetFine_tuningJobsCheckpointsByFine_tuning_job_id_RequestMessage" />
  </message>
  <message name="GetFine_tuningJobsCheckpointsByFine_tuning_job_id_ResponseMessage">
    <part name="GetFine_tuningJobsCheckpointsByFine_tuning_job_id_ResponseMessage" element="schemas:GetFine_tuningJobsCheckpointsByFine_tuning_job_id_ResponseMessage" />
  </message>
  <message name="GetFine_tuningJobs_RequestMessage">
    <part name="GetFine_tuningJobs_RequestMessage" element="schemas:GetFine_tuningJobs_RequestMessage" />
  </message>
  <message name="GetFine_tuningJobs_ResponseMessage">
    <part name="GetFine_tuningJobs_ResponseMessage" element="schemas:GetFine_tuningJobs_ResponseMessage" />
  </message>
  <message name="GetFine_tuningJobsByFine_tuning_job_id_RequestMessage">
    <part name="GetFine_tuningJobsByFine_tuning_job_id_RequestMessage" element="schemas:GetFine_tuningJobsByFine_tuning_job_id_RequestMessage" />
  </message>
  <message name="GetFine_tuningJobsByFine_tuning_job_id_ResponseMessage">
    <part name="GetFine_tuningJobsByFine_tuning_job_id_ResponseMessage" element="schemas:GetFine_tuningJobsByFine_tuning_job_id_ResponseMessage" />
  </message>
  <message name="PostImagesGenerations_RequestMessage">
    <part name="PostImagesGenerations_RequestMessage" element="schemas:PostImagesGenerations_RequestMessage" />
  </message>
  <message name="PostImagesGenerations_ResponseMessage">
    <part name="PostImagesGenerations_ResponseMessage" element="schemas:PostImagesGenerations_ResponseMessage" />
  </message>
  <message name="PostImagesEdits_RequestMessage">
    <part name="PostImagesEdits_RequestMessage" element="schemas:PostImagesEdits_RequestMessage" />
  </message>
  <message name="PostImagesEdits_ResponseMessage">
    <part name="PostImagesEdits_ResponseMessage" element="schemas:PostImagesEdits_ResponseMessage" />
  </message>
  <message name="PostImagesVariations_RequestMessage">
    <part name="PostImagesVariations_RequestMessage" element="schemas:PostImagesVariations_RequestMessage" />
  </message>
  <message name="PostImagesVariations_ResponseMessage">
    <part name="PostImagesVariations_ResponseMessage" element="schemas:PostImagesVariations_ResponseMessage" />
  </message>
  <message name="DeleteModelsByModel_RequestMessage">
    <part name="DeleteModelsByModel_RequestMessage" element="schemas:DeleteModelsByModel_RequestMessage" />
  </message>
  <message name="DeleteModelsByModel_ResponseMessage">
    <part name="DeleteModelsByModel_ResponseMessage" element="schemas:DeleteModelsByModel_ResponseMessage" />
  </message>
  <message name="GetModels_RequestMessage">
    <part name="GetModels_RequestMessage" element="schemas:GetModels_RequestMessage" />
  </message>
  <message name="GetModels_ResponseMessage">
    <part name="GetModels_ResponseMessage" element="schemas:GetModels_ResponseMessage" />
  </message>
  <message name="GetModelsByModel_RequestMessage">
    <part name="GetModelsByModel_RequestMessage" element="schemas:GetModelsByModel_RequestMessage" />
  </message>
  <message name="GetModelsByModel_ResponseMessage">
    <part name="GetModelsByModel_ResponseMessage" element="schemas:GetModelsByModel_ResponseMessage" />
  </message>
  <message name="PostModerations_RequestMessage">
    <part name="PostModerations_RequestMessage" element="schemas:PostModerations_RequestMessage" />
  </message>
  <message name="PostModerations_ResponseMessage">
    <part name="PostModerations_ResponseMessage" element="schemas:PostModerations_ResponseMessage" />
  </message>
  <portType name="ServiceV1_PortType">
    <operation name="PostThreadsRunsCancelByThread_idAndRun_id">
      <documentation>Cancels a run that is &#x60;in_progress&#x60;.</documentation>
      <input message="wsdl:PostThreadsRunsCancelByThread_idAndRun_id_RequestMessage" />
      <output message="wsdl:PostThreadsRunsCancelByThread_idAndRun_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostAssistants">
      <documentation>Create an assistant with a model and instructions.</documentation>
      <input message="wsdl:PostAssistants_RequestMessage" />
      <output message="wsdl:PostAssistants_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostAssistantsFilesByAssistant_id">
      <documentation>Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).</documentation>
      <input message="wsdl:PostAssistantsFilesByAssistant_id_RequestMessage" />
      <output message="wsdl:PostAssistantsFilesByAssistant_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostThreadsMessagesByThread_id">
      <documentation>Create a message.</documentation>
      <input message="wsdl:PostThreadsMessagesByThread_id_RequestMessage" />
      <output message="wsdl:PostThreadsMessagesByThread_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostThreadsRunsByThread_id">
      <documentation>Create a run.</documentation>
      <input message="wsdl:PostThreadsRunsByThread_id_RequestMessage" />
      <output message="wsdl:PostThreadsRunsByThread_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostThreads">
      <documentation>Create a thread.</documentation>
      <input message="wsdl:PostThreads_RequestMessage" />
      <output message="wsdl:PostThreads_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostThreadsRuns">
      <documentation>Create a thread and run it in one request.</documentation>
      <input message="wsdl:PostThreadsRuns_RequestMessage" />
      <output message="wsdl:PostThreadsRuns_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="DeleteAssistantsByAssistant_id">
      <documentation>Delete an assistant.</documentation>
      <input message="wsdl:DeleteAssistantsByAssistant_id_RequestMessage" />
      <output message="wsdl:DeleteAssistantsByAssistant_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="DeleteAssistantsFilesByAssistant_idAndFile_id">
      <documentation>Delete an assistant file.</documentation>
      <input message="wsdl:DeleteAssistantsFilesByAssistant_idAndFile_id_RequestMessage" />
      <output message="wsdl:DeleteAssistantsFilesByAssistant_idAndFile_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="DeleteThreadsByThread_id">
      <documentation>Delete a thread.</documentation>
      <input message="wsdl:DeleteThreadsByThread_id_RequestMessage" />
      <output message="wsdl:DeleteThreadsByThread_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetAssistantsByAssistant_id">
      <documentation>Retrieves an assistant.</documentation>
      <input message="wsdl:GetAssistantsByAssistant_id_RequestMessage" />
      <output message="wsdl:GetAssistantsByAssistant_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetAssistantsFilesByAssistant_idAndFile_id">
      <documentation>Retrieves an AssistantFile.</documentation>
      <input message="wsdl:GetAssistantsFilesByAssistant_idAndFile_id_RequestMessage" />
      <output message="wsdl:GetAssistantsFilesByAssistant_idAndFile_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetThreadsMessagesByThread_idAndMessage_id">
      <documentation>Retrieve a message.</documentation>
      <input message="wsdl:GetThreadsMessagesByThread_idAndMessage_id_RequestMessage" />
      <output message="wsdl:GetThreadsMessagesByThread_idAndMessage_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetThreadsMessagesFilesByThread_idAndMessage_idAndFile_id">
      <documentation>Retrieves a message file.</documentation>
      <input message="wsdl:GetThreadsMessagesFilesByThread_idAndMessage_idAndFile_id_RequestMessage" />
      <output message="wsdl:GetThreadsMessagesFilesByThread_idAndMessage_idAndFile_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetThreadsRunsByThread_idAndRun_id">
      <documentation>Retrieves a run.</documentation>
      <input message="wsdl:GetThreadsRunsByThread_idAndRun_id_RequestMessage" />
      <output message="wsdl:GetThreadsRunsByThread_idAndRun_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetThreadsRunsStepsByThread_idAndRun_idAndStep_id">
      <documentation>Retrieves a run step.</documentation>
      <input message="wsdl:GetThreadsRunsStepsByThread_idAndRun_idAndStep_id_RequestMessage" />
      <output message="wsdl:GetThreadsRunsStepsByThread_idAndRun_idAndStep_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetThreadsByThread_id">
      <documentation>Retrieves a thread.</documentation>
      <input message="wsdl:GetThreadsByThread_id_RequestMessage" />
      <output message="wsdl:GetThreadsByThread_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetAssistantsFilesByAssistant_id">
      <documentation>Returns a list of assistant files.</documentation>
      <input message="wsdl:GetAssistantsFilesByAssistant_id_RequestMessage" />
      <output message="wsdl:GetAssistantsFilesByAssistant_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetAssistants">
      <documentation>Returns a list of assistants.</documentation>
      <input message="wsdl:GetAssistants_RequestMessage" />
      <output message="wsdl:GetAssistants_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetThreadsMessagesFilesByThread_idAndMessage_id">
      <documentation>Returns a list of message files.</documentation>
      <input message="wsdl:GetThreadsMessagesFilesByThread_idAndMessage_id_RequestMessage" />
      <output message="wsdl:GetThreadsMessagesFilesByThread_idAndMessage_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetThreadsMessagesByThread_id">
      <documentation>Returns a list of messages for a given thread.</documentation>
      <input message="wsdl:GetThreadsMessagesByThread_id_RequestMessage" />
      <output message="wsdl:GetThreadsMessagesByThread_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetThreadsRunsStepsByThread_idAndRun_id">
      <documentation>Returns a list of run steps belonging to a run.</documentation>
      <input message="wsdl:GetThreadsRunsStepsByThread_idAndRun_id_RequestMessage" />
      <output message="wsdl:GetThreadsRunsStepsByThread_idAndRun_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetThreadsRunsByThread_id">
      <documentation>Returns a list of runs belonging to a thread.</documentation>
      <input message="wsdl:GetThreadsRunsByThread_id_RequestMessage" />
      <output message="wsdl:GetThreadsRunsByThread_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostAssistantsByAssistant_id">
      <documentation>Modifies an assistant.</documentation>
      <input message="wsdl:PostAssistantsByAssistant_id_RequestMessage" />
      <output message="wsdl:PostAssistantsByAssistant_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostThreadsMessagesByThread_idAndMessage_id">
      <documentation>Modifies a message.</documentation>
      <input message="wsdl:PostThreadsMessagesByThread_idAndMessage_id_RequestMessage" />
      <output message="wsdl:PostThreadsMessagesByThread_idAndMessage_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostThreadsRunsByThread_idAndRun_id">
      <documentation>Modifies a run.</documentation>
      <input message="wsdl:PostThreadsRunsByThread_idAndRun_id_RequestMessage" />
      <output message="wsdl:PostThreadsRunsByThread_idAndRun_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostThreadsByThread_id">
      <documentation>Modifies a thread.</documentation>
      <input message="wsdl:PostThreadsByThread_id_RequestMessage" />
      <output message="wsdl:PostThreadsByThread_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostThreadsRunsSubmit_tool_outputsByThread_idAndRun_id">
      <documentation>When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. </documentation>
      <input message="wsdl:PostThreadsRunsSubmit_tool_outputsByThread_idAndRun_id_RequestMessage" />
      <output message="wsdl:PostThreadsRunsSubmit_tool_outputsByThread_idAndRun_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostAudioSpeech">
      <documentation>Generates audio from the input text.</documentation>
      <input message="wsdl:PostAudioSpeech_RequestMessage" />
      <output message="wsdl:PostAudioSpeech_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostAudioTranscriptions">
      <documentation>Transcribes audio into the input language.</documentation>
      <input message="wsdl:PostAudioTranscriptions_RequestMessage" />
      <output message="wsdl:PostAudioTranscriptions_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostAudioTranslations">
      <documentation>Translates audio into English.</documentation>
      <input message="wsdl:PostAudioTranslations_RequestMessage" />
      <output message="wsdl:PostAudioTranslations_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostChatCompletions">
      <documentation>Creates a model response for the given chat conversation.</documentation>
      <input message="wsdl:PostChatCompletions_RequestMessage" />
      <output message="wsdl:PostChatCompletions_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostCompletions">
      <documentation>Creates a completion for the provided prompt and parameters.</documentation>
      <input message="wsdl:PostCompletions_RequestMessage" />
      <output message="wsdl:PostCompletions_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostEmbeddings">
      <documentation>Creates an embedding vector representing the input text.</documentation>
      <input message="wsdl:PostEmbeddings_RequestMessage" />
      <output message="wsdl:PostEmbeddings_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostFiles">
      <documentation>Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports &#x60;.jsonl&#x60; files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. </documentation>
      <input message="wsdl:PostFiles_RequestMessage" />
      <output message="wsdl:PostFiles_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="DeleteFilesByFile_id">
      <documentation>Delete a file.</documentation>
      <input message="wsdl:DeleteFilesByFile_id_RequestMessage" />
      <output message="wsdl:DeleteFilesByFile_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetFilesContentByFile_id">
      <documentation>Returns the contents of the specified file.</documentation>
      <input message="wsdl:GetFilesContentByFile_id_RequestMessage" />
      <output message="wsdl:GetFilesContentByFile_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetFiles">
      <documentation>Returns a list of files that belong to the user&#39;s organization.</documentation>
      <input message="wsdl:GetFiles_RequestMessage" />
      <output message="wsdl:GetFiles_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetFilesByFile_id">
      <documentation>Returns information about a specific file.</documentation>
      <input message="wsdl:GetFilesByFile_id_RequestMessage" />
      <output message="wsdl:GetFilesByFile_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostFine_tuningJobsCancelByFine_tuning_job_id">
      <documentation>Immediately cancel a fine-tune job. </documentation>
      <input message="wsdl:PostFine_tuningJobsCancelByFine_tuning_job_id_RequestMessage" />
      <output message="wsdl:PostFine_tuningJobsCancelByFine_tuning_job_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostFine_tuningJobs">
      <documentation>Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) </documentation>
      <input message="wsdl:PostFine_tuningJobs_RequestMessage" />
      <output message="wsdl:PostFine_tuningJobs_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetFine_tuningJobsEventsByFine_tuning_job_id">
      <documentation>Get status updates for a fine-tuning job. </documentation>
      <input message="wsdl:GetFine_tuningJobsEventsByFine_tuning_job_id_RequestMessage" />
      <output message="wsdl:GetFine_tuningJobsEventsByFine_tuning_job_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetFine_tuningJobsCheckpointsByFine_tuning_job_id">
      <documentation>List checkpoints for a fine-tuning job. </documentation>
      <input message="wsdl:GetFine_tuningJobsCheckpointsByFine_tuning_job_id_RequestMessage" />
      <output message="wsdl:GetFine_tuningJobsCheckpointsByFine_tuning_job_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetFine_tuningJobs">
      <documentation>List your organization&#39;s fine-tuning jobs </documentation>
      <input message="wsdl:GetFine_tuningJobs_RequestMessage" />
      <output message="wsdl:GetFine_tuningJobs_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetFine_tuningJobsByFine_tuning_job_id">
      <documentation>Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) </documentation>
      <input message="wsdl:GetFine_tuningJobsByFine_tuning_job_id_RequestMessage" />
      <output message="wsdl:GetFine_tuningJobsByFine_tuning_job_id_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostImagesGenerations">
      <documentation>Creates an image given a prompt.</documentation>
      <input message="wsdl:PostImagesGenerations_RequestMessage" />
      <output message="wsdl:PostImagesGenerations_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostImagesEdits">
      <documentation>Creates an edited or extended image given an original image and a prompt.</documentation>
      <input message="wsdl:PostImagesEdits_RequestMessage" />
      <output message="wsdl:PostImagesEdits_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostImagesVariations">
      <documentation>Creates a variation of a given image.</documentation>
      <input message="wsdl:PostImagesVariations_RequestMessage" />
      <output message="wsdl:PostImagesVariations_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="DeleteModelsByModel">
      <documentation>Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.</documentation>
      <input message="wsdl:DeleteModelsByModel_RequestMessage" />
      <output message="wsdl:DeleteModelsByModel_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetModels">
      <documentation>Lists the currently available models, and provides basic information about each one such as the owner and availability.</documentation>
      <input message="wsdl:GetModels_RequestMessage" />
      <output message="wsdl:GetModels_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="GetModelsByModel">
      <documentation>Retrieves a model instance, providing basic information about the model such as the owner and permissioning.</documentation>
      <input message="wsdl:GetModelsByModel_RequestMessage" />
      <output message="wsdl:GetModelsByModel_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
    <operation name="PostModerations">
      <documentation>Classifies if text is potentially harmful.</documentation>
      <input message="wsdl:PostModerations_RequestMessage" />
      <output message="wsdl:PostModerations_ResponseMessage">
        <documentation>OK</documentation>
      </output>
    </operation>
  </portType>
  <binding name="ServiceV1_Binding" type="wsdl:ServiceV1_PortType">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
    <operation name="PostThreadsRunsCancelByThread_idAndRun_id">
      <soap:operation soapAction="PostThreadsRunsCancelByThread_idAndRun_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostAssistants">
      <soap:operation soapAction="PostAssistants" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostAssistantsFilesByAssistant_id">
      <soap:operation soapAction="PostAssistantsFilesByAssistant_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostThreadsMessagesByThread_id">
      <soap:operation soapAction="PostThreadsMessagesByThread_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostThreadsRunsByThread_id">
      <soap:operation soapAction="PostThreadsRunsByThread_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostThreads">
      <soap:operation soapAction="PostThreads" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostThreadsRuns">
      <soap:operation soapAction="PostThreadsRuns" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="DeleteAssistantsByAssistant_id">
      <soap:operation soapAction="DeleteAssistantsByAssistant_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="DeleteAssistantsFilesByAssistant_idAndFile_id">
      <soap:operation soapAction="DeleteAssistantsFilesByAssistant_idAndFile_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="DeleteThreadsByThread_id">
      <soap:operation soapAction="DeleteThreadsByThread_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetAssistantsByAssistant_id">
      <soap:operation soapAction="GetAssistantsByAssistant_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetAssistantsFilesByAssistant_idAndFile_id">
      <soap:operation soapAction="GetAssistantsFilesByAssistant_idAndFile_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetThreadsMessagesByThread_idAndMessage_id">
      <soap:operation soapAction="GetThreadsMessagesByThread_idAndMessage_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetThreadsMessagesFilesByThread_idAndMessage_idAndFile_id">
      <soap:operation soapAction="GetThreadsMessagesFilesByThread_idAndMessage_idAndFile_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetThreadsRunsByThread_idAndRun_id">
      <soap:operation soapAction="GetThreadsRunsByThread_idAndRun_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetThreadsRunsStepsByThread_idAndRun_idAndStep_id">
      <soap:operation soapAction="GetThreadsRunsStepsByThread_idAndRun_idAndStep_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetThreadsByThread_id">
      <soap:operation soapAction="GetThreadsByThread_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetAssistantsFilesByAssistant_id">
      <soap:operation soapAction="GetAssistantsFilesByAssistant_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetAssistants">
      <soap:operation soapAction="GetAssistants" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetThreadsMessagesFilesByThread_idAndMessage_id">
      <soap:operation soapAction="GetThreadsMessagesFilesByThread_idAndMessage_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetThreadsMessagesByThread_id">
      <soap:operation soapAction="GetThreadsMessagesByThread_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetThreadsRunsStepsByThread_idAndRun_id">
      <soap:operation soapAction="GetThreadsRunsStepsByThread_idAndRun_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetThreadsRunsByThread_id">
      <soap:operation soapAction="GetThreadsRunsByThread_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostAssistantsByAssistant_id">
      <soap:operation soapAction="PostAssistantsByAssistant_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostThreadsMessagesByThread_idAndMessage_id">
      <soap:operation soapAction="PostThreadsMessagesByThread_idAndMessage_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostThreadsRunsByThread_idAndRun_id">
      <soap:operation soapAction="PostThreadsRunsByThread_idAndRun_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostThreadsByThread_id">
      <soap:operation soapAction="PostThreadsByThread_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostThreadsRunsSubmit_tool_outputsByThread_idAndRun_id">
      <soap:operation soapAction="PostThreadsRunsSubmit_tool_outputsByThread_idAndRun_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostAudioSpeech">
      <soap:operation soapAction="PostAudioSpeech" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostAudioTranscriptions">
      <soap:operation soapAction="PostAudioTranscriptions" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostAudioTranslations">
      <soap:operation soapAction="PostAudioTranslations" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostChatCompletions">
      <soap:operation soapAction="PostChatCompletions" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostCompletions">
      <soap:operation soapAction="PostCompletions" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostEmbeddings">
      <soap:operation soapAction="PostEmbeddings" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostFiles">
      <soap:operation soapAction="PostFiles" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="DeleteFilesByFile_id">
      <soap:operation soapAction="DeleteFilesByFile_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetFilesContentByFile_id">
      <soap:operation soapAction="GetFilesContentByFile_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetFiles">
      <soap:operation soapAction="GetFiles" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetFilesByFile_id">
      <soap:operation soapAction="GetFilesByFile_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostFine_tuningJobsCancelByFine_tuning_job_id">
      <soap:operation soapAction="PostFine_tuningJobsCancelByFine_tuning_job_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostFine_tuningJobs">
      <soap:operation soapAction="PostFine_tuningJobs" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetFine_tuningJobsEventsByFine_tuning_job_id">
      <soap:operation soapAction="GetFine_tuningJobsEventsByFine_tuning_job_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetFine_tuningJobsCheckpointsByFine_tuning_job_id">
      <soap:operation soapAction="GetFine_tuningJobsCheckpointsByFine_tuning_job_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetFine_tuningJobs">
      <soap:operation soapAction="GetFine_tuningJobs" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetFine_tuningJobsByFine_tuning_job_id">
      <soap:operation soapAction="GetFine_tuningJobsByFine_tuning_job_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostImagesGenerations">
      <soap:operation soapAction="PostImagesGenerations" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostImagesEdits">
      <soap:operation soapAction="PostImagesEdits" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostImagesVariations">
      <soap:operation soapAction="PostImagesVariations" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="DeleteModelsByModel">
      <soap:operation soapAction="DeleteModelsByModel" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetModels">
      <soap:operation soapAction="GetModels" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetModelsByModel">
      <soap:operation soapAction="GetModelsByModel" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostModerations">
      <soap:operation soapAction="PostModerations" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
  </binding>
  <service name="ServiceV1">
    <documentation>The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.</documentation>
    <port name="default_Port" binding="wsdl:ServiceV1_Binding">
      <soap:address location="http://localhost/soap/ServiceV1" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
    </port>
  </service>
</definitions>